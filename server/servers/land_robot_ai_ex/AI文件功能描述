联众服务端提供的文件
    联众斗地主服务端只提供三个接口文件

    1>:OGLordRobotAIInterface.h  斗地主普通规则AI接口
        这个是斗地主普通规则的接口定义,是一个抽象类,实现里面所有抽象函数的子类就可以作为一个AI逻辑解决方案来使用.
        目前这个接口共有三个实现(即目前有三套普通规则的AI)
        a.无逻辑实现
            涉及文件 OGLordRbtAINull.h OGLordRbtAINull.cpp
            说明:这个AI是一个无逻辑的AI,只保证可以完成一局游戏(出最小牌或不出),没有智能逻辑代码
        b.2013年4月版本AI
            涉及文件 OGLordRbtAI.h OGLordRbtAI.cpp Robot.h AIUtils.h
            说明:这个是2013年4月,AI开发部根据原有的逻辑进行优化的AI逻辑
        c.2013年8月版本AI
            涉及文件 OGLordRbtAIClv.h OGLordRbtClv.cpp OGLordRbtAIClvDepd.h
            说明:这个是2013年11月蓝爷优化的一版AI,增加了看牌功能


    2>:OGSPLordLaiziRobotAIInterface.h 斗地主癞子规则AI接口
        这个是斗地主癞子规则的接口定义,也是一个抽象类,目前只有一个实现类
        a.2014年4月版本癞子AI
            涉及文件 COGLZLordRobotAI.h  Robot.h COGLZLordRobotAI.cpp LZAIUtils.h LZAIUtils.cpp
            说明:这个是AI开发部2014年4月做的一版癞子AI逻辑,目前还没有测试和上线

    3>:OGCardSenderInterface.h 斗地主发牌类
        这个类是一个专门负责牌型控制的类,由于牌型控制不需要上下文参数,所有这个函数中所有方法为静态方法.依赖参数进行输入和输出
        涉及到如下5个文件:
        OGCardSenderInterface.h OGLordRbtAIClvDepd.h initCard.cpp random.cpp random.h
        说明:这个发牌功能目前应该包含三个功能:
        a.普通规则模式下的发牌函数(输入:发牌配置 输出:牌组)
        b.癞子规则模式下的发牌函数(输入:发牌配置 输出:牌组 癞子牌型)
        c.发牌配置随机数函数(输入:发牌配置 输出:变动后的发牌配置)

        注:第三个功能之前没有提到过,所以原有接口中并没有提供对应的函数声明
           癞子模式的发牌的函数设计还处于待定状态,参数 以及 是否与普通发牌函数合并还有待商讨


版本过多所带来文件和定义的冲突问题:
项目合作还处于磨合期,这个是目前遇到的最紧要问题,我简单描述一下咱们可以一起商定解决一下
目前有4套AI(普通的3套,癞子的1套),外加一套发牌逻辑
这些逻辑中
服务端只关注业务,也就是说只关注接口的功能,于是有了上面的三个接口,只要把接口实现,可以顺利编译,别的服务器这边是不关注的.
AI开发这边关注的是逻辑实现,为了便于编程,在实现接口过程中定义了大量的 类 结构体 宏定义 枚举 工具函数.我这里统称"中间结构"
在多套智能业务中,这些定义的"中间结构"存在的大量的重复,同时增加了很多.h文件和.cpp文件
而且随着业务增多这些文件还会越来越多.
出现冲突和多重引用时,修改和合并代码都非常繁琐,有时不修改命名和结构甚至无法编译通过.

所以我这边推荐用下面这个办法解决这个问题:
1.共享所有定义
    我把所有的AI逻辑都发送给你们,你们在工程中全部添加进去,能复用的工具函数和结构定义就用以前的.
2.合并重复定义,统一成一组公用文件
    由于之前的AI也由你们编写,所有这个工作还要委托你们
    将所有非接口和非接口实现的的.h和.cpp文件合并成如下三个文件
    a.OGRobotAIDef.h (这个里面包含所有的AI开发过程中所需的枚举 结构体 宏定义)
    b.OGRobotAITool.h (这个里面包含了一个静态类 COGRobotAITool, 将所有AI开发过程中的所需的工具函数都做成这个类的静态成员方法)
    c.OGRobotAITool.cpp (这个文件是COGRobotAITool的实现文件)
    如果可以实现上述工作,代码的工整性和复用性都会有很大的提高
3.冗余代码清理
    实现第2条后,服务端以后提需求,值提供一个虚函数接口 或者一个函数声明
    AI开发这边返回的代码就是整个AI目录下的结构,是一个代码包,而不是一个工程目录,里面不包含测试代码 日志代码等服务器端不关注的内容

    这邮件写的非常非常的啰嗦,但是所说的问题都是现在严重干扰合作效率的重要事情,还请各位多多分析.
    相信搞定上述问题后合作做工会有质的提升

