// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: slot_logic_msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "slot_logic_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace net {

namespace {

const ::google::protobuf::Descriptor* pos_pics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pos_pics_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_slot_game_spin_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_slot_game_spin_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_slot_game_spin_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_slot_game_spin_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_slot_game_play_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_slot_game_play_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_slot_game_jackpot_score_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_slot_game_jackpot_score_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_slot_game_error_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_slot_game_error_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_send_slot_master_ctrl_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_send_slot_master_ctrl_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_send_slot_master_ctrl_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_send_slot_master_ctrl_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_send_slot_master_ctrl_info_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_send_slot_master_ctrl_info_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_show_slot_master_ctrl_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_show_slot_master_ctrl_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_show_slot_master_ctrl_info_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_show_slot_master_ctrl_info_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_update_slot_master_show_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_update_slot_master_show_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_update_slot_master_show_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_update_slot_master_show_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_update_slot_master_show_info_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_update_slot_master_show_info_rep_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_slot_5flogic_5fmsg_2eproto() {
  protobuf_AddDesc_slot_5flogic_5fmsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "slot_logic_msg.proto");
  GOOGLE_CHECK(file != NULL);
  pos_pics_descriptor_ = file->message_type(0);
  static const int pos_pics_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pos_pics, pic_),
  };
  pos_pics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pos_pics_descriptor_,
      pos_pics::default_instance_,
      pos_pics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pos_pics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pos_pics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pos_pics));
  msg_slot_game_spin_req_descriptor_ = file->message_type(1);
  static const int msg_slot_game_spin_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_slot_game_spin_req, linenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_slot_game_spin_req, betperline_),
  };
  msg_slot_game_spin_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_slot_game_spin_req_descriptor_,
      msg_slot_game_spin_req::default_instance_,
      msg_slot_game_spin_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_slot_game_spin_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_slot_game_spin_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_slot_game_spin_req));
  msg_slot_game_spin_rep_descriptor_ = file->message_type(2);
  static const int msg_slot_game_spin_rep_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_slot_game_spin_rep, pics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_slot_game_spin_rep, freetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_slot_game_spin_rep, winscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_slot_game_spin_rep, userscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_slot_game_spin_rep, winjackpot_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_slot_game_spin_rep, jackpot_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_slot_game_spin_rep, free_winscore_),
  };
  msg_slot_game_spin_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_slot_game_spin_rep_descriptor_,
      msg_slot_game_spin_rep::default_instance_,
      msg_slot_game_spin_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_slot_game_spin_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_slot_game_spin_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_slot_game_spin_rep));
  msg_slot_game_play_info_descriptor_ = file->message_type(3);
  static const int msg_slot_game_play_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_slot_game_play_info, freetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_slot_game_play_info, game_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_slot_game_play_info, userscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_slot_game_play_info, jackpot_score_),
  };
  msg_slot_game_play_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_slot_game_play_info_descriptor_,
      msg_slot_game_play_info::default_instance_,
      msg_slot_game_play_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_slot_game_play_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_slot_game_play_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_slot_game_play_info));
  msg_slot_game_jackpot_score_descriptor_ = file->message_type(4);
  static const int msg_slot_game_jackpot_score_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_slot_game_jackpot_score, score_),
  };
  msg_slot_game_jackpot_score_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_slot_game_jackpot_score_descriptor_,
      msg_slot_game_jackpot_score::default_instance_,
      msg_slot_game_jackpot_score_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_slot_game_jackpot_score, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_slot_game_jackpot_score, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_slot_game_jackpot_score));
  msg_slot_game_error_rep_descriptor_ = file->message_type(5);
  static const int msg_slot_game_error_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_slot_game_error_rep, result_),
  };
  msg_slot_game_error_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_slot_game_error_rep_descriptor_,
      msg_slot_game_error_rep::default_instance_,
      msg_slot_game_error_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_slot_game_error_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_slot_game_error_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_slot_game_error_rep));
  msg_send_slot_master_ctrl_info_descriptor_ = file->message_type(6);
  static const int msg_send_slot_master_ctrl_info_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_send_slot_master_ctrl_info, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_send_slot_master_ctrl_info, min_multiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_send_slot_master_ctrl_info, max_multiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_send_slot_master_ctrl_info, ran_min_multiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_send_slot_master_ctrl_info, ran_max_multiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_send_slot_master_ctrl_info, all_lost_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_send_slot_master_ctrl_info, lost_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_send_slot_master_ctrl_info, all_win_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_send_slot_master_ctrl_info, win_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_send_slot_master_ctrl_info, free_spin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_send_slot_master_ctrl_info, jackpot_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_send_slot_master_ctrl_info, all_pre_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_send_slot_master_ctrl_info, pre_count_),
  };
  msg_send_slot_master_ctrl_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_send_slot_master_ctrl_info_descriptor_,
      msg_send_slot_master_ctrl_info::default_instance_,
      msg_send_slot_master_ctrl_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_send_slot_master_ctrl_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_send_slot_master_ctrl_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_send_slot_master_ctrl_info));
  msg_send_slot_master_ctrl_info_req_descriptor_ = file->message_type(7);
  static const int msg_send_slot_master_ctrl_info_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_send_slot_master_ctrl_info_req, oper_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_send_slot_master_ctrl_info_req, rand_pro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_send_slot_master_ctrl_info_req, info_),
  };
  msg_send_slot_master_ctrl_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_send_slot_master_ctrl_info_req_descriptor_,
      msg_send_slot_master_ctrl_info_req::default_instance_,
      msg_send_slot_master_ctrl_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_send_slot_master_ctrl_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_send_slot_master_ctrl_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_send_slot_master_ctrl_info_req));
  msg_send_slot_master_ctrl_info_rep_descriptor_ = file->message_type(8);
  static const int msg_send_slot_master_ctrl_info_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_send_slot_master_ctrl_info_rep, result_),
  };
  msg_send_slot_master_ctrl_info_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_send_slot_master_ctrl_info_rep_descriptor_,
      msg_send_slot_master_ctrl_info_rep::default_instance_,
      msg_send_slot_master_ctrl_info_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_send_slot_master_ctrl_info_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_send_slot_master_ctrl_info_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_send_slot_master_ctrl_info_rep));
  msg_show_slot_master_ctrl_info_req_descriptor_ = file->message_type(9);
  static const int msg_show_slot_master_ctrl_info_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_show_slot_master_ctrl_info_req, uid_),
  };
  msg_show_slot_master_ctrl_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_show_slot_master_ctrl_info_req_descriptor_,
      msg_show_slot_master_ctrl_info_req::default_instance_,
      msg_show_slot_master_ctrl_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_show_slot_master_ctrl_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_show_slot_master_ctrl_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_show_slot_master_ctrl_info_req));
  msg_show_slot_master_ctrl_info_rep_descriptor_ = file->message_type(10);
  static const int msg_show_slot_master_ctrl_info_rep_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_show_slot_master_ctrl_info_rep, suid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_show_slot_master_ctrl_info_rep, oper_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_show_slot_master_ctrl_info_rep, rand_pro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_show_slot_master_ctrl_info_rep, info_),
  };
  msg_show_slot_master_ctrl_info_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_show_slot_master_ctrl_info_rep_descriptor_,
      msg_show_slot_master_ctrl_info_rep::default_instance_,
      msg_show_slot_master_ctrl_info_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_show_slot_master_ctrl_info_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_show_slot_master_ctrl_info_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_show_slot_master_ctrl_info_rep));
  msg_update_slot_master_show_info_req_descriptor_ = file->message_type(11);
  static const int msg_update_slot_master_show_info_req_offsets_[1] = {
  };
  msg_update_slot_master_show_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_update_slot_master_show_info_req_descriptor_,
      msg_update_slot_master_show_info_req::default_instance_,
      msg_update_slot_master_show_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_slot_master_show_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_slot_master_show_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_update_slot_master_show_info_req));
  msg_update_slot_master_show_info_descriptor_ = file->message_type(12);
  static const int msg_update_slot_master_show_info_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_slot_master_show_info, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_slot_master_show_info, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_slot_master_show_info, attac_line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_slot_master_show_info, attac_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_slot_master_show_info, lost_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_slot_master_show_info, win_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_slot_master_show_info, cur_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_slot_master_show_info, ismaster_),
  };
  msg_update_slot_master_show_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_update_slot_master_show_info_descriptor_,
      msg_update_slot_master_show_info::default_instance_,
      msg_update_slot_master_show_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_slot_master_show_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_slot_master_show_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_update_slot_master_show_info));
  msg_update_slot_master_show_info_rep_descriptor_ = file->message_type(13);
  static const int msg_update_slot_master_show_info_rep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_slot_master_show_info_rep, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_slot_master_show_info_rep, info_),
  };
  msg_update_slot_master_show_info_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_update_slot_master_show_info_rep_descriptor_,
      msg_update_slot_master_show_info_rep::default_instance_,
      msg_update_slot_master_show_info_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_slot_master_show_info_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_slot_master_show_info_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_update_slot_master_show_info_rep));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_slot_5flogic_5fmsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pos_pics_descriptor_, &pos_pics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_slot_game_spin_req_descriptor_, &msg_slot_game_spin_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_slot_game_spin_rep_descriptor_, &msg_slot_game_spin_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_slot_game_play_info_descriptor_, &msg_slot_game_play_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_slot_game_jackpot_score_descriptor_, &msg_slot_game_jackpot_score::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_slot_game_error_rep_descriptor_, &msg_slot_game_error_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_send_slot_master_ctrl_info_descriptor_, &msg_send_slot_master_ctrl_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_send_slot_master_ctrl_info_req_descriptor_, &msg_send_slot_master_ctrl_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_send_slot_master_ctrl_info_rep_descriptor_, &msg_send_slot_master_ctrl_info_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_show_slot_master_ctrl_info_req_descriptor_, &msg_show_slot_master_ctrl_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_show_slot_master_ctrl_info_rep_descriptor_, &msg_show_slot_master_ctrl_info_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_update_slot_master_show_info_req_descriptor_, &msg_update_slot_master_show_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_update_slot_master_show_info_descriptor_, &msg_update_slot_master_show_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_update_slot_master_show_info_rep_descriptor_, &msg_update_slot_master_show_info_rep::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_slot_5flogic_5fmsg_2eproto() {
  delete pos_pics::default_instance_;
  delete pos_pics_reflection_;
  delete msg_slot_game_spin_req::default_instance_;
  delete msg_slot_game_spin_req_reflection_;
  delete msg_slot_game_spin_rep::default_instance_;
  delete msg_slot_game_spin_rep_reflection_;
  delete msg_slot_game_play_info::default_instance_;
  delete msg_slot_game_play_info_reflection_;
  delete msg_slot_game_jackpot_score::default_instance_;
  delete msg_slot_game_jackpot_score_reflection_;
  delete msg_slot_game_error_rep::default_instance_;
  delete msg_slot_game_error_rep_reflection_;
  delete msg_send_slot_master_ctrl_info::default_instance_;
  delete msg_send_slot_master_ctrl_info_reflection_;
  delete msg_send_slot_master_ctrl_info_req::default_instance_;
  delete msg_send_slot_master_ctrl_info_req_reflection_;
  delete msg_send_slot_master_ctrl_info_rep::default_instance_;
  delete msg_send_slot_master_ctrl_info_rep_reflection_;
  delete msg_show_slot_master_ctrl_info_req::default_instance_;
  delete msg_show_slot_master_ctrl_info_req_reflection_;
  delete msg_show_slot_master_ctrl_info_rep::default_instance_;
  delete msg_show_slot_master_ctrl_info_rep_reflection_;
  delete msg_update_slot_master_show_info_req::default_instance_;
  delete msg_update_slot_master_show_info_req_reflection_;
  delete msg_update_slot_master_show_info::default_instance_;
  delete msg_update_slot_master_show_info_reflection_;
  delete msg_update_slot_master_show_info_rep::default_instance_;
  delete msg_update_slot_master_show_info_rep_reflection_;
}

void protobuf_AddDesc_slot_5flogic_5fmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::net::protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  ::net::protobuf_AddDesc_error_5fcode_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024slot_logic_msg.proto\022\003net\032\025base_msg_st"
    "ruct.proto\032\020error_code.proto\"\027\n\010pos_pics"
    "\022\013\n\003pic\030\001 \003(\r\"=\n\026msg_slot_game_spin_req\022"
    "\017\n\007linenum\030\001 \001(\r\022\022\n\nbetperline\030\002 \001(\r\"\265\001\n"
    "\026msg_slot_game_spin_rep\022\033\n\004pics\030\001 \003(\0132\r."
    "net.pos_pics\022\021\n\tfreetimes\030\002 \001(\r\022\020\n\010winsc"
    "ore\030\003 \001(\003\022\021\n\tuserscore\030\004 \001(\003\022\030\n\020winjackp"
    "ot_score\030\005 \001(\003\022\025\n\rjackpot_score\030\006 \001(\003\022\025\n"
    "\rfree_winscore\030\007 \001(\003\"k\n\027msg_slot_game_pl"
    "ay_info\022\021\n\tfreetimes\030\001 \001(\r\022\023\n\013game_statu"
    "s\030\002 \001(\r\022\021\n\tuserscore\030\003 \001(\003\022\025\n\rjackpot_sc"
    "ore\030\004 \001(\003\",\n\033msg_slot_game_jackpot_score"
    "\022\r\n\005score\030\001 \001(\003\")\n\027msg_slot_game_error_r"
    "ep\022\016\n\006result\030\001 \001(\r\"\267\002\n\036msg_send_slot_mas"
    "ter_ctrl_info\022\013\n\003uid\030\001 \001(\r\022\024\n\014min_multip"
    "le\030\002 \001(\003\022\024\n\014max_multiple\030\003 \001(\003\022\030\n\020ran_mi"
    "n_multiple\030\004 \001(\003\022\030\n\020ran_max_multiple\030\005 \001"
    "(\003\022\026\n\016all_lost_count\030\006 \001(\r\022\022\n\nlost_count"
    "\030\007 \001(\r\022\025\n\rall_win_count\030\010 \001(\r\022\021\n\twin_cou"
    "nt\030\t \001(\r\022\021\n\tfree_spin\030\n \001(\r\022\025\n\rjackpot_i"
    "ndex\030\013 \001(\003\022\025\n\rall_pre_count\030\014 \001(\r\022\021\n\tpre"
    "_count\030\r \001(\r\"|\n\"msg_send_slot_master_ctr"
    "l_info_req\022\021\n\toper_type\030\001 \001(\r\022\020\n\010rand_pr"
    "o\030\002 \003(\r\0221\n\004info\030\003 \001(\0132#.net.msg_send_slo"
    "t_master_ctrl_info\"4\n\"msg_send_slot_mast"
    "er_ctrl_info_rep\022\016\n\006result\030\001 \001(\r\"1\n\"msg_"
    "show_slot_master_ctrl_info_req\022\013\n\003uid\030\001 "
    "\001(\r\"\212\001\n\"msg_show_slot_master_ctrl_info_r"
    "ep\022\014\n\004suid\030\001 \001(\r\022\021\n\toper_type\030\002 \001(\r\022\020\n\010r"
    "and_pro\030\003 \003(\r\0221\n\004info\030\004 \001(\0132#.net.msg_se"
    "nd_slot_master_ctrl_info\"&\n$msg_update_s"
    "lot_master_show_info_req\"\266\001\n msg_update_"
    "slot_master_show_info\022\013\n\003uid\030\001 \001(\r\022\020\n\010ni"
    "ckname\030\002 \001(\014\022\022\n\nattac_line\030\003 \001(\r\022\023\n\013atta"
    "c_score\030\004 \001(\r\022\022\n\nlost_count\030\005 \001(\r\022\021\n\twin"
    "_count\030\006 \001(\r\022\021\n\tcur_score\030\007 \001(\003\022\020\n\010ismas"
    "ter\030\010 \001(\r\"i\n$msg_update_slot_master_show"
    "_info_rep\022\014\n\004type\030\001 \001(\r\0223\n\004info\030\002 \003(\0132%."
    "net.msg_update_slot_master_show_info", 1556);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "slot_logic_msg.proto", &protobuf_RegisterTypes);
  pos_pics::default_instance_ = new pos_pics();
  msg_slot_game_spin_req::default_instance_ = new msg_slot_game_spin_req();
  msg_slot_game_spin_rep::default_instance_ = new msg_slot_game_spin_rep();
  msg_slot_game_play_info::default_instance_ = new msg_slot_game_play_info();
  msg_slot_game_jackpot_score::default_instance_ = new msg_slot_game_jackpot_score();
  msg_slot_game_error_rep::default_instance_ = new msg_slot_game_error_rep();
  msg_send_slot_master_ctrl_info::default_instance_ = new msg_send_slot_master_ctrl_info();
  msg_send_slot_master_ctrl_info_req::default_instance_ = new msg_send_slot_master_ctrl_info_req();
  msg_send_slot_master_ctrl_info_rep::default_instance_ = new msg_send_slot_master_ctrl_info_rep();
  msg_show_slot_master_ctrl_info_req::default_instance_ = new msg_show_slot_master_ctrl_info_req();
  msg_show_slot_master_ctrl_info_rep::default_instance_ = new msg_show_slot_master_ctrl_info_rep();
  msg_update_slot_master_show_info_req::default_instance_ = new msg_update_slot_master_show_info_req();
  msg_update_slot_master_show_info::default_instance_ = new msg_update_slot_master_show_info();
  msg_update_slot_master_show_info_rep::default_instance_ = new msg_update_slot_master_show_info_rep();
  pos_pics::default_instance_->InitAsDefaultInstance();
  msg_slot_game_spin_req::default_instance_->InitAsDefaultInstance();
  msg_slot_game_spin_rep::default_instance_->InitAsDefaultInstance();
  msg_slot_game_play_info::default_instance_->InitAsDefaultInstance();
  msg_slot_game_jackpot_score::default_instance_->InitAsDefaultInstance();
  msg_slot_game_error_rep::default_instance_->InitAsDefaultInstance();
  msg_send_slot_master_ctrl_info::default_instance_->InitAsDefaultInstance();
  msg_send_slot_master_ctrl_info_req::default_instance_->InitAsDefaultInstance();
  msg_send_slot_master_ctrl_info_rep::default_instance_->InitAsDefaultInstance();
  msg_show_slot_master_ctrl_info_req::default_instance_->InitAsDefaultInstance();
  msg_show_slot_master_ctrl_info_rep::default_instance_->InitAsDefaultInstance();
  msg_update_slot_master_show_info_req::default_instance_->InitAsDefaultInstance();
  msg_update_slot_master_show_info::default_instance_->InitAsDefaultInstance();
  msg_update_slot_master_show_info_rep::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_slot_5flogic_5fmsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_slot_5flogic_5fmsg_2eproto {
  StaticDescriptorInitializer_slot_5flogic_5fmsg_2eproto() {
    protobuf_AddDesc_slot_5flogic_5fmsg_2eproto();
  }
} static_descriptor_initializer_slot_5flogic_5fmsg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int pos_pics::kPicFieldNumber;
#endif  // !_MSC_VER

pos_pics::pos_pics()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pos_pics::InitAsDefaultInstance() {
}

pos_pics::pos_pics(const pos_pics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pos_pics::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pos_pics::~pos_pics() {
  SharedDtor();
}

void pos_pics::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pos_pics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pos_pics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pos_pics_descriptor_;
}

const pos_pics& pos_pics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_slot_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

pos_pics* pos_pics::default_instance_ = NULL;

pos_pics* pos_pics::New() const {
  return new pos_pics;
}

void pos_pics::Clear() {
  pic_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pos_pics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 pic = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_pic())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_pic())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_pic;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pos_pics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 pic = 1;
  for (int i = 0; i < this->pic_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->pic(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pos_pics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 pic = 1;
  for (int i = 0; i < this->pic_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->pic(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pos_pics::ByteSize() const {
  int total_size = 0;

  // repeated uint32 pic = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->pic_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->pic(i));
    }
    total_size += 1 * this->pic_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pos_pics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pos_pics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pos_pics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pos_pics::MergeFrom(const pos_pics& from) {
  GOOGLE_CHECK_NE(&from, this);
  pic_.MergeFrom(from.pic_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pos_pics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pos_pics::CopyFrom(const pos_pics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pos_pics::IsInitialized() const {

  return true;
}

void pos_pics::Swap(pos_pics* other) {
  if (other != this) {
    pic_.Swap(&other->pic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pos_pics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pos_pics_descriptor_;
  metadata.reflection = pos_pics_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_slot_game_spin_req::kLinenumFieldNumber;
const int msg_slot_game_spin_req::kBetperlineFieldNumber;
#endif  // !_MSC_VER

msg_slot_game_spin_req::msg_slot_game_spin_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_slot_game_spin_req::InitAsDefaultInstance() {
}

msg_slot_game_spin_req::msg_slot_game_spin_req(const msg_slot_game_spin_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_slot_game_spin_req::SharedCtor() {
  _cached_size_ = 0;
  linenum_ = 0u;
  betperline_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_slot_game_spin_req::~msg_slot_game_spin_req() {
  SharedDtor();
}

void msg_slot_game_spin_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_slot_game_spin_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_slot_game_spin_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_slot_game_spin_req_descriptor_;
}

const msg_slot_game_spin_req& msg_slot_game_spin_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_slot_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_slot_game_spin_req* msg_slot_game_spin_req::default_instance_ = NULL;

msg_slot_game_spin_req* msg_slot_game_spin_req::New() const {
  return new msg_slot_game_spin_req;
}

void msg_slot_game_spin_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    linenum_ = 0u;
    betperline_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_slot_game_spin_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 linenum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &linenum_)));
          set_has_linenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_betperline;
        break;
      }

      // optional uint32 betperline = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_betperline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &betperline_)));
          set_has_betperline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_slot_game_spin_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 linenum = 1;
  if (has_linenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->linenum(), output);
  }

  // optional uint32 betperline = 2;
  if (has_betperline()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->betperline(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_slot_game_spin_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 linenum = 1;
  if (has_linenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->linenum(), target);
  }

  // optional uint32 betperline = 2;
  if (has_betperline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->betperline(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_slot_game_spin_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 linenum = 1;
    if (has_linenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->linenum());
    }

    // optional uint32 betperline = 2;
    if (has_betperline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->betperline());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_slot_game_spin_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_slot_game_spin_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_slot_game_spin_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_slot_game_spin_req::MergeFrom(const msg_slot_game_spin_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_linenum()) {
      set_linenum(from.linenum());
    }
    if (from.has_betperline()) {
      set_betperline(from.betperline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_slot_game_spin_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_slot_game_spin_req::CopyFrom(const msg_slot_game_spin_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_slot_game_spin_req::IsInitialized() const {

  return true;
}

void msg_slot_game_spin_req::Swap(msg_slot_game_spin_req* other) {
  if (other != this) {
    std::swap(linenum_, other->linenum_);
    std::swap(betperline_, other->betperline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_slot_game_spin_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_slot_game_spin_req_descriptor_;
  metadata.reflection = msg_slot_game_spin_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_slot_game_spin_rep::kPicsFieldNumber;
const int msg_slot_game_spin_rep::kFreetimesFieldNumber;
const int msg_slot_game_spin_rep::kWinscoreFieldNumber;
const int msg_slot_game_spin_rep::kUserscoreFieldNumber;
const int msg_slot_game_spin_rep::kWinjackpotScoreFieldNumber;
const int msg_slot_game_spin_rep::kJackpotScoreFieldNumber;
const int msg_slot_game_spin_rep::kFreeWinscoreFieldNumber;
#endif  // !_MSC_VER

msg_slot_game_spin_rep::msg_slot_game_spin_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_slot_game_spin_rep::InitAsDefaultInstance() {
}

msg_slot_game_spin_rep::msg_slot_game_spin_rep(const msg_slot_game_spin_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_slot_game_spin_rep::SharedCtor() {
  _cached_size_ = 0;
  freetimes_ = 0u;
  winscore_ = GOOGLE_LONGLONG(0);
  userscore_ = GOOGLE_LONGLONG(0);
  winjackpot_score_ = GOOGLE_LONGLONG(0);
  jackpot_score_ = GOOGLE_LONGLONG(0);
  free_winscore_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_slot_game_spin_rep::~msg_slot_game_spin_rep() {
  SharedDtor();
}

void msg_slot_game_spin_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_slot_game_spin_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_slot_game_spin_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_slot_game_spin_rep_descriptor_;
}

const msg_slot_game_spin_rep& msg_slot_game_spin_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_slot_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_slot_game_spin_rep* msg_slot_game_spin_rep::default_instance_ = NULL;

msg_slot_game_spin_rep* msg_slot_game_spin_rep::New() const {
  return new msg_slot_game_spin_rep;
}

void msg_slot_game_spin_rep::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    freetimes_ = 0u;
    winscore_ = GOOGLE_LONGLONG(0);
    userscore_ = GOOGLE_LONGLONG(0);
    winjackpot_score_ = GOOGLE_LONGLONG(0);
    jackpot_score_ = GOOGLE_LONGLONG(0);
    free_winscore_ = GOOGLE_LONGLONG(0);
  }
  pics_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_slot_game_spin_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .net.pos_pics pics = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pics()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pics;
        if (input->ExpectTag(16)) goto parse_freetimes;
        break;
      }

      // optional uint32 freetimes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freetimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freetimes_)));
          set_has_freetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_winscore;
        break;
      }

      // optional int64 winscore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &winscore_)));
          set_has_winscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_userscore;
        break;
      }

      // optional int64 userscore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userscore_)));
          set_has_userscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_winjackpot_score;
        break;
      }

      // optional int64 winjackpot_score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winjackpot_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &winjackpot_score_)));
          set_has_winjackpot_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_jackpot_score;
        break;
      }

      // optional int64 jackpot_score = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jackpot_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &jackpot_score_)));
          set_has_jackpot_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_free_winscore;
        break;
      }

      // optional int64 free_winscore = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free_winscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &free_winscore_)));
          set_has_free_winscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_slot_game_spin_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .net.pos_pics pics = 1;
  for (int i = 0; i < this->pics_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pics(i), output);
  }

  // optional uint32 freetimes = 2;
  if (has_freetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->freetimes(), output);
  }

  // optional int64 winscore = 3;
  if (has_winscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->winscore(), output);
  }

  // optional int64 userscore = 4;
  if (has_userscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->userscore(), output);
  }

  // optional int64 winjackpot_score = 5;
  if (has_winjackpot_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->winjackpot_score(), output);
  }

  // optional int64 jackpot_score = 6;
  if (has_jackpot_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->jackpot_score(), output);
  }

  // optional int64 free_winscore = 7;
  if (has_free_winscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->free_winscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_slot_game_spin_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .net.pos_pics pics = 1;
  for (int i = 0; i < this->pics_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pics(i), target);
  }

  // optional uint32 freetimes = 2;
  if (has_freetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->freetimes(), target);
  }

  // optional int64 winscore = 3;
  if (has_winscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->winscore(), target);
  }

  // optional int64 userscore = 4;
  if (has_userscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->userscore(), target);
  }

  // optional int64 winjackpot_score = 5;
  if (has_winjackpot_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->winjackpot_score(), target);
  }

  // optional int64 jackpot_score = 6;
  if (has_jackpot_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->jackpot_score(), target);
  }

  // optional int64 free_winscore = 7;
  if (has_free_winscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->free_winscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_slot_game_spin_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 freetimes = 2;
    if (has_freetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->freetimes());
    }

    // optional int64 winscore = 3;
    if (has_winscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->winscore());
    }

    // optional int64 userscore = 4;
    if (has_userscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->userscore());
    }

    // optional int64 winjackpot_score = 5;
    if (has_winjackpot_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->winjackpot_score());
    }

    // optional int64 jackpot_score = 6;
    if (has_jackpot_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->jackpot_score());
    }

    // optional int64 free_winscore = 7;
    if (has_free_winscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->free_winscore());
    }

  }
  // repeated .net.pos_pics pics = 1;
  total_size += 1 * this->pics_size();
  for (int i = 0; i < this->pics_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pics(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_slot_game_spin_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_slot_game_spin_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_slot_game_spin_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_slot_game_spin_rep::MergeFrom(const msg_slot_game_spin_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  pics_.MergeFrom(from.pics_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_freetimes()) {
      set_freetimes(from.freetimes());
    }
    if (from.has_winscore()) {
      set_winscore(from.winscore());
    }
    if (from.has_userscore()) {
      set_userscore(from.userscore());
    }
    if (from.has_winjackpot_score()) {
      set_winjackpot_score(from.winjackpot_score());
    }
    if (from.has_jackpot_score()) {
      set_jackpot_score(from.jackpot_score());
    }
    if (from.has_free_winscore()) {
      set_free_winscore(from.free_winscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_slot_game_spin_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_slot_game_spin_rep::CopyFrom(const msg_slot_game_spin_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_slot_game_spin_rep::IsInitialized() const {

  return true;
}

void msg_slot_game_spin_rep::Swap(msg_slot_game_spin_rep* other) {
  if (other != this) {
    pics_.Swap(&other->pics_);
    std::swap(freetimes_, other->freetimes_);
    std::swap(winscore_, other->winscore_);
    std::swap(userscore_, other->userscore_);
    std::swap(winjackpot_score_, other->winjackpot_score_);
    std::swap(jackpot_score_, other->jackpot_score_);
    std::swap(free_winscore_, other->free_winscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_slot_game_spin_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_slot_game_spin_rep_descriptor_;
  metadata.reflection = msg_slot_game_spin_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_slot_game_play_info::kFreetimesFieldNumber;
const int msg_slot_game_play_info::kGameStatusFieldNumber;
const int msg_slot_game_play_info::kUserscoreFieldNumber;
const int msg_slot_game_play_info::kJackpotScoreFieldNumber;
#endif  // !_MSC_VER

msg_slot_game_play_info::msg_slot_game_play_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_slot_game_play_info::InitAsDefaultInstance() {
}

msg_slot_game_play_info::msg_slot_game_play_info(const msg_slot_game_play_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_slot_game_play_info::SharedCtor() {
  _cached_size_ = 0;
  freetimes_ = 0u;
  game_status_ = 0u;
  userscore_ = GOOGLE_LONGLONG(0);
  jackpot_score_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_slot_game_play_info::~msg_slot_game_play_info() {
  SharedDtor();
}

void msg_slot_game_play_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_slot_game_play_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_slot_game_play_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_slot_game_play_info_descriptor_;
}

const msg_slot_game_play_info& msg_slot_game_play_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_slot_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_slot_game_play_info* msg_slot_game_play_info::default_instance_ = NULL;

msg_slot_game_play_info* msg_slot_game_play_info::New() const {
  return new msg_slot_game_play_info;
}

void msg_slot_game_play_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    freetimes_ = 0u;
    game_status_ = 0u;
    userscore_ = GOOGLE_LONGLONG(0);
    jackpot_score_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_slot_game_play_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 freetimes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freetimes_)));
          set_has_freetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_status;
        break;
      }

      // optional uint32 game_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_status_)));
          set_has_game_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_userscore;
        break;
      }

      // optional int64 userscore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userscore_)));
          set_has_userscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_jackpot_score;
        break;
      }

      // optional int64 jackpot_score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jackpot_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &jackpot_score_)));
          set_has_jackpot_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_slot_game_play_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 freetimes = 1;
  if (has_freetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->freetimes(), output);
  }

  // optional uint32 game_status = 2;
  if (has_game_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_status(), output);
  }

  // optional int64 userscore = 3;
  if (has_userscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->userscore(), output);
  }

  // optional int64 jackpot_score = 4;
  if (has_jackpot_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->jackpot_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_slot_game_play_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 freetimes = 1;
  if (has_freetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->freetimes(), target);
  }

  // optional uint32 game_status = 2;
  if (has_game_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_status(), target);
  }

  // optional int64 userscore = 3;
  if (has_userscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->userscore(), target);
  }

  // optional int64 jackpot_score = 4;
  if (has_jackpot_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->jackpot_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_slot_game_play_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 freetimes = 1;
    if (has_freetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->freetimes());
    }

    // optional uint32 game_status = 2;
    if (has_game_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_status());
    }

    // optional int64 userscore = 3;
    if (has_userscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->userscore());
    }

    // optional int64 jackpot_score = 4;
    if (has_jackpot_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->jackpot_score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_slot_game_play_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_slot_game_play_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_slot_game_play_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_slot_game_play_info::MergeFrom(const msg_slot_game_play_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_freetimes()) {
      set_freetimes(from.freetimes());
    }
    if (from.has_game_status()) {
      set_game_status(from.game_status());
    }
    if (from.has_userscore()) {
      set_userscore(from.userscore());
    }
    if (from.has_jackpot_score()) {
      set_jackpot_score(from.jackpot_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_slot_game_play_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_slot_game_play_info::CopyFrom(const msg_slot_game_play_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_slot_game_play_info::IsInitialized() const {

  return true;
}

void msg_slot_game_play_info::Swap(msg_slot_game_play_info* other) {
  if (other != this) {
    std::swap(freetimes_, other->freetimes_);
    std::swap(game_status_, other->game_status_);
    std::swap(userscore_, other->userscore_);
    std::swap(jackpot_score_, other->jackpot_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_slot_game_play_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_slot_game_play_info_descriptor_;
  metadata.reflection = msg_slot_game_play_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_slot_game_jackpot_score::kScoreFieldNumber;
#endif  // !_MSC_VER

msg_slot_game_jackpot_score::msg_slot_game_jackpot_score()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_slot_game_jackpot_score::InitAsDefaultInstance() {
}

msg_slot_game_jackpot_score::msg_slot_game_jackpot_score(const msg_slot_game_jackpot_score& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_slot_game_jackpot_score::SharedCtor() {
  _cached_size_ = 0;
  score_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_slot_game_jackpot_score::~msg_slot_game_jackpot_score() {
  SharedDtor();
}

void msg_slot_game_jackpot_score::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_slot_game_jackpot_score::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_slot_game_jackpot_score::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_slot_game_jackpot_score_descriptor_;
}

const msg_slot_game_jackpot_score& msg_slot_game_jackpot_score::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_slot_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_slot_game_jackpot_score* msg_slot_game_jackpot_score::default_instance_ = NULL;

msg_slot_game_jackpot_score* msg_slot_game_jackpot_score::New() const {
  return new msg_slot_game_jackpot_score;
}

void msg_slot_game_jackpot_score::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    score_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_slot_game_jackpot_score::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_slot_game_jackpot_score::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_slot_game_jackpot_score::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 score = 1;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_slot_game_jackpot_score::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_slot_game_jackpot_score::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_slot_game_jackpot_score* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_slot_game_jackpot_score*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_slot_game_jackpot_score::MergeFrom(const msg_slot_game_jackpot_score& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_slot_game_jackpot_score::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_slot_game_jackpot_score::CopyFrom(const msg_slot_game_jackpot_score& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_slot_game_jackpot_score::IsInitialized() const {

  return true;
}

void msg_slot_game_jackpot_score::Swap(msg_slot_game_jackpot_score* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_slot_game_jackpot_score::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_slot_game_jackpot_score_descriptor_;
  metadata.reflection = msg_slot_game_jackpot_score_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_slot_game_error_rep::kResultFieldNumber;
#endif  // !_MSC_VER

msg_slot_game_error_rep::msg_slot_game_error_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_slot_game_error_rep::InitAsDefaultInstance() {
}

msg_slot_game_error_rep::msg_slot_game_error_rep(const msg_slot_game_error_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_slot_game_error_rep::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_slot_game_error_rep::~msg_slot_game_error_rep() {
  SharedDtor();
}

void msg_slot_game_error_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_slot_game_error_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_slot_game_error_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_slot_game_error_rep_descriptor_;
}

const msg_slot_game_error_rep& msg_slot_game_error_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_slot_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_slot_game_error_rep* msg_slot_game_error_rep::default_instance_ = NULL;

msg_slot_game_error_rep* msg_slot_game_error_rep::New() const {
  return new msg_slot_game_error_rep;
}

void msg_slot_game_error_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_slot_game_error_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_slot_game_error_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_slot_game_error_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_slot_game_error_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_slot_game_error_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_slot_game_error_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_slot_game_error_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_slot_game_error_rep::MergeFrom(const msg_slot_game_error_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_slot_game_error_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_slot_game_error_rep::CopyFrom(const msg_slot_game_error_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_slot_game_error_rep::IsInitialized() const {

  return true;
}

void msg_slot_game_error_rep::Swap(msg_slot_game_error_rep* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_slot_game_error_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_slot_game_error_rep_descriptor_;
  metadata.reflection = msg_slot_game_error_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_send_slot_master_ctrl_info::kUidFieldNumber;
const int msg_send_slot_master_ctrl_info::kMinMultipleFieldNumber;
const int msg_send_slot_master_ctrl_info::kMaxMultipleFieldNumber;
const int msg_send_slot_master_ctrl_info::kRanMinMultipleFieldNumber;
const int msg_send_slot_master_ctrl_info::kRanMaxMultipleFieldNumber;
const int msg_send_slot_master_ctrl_info::kAllLostCountFieldNumber;
const int msg_send_slot_master_ctrl_info::kLostCountFieldNumber;
const int msg_send_slot_master_ctrl_info::kAllWinCountFieldNumber;
const int msg_send_slot_master_ctrl_info::kWinCountFieldNumber;
const int msg_send_slot_master_ctrl_info::kFreeSpinFieldNumber;
const int msg_send_slot_master_ctrl_info::kJackpotIndexFieldNumber;
const int msg_send_slot_master_ctrl_info::kAllPreCountFieldNumber;
const int msg_send_slot_master_ctrl_info::kPreCountFieldNumber;
#endif  // !_MSC_VER

msg_send_slot_master_ctrl_info::msg_send_slot_master_ctrl_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_send_slot_master_ctrl_info::InitAsDefaultInstance() {
}

msg_send_slot_master_ctrl_info::msg_send_slot_master_ctrl_info(const msg_send_slot_master_ctrl_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_send_slot_master_ctrl_info::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  min_multiple_ = GOOGLE_LONGLONG(0);
  max_multiple_ = GOOGLE_LONGLONG(0);
  ran_min_multiple_ = GOOGLE_LONGLONG(0);
  ran_max_multiple_ = GOOGLE_LONGLONG(0);
  all_lost_count_ = 0u;
  lost_count_ = 0u;
  all_win_count_ = 0u;
  win_count_ = 0u;
  free_spin_ = 0u;
  jackpot_index_ = GOOGLE_LONGLONG(0);
  all_pre_count_ = 0u;
  pre_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_send_slot_master_ctrl_info::~msg_send_slot_master_ctrl_info() {
  SharedDtor();
}

void msg_send_slot_master_ctrl_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_send_slot_master_ctrl_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_send_slot_master_ctrl_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_send_slot_master_ctrl_info_descriptor_;
}

const msg_send_slot_master_ctrl_info& msg_send_slot_master_ctrl_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_slot_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_send_slot_master_ctrl_info* msg_send_slot_master_ctrl_info::default_instance_ = NULL;

msg_send_slot_master_ctrl_info* msg_send_slot_master_ctrl_info::New() const {
  return new msg_send_slot_master_ctrl_info;
}

void msg_send_slot_master_ctrl_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    min_multiple_ = GOOGLE_LONGLONG(0);
    max_multiple_ = GOOGLE_LONGLONG(0);
    ran_min_multiple_ = GOOGLE_LONGLONG(0);
    ran_max_multiple_ = GOOGLE_LONGLONG(0);
    all_lost_count_ = 0u;
    lost_count_ = 0u;
    all_win_count_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    win_count_ = 0u;
    free_spin_ = 0u;
    jackpot_index_ = GOOGLE_LONGLONG(0);
    all_pre_count_ = 0u;
    pre_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_send_slot_master_ctrl_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_min_multiple;
        break;
      }

      // optional int64 min_multiple = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_multiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &min_multiple_)));
          set_has_min_multiple();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_multiple;
        break;
      }

      // optional int64 max_multiple = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_multiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_multiple_)));
          set_has_max_multiple();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ran_min_multiple;
        break;
      }

      // optional int64 ran_min_multiple = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ran_min_multiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ran_min_multiple_)));
          set_has_ran_min_multiple();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ran_max_multiple;
        break;
      }

      // optional int64 ran_max_multiple = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ran_max_multiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ran_max_multiple_)));
          set_has_ran_max_multiple();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_all_lost_count;
        break;
      }

      // optional uint32 all_lost_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_lost_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &all_lost_count_)));
          set_has_all_lost_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_lost_count;
        break;
      }

      // optional uint32 lost_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lost_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lost_count_)));
          set_has_lost_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_all_win_count;
        break;
      }

      // optional uint32 all_win_count = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_win_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &all_win_count_)));
          set_has_all_win_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_win_count;
        break;
      }

      // optional uint32 win_count = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_count_)));
          set_has_win_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_free_spin;
        break;
      }

      // optional uint32 free_spin = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free_spin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &free_spin_)));
          set_has_free_spin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_jackpot_index;
        break;
      }

      // optional int64 jackpot_index = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jackpot_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &jackpot_index_)));
          set_has_jackpot_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_all_pre_count;
        break;
      }

      // optional uint32 all_pre_count = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_pre_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &all_pre_count_)));
          set_has_all_pre_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_pre_count;
        break;
      }

      // optional uint32 pre_count = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pre_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pre_count_)));
          set_has_pre_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_send_slot_master_ctrl_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional int64 min_multiple = 2;
  if (has_min_multiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->min_multiple(), output);
  }

  // optional int64 max_multiple = 3;
  if (has_max_multiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->max_multiple(), output);
  }

  // optional int64 ran_min_multiple = 4;
  if (has_ran_min_multiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->ran_min_multiple(), output);
  }

  // optional int64 ran_max_multiple = 5;
  if (has_ran_max_multiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->ran_max_multiple(), output);
  }

  // optional uint32 all_lost_count = 6;
  if (has_all_lost_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->all_lost_count(), output);
  }

  // optional uint32 lost_count = 7;
  if (has_lost_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->lost_count(), output);
  }

  // optional uint32 all_win_count = 8;
  if (has_all_win_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->all_win_count(), output);
  }

  // optional uint32 win_count = 9;
  if (has_win_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->win_count(), output);
  }

  // optional uint32 free_spin = 10;
  if (has_free_spin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->free_spin(), output);
  }

  // optional int64 jackpot_index = 11;
  if (has_jackpot_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->jackpot_index(), output);
  }

  // optional uint32 all_pre_count = 12;
  if (has_all_pre_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->all_pre_count(), output);
  }

  // optional uint32 pre_count = 13;
  if (has_pre_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->pre_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_send_slot_master_ctrl_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional int64 min_multiple = 2;
  if (has_min_multiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->min_multiple(), target);
  }

  // optional int64 max_multiple = 3;
  if (has_max_multiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->max_multiple(), target);
  }

  // optional int64 ran_min_multiple = 4;
  if (has_ran_min_multiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->ran_min_multiple(), target);
  }

  // optional int64 ran_max_multiple = 5;
  if (has_ran_max_multiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->ran_max_multiple(), target);
  }

  // optional uint32 all_lost_count = 6;
  if (has_all_lost_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->all_lost_count(), target);
  }

  // optional uint32 lost_count = 7;
  if (has_lost_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->lost_count(), target);
  }

  // optional uint32 all_win_count = 8;
  if (has_all_win_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->all_win_count(), target);
  }

  // optional uint32 win_count = 9;
  if (has_win_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->win_count(), target);
  }

  // optional uint32 free_spin = 10;
  if (has_free_spin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->free_spin(), target);
  }

  // optional int64 jackpot_index = 11;
  if (has_jackpot_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->jackpot_index(), target);
  }

  // optional uint32 all_pre_count = 12;
  if (has_all_pre_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->all_pre_count(), target);
  }

  // optional uint32 pre_count = 13;
  if (has_pre_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->pre_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_send_slot_master_ctrl_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional int64 min_multiple = 2;
    if (has_min_multiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->min_multiple());
    }

    // optional int64 max_multiple = 3;
    if (has_max_multiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_multiple());
    }

    // optional int64 ran_min_multiple = 4;
    if (has_ran_min_multiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ran_min_multiple());
    }

    // optional int64 ran_max_multiple = 5;
    if (has_ran_max_multiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ran_max_multiple());
    }

    // optional uint32 all_lost_count = 6;
    if (has_all_lost_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->all_lost_count());
    }

    // optional uint32 lost_count = 7;
    if (has_lost_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lost_count());
    }

    // optional uint32 all_win_count = 8;
    if (has_all_win_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->all_win_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 win_count = 9;
    if (has_win_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win_count());
    }

    // optional uint32 free_spin = 10;
    if (has_free_spin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->free_spin());
    }

    // optional int64 jackpot_index = 11;
    if (has_jackpot_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->jackpot_index());
    }

    // optional uint32 all_pre_count = 12;
    if (has_all_pre_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->all_pre_count());
    }

    // optional uint32 pre_count = 13;
    if (has_pre_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pre_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_send_slot_master_ctrl_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_send_slot_master_ctrl_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_send_slot_master_ctrl_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_send_slot_master_ctrl_info::MergeFrom(const msg_send_slot_master_ctrl_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_min_multiple()) {
      set_min_multiple(from.min_multiple());
    }
    if (from.has_max_multiple()) {
      set_max_multiple(from.max_multiple());
    }
    if (from.has_ran_min_multiple()) {
      set_ran_min_multiple(from.ran_min_multiple());
    }
    if (from.has_ran_max_multiple()) {
      set_ran_max_multiple(from.ran_max_multiple());
    }
    if (from.has_all_lost_count()) {
      set_all_lost_count(from.all_lost_count());
    }
    if (from.has_lost_count()) {
      set_lost_count(from.lost_count());
    }
    if (from.has_all_win_count()) {
      set_all_win_count(from.all_win_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_win_count()) {
      set_win_count(from.win_count());
    }
    if (from.has_free_spin()) {
      set_free_spin(from.free_spin());
    }
    if (from.has_jackpot_index()) {
      set_jackpot_index(from.jackpot_index());
    }
    if (from.has_all_pre_count()) {
      set_all_pre_count(from.all_pre_count());
    }
    if (from.has_pre_count()) {
      set_pre_count(from.pre_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_send_slot_master_ctrl_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_send_slot_master_ctrl_info::CopyFrom(const msg_send_slot_master_ctrl_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_send_slot_master_ctrl_info::IsInitialized() const {

  return true;
}

void msg_send_slot_master_ctrl_info::Swap(msg_send_slot_master_ctrl_info* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(min_multiple_, other->min_multiple_);
    std::swap(max_multiple_, other->max_multiple_);
    std::swap(ran_min_multiple_, other->ran_min_multiple_);
    std::swap(ran_max_multiple_, other->ran_max_multiple_);
    std::swap(all_lost_count_, other->all_lost_count_);
    std::swap(lost_count_, other->lost_count_);
    std::swap(all_win_count_, other->all_win_count_);
    std::swap(win_count_, other->win_count_);
    std::swap(free_spin_, other->free_spin_);
    std::swap(jackpot_index_, other->jackpot_index_);
    std::swap(all_pre_count_, other->all_pre_count_);
    std::swap(pre_count_, other->pre_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_send_slot_master_ctrl_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_send_slot_master_ctrl_info_descriptor_;
  metadata.reflection = msg_send_slot_master_ctrl_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_send_slot_master_ctrl_info_req::kOperTypeFieldNumber;
const int msg_send_slot_master_ctrl_info_req::kRandProFieldNumber;
const int msg_send_slot_master_ctrl_info_req::kInfoFieldNumber;
#endif  // !_MSC_VER

msg_send_slot_master_ctrl_info_req::msg_send_slot_master_ctrl_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_send_slot_master_ctrl_info_req::InitAsDefaultInstance() {
  info_ = const_cast< ::net::msg_send_slot_master_ctrl_info*>(&::net::msg_send_slot_master_ctrl_info::default_instance());
}

msg_send_slot_master_ctrl_info_req::msg_send_slot_master_ctrl_info_req(const msg_send_slot_master_ctrl_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_send_slot_master_ctrl_info_req::SharedCtor() {
  _cached_size_ = 0;
  oper_type_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_send_slot_master_ctrl_info_req::~msg_send_slot_master_ctrl_info_req() {
  SharedDtor();
}

void msg_send_slot_master_ctrl_info_req::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void msg_send_slot_master_ctrl_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_send_slot_master_ctrl_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_send_slot_master_ctrl_info_req_descriptor_;
}

const msg_send_slot_master_ctrl_info_req& msg_send_slot_master_ctrl_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_slot_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_send_slot_master_ctrl_info_req* msg_send_slot_master_ctrl_info_req::default_instance_ = NULL;

msg_send_slot_master_ctrl_info_req* msg_send_slot_master_ctrl_info_req::New() const {
  return new msg_send_slot_master_ctrl_info_req;
}

void msg_send_slot_master_ctrl_info_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oper_type_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::net::msg_send_slot_master_ctrl_info::Clear();
    }
  }
  rand_pro_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_send_slot_master_ctrl_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 oper_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oper_type_)));
          set_has_oper_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rand_pro;
        break;
      }

      // repeated uint32 rand_pro = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rand_pro:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_rand_pro())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rand_pro())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rand_pro;
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional .net.msg_send_slot_master_ctrl_info info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_send_slot_master_ctrl_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 oper_type = 1;
  if (has_oper_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->oper_type(), output);
  }

  // repeated uint32 rand_pro = 2;
  for (int i = 0; i < this->rand_pro_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->rand_pro(i), output);
  }

  // optional .net.msg_send_slot_master_ctrl_info info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_send_slot_master_ctrl_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 oper_type = 1;
  if (has_oper_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->oper_type(), target);
  }

  // repeated uint32 rand_pro = 2;
  for (int i = 0; i < this->rand_pro_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->rand_pro(i), target);
  }

  // optional .net.msg_send_slot_master_ctrl_info info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_send_slot_master_ctrl_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 oper_type = 1;
    if (has_oper_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oper_type());
    }

    // optional .net.msg_send_slot_master_ctrl_info info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  // repeated uint32 rand_pro = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->rand_pro_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->rand_pro(i));
    }
    total_size += 1 * this->rand_pro_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_send_slot_master_ctrl_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_send_slot_master_ctrl_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_send_slot_master_ctrl_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_send_slot_master_ctrl_info_req::MergeFrom(const msg_send_slot_master_ctrl_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  rand_pro_.MergeFrom(from.rand_pro_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_oper_type()) {
      set_oper_type(from.oper_type());
    }
    if (from.has_info()) {
      mutable_info()->::net::msg_send_slot_master_ctrl_info::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_send_slot_master_ctrl_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_send_slot_master_ctrl_info_req::CopyFrom(const msg_send_slot_master_ctrl_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_send_slot_master_ctrl_info_req::IsInitialized() const {

  return true;
}

void msg_send_slot_master_ctrl_info_req::Swap(msg_send_slot_master_ctrl_info_req* other) {
  if (other != this) {
    std::swap(oper_type_, other->oper_type_);
    rand_pro_.Swap(&other->rand_pro_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_send_slot_master_ctrl_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_send_slot_master_ctrl_info_req_descriptor_;
  metadata.reflection = msg_send_slot_master_ctrl_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_send_slot_master_ctrl_info_rep::kResultFieldNumber;
#endif  // !_MSC_VER

msg_send_slot_master_ctrl_info_rep::msg_send_slot_master_ctrl_info_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_send_slot_master_ctrl_info_rep::InitAsDefaultInstance() {
}

msg_send_slot_master_ctrl_info_rep::msg_send_slot_master_ctrl_info_rep(const msg_send_slot_master_ctrl_info_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_send_slot_master_ctrl_info_rep::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_send_slot_master_ctrl_info_rep::~msg_send_slot_master_ctrl_info_rep() {
  SharedDtor();
}

void msg_send_slot_master_ctrl_info_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_send_slot_master_ctrl_info_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_send_slot_master_ctrl_info_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_send_slot_master_ctrl_info_rep_descriptor_;
}

const msg_send_slot_master_ctrl_info_rep& msg_send_slot_master_ctrl_info_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_slot_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_send_slot_master_ctrl_info_rep* msg_send_slot_master_ctrl_info_rep::default_instance_ = NULL;

msg_send_slot_master_ctrl_info_rep* msg_send_slot_master_ctrl_info_rep::New() const {
  return new msg_send_slot_master_ctrl_info_rep;
}

void msg_send_slot_master_ctrl_info_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_send_slot_master_ctrl_info_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_send_slot_master_ctrl_info_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_send_slot_master_ctrl_info_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_send_slot_master_ctrl_info_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_send_slot_master_ctrl_info_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_send_slot_master_ctrl_info_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_send_slot_master_ctrl_info_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_send_slot_master_ctrl_info_rep::MergeFrom(const msg_send_slot_master_ctrl_info_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_send_slot_master_ctrl_info_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_send_slot_master_ctrl_info_rep::CopyFrom(const msg_send_slot_master_ctrl_info_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_send_slot_master_ctrl_info_rep::IsInitialized() const {

  return true;
}

void msg_send_slot_master_ctrl_info_rep::Swap(msg_send_slot_master_ctrl_info_rep* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_send_slot_master_ctrl_info_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_send_slot_master_ctrl_info_rep_descriptor_;
  metadata.reflection = msg_send_slot_master_ctrl_info_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_show_slot_master_ctrl_info_req::kUidFieldNumber;
#endif  // !_MSC_VER

msg_show_slot_master_ctrl_info_req::msg_show_slot_master_ctrl_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_show_slot_master_ctrl_info_req::InitAsDefaultInstance() {
}

msg_show_slot_master_ctrl_info_req::msg_show_slot_master_ctrl_info_req(const msg_show_slot_master_ctrl_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_show_slot_master_ctrl_info_req::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_show_slot_master_ctrl_info_req::~msg_show_slot_master_ctrl_info_req() {
  SharedDtor();
}

void msg_show_slot_master_ctrl_info_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_show_slot_master_ctrl_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_show_slot_master_ctrl_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_show_slot_master_ctrl_info_req_descriptor_;
}

const msg_show_slot_master_ctrl_info_req& msg_show_slot_master_ctrl_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_slot_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_show_slot_master_ctrl_info_req* msg_show_slot_master_ctrl_info_req::default_instance_ = NULL;

msg_show_slot_master_ctrl_info_req* msg_show_slot_master_ctrl_info_req::New() const {
  return new msg_show_slot_master_ctrl_info_req;
}

void msg_show_slot_master_ctrl_info_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_show_slot_master_ctrl_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_show_slot_master_ctrl_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_show_slot_master_ctrl_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_show_slot_master_ctrl_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_show_slot_master_ctrl_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_show_slot_master_ctrl_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_show_slot_master_ctrl_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_show_slot_master_ctrl_info_req::MergeFrom(const msg_show_slot_master_ctrl_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_show_slot_master_ctrl_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_show_slot_master_ctrl_info_req::CopyFrom(const msg_show_slot_master_ctrl_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_show_slot_master_ctrl_info_req::IsInitialized() const {

  return true;
}

void msg_show_slot_master_ctrl_info_req::Swap(msg_show_slot_master_ctrl_info_req* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_show_slot_master_ctrl_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_show_slot_master_ctrl_info_req_descriptor_;
  metadata.reflection = msg_show_slot_master_ctrl_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_show_slot_master_ctrl_info_rep::kSuidFieldNumber;
const int msg_show_slot_master_ctrl_info_rep::kOperTypeFieldNumber;
const int msg_show_slot_master_ctrl_info_rep::kRandProFieldNumber;
const int msg_show_slot_master_ctrl_info_rep::kInfoFieldNumber;
#endif  // !_MSC_VER

msg_show_slot_master_ctrl_info_rep::msg_show_slot_master_ctrl_info_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_show_slot_master_ctrl_info_rep::InitAsDefaultInstance() {
  info_ = const_cast< ::net::msg_send_slot_master_ctrl_info*>(&::net::msg_send_slot_master_ctrl_info::default_instance());
}

msg_show_slot_master_ctrl_info_rep::msg_show_slot_master_ctrl_info_rep(const msg_show_slot_master_ctrl_info_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_show_slot_master_ctrl_info_rep::SharedCtor() {
  _cached_size_ = 0;
  suid_ = 0u;
  oper_type_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_show_slot_master_ctrl_info_rep::~msg_show_slot_master_ctrl_info_rep() {
  SharedDtor();
}

void msg_show_slot_master_ctrl_info_rep::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void msg_show_slot_master_ctrl_info_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_show_slot_master_ctrl_info_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_show_slot_master_ctrl_info_rep_descriptor_;
}

const msg_show_slot_master_ctrl_info_rep& msg_show_slot_master_ctrl_info_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_slot_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_show_slot_master_ctrl_info_rep* msg_show_slot_master_ctrl_info_rep::default_instance_ = NULL;

msg_show_slot_master_ctrl_info_rep* msg_show_slot_master_ctrl_info_rep::New() const {
  return new msg_show_slot_master_ctrl_info_rep;
}

void msg_show_slot_master_ctrl_info_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    suid_ = 0u;
    oper_type_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::net::msg_send_slot_master_ctrl_info::Clear();
    }
  }
  rand_pro_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_show_slot_master_ctrl_info_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 suid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suid_)));
          set_has_suid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_oper_type;
        break;
      }

      // optional uint32 oper_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oper_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oper_type_)));
          set_has_oper_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rand_pro;
        break;
      }

      // repeated uint32 rand_pro = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rand_pro:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_rand_pro())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rand_pro())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rand_pro;
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // optional .net.msg_send_slot_master_ctrl_info info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_show_slot_master_ctrl_info_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 suid = 1;
  if (has_suid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->suid(), output);
  }

  // optional uint32 oper_type = 2;
  if (has_oper_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->oper_type(), output);
  }

  // repeated uint32 rand_pro = 3;
  for (int i = 0; i < this->rand_pro_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->rand_pro(i), output);
  }

  // optional .net.msg_send_slot_master_ctrl_info info = 4;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_show_slot_master_ctrl_info_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 suid = 1;
  if (has_suid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->suid(), target);
  }

  // optional uint32 oper_type = 2;
  if (has_oper_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->oper_type(), target);
  }

  // repeated uint32 rand_pro = 3;
  for (int i = 0; i < this->rand_pro_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->rand_pro(i), target);
  }

  // optional .net.msg_send_slot_master_ctrl_info info = 4;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_show_slot_master_ctrl_info_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 suid = 1;
    if (has_suid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->suid());
    }

    // optional uint32 oper_type = 2;
    if (has_oper_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oper_type());
    }

    // optional .net.msg_send_slot_master_ctrl_info info = 4;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  // repeated uint32 rand_pro = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->rand_pro_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->rand_pro(i));
    }
    total_size += 1 * this->rand_pro_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_show_slot_master_ctrl_info_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_show_slot_master_ctrl_info_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_show_slot_master_ctrl_info_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_show_slot_master_ctrl_info_rep::MergeFrom(const msg_show_slot_master_ctrl_info_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  rand_pro_.MergeFrom(from.rand_pro_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_suid()) {
      set_suid(from.suid());
    }
    if (from.has_oper_type()) {
      set_oper_type(from.oper_type());
    }
    if (from.has_info()) {
      mutable_info()->::net::msg_send_slot_master_ctrl_info::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_show_slot_master_ctrl_info_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_show_slot_master_ctrl_info_rep::CopyFrom(const msg_show_slot_master_ctrl_info_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_show_slot_master_ctrl_info_rep::IsInitialized() const {

  return true;
}

void msg_show_slot_master_ctrl_info_rep::Swap(msg_show_slot_master_ctrl_info_rep* other) {
  if (other != this) {
    std::swap(suid_, other->suid_);
    std::swap(oper_type_, other->oper_type_);
    rand_pro_.Swap(&other->rand_pro_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_show_slot_master_ctrl_info_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_show_slot_master_ctrl_info_rep_descriptor_;
  metadata.reflection = msg_show_slot_master_ctrl_info_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

msg_update_slot_master_show_info_req::msg_update_slot_master_show_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_update_slot_master_show_info_req::InitAsDefaultInstance() {
}

msg_update_slot_master_show_info_req::msg_update_slot_master_show_info_req(const msg_update_slot_master_show_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_update_slot_master_show_info_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_update_slot_master_show_info_req::~msg_update_slot_master_show_info_req() {
  SharedDtor();
}

void msg_update_slot_master_show_info_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_update_slot_master_show_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_update_slot_master_show_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_update_slot_master_show_info_req_descriptor_;
}

const msg_update_slot_master_show_info_req& msg_update_slot_master_show_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_slot_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_update_slot_master_show_info_req* msg_update_slot_master_show_info_req::default_instance_ = NULL;

msg_update_slot_master_show_info_req* msg_update_slot_master_show_info_req::New() const {
  return new msg_update_slot_master_show_info_req;
}

void msg_update_slot_master_show_info_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_update_slot_master_show_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void msg_update_slot_master_show_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_update_slot_master_show_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_update_slot_master_show_info_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_update_slot_master_show_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_update_slot_master_show_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_update_slot_master_show_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_update_slot_master_show_info_req::MergeFrom(const msg_update_slot_master_show_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_update_slot_master_show_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_update_slot_master_show_info_req::CopyFrom(const msg_update_slot_master_show_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_update_slot_master_show_info_req::IsInitialized() const {

  return true;
}

void msg_update_slot_master_show_info_req::Swap(msg_update_slot_master_show_info_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_update_slot_master_show_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_update_slot_master_show_info_req_descriptor_;
  metadata.reflection = msg_update_slot_master_show_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_update_slot_master_show_info::kUidFieldNumber;
const int msg_update_slot_master_show_info::kNicknameFieldNumber;
const int msg_update_slot_master_show_info::kAttacLineFieldNumber;
const int msg_update_slot_master_show_info::kAttacScoreFieldNumber;
const int msg_update_slot_master_show_info::kLostCountFieldNumber;
const int msg_update_slot_master_show_info::kWinCountFieldNumber;
const int msg_update_slot_master_show_info::kCurScoreFieldNumber;
const int msg_update_slot_master_show_info::kIsmasterFieldNumber;
#endif  // !_MSC_VER

msg_update_slot_master_show_info::msg_update_slot_master_show_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_update_slot_master_show_info::InitAsDefaultInstance() {
}

msg_update_slot_master_show_info::msg_update_slot_master_show_info(const msg_update_slot_master_show_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_update_slot_master_show_info::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attac_line_ = 0u;
  attac_score_ = 0u;
  lost_count_ = 0u;
  win_count_ = 0u;
  cur_score_ = GOOGLE_LONGLONG(0);
  ismaster_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_update_slot_master_show_info::~msg_update_slot_master_show_info() {
  SharedDtor();
}

void msg_update_slot_master_show_info::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void msg_update_slot_master_show_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_update_slot_master_show_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_update_slot_master_show_info_descriptor_;
}

const msg_update_slot_master_show_info& msg_update_slot_master_show_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_slot_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_update_slot_master_show_info* msg_update_slot_master_show_info::default_instance_ = NULL;

msg_update_slot_master_show_info* msg_update_slot_master_show_info::New() const {
  return new msg_update_slot_master_show_info;
}

void msg_update_slot_master_show_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    attac_line_ = 0u;
    attac_score_ = 0u;
    lost_count_ = 0u;
    win_count_ = 0u;
    cur_score_ = GOOGLE_LONGLONG(0);
    ismaster_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_update_slot_master_show_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional bytes nickname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attac_line;
        break;
      }

      // optional uint32 attac_line = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attac_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attac_line_)));
          set_has_attac_line();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_attac_score;
        break;
      }

      // optional uint32 attac_score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attac_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attac_score_)));
          set_has_attac_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lost_count;
        break;
      }

      // optional uint32 lost_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lost_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lost_count_)));
          set_has_lost_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_win_count;
        break;
      }

      // optional uint32 win_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_count_)));
          set_has_win_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cur_score;
        break;
      }

      // optional int64 cur_score = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cur_score_)));
          set_has_cur_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ismaster;
        break;
      }

      // optional uint32 ismaster = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ismaster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ismaster_)));
          set_has_ismaster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_update_slot_master_show_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional bytes nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->nickname(), output);
  }

  // optional uint32 attac_line = 3;
  if (has_attac_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->attac_line(), output);
  }

  // optional uint32 attac_score = 4;
  if (has_attac_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->attac_score(), output);
  }

  // optional uint32 lost_count = 5;
  if (has_lost_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lost_count(), output);
  }

  // optional uint32 win_count = 6;
  if (has_win_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->win_count(), output);
  }

  // optional int64 cur_score = 7;
  if (has_cur_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->cur_score(), output);
  }

  // optional uint32 ismaster = 8;
  if (has_ismaster()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ismaster(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_update_slot_master_show_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional bytes nickname = 2;
  if (has_nickname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->nickname(), target);
  }

  // optional uint32 attac_line = 3;
  if (has_attac_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->attac_line(), target);
  }

  // optional uint32 attac_score = 4;
  if (has_attac_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->attac_score(), target);
  }

  // optional uint32 lost_count = 5;
  if (has_lost_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lost_count(), target);
  }

  // optional uint32 win_count = 6;
  if (has_win_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->win_count(), target);
  }

  // optional int64 cur_score = 7;
  if (has_cur_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->cur_score(), target);
  }

  // optional uint32 ismaster = 8;
  if (has_ismaster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->ismaster(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_update_slot_master_show_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional bytes nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nickname());
    }

    // optional uint32 attac_line = 3;
    if (has_attac_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attac_line());
    }

    // optional uint32 attac_score = 4;
    if (has_attac_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attac_score());
    }

    // optional uint32 lost_count = 5;
    if (has_lost_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lost_count());
    }

    // optional uint32 win_count = 6;
    if (has_win_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win_count());
    }

    // optional int64 cur_score = 7;
    if (has_cur_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cur_score());
    }

    // optional uint32 ismaster = 8;
    if (has_ismaster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ismaster());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_update_slot_master_show_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_update_slot_master_show_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_update_slot_master_show_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_update_slot_master_show_info::MergeFrom(const msg_update_slot_master_show_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_attac_line()) {
      set_attac_line(from.attac_line());
    }
    if (from.has_attac_score()) {
      set_attac_score(from.attac_score());
    }
    if (from.has_lost_count()) {
      set_lost_count(from.lost_count());
    }
    if (from.has_win_count()) {
      set_win_count(from.win_count());
    }
    if (from.has_cur_score()) {
      set_cur_score(from.cur_score());
    }
    if (from.has_ismaster()) {
      set_ismaster(from.ismaster());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_update_slot_master_show_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_update_slot_master_show_info::CopyFrom(const msg_update_slot_master_show_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_update_slot_master_show_info::IsInitialized() const {

  return true;
}

void msg_update_slot_master_show_info::Swap(msg_update_slot_master_show_info* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(nickname_, other->nickname_);
    std::swap(attac_line_, other->attac_line_);
    std::swap(attac_score_, other->attac_score_);
    std::swap(lost_count_, other->lost_count_);
    std::swap(win_count_, other->win_count_);
    std::swap(cur_score_, other->cur_score_);
    std::swap(ismaster_, other->ismaster_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_update_slot_master_show_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_update_slot_master_show_info_descriptor_;
  metadata.reflection = msg_update_slot_master_show_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_update_slot_master_show_info_rep::kTypeFieldNumber;
const int msg_update_slot_master_show_info_rep::kInfoFieldNumber;
#endif  // !_MSC_VER

msg_update_slot_master_show_info_rep::msg_update_slot_master_show_info_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_update_slot_master_show_info_rep::InitAsDefaultInstance() {
}

msg_update_slot_master_show_info_rep::msg_update_slot_master_show_info_rep(const msg_update_slot_master_show_info_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_update_slot_master_show_info_rep::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_update_slot_master_show_info_rep::~msg_update_slot_master_show_info_rep() {
  SharedDtor();
}

void msg_update_slot_master_show_info_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_update_slot_master_show_info_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_update_slot_master_show_info_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_update_slot_master_show_info_rep_descriptor_;
}

const msg_update_slot_master_show_info_rep& msg_update_slot_master_show_info_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_slot_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_update_slot_master_show_info_rep* msg_update_slot_master_show_info_rep::default_instance_ = NULL;

msg_update_slot_master_show_info_rep* msg_update_slot_master_show_info_rep::New() const {
  return new msg_update_slot_master_show_info_rep;
}

void msg_update_slot_master_show_info_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_update_slot_master_show_info_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .net.msg_update_slot_master_show_info info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_update_slot_master_show_info_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // repeated .net.msg_update_slot_master_show_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_update_slot_master_show_info_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // repeated .net.msg_update_slot_master_show_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_update_slot_master_show_info_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  // repeated .net.msg_update_slot_master_show_info info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_update_slot_master_show_info_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_update_slot_master_show_info_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_update_slot_master_show_info_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_update_slot_master_show_info_rep::MergeFrom(const msg_update_slot_master_show_info_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_update_slot_master_show_info_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_update_slot_master_show_info_rep::CopyFrom(const msg_update_slot_master_show_info_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_update_slot_master_show_info_rep::IsInitialized() const {

  return true;
}

void msg_update_slot_master_show_info_rep::Swap(msg_update_slot_master_show_info_rep* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_update_slot_master_show_info_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_update_slot_master_show_info_rep_descriptor_;
  metadata.reflection = msg_update_slot_master_show_info_rep_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace net

// @@protoc_insertion_point(global_scope)
