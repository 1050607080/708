// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fishing_logic_msg.proto

#ifndef PROTOBUF_fishing_5flogic_5fmsg_2eproto__INCLUDED
#define PROTOBUF_fishing_5flogic_5fmsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "base_msg_struct.pb.h"
#include "error_code.pb.h"
// @@protoc_insertion_point(includes)

namespace net {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_fishing_5flogic_5fmsg_2eproto();
void protobuf_AssignDesc_fishing_5flogic_5fmsg_2eproto();
void protobuf_ShutdownFile_fishing_5flogic_5fmsg_2eproto();

class msg_fishing_game_info_rep;
class msg_fishing_game_info_rsp;
class msg_fishing_hit_req;
class msg_fishing_hit_rsp;
class msg_fishing_hit_no_fish_rsp;
class msg_fishing_shooting_req;
class msg_fishing_notice_shooting;
class msg_fishing_change_bot;
class msg_fishing_notice_change_bot;
class msg_fishing_notice_change_map;
class msg_fishing_use_prop;
class msg_fishing_notice_use_prop;
class msg_fishing_map_info_rep;
class msg_fishing_map_info_rsp;
class msg_fishing_bullet_trace_req;
class msg_fishing_notice_bullet_trace;
class msg_fishing_new_bullet_req;
class msg_fishing_notice_new_bullet;

// ===================================================================

class msg_fishing_game_info_rep : public ::google::protobuf::Message {
 public:
  msg_fishing_game_info_rep();
  virtual ~msg_fishing_game_info_rep();

  msg_fishing_game_info_rep(const msg_fishing_game_info_rep& from);

  inline msg_fishing_game_info_rep& operator=(const msg_fishing_game_info_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_fishing_game_info_rep& default_instance();

  void Swap(msg_fishing_game_info_rep* other);

  // implements Message ----------------------------------------------

  msg_fishing_game_info_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_fishing_game_info_rep& from);
  void MergeFrom(const msg_fishing_game_info_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:net.msg_fishing_game_info_rep)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_fishing_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_fishing_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_fishing_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_fishing_game_info_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_fishing_game_info_rsp : public ::google::protobuf::Message {
 public:
  msg_fishing_game_info_rsp();
  virtual ~msg_fishing_game_info_rsp();

  msg_fishing_game_info_rsp(const msg_fishing_game_info_rsp& from);

  inline msg_fishing_game_info_rsp& operator=(const msg_fishing_game_info_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_fishing_game_info_rsp& default_instance();

  void Swap(msg_fishing_game_info_rsp* other);

  // implements Message ----------------------------------------------

  msg_fishing_game_info_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_fishing_game_info_rsp& from);
  void MergeFrom(const msg_fishing_game_info_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 interval_time = 1;
  inline bool has_interval_time() const;
  inline void clear_interval_time();
  static const int kIntervalTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 interval_time() const;
  inline void set_interval_time(::google::protobuf::uint32 value);

  // repeated uint32 fish_no = 2;
  inline int fish_no_size() const;
  inline void clear_fish_no();
  static const int kFishNoFieldNumber = 2;
  inline ::google::protobuf::uint32 fish_no(int index) const;
  inline void set_fish_no(int index, ::google::protobuf::uint32 value);
  inline void add_fish_no(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      fish_no() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_fish_no();

  // optional uint32 map_id = 3;
  inline bool has_map_id() const;
  inline void clear_map_id();
  static const int kMapIdFieldNumber = 3;
  inline ::google::protobuf::uint32 map_id() const;
  inline void set_map_id(::google::protobuf::uint32 value);

  // optional uint32 bullet_id = 4;
  inline bool has_bullet_id() const;
  inline void clear_bullet_id();
  static const int kBulletIdFieldNumber = 4;
  inline ::google::protobuf::uint32 bullet_id() const;
  inline void set_bullet_id(::google::protobuf::uint32 value);

  // repeated uint32 bot_list = 5;
  inline int bot_list_size() const;
  inline void clear_bot_list();
  static const int kBotListFieldNumber = 5;
  inline ::google::protobuf::uint32 bot_list(int index) const;
  inline void set_bot_list(int index, ::google::protobuf::uint32 value);
  inline void add_bot_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      bot_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_bot_list();

  // repeated uint32 arm_range = 6;
  inline int arm_range_size() const;
  inline void clear_arm_range();
  static const int kArmRangeFieldNumber = 6;
  inline ::google::protobuf::uint32 arm_range(int index) const;
  inline void set_arm_range(int index, ::google::protobuf::uint32 value);
  inline void add_arm_range(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      arm_range() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_arm_range();

  // @@protoc_insertion_point(class_scope:net.msg_fishing_game_info_rsp)
 private:
  inline void set_has_interval_time();
  inline void clear_has_interval_time();
  inline void set_has_map_id();
  inline void clear_has_map_id();
  inline void set_has_bullet_id();
  inline void clear_has_bullet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > fish_no_;
  ::google::protobuf::uint32 interval_time_;
  ::google::protobuf::uint32 map_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > bot_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > arm_range_;
  ::google::protobuf::uint32 bullet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_fishing_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_fishing_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_fishing_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_fishing_game_info_rsp* default_instance_;
};
// -------------------------------------------------------------------

class msg_fishing_hit_req : public ::google::protobuf::Message {
 public:
  msg_fishing_hit_req();
  virtual ~msg_fishing_hit_req();

  msg_fishing_hit_req(const msg_fishing_hit_req& from);

  inline msg_fishing_hit_req& operator=(const msg_fishing_hit_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_fishing_hit_req& default_instance();

  void Swap(msg_fishing_hit_req* other);

  // implements Message ----------------------------------------------

  msg_fishing_hit_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_fishing_hit_req& from);
  void MergeFrom(const msg_fishing_hit_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 seat_id = 1;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 1;
  inline ::google::protobuf::uint32 seat_id() const;
  inline void set_seat_id(::google::protobuf::uint32 value);

  // optional uint32 bullet_id = 2;
  inline bool has_bullet_id() const;
  inline void clear_bullet_id();
  static const int kBulletIdFieldNumber = 2;
  inline ::google::protobuf::uint32 bullet_id() const;
  inline void set_bullet_id(::google::protobuf::uint32 value);

  // optional uint32 bullet_bot = 3;
  inline bool has_bullet_bot() const;
  inline void clear_bullet_bot();
  static const int kBulletBotFieldNumber = 3;
  inline ::google::protobuf::uint32 bullet_bot() const;
  inline void set_bullet_bot(::google::protobuf::uint32 value);

  // optional uint32 fish_no = 4;
  inline bool has_fish_no() const;
  inline void clear_fish_no();
  static const int kFishNoFieldNumber = 4;
  inline ::google::protobuf::uint32 fish_no() const;
  inline void set_fish_no(::google::protobuf::uint32 value);

  // optional uint64 timestamp = 5;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:net.msg_fishing_hit_req)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_bullet_id();
  inline void clear_has_bullet_id();
  inline void set_has_bullet_bot();
  inline void clear_has_bullet_bot();
  inline void set_has_fish_no();
  inline void clear_has_fish_no();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 seat_id_;
  ::google::protobuf::uint32 bullet_id_;
  ::google::protobuf::uint32 bullet_bot_;
  ::google::protobuf::uint32 fish_no_;
  ::google::protobuf::uint64 timestamp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_fishing_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_fishing_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_fishing_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_fishing_hit_req* default_instance_;
};
// -------------------------------------------------------------------

class msg_fishing_hit_rsp : public ::google::protobuf::Message {
 public:
  msg_fishing_hit_rsp();
  virtual ~msg_fishing_hit_rsp();

  msg_fishing_hit_rsp(const msg_fishing_hit_rsp& from);

  inline msg_fishing_hit_rsp& operator=(const msg_fishing_hit_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_fishing_hit_rsp& default_instance();

  void Swap(msg_fishing_hit_rsp* other);

  // implements Message ----------------------------------------------

  msg_fishing_hit_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_fishing_hit_rsp& from);
  void MergeFrom(const msg_fishing_hit_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 seat_id = 1;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 1;
  inline ::google::protobuf::uint32 seat_id() const;
  inline void set_seat_id(::google::protobuf::uint32 value);

  // optional uint32 bullet_id = 2;
  inline bool has_bullet_id() const;
  inline void clear_bullet_id();
  static const int kBulletIdFieldNumber = 2;
  inline ::google::protobuf::uint32 bullet_id() const;
  inline void set_bullet_id(::google::protobuf::uint32 value);

  // optional uint32 bullet_bot = 3;
  inline bool has_bullet_bot() const;
  inline void clear_bullet_bot();
  static const int kBulletBotFieldNumber = 3;
  inline ::google::protobuf::uint32 bullet_bot() const;
  inline void set_bullet_bot(::google::protobuf::uint32 value);

  // optional uint32 fish_id = 4;
  inline bool has_fish_id() const;
  inline void clear_fish_id();
  static const int kFishIdFieldNumber = 4;
  inline ::google::protobuf::uint32 fish_id() const;
  inline void set_fish_id(::google::protobuf::uint32 value);

  // optional uint32 fish_multi = 5;
  inline bool has_fish_multi() const;
  inline void clear_fish_multi();
  static const int kFishMultiFieldNumber = 5;
  inline ::google::protobuf::uint32 fish_multi() const;
  inline void set_fish_multi(::google::protobuf::uint32 value);

  // optional uint32 score = 6;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 6;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_fishing_hit_rsp)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_bullet_id();
  inline void clear_has_bullet_id();
  inline void set_has_bullet_bot();
  inline void clear_has_bullet_bot();
  inline void set_has_fish_id();
  inline void clear_has_fish_id();
  inline void set_has_fish_multi();
  inline void clear_has_fish_multi();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 seat_id_;
  ::google::protobuf::uint32 bullet_id_;
  ::google::protobuf::uint32 bullet_bot_;
  ::google::protobuf::uint32 fish_id_;
  ::google::protobuf::uint32 fish_multi_;
  ::google::protobuf::uint32 score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_fishing_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_fishing_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_fishing_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_fishing_hit_rsp* default_instance_;
};
// -------------------------------------------------------------------

class msg_fishing_hit_no_fish_rsp : public ::google::protobuf::Message {
 public:
  msg_fishing_hit_no_fish_rsp();
  virtual ~msg_fishing_hit_no_fish_rsp();

  msg_fishing_hit_no_fish_rsp(const msg_fishing_hit_no_fish_rsp& from);

  inline msg_fishing_hit_no_fish_rsp& operator=(const msg_fishing_hit_no_fish_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_fishing_hit_no_fish_rsp& default_instance();

  void Swap(msg_fishing_hit_no_fish_rsp* other);

  // implements Message ----------------------------------------------

  msg_fishing_hit_no_fish_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_fishing_hit_no_fish_rsp& from);
  void MergeFrom(const msg_fishing_hit_no_fish_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 seat_id = 1;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 1;
  inline ::google::protobuf::uint32 seat_id() const;
  inline void set_seat_id(::google::protobuf::uint32 value);

  // optional uint32 bullet_id = 2;
  inline bool has_bullet_id() const;
  inline void clear_bullet_id();
  static const int kBulletIdFieldNumber = 2;
  inline ::google::protobuf::uint32 bullet_id() const;
  inline void set_bullet_id(::google::protobuf::uint32 value);

  // optional uint32 bullet_bot = 3;
  inline bool has_bullet_bot() const;
  inline void clear_bullet_bot();
  static const int kBulletBotFieldNumber = 3;
  inline ::google::protobuf::uint32 bullet_bot() const;
  inline void set_bullet_bot(::google::protobuf::uint32 value);

  // optional uint32 fish_id = 4;
  inline bool has_fish_id() const;
  inline void clear_fish_id();
  static const int kFishIdFieldNumber = 4;
  inline ::google::protobuf::uint32 fish_id() const;
  inline void set_fish_id(::google::protobuf::uint32 value);

  // optional uint64 timestamp = 5;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:net.msg_fishing_hit_no_fish_rsp)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_bullet_id();
  inline void clear_has_bullet_id();
  inline void set_has_bullet_bot();
  inline void clear_has_bullet_bot();
  inline void set_has_fish_id();
  inline void clear_has_fish_id();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 seat_id_;
  ::google::protobuf::uint32 bullet_id_;
  ::google::protobuf::uint32 bullet_bot_;
  ::google::protobuf::uint32 fish_id_;
  ::google::protobuf::uint64 timestamp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_fishing_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_fishing_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_fishing_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_fishing_hit_no_fish_rsp* default_instance_;
};
// -------------------------------------------------------------------

class msg_fishing_shooting_req : public ::google::protobuf::Message {
 public:
  msg_fishing_shooting_req();
  virtual ~msg_fishing_shooting_req();

  msg_fishing_shooting_req(const msg_fishing_shooting_req& from);

  inline msg_fishing_shooting_req& operator=(const msg_fishing_shooting_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_fishing_shooting_req& default_instance();

  void Swap(msg_fishing_shooting_req* other);

  // implements Message ----------------------------------------------

  msg_fishing_shooting_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_fishing_shooting_req& from);
  void MergeFrom(const msg_fishing_shooting_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 seat_id = 1;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 1;
  inline ::google::protobuf::uint32 seat_id() const;
  inline void set_seat_id(::google::protobuf::uint32 value);

  // optional uint32 bullet_id = 2;
  inline bool has_bullet_id() const;
  inline void clear_bullet_id();
  static const int kBulletIdFieldNumber = 2;
  inline ::google::protobuf::uint32 bullet_id() const;
  inline void set_bullet_id(::google::protobuf::uint32 value);

  // optional int32 bullet_direct = 3;
  inline bool has_bullet_direct() const;
  inline void clear_bullet_direct();
  static const int kBulletDirectFieldNumber = 3;
  inline ::google::protobuf::int32 bullet_direct() const;
  inline void set_bullet_direct(::google::protobuf::int32 value);

  // optional uint32 bullet_bot = 4;
  inline bool has_bullet_bot() const;
  inline void clear_bullet_bot();
  static const int kBulletBotFieldNumber = 4;
  inline ::google::protobuf::uint32 bullet_bot() const;
  inline void set_bullet_bot(::google::protobuf::uint32 value);

  // optional uint32 fish_no = 5;
  inline bool has_fish_no() const;
  inline void clear_fish_no();
  static const int kFishNoFieldNumber = 5;
  inline ::google::protobuf::uint32 fish_no() const;
  inline void set_fish_no(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_fishing_shooting_req)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_bullet_id();
  inline void clear_has_bullet_id();
  inline void set_has_bullet_direct();
  inline void clear_has_bullet_direct();
  inline void set_has_bullet_bot();
  inline void clear_has_bullet_bot();
  inline void set_has_fish_no();
  inline void clear_has_fish_no();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 seat_id_;
  ::google::protobuf::uint32 bullet_id_;
  ::google::protobuf::int32 bullet_direct_;
  ::google::protobuf::uint32 bullet_bot_;
  ::google::protobuf::uint32 fish_no_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_fishing_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_fishing_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_fishing_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_fishing_shooting_req* default_instance_;
};
// -------------------------------------------------------------------

class msg_fishing_notice_shooting : public ::google::protobuf::Message {
 public:
  msg_fishing_notice_shooting();
  virtual ~msg_fishing_notice_shooting();

  msg_fishing_notice_shooting(const msg_fishing_notice_shooting& from);

  inline msg_fishing_notice_shooting& operator=(const msg_fishing_notice_shooting& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_fishing_notice_shooting& default_instance();

  void Swap(msg_fishing_notice_shooting* other);

  // implements Message ----------------------------------------------

  msg_fishing_notice_shooting* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_fishing_notice_shooting& from);
  void MergeFrom(const msg_fishing_notice_shooting& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 seat_id = 1;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 1;
  inline ::google::protobuf::uint32 seat_id() const;
  inline void set_seat_id(::google::protobuf::uint32 value);

  // optional uint32 bullet_id = 2;
  inline bool has_bullet_id() const;
  inline void clear_bullet_id();
  static const int kBulletIdFieldNumber = 2;
  inline ::google::protobuf::uint32 bullet_id() const;
  inline void set_bullet_id(::google::protobuf::uint32 value);

  // optional int32 bullet_direct = 3;
  inline bool has_bullet_direct() const;
  inline void clear_bullet_direct();
  static const int kBulletDirectFieldNumber = 3;
  inline ::google::protobuf::int32 bullet_direct() const;
  inline void set_bullet_direct(::google::protobuf::int32 value);

  // optional uint32 bullet_bot = 4;
  inline bool has_bullet_bot() const;
  inline void clear_bullet_bot();
  static const int kBulletBotFieldNumber = 4;
  inline ::google::protobuf::uint32 bullet_bot() const;
  inline void set_bullet_bot(::google::protobuf::uint32 value);

  // optional uint32 score = 5;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 5;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // optional uint32 fish_no = 6;
  inline bool has_fish_no() const;
  inline void clear_fish_no();
  static const int kFishNoFieldNumber = 6;
  inline ::google::protobuf::uint32 fish_no() const;
  inline void set_fish_no(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_fishing_notice_shooting)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_bullet_id();
  inline void clear_has_bullet_id();
  inline void set_has_bullet_direct();
  inline void clear_has_bullet_direct();
  inline void set_has_bullet_bot();
  inline void clear_has_bullet_bot();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_fish_no();
  inline void clear_has_fish_no();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 seat_id_;
  ::google::protobuf::uint32 bullet_id_;
  ::google::protobuf::int32 bullet_direct_;
  ::google::protobuf::uint32 bullet_bot_;
  ::google::protobuf::uint32 score_;
  ::google::protobuf::uint32 fish_no_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_fishing_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_fishing_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_fishing_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_fishing_notice_shooting* default_instance_;
};
// -------------------------------------------------------------------

class msg_fishing_change_bot : public ::google::protobuf::Message {
 public:
  msg_fishing_change_bot();
  virtual ~msg_fishing_change_bot();

  msg_fishing_change_bot(const msg_fishing_change_bot& from);

  inline msg_fishing_change_bot& operator=(const msg_fishing_change_bot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_fishing_change_bot& default_instance();

  void Swap(msg_fishing_change_bot* other);

  // implements Message ----------------------------------------------

  msg_fishing_change_bot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_fishing_change_bot& from);
  void MergeFrom(const msg_fishing_change_bot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 seat_id = 1;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 1;
  inline ::google::protobuf::uint32 seat_id() const;
  inline void set_seat_id(::google::protobuf::uint32 value);

  // optional uint32 bot = 2;
  inline bool has_bot() const;
  inline void clear_bot();
  static const int kBotFieldNumber = 2;
  inline ::google::protobuf::uint32 bot() const;
  inline void set_bot(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_fishing_change_bot)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_bot();
  inline void clear_has_bot();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 seat_id_;
  ::google::protobuf::uint32 bot_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_fishing_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_fishing_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_fishing_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_fishing_change_bot* default_instance_;
};
// -------------------------------------------------------------------

class msg_fishing_notice_change_bot : public ::google::protobuf::Message {
 public:
  msg_fishing_notice_change_bot();
  virtual ~msg_fishing_notice_change_bot();

  msg_fishing_notice_change_bot(const msg_fishing_notice_change_bot& from);

  inline msg_fishing_notice_change_bot& operator=(const msg_fishing_notice_change_bot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_fishing_notice_change_bot& default_instance();

  void Swap(msg_fishing_notice_change_bot* other);

  // implements Message ----------------------------------------------

  msg_fishing_notice_change_bot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_fishing_notice_change_bot& from);
  void MergeFrom(const msg_fishing_notice_change_bot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 seat_id = 1;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 1;
  inline ::google::protobuf::uint32 seat_id() const;
  inline void set_seat_id(::google::protobuf::uint32 value);

  // optional uint32 bot = 2;
  inline bool has_bot() const;
  inline void clear_bot();
  static const int kBotFieldNumber = 2;
  inline ::google::protobuf::uint32 bot() const;
  inline void set_bot(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_fishing_notice_change_bot)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_bot();
  inline void clear_has_bot();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 seat_id_;
  ::google::protobuf::uint32 bot_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_fishing_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_fishing_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_fishing_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_fishing_notice_change_bot* default_instance_;
};
// -------------------------------------------------------------------

class msg_fishing_notice_change_map : public ::google::protobuf::Message {
 public:
  msg_fishing_notice_change_map();
  virtual ~msg_fishing_notice_change_map();

  msg_fishing_notice_change_map(const msg_fishing_notice_change_map& from);

  inline msg_fishing_notice_change_map& operator=(const msg_fishing_notice_change_map& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_fishing_notice_change_map& default_instance();

  void Swap(msg_fishing_notice_change_map* other);

  // implements Message ----------------------------------------------

  msg_fishing_notice_change_map* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_fishing_notice_change_map& from);
  void MergeFrom(const msg_fishing_notice_change_map& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 map_id = 1;
  inline bool has_map_id() const;
  inline void clear_map_id();
  static const int kMapIdFieldNumber = 1;
  inline ::google::protobuf::uint32 map_id() const;
  inline void set_map_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_fishing_notice_change_map)
 private:
  inline void set_has_map_id();
  inline void clear_has_map_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 map_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_fishing_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_fishing_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_fishing_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_fishing_notice_change_map* default_instance_;
};
// -------------------------------------------------------------------

class msg_fishing_use_prop : public ::google::protobuf::Message {
 public:
  msg_fishing_use_prop();
  virtual ~msg_fishing_use_prop();

  msg_fishing_use_prop(const msg_fishing_use_prop& from);

  inline msg_fishing_use_prop& operator=(const msg_fishing_use_prop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_fishing_use_prop& default_instance();

  void Swap(msg_fishing_use_prop* other);

  // implements Message ----------------------------------------------

  msg_fishing_use_prop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_fishing_use_prop& from);
  void MergeFrom(const msg_fishing_use_prop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 seat_id = 1;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 1;
  inline ::google::protobuf::uint32 seat_id() const;
  inline void set_seat_id(::google::protobuf::uint32 value);

  // optional uint32 prop_id = 2;
  inline bool has_prop_id() const;
  inline void clear_prop_id();
  static const int kPropIdFieldNumber = 2;
  inline ::google::protobuf::uint32 prop_id() const;
  inline void set_prop_id(::google::protobuf::uint32 value);

  // optional uint32 state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_fishing_use_prop)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_prop_id();
  inline void clear_has_prop_id();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 seat_id_;
  ::google::protobuf::uint32 prop_id_;
  ::google::protobuf::uint32 state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_fishing_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_fishing_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_fishing_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_fishing_use_prop* default_instance_;
};
// -------------------------------------------------------------------

class msg_fishing_notice_use_prop : public ::google::protobuf::Message {
 public:
  msg_fishing_notice_use_prop();
  virtual ~msg_fishing_notice_use_prop();

  msg_fishing_notice_use_prop(const msg_fishing_notice_use_prop& from);

  inline msg_fishing_notice_use_prop& operator=(const msg_fishing_notice_use_prop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_fishing_notice_use_prop& default_instance();

  void Swap(msg_fishing_notice_use_prop* other);

  // implements Message ----------------------------------------------

  msg_fishing_notice_use_prop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_fishing_notice_use_prop& from);
  void MergeFrom(const msg_fishing_notice_use_prop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 seat_id = 1;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 1;
  inline ::google::protobuf::uint32 seat_id() const;
  inline void set_seat_id(::google::protobuf::uint32 value);

  // optional uint32 prop_id = 2;
  inline bool has_prop_id() const;
  inline void clear_prop_id();
  static const int kPropIdFieldNumber = 2;
  inline ::google::protobuf::uint32 prop_id() const;
  inline void set_prop_id(::google::protobuf::uint32 value);

  // optional uint32 state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_fishing_notice_use_prop)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_prop_id();
  inline void clear_has_prop_id();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 seat_id_;
  ::google::protobuf::uint32 prop_id_;
  ::google::protobuf::uint32 state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_fishing_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_fishing_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_fishing_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_fishing_notice_use_prop* default_instance_;
};
// -------------------------------------------------------------------

class msg_fishing_map_info_rep : public ::google::protobuf::Message {
 public:
  msg_fishing_map_info_rep();
  virtual ~msg_fishing_map_info_rep();

  msg_fishing_map_info_rep(const msg_fishing_map_info_rep& from);

  inline msg_fishing_map_info_rep& operator=(const msg_fishing_map_info_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_fishing_map_info_rep& default_instance();

  void Swap(msg_fishing_map_info_rep* other);

  // implements Message ----------------------------------------------

  msg_fishing_map_info_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_fishing_map_info_rep& from);
  void MergeFrom(const msg_fishing_map_info_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:net.msg_fishing_map_info_rep)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_fishing_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_fishing_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_fishing_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_fishing_map_info_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_fishing_map_info_rsp : public ::google::protobuf::Message {
 public:
  msg_fishing_map_info_rsp();
  virtual ~msg_fishing_map_info_rsp();

  msg_fishing_map_info_rsp(const msg_fishing_map_info_rsp& from);

  inline msg_fishing_map_info_rsp& operator=(const msg_fishing_map_info_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_fishing_map_info_rsp& default_instance();

  void Swap(msg_fishing_map_info_rsp* other);

  // implements Message ----------------------------------------------

  msg_fishing_map_info_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_fishing_map_info_rsp& from);
  void MergeFrom(const msg_fishing_map_info_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 interval_time = 1;
  inline bool has_interval_time() const;
  inline void clear_interval_time();
  static const int kIntervalTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 interval_time() const;
  inline void set_interval_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_fishing_map_info_rsp)
 private:
  inline void set_has_interval_time();
  inline void clear_has_interval_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 interval_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_fishing_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_fishing_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_fishing_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_fishing_map_info_rsp* default_instance_;
};
// -------------------------------------------------------------------

class msg_fishing_bullet_trace_req : public ::google::protobuf::Message {
 public:
  msg_fishing_bullet_trace_req();
  virtual ~msg_fishing_bullet_trace_req();

  msg_fishing_bullet_trace_req(const msg_fishing_bullet_trace_req& from);

  inline msg_fishing_bullet_trace_req& operator=(const msg_fishing_bullet_trace_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_fishing_bullet_trace_req& default_instance();

  void Swap(msg_fishing_bullet_trace_req* other);

  // implements Message ----------------------------------------------

  msg_fishing_bullet_trace_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_fishing_bullet_trace_req& from);
  void MergeFrom(const msg_fishing_bullet_trace_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 seat_id = 1;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 1;
  inline ::google::protobuf::uint32 seat_id() const;
  inline void set_seat_id(::google::protobuf::uint32 value);

  // optional uint32 fish_no = 2;
  inline bool has_fish_no() const;
  inline void clear_fish_no();
  static const int kFishNoFieldNumber = 2;
  inline ::google::protobuf::uint32 fish_no() const;
  inline void set_fish_no(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_fishing_bullet_trace_req)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_fish_no();
  inline void clear_has_fish_no();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 seat_id_;
  ::google::protobuf::uint32 fish_no_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_fishing_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_fishing_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_fishing_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_fishing_bullet_trace_req* default_instance_;
};
// -------------------------------------------------------------------

class msg_fishing_notice_bullet_trace : public ::google::protobuf::Message {
 public:
  msg_fishing_notice_bullet_trace();
  virtual ~msg_fishing_notice_bullet_trace();

  msg_fishing_notice_bullet_trace(const msg_fishing_notice_bullet_trace& from);

  inline msg_fishing_notice_bullet_trace& operator=(const msg_fishing_notice_bullet_trace& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_fishing_notice_bullet_trace& default_instance();

  void Swap(msg_fishing_notice_bullet_trace* other);

  // implements Message ----------------------------------------------

  msg_fishing_notice_bullet_trace* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_fishing_notice_bullet_trace& from);
  void MergeFrom(const msg_fishing_notice_bullet_trace& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 seat_id = 1;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 1;
  inline ::google::protobuf::uint32 seat_id() const;
  inline void set_seat_id(::google::protobuf::uint32 value);

  // optional uint32 fish_no = 2;
  inline bool has_fish_no() const;
  inline void clear_fish_no();
  static const int kFishNoFieldNumber = 2;
  inline ::google::protobuf::uint32 fish_no() const;
  inline void set_fish_no(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_fishing_notice_bullet_trace)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_fish_no();
  inline void clear_has_fish_no();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 seat_id_;
  ::google::protobuf::uint32 fish_no_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_fishing_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_fishing_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_fishing_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_fishing_notice_bullet_trace* default_instance_;
};
// -------------------------------------------------------------------

class msg_fishing_new_bullet_req : public ::google::protobuf::Message {
 public:
  msg_fishing_new_bullet_req();
  virtual ~msg_fishing_new_bullet_req();

  msg_fishing_new_bullet_req(const msg_fishing_new_bullet_req& from);

  inline msg_fishing_new_bullet_req& operator=(const msg_fishing_new_bullet_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_fishing_new_bullet_req& default_instance();

  void Swap(msg_fishing_new_bullet_req* other);

  // implements Message ----------------------------------------------

  msg_fishing_new_bullet_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_fishing_new_bullet_req& from);
  void MergeFrom(const msg_fishing_new_bullet_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 seat_id = 1;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 1;
  inline ::google::protobuf::uint32 seat_id() const;
  inline void set_seat_id(::google::protobuf::uint32 value);

  // optional uint32 bullet_id = 2;
  inline bool has_bullet_id() const;
  inline void clear_bullet_id();
  static const int kBulletIdFieldNumber = 2;
  inline ::google::protobuf::uint32 bullet_id() const;
  inline void set_bullet_id(::google::protobuf::uint32 value);

  // optional int32 bullet_direct = 3;
  inline bool has_bullet_direct() const;
  inline void clear_bullet_direct();
  static const int kBulletDirectFieldNumber = 3;
  inline ::google::protobuf::int32 bullet_direct() const;
  inline void set_bullet_direct(::google::protobuf::int32 value);

  // optional uint32 bullet_bot = 4;
  inline bool has_bullet_bot() const;
  inline void clear_bullet_bot();
  static const int kBulletBotFieldNumber = 4;
  inline ::google::protobuf::uint32 bullet_bot() const;
  inline void set_bullet_bot(::google::protobuf::uint32 value);

  // optional uint32 fish_no = 5;
  inline bool has_fish_no() const;
  inline void clear_fish_no();
  static const int kFishNoFieldNumber = 5;
  inline ::google::protobuf::uint32 fish_no() const;
  inline void set_fish_no(::google::protobuf::uint32 value);

  // optional int32 pos_x = 6;
  inline bool has_pos_x() const;
  inline void clear_pos_x();
  static const int kPosXFieldNumber = 6;
  inline ::google::protobuf::int32 pos_x() const;
  inline void set_pos_x(::google::protobuf::int32 value);

  // optional int32 pos_y = 7;
  inline bool has_pos_y() const;
  inline void clear_pos_y();
  static const int kPosYFieldNumber = 7;
  inline ::google::protobuf::int32 pos_y() const;
  inline void set_pos_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:net.msg_fishing_new_bullet_req)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_bullet_id();
  inline void clear_has_bullet_id();
  inline void set_has_bullet_direct();
  inline void clear_has_bullet_direct();
  inline void set_has_bullet_bot();
  inline void clear_has_bullet_bot();
  inline void set_has_fish_no();
  inline void clear_has_fish_no();
  inline void set_has_pos_x();
  inline void clear_has_pos_x();
  inline void set_has_pos_y();
  inline void clear_has_pos_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 seat_id_;
  ::google::protobuf::uint32 bullet_id_;
  ::google::protobuf::int32 bullet_direct_;
  ::google::protobuf::uint32 bullet_bot_;
  ::google::protobuf::uint32 fish_no_;
  ::google::protobuf::int32 pos_x_;
  ::google::protobuf::int32 pos_y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_fishing_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_fishing_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_fishing_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_fishing_new_bullet_req* default_instance_;
};
// -------------------------------------------------------------------

class msg_fishing_notice_new_bullet : public ::google::protobuf::Message {
 public:
  msg_fishing_notice_new_bullet();
  virtual ~msg_fishing_notice_new_bullet();

  msg_fishing_notice_new_bullet(const msg_fishing_notice_new_bullet& from);

  inline msg_fishing_notice_new_bullet& operator=(const msg_fishing_notice_new_bullet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_fishing_notice_new_bullet& default_instance();

  void Swap(msg_fishing_notice_new_bullet* other);

  // implements Message ----------------------------------------------

  msg_fishing_notice_new_bullet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_fishing_notice_new_bullet& from);
  void MergeFrom(const msg_fishing_notice_new_bullet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 seat_id = 1;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 1;
  inline ::google::protobuf::uint32 seat_id() const;
  inline void set_seat_id(::google::protobuf::uint32 value);

  // optional uint32 bullet_id = 2;
  inline bool has_bullet_id() const;
  inline void clear_bullet_id();
  static const int kBulletIdFieldNumber = 2;
  inline ::google::protobuf::uint32 bullet_id() const;
  inline void set_bullet_id(::google::protobuf::uint32 value);

  // optional int32 bullet_direct = 3;
  inline bool has_bullet_direct() const;
  inline void clear_bullet_direct();
  static const int kBulletDirectFieldNumber = 3;
  inline ::google::protobuf::int32 bullet_direct() const;
  inline void set_bullet_direct(::google::protobuf::int32 value);

  // optional uint32 bullet_bot = 4;
  inline bool has_bullet_bot() const;
  inline void clear_bullet_bot();
  static const int kBulletBotFieldNumber = 4;
  inline ::google::protobuf::uint32 bullet_bot() const;
  inline void set_bullet_bot(::google::protobuf::uint32 value);

  // optional uint32 fish_no = 5;
  inline bool has_fish_no() const;
  inline void clear_fish_no();
  static const int kFishNoFieldNumber = 5;
  inline ::google::protobuf::uint32 fish_no() const;
  inline void set_fish_no(::google::protobuf::uint32 value);

  // optional int32 pos_x = 6;
  inline bool has_pos_x() const;
  inline void clear_pos_x();
  static const int kPosXFieldNumber = 6;
  inline ::google::protobuf::int32 pos_x() const;
  inline void set_pos_x(::google::protobuf::int32 value);

  // optional int32 pos_y = 7;
  inline bool has_pos_y() const;
  inline void clear_pos_y();
  static const int kPosYFieldNumber = 7;
  inline ::google::protobuf::int32 pos_y() const;
  inline void set_pos_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:net.msg_fishing_notice_new_bullet)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_bullet_id();
  inline void clear_has_bullet_id();
  inline void set_has_bullet_direct();
  inline void clear_has_bullet_direct();
  inline void set_has_bullet_bot();
  inline void clear_has_bullet_bot();
  inline void set_has_fish_no();
  inline void clear_has_fish_no();
  inline void set_has_pos_x();
  inline void clear_has_pos_x();
  inline void set_has_pos_y();
  inline void clear_has_pos_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 seat_id_;
  ::google::protobuf::uint32 bullet_id_;
  ::google::protobuf::int32 bullet_direct_;
  ::google::protobuf::uint32 bullet_bot_;
  ::google::protobuf::uint32 fish_no_;
  ::google::protobuf::int32 pos_x_;
  ::google::protobuf::int32 pos_y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_fishing_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_fishing_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_fishing_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_fishing_notice_new_bullet* default_instance_;
};
// ===================================================================


// ===================================================================

// msg_fishing_game_info_rep

// -------------------------------------------------------------------

// msg_fishing_game_info_rsp

// optional uint32 interval_time = 1;
inline bool msg_fishing_game_info_rsp::has_interval_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_fishing_game_info_rsp::set_has_interval_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_fishing_game_info_rsp::clear_has_interval_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_fishing_game_info_rsp::clear_interval_time() {
  interval_time_ = 0u;
  clear_has_interval_time();
}
inline ::google::protobuf::uint32 msg_fishing_game_info_rsp::interval_time() const {
  return interval_time_;
}
inline void msg_fishing_game_info_rsp::set_interval_time(::google::protobuf::uint32 value) {
  set_has_interval_time();
  interval_time_ = value;
}

// repeated uint32 fish_no = 2;
inline int msg_fishing_game_info_rsp::fish_no_size() const {
  return fish_no_.size();
}
inline void msg_fishing_game_info_rsp::clear_fish_no() {
  fish_no_.Clear();
}
inline ::google::protobuf::uint32 msg_fishing_game_info_rsp::fish_no(int index) const {
  return fish_no_.Get(index);
}
inline void msg_fishing_game_info_rsp::set_fish_no(int index, ::google::protobuf::uint32 value) {
  fish_no_.Set(index, value);
}
inline void msg_fishing_game_info_rsp::add_fish_no(::google::protobuf::uint32 value) {
  fish_no_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
msg_fishing_game_info_rsp::fish_no() const {
  return fish_no_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
msg_fishing_game_info_rsp::mutable_fish_no() {
  return &fish_no_;
}

// optional uint32 map_id = 3;
inline bool msg_fishing_game_info_rsp::has_map_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_fishing_game_info_rsp::set_has_map_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_fishing_game_info_rsp::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_fishing_game_info_rsp::clear_map_id() {
  map_id_ = 0u;
  clear_has_map_id();
}
inline ::google::protobuf::uint32 msg_fishing_game_info_rsp::map_id() const {
  return map_id_;
}
inline void msg_fishing_game_info_rsp::set_map_id(::google::protobuf::uint32 value) {
  set_has_map_id();
  map_id_ = value;
}

// optional uint32 bullet_id = 4;
inline bool msg_fishing_game_info_rsp::has_bullet_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_fishing_game_info_rsp::set_has_bullet_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_fishing_game_info_rsp::clear_has_bullet_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_fishing_game_info_rsp::clear_bullet_id() {
  bullet_id_ = 0u;
  clear_has_bullet_id();
}
inline ::google::protobuf::uint32 msg_fishing_game_info_rsp::bullet_id() const {
  return bullet_id_;
}
inline void msg_fishing_game_info_rsp::set_bullet_id(::google::protobuf::uint32 value) {
  set_has_bullet_id();
  bullet_id_ = value;
}

// repeated uint32 bot_list = 5;
inline int msg_fishing_game_info_rsp::bot_list_size() const {
  return bot_list_.size();
}
inline void msg_fishing_game_info_rsp::clear_bot_list() {
  bot_list_.Clear();
}
inline ::google::protobuf::uint32 msg_fishing_game_info_rsp::bot_list(int index) const {
  return bot_list_.Get(index);
}
inline void msg_fishing_game_info_rsp::set_bot_list(int index, ::google::protobuf::uint32 value) {
  bot_list_.Set(index, value);
}
inline void msg_fishing_game_info_rsp::add_bot_list(::google::protobuf::uint32 value) {
  bot_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
msg_fishing_game_info_rsp::bot_list() const {
  return bot_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
msg_fishing_game_info_rsp::mutable_bot_list() {
  return &bot_list_;
}

// repeated uint32 arm_range = 6;
inline int msg_fishing_game_info_rsp::arm_range_size() const {
  return arm_range_.size();
}
inline void msg_fishing_game_info_rsp::clear_arm_range() {
  arm_range_.Clear();
}
inline ::google::protobuf::uint32 msg_fishing_game_info_rsp::arm_range(int index) const {
  return arm_range_.Get(index);
}
inline void msg_fishing_game_info_rsp::set_arm_range(int index, ::google::protobuf::uint32 value) {
  arm_range_.Set(index, value);
}
inline void msg_fishing_game_info_rsp::add_arm_range(::google::protobuf::uint32 value) {
  arm_range_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
msg_fishing_game_info_rsp::arm_range() const {
  return arm_range_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
msg_fishing_game_info_rsp::mutable_arm_range() {
  return &arm_range_;
}

// -------------------------------------------------------------------

// msg_fishing_hit_req

// optional uint32 seat_id = 1;
inline bool msg_fishing_hit_req::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_fishing_hit_req::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_fishing_hit_req::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_fishing_hit_req::clear_seat_id() {
  seat_id_ = 0u;
  clear_has_seat_id();
}
inline ::google::protobuf::uint32 msg_fishing_hit_req::seat_id() const {
  return seat_id_;
}
inline void msg_fishing_hit_req::set_seat_id(::google::protobuf::uint32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// optional uint32 bullet_id = 2;
inline bool msg_fishing_hit_req::has_bullet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_fishing_hit_req::set_has_bullet_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_fishing_hit_req::clear_has_bullet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_fishing_hit_req::clear_bullet_id() {
  bullet_id_ = 0u;
  clear_has_bullet_id();
}
inline ::google::protobuf::uint32 msg_fishing_hit_req::bullet_id() const {
  return bullet_id_;
}
inline void msg_fishing_hit_req::set_bullet_id(::google::protobuf::uint32 value) {
  set_has_bullet_id();
  bullet_id_ = value;
}

// optional uint32 bullet_bot = 3;
inline bool msg_fishing_hit_req::has_bullet_bot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_fishing_hit_req::set_has_bullet_bot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_fishing_hit_req::clear_has_bullet_bot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_fishing_hit_req::clear_bullet_bot() {
  bullet_bot_ = 0u;
  clear_has_bullet_bot();
}
inline ::google::protobuf::uint32 msg_fishing_hit_req::bullet_bot() const {
  return bullet_bot_;
}
inline void msg_fishing_hit_req::set_bullet_bot(::google::protobuf::uint32 value) {
  set_has_bullet_bot();
  bullet_bot_ = value;
}

// optional uint32 fish_no = 4;
inline bool msg_fishing_hit_req::has_fish_no() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_fishing_hit_req::set_has_fish_no() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_fishing_hit_req::clear_has_fish_no() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_fishing_hit_req::clear_fish_no() {
  fish_no_ = 0u;
  clear_has_fish_no();
}
inline ::google::protobuf::uint32 msg_fishing_hit_req::fish_no() const {
  return fish_no_;
}
inline void msg_fishing_hit_req::set_fish_no(::google::protobuf::uint32 value) {
  set_has_fish_no();
  fish_no_ = value;
}

// optional uint64 timestamp = 5;
inline bool msg_fishing_hit_req::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_fishing_hit_req::set_has_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_fishing_hit_req::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_fishing_hit_req::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 msg_fishing_hit_req::timestamp() const {
  return timestamp_;
}
inline void msg_fishing_hit_req::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// -------------------------------------------------------------------

// msg_fishing_hit_rsp

// optional uint32 seat_id = 1;
inline bool msg_fishing_hit_rsp::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_fishing_hit_rsp::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_fishing_hit_rsp::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_fishing_hit_rsp::clear_seat_id() {
  seat_id_ = 0u;
  clear_has_seat_id();
}
inline ::google::protobuf::uint32 msg_fishing_hit_rsp::seat_id() const {
  return seat_id_;
}
inline void msg_fishing_hit_rsp::set_seat_id(::google::protobuf::uint32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// optional uint32 bullet_id = 2;
inline bool msg_fishing_hit_rsp::has_bullet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_fishing_hit_rsp::set_has_bullet_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_fishing_hit_rsp::clear_has_bullet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_fishing_hit_rsp::clear_bullet_id() {
  bullet_id_ = 0u;
  clear_has_bullet_id();
}
inline ::google::protobuf::uint32 msg_fishing_hit_rsp::bullet_id() const {
  return bullet_id_;
}
inline void msg_fishing_hit_rsp::set_bullet_id(::google::protobuf::uint32 value) {
  set_has_bullet_id();
  bullet_id_ = value;
}

// optional uint32 bullet_bot = 3;
inline bool msg_fishing_hit_rsp::has_bullet_bot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_fishing_hit_rsp::set_has_bullet_bot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_fishing_hit_rsp::clear_has_bullet_bot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_fishing_hit_rsp::clear_bullet_bot() {
  bullet_bot_ = 0u;
  clear_has_bullet_bot();
}
inline ::google::protobuf::uint32 msg_fishing_hit_rsp::bullet_bot() const {
  return bullet_bot_;
}
inline void msg_fishing_hit_rsp::set_bullet_bot(::google::protobuf::uint32 value) {
  set_has_bullet_bot();
  bullet_bot_ = value;
}

// optional uint32 fish_id = 4;
inline bool msg_fishing_hit_rsp::has_fish_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_fishing_hit_rsp::set_has_fish_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_fishing_hit_rsp::clear_has_fish_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_fishing_hit_rsp::clear_fish_id() {
  fish_id_ = 0u;
  clear_has_fish_id();
}
inline ::google::protobuf::uint32 msg_fishing_hit_rsp::fish_id() const {
  return fish_id_;
}
inline void msg_fishing_hit_rsp::set_fish_id(::google::protobuf::uint32 value) {
  set_has_fish_id();
  fish_id_ = value;
}

// optional uint32 fish_multi = 5;
inline bool msg_fishing_hit_rsp::has_fish_multi() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_fishing_hit_rsp::set_has_fish_multi() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_fishing_hit_rsp::clear_has_fish_multi() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_fishing_hit_rsp::clear_fish_multi() {
  fish_multi_ = 0u;
  clear_has_fish_multi();
}
inline ::google::protobuf::uint32 msg_fishing_hit_rsp::fish_multi() const {
  return fish_multi_;
}
inline void msg_fishing_hit_rsp::set_fish_multi(::google::protobuf::uint32 value) {
  set_has_fish_multi();
  fish_multi_ = value;
}

// optional uint32 score = 6;
inline bool msg_fishing_hit_rsp::has_score() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_fishing_hit_rsp::set_has_score() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_fishing_hit_rsp::clear_has_score() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_fishing_hit_rsp::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 msg_fishing_hit_rsp::score() const {
  return score_;
}
inline void msg_fishing_hit_rsp::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// msg_fishing_hit_no_fish_rsp

// optional uint32 seat_id = 1;
inline bool msg_fishing_hit_no_fish_rsp::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_fishing_hit_no_fish_rsp::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_fishing_hit_no_fish_rsp::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_fishing_hit_no_fish_rsp::clear_seat_id() {
  seat_id_ = 0u;
  clear_has_seat_id();
}
inline ::google::protobuf::uint32 msg_fishing_hit_no_fish_rsp::seat_id() const {
  return seat_id_;
}
inline void msg_fishing_hit_no_fish_rsp::set_seat_id(::google::protobuf::uint32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// optional uint32 bullet_id = 2;
inline bool msg_fishing_hit_no_fish_rsp::has_bullet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_fishing_hit_no_fish_rsp::set_has_bullet_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_fishing_hit_no_fish_rsp::clear_has_bullet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_fishing_hit_no_fish_rsp::clear_bullet_id() {
  bullet_id_ = 0u;
  clear_has_bullet_id();
}
inline ::google::protobuf::uint32 msg_fishing_hit_no_fish_rsp::bullet_id() const {
  return bullet_id_;
}
inline void msg_fishing_hit_no_fish_rsp::set_bullet_id(::google::protobuf::uint32 value) {
  set_has_bullet_id();
  bullet_id_ = value;
}

// optional uint32 bullet_bot = 3;
inline bool msg_fishing_hit_no_fish_rsp::has_bullet_bot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_fishing_hit_no_fish_rsp::set_has_bullet_bot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_fishing_hit_no_fish_rsp::clear_has_bullet_bot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_fishing_hit_no_fish_rsp::clear_bullet_bot() {
  bullet_bot_ = 0u;
  clear_has_bullet_bot();
}
inline ::google::protobuf::uint32 msg_fishing_hit_no_fish_rsp::bullet_bot() const {
  return bullet_bot_;
}
inline void msg_fishing_hit_no_fish_rsp::set_bullet_bot(::google::protobuf::uint32 value) {
  set_has_bullet_bot();
  bullet_bot_ = value;
}

// optional uint32 fish_id = 4;
inline bool msg_fishing_hit_no_fish_rsp::has_fish_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_fishing_hit_no_fish_rsp::set_has_fish_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_fishing_hit_no_fish_rsp::clear_has_fish_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_fishing_hit_no_fish_rsp::clear_fish_id() {
  fish_id_ = 0u;
  clear_has_fish_id();
}
inline ::google::protobuf::uint32 msg_fishing_hit_no_fish_rsp::fish_id() const {
  return fish_id_;
}
inline void msg_fishing_hit_no_fish_rsp::set_fish_id(::google::protobuf::uint32 value) {
  set_has_fish_id();
  fish_id_ = value;
}

// optional uint64 timestamp = 5;
inline bool msg_fishing_hit_no_fish_rsp::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_fishing_hit_no_fish_rsp::set_has_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_fishing_hit_no_fish_rsp::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_fishing_hit_no_fish_rsp::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 msg_fishing_hit_no_fish_rsp::timestamp() const {
  return timestamp_;
}
inline void msg_fishing_hit_no_fish_rsp::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// -------------------------------------------------------------------

// msg_fishing_shooting_req

// optional uint32 seat_id = 1;
inline bool msg_fishing_shooting_req::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_fishing_shooting_req::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_fishing_shooting_req::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_fishing_shooting_req::clear_seat_id() {
  seat_id_ = 0u;
  clear_has_seat_id();
}
inline ::google::protobuf::uint32 msg_fishing_shooting_req::seat_id() const {
  return seat_id_;
}
inline void msg_fishing_shooting_req::set_seat_id(::google::protobuf::uint32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// optional uint32 bullet_id = 2;
inline bool msg_fishing_shooting_req::has_bullet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_fishing_shooting_req::set_has_bullet_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_fishing_shooting_req::clear_has_bullet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_fishing_shooting_req::clear_bullet_id() {
  bullet_id_ = 0u;
  clear_has_bullet_id();
}
inline ::google::protobuf::uint32 msg_fishing_shooting_req::bullet_id() const {
  return bullet_id_;
}
inline void msg_fishing_shooting_req::set_bullet_id(::google::protobuf::uint32 value) {
  set_has_bullet_id();
  bullet_id_ = value;
}

// optional int32 bullet_direct = 3;
inline bool msg_fishing_shooting_req::has_bullet_direct() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_fishing_shooting_req::set_has_bullet_direct() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_fishing_shooting_req::clear_has_bullet_direct() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_fishing_shooting_req::clear_bullet_direct() {
  bullet_direct_ = 0;
  clear_has_bullet_direct();
}
inline ::google::protobuf::int32 msg_fishing_shooting_req::bullet_direct() const {
  return bullet_direct_;
}
inline void msg_fishing_shooting_req::set_bullet_direct(::google::protobuf::int32 value) {
  set_has_bullet_direct();
  bullet_direct_ = value;
}

// optional uint32 bullet_bot = 4;
inline bool msg_fishing_shooting_req::has_bullet_bot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_fishing_shooting_req::set_has_bullet_bot() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_fishing_shooting_req::clear_has_bullet_bot() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_fishing_shooting_req::clear_bullet_bot() {
  bullet_bot_ = 0u;
  clear_has_bullet_bot();
}
inline ::google::protobuf::uint32 msg_fishing_shooting_req::bullet_bot() const {
  return bullet_bot_;
}
inline void msg_fishing_shooting_req::set_bullet_bot(::google::protobuf::uint32 value) {
  set_has_bullet_bot();
  bullet_bot_ = value;
}

// optional uint32 fish_no = 5;
inline bool msg_fishing_shooting_req::has_fish_no() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_fishing_shooting_req::set_has_fish_no() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_fishing_shooting_req::clear_has_fish_no() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_fishing_shooting_req::clear_fish_no() {
  fish_no_ = 0u;
  clear_has_fish_no();
}
inline ::google::protobuf::uint32 msg_fishing_shooting_req::fish_no() const {
  return fish_no_;
}
inline void msg_fishing_shooting_req::set_fish_no(::google::protobuf::uint32 value) {
  set_has_fish_no();
  fish_no_ = value;
}

// -------------------------------------------------------------------

// msg_fishing_notice_shooting

// optional uint32 seat_id = 1;
inline bool msg_fishing_notice_shooting::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_fishing_notice_shooting::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_fishing_notice_shooting::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_fishing_notice_shooting::clear_seat_id() {
  seat_id_ = 0u;
  clear_has_seat_id();
}
inline ::google::protobuf::uint32 msg_fishing_notice_shooting::seat_id() const {
  return seat_id_;
}
inline void msg_fishing_notice_shooting::set_seat_id(::google::protobuf::uint32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// optional uint32 bullet_id = 2;
inline bool msg_fishing_notice_shooting::has_bullet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_fishing_notice_shooting::set_has_bullet_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_fishing_notice_shooting::clear_has_bullet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_fishing_notice_shooting::clear_bullet_id() {
  bullet_id_ = 0u;
  clear_has_bullet_id();
}
inline ::google::protobuf::uint32 msg_fishing_notice_shooting::bullet_id() const {
  return bullet_id_;
}
inline void msg_fishing_notice_shooting::set_bullet_id(::google::protobuf::uint32 value) {
  set_has_bullet_id();
  bullet_id_ = value;
}

// optional int32 bullet_direct = 3;
inline bool msg_fishing_notice_shooting::has_bullet_direct() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_fishing_notice_shooting::set_has_bullet_direct() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_fishing_notice_shooting::clear_has_bullet_direct() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_fishing_notice_shooting::clear_bullet_direct() {
  bullet_direct_ = 0;
  clear_has_bullet_direct();
}
inline ::google::protobuf::int32 msg_fishing_notice_shooting::bullet_direct() const {
  return bullet_direct_;
}
inline void msg_fishing_notice_shooting::set_bullet_direct(::google::protobuf::int32 value) {
  set_has_bullet_direct();
  bullet_direct_ = value;
}

// optional uint32 bullet_bot = 4;
inline bool msg_fishing_notice_shooting::has_bullet_bot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_fishing_notice_shooting::set_has_bullet_bot() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_fishing_notice_shooting::clear_has_bullet_bot() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_fishing_notice_shooting::clear_bullet_bot() {
  bullet_bot_ = 0u;
  clear_has_bullet_bot();
}
inline ::google::protobuf::uint32 msg_fishing_notice_shooting::bullet_bot() const {
  return bullet_bot_;
}
inline void msg_fishing_notice_shooting::set_bullet_bot(::google::protobuf::uint32 value) {
  set_has_bullet_bot();
  bullet_bot_ = value;
}

// optional uint32 score = 5;
inline bool msg_fishing_notice_shooting::has_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_fishing_notice_shooting::set_has_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_fishing_notice_shooting::clear_has_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_fishing_notice_shooting::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 msg_fishing_notice_shooting::score() const {
  return score_;
}
inline void msg_fishing_notice_shooting::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
}

// optional uint32 fish_no = 6;
inline bool msg_fishing_notice_shooting::has_fish_no() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_fishing_notice_shooting::set_has_fish_no() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_fishing_notice_shooting::clear_has_fish_no() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_fishing_notice_shooting::clear_fish_no() {
  fish_no_ = 0u;
  clear_has_fish_no();
}
inline ::google::protobuf::uint32 msg_fishing_notice_shooting::fish_no() const {
  return fish_no_;
}
inline void msg_fishing_notice_shooting::set_fish_no(::google::protobuf::uint32 value) {
  set_has_fish_no();
  fish_no_ = value;
}

// -------------------------------------------------------------------

// msg_fishing_change_bot

// optional uint32 seat_id = 1;
inline bool msg_fishing_change_bot::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_fishing_change_bot::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_fishing_change_bot::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_fishing_change_bot::clear_seat_id() {
  seat_id_ = 0u;
  clear_has_seat_id();
}
inline ::google::protobuf::uint32 msg_fishing_change_bot::seat_id() const {
  return seat_id_;
}
inline void msg_fishing_change_bot::set_seat_id(::google::protobuf::uint32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// optional uint32 bot = 2;
inline bool msg_fishing_change_bot::has_bot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_fishing_change_bot::set_has_bot() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_fishing_change_bot::clear_has_bot() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_fishing_change_bot::clear_bot() {
  bot_ = 0u;
  clear_has_bot();
}
inline ::google::protobuf::uint32 msg_fishing_change_bot::bot() const {
  return bot_;
}
inline void msg_fishing_change_bot::set_bot(::google::protobuf::uint32 value) {
  set_has_bot();
  bot_ = value;
}

// -------------------------------------------------------------------

// msg_fishing_notice_change_bot

// optional uint32 seat_id = 1;
inline bool msg_fishing_notice_change_bot::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_fishing_notice_change_bot::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_fishing_notice_change_bot::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_fishing_notice_change_bot::clear_seat_id() {
  seat_id_ = 0u;
  clear_has_seat_id();
}
inline ::google::protobuf::uint32 msg_fishing_notice_change_bot::seat_id() const {
  return seat_id_;
}
inline void msg_fishing_notice_change_bot::set_seat_id(::google::protobuf::uint32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// optional uint32 bot = 2;
inline bool msg_fishing_notice_change_bot::has_bot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_fishing_notice_change_bot::set_has_bot() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_fishing_notice_change_bot::clear_has_bot() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_fishing_notice_change_bot::clear_bot() {
  bot_ = 0u;
  clear_has_bot();
}
inline ::google::protobuf::uint32 msg_fishing_notice_change_bot::bot() const {
  return bot_;
}
inline void msg_fishing_notice_change_bot::set_bot(::google::protobuf::uint32 value) {
  set_has_bot();
  bot_ = value;
}

// -------------------------------------------------------------------

// msg_fishing_notice_change_map

// optional uint32 map_id = 1;
inline bool msg_fishing_notice_change_map::has_map_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_fishing_notice_change_map::set_has_map_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_fishing_notice_change_map::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_fishing_notice_change_map::clear_map_id() {
  map_id_ = 0u;
  clear_has_map_id();
}
inline ::google::protobuf::uint32 msg_fishing_notice_change_map::map_id() const {
  return map_id_;
}
inline void msg_fishing_notice_change_map::set_map_id(::google::protobuf::uint32 value) {
  set_has_map_id();
  map_id_ = value;
}

// -------------------------------------------------------------------

// msg_fishing_use_prop

// optional uint32 seat_id = 1;
inline bool msg_fishing_use_prop::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_fishing_use_prop::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_fishing_use_prop::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_fishing_use_prop::clear_seat_id() {
  seat_id_ = 0u;
  clear_has_seat_id();
}
inline ::google::protobuf::uint32 msg_fishing_use_prop::seat_id() const {
  return seat_id_;
}
inline void msg_fishing_use_prop::set_seat_id(::google::protobuf::uint32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// optional uint32 prop_id = 2;
inline bool msg_fishing_use_prop::has_prop_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_fishing_use_prop::set_has_prop_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_fishing_use_prop::clear_has_prop_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_fishing_use_prop::clear_prop_id() {
  prop_id_ = 0u;
  clear_has_prop_id();
}
inline ::google::protobuf::uint32 msg_fishing_use_prop::prop_id() const {
  return prop_id_;
}
inline void msg_fishing_use_prop::set_prop_id(::google::protobuf::uint32 value) {
  set_has_prop_id();
  prop_id_ = value;
}

// optional uint32 state = 3;
inline bool msg_fishing_use_prop::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_fishing_use_prop::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_fishing_use_prop::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_fishing_use_prop::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 msg_fishing_use_prop::state() const {
  return state_;
}
inline void msg_fishing_use_prop::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// msg_fishing_notice_use_prop

// optional uint32 seat_id = 1;
inline bool msg_fishing_notice_use_prop::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_fishing_notice_use_prop::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_fishing_notice_use_prop::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_fishing_notice_use_prop::clear_seat_id() {
  seat_id_ = 0u;
  clear_has_seat_id();
}
inline ::google::protobuf::uint32 msg_fishing_notice_use_prop::seat_id() const {
  return seat_id_;
}
inline void msg_fishing_notice_use_prop::set_seat_id(::google::protobuf::uint32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// optional uint32 prop_id = 2;
inline bool msg_fishing_notice_use_prop::has_prop_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_fishing_notice_use_prop::set_has_prop_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_fishing_notice_use_prop::clear_has_prop_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_fishing_notice_use_prop::clear_prop_id() {
  prop_id_ = 0u;
  clear_has_prop_id();
}
inline ::google::protobuf::uint32 msg_fishing_notice_use_prop::prop_id() const {
  return prop_id_;
}
inline void msg_fishing_notice_use_prop::set_prop_id(::google::protobuf::uint32 value) {
  set_has_prop_id();
  prop_id_ = value;
}

// optional uint32 state = 3;
inline bool msg_fishing_notice_use_prop::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_fishing_notice_use_prop::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_fishing_notice_use_prop::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_fishing_notice_use_prop::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 msg_fishing_notice_use_prop::state() const {
  return state_;
}
inline void msg_fishing_notice_use_prop::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// msg_fishing_map_info_rep

// -------------------------------------------------------------------

// msg_fishing_map_info_rsp

// optional uint32 interval_time = 1;
inline bool msg_fishing_map_info_rsp::has_interval_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_fishing_map_info_rsp::set_has_interval_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_fishing_map_info_rsp::clear_has_interval_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_fishing_map_info_rsp::clear_interval_time() {
  interval_time_ = 0u;
  clear_has_interval_time();
}
inline ::google::protobuf::uint32 msg_fishing_map_info_rsp::interval_time() const {
  return interval_time_;
}
inline void msg_fishing_map_info_rsp::set_interval_time(::google::protobuf::uint32 value) {
  set_has_interval_time();
  interval_time_ = value;
}

// -------------------------------------------------------------------

// msg_fishing_bullet_trace_req

// optional uint32 seat_id = 1;
inline bool msg_fishing_bullet_trace_req::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_fishing_bullet_trace_req::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_fishing_bullet_trace_req::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_fishing_bullet_trace_req::clear_seat_id() {
  seat_id_ = 0u;
  clear_has_seat_id();
}
inline ::google::protobuf::uint32 msg_fishing_bullet_trace_req::seat_id() const {
  return seat_id_;
}
inline void msg_fishing_bullet_trace_req::set_seat_id(::google::protobuf::uint32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// optional uint32 fish_no = 2;
inline bool msg_fishing_bullet_trace_req::has_fish_no() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_fishing_bullet_trace_req::set_has_fish_no() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_fishing_bullet_trace_req::clear_has_fish_no() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_fishing_bullet_trace_req::clear_fish_no() {
  fish_no_ = 0u;
  clear_has_fish_no();
}
inline ::google::protobuf::uint32 msg_fishing_bullet_trace_req::fish_no() const {
  return fish_no_;
}
inline void msg_fishing_bullet_trace_req::set_fish_no(::google::protobuf::uint32 value) {
  set_has_fish_no();
  fish_no_ = value;
}

// -------------------------------------------------------------------

// msg_fishing_notice_bullet_trace

// optional uint32 seat_id = 1;
inline bool msg_fishing_notice_bullet_trace::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_fishing_notice_bullet_trace::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_fishing_notice_bullet_trace::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_fishing_notice_bullet_trace::clear_seat_id() {
  seat_id_ = 0u;
  clear_has_seat_id();
}
inline ::google::protobuf::uint32 msg_fishing_notice_bullet_trace::seat_id() const {
  return seat_id_;
}
inline void msg_fishing_notice_bullet_trace::set_seat_id(::google::protobuf::uint32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// optional uint32 fish_no = 2;
inline bool msg_fishing_notice_bullet_trace::has_fish_no() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_fishing_notice_bullet_trace::set_has_fish_no() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_fishing_notice_bullet_trace::clear_has_fish_no() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_fishing_notice_bullet_trace::clear_fish_no() {
  fish_no_ = 0u;
  clear_has_fish_no();
}
inline ::google::protobuf::uint32 msg_fishing_notice_bullet_trace::fish_no() const {
  return fish_no_;
}
inline void msg_fishing_notice_bullet_trace::set_fish_no(::google::protobuf::uint32 value) {
  set_has_fish_no();
  fish_no_ = value;
}

// -------------------------------------------------------------------

// msg_fishing_new_bullet_req

// optional uint32 seat_id = 1;
inline bool msg_fishing_new_bullet_req::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_fishing_new_bullet_req::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_fishing_new_bullet_req::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_fishing_new_bullet_req::clear_seat_id() {
  seat_id_ = 0u;
  clear_has_seat_id();
}
inline ::google::protobuf::uint32 msg_fishing_new_bullet_req::seat_id() const {
  return seat_id_;
}
inline void msg_fishing_new_bullet_req::set_seat_id(::google::protobuf::uint32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// optional uint32 bullet_id = 2;
inline bool msg_fishing_new_bullet_req::has_bullet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_fishing_new_bullet_req::set_has_bullet_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_fishing_new_bullet_req::clear_has_bullet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_fishing_new_bullet_req::clear_bullet_id() {
  bullet_id_ = 0u;
  clear_has_bullet_id();
}
inline ::google::protobuf::uint32 msg_fishing_new_bullet_req::bullet_id() const {
  return bullet_id_;
}
inline void msg_fishing_new_bullet_req::set_bullet_id(::google::protobuf::uint32 value) {
  set_has_bullet_id();
  bullet_id_ = value;
}

// optional int32 bullet_direct = 3;
inline bool msg_fishing_new_bullet_req::has_bullet_direct() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_fishing_new_bullet_req::set_has_bullet_direct() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_fishing_new_bullet_req::clear_has_bullet_direct() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_fishing_new_bullet_req::clear_bullet_direct() {
  bullet_direct_ = 0;
  clear_has_bullet_direct();
}
inline ::google::protobuf::int32 msg_fishing_new_bullet_req::bullet_direct() const {
  return bullet_direct_;
}
inline void msg_fishing_new_bullet_req::set_bullet_direct(::google::protobuf::int32 value) {
  set_has_bullet_direct();
  bullet_direct_ = value;
}

// optional uint32 bullet_bot = 4;
inline bool msg_fishing_new_bullet_req::has_bullet_bot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_fishing_new_bullet_req::set_has_bullet_bot() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_fishing_new_bullet_req::clear_has_bullet_bot() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_fishing_new_bullet_req::clear_bullet_bot() {
  bullet_bot_ = 0u;
  clear_has_bullet_bot();
}
inline ::google::protobuf::uint32 msg_fishing_new_bullet_req::bullet_bot() const {
  return bullet_bot_;
}
inline void msg_fishing_new_bullet_req::set_bullet_bot(::google::protobuf::uint32 value) {
  set_has_bullet_bot();
  bullet_bot_ = value;
}

// optional uint32 fish_no = 5;
inline bool msg_fishing_new_bullet_req::has_fish_no() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_fishing_new_bullet_req::set_has_fish_no() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_fishing_new_bullet_req::clear_has_fish_no() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_fishing_new_bullet_req::clear_fish_no() {
  fish_no_ = 0u;
  clear_has_fish_no();
}
inline ::google::protobuf::uint32 msg_fishing_new_bullet_req::fish_no() const {
  return fish_no_;
}
inline void msg_fishing_new_bullet_req::set_fish_no(::google::protobuf::uint32 value) {
  set_has_fish_no();
  fish_no_ = value;
}

// optional int32 pos_x = 6;
inline bool msg_fishing_new_bullet_req::has_pos_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_fishing_new_bullet_req::set_has_pos_x() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_fishing_new_bullet_req::clear_has_pos_x() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_fishing_new_bullet_req::clear_pos_x() {
  pos_x_ = 0;
  clear_has_pos_x();
}
inline ::google::protobuf::int32 msg_fishing_new_bullet_req::pos_x() const {
  return pos_x_;
}
inline void msg_fishing_new_bullet_req::set_pos_x(::google::protobuf::int32 value) {
  set_has_pos_x();
  pos_x_ = value;
}

// optional int32 pos_y = 7;
inline bool msg_fishing_new_bullet_req::has_pos_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_fishing_new_bullet_req::set_has_pos_y() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_fishing_new_bullet_req::clear_has_pos_y() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_fishing_new_bullet_req::clear_pos_y() {
  pos_y_ = 0;
  clear_has_pos_y();
}
inline ::google::protobuf::int32 msg_fishing_new_bullet_req::pos_y() const {
  return pos_y_;
}
inline void msg_fishing_new_bullet_req::set_pos_y(::google::protobuf::int32 value) {
  set_has_pos_y();
  pos_y_ = value;
}

// -------------------------------------------------------------------

// msg_fishing_notice_new_bullet

// optional uint32 seat_id = 1;
inline bool msg_fishing_notice_new_bullet::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_fishing_notice_new_bullet::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_fishing_notice_new_bullet::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_fishing_notice_new_bullet::clear_seat_id() {
  seat_id_ = 0u;
  clear_has_seat_id();
}
inline ::google::protobuf::uint32 msg_fishing_notice_new_bullet::seat_id() const {
  return seat_id_;
}
inline void msg_fishing_notice_new_bullet::set_seat_id(::google::protobuf::uint32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// optional uint32 bullet_id = 2;
inline bool msg_fishing_notice_new_bullet::has_bullet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_fishing_notice_new_bullet::set_has_bullet_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_fishing_notice_new_bullet::clear_has_bullet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_fishing_notice_new_bullet::clear_bullet_id() {
  bullet_id_ = 0u;
  clear_has_bullet_id();
}
inline ::google::protobuf::uint32 msg_fishing_notice_new_bullet::bullet_id() const {
  return bullet_id_;
}
inline void msg_fishing_notice_new_bullet::set_bullet_id(::google::protobuf::uint32 value) {
  set_has_bullet_id();
  bullet_id_ = value;
}

// optional int32 bullet_direct = 3;
inline bool msg_fishing_notice_new_bullet::has_bullet_direct() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_fishing_notice_new_bullet::set_has_bullet_direct() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_fishing_notice_new_bullet::clear_has_bullet_direct() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_fishing_notice_new_bullet::clear_bullet_direct() {
  bullet_direct_ = 0;
  clear_has_bullet_direct();
}
inline ::google::protobuf::int32 msg_fishing_notice_new_bullet::bullet_direct() const {
  return bullet_direct_;
}
inline void msg_fishing_notice_new_bullet::set_bullet_direct(::google::protobuf::int32 value) {
  set_has_bullet_direct();
  bullet_direct_ = value;
}

// optional uint32 bullet_bot = 4;
inline bool msg_fishing_notice_new_bullet::has_bullet_bot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_fishing_notice_new_bullet::set_has_bullet_bot() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_fishing_notice_new_bullet::clear_has_bullet_bot() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_fishing_notice_new_bullet::clear_bullet_bot() {
  bullet_bot_ = 0u;
  clear_has_bullet_bot();
}
inline ::google::protobuf::uint32 msg_fishing_notice_new_bullet::bullet_bot() const {
  return bullet_bot_;
}
inline void msg_fishing_notice_new_bullet::set_bullet_bot(::google::protobuf::uint32 value) {
  set_has_bullet_bot();
  bullet_bot_ = value;
}

// optional uint32 fish_no = 5;
inline bool msg_fishing_notice_new_bullet::has_fish_no() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_fishing_notice_new_bullet::set_has_fish_no() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_fishing_notice_new_bullet::clear_has_fish_no() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_fishing_notice_new_bullet::clear_fish_no() {
  fish_no_ = 0u;
  clear_has_fish_no();
}
inline ::google::protobuf::uint32 msg_fishing_notice_new_bullet::fish_no() const {
  return fish_no_;
}
inline void msg_fishing_notice_new_bullet::set_fish_no(::google::protobuf::uint32 value) {
  set_has_fish_no();
  fish_no_ = value;
}

// optional int32 pos_x = 6;
inline bool msg_fishing_notice_new_bullet::has_pos_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_fishing_notice_new_bullet::set_has_pos_x() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_fishing_notice_new_bullet::clear_has_pos_x() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_fishing_notice_new_bullet::clear_pos_x() {
  pos_x_ = 0;
  clear_has_pos_x();
}
inline ::google::protobuf::int32 msg_fishing_notice_new_bullet::pos_x() const {
  return pos_x_;
}
inline void msg_fishing_notice_new_bullet::set_pos_x(::google::protobuf::int32 value) {
  set_has_pos_x();
  pos_x_ = value;
}

// optional int32 pos_y = 7;
inline bool msg_fishing_notice_new_bullet::has_pos_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_fishing_notice_new_bullet::set_has_pos_y() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_fishing_notice_new_bullet::clear_has_pos_y() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_fishing_notice_new_bullet::clear_pos_y() {
  pos_y_ = 0;
  clear_has_pos_y();
}
inline ::google::protobuf::int32 msg_fishing_notice_new_bullet::pos_y() const {
  return pos_y_;
}
inline void msg_fishing_notice_new_bullet::set_pos_y(::google::protobuf::int32 value) {
  set_has_pos_y();
  pos_y_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace net

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_fishing_5flogic_5fmsg_2eproto__INCLUDED
