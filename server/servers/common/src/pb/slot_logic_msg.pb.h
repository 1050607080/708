// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: slot_logic_msg.proto

#ifndef PROTOBUF_slot_5flogic_5fmsg_2eproto__INCLUDED
#define PROTOBUF_slot_5flogic_5fmsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "base_msg_struct.pb.h"
#include "error_code.pb.h"
// @@protoc_insertion_point(includes)

namespace net {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_slot_5flogic_5fmsg_2eproto();
void protobuf_AssignDesc_slot_5flogic_5fmsg_2eproto();
void protobuf_ShutdownFile_slot_5flogic_5fmsg_2eproto();

class pos_pics;
class msg_slot_game_spin_req;
class msg_slot_game_spin_rep;
class msg_slot_game_play_info;
class msg_slot_game_jackpot_score;
class msg_slot_game_error_rep;
class msg_send_slot_master_ctrl_info;
class msg_send_slot_master_ctrl_info_req;
class msg_send_slot_master_ctrl_info_rep;
class msg_show_slot_master_ctrl_info_req;
class msg_show_slot_master_ctrl_info_rep;
class msg_update_slot_master_show_info_req;
class msg_update_slot_master_show_info;
class msg_update_slot_master_show_info_rep;

// ===================================================================

class pos_pics : public ::google::protobuf::Message {
 public:
  pos_pics();
  virtual ~pos_pics();

  pos_pics(const pos_pics& from);

  inline pos_pics& operator=(const pos_pics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pos_pics& default_instance();

  void Swap(pos_pics* other);

  // implements Message ----------------------------------------------

  pos_pics* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pos_pics& from);
  void MergeFrom(const pos_pics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 pic = 1;
  inline int pic_size() const;
  inline void clear_pic();
  static const int kPicFieldNumber = 1;
  inline ::google::protobuf::uint32 pic(int index) const;
  inline void set_pic(int index, ::google::protobuf::uint32 value);
  inline void add_pic(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      pic() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_pic();

  // @@protoc_insertion_point(class_scope:net.pos_pics)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > pic_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_slot_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_slot_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_slot_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static pos_pics* default_instance_;
};
// -------------------------------------------------------------------

class msg_slot_game_spin_req : public ::google::protobuf::Message {
 public:
  msg_slot_game_spin_req();
  virtual ~msg_slot_game_spin_req();

  msg_slot_game_spin_req(const msg_slot_game_spin_req& from);

  inline msg_slot_game_spin_req& operator=(const msg_slot_game_spin_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_slot_game_spin_req& default_instance();

  void Swap(msg_slot_game_spin_req* other);

  // implements Message ----------------------------------------------

  msg_slot_game_spin_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_slot_game_spin_req& from);
  void MergeFrom(const msg_slot_game_spin_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 linenum = 1;
  inline bool has_linenum() const;
  inline void clear_linenum();
  static const int kLinenumFieldNumber = 1;
  inline ::google::protobuf::uint32 linenum() const;
  inline void set_linenum(::google::protobuf::uint32 value);

  // optional uint32 betperline = 2;
  inline bool has_betperline() const;
  inline void clear_betperline();
  static const int kBetperlineFieldNumber = 2;
  inline ::google::protobuf::uint32 betperline() const;
  inline void set_betperline(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_slot_game_spin_req)
 private:
  inline void set_has_linenum();
  inline void clear_has_linenum();
  inline void set_has_betperline();
  inline void clear_has_betperline();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 linenum_;
  ::google::protobuf::uint32 betperline_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_slot_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_slot_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_slot_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_slot_game_spin_req* default_instance_;
};
// -------------------------------------------------------------------

class msg_slot_game_spin_rep : public ::google::protobuf::Message {
 public:
  msg_slot_game_spin_rep();
  virtual ~msg_slot_game_spin_rep();

  msg_slot_game_spin_rep(const msg_slot_game_spin_rep& from);

  inline msg_slot_game_spin_rep& operator=(const msg_slot_game_spin_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_slot_game_spin_rep& default_instance();

  void Swap(msg_slot_game_spin_rep* other);

  // implements Message ----------------------------------------------

  msg_slot_game_spin_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_slot_game_spin_rep& from);
  void MergeFrom(const msg_slot_game_spin_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .net.pos_pics pics = 1;
  inline int pics_size() const;
  inline void clear_pics();
  static const int kPicsFieldNumber = 1;
  inline const ::net::pos_pics& pics(int index) const;
  inline ::net::pos_pics* mutable_pics(int index);
  inline ::net::pos_pics* add_pics();
  inline const ::google::protobuf::RepeatedPtrField< ::net::pos_pics >&
      pics() const;
  inline ::google::protobuf::RepeatedPtrField< ::net::pos_pics >*
      mutable_pics();

  // optional uint32 freetimes = 2;
  inline bool has_freetimes() const;
  inline void clear_freetimes();
  static const int kFreetimesFieldNumber = 2;
  inline ::google::protobuf::uint32 freetimes() const;
  inline void set_freetimes(::google::protobuf::uint32 value);

  // optional int64 winscore = 3;
  inline bool has_winscore() const;
  inline void clear_winscore();
  static const int kWinscoreFieldNumber = 3;
  inline ::google::protobuf::int64 winscore() const;
  inline void set_winscore(::google::protobuf::int64 value);

  // optional int64 userscore = 4;
  inline bool has_userscore() const;
  inline void clear_userscore();
  static const int kUserscoreFieldNumber = 4;
  inline ::google::protobuf::int64 userscore() const;
  inline void set_userscore(::google::protobuf::int64 value);

  // optional int64 winjackpot_score = 5;
  inline bool has_winjackpot_score() const;
  inline void clear_winjackpot_score();
  static const int kWinjackpotScoreFieldNumber = 5;
  inline ::google::protobuf::int64 winjackpot_score() const;
  inline void set_winjackpot_score(::google::protobuf::int64 value);

  // optional int64 jackpot_score = 6;
  inline bool has_jackpot_score() const;
  inline void clear_jackpot_score();
  static const int kJackpotScoreFieldNumber = 6;
  inline ::google::protobuf::int64 jackpot_score() const;
  inline void set_jackpot_score(::google::protobuf::int64 value);

  // optional int64 free_winscore = 7;
  inline bool has_free_winscore() const;
  inline void clear_free_winscore();
  static const int kFreeWinscoreFieldNumber = 7;
  inline ::google::protobuf::int64 free_winscore() const;
  inline void set_free_winscore(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:net.msg_slot_game_spin_rep)
 private:
  inline void set_has_freetimes();
  inline void clear_has_freetimes();
  inline void set_has_winscore();
  inline void clear_has_winscore();
  inline void set_has_userscore();
  inline void clear_has_userscore();
  inline void set_has_winjackpot_score();
  inline void clear_has_winjackpot_score();
  inline void set_has_jackpot_score();
  inline void clear_has_jackpot_score();
  inline void set_has_free_winscore();
  inline void clear_has_free_winscore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::net::pos_pics > pics_;
  ::google::protobuf::int64 winscore_;
  ::google::protobuf::int64 userscore_;
  ::google::protobuf::int64 winjackpot_score_;
  ::google::protobuf::int64 jackpot_score_;
  ::google::protobuf::int64 free_winscore_;
  ::google::protobuf::uint32 freetimes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_slot_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_slot_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_slot_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_slot_game_spin_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_slot_game_play_info : public ::google::protobuf::Message {
 public:
  msg_slot_game_play_info();
  virtual ~msg_slot_game_play_info();

  msg_slot_game_play_info(const msg_slot_game_play_info& from);

  inline msg_slot_game_play_info& operator=(const msg_slot_game_play_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_slot_game_play_info& default_instance();

  void Swap(msg_slot_game_play_info* other);

  // implements Message ----------------------------------------------

  msg_slot_game_play_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_slot_game_play_info& from);
  void MergeFrom(const msg_slot_game_play_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 freetimes = 1;
  inline bool has_freetimes() const;
  inline void clear_freetimes();
  static const int kFreetimesFieldNumber = 1;
  inline ::google::protobuf::uint32 freetimes() const;
  inline void set_freetimes(::google::protobuf::uint32 value);

  // optional uint32 game_status = 2;
  inline bool has_game_status() const;
  inline void clear_game_status();
  static const int kGameStatusFieldNumber = 2;
  inline ::google::protobuf::uint32 game_status() const;
  inline void set_game_status(::google::protobuf::uint32 value);

  // optional int64 userscore = 3;
  inline bool has_userscore() const;
  inline void clear_userscore();
  static const int kUserscoreFieldNumber = 3;
  inline ::google::protobuf::int64 userscore() const;
  inline void set_userscore(::google::protobuf::int64 value);

  // optional int64 jackpot_score = 4;
  inline bool has_jackpot_score() const;
  inline void clear_jackpot_score();
  static const int kJackpotScoreFieldNumber = 4;
  inline ::google::protobuf::int64 jackpot_score() const;
  inline void set_jackpot_score(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:net.msg_slot_game_play_info)
 private:
  inline void set_has_freetimes();
  inline void clear_has_freetimes();
  inline void set_has_game_status();
  inline void clear_has_game_status();
  inline void set_has_userscore();
  inline void clear_has_userscore();
  inline void set_has_jackpot_score();
  inline void clear_has_jackpot_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 freetimes_;
  ::google::protobuf::uint32 game_status_;
  ::google::protobuf::int64 userscore_;
  ::google::protobuf::int64 jackpot_score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_slot_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_slot_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_slot_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_slot_game_play_info* default_instance_;
};
// -------------------------------------------------------------------

class msg_slot_game_jackpot_score : public ::google::protobuf::Message {
 public:
  msg_slot_game_jackpot_score();
  virtual ~msg_slot_game_jackpot_score();

  msg_slot_game_jackpot_score(const msg_slot_game_jackpot_score& from);

  inline msg_slot_game_jackpot_score& operator=(const msg_slot_game_jackpot_score& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_slot_game_jackpot_score& default_instance();

  void Swap(msg_slot_game_jackpot_score* other);

  // implements Message ----------------------------------------------

  msg_slot_game_jackpot_score* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_slot_game_jackpot_score& from);
  void MergeFrom(const msg_slot_game_jackpot_score& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 score = 1;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 1;
  inline ::google::protobuf::int64 score() const;
  inline void set_score(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:net.msg_slot_game_jackpot_score)
 private:
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_slot_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_slot_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_slot_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_slot_game_jackpot_score* default_instance_;
};
// -------------------------------------------------------------------

class msg_slot_game_error_rep : public ::google::protobuf::Message {
 public:
  msg_slot_game_error_rep();
  virtual ~msg_slot_game_error_rep();

  msg_slot_game_error_rep(const msg_slot_game_error_rep& from);

  inline msg_slot_game_error_rep& operator=(const msg_slot_game_error_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_slot_game_error_rep& default_instance();

  void Swap(msg_slot_game_error_rep* other);

  // implements Message ----------------------------------------------

  msg_slot_game_error_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_slot_game_error_rep& from);
  void MergeFrom(const msg_slot_game_error_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_slot_game_error_rep)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_slot_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_slot_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_slot_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_slot_game_error_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_send_slot_master_ctrl_info : public ::google::protobuf::Message {
 public:
  msg_send_slot_master_ctrl_info();
  virtual ~msg_send_slot_master_ctrl_info();

  msg_send_slot_master_ctrl_info(const msg_send_slot_master_ctrl_info& from);

  inline msg_send_slot_master_ctrl_info& operator=(const msg_send_slot_master_ctrl_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_send_slot_master_ctrl_info& default_instance();

  void Swap(msg_send_slot_master_ctrl_info* other);

  // implements Message ----------------------------------------------

  msg_send_slot_master_ctrl_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_send_slot_master_ctrl_info& from);
  void MergeFrom(const msg_send_slot_master_ctrl_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional int64 min_multiple = 2;
  inline bool has_min_multiple() const;
  inline void clear_min_multiple();
  static const int kMinMultipleFieldNumber = 2;
  inline ::google::protobuf::int64 min_multiple() const;
  inline void set_min_multiple(::google::protobuf::int64 value);

  // optional int64 max_multiple = 3;
  inline bool has_max_multiple() const;
  inline void clear_max_multiple();
  static const int kMaxMultipleFieldNumber = 3;
  inline ::google::protobuf::int64 max_multiple() const;
  inline void set_max_multiple(::google::protobuf::int64 value);

  // optional int64 ran_min_multiple = 4;
  inline bool has_ran_min_multiple() const;
  inline void clear_ran_min_multiple();
  static const int kRanMinMultipleFieldNumber = 4;
  inline ::google::protobuf::int64 ran_min_multiple() const;
  inline void set_ran_min_multiple(::google::protobuf::int64 value);

  // optional int64 ran_max_multiple = 5;
  inline bool has_ran_max_multiple() const;
  inline void clear_ran_max_multiple();
  static const int kRanMaxMultipleFieldNumber = 5;
  inline ::google::protobuf::int64 ran_max_multiple() const;
  inline void set_ran_max_multiple(::google::protobuf::int64 value);

  // optional uint32 all_lost_count = 6;
  inline bool has_all_lost_count() const;
  inline void clear_all_lost_count();
  static const int kAllLostCountFieldNumber = 6;
  inline ::google::protobuf::uint32 all_lost_count() const;
  inline void set_all_lost_count(::google::protobuf::uint32 value);

  // optional uint32 lost_count = 7;
  inline bool has_lost_count() const;
  inline void clear_lost_count();
  static const int kLostCountFieldNumber = 7;
  inline ::google::protobuf::uint32 lost_count() const;
  inline void set_lost_count(::google::protobuf::uint32 value);

  // optional uint32 all_win_count = 8;
  inline bool has_all_win_count() const;
  inline void clear_all_win_count();
  static const int kAllWinCountFieldNumber = 8;
  inline ::google::protobuf::uint32 all_win_count() const;
  inline void set_all_win_count(::google::protobuf::uint32 value);

  // optional uint32 win_count = 9;
  inline bool has_win_count() const;
  inline void clear_win_count();
  static const int kWinCountFieldNumber = 9;
  inline ::google::protobuf::uint32 win_count() const;
  inline void set_win_count(::google::protobuf::uint32 value);

  // optional uint32 free_spin = 10;
  inline bool has_free_spin() const;
  inline void clear_free_spin();
  static const int kFreeSpinFieldNumber = 10;
  inline ::google::protobuf::uint32 free_spin() const;
  inline void set_free_spin(::google::protobuf::uint32 value);

  // optional int64 jackpot_index = 11;
  inline bool has_jackpot_index() const;
  inline void clear_jackpot_index();
  static const int kJackpotIndexFieldNumber = 11;
  inline ::google::protobuf::int64 jackpot_index() const;
  inline void set_jackpot_index(::google::protobuf::int64 value);

  // optional uint32 all_pre_count = 12;
  inline bool has_all_pre_count() const;
  inline void clear_all_pre_count();
  static const int kAllPreCountFieldNumber = 12;
  inline ::google::protobuf::uint32 all_pre_count() const;
  inline void set_all_pre_count(::google::protobuf::uint32 value);

  // optional uint32 pre_count = 13;
  inline bool has_pre_count() const;
  inline void clear_pre_count();
  static const int kPreCountFieldNumber = 13;
  inline ::google::protobuf::uint32 pre_count() const;
  inline void set_pre_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_send_slot_master_ctrl_info)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_min_multiple();
  inline void clear_has_min_multiple();
  inline void set_has_max_multiple();
  inline void clear_has_max_multiple();
  inline void set_has_ran_min_multiple();
  inline void clear_has_ran_min_multiple();
  inline void set_has_ran_max_multiple();
  inline void clear_has_ran_max_multiple();
  inline void set_has_all_lost_count();
  inline void clear_has_all_lost_count();
  inline void set_has_lost_count();
  inline void clear_has_lost_count();
  inline void set_has_all_win_count();
  inline void clear_has_all_win_count();
  inline void set_has_win_count();
  inline void clear_has_win_count();
  inline void set_has_free_spin();
  inline void clear_has_free_spin();
  inline void set_has_jackpot_index();
  inline void clear_has_jackpot_index();
  inline void set_has_all_pre_count();
  inline void clear_has_all_pre_count();
  inline void set_has_pre_count();
  inline void clear_has_pre_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 min_multiple_;
  ::google::protobuf::int64 max_multiple_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 all_lost_count_;
  ::google::protobuf::int64 ran_min_multiple_;
  ::google::protobuf::int64 ran_max_multiple_;
  ::google::protobuf::uint32 lost_count_;
  ::google::protobuf::uint32 all_win_count_;
  ::google::protobuf::uint32 win_count_;
  ::google::protobuf::uint32 free_spin_;
  ::google::protobuf::int64 jackpot_index_;
  ::google::protobuf::uint32 all_pre_count_;
  ::google::protobuf::uint32 pre_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_slot_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_slot_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_slot_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_send_slot_master_ctrl_info* default_instance_;
};
// -------------------------------------------------------------------

class msg_send_slot_master_ctrl_info_req : public ::google::protobuf::Message {
 public:
  msg_send_slot_master_ctrl_info_req();
  virtual ~msg_send_slot_master_ctrl_info_req();

  msg_send_slot_master_ctrl_info_req(const msg_send_slot_master_ctrl_info_req& from);

  inline msg_send_slot_master_ctrl_info_req& operator=(const msg_send_slot_master_ctrl_info_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_send_slot_master_ctrl_info_req& default_instance();

  void Swap(msg_send_slot_master_ctrl_info_req* other);

  // implements Message ----------------------------------------------

  msg_send_slot_master_ctrl_info_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_send_slot_master_ctrl_info_req& from);
  void MergeFrom(const msg_send_slot_master_ctrl_info_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 oper_type = 1;
  inline bool has_oper_type() const;
  inline void clear_oper_type();
  static const int kOperTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 oper_type() const;
  inline void set_oper_type(::google::protobuf::uint32 value);

  // repeated uint32 rand_pro = 2;
  inline int rand_pro_size() const;
  inline void clear_rand_pro();
  static const int kRandProFieldNumber = 2;
  inline ::google::protobuf::uint32 rand_pro(int index) const;
  inline void set_rand_pro(int index, ::google::protobuf::uint32 value);
  inline void add_rand_pro(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      rand_pro() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_rand_pro();

  // optional .net.msg_send_slot_master_ctrl_info info = 3;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::net::msg_send_slot_master_ctrl_info& info() const;
  inline ::net::msg_send_slot_master_ctrl_info* mutable_info();
  inline ::net::msg_send_slot_master_ctrl_info* release_info();
  inline void set_allocated_info(::net::msg_send_slot_master_ctrl_info* info);

  // @@protoc_insertion_point(class_scope:net.msg_send_slot_master_ctrl_info_req)
 private:
  inline void set_has_oper_type();
  inline void clear_has_oper_type();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > rand_pro_;
  ::net::msg_send_slot_master_ctrl_info* info_;
  ::google::protobuf::uint32 oper_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_slot_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_slot_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_slot_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_send_slot_master_ctrl_info_req* default_instance_;
};
// -------------------------------------------------------------------

class msg_send_slot_master_ctrl_info_rep : public ::google::protobuf::Message {
 public:
  msg_send_slot_master_ctrl_info_rep();
  virtual ~msg_send_slot_master_ctrl_info_rep();

  msg_send_slot_master_ctrl_info_rep(const msg_send_slot_master_ctrl_info_rep& from);

  inline msg_send_slot_master_ctrl_info_rep& operator=(const msg_send_slot_master_ctrl_info_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_send_slot_master_ctrl_info_rep& default_instance();

  void Swap(msg_send_slot_master_ctrl_info_rep* other);

  // implements Message ----------------------------------------------

  msg_send_slot_master_ctrl_info_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_send_slot_master_ctrl_info_rep& from);
  void MergeFrom(const msg_send_slot_master_ctrl_info_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_send_slot_master_ctrl_info_rep)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_slot_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_slot_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_slot_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_send_slot_master_ctrl_info_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_show_slot_master_ctrl_info_req : public ::google::protobuf::Message {
 public:
  msg_show_slot_master_ctrl_info_req();
  virtual ~msg_show_slot_master_ctrl_info_req();

  msg_show_slot_master_ctrl_info_req(const msg_show_slot_master_ctrl_info_req& from);

  inline msg_show_slot_master_ctrl_info_req& operator=(const msg_show_slot_master_ctrl_info_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_show_slot_master_ctrl_info_req& default_instance();

  void Swap(msg_show_slot_master_ctrl_info_req* other);

  // implements Message ----------------------------------------------

  msg_show_slot_master_ctrl_info_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_show_slot_master_ctrl_info_req& from);
  void MergeFrom(const msg_show_slot_master_ctrl_info_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_show_slot_master_ctrl_info_req)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_slot_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_slot_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_slot_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_show_slot_master_ctrl_info_req* default_instance_;
};
// -------------------------------------------------------------------

class msg_show_slot_master_ctrl_info_rep : public ::google::protobuf::Message {
 public:
  msg_show_slot_master_ctrl_info_rep();
  virtual ~msg_show_slot_master_ctrl_info_rep();

  msg_show_slot_master_ctrl_info_rep(const msg_show_slot_master_ctrl_info_rep& from);

  inline msg_show_slot_master_ctrl_info_rep& operator=(const msg_show_slot_master_ctrl_info_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_show_slot_master_ctrl_info_rep& default_instance();

  void Swap(msg_show_slot_master_ctrl_info_rep* other);

  // implements Message ----------------------------------------------

  msg_show_slot_master_ctrl_info_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_show_slot_master_ctrl_info_rep& from);
  void MergeFrom(const msg_show_slot_master_ctrl_info_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 suid = 1;
  inline bool has_suid() const;
  inline void clear_suid();
  static const int kSuidFieldNumber = 1;
  inline ::google::protobuf::uint32 suid() const;
  inline void set_suid(::google::protobuf::uint32 value);

  // optional uint32 oper_type = 2;
  inline bool has_oper_type() const;
  inline void clear_oper_type();
  static const int kOperTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 oper_type() const;
  inline void set_oper_type(::google::protobuf::uint32 value);

  // repeated uint32 rand_pro = 3;
  inline int rand_pro_size() const;
  inline void clear_rand_pro();
  static const int kRandProFieldNumber = 3;
  inline ::google::protobuf::uint32 rand_pro(int index) const;
  inline void set_rand_pro(int index, ::google::protobuf::uint32 value);
  inline void add_rand_pro(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      rand_pro() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_rand_pro();

  // optional .net.msg_send_slot_master_ctrl_info info = 4;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 4;
  inline const ::net::msg_send_slot_master_ctrl_info& info() const;
  inline ::net::msg_send_slot_master_ctrl_info* mutable_info();
  inline ::net::msg_send_slot_master_ctrl_info* release_info();
  inline void set_allocated_info(::net::msg_send_slot_master_ctrl_info* info);

  // @@protoc_insertion_point(class_scope:net.msg_show_slot_master_ctrl_info_rep)
 private:
  inline void set_has_suid();
  inline void clear_has_suid();
  inline void set_has_oper_type();
  inline void clear_has_oper_type();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 suid_;
  ::google::protobuf::uint32 oper_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > rand_pro_;
  ::net::msg_send_slot_master_ctrl_info* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_slot_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_slot_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_slot_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_show_slot_master_ctrl_info_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_update_slot_master_show_info_req : public ::google::protobuf::Message {
 public:
  msg_update_slot_master_show_info_req();
  virtual ~msg_update_slot_master_show_info_req();

  msg_update_slot_master_show_info_req(const msg_update_slot_master_show_info_req& from);

  inline msg_update_slot_master_show_info_req& operator=(const msg_update_slot_master_show_info_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_update_slot_master_show_info_req& default_instance();

  void Swap(msg_update_slot_master_show_info_req* other);

  // implements Message ----------------------------------------------

  msg_update_slot_master_show_info_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_update_slot_master_show_info_req& from);
  void MergeFrom(const msg_update_slot_master_show_info_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:net.msg_update_slot_master_show_info_req)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_slot_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_slot_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_slot_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_update_slot_master_show_info_req* default_instance_;
};
// -------------------------------------------------------------------

class msg_update_slot_master_show_info : public ::google::protobuf::Message {
 public:
  msg_update_slot_master_show_info();
  virtual ~msg_update_slot_master_show_info();

  msg_update_slot_master_show_info(const msg_update_slot_master_show_info& from);

  inline msg_update_slot_master_show_info& operator=(const msg_update_slot_master_show_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_update_slot_master_show_info& default_instance();

  void Swap(msg_update_slot_master_show_info* other);

  // implements Message ----------------------------------------------

  msg_update_slot_master_show_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_update_slot_master_show_info& from);
  void MergeFrom(const msg_update_slot_master_show_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional bytes nickname = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const void* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional uint32 attac_line = 3;
  inline bool has_attac_line() const;
  inline void clear_attac_line();
  static const int kAttacLineFieldNumber = 3;
  inline ::google::protobuf::uint32 attac_line() const;
  inline void set_attac_line(::google::protobuf::uint32 value);

  // optional uint32 attac_score = 4;
  inline bool has_attac_score() const;
  inline void clear_attac_score();
  static const int kAttacScoreFieldNumber = 4;
  inline ::google::protobuf::uint32 attac_score() const;
  inline void set_attac_score(::google::protobuf::uint32 value);

  // optional uint32 lost_count = 5;
  inline bool has_lost_count() const;
  inline void clear_lost_count();
  static const int kLostCountFieldNumber = 5;
  inline ::google::protobuf::uint32 lost_count() const;
  inline void set_lost_count(::google::protobuf::uint32 value);

  // optional uint32 win_count = 6;
  inline bool has_win_count() const;
  inline void clear_win_count();
  static const int kWinCountFieldNumber = 6;
  inline ::google::protobuf::uint32 win_count() const;
  inline void set_win_count(::google::protobuf::uint32 value);

  // optional int64 cur_score = 7;
  inline bool has_cur_score() const;
  inline void clear_cur_score();
  static const int kCurScoreFieldNumber = 7;
  inline ::google::protobuf::int64 cur_score() const;
  inline void set_cur_score(::google::protobuf::int64 value);

  // optional uint32 ismaster = 8;
  inline bool has_ismaster() const;
  inline void clear_ismaster();
  static const int kIsmasterFieldNumber = 8;
  inline ::google::protobuf::uint32 ismaster() const;
  inline void set_ismaster(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_update_slot_master_show_info)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_attac_line();
  inline void clear_has_attac_line();
  inline void set_has_attac_score();
  inline void clear_has_attac_score();
  inline void set_has_lost_count();
  inline void clear_has_lost_count();
  inline void set_has_win_count();
  inline void clear_has_win_count();
  inline void set_has_cur_score();
  inline void clear_has_cur_score();
  inline void set_has_ismaster();
  inline void clear_has_ismaster();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* nickname_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 attac_line_;
  ::google::protobuf::uint32 attac_score_;
  ::google::protobuf::uint32 lost_count_;
  ::google::protobuf::int64 cur_score_;
  ::google::protobuf::uint32 win_count_;
  ::google::protobuf::uint32 ismaster_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_slot_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_slot_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_slot_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_update_slot_master_show_info* default_instance_;
};
// -------------------------------------------------------------------

class msg_update_slot_master_show_info_rep : public ::google::protobuf::Message {
 public:
  msg_update_slot_master_show_info_rep();
  virtual ~msg_update_slot_master_show_info_rep();

  msg_update_slot_master_show_info_rep(const msg_update_slot_master_show_info_rep& from);

  inline msg_update_slot_master_show_info_rep& operator=(const msg_update_slot_master_show_info_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_update_slot_master_show_info_rep& default_instance();

  void Swap(msg_update_slot_master_show_info_rep* other);

  // implements Message ----------------------------------------------

  msg_update_slot_master_show_info_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_update_slot_master_show_info_rep& from);
  void MergeFrom(const msg_update_slot_master_show_info_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // repeated .net.msg_update_slot_master_show_info info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::net::msg_update_slot_master_show_info& info(int index) const;
  inline ::net::msg_update_slot_master_show_info* mutable_info(int index);
  inline ::net::msg_update_slot_master_show_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::net::msg_update_slot_master_show_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::net::msg_update_slot_master_show_info >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:net.msg_update_slot_master_show_info_rep)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::net::msg_update_slot_master_show_info > info_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_slot_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_slot_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_slot_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_update_slot_master_show_info_rep* default_instance_;
};
// ===================================================================


// ===================================================================

// pos_pics

// repeated uint32 pic = 1;
inline int pos_pics::pic_size() const {
  return pic_.size();
}
inline void pos_pics::clear_pic() {
  pic_.Clear();
}
inline ::google::protobuf::uint32 pos_pics::pic(int index) const {
  return pic_.Get(index);
}
inline void pos_pics::set_pic(int index, ::google::protobuf::uint32 value) {
  pic_.Set(index, value);
}
inline void pos_pics::add_pic(::google::protobuf::uint32 value) {
  pic_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
pos_pics::pic() const {
  return pic_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
pos_pics::mutable_pic() {
  return &pic_;
}

// -------------------------------------------------------------------

// msg_slot_game_spin_req

// optional uint32 linenum = 1;
inline bool msg_slot_game_spin_req::has_linenum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_slot_game_spin_req::set_has_linenum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_slot_game_spin_req::clear_has_linenum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_slot_game_spin_req::clear_linenum() {
  linenum_ = 0u;
  clear_has_linenum();
}
inline ::google::protobuf::uint32 msg_slot_game_spin_req::linenum() const {
  return linenum_;
}
inline void msg_slot_game_spin_req::set_linenum(::google::protobuf::uint32 value) {
  set_has_linenum();
  linenum_ = value;
}

// optional uint32 betperline = 2;
inline bool msg_slot_game_spin_req::has_betperline() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_slot_game_spin_req::set_has_betperline() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_slot_game_spin_req::clear_has_betperline() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_slot_game_spin_req::clear_betperline() {
  betperline_ = 0u;
  clear_has_betperline();
}
inline ::google::protobuf::uint32 msg_slot_game_spin_req::betperline() const {
  return betperline_;
}
inline void msg_slot_game_spin_req::set_betperline(::google::protobuf::uint32 value) {
  set_has_betperline();
  betperline_ = value;
}

// -------------------------------------------------------------------

// msg_slot_game_spin_rep

// repeated .net.pos_pics pics = 1;
inline int msg_slot_game_spin_rep::pics_size() const {
  return pics_.size();
}
inline void msg_slot_game_spin_rep::clear_pics() {
  pics_.Clear();
}
inline const ::net::pos_pics& msg_slot_game_spin_rep::pics(int index) const {
  return pics_.Get(index);
}
inline ::net::pos_pics* msg_slot_game_spin_rep::mutable_pics(int index) {
  return pics_.Mutable(index);
}
inline ::net::pos_pics* msg_slot_game_spin_rep::add_pics() {
  return pics_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::net::pos_pics >&
msg_slot_game_spin_rep::pics() const {
  return pics_;
}
inline ::google::protobuf::RepeatedPtrField< ::net::pos_pics >*
msg_slot_game_spin_rep::mutable_pics() {
  return &pics_;
}

// optional uint32 freetimes = 2;
inline bool msg_slot_game_spin_rep::has_freetimes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_slot_game_spin_rep::set_has_freetimes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_slot_game_spin_rep::clear_has_freetimes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_slot_game_spin_rep::clear_freetimes() {
  freetimes_ = 0u;
  clear_has_freetimes();
}
inline ::google::protobuf::uint32 msg_slot_game_spin_rep::freetimes() const {
  return freetimes_;
}
inline void msg_slot_game_spin_rep::set_freetimes(::google::protobuf::uint32 value) {
  set_has_freetimes();
  freetimes_ = value;
}

// optional int64 winscore = 3;
inline bool msg_slot_game_spin_rep::has_winscore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_slot_game_spin_rep::set_has_winscore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_slot_game_spin_rep::clear_has_winscore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_slot_game_spin_rep::clear_winscore() {
  winscore_ = GOOGLE_LONGLONG(0);
  clear_has_winscore();
}
inline ::google::protobuf::int64 msg_slot_game_spin_rep::winscore() const {
  return winscore_;
}
inline void msg_slot_game_spin_rep::set_winscore(::google::protobuf::int64 value) {
  set_has_winscore();
  winscore_ = value;
}

// optional int64 userscore = 4;
inline bool msg_slot_game_spin_rep::has_userscore() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_slot_game_spin_rep::set_has_userscore() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_slot_game_spin_rep::clear_has_userscore() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_slot_game_spin_rep::clear_userscore() {
  userscore_ = GOOGLE_LONGLONG(0);
  clear_has_userscore();
}
inline ::google::protobuf::int64 msg_slot_game_spin_rep::userscore() const {
  return userscore_;
}
inline void msg_slot_game_spin_rep::set_userscore(::google::protobuf::int64 value) {
  set_has_userscore();
  userscore_ = value;
}

// optional int64 winjackpot_score = 5;
inline bool msg_slot_game_spin_rep::has_winjackpot_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_slot_game_spin_rep::set_has_winjackpot_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_slot_game_spin_rep::clear_has_winjackpot_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_slot_game_spin_rep::clear_winjackpot_score() {
  winjackpot_score_ = GOOGLE_LONGLONG(0);
  clear_has_winjackpot_score();
}
inline ::google::protobuf::int64 msg_slot_game_spin_rep::winjackpot_score() const {
  return winjackpot_score_;
}
inline void msg_slot_game_spin_rep::set_winjackpot_score(::google::protobuf::int64 value) {
  set_has_winjackpot_score();
  winjackpot_score_ = value;
}

// optional int64 jackpot_score = 6;
inline bool msg_slot_game_spin_rep::has_jackpot_score() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_slot_game_spin_rep::set_has_jackpot_score() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_slot_game_spin_rep::clear_has_jackpot_score() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_slot_game_spin_rep::clear_jackpot_score() {
  jackpot_score_ = GOOGLE_LONGLONG(0);
  clear_has_jackpot_score();
}
inline ::google::protobuf::int64 msg_slot_game_spin_rep::jackpot_score() const {
  return jackpot_score_;
}
inline void msg_slot_game_spin_rep::set_jackpot_score(::google::protobuf::int64 value) {
  set_has_jackpot_score();
  jackpot_score_ = value;
}

// optional int64 free_winscore = 7;
inline bool msg_slot_game_spin_rep::has_free_winscore() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_slot_game_spin_rep::set_has_free_winscore() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_slot_game_spin_rep::clear_has_free_winscore() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_slot_game_spin_rep::clear_free_winscore() {
  free_winscore_ = GOOGLE_LONGLONG(0);
  clear_has_free_winscore();
}
inline ::google::protobuf::int64 msg_slot_game_spin_rep::free_winscore() const {
  return free_winscore_;
}
inline void msg_slot_game_spin_rep::set_free_winscore(::google::protobuf::int64 value) {
  set_has_free_winscore();
  free_winscore_ = value;
}

// -------------------------------------------------------------------

// msg_slot_game_play_info

// optional uint32 freetimes = 1;
inline bool msg_slot_game_play_info::has_freetimes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_slot_game_play_info::set_has_freetimes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_slot_game_play_info::clear_has_freetimes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_slot_game_play_info::clear_freetimes() {
  freetimes_ = 0u;
  clear_has_freetimes();
}
inline ::google::protobuf::uint32 msg_slot_game_play_info::freetimes() const {
  return freetimes_;
}
inline void msg_slot_game_play_info::set_freetimes(::google::protobuf::uint32 value) {
  set_has_freetimes();
  freetimes_ = value;
}

// optional uint32 game_status = 2;
inline bool msg_slot_game_play_info::has_game_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_slot_game_play_info::set_has_game_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_slot_game_play_info::clear_has_game_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_slot_game_play_info::clear_game_status() {
  game_status_ = 0u;
  clear_has_game_status();
}
inline ::google::protobuf::uint32 msg_slot_game_play_info::game_status() const {
  return game_status_;
}
inline void msg_slot_game_play_info::set_game_status(::google::protobuf::uint32 value) {
  set_has_game_status();
  game_status_ = value;
}

// optional int64 userscore = 3;
inline bool msg_slot_game_play_info::has_userscore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_slot_game_play_info::set_has_userscore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_slot_game_play_info::clear_has_userscore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_slot_game_play_info::clear_userscore() {
  userscore_ = GOOGLE_LONGLONG(0);
  clear_has_userscore();
}
inline ::google::protobuf::int64 msg_slot_game_play_info::userscore() const {
  return userscore_;
}
inline void msg_slot_game_play_info::set_userscore(::google::protobuf::int64 value) {
  set_has_userscore();
  userscore_ = value;
}

// optional int64 jackpot_score = 4;
inline bool msg_slot_game_play_info::has_jackpot_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_slot_game_play_info::set_has_jackpot_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_slot_game_play_info::clear_has_jackpot_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_slot_game_play_info::clear_jackpot_score() {
  jackpot_score_ = GOOGLE_LONGLONG(0);
  clear_has_jackpot_score();
}
inline ::google::protobuf::int64 msg_slot_game_play_info::jackpot_score() const {
  return jackpot_score_;
}
inline void msg_slot_game_play_info::set_jackpot_score(::google::protobuf::int64 value) {
  set_has_jackpot_score();
  jackpot_score_ = value;
}

// -------------------------------------------------------------------

// msg_slot_game_jackpot_score

// optional int64 score = 1;
inline bool msg_slot_game_jackpot_score::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_slot_game_jackpot_score::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_slot_game_jackpot_score::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_slot_game_jackpot_score::clear_score() {
  score_ = GOOGLE_LONGLONG(0);
  clear_has_score();
}
inline ::google::protobuf::int64 msg_slot_game_jackpot_score::score() const {
  return score_;
}
inline void msg_slot_game_jackpot_score::set_score(::google::protobuf::int64 value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// msg_slot_game_error_rep

// optional uint32 result = 1;
inline bool msg_slot_game_error_rep::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_slot_game_error_rep::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_slot_game_error_rep::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_slot_game_error_rep::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 msg_slot_game_error_rep::result() const {
  return result_;
}
inline void msg_slot_game_error_rep::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// msg_send_slot_master_ctrl_info

// optional uint32 uid = 1;
inline bool msg_send_slot_master_ctrl_info::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_send_slot_master_ctrl_info::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_send_slot_master_ctrl_info::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_send_slot_master_ctrl_info::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 msg_send_slot_master_ctrl_info::uid() const {
  return uid_;
}
inline void msg_send_slot_master_ctrl_info::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional int64 min_multiple = 2;
inline bool msg_send_slot_master_ctrl_info::has_min_multiple() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_send_slot_master_ctrl_info::set_has_min_multiple() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_send_slot_master_ctrl_info::clear_has_min_multiple() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_send_slot_master_ctrl_info::clear_min_multiple() {
  min_multiple_ = GOOGLE_LONGLONG(0);
  clear_has_min_multiple();
}
inline ::google::protobuf::int64 msg_send_slot_master_ctrl_info::min_multiple() const {
  return min_multiple_;
}
inline void msg_send_slot_master_ctrl_info::set_min_multiple(::google::protobuf::int64 value) {
  set_has_min_multiple();
  min_multiple_ = value;
}

// optional int64 max_multiple = 3;
inline bool msg_send_slot_master_ctrl_info::has_max_multiple() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_send_slot_master_ctrl_info::set_has_max_multiple() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_send_slot_master_ctrl_info::clear_has_max_multiple() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_send_slot_master_ctrl_info::clear_max_multiple() {
  max_multiple_ = GOOGLE_LONGLONG(0);
  clear_has_max_multiple();
}
inline ::google::protobuf::int64 msg_send_slot_master_ctrl_info::max_multiple() const {
  return max_multiple_;
}
inline void msg_send_slot_master_ctrl_info::set_max_multiple(::google::protobuf::int64 value) {
  set_has_max_multiple();
  max_multiple_ = value;
}

// optional int64 ran_min_multiple = 4;
inline bool msg_send_slot_master_ctrl_info::has_ran_min_multiple() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_send_slot_master_ctrl_info::set_has_ran_min_multiple() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_send_slot_master_ctrl_info::clear_has_ran_min_multiple() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_send_slot_master_ctrl_info::clear_ran_min_multiple() {
  ran_min_multiple_ = GOOGLE_LONGLONG(0);
  clear_has_ran_min_multiple();
}
inline ::google::protobuf::int64 msg_send_slot_master_ctrl_info::ran_min_multiple() const {
  return ran_min_multiple_;
}
inline void msg_send_slot_master_ctrl_info::set_ran_min_multiple(::google::protobuf::int64 value) {
  set_has_ran_min_multiple();
  ran_min_multiple_ = value;
}

// optional int64 ran_max_multiple = 5;
inline bool msg_send_slot_master_ctrl_info::has_ran_max_multiple() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_send_slot_master_ctrl_info::set_has_ran_max_multiple() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_send_slot_master_ctrl_info::clear_has_ran_max_multiple() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_send_slot_master_ctrl_info::clear_ran_max_multiple() {
  ran_max_multiple_ = GOOGLE_LONGLONG(0);
  clear_has_ran_max_multiple();
}
inline ::google::protobuf::int64 msg_send_slot_master_ctrl_info::ran_max_multiple() const {
  return ran_max_multiple_;
}
inline void msg_send_slot_master_ctrl_info::set_ran_max_multiple(::google::protobuf::int64 value) {
  set_has_ran_max_multiple();
  ran_max_multiple_ = value;
}

// optional uint32 all_lost_count = 6;
inline bool msg_send_slot_master_ctrl_info::has_all_lost_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_send_slot_master_ctrl_info::set_has_all_lost_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_send_slot_master_ctrl_info::clear_has_all_lost_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_send_slot_master_ctrl_info::clear_all_lost_count() {
  all_lost_count_ = 0u;
  clear_has_all_lost_count();
}
inline ::google::protobuf::uint32 msg_send_slot_master_ctrl_info::all_lost_count() const {
  return all_lost_count_;
}
inline void msg_send_slot_master_ctrl_info::set_all_lost_count(::google::protobuf::uint32 value) {
  set_has_all_lost_count();
  all_lost_count_ = value;
}

// optional uint32 lost_count = 7;
inline bool msg_send_slot_master_ctrl_info::has_lost_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_send_slot_master_ctrl_info::set_has_lost_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_send_slot_master_ctrl_info::clear_has_lost_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_send_slot_master_ctrl_info::clear_lost_count() {
  lost_count_ = 0u;
  clear_has_lost_count();
}
inline ::google::protobuf::uint32 msg_send_slot_master_ctrl_info::lost_count() const {
  return lost_count_;
}
inline void msg_send_slot_master_ctrl_info::set_lost_count(::google::protobuf::uint32 value) {
  set_has_lost_count();
  lost_count_ = value;
}

// optional uint32 all_win_count = 8;
inline bool msg_send_slot_master_ctrl_info::has_all_win_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void msg_send_slot_master_ctrl_info::set_has_all_win_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void msg_send_slot_master_ctrl_info::clear_has_all_win_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void msg_send_slot_master_ctrl_info::clear_all_win_count() {
  all_win_count_ = 0u;
  clear_has_all_win_count();
}
inline ::google::protobuf::uint32 msg_send_slot_master_ctrl_info::all_win_count() const {
  return all_win_count_;
}
inline void msg_send_slot_master_ctrl_info::set_all_win_count(::google::protobuf::uint32 value) {
  set_has_all_win_count();
  all_win_count_ = value;
}

// optional uint32 win_count = 9;
inline bool msg_send_slot_master_ctrl_info::has_win_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void msg_send_slot_master_ctrl_info::set_has_win_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void msg_send_slot_master_ctrl_info::clear_has_win_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void msg_send_slot_master_ctrl_info::clear_win_count() {
  win_count_ = 0u;
  clear_has_win_count();
}
inline ::google::protobuf::uint32 msg_send_slot_master_ctrl_info::win_count() const {
  return win_count_;
}
inline void msg_send_slot_master_ctrl_info::set_win_count(::google::protobuf::uint32 value) {
  set_has_win_count();
  win_count_ = value;
}

// optional uint32 free_spin = 10;
inline bool msg_send_slot_master_ctrl_info::has_free_spin() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void msg_send_slot_master_ctrl_info::set_has_free_spin() {
  _has_bits_[0] |= 0x00000200u;
}
inline void msg_send_slot_master_ctrl_info::clear_has_free_spin() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void msg_send_slot_master_ctrl_info::clear_free_spin() {
  free_spin_ = 0u;
  clear_has_free_spin();
}
inline ::google::protobuf::uint32 msg_send_slot_master_ctrl_info::free_spin() const {
  return free_spin_;
}
inline void msg_send_slot_master_ctrl_info::set_free_spin(::google::protobuf::uint32 value) {
  set_has_free_spin();
  free_spin_ = value;
}

// optional int64 jackpot_index = 11;
inline bool msg_send_slot_master_ctrl_info::has_jackpot_index() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void msg_send_slot_master_ctrl_info::set_has_jackpot_index() {
  _has_bits_[0] |= 0x00000400u;
}
inline void msg_send_slot_master_ctrl_info::clear_has_jackpot_index() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void msg_send_slot_master_ctrl_info::clear_jackpot_index() {
  jackpot_index_ = GOOGLE_LONGLONG(0);
  clear_has_jackpot_index();
}
inline ::google::protobuf::int64 msg_send_slot_master_ctrl_info::jackpot_index() const {
  return jackpot_index_;
}
inline void msg_send_slot_master_ctrl_info::set_jackpot_index(::google::protobuf::int64 value) {
  set_has_jackpot_index();
  jackpot_index_ = value;
}

// optional uint32 all_pre_count = 12;
inline bool msg_send_slot_master_ctrl_info::has_all_pre_count() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void msg_send_slot_master_ctrl_info::set_has_all_pre_count() {
  _has_bits_[0] |= 0x00000800u;
}
inline void msg_send_slot_master_ctrl_info::clear_has_all_pre_count() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void msg_send_slot_master_ctrl_info::clear_all_pre_count() {
  all_pre_count_ = 0u;
  clear_has_all_pre_count();
}
inline ::google::protobuf::uint32 msg_send_slot_master_ctrl_info::all_pre_count() const {
  return all_pre_count_;
}
inline void msg_send_slot_master_ctrl_info::set_all_pre_count(::google::protobuf::uint32 value) {
  set_has_all_pre_count();
  all_pre_count_ = value;
}

// optional uint32 pre_count = 13;
inline bool msg_send_slot_master_ctrl_info::has_pre_count() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void msg_send_slot_master_ctrl_info::set_has_pre_count() {
  _has_bits_[0] |= 0x00001000u;
}
inline void msg_send_slot_master_ctrl_info::clear_has_pre_count() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void msg_send_slot_master_ctrl_info::clear_pre_count() {
  pre_count_ = 0u;
  clear_has_pre_count();
}
inline ::google::protobuf::uint32 msg_send_slot_master_ctrl_info::pre_count() const {
  return pre_count_;
}
inline void msg_send_slot_master_ctrl_info::set_pre_count(::google::protobuf::uint32 value) {
  set_has_pre_count();
  pre_count_ = value;
}

// -------------------------------------------------------------------

// msg_send_slot_master_ctrl_info_req

// optional uint32 oper_type = 1;
inline bool msg_send_slot_master_ctrl_info_req::has_oper_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_send_slot_master_ctrl_info_req::set_has_oper_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_send_slot_master_ctrl_info_req::clear_has_oper_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_send_slot_master_ctrl_info_req::clear_oper_type() {
  oper_type_ = 0u;
  clear_has_oper_type();
}
inline ::google::protobuf::uint32 msg_send_slot_master_ctrl_info_req::oper_type() const {
  return oper_type_;
}
inline void msg_send_slot_master_ctrl_info_req::set_oper_type(::google::protobuf::uint32 value) {
  set_has_oper_type();
  oper_type_ = value;
}

// repeated uint32 rand_pro = 2;
inline int msg_send_slot_master_ctrl_info_req::rand_pro_size() const {
  return rand_pro_.size();
}
inline void msg_send_slot_master_ctrl_info_req::clear_rand_pro() {
  rand_pro_.Clear();
}
inline ::google::protobuf::uint32 msg_send_slot_master_ctrl_info_req::rand_pro(int index) const {
  return rand_pro_.Get(index);
}
inline void msg_send_slot_master_ctrl_info_req::set_rand_pro(int index, ::google::protobuf::uint32 value) {
  rand_pro_.Set(index, value);
}
inline void msg_send_slot_master_ctrl_info_req::add_rand_pro(::google::protobuf::uint32 value) {
  rand_pro_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
msg_send_slot_master_ctrl_info_req::rand_pro() const {
  return rand_pro_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
msg_send_slot_master_ctrl_info_req::mutable_rand_pro() {
  return &rand_pro_;
}

// optional .net.msg_send_slot_master_ctrl_info info = 3;
inline bool msg_send_slot_master_ctrl_info_req::has_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_send_slot_master_ctrl_info_req::set_has_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_send_slot_master_ctrl_info_req::clear_has_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_send_slot_master_ctrl_info_req::clear_info() {
  if (info_ != NULL) info_->::net::msg_send_slot_master_ctrl_info::Clear();
  clear_has_info();
}
inline const ::net::msg_send_slot_master_ctrl_info& msg_send_slot_master_ctrl_info_req::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::net::msg_send_slot_master_ctrl_info* msg_send_slot_master_ctrl_info_req::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::net::msg_send_slot_master_ctrl_info;
  return info_;
}
inline ::net::msg_send_slot_master_ctrl_info* msg_send_slot_master_ctrl_info_req::release_info() {
  clear_has_info();
  ::net::msg_send_slot_master_ctrl_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void msg_send_slot_master_ctrl_info_req::set_allocated_info(::net::msg_send_slot_master_ctrl_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// msg_send_slot_master_ctrl_info_rep

// optional uint32 result = 1;
inline bool msg_send_slot_master_ctrl_info_rep::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_send_slot_master_ctrl_info_rep::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_send_slot_master_ctrl_info_rep::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_send_slot_master_ctrl_info_rep::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 msg_send_slot_master_ctrl_info_rep::result() const {
  return result_;
}
inline void msg_send_slot_master_ctrl_info_rep::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// msg_show_slot_master_ctrl_info_req

// optional uint32 uid = 1;
inline bool msg_show_slot_master_ctrl_info_req::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_show_slot_master_ctrl_info_req::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_show_slot_master_ctrl_info_req::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_show_slot_master_ctrl_info_req::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 msg_show_slot_master_ctrl_info_req::uid() const {
  return uid_;
}
inline void msg_show_slot_master_ctrl_info_req::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// -------------------------------------------------------------------

// msg_show_slot_master_ctrl_info_rep

// optional uint32 suid = 1;
inline bool msg_show_slot_master_ctrl_info_rep::has_suid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_show_slot_master_ctrl_info_rep::set_has_suid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_show_slot_master_ctrl_info_rep::clear_has_suid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_show_slot_master_ctrl_info_rep::clear_suid() {
  suid_ = 0u;
  clear_has_suid();
}
inline ::google::protobuf::uint32 msg_show_slot_master_ctrl_info_rep::suid() const {
  return suid_;
}
inline void msg_show_slot_master_ctrl_info_rep::set_suid(::google::protobuf::uint32 value) {
  set_has_suid();
  suid_ = value;
}

// optional uint32 oper_type = 2;
inline bool msg_show_slot_master_ctrl_info_rep::has_oper_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_show_slot_master_ctrl_info_rep::set_has_oper_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_show_slot_master_ctrl_info_rep::clear_has_oper_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_show_slot_master_ctrl_info_rep::clear_oper_type() {
  oper_type_ = 0u;
  clear_has_oper_type();
}
inline ::google::protobuf::uint32 msg_show_slot_master_ctrl_info_rep::oper_type() const {
  return oper_type_;
}
inline void msg_show_slot_master_ctrl_info_rep::set_oper_type(::google::protobuf::uint32 value) {
  set_has_oper_type();
  oper_type_ = value;
}

// repeated uint32 rand_pro = 3;
inline int msg_show_slot_master_ctrl_info_rep::rand_pro_size() const {
  return rand_pro_.size();
}
inline void msg_show_slot_master_ctrl_info_rep::clear_rand_pro() {
  rand_pro_.Clear();
}
inline ::google::protobuf::uint32 msg_show_slot_master_ctrl_info_rep::rand_pro(int index) const {
  return rand_pro_.Get(index);
}
inline void msg_show_slot_master_ctrl_info_rep::set_rand_pro(int index, ::google::protobuf::uint32 value) {
  rand_pro_.Set(index, value);
}
inline void msg_show_slot_master_ctrl_info_rep::add_rand_pro(::google::protobuf::uint32 value) {
  rand_pro_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
msg_show_slot_master_ctrl_info_rep::rand_pro() const {
  return rand_pro_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
msg_show_slot_master_ctrl_info_rep::mutable_rand_pro() {
  return &rand_pro_;
}

// optional .net.msg_send_slot_master_ctrl_info info = 4;
inline bool msg_show_slot_master_ctrl_info_rep::has_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_show_slot_master_ctrl_info_rep::set_has_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_show_slot_master_ctrl_info_rep::clear_has_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_show_slot_master_ctrl_info_rep::clear_info() {
  if (info_ != NULL) info_->::net::msg_send_slot_master_ctrl_info::Clear();
  clear_has_info();
}
inline const ::net::msg_send_slot_master_ctrl_info& msg_show_slot_master_ctrl_info_rep::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::net::msg_send_slot_master_ctrl_info* msg_show_slot_master_ctrl_info_rep::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::net::msg_send_slot_master_ctrl_info;
  return info_;
}
inline ::net::msg_send_slot_master_ctrl_info* msg_show_slot_master_ctrl_info_rep::release_info() {
  clear_has_info();
  ::net::msg_send_slot_master_ctrl_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void msg_show_slot_master_ctrl_info_rep::set_allocated_info(::net::msg_send_slot_master_ctrl_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// msg_update_slot_master_show_info_req

// -------------------------------------------------------------------

// msg_update_slot_master_show_info

// optional uint32 uid = 1;
inline bool msg_update_slot_master_show_info::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_update_slot_master_show_info::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_update_slot_master_show_info::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_update_slot_master_show_info::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 msg_update_slot_master_show_info::uid() const {
  return uid_;
}
inline void msg_update_slot_master_show_info::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional bytes nickname = 2;
inline bool msg_update_slot_master_show_info::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_update_slot_master_show_info::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_update_slot_master_show_info::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_update_slot_master_show_info::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& msg_update_slot_master_show_info::nickname() const {
  return *nickname_;
}
inline void msg_update_slot_master_show_info::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void msg_update_slot_master_show_info::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void msg_update_slot_master_show_info::set_nickname(const void* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_update_slot_master_show_info::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* msg_update_slot_master_show_info::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_update_slot_master_show_info::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 attac_line = 3;
inline bool msg_update_slot_master_show_info::has_attac_line() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_update_slot_master_show_info::set_has_attac_line() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_update_slot_master_show_info::clear_has_attac_line() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_update_slot_master_show_info::clear_attac_line() {
  attac_line_ = 0u;
  clear_has_attac_line();
}
inline ::google::protobuf::uint32 msg_update_slot_master_show_info::attac_line() const {
  return attac_line_;
}
inline void msg_update_slot_master_show_info::set_attac_line(::google::protobuf::uint32 value) {
  set_has_attac_line();
  attac_line_ = value;
}

// optional uint32 attac_score = 4;
inline bool msg_update_slot_master_show_info::has_attac_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_update_slot_master_show_info::set_has_attac_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_update_slot_master_show_info::clear_has_attac_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_update_slot_master_show_info::clear_attac_score() {
  attac_score_ = 0u;
  clear_has_attac_score();
}
inline ::google::protobuf::uint32 msg_update_slot_master_show_info::attac_score() const {
  return attac_score_;
}
inline void msg_update_slot_master_show_info::set_attac_score(::google::protobuf::uint32 value) {
  set_has_attac_score();
  attac_score_ = value;
}

// optional uint32 lost_count = 5;
inline bool msg_update_slot_master_show_info::has_lost_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_update_slot_master_show_info::set_has_lost_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_update_slot_master_show_info::clear_has_lost_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_update_slot_master_show_info::clear_lost_count() {
  lost_count_ = 0u;
  clear_has_lost_count();
}
inline ::google::protobuf::uint32 msg_update_slot_master_show_info::lost_count() const {
  return lost_count_;
}
inline void msg_update_slot_master_show_info::set_lost_count(::google::protobuf::uint32 value) {
  set_has_lost_count();
  lost_count_ = value;
}

// optional uint32 win_count = 6;
inline bool msg_update_slot_master_show_info::has_win_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_update_slot_master_show_info::set_has_win_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_update_slot_master_show_info::clear_has_win_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_update_slot_master_show_info::clear_win_count() {
  win_count_ = 0u;
  clear_has_win_count();
}
inline ::google::protobuf::uint32 msg_update_slot_master_show_info::win_count() const {
  return win_count_;
}
inline void msg_update_slot_master_show_info::set_win_count(::google::protobuf::uint32 value) {
  set_has_win_count();
  win_count_ = value;
}

// optional int64 cur_score = 7;
inline bool msg_update_slot_master_show_info::has_cur_score() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_update_slot_master_show_info::set_has_cur_score() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_update_slot_master_show_info::clear_has_cur_score() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_update_slot_master_show_info::clear_cur_score() {
  cur_score_ = GOOGLE_LONGLONG(0);
  clear_has_cur_score();
}
inline ::google::protobuf::int64 msg_update_slot_master_show_info::cur_score() const {
  return cur_score_;
}
inline void msg_update_slot_master_show_info::set_cur_score(::google::protobuf::int64 value) {
  set_has_cur_score();
  cur_score_ = value;
}

// optional uint32 ismaster = 8;
inline bool msg_update_slot_master_show_info::has_ismaster() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void msg_update_slot_master_show_info::set_has_ismaster() {
  _has_bits_[0] |= 0x00000080u;
}
inline void msg_update_slot_master_show_info::clear_has_ismaster() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void msg_update_slot_master_show_info::clear_ismaster() {
  ismaster_ = 0u;
  clear_has_ismaster();
}
inline ::google::protobuf::uint32 msg_update_slot_master_show_info::ismaster() const {
  return ismaster_;
}
inline void msg_update_slot_master_show_info::set_ismaster(::google::protobuf::uint32 value) {
  set_has_ismaster();
  ismaster_ = value;
}

// -------------------------------------------------------------------

// msg_update_slot_master_show_info_rep

// optional uint32 type = 1;
inline bool msg_update_slot_master_show_info_rep::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_update_slot_master_show_info_rep::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_update_slot_master_show_info_rep::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_update_slot_master_show_info_rep::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 msg_update_slot_master_show_info_rep::type() const {
  return type_;
}
inline void msg_update_slot_master_show_info_rep::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// repeated .net.msg_update_slot_master_show_info info = 2;
inline int msg_update_slot_master_show_info_rep::info_size() const {
  return info_.size();
}
inline void msg_update_slot_master_show_info_rep::clear_info() {
  info_.Clear();
}
inline const ::net::msg_update_slot_master_show_info& msg_update_slot_master_show_info_rep::info(int index) const {
  return info_.Get(index);
}
inline ::net::msg_update_slot_master_show_info* msg_update_slot_master_show_info_rep::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::net::msg_update_slot_master_show_info* msg_update_slot_master_show_info_rep::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::net::msg_update_slot_master_show_info >&
msg_update_slot_master_show_info_rep::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::net::msg_update_slot_master_show_info >*
msg_update_slot_master_show_info_rep::mutable_info() {
  return &info_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace net

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_slot_5flogic_5fmsg_2eproto__INCLUDED
