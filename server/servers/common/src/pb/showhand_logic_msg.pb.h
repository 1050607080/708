// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: showhand_logic_msg.proto

#ifndef PROTOBUF_showhand_5flogic_5fmsg_2eproto__INCLUDED
#define PROTOBUF_showhand_5flogic_5fmsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "base_msg_struct.pb.h"
#include "error_code.pb.h"
// @@protoc_insertion_point(includes)

namespace net {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_showhand_5flogic_5fmsg_2eproto();
void protobuf_AssignDesc_showhand_5flogic_5fmsg_2eproto();
void protobuf_ShutdownFile_showhand_5flogic_5fmsg_2eproto();

class msg_showhand_game_info_rep;
class msg_showhand_start_rep;
class msg_showhand_giveup_req;
class msg_showhand_giveup_rep;
class msg_showhand_addscore_req;
class msg_showhand_addscore_rep;
class msg_showhand_sendcard_rep;
class msg_showhand_game_over_rep;

// ===================================================================

class msg_showhand_game_info_rep : public ::google::protobuf::Message {
 public:
  msg_showhand_game_info_rep();
  virtual ~msg_showhand_game_info_rep();

  msg_showhand_game_info_rep(const msg_showhand_game_info_rep& from);

  inline msg_showhand_game_info_rep& operator=(const msg_showhand_game_info_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_showhand_game_info_rep& default_instance();

  void Swap(msg_showhand_game_info_rep* other);

  // implements Message ----------------------------------------------

  msg_showhand_game_info_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_showhand_game_info_rep& from);
  void MergeFrom(const msg_showhand_game_info_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 cell_score = 1;
  inline bool has_cell_score() const;
  inline void clear_cell_score();
  static const int kCellScoreFieldNumber = 1;
  inline ::google::protobuf::int64 cell_score() const;
  inline void set_cell_score(::google::protobuf::int64 value);

  // optional int64 draw_max_score = 2;
  inline bool has_draw_max_score() const;
  inline void clear_draw_max_score();
  static const int kDrawMaxScoreFieldNumber = 2;
  inline ::google::protobuf::int64 draw_max_score() const;
  inline void set_draw_max_score(::google::protobuf::int64 value);

  // optional int64 turn_max_score = 3;
  inline bool has_turn_max_score() const;
  inline void clear_turn_max_score();
  static const int kTurnMaxScoreFieldNumber = 3;
  inline ::google::protobuf::int64 turn_max_score() const;
  inline void set_turn_max_score(::google::protobuf::int64 value);

  // optional int64 turn_less_score = 4;
  inline bool has_turn_less_score() const;
  inline void clear_turn_less_score();
  static const int kTurnLessScoreFieldNumber = 4;
  inline ::google::protobuf::int64 turn_less_score() const;
  inline void set_turn_less_score(::google::protobuf::int64 value);

  // repeated int64 user_score = 5;
  inline int user_score_size() const;
  inline void clear_user_score();
  static const int kUserScoreFieldNumber = 5;
  inline ::google::protobuf::int64 user_score(int index) const;
  inline void set_user_score(int index, ::google::protobuf::int64 value);
  inline void add_user_score(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      user_score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_user_score();

  // repeated int64 table_score = 6;
  inline int table_score_size() const;
  inline void clear_table_score();
  static const int kTableScoreFieldNumber = 6;
  inline ::google::protobuf::int64 table_score(int index) const;
  inline void set_table_score(int index, ::google::protobuf::int64 value);
  inline void add_table_score(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      table_score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_table_score();

  // optional uint32 show_hand = 7;
  inline bool has_show_hand() const;
  inline void clear_show_hand();
  static const int kShowHandFieldNumber = 7;
  inline ::google::protobuf::uint32 show_hand() const;
  inline void set_show_hand(::google::protobuf::uint32 value);

  // optional uint32 cur_user = 8;
  inline bool has_cur_user() const;
  inline void clear_cur_user();
  static const int kCurUserFieldNumber = 8;
  inline ::google::protobuf::uint32 cur_user() const;
  inline void set_cur_user(::google::protobuf::uint32 value);

  // repeated uint32 play_status = 9;
  inline int play_status_size() const;
  inline void clear_play_status();
  static const int kPlayStatusFieldNumber = 9;
  inline ::google::protobuf::uint32 play_status(int index) const;
  inline void set_play_status(int index, ::google::protobuf::uint32 value);
  inline void add_play_status(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      play_status() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_play_status();

  // repeated .net.msg_cards hand_card_data = 10;
  inline int hand_card_data_size() const;
  inline void clear_hand_card_data();
  static const int kHandCardDataFieldNumber = 10;
  inline const ::net::msg_cards& hand_card_data(int index) const;
  inline ::net::msg_cards* mutable_hand_card_data(int index);
  inline ::net::msg_cards* add_hand_card_data();
  inline const ::google::protobuf::RepeatedPtrField< ::net::msg_cards >&
      hand_card_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::net::msg_cards >*
      mutable_hand_card_data();

  // optional uint32 wait_time = 11;
  inline bool has_wait_time() const;
  inline void clear_wait_time();
  static const int kWaitTimeFieldNumber = 11;
  inline ::google::protobuf::uint32 wait_time() const;
  inline void set_wait_time(::google::protobuf::uint32 value);

  // repeated int64 history_score = 12;
  inline int history_score_size() const;
  inline void clear_history_score();
  static const int kHistoryScoreFieldNumber = 12;
  inline ::google::protobuf::int64 history_score(int index) const;
  inline void set_history_score(int index, ::google::protobuf::int64 value);
  inline void add_history_score(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      history_score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_history_score();

  // @@protoc_insertion_point(class_scope:net.msg_showhand_game_info_rep)
 private:
  inline void set_has_cell_score();
  inline void clear_has_cell_score();
  inline void set_has_draw_max_score();
  inline void clear_has_draw_max_score();
  inline void set_has_turn_max_score();
  inline void clear_has_turn_max_score();
  inline void set_has_turn_less_score();
  inline void clear_has_turn_less_score();
  inline void set_has_show_hand();
  inline void clear_has_show_hand();
  inline void set_has_cur_user();
  inline void clear_has_cur_user();
  inline void set_has_wait_time();
  inline void clear_has_wait_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 cell_score_;
  ::google::protobuf::int64 draw_max_score_;
  ::google::protobuf::int64 turn_max_score_;
  ::google::protobuf::int64 turn_less_score_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > user_score_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > table_score_;
  ::google::protobuf::uint32 show_hand_;
  ::google::protobuf::uint32 cur_user_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > play_status_;
  ::google::protobuf::RepeatedPtrField< ::net::msg_cards > hand_card_data_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > history_score_;
  ::google::protobuf::uint32 wait_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_showhand_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_showhand_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_showhand_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_showhand_game_info_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_showhand_start_rep : public ::google::protobuf::Message {
 public:
  msg_showhand_start_rep();
  virtual ~msg_showhand_start_rep();

  msg_showhand_start_rep(const msg_showhand_start_rep& from);

  inline msg_showhand_start_rep& operator=(const msg_showhand_start_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_showhand_start_rep& default_instance();

  void Swap(msg_showhand_start_rep* other);

  // implements Message ----------------------------------------------

  msg_showhand_start_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_showhand_start_rep& from);
  void MergeFrom(const msg_showhand_start_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 cell_score = 1;
  inline bool has_cell_score() const;
  inline void clear_cell_score();
  static const int kCellScoreFieldNumber = 1;
  inline ::google::protobuf::int64 cell_score() const;
  inline void set_cell_score(::google::protobuf::int64 value);

  // optional int64 draw_max_score = 2;
  inline bool has_draw_max_score() const;
  inline void clear_draw_max_score();
  static const int kDrawMaxScoreFieldNumber = 2;
  inline ::google::protobuf::int64 draw_max_score() const;
  inline void set_draw_max_score(::google::protobuf::int64 value);

  // optional int64 turn_max_score = 3;
  inline bool has_turn_max_score() const;
  inline void clear_turn_max_score();
  static const int kTurnMaxScoreFieldNumber = 3;
  inline ::google::protobuf::int64 turn_max_score() const;
  inline void set_turn_max_score(::google::protobuf::int64 value);

  // optional int64 turn_less_score = 4;
  inline bool has_turn_less_score() const;
  inline void clear_turn_less_score();
  static const int kTurnLessScoreFieldNumber = 4;
  inline ::google::protobuf::int64 turn_less_score() const;
  inline void set_turn_less_score(::google::protobuf::int64 value);

  // optional uint32 cur_user = 5;
  inline bool has_cur_user() const;
  inline void clear_cur_user();
  static const int kCurUserFieldNumber = 5;
  inline ::google::protobuf::uint32 cur_user() const;
  inline void set_cur_user(::google::protobuf::uint32 value);

  // repeated .net.msg_cards table_card_data = 6;
  inline int table_card_data_size() const;
  inline void clear_table_card_data();
  static const int kTableCardDataFieldNumber = 6;
  inline const ::net::msg_cards& table_card_data(int index) const;
  inline ::net::msg_cards* mutable_table_card_data(int index);
  inline ::net::msg_cards* add_table_card_data();
  inline const ::google::protobuf::RepeatedPtrField< ::net::msg_cards >&
      table_card_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::net::msg_cards >*
      mutable_table_card_data();

  // repeated int64 history_score = 7;
  inline int history_score_size() const;
  inline void clear_history_score();
  static const int kHistoryScoreFieldNumber = 7;
  inline ::google::protobuf::int64 history_score(int index) const;
  inline void set_history_score(int index, ::google::protobuf::int64 value);
  inline void add_history_score(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      history_score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_history_score();

  // @@protoc_insertion_point(class_scope:net.msg_showhand_start_rep)
 private:
  inline void set_has_cell_score();
  inline void clear_has_cell_score();
  inline void set_has_draw_max_score();
  inline void clear_has_draw_max_score();
  inline void set_has_turn_max_score();
  inline void clear_has_turn_max_score();
  inline void set_has_turn_less_score();
  inline void clear_has_turn_less_score();
  inline void set_has_cur_user();
  inline void clear_has_cur_user();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 cell_score_;
  ::google::protobuf::int64 draw_max_score_;
  ::google::protobuf::int64 turn_max_score_;
  ::google::protobuf::int64 turn_less_score_;
  ::google::protobuf::RepeatedPtrField< ::net::msg_cards > table_card_data_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > history_score_;
  ::google::protobuf::uint32 cur_user_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_showhand_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_showhand_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_showhand_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_showhand_start_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_showhand_giveup_req : public ::google::protobuf::Message {
 public:
  msg_showhand_giveup_req();
  virtual ~msg_showhand_giveup_req();

  msg_showhand_giveup_req(const msg_showhand_giveup_req& from);

  inline msg_showhand_giveup_req& operator=(const msg_showhand_giveup_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_showhand_giveup_req& default_instance();

  void Swap(msg_showhand_giveup_req* other);

  // implements Message ----------------------------------------------

  msg_showhand_giveup_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_showhand_giveup_req& from);
  void MergeFrom(const msg_showhand_giveup_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 give_up = 1;
  inline bool has_give_up() const;
  inline void clear_give_up();
  static const int kGiveUpFieldNumber = 1;
  inline ::google::protobuf::uint32 give_up() const;
  inline void set_give_up(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_showhand_giveup_req)
 private:
  inline void set_has_give_up();
  inline void clear_has_give_up();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 give_up_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_showhand_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_showhand_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_showhand_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_showhand_giveup_req* default_instance_;
};
// -------------------------------------------------------------------

class msg_showhand_giveup_rep : public ::google::protobuf::Message {
 public:
  msg_showhand_giveup_rep();
  virtual ~msg_showhand_giveup_rep();

  msg_showhand_giveup_rep(const msg_showhand_giveup_rep& from);

  inline msg_showhand_giveup_rep& operator=(const msg_showhand_giveup_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_showhand_giveup_rep& default_instance();

  void Swap(msg_showhand_giveup_rep* other);

  // implements Message ----------------------------------------------

  msg_showhand_giveup_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_showhand_giveup_rep& from);
  void MergeFrom(const msg_showhand_giveup_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 giveup_user = 1;
  inline bool has_giveup_user() const;
  inline void clear_giveup_user();
  static const int kGiveupUserFieldNumber = 1;
  inline ::google::protobuf::uint32 giveup_user() const;
  inline void set_giveup_user(::google::protobuf::uint32 value);

  // optional uint32 cur_user = 2;
  inline bool has_cur_user() const;
  inline void clear_cur_user();
  static const int kCurUserFieldNumber = 2;
  inline ::google::protobuf::uint32 cur_user() const;
  inline void set_cur_user(::google::protobuf::uint32 value);

  // optional int64 draw_max_score = 3;
  inline bool has_draw_max_score() const;
  inline void clear_draw_max_score();
  static const int kDrawMaxScoreFieldNumber = 3;
  inline ::google::protobuf::int64 draw_max_score() const;
  inline void set_draw_max_score(::google::protobuf::int64 value);

  // optional int64 turn_max_score = 4;
  inline bool has_turn_max_score() const;
  inline void clear_turn_max_score();
  static const int kTurnMaxScoreFieldNumber = 4;
  inline ::google::protobuf::int64 turn_max_score() const;
  inline void set_turn_max_score(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:net.msg_showhand_giveup_rep)
 private:
  inline void set_has_giveup_user();
  inline void clear_has_giveup_user();
  inline void set_has_cur_user();
  inline void clear_has_cur_user();
  inline void set_has_draw_max_score();
  inline void clear_has_draw_max_score();
  inline void set_has_turn_max_score();
  inline void clear_has_turn_max_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 giveup_user_;
  ::google::protobuf::uint32 cur_user_;
  ::google::protobuf::int64 draw_max_score_;
  ::google::protobuf::int64 turn_max_score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_showhand_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_showhand_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_showhand_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_showhand_giveup_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_showhand_addscore_req : public ::google::protobuf::Message {
 public:
  msg_showhand_addscore_req();
  virtual ~msg_showhand_addscore_req();

  msg_showhand_addscore_req(const msg_showhand_addscore_req& from);

  inline msg_showhand_addscore_req& operator=(const msg_showhand_addscore_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_showhand_addscore_req& default_instance();

  void Swap(msg_showhand_addscore_req* other);

  // implements Message ----------------------------------------------

  msg_showhand_addscore_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_showhand_addscore_req& from);
  void MergeFrom(const msg_showhand_addscore_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 score = 1;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 1;
  inline ::google::protobuf::int64 score() const;
  inline void set_score(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:net.msg_showhand_addscore_req)
 private:
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_showhand_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_showhand_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_showhand_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_showhand_addscore_req* default_instance_;
};
// -------------------------------------------------------------------

class msg_showhand_addscore_rep : public ::google::protobuf::Message {
 public:
  msg_showhand_addscore_rep();
  virtual ~msg_showhand_addscore_rep();

  msg_showhand_addscore_rep(const msg_showhand_addscore_rep& from);

  inline msg_showhand_addscore_rep& operator=(const msg_showhand_addscore_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_showhand_addscore_rep& default_instance();

  void Swap(msg_showhand_addscore_rep* other);

  // implements Message ----------------------------------------------

  msg_showhand_addscore_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_showhand_addscore_rep& from);
  void MergeFrom(const msg_showhand_addscore_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cur_user = 1;
  inline bool has_cur_user() const;
  inline void clear_cur_user();
  static const int kCurUserFieldNumber = 1;
  inline ::google::protobuf::uint32 cur_user() const;
  inline void set_cur_user(::google::protobuf::uint32 value);

  // optional uint32 add_score_user = 2;
  inline bool has_add_score_user() const;
  inline void clear_add_score_user();
  static const int kAddScoreUserFieldNumber = 2;
  inline ::google::protobuf::uint32 add_score_user() const;
  inline void set_add_score_user(::google::protobuf::uint32 value);

  // optional int64 turn_less_score = 3;
  inline bool has_turn_less_score() const;
  inline void clear_turn_less_score();
  static const int kTurnLessScoreFieldNumber = 3;
  inline ::google::protobuf::int64 turn_less_score() const;
  inline void set_turn_less_score(::google::protobuf::int64 value);

  // optional int64 user_score_count = 4;
  inline bool has_user_score_count() const;
  inline void clear_user_score_count();
  static const int kUserScoreCountFieldNumber = 4;
  inline ::google::protobuf::int64 user_score_count() const;
  inline void set_user_score_count(::google::protobuf::int64 value);

  // optional uint32 show_hand = 5;
  inline bool has_show_hand() const;
  inline void clear_show_hand();
  static const int kShowHandFieldNumber = 5;
  inline ::google::protobuf::uint32 show_hand() const;
  inline void set_show_hand(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_showhand_addscore_rep)
 private:
  inline void set_has_cur_user();
  inline void clear_has_cur_user();
  inline void set_has_add_score_user();
  inline void clear_has_add_score_user();
  inline void set_has_turn_less_score();
  inline void clear_has_turn_less_score();
  inline void set_has_user_score_count();
  inline void clear_has_user_score_count();
  inline void set_has_show_hand();
  inline void clear_has_show_hand();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 cur_user_;
  ::google::protobuf::uint32 add_score_user_;
  ::google::protobuf::int64 turn_less_score_;
  ::google::protobuf::int64 user_score_count_;
  ::google::protobuf::uint32 show_hand_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_showhand_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_showhand_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_showhand_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_showhand_addscore_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_showhand_sendcard_rep : public ::google::protobuf::Message {
 public:
  msg_showhand_sendcard_rep();
  virtual ~msg_showhand_sendcard_rep();

  msg_showhand_sendcard_rep(const msg_showhand_sendcard_rep& from);

  inline msg_showhand_sendcard_rep& operator=(const msg_showhand_sendcard_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_showhand_sendcard_rep& default_instance();

  void Swap(msg_showhand_sendcard_rep* other);

  // implements Message ----------------------------------------------

  msg_showhand_sendcard_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_showhand_sendcard_rep& from);
  void MergeFrom(const msg_showhand_sendcard_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cur_user = 1;
  inline bool has_cur_user() const;
  inline void clear_cur_user();
  static const int kCurUserFieldNumber = 1;
  inline ::google::protobuf::uint32 cur_user() const;
  inline void set_cur_user(::google::protobuf::uint32 value);

  // optional uint32 start_chairid = 2;
  inline bool has_start_chairid() const;
  inline void clear_start_chairid();
  static const int kStartChairidFieldNumber = 2;
  inline ::google::protobuf::uint32 start_chairid() const;
  inline void set_start_chairid(::google::protobuf::uint32 value);

  // optional int64 turn_max_score = 3;
  inline bool has_turn_max_score() const;
  inline void clear_turn_max_score();
  static const int kTurnMaxScoreFieldNumber = 3;
  inline ::google::protobuf::int64 turn_max_score() const;
  inline void set_turn_max_score(::google::protobuf::int64 value);

  // repeated .net.msg_cards card_data = 4;
  inline int card_data_size() const;
  inline void clear_card_data();
  static const int kCardDataFieldNumber = 4;
  inline const ::net::msg_cards& card_data(int index) const;
  inline ::net::msg_cards* mutable_card_data(int index);
  inline ::net::msg_cards* add_card_data();
  inline const ::google::protobuf::RepeatedPtrField< ::net::msg_cards >&
      card_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::net::msg_cards >*
      mutable_card_data();

  // @@protoc_insertion_point(class_scope:net.msg_showhand_sendcard_rep)
 private:
  inline void set_has_cur_user();
  inline void clear_has_cur_user();
  inline void set_has_start_chairid();
  inline void clear_has_start_chairid();
  inline void set_has_turn_max_score();
  inline void clear_has_turn_max_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 cur_user_;
  ::google::protobuf::uint32 start_chairid_;
  ::google::protobuf::int64 turn_max_score_;
  ::google::protobuf::RepeatedPtrField< ::net::msg_cards > card_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_showhand_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_showhand_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_showhand_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_showhand_sendcard_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_showhand_game_over_rep : public ::google::protobuf::Message {
 public:
  msg_showhand_game_over_rep();
  virtual ~msg_showhand_game_over_rep();

  msg_showhand_game_over_rep(const msg_showhand_game_over_rep& from);

  inline msg_showhand_game_over_rep& operator=(const msg_showhand_game_over_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_showhand_game_over_rep& default_instance();

  void Swap(msg_showhand_game_over_rep* other);

  // implements Message ----------------------------------------------

  msg_showhand_game_over_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_showhand_game_over_rep& from);
  void MergeFrom(const msg_showhand_game_over_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .net.msg_cards card_data = 1;
  inline int card_data_size() const;
  inline void clear_card_data();
  static const int kCardDataFieldNumber = 1;
  inline const ::net::msg_cards& card_data(int index) const;
  inline ::net::msg_cards* mutable_card_data(int index);
  inline ::net::msg_cards* add_card_data();
  inline const ::google::protobuf::RepeatedPtrField< ::net::msg_cards >&
      card_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::net::msg_cards >*
      mutable_card_data();

  // repeated int64 game_score = 2;
  inline int game_score_size() const;
  inline void clear_game_score();
  static const int kGameScoreFieldNumber = 2;
  inline ::google::protobuf::int64 game_score(int index) const;
  inline void set_game_score(int index, ::google::protobuf::int64 value);
  inline void add_game_score(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      game_score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_game_score();

  // repeated int64 history_score = 3;
  inline int history_score_size() const;
  inline void clear_history_score();
  static const int kHistoryScoreFieldNumber = 3;
  inline ::google::protobuf::int64 history_score(int index) const;
  inline void set_history_score(int index, ::google::protobuf::int64 value);
  inline void add_history_score(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      history_score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_history_score();

  // repeated .net.msg_cards hand_card_data = 4;
  inline int hand_card_data_size() const;
  inline void clear_hand_card_data();
  static const int kHandCardDataFieldNumber = 4;
  inline const ::net::msg_cards& hand_card_data(int index) const;
  inline ::net::msg_cards* mutable_hand_card_data(int index);
  inline ::net::msg_cards* add_hand_card_data();
  inline const ::google::protobuf::RepeatedPtrField< ::net::msg_cards >&
      hand_card_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::net::msg_cards >*
      mutable_hand_card_data();

  // @@protoc_insertion_point(class_scope:net.msg_showhand_game_over_rep)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::net::msg_cards > card_data_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > game_score_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > history_score_;
  ::google::protobuf::RepeatedPtrField< ::net::msg_cards > hand_card_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_showhand_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_showhand_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_showhand_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_showhand_game_over_rep* default_instance_;
};
// ===================================================================


// ===================================================================

// msg_showhand_game_info_rep

// optional int64 cell_score = 1;
inline bool msg_showhand_game_info_rep::has_cell_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_showhand_game_info_rep::set_has_cell_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_showhand_game_info_rep::clear_has_cell_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_showhand_game_info_rep::clear_cell_score() {
  cell_score_ = GOOGLE_LONGLONG(0);
  clear_has_cell_score();
}
inline ::google::protobuf::int64 msg_showhand_game_info_rep::cell_score() const {
  return cell_score_;
}
inline void msg_showhand_game_info_rep::set_cell_score(::google::protobuf::int64 value) {
  set_has_cell_score();
  cell_score_ = value;
}

// optional int64 draw_max_score = 2;
inline bool msg_showhand_game_info_rep::has_draw_max_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_showhand_game_info_rep::set_has_draw_max_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_showhand_game_info_rep::clear_has_draw_max_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_showhand_game_info_rep::clear_draw_max_score() {
  draw_max_score_ = GOOGLE_LONGLONG(0);
  clear_has_draw_max_score();
}
inline ::google::protobuf::int64 msg_showhand_game_info_rep::draw_max_score() const {
  return draw_max_score_;
}
inline void msg_showhand_game_info_rep::set_draw_max_score(::google::protobuf::int64 value) {
  set_has_draw_max_score();
  draw_max_score_ = value;
}

// optional int64 turn_max_score = 3;
inline bool msg_showhand_game_info_rep::has_turn_max_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_showhand_game_info_rep::set_has_turn_max_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_showhand_game_info_rep::clear_has_turn_max_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_showhand_game_info_rep::clear_turn_max_score() {
  turn_max_score_ = GOOGLE_LONGLONG(0);
  clear_has_turn_max_score();
}
inline ::google::protobuf::int64 msg_showhand_game_info_rep::turn_max_score() const {
  return turn_max_score_;
}
inline void msg_showhand_game_info_rep::set_turn_max_score(::google::protobuf::int64 value) {
  set_has_turn_max_score();
  turn_max_score_ = value;
}

// optional int64 turn_less_score = 4;
inline bool msg_showhand_game_info_rep::has_turn_less_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_showhand_game_info_rep::set_has_turn_less_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_showhand_game_info_rep::clear_has_turn_less_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_showhand_game_info_rep::clear_turn_less_score() {
  turn_less_score_ = GOOGLE_LONGLONG(0);
  clear_has_turn_less_score();
}
inline ::google::protobuf::int64 msg_showhand_game_info_rep::turn_less_score() const {
  return turn_less_score_;
}
inline void msg_showhand_game_info_rep::set_turn_less_score(::google::protobuf::int64 value) {
  set_has_turn_less_score();
  turn_less_score_ = value;
}

// repeated int64 user_score = 5;
inline int msg_showhand_game_info_rep::user_score_size() const {
  return user_score_.size();
}
inline void msg_showhand_game_info_rep::clear_user_score() {
  user_score_.Clear();
}
inline ::google::protobuf::int64 msg_showhand_game_info_rep::user_score(int index) const {
  return user_score_.Get(index);
}
inline void msg_showhand_game_info_rep::set_user_score(int index, ::google::protobuf::int64 value) {
  user_score_.Set(index, value);
}
inline void msg_showhand_game_info_rep::add_user_score(::google::protobuf::int64 value) {
  user_score_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
msg_showhand_game_info_rep::user_score() const {
  return user_score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
msg_showhand_game_info_rep::mutable_user_score() {
  return &user_score_;
}

// repeated int64 table_score = 6;
inline int msg_showhand_game_info_rep::table_score_size() const {
  return table_score_.size();
}
inline void msg_showhand_game_info_rep::clear_table_score() {
  table_score_.Clear();
}
inline ::google::protobuf::int64 msg_showhand_game_info_rep::table_score(int index) const {
  return table_score_.Get(index);
}
inline void msg_showhand_game_info_rep::set_table_score(int index, ::google::protobuf::int64 value) {
  table_score_.Set(index, value);
}
inline void msg_showhand_game_info_rep::add_table_score(::google::protobuf::int64 value) {
  table_score_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
msg_showhand_game_info_rep::table_score() const {
  return table_score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
msg_showhand_game_info_rep::mutable_table_score() {
  return &table_score_;
}

// optional uint32 show_hand = 7;
inline bool msg_showhand_game_info_rep::has_show_hand() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_showhand_game_info_rep::set_has_show_hand() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_showhand_game_info_rep::clear_has_show_hand() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_showhand_game_info_rep::clear_show_hand() {
  show_hand_ = 0u;
  clear_has_show_hand();
}
inline ::google::protobuf::uint32 msg_showhand_game_info_rep::show_hand() const {
  return show_hand_;
}
inline void msg_showhand_game_info_rep::set_show_hand(::google::protobuf::uint32 value) {
  set_has_show_hand();
  show_hand_ = value;
}

// optional uint32 cur_user = 8;
inline bool msg_showhand_game_info_rep::has_cur_user() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void msg_showhand_game_info_rep::set_has_cur_user() {
  _has_bits_[0] |= 0x00000080u;
}
inline void msg_showhand_game_info_rep::clear_has_cur_user() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void msg_showhand_game_info_rep::clear_cur_user() {
  cur_user_ = 0u;
  clear_has_cur_user();
}
inline ::google::protobuf::uint32 msg_showhand_game_info_rep::cur_user() const {
  return cur_user_;
}
inline void msg_showhand_game_info_rep::set_cur_user(::google::protobuf::uint32 value) {
  set_has_cur_user();
  cur_user_ = value;
}

// repeated uint32 play_status = 9;
inline int msg_showhand_game_info_rep::play_status_size() const {
  return play_status_.size();
}
inline void msg_showhand_game_info_rep::clear_play_status() {
  play_status_.Clear();
}
inline ::google::protobuf::uint32 msg_showhand_game_info_rep::play_status(int index) const {
  return play_status_.Get(index);
}
inline void msg_showhand_game_info_rep::set_play_status(int index, ::google::protobuf::uint32 value) {
  play_status_.Set(index, value);
}
inline void msg_showhand_game_info_rep::add_play_status(::google::protobuf::uint32 value) {
  play_status_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
msg_showhand_game_info_rep::play_status() const {
  return play_status_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
msg_showhand_game_info_rep::mutable_play_status() {
  return &play_status_;
}

// repeated .net.msg_cards hand_card_data = 10;
inline int msg_showhand_game_info_rep::hand_card_data_size() const {
  return hand_card_data_.size();
}
inline void msg_showhand_game_info_rep::clear_hand_card_data() {
  hand_card_data_.Clear();
}
inline const ::net::msg_cards& msg_showhand_game_info_rep::hand_card_data(int index) const {
  return hand_card_data_.Get(index);
}
inline ::net::msg_cards* msg_showhand_game_info_rep::mutable_hand_card_data(int index) {
  return hand_card_data_.Mutable(index);
}
inline ::net::msg_cards* msg_showhand_game_info_rep::add_hand_card_data() {
  return hand_card_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::net::msg_cards >&
msg_showhand_game_info_rep::hand_card_data() const {
  return hand_card_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::net::msg_cards >*
msg_showhand_game_info_rep::mutable_hand_card_data() {
  return &hand_card_data_;
}

// optional uint32 wait_time = 11;
inline bool msg_showhand_game_info_rep::has_wait_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void msg_showhand_game_info_rep::set_has_wait_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void msg_showhand_game_info_rep::clear_has_wait_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void msg_showhand_game_info_rep::clear_wait_time() {
  wait_time_ = 0u;
  clear_has_wait_time();
}
inline ::google::protobuf::uint32 msg_showhand_game_info_rep::wait_time() const {
  return wait_time_;
}
inline void msg_showhand_game_info_rep::set_wait_time(::google::protobuf::uint32 value) {
  set_has_wait_time();
  wait_time_ = value;
}

// repeated int64 history_score = 12;
inline int msg_showhand_game_info_rep::history_score_size() const {
  return history_score_.size();
}
inline void msg_showhand_game_info_rep::clear_history_score() {
  history_score_.Clear();
}
inline ::google::protobuf::int64 msg_showhand_game_info_rep::history_score(int index) const {
  return history_score_.Get(index);
}
inline void msg_showhand_game_info_rep::set_history_score(int index, ::google::protobuf::int64 value) {
  history_score_.Set(index, value);
}
inline void msg_showhand_game_info_rep::add_history_score(::google::protobuf::int64 value) {
  history_score_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
msg_showhand_game_info_rep::history_score() const {
  return history_score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
msg_showhand_game_info_rep::mutable_history_score() {
  return &history_score_;
}

// -------------------------------------------------------------------

// msg_showhand_start_rep

// optional int64 cell_score = 1;
inline bool msg_showhand_start_rep::has_cell_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_showhand_start_rep::set_has_cell_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_showhand_start_rep::clear_has_cell_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_showhand_start_rep::clear_cell_score() {
  cell_score_ = GOOGLE_LONGLONG(0);
  clear_has_cell_score();
}
inline ::google::protobuf::int64 msg_showhand_start_rep::cell_score() const {
  return cell_score_;
}
inline void msg_showhand_start_rep::set_cell_score(::google::protobuf::int64 value) {
  set_has_cell_score();
  cell_score_ = value;
}

// optional int64 draw_max_score = 2;
inline bool msg_showhand_start_rep::has_draw_max_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_showhand_start_rep::set_has_draw_max_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_showhand_start_rep::clear_has_draw_max_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_showhand_start_rep::clear_draw_max_score() {
  draw_max_score_ = GOOGLE_LONGLONG(0);
  clear_has_draw_max_score();
}
inline ::google::protobuf::int64 msg_showhand_start_rep::draw_max_score() const {
  return draw_max_score_;
}
inline void msg_showhand_start_rep::set_draw_max_score(::google::protobuf::int64 value) {
  set_has_draw_max_score();
  draw_max_score_ = value;
}

// optional int64 turn_max_score = 3;
inline bool msg_showhand_start_rep::has_turn_max_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_showhand_start_rep::set_has_turn_max_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_showhand_start_rep::clear_has_turn_max_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_showhand_start_rep::clear_turn_max_score() {
  turn_max_score_ = GOOGLE_LONGLONG(0);
  clear_has_turn_max_score();
}
inline ::google::protobuf::int64 msg_showhand_start_rep::turn_max_score() const {
  return turn_max_score_;
}
inline void msg_showhand_start_rep::set_turn_max_score(::google::protobuf::int64 value) {
  set_has_turn_max_score();
  turn_max_score_ = value;
}

// optional int64 turn_less_score = 4;
inline bool msg_showhand_start_rep::has_turn_less_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_showhand_start_rep::set_has_turn_less_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_showhand_start_rep::clear_has_turn_less_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_showhand_start_rep::clear_turn_less_score() {
  turn_less_score_ = GOOGLE_LONGLONG(0);
  clear_has_turn_less_score();
}
inline ::google::protobuf::int64 msg_showhand_start_rep::turn_less_score() const {
  return turn_less_score_;
}
inline void msg_showhand_start_rep::set_turn_less_score(::google::protobuf::int64 value) {
  set_has_turn_less_score();
  turn_less_score_ = value;
}

// optional uint32 cur_user = 5;
inline bool msg_showhand_start_rep::has_cur_user() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_showhand_start_rep::set_has_cur_user() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_showhand_start_rep::clear_has_cur_user() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_showhand_start_rep::clear_cur_user() {
  cur_user_ = 0u;
  clear_has_cur_user();
}
inline ::google::protobuf::uint32 msg_showhand_start_rep::cur_user() const {
  return cur_user_;
}
inline void msg_showhand_start_rep::set_cur_user(::google::protobuf::uint32 value) {
  set_has_cur_user();
  cur_user_ = value;
}

// repeated .net.msg_cards table_card_data = 6;
inline int msg_showhand_start_rep::table_card_data_size() const {
  return table_card_data_.size();
}
inline void msg_showhand_start_rep::clear_table_card_data() {
  table_card_data_.Clear();
}
inline const ::net::msg_cards& msg_showhand_start_rep::table_card_data(int index) const {
  return table_card_data_.Get(index);
}
inline ::net::msg_cards* msg_showhand_start_rep::mutable_table_card_data(int index) {
  return table_card_data_.Mutable(index);
}
inline ::net::msg_cards* msg_showhand_start_rep::add_table_card_data() {
  return table_card_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::net::msg_cards >&
msg_showhand_start_rep::table_card_data() const {
  return table_card_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::net::msg_cards >*
msg_showhand_start_rep::mutable_table_card_data() {
  return &table_card_data_;
}

// repeated int64 history_score = 7;
inline int msg_showhand_start_rep::history_score_size() const {
  return history_score_.size();
}
inline void msg_showhand_start_rep::clear_history_score() {
  history_score_.Clear();
}
inline ::google::protobuf::int64 msg_showhand_start_rep::history_score(int index) const {
  return history_score_.Get(index);
}
inline void msg_showhand_start_rep::set_history_score(int index, ::google::protobuf::int64 value) {
  history_score_.Set(index, value);
}
inline void msg_showhand_start_rep::add_history_score(::google::protobuf::int64 value) {
  history_score_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
msg_showhand_start_rep::history_score() const {
  return history_score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
msg_showhand_start_rep::mutable_history_score() {
  return &history_score_;
}

// -------------------------------------------------------------------

// msg_showhand_giveup_req

// optional uint32 give_up = 1;
inline bool msg_showhand_giveup_req::has_give_up() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_showhand_giveup_req::set_has_give_up() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_showhand_giveup_req::clear_has_give_up() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_showhand_giveup_req::clear_give_up() {
  give_up_ = 0u;
  clear_has_give_up();
}
inline ::google::protobuf::uint32 msg_showhand_giveup_req::give_up() const {
  return give_up_;
}
inline void msg_showhand_giveup_req::set_give_up(::google::protobuf::uint32 value) {
  set_has_give_up();
  give_up_ = value;
}

// -------------------------------------------------------------------

// msg_showhand_giveup_rep

// optional uint32 giveup_user = 1;
inline bool msg_showhand_giveup_rep::has_giveup_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_showhand_giveup_rep::set_has_giveup_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_showhand_giveup_rep::clear_has_giveup_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_showhand_giveup_rep::clear_giveup_user() {
  giveup_user_ = 0u;
  clear_has_giveup_user();
}
inline ::google::protobuf::uint32 msg_showhand_giveup_rep::giveup_user() const {
  return giveup_user_;
}
inline void msg_showhand_giveup_rep::set_giveup_user(::google::protobuf::uint32 value) {
  set_has_giveup_user();
  giveup_user_ = value;
}

// optional uint32 cur_user = 2;
inline bool msg_showhand_giveup_rep::has_cur_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_showhand_giveup_rep::set_has_cur_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_showhand_giveup_rep::clear_has_cur_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_showhand_giveup_rep::clear_cur_user() {
  cur_user_ = 0u;
  clear_has_cur_user();
}
inline ::google::protobuf::uint32 msg_showhand_giveup_rep::cur_user() const {
  return cur_user_;
}
inline void msg_showhand_giveup_rep::set_cur_user(::google::protobuf::uint32 value) {
  set_has_cur_user();
  cur_user_ = value;
}

// optional int64 draw_max_score = 3;
inline bool msg_showhand_giveup_rep::has_draw_max_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_showhand_giveup_rep::set_has_draw_max_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_showhand_giveup_rep::clear_has_draw_max_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_showhand_giveup_rep::clear_draw_max_score() {
  draw_max_score_ = GOOGLE_LONGLONG(0);
  clear_has_draw_max_score();
}
inline ::google::protobuf::int64 msg_showhand_giveup_rep::draw_max_score() const {
  return draw_max_score_;
}
inline void msg_showhand_giveup_rep::set_draw_max_score(::google::protobuf::int64 value) {
  set_has_draw_max_score();
  draw_max_score_ = value;
}

// optional int64 turn_max_score = 4;
inline bool msg_showhand_giveup_rep::has_turn_max_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_showhand_giveup_rep::set_has_turn_max_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_showhand_giveup_rep::clear_has_turn_max_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_showhand_giveup_rep::clear_turn_max_score() {
  turn_max_score_ = GOOGLE_LONGLONG(0);
  clear_has_turn_max_score();
}
inline ::google::protobuf::int64 msg_showhand_giveup_rep::turn_max_score() const {
  return turn_max_score_;
}
inline void msg_showhand_giveup_rep::set_turn_max_score(::google::protobuf::int64 value) {
  set_has_turn_max_score();
  turn_max_score_ = value;
}

// -------------------------------------------------------------------

// msg_showhand_addscore_req

// optional int64 score = 1;
inline bool msg_showhand_addscore_req::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_showhand_addscore_req::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_showhand_addscore_req::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_showhand_addscore_req::clear_score() {
  score_ = GOOGLE_LONGLONG(0);
  clear_has_score();
}
inline ::google::protobuf::int64 msg_showhand_addscore_req::score() const {
  return score_;
}
inline void msg_showhand_addscore_req::set_score(::google::protobuf::int64 value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// msg_showhand_addscore_rep

// optional uint32 cur_user = 1;
inline bool msg_showhand_addscore_rep::has_cur_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_showhand_addscore_rep::set_has_cur_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_showhand_addscore_rep::clear_has_cur_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_showhand_addscore_rep::clear_cur_user() {
  cur_user_ = 0u;
  clear_has_cur_user();
}
inline ::google::protobuf::uint32 msg_showhand_addscore_rep::cur_user() const {
  return cur_user_;
}
inline void msg_showhand_addscore_rep::set_cur_user(::google::protobuf::uint32 value) {
  set_has_cur_user();
  cur_user_ = value;
}

// optional uint32 add_score_user = 2;
inline bool msg_showhand_addscore_rep::has_add_score_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_showhand_addscore_rep::set_has_add_score_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_showhand_addscore_rep::clear_has_add_score_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_showhand_addscore_rep::clear_add_score_user() {
  add_score_user_ = 0u;
  clear_has_add_score_user();
}
inline ::google::protobuf::uint32 msg_showhand_addscore_rep::add_score_user() const {
  return add_score_user_;
}
inline void msg_showhand_addscore_rep::set_add_score_user(::google::protobuf::uint32 value) {
  set_has_add_score_user();
  add_score_user_ = value;
}

// optional int64 turn_less_score = 3;
inline bool msg_showhand_addscore_rep::has_turn_less_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_showhand_addscore_rep::set_has_turn_less_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_showhand_addscore_rep::clear_has_turn_less_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_showhand_addscore_rep::clear_turn_less_score() {
  turn_less_score_ = GOOGLE_LONGLONG(0);
  clear_has_turn_less_score();
}
inline ::google::protobuf::int64 msg_showhand_addscore_rep::turn_less_score() const {
  return turn_less_score_;
}
inline void msg_showhand_addscore_rep::set_turn_less_score(::google::protobuf::int64 value) {
  set_has_turn_less_score();
  turn_less_score_ = value;
}

// optional int64 user_score_count = 4;
inline bool msg_showhand_addscore_rep::has_user_score_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_showhand_addscore_rep::set_has_user_score_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_showhand_addscore_rep::clear_has_user_score_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_showhand_addscore_rep::clear_user_score_count() {
  user_score_count_ = GOOGLE_LONGLONG(0);
  clear_has_user_score_count();
}
inline ::google::protobuf::int64 msg_showhand_addscore_rep::user_score_count() const {
  return user_score_count_;
}
inline void msg_showhand_addscore_rep::set_user_score_count(::google::protobuf::int64 value) {
  set_has_user_score_count();
  user_score_count_ = value;
}

// optional uint32 show_hand = 5;
inline bool msg_showhand_addscore_rep::has_show_hand() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_showhand_addscore_rep::set_has_show_hand() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_showhand_addscore_rep::clear_has_show_hand() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_showhand_addscore_rep::clear_show_hand() {
  show_hand_ = 0u;
  clear_has_show_hand();
}
inline ::google::protobuf::uint32 msg_showhand_addscore_rep::show_hand() const {
  return show_hand_;
}
inline void msg_showhand_addscore_rep::set_show_hand(::google::protobuf::uint32 value) {
  set_has_show_hand();
  show_hand_ = value;
}

// -------------------------------------------------------------------

// msg_showhand_sendcard_rep

// optional uint32 cur_user = 1;
inline bool msg_showhand_sendcard_rep::has_cur_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_showhand_sendcard_rep::set_has_cur_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_showhand_sendcard_rep::clear_has_cur_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_showhand_sendcard_rep::clear_cur_user() {
  cur_user_ = 0u;
  clear_has_cur_user();
}
inline ::google::protobuf::uint32 msg_showhand_sendcard_rep::cur_user() const {
  return cur_user_;
}
inline void msg_showhand_sendcard_rep::set_cur_user(::google::protobuf::uint32 value) {
  set_has_cur_user();
  cur_user_ = value;
}

// optional uint32 start_chairid = 2;
inline bool msg_showhand_sendcard_rep::has_start_chairid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_showhand_sendcard_rep::set_has_start_chairid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_showhand_sendcard_rep::clear_has_start_chairid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_showhand_sendcard_rep::clear_start_chairid() {
  start_chairid_ = 0u;
  clear_has_start_chairid();
}
inline ::google::protobuf::uint32 msg_showhand_sendcard_rep::start_chairid() const {
  return start_chairid_;
}
inline void msg_showhand_sendcard_rep::set_start_chairid(::google::protobuf::uint32 value) {
  set_has_start_chairid();
  start_chairid_ = value;
}

// optional int64 turn_max_score = 3;
inline bool msg_showhand_sendcard_rep::has_turn_max_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_showhand_sendcard_rep::set_has_turn_max_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_showhand_sendcard_rep::clear_has_turn_max_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_showhand_sendcard_rep::clear_turn_max_score() {
  turn_max_score_ = GOOGLE_LONGLONG(0);
  clear_has_turn_max_score();
}
inline ::google::protobuf::int64 msg_showhand_sendcard_rep::turn_max_score() const {
  return turn_max_score_;
}
inline void msg_showhand_sendcard_rep::set_turn_max_score(::google::protobuf::int64 value) {
  set_has_turn_max_score();
  turn_max_score_ = value;
}

// repeated .net.msg_cards card_data = 4;
inline int msg_showhand_sendcard_rep::card_data_size() const {
  return card_data_.size();
}
inline void msg_showhand_sendcard_rep::clear_card_data() {
  card_data_.Clear();
}
inline const ::net::msg_cards& msg_showhand_sendcard_rep::card_data(int index) const {
  return card_data_.Get(index);
}
inline ::net::msg_cards* msg_showhand_sendcard_rep::mutable_card_data(int index) {
  return card_data_.Mutable(index);
}
inline ::net::msg_cards* msg_showhand_sendcard_rep::add_card_data() {
  return card_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::net::msg_cards >&
msg_showhand_sendcard_rep::card_data() const {
  return card_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::net::msg_cards >*
msg_showhand_sendcard_rep::mutable_card_data() {
  return &card_data_;
}

// -------------------------------------------------------------------

// msg_showhand_game_over_rep

// repeated .net.msg_cards card_data = 1;
inline int msg_showhand_game_over_rep::card_data_size() const {
  return card_data_.size();
}
inline void msg_showhand_game_over_rep::clear_card_data() {
  card_data_.Clear();
}
inline const ::net::msg_cards& msg_showhand_game_over_rep::card_data(int index) const {
  return card_data_.Get(index);
}
inline ::net::msg_cards* msg_showhand_game_over_rep::mutable_card_data(int index) {
  return card_data_.Mutable(index);
}
inline ::net::msg_cards* msg_showhand_game_over_rep::add_card_data() {
  return card_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::net::msg_cards >&
msg_showhand_game_over_rep::card_data() const {
  return card_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::net::msg_cards >*
msg_showhand_game_over_rep::mutable_card_data() {
  return &card_data_;
}

// repeated int64 game_score = 2;
inline int msg_showhand_game_over_rep::game_score_size() const {
  return game_score_.size();
}
inline void msg_showhand_game_over_rep::clear_game_score() {
  game_score_.Clear();
}
inline ::google::protobuf::int64 msg_showhand_game_over_rep::game_score(int index) const {
  return game_score_.Get(index);
}
inline void msg_showhand_game_over_rep::set_game_score(int index, ::google::protobuf::int64 value) {
  game_score_.Set(index, value);
}
inline void msg_showhand_game_over_rep::add_game_score(::google::protobuf::int64 value) {
  game_score_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
msg_showhand_game_over_rep::game_score() const {
  return game_score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
msg_showhand_game_over_rep::mutable_game_score() {
  return &game_score_;
}

// repeated int64 history_score = 3;
inline int msg_showhand_game_over_rep::history_score_size() const {
  return history_score_.size();
}
inline void msg_showhand_game_over_rep::clear_history_score() {
  history_score_.Clear();
}
inline ::google::protobuf::int64 msg_showhand_game_over_rep::history_score(int index) const {
  return history_score_.Get(index);
}
inline void msg_showhand_game_over_rep::set_history_score(int index, ::google::protobuf::int64 value) {
  history_score_.Set(index, value);
}
inline void msg_showhand_game_over_rep::add_history_score(::google::protobuf::int64 value) {
  history_score_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
msg_showhand_game_over_rep::history_score() const {
  return history_score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
msg_showhand_game_over_rep::mutable_history_score() {
  return &history_score_;
}

// repeated .net.msg_cards hand_card_data = 4;
inline int msg_showhand_game_over_rep::hand_card_data_size() const {
  return hand_card_data_.size();
}
inline void msg_showhand_game_over_rep::clear_hand_card_data() {
  hand_card_data_.Clear();
}
inline const ::net::msg_cards& msg_showhand_game_over_rep::hand_card_data(int index) const {
  return hand_card_data_.Get(index);
}
inline ::net::msg_cards* msg_showhand_game_over_rep::mutable_hand_card_data(int index) {
  return hand_card_data_.Mutable(index);
}
inline ::net::msg_cards* msg_showhand_game_over_rep::add_hand_card_data() {
  return hand_card_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::net::msg_cards >&
msg_showhand_game_over_rep::hand_card_data() const {
  return hand_card_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::net::msg_cards >*
msg_showhand_game_over_rep::mutable_hand_card_data() {
  return &hand_card_data_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace net

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_showhand_5flogic_5fmsg_2eproto__INCLUDED
