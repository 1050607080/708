// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: servers_msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "servers_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace net {

namespace {

const ::google::protobuf::Descriptor* msg_register_svr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_register_svr_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_register_svr_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_register_svr_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_report_svr_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_report_svr_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_leave_svr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_leave_svr_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_notify_net_state_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_notify_net_state_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_enter_into_game_svr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_enter_into_game_svr_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_notify_change_account_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_notify_change_account_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_update_lobby_change_account_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_update_lobby_change_account_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_notify_change_playerinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_notify_change_playerinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_notify_stop_service_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_notify_stop_service_reflection_ = NULL;
const ::google::protobuf::Descriptor* land_game_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  land_game_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_report_game_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_report_game_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_report_fee_log_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_report_fee_log_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_leave_robot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_leave_robot_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_flush_change_account_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_flush_change_account_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_update_change_account_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_update_change_account_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_change_room_param_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_change_room_param_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_contorl_player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_contorl_player_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_contorl_multi_player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_contorl_multi_player_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_dice_control_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_dice_control_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_majiang_config_hand_card_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_majiang_config_hand_card_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_update_server_room_robot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_update_server_room_robot_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_reload_robot_online_cfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_reload_robot_online_cfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_update_new_player_novice_welfare_right_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_update_new_player_novice_welfare_right_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_update_new_player_novice_welfare_value_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_update_new_player_novice_welfare_value_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_register_dispatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_register_dispatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_register_dispatch_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_register_dispatch_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_notify_gamesvrs_new_lobby_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_notify_gamesvrs_new_lobby_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_retire_lobbysvr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_retire_lobbysvr_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_retire_gamesvr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_retire_gamesvr_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_report_onlines_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_report_onlines_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_broadcast_other_lobby_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_broadcast_other_lobby_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_broadcast_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_broadcast_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_stop_snatch_coin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_stop_snatch_coin_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_robot_snatch_coin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_robot_snatch_coin_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_auto_kill_user_cfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_auto_kill_user_cfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_flush_active_welfare_cfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_flush_active_welfare_cfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_reset_active_welfare_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_reset_active_welfare_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_flush_new_register_welfare_cfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_flush_new_register_welfare_cfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_stop_conctrl_player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_stop_conctrl_player_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_syn_ctrl_user_cfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_syn_ctrl_user_cfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_change_room_stock_cfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_change_room_stock_cfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_syn_lucky_cfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_syn_lucky_cfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_syn_fish_cfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_syn_fish_cfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_reset_lucky_cfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_reset_lucky_cfg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_servers_5fmsg_2eproto() {
  protobuf_AddDesc_servers_5fmsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "servers_msg.proto");
  GOOGLE_CHECK(file != NULL);
  msg_register_svr_descriptor_ = file->message_type(0);
  static const int msg_register_svr_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_register_svr, svrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_register_svr, game_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_register_svr, robot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_register_svr, game_subtype_),
  };
  msg_register_svr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_register_svr_descriptor_,
      msg_register_svr::default_instance_,
      msg_register_svr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_register_svr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_register_svr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_register_svr));
  msg_register_svr_rep_descriptor_ = file->message_type(1);
  static const int msg_register_svr_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_register_svr_rep, result_),
  };
  msg_register_svr_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_register_svr_rep_descriptor_,
      msg_register_svr_rep::default_instance_,
      msg_register_svr_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_register_svr_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_register_svr_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_register_svr_rep));
  msg_report_svr_info_descriptor_ = file->message_type(2);
  static const int msg_report_svr_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_report_svr_info, onlines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_report_svr_info, robots_),
  };
  msg_report_svr_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_report_svr_info_descriptor_,
      msg_report_svr_info::default_instance_,
      msg_report_svr_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_report_svr_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_report_svr_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_report_svr_info));
  msg_leave_svr_descriptor_ = file->message_type(3);
  static const int msg_leave_svr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_leave_svr, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_leave_svr, goto_svr_),
  };
  msg_leave_svr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_leave_svr_descriptor_,
      msg_leave_svr::default_instance_,
      msg_leave_svr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_leave_svr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_leave_svr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_leave_svr));
  msg_notify_net_state_descriptor_ = file->message_type(4);
  static const int msg_notify_net_state_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_net_state, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_net_state, state_),
  };
  msg_notify_net_state_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_notify_net_state_descriptor_,
      msg_notify_net_state::default_instance_,
      msg_notify_net_state_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_net_state, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_net_state, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_notify_net_state));
  msg_enter_into_game_svr_descriptor_ = file->message_type(5);
  static const int msg_enter_into_game_svr_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_into_game_svr, player_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_into_game_svr, base_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_into_game_svr, game_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_into_game_svr, ctrl_flag_),
  };
  msg_enter_into_game_svr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_enter_into_game_svr_descriptor_,
      msg_enter_into_game_svr::default_instance_,
      msg_enter_into_game_svr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_into_game_svr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_into_game_svr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_enter_into_game_svr));
  msg_notify_change_account_data_descriptor_ = file->message_type(6);
  static const int msg_notify_change_account_data_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_change_account_data, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_change_account_data, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_change_account_data, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_change_account_data, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_change_account_data, ingot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_change_account_data, cvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_change_account_data, oper_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_change_account_data, sub_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_change_account_data, safe_coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_change_account_data, chessid_),
  };
  msg_notify_change_account_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_notify_change_account_data_descriptor_,
      msg_notify_change_account_data::default_instance_,
      msg_notify_change_account_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_change_account_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_change_account_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_notify_change_account_data));
  msg_update_lobby_change_account_data_descriptor_ = file->message_type(7);
  static const int msg_update_lobby_change_account_data_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_lobby_change_account_data, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_lobby_change_account_data, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_lobby_change_account_data, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_lobby_change_account_data, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_lobby_change_account_data, ingot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_lobby_change_account_data, cvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_lobby_change_account_data, oper_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_lobby_change_account_data, sub_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_lobby_change_account_data, safe_coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_lobby_change_account_data, chessid_),
  };
  msg_update_lobby_change_account_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_update_lobby_change_account_data_descriptor_,
      msg_update_lobby_change_account_data::default_instance_,
      msg_update_lobby_change_account_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_lobby_change_account_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_lobby_change_account_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_update_lobby_change_account_data));
  msg_notify_change_playerinfo_descriptor_ = file->message_type(8);
  static const int msg_notify_change_playerinfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_change_playerinfo, safebox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_change_playerinfo, name_),
  };
  msg_notify_change_playerinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_notify_change_playerinfo_descriptor_,
      msg_notify_change_playerinfo::default_instance_,
      msg_notify_change_playerinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_change_playerinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_change_playerinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_notify_change_playerinfo));
  msg_notify_stop_service_descriptor_ = file->message_type(9);
  static const int msg_notify_stop_service_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_stop_service, btime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_stop_service, etime_),
  };
  msg_notify_stop_service_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_notify_stop_service_descriptor_,
      msg_notify_stop_service::default_instance_,
      msg_notify_stop_service_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_stop_service, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_stop_service, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_notify_stop_service));
  land_game_result_descriptor_ = file->message_type(10);
  static const int land_game_result_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_game_result, is_spring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_game_result, is_land_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_game_result, deal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_game_result, enter_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_game_result, basescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_game_result, press_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_game_result, bankrupt_count_),
  };
  land_game_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      land_game_result_descriptor_,
      land_game_result::default_instance_,
      land_game_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_game_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_game_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(land_game_result));
  msg_report_game_result_descriptor_ = file->message_type(11);
  static const int msg_report_game_result_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_report_game_result, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_report_game_result, consume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_report_game_result, game_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_report_game_result, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_report_game_result, win_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_report_game_result, ex_win_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_report_game_result, bet_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_report_game_result, branker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_report_game_result, welcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_report_game_result, weltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_report_game_result, land_),
  };
  msg_report_game_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_report_game_result_descriptor_,
      msg_report_game_result::default_instance_,
      msg_report_game_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_report_game_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_report_game_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_report_game_result));
  msg_report_fee_log_descriptor_ = file->message_type(12);
  static const int msg_report_fee_log_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_report_fee_log, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_report_fee_log, fee_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_report_fee_log, fee_lose_),
  };
  msg_report_fee_log_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_report_fee_log_descriptor_,
      msg_report_fee_log::default_instance_,
      msg_report_fee_log_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_report_fee_log, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_report_fee_log, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_report_fee_log));
  msg_leave_robot_descriptor_ = file->message_type(13);
  static const int msg_leave_robot_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_leave_robot, uid_),
  };
  msg_leave_robot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_leave_robot_descriptor_,
      msg_leave_robot::default_instance_,
      msg_leave_robot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_leave_robot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_leave_robot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_leave_robot));
  msg_flush_change_account_data_descriptor_ = file->message_type(14);
  static const int msg_flush_change_account_data_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_flush_change_account_data, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_flush_change_account_data, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_flush_change_account_data, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_flush_change_account_data, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_flush_change_account_data, ingot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_flush_change_account_data, cvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_flush_change_account_data, safe_coin_),
  };
  msg_flush_change_account_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_flush_change_account_data_descriptor_,
      msg_flush_change_account_data::default_instance_,
      msg_flush_change_account_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_flush_change_account_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_flush_change_account_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_flush_change_account_data));
  msg_update_change_account_data_descriptor_ = file->message_type(15);
  static const int msg_update_change_account_data_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_change_account_data, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_change_account_data, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_change_account_data, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_change_account_data, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_change_account_data, ingot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_change_account_data, cvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_change_account_data, safe_coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_change_account_data, oper_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_change_account_data, sub_type_),
  };
  msg_update_change_account_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_update_change_account_data_descriptor_,
      msg_update_change_account_data::default_instance_,
      msg_update_change_account_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_change_account_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_change_account_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_update_change_account_data));
  msg_change_room_param_descriptor_ = file->message_type(16);
  static const int msg_change_room_param_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_change_room_param, gametype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_change_room_param, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_change_room_param, param_),
  };
  msg_change_room_param_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_change_room_param_descriptor_,
      msg_change_room_param::default_instance_,
      msg_change_room_param_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_change_room_param, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_change_room_param, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_change_room_param));
  msg_contorl_player_descriptor_ = file->message_type(17);
  static const int msg_contorl_player_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_contorl_player, gametype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_contorl_player, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_contorl_player, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_contorl_player, operatetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_contorl_player, gamecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_contorl_player, id_),
  };
  msg_contorl_player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_contorl_player_descriptor_,
      msg_contorl_player::default_instance_,
      msg_contorl_player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_contorl_player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_contorl_player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_contorl_player));
  msg_contorl_multi_player_descriptor_ = file->message_type(18);
  static const int msg_contorl_multi_player_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_contorl_multi_player, gametype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_contorl_multi_player, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_contorl_multi_player, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_contorl_multi_player, operatetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_contorl_multi_player, gamecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_contorl_multi_player, gametime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_contorl_multi_player, totalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_contorl_multi_player, id_),
  };
  msg_contorl_multi_player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_contorl_multi_player_descriptor_,
      msg_contorl_multi_player::default_instance_,
      msg_contorl_multi_player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_contorl_multi_player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_contorl_multi_player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_contorl_multi_player));
  msg_dice_control_req_descriptor_ = file->message_type(19);
  static const int msg_dice_control_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_dice_control_req, gametype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_dice_control_req, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_dice_control_req, dice_),
  };
  msg_dice_control_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_dice_control_req_descriptor_,
      msg_dice_control_req::default_instance_,
      msg_dice_control_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_dice_control_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_dice_control_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_dice_control_req));
  msg_majiang_config_hand_card_descriptor_ = file->message_type(20);
  static const int msg_majiang_config_hand_card_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_config_hand_card, gametype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_config_hand_card, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_config_hand_card, hand_card_),
  };
  msg_majiang_config_hand_card_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_majiang_config_hand_card_descriptor_,
      msg_majiang_config_hand_card::default_instance_,
      msg_majiang_config_hand_card_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_config_hand_card, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_config_hand_card, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_majiang_config_hand_card));
  msg_update_server_room_robot_descriptor_ = file->message_type(21);
  static const int msg_update_server_room_robot_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_server_room_robot, gametype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_server_room_robot, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_server_room_robot, robot_),
  };
  msg_update_server_room_robot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_update_server_room_robot_descriptor_,
      msg_update_server_room_robot::default_instance_,
      msg_update_server_room_robot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_server_room_robot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_server_room_robot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_update_server_room_robot));
  msg_reload_robot_online_cfg_descriptor_ = file->message_type(22);
  static const int msg_reload_robot_online_cfg_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_reload_robot_online_cfg, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_reload_robot_online_cfg, gametype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_reload_robot_online_cfg, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_reload_robot_online_cfg, leveltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_reload_robot_online_cfg, batchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_reload_robot_online_cfg, logintype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_reload_robot_online_cfg, entertimer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_reload_robot_online_cfg, leavetimer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_reload_robot_online_cfg, online_),
  };
  msg_reload_robot_online_cfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_reload_robot_online_cfg_descriptor_,
      msg_reload_robot_online_cfg::default_instance_,
      msg_reload_robot_online_cfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_reload_robot_online_cfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_reload_robot_online_cfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_reload_robot_online_cfg));
  msg_update_new_player_novice_welfare_right_descriptor_ = file->message_type(23);
  static const int msg_update_new_player_novice_welfare_right_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_new_player_novice_welfare_right, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_new_player_novice_welfare_right, userright_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_new_player_novice_welfare_right, posrmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_new_player_novice_welfare_right, postime_),
  };
  msg_update_new_player_novice_welfare_right_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_update_new_player_novice_welfare_right_descriptor_,
      msg_update_new_player_novice_welfare_right::default_instance_,
      msg_update_new_player_novice_welfare_right_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_new_player_novice_welfare_right, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_new_player_novice_welfare_right, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_update_new_player_novice_welfare_right));
  msg_update_new_player_novice_welfare_value_descriptor_ = file->message_type(24);
  static const int msg_update_new_player_novice_welfare_value_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_new_player_novice_welfare_value, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_new_player_novice_welfare_value, minpayrmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_new_player_novice_welfare_value, maxpayrmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_new_player_novice_welfare_value, maxwinscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_new_player_novice_welfare_value, welfarecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_new_player_novice_welfare_value, welfarepro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_new_player_novice_welfare_value, postime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_new_player_novice_welfare_value, lift_odds_),
  };
  msg_update_new_player_novice_welfare_value_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_update_new_player_novice_welfare_value_descriptor_,
      msg_update_new_player_novice_welfare_value::default_instance_,
      msg_update_new_player_novice_welfare_value_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_new_player_novice_welfare_value, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_new_player_novice_welfare_value, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_update_new_player_novice_welfare_value));
  msg_register_dispatch_descriptor_ = file->message_type(25);
  static const int msg_register_dispatch_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_register_dispatch, svrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_register_dispatch, svr_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_register_dispatch, game_type_),
  };
  msg_register_dispatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_register_dispatch_descriptor_,
      msg_register_dispatch::default_instance_,
      msg_register_dispatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_register_dispatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_register_dispatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_register_dispatch));
  msg_register_dispatch_rep_descriptor_ = file->message_type(26);
  static const int msg_register_dispatch_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_register_dispatch_rep, result_),
  };
  msg_register_dispatch_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_register_dispatch_rep_descriptor_,
      msg_register_dispatch_rep::default_instance_,
      msg_register_dispatch_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_register_dispatch_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_register_dispatch_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_register_dispatch_rep));
  msg_notify_gamesvrs_new_lobby_descriptor_ = file->message_type(27);
  static const int msg_notify_gamesvrs_new_lobby_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_gamesvrs_new_lobby, lobby_svrid_),
  };
  msg_notify_gamesvrs_new_lobby_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_notify_gamesvrs_new_lobby_descriptor_,
      msg_notify_gamesvrs_new_lobby::default_instance_,
      msg_notify_gamesvrs_new_lobby_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_gamesvrs_new_lobby, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_gamesvrs_new_lobby, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_notify_gamesvrs_new_lobby));
  msg_retire_lobbysvr_descriptor_ = file->message_type(28);
  static const int msg_retire_lobbysvr_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_retire_lobbysvr, svrid_),
  };
  msg_retire_lobbysvr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_retire_lobbysvr_descriptor_,
      msg_retire_lobbysvr::default_instance_,
      msg_retire_lobbysvr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_retire_lobbysvr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_retire_lobbysvr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_retire_lobbysvr));
  msg_retire_gamesvr_descriptor_ = file->message_type(29);
  static const int msg_retire_gamesvr_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_retire_gamesvr, svrid_),
  };
  msg_retire_gamesvr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_retire_gamesvr_descriptor_,
      msg_retire_gamesvr::default_instance_,
      msg_retire_gamesvr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_retire_gamesvr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_retire_gamesvr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_retire_gamesvr));
  msg_report_onlines_descriptor_ = file->message_type(30);
  static const int msg_report_onlines_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_report_onlines, player_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_report_onlines, robot_size_),
  };
  msg_report_onlines_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_report_onlines_descriptor_,
      msg_report_onlines::default_instance_,
      msg_report_onlines_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_report_onlines, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_report_onlines, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_report_onlines));
  msg_broadcast_other_lobby_descriptor_ = file->message_type(31);
  static const int msg_broadcast_other_lobby_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_broadcast_other_lobby, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_broadcast_other_lobby, svrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_broadcast_other_lobby, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_broadcast_other_lobby, cmd_),
  };
  msg_broadcast_other_lobby_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_broadcast_other_lobby_descriptor_,
      msg_broadcast_other_lobby::default_instance_,
      msg_broadcast_other_lobby_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_broadcast_other_lobby, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_broadcast_other_lobby, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_broadcast_other_lobby));
  msg_broadcast_info_descriptor_ = file->message_type(32);
  static const int msg_broadcast_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_broadcast_info, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_broadcast_info, cmd_),
  };
  msg_broadcast_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_broadcast_info_descriptor_,
      msg_broadcast_info::default_instance_,
      msg_broadcast_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_broadcast_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_broadcast_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_broadcast_info));
  msg_stop_snatch_coin_descriptor_ = file->message_type(33);
  static const int msg_stop_snatch_coin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_stop_snatch_coin, gametype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_stop_snatch_coin, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_stop_snatch_coin, stop_),
  };
  msg_stop_snatch_coin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_stop_snatch_coin_descriptor_,
      msg_stop_snatch_coin::default_instance_,
      msg_stop_snatch_coin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_stop_snatch_coin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_stop_snatch_coin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_stop_snatch_coin));
  msg_robot_snatch_coin_descriptor_ = file->message_type(34);
  static const int msg_robot_snatch_coin_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_robot_snatch_coin, gametype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_robot_snatch_coin, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_robot_snatch_coin, snatchtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_robot_snatch_coin, robotcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_robot_snatch_coin, cardcount_),
  };
  msg_robot_snatch_coin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_robot_snatch_coin_descriptor_,
      msg_robot_snatch_coin::default_instance_,
      msg_robot_snatch_coin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_robot_snatch_coin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_robot_snatch_coin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_robot_snatch_coin));
  msg_auto_kill_user_cfg_descriptor_ = file->message_type(35);
  static const int msg_auto_kill_user_cfg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_auto_kill_user_cfg, updatejson_),
  };
  msg_auto_kill_user_cfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_auto_kill_user_cfg_descriptor_,
      msg_auto_kill_user_cfg::default_instance_,
      msg_auto_kill_user_cfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_auto_kill_user_cfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_auto_kill_user_cfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_auto_kill_user_cfg));
  msg_flush_active_welfare_cfg_descriptor_ = file->message_type(36);
  static const int msg_flush_active_welfare_cfg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_flush_active_welfare_cfg, updatejson_),
  };
  msg_flush_active_welfare_cfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_flush_active_welfare_cfg_descriptor_,
      msg_flush_active_welfare_cfg::default_instance_,
      msg_flush_active_welfare_cfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_flush_active_welfare_cfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_flush_active_welfare_cfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_flush_active_welfare_cfg));
  msg_reset_active_welfare_info_descriptor_ = file->message_type(37);
  static const int msg_reset_active_welfare_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_reset_active_welfare_info, updatejson_),
  };
  msg_reset_active_welfare_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_reset_active_welfare_info_descriptor_,
      msg_reset_active_welfare_info::default_instance_,
      msg_reset_active_welfare_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_reset_active_welfare_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_reset_active_welfare_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_reset_active_welfare_info));
  msg_flush_new_register_welfare_cfg_descriptor_ = file->message_type(38);
  static const int msg_flush_new_register_welfare_cfg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_flush_new_register_welfare_cfg, updatejson_),
  };
  msg_flush_new_register_welfare_cfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_flush_new_register_welfare_cfg_descriptor_,
      msg_flush_new_register_welfare_cfg::default_instance_,
      msg_flush_new_register_welfare_cfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_flush_new_register_welfare_cfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_flush_new_register_welfare_cfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_flush_new_register_welfare_cfg));
  msg_stop_conctrl_player_descriptor_ = file->message_type(39);
  static const int msg_stop_conctrl_player_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_stop_conctrl_player, uid_),
  };
  msg_stop_conctrl_player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_stop_conctrl_player_descriptor_,
      msg_stop_conctrl_player::default_instance_,
      msg_stop_conctrl_player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_stop_conctrl_player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_stop_conctrl_player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_stop_conctrl_player));
  msg_syn_ctrl_user_cfg_descriptor_ = file->message_type(40);
  static const int msg_syn_ctrl_user_cfg_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_syn_ctrl_user_cfg, vec_suid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_syn_ctrl_user_cfg, opertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_syn_ctrl_user_cfg, tag_suid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_syn_ctrl_user_cfg, tag_sdeviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_syn_ctrl_user_cfg, tag_tuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_syn_ctrl_user_cfg, tag_cgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_syn_ctrl_user_cfg, tag_skey_),
  };
  msg_syn_ctrl_user_cfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_syn_ctrl_user_cfg_descriptor_,
      msg_syn_ctrl_user_cfg::default_instance_,
      msg_syn_ctrl_user_cfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_syn_ctrl_user_cfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_syn_ctrl_user_cfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_syn_ctrl_user_cfg));
  msg_change_room_stock_cfg_descriptor_ = file->message_type(41);
  static const int msg_change_room_stock_cfg_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_change_room_stock_cfg, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_change_room_stock_cfg, stock_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_change_room_stock_cfg, stock_conversion_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_change_room_stock_cfg, jackpot_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_change_room_stock_cfg, jackpot_max_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_change_room_stock_cfg, jackpot_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_change_room_stock_cfg, jackpot_coefficient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_change_room_stock_cfg, jackpot_extract_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_change_room_stock_cfg, add_stock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_change_room_stock_cfg, kill_points_line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_change_room_stock_cfg, player_win_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_change_room_stock_cfg, add_jackpot_),
  };
  msg_change_room_stock_cfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_change_room_stock_cfg_descriptor_,
      msg_change_room_stock_cfg::default_instance_,
      msg_change_room_stock_cfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_change_room_stock_cfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_change_room_stock_cfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_change_room_stock_cfg));
  msg_syn_lucky_cfg_descriptor_ = file->message_type(42);
  static const int msg_syn_lucky_cfg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_syn_lucky_cfg, uid_),
  };
  msg_syn_lucky_cfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_syn_lucky_cfg_descriptor_,
      msg_syn_lucky_cfg::default_instance_,
      msg_syn_lucky_cfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_syn_lucky_cfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_syn_lucky_cfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_syn_lucky_cfg));
  msg_syn_fish_cfg_descriptor_ = file->message_type(43);
  static const int msg_syn_fish_cfg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_syn_fish_cfg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_syn_fish_cfg, prize_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_syn_fish_cfg, prize_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_syn_fish_cfg, kill_rate_),
  };
  msg_syn_fish_cfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_syn_fish_cfg_descriptor_,
      msg_syn_fish_cfg::default_instance_,
      msg_syn_fish_cfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_syn_fish_cfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_syn_fish_cfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_syn_fish_cfg));
  msg_reset_lucky_cfg_descriptor_ = file->message_type(44);
  static const int msg_reset_lucky_cfg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_reset_lucky_cfg, uid_),
  };
  msg_reset_lucky_cfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_reset_lucky_cfg_descriptor_,
      msg_reset_lucky_cfg::default_instance_,
      msg_reset_lucky_cfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_reset_lucky_cfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_reset_lucky_cfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_reset_lucky_cfg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_servers_5fmsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_register_svr_descriptor_, &msg_register_svr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_register_svr_rep_descriptor_, &msg_register_svr_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_report_svr_info_descriptor_, &msg_report_svr_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_leave_svr_descriptor_, &msg_leave_svr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_notify_net_state_descriptor_, &msg_notify_net_state::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_enter_into_game_svr_descriptor_, &msg_enter_into_game_svr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_notify_change_account_data_descriptor_, &msg_notify_change_account_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_update_lobby_change_account_data_descriptor_, &msg_update_lobby_change_account_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_notify_change_playerinfo_descriptor_, &msg_notify_change_playerinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_notify_stop_service_descriptor_, &msg_notify_stop_service::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    land_game_result_descriptor_, &land_game_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_report_game_result_descriptor_, &msg_report_game_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_report_fee_log_descriptor_, &msg_report_fee_log::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_leave_robot_descriptor_, &msg_leave_robot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_flush_change_account_data_descriptor_, &msg_flush_change_account_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_update_change_account_data_descriptor_, &msg_update_change_account_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_change_room_param_descriptor_, &msg_change_room_param::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_contorl_player_descriptor_, &msg_contorl_player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_contorl_multi_player_descriptor_, &msg_contorl_multi_player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_dice_control_req_descriptor_, &msg_dice_control_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_majiang_config_hand_card_descriptor_, &msg_majiang_config_hand_card::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_update_server_room_robot_descriptor_, &msg_update_server_room_robot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_reload_robot_online_cfg_descriptor_, &msg_reload_robot_online_cfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_update_new_player_novice_welfare_right_descriptor_, &msg_update_new_player_novice_welfare_right::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_update_new_player_novice_welfare_value_descriptor_, &msg_update_new_player_novice_welfare_value::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_register_dispatch_descriptor_, &msg_register_dispatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_register_dispatch_rep_descriptor_, &msg_register_dispatch_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_notify_gamesvrs_new_lobby_descriptor_, &msg_notify_gamesvrs_new_lobby::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_retire_lobbysvr_descriptor_, &msg_retire_lobbysvr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_retire_gamesvr_descriptor_, &msg_retire_gamesvr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_report_onlines_descriptor_, &msg_report_onlines::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_broadcast_other_lobby_descriptor_, &msg_broadcast_other_lobby::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_broadcast_info_descriptor_, &msg_broadcast_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_stop_snatch_coin_descriptor_, &msg_stop_snatch_coin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_robot_snatch_coin_descriptor_, &msg_robot_snatch_coin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_auto_kill_user_cfg_descriptor_, &msg_auto_kill_user_cfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_flush_active_welfare_cfg_descriptor_, &msg_flush_active_welfare_cfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_reset_active_welfare_info_descriptor_, &msg_reset_active_welfare_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_flush_new_register_welfare_cfg_descriptor_, &msg_flush_new_register_welfare_cfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_stop_conctrl_player_descriptor_, &msg_stop_conctrl_player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_syn_ctrl_user_cfg_descriptor_, &msg_syn_ctrl_user_cfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_change_room_stock_cfg_descriptor_, &msg_change_room_stock_cfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_syn_lucky_cfg_descriptor_, &msg_syn_lucky_cfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_syn_fish_cfg_descriptor_, &msg_syn_fish_cfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_reset_lucky_cfg_descriptor_, &msg_reset_lucky_cfg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_servers_5fmsg_2eproto() {
  delete msg_register_svr::default_instance_;
  delete msg_register_svr_reflection_;
  delete msg_register_svr_rep::default_instance_;
  delete msg_register_svr_rep_reflection_;
  delete msg_report_svr_info::default_instance_;
  delete msg_report_svr_info_reflection_;
  delete msg_leave_svr::default_instance_;
  delete msg_leave_svr_reflection_;
  delete msg_notify_net_state::default_instance_;
  delete msg_notify_net_state_reflection_;
  delete msg_enter_into_game_svr::default_instance_;
  delete msg_enter_into_game_svr_reflection_;
  delete msg_notify_change_account_data::default_instance_;
  delete msg_notify_change_account_data_reflection_;
  delete msg_update_lobby_change_account_data::default_instance_;
  delete msg_update_lobby_change_account_data_reflection_;
  delete msg_notify_change_playerinfo::default_instance_;
  delete msg_notify_change_playerinfo_reflection_;
  delete msg_notify_stop_service::default_instance_;
  delete msg_notify_stop_service_reflection_;
  delete land_game_result::default_instance_;
  delete land_game_result_reflection_;
  delete msg_report_game_result::default_instance_;
  delete msg_report_game_result_reflection_;
  delete msg_report_fee_log::default_instance_;
  delete msg_report_fee_log_reflection_;
  delete msg_leave_robot::default_instance_;
  delete msg_leave_robot_reflection_;
  delete msg_flush_change_account_data::default_instance_;
  delete msg_flush_change_account_data_reflection_;
  delete msg_update_change_account_data::default_instance_;
  delete msg_update_change_account_data_reflection_;
  delete msg_change_room_param::default_instance_;
  delete msg_change_room_param_reflection_;
  delete msg_contorl_player::default_instance_;
  delete msg_contorl_player_reflection_;
  delete msg_contorl_multi_player::default_instance_;
  delete msg_contorl_multi_player_reflection_;
  delete msg_dice_control_req::default_instance_;
  delete msg_dice_control_req_reflection_;
  delete msg_majiang_config_hand_card::default_instance_;
  delete msg_majiang_config_hand_card_reflection_;
  delete msg_update_server_room_robot::default_instance_;
  delete msg_update_server_room_robot_reflection_;
  delete msg_reload_robot_online_cfg::default_instance_;
  delete msg_reload_robot_online_cfg_reflection_;
  delete msg_update_new_player_novice_welfare_right::default_instance_;
  delete msg_update_new_player_novice_welfare_right_reflection_;
  delete msg_update_new_player_novice_welfare_value::default_instance_;
  delete msg_update_new_player_novice_welfare_value_reflection_;
  delete msg_register_dispatch::default_instance_;
  delete msg_register_dispatch_reflection_;
  delete msg_register_dispatch_rep::default_instance_;
  delete msg_register_dispatch_rep_reflection_;
  delete msg_notify_gamesvrs_new_lobby::default_instance_;
  delete msg_notify_gamesvrs_new_lobby_reflection_;
  delete msg_retire_lobbysvr::default_instance_;
  delete msg_retire_lobbysvr_reflection_;
  delete msg_retire_gamesvr::default_instance_;
  delete msg_retire_gamesvr_reflection_;
  delete msg_report_onlines::default_instance_;
  delete msg_report_onlines_reflection_;
  delete msg_broadcast_other_lobby::default_instance_;
  delete msg_broadcast_other_lobby_reflection_;
  delete msg_broadcast_info::default_instance_;
  delete msg_broadcast_info_reflection_;
  delete msg_stop_snatch_coin::default_instance_;
  delete msg_stop_snatch_coin_reflection_;
  delete msg_robot_snatch_coin::default_instance_;
  delete msg_robot_snatch_coin_reflection_;
  delete msg_auto_kill_user_cfg::default_instance_;
  delete msg_auto_kill_user_cfg_reflection_;
  delete msg_flush_active_welfare_cfg::default_instance_;
  delete msg_flush_active_welfare_cfg_reflection_;
  delete msg_reset_active_welfare_info::default_instance_;
  delete msg_reset_active_welfare_info_reflection_;
  delete msg_flush_new_register_welfare_cfg::default_instance_;
  delete msg_flush_new_register_welfare_cfg_reflection_;
  delete msg_stop_conctrl_player::default_instance_;
  delete msg_stop_conctrl_player_reflection_;
  delete msg_syn_ctrl_user_cfg::default_instance_;
  delete msg_syn_ctrl_user_cfg_reflection_;
  delete msg_change_room_stock_cfg::default_instance_;
  delete msg_change_room_stock_cfg_reflection_;
  delete msg_syn_lucky_cfg::default_instance_;
  delete msg_syn_lucky_cfg_reflection_;
  delete msg_syn_fish_cfg::default_instance_;
  delete msg_syn_fish_cfg_reflection_;
  delete msg_reset_lucky_cfg::default_instance_;
  delete msg_reset_lucky_cfg_reflection_;
}

void protobuf_AddDesc_servers_5fmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::net::protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  ::net::protobuf_AddDesc_error_5fcode_2eproto();
  ::net::protobuf_AddDesc_dice_5flogic_5fmsg_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021servers_msg.proto\022\003net\032\025base_msg_struc"
    "t.proto\032\020error_code.proto\032\024dice_logic_ms"
    "g.proto\"Y\n\020msg_register_svr\022\r\n\005svrid\030\001 \001"
    "(\r\022\021\n\tgame_type\030\002 \001(\r\022\r\n\005robot\030\003 \001(\r\022\024\n\014"
    "game_subtype\030\004 \001(\r\"&\n\024msg_register_svr_r"
    "ep\022\016\n\006result\030\001 \001(\r\"6\n\023msg_report_svr_inf"
    "o\022\017\n\007onlines\030\001 \001(\r\022\016\n\006robots\030\002 \001(\r\".\n\rms"
    "g_leave_svr\022\013\n\003uid\030\001 \001(\r\022\020\n\010goto_svr\030\002 \001"
    "(\r\"2\n\024msg_notify_net_state\022\013\n\003uid\030\001 \001(\r\022"
    "\r\n\005state\030\002 \001(\r\"\214\001\n\027msg_enter_into_game_s"
    "vr\022\023\n\013player_type\030\001 \001(\r\022!\n\tbase_data\030\002 \001"
    "(\0132\016.net.base_info\022&\n\tgame_data\030\003 \001(\0132\023."
    "net.game_data_info\022\021\n\tctrl_flag\030\004 \001(\r\"\303\001"
    "\n\036msg_notify_change_account_data\022\013\n\003uid\030"
    "\001 \001(\r\022\017\n\007diamond\030\002 \001(\003\022\014\n\004coin\030\003 \001(\003\022\r\n\005"
    "score\030\004 \001(\003\022\r\n\005ingot\030\005 \001(\003\022\016\n\006cvalue\030\006 \001"
    "(\003\022\021\n\toper_type\030\007 \001(\r\022\020\n\010sub_type\030\010 \001(\r\022"
    "\021\n\tsafe_coin\030\t \001(\003\022\017\n\007chessid\030\n \001(\014\"\311\001\n$"
    "msg_update_lobby_change_account_data\022\013\n\003"
    "uid\030\001 \001(\r\022\017\n\007diamond\030\002 \001(\003\022\014\n\004coin\030\003 \001(\003"
    "\022\r\n\005score\030\004 \001(\003\022\r\n\005ingot\030\005 \001(\003\022\016\n\006cvalue"
    "\030\006 \001(\003\022\021\n\toper_type\030\007 \001(\r\022\020\n\010sub_type\030\010 "
    "\001(\r\022\021\n\tsafe_coin\030\t \001(\003\022\017\n\007chessid\030\n \001(\014\""
    "=\n\034msg_notify_change_playerinfo\022\017\n\007safeb"
    "ox\030\001 \001(\r\022\014\n\004name\030\002 \001(\014\"7\n\027msg_notify_sto"
    "p_service\022\r\n\005btime\030\001 \001(\r\022\r\n\005etime\030\002 \001(\r\""
    "\227\001\n\020land_game_result\022\021\n\tis_spring\030\001 \001(\r\022"
    "\017\n\007is_land\030\002 \001(\r\022\014\n\004deal\030\003 \001(\r\022\021\n\tenter_"
    "min\030\004 \001(\004\022\021\n\tbasescore\030\005 \001(\r\022\023\n\013press_co"
    "unt\030\006 \001(\r\022\026\n\016bankrupt_count\030\007 \001(\r\"\356\001\n\026ms"
    "g_report_game_result\022\013\n\003uid\030\001 \001(\r\022\017\n\007con"
    "sume\030\002 \001(\r\022\021\n\tgame_type\030\003 \001(\r\022\016\n\006roomid\030"
    "\004 \001(\r\022\021\n\twin_score\030\005 \001(\003\022\024\n\014ex_win_score"
    "\030\006 \001(\003\022\021\n\tbet_score\030\007 \001(\003\022\017\n\007branker\030\010 \001"
    "(\005\022\020\n\010welcount\030\t \001(\005\022\017\n\007weltime\030\n \001(\004\022#\n"
    "\004land\030\013 \001(\0132\025.net.land_game_result\"D\n\022ms"
    "g_report_fee_log\022\013\n\003uid\030\001 \001(\r\022\017\n\007fee_win"
    "\030\002 \001(\003\022\020\n\010fee_lose\030\003 \001(\003\"\036\n\017msg_leave_ro"
    "bot\022\013\n\003uid\030\001 \001(\r\"\214\001\n\035msg_flush_change_ac"
    "count_data\022\013\n\003uid\030\001 \001(\r\022\017\n\007diamond\030\002 \001(\003"
    "\022\014\n\004coin\030\003 \001(\003\022\r\n\005score\030\004 \001(\003\022\r\n\005ingot\030\005"
    " \001(\003\022\016\n\006cvalue\030\006 \001(\003\022\021\n\tsafe_coin\030\007 \001(\003\""
    "\262\001\n\036msg_update_change_account_data\022\013\n\003ui"
    "d\030\001 \001(\r\022\017\n\007diamond\030\002 \001(\003\022\014\n\004coin\030\003 \001(\003\022\r"
    "\n\005score\030\004 \001(\003\022\r\n\005ingot\030\005 \001(\003\022\016\n\006cvalue\030\006"
    " \001(\003\022\021\n\tsafe_coin\030\007 \001(\003\022\021\n\toper_type\030\010 \001"
    "(\r\022\020\n\010sub_type\030\t \001(\r\"H\n\025msg_change_room_"
    "param\022\020\n\010gametype\030\001 \001(\r\022\016\n\006roomid\030\002 \001(\r\022"
    "\r\n\005param\030\003 \001(\014\"w\n\022msg_contorl_player\022\020\n\010"
    "gametype\030\001 \001(\r\022\016\n\006roomid\030\002 \001(\r\022\013\n\003uid\030\003 "
    "\001(\r\022\023\n\013operatetype\030\004 \001(\r\022\021\n\tgamecount\030\005 "
    "\001(\r\022\n\n\002id\030\006 \001(\003\"\243\001\n\030msg_contorl_multi_pl"
    "ayer\022\020\n\010gametype\030\001 \001(\r\022\016\n\006roomid\030\002 \001(\r\022\013"
    "\n\003uid\030\003 \001(\r\022\023\n\013operatetype\030\004 \001(\r\022\021\n\tgame"
    "count\030\005 \001(\r\022\020\n\010gametime\030\006 \001(\004\022\022\n\ntotalsc"
    "ore\030\007 \001(\003\022\n\n\002id\030\010 \001(\003\"]\n\024msg_dice_contro"
    "l_req\022\020\n\010gametype\030\001 \001(\r\022\016\n\006roomid\030\002 \001(\r\022"
    "#\n\004dice\030\003 \001(\0132\025.net.dice_control_req\"S\n\034"
    "msg_majiang_config_hand_card\022\020\n\010gametype"
    "\030\001 \001(\r\022\016\n\006roomid\030\002 \001(\r\022\021\n\thand_card\030\003 \001("
    "\014\"O\n\034msg_update_server_room_robot\022\020\n\010gam"
    "etype\030\001 \001(\r\022\016\n\006roomid\030\002 \001(\r\022\r\n\005robot\030\003 \001"
    "(\r\"\276\001\n\033msg_reload_robot_online_cfg\022\016\n\006op"
    "type\030\001 \001(\r\022\020\n\010gametype\030\002 \001(\r\022\016\n\006roomid\030\003"
    " \001(\r\022\021\n\tleveltype\030\004 \001(\r\022\017\n\007batchid\030\005 \001(\r"
    "\022\021\n\tlogintype\030\006 \001(\r\022\022\n\nentertimer\030\007 \001(\r\022"
    "\022\n\nleavetimer\030\010 \001(\r\022\016\n\006online\030\t \003(\r\"m\n*m"
    "sg_update_new_player_novice_welfare_righ"
    "t\022\013\n\003uid\030\001 \001(\r\022\021\n\tuserright\030\002 \001(\r\022\016\n\006pos"
    "rmb\030\003 \001(\r\022\017\n\007postime\030\004 \001(\004\"\301\001\n*msg_updat"
    "e_new_player_novice_welfare_value\022\n\n\002id\030"
    "\001 \001(\r\022\021\n\tminpayrmb\030\002 \001(\r\022\021\n\tmaxpayrmb\030\003 "
    "\001(\r\022\023\n\013maxwinscore\030\004 \001(\r\022\024\n\014welfarecount"
    "\030\005 \001(\r\022\022\n\nwelfarepro\030\006 \001(\r\022\017\n\007postime\030\007 "
    "\001(\r\022\021\n\tlift_odds\030\010 \001(\r\"K\n\025msg_register_d"
    "ispatch\022\r\n\005svrid\030\001 \001(\r\022\020\n\010svr_type\030\002 \001(\r"
    "\022\021\n\tgame_type\030\003 \001(\r\"+\n\031msg_register_disp"
    "atch_rep\022\016\n\006result\030\001 \001(\r\"4\n\035msg_notify_g"
    "amesvrs_new_lobby\022\023\n\013lobby_svrid\030\001 \001(\r\"$"
    "\n\023msg_retire_lobbysvr\022\r\n\005svrid\030\001 \001(\r\"#\n\022"
    "msg_retire_gamesvr\022\r\n\005svrid\030\001 \001(\r\"=\n\022msg"
    "_report_onlines\022\023\n\013player_size\030\001 \001(\r\022\022\n\n"
    "robot_size\030\002 \001(\r\"S\n\031msg_broadcast_other_"
    "lobby\022\014\n\004type\030\001 \001(\r\022\r\n\005svrid\030\002 \001(\r\022\014\n\004da"
    "ta\030\003 \001(\014\022\013\n\003cmd\030\004 \001(\r\"/\n\022msg_broadcast_i"
    "nfo\022\014\n\004data\030\001 \001(\014\022\013\n\003cmd\030\002 \001(\r\"F\n\024msg_st"
    "op_snatch_coin\022\020\n\010gametype\030\001 \001(\r\022\016\n\006room"
    "id\030\002 \001(\r\022\014\n\004stop\030\003 \001(\r\"t\n\025msg_robot_snat"
    "ch_coin\022\020\n\010gametype\030\001 \001(\r\022\016\n\006roomid\030\002 \001("
    "\r\022\022\n\nsnatchtype\030\003 \001(\r\022\022\n\nrobotcount\030\004 \001("
    "\r\022\021\n\tcardcount\030\005 \001(\r\",\n\026msg_auto_kill_us"
    "er_cfg\022\022\n\nupdatejson\030\001 \001(\014\"2\n\034msg_flush_"
    "active_welfare_cfg\022\022\n\nupdatejson\030\001 \001(\014\"3"
    "\n\035msg_reset_active_welfare_info\022\022\n\nupdat"
    "ejson\030\001 \001(\014\"8\n\"msg_flush_new_register_we"
    "lfare_cfg\022\022\n\nupdatejson\030\001 \001(\014\"&\n\027msg_sto"
    "p_conctrl_player\022\013\n\003uid\030\001 \001(\r\"\232\001\n\025msg_sy"
    "n_ctrl_user_cfg\022\020\n\010vec_suid\030\001 \003(\r\022\020\n\010ope"
    "rtype\030\002 \001(\r\022\020\n\010tag_suid\030\003 \001(\r\022\025\n\rtag_sde"
    "viceid\030\004 \001(\014\022\020\n\010tag_tuid\030\005 \001(\r\022\020\n\010tag_cg"
    "id\030\006 \003(\r\022\020\n\010tag_skey\030\007 \001(\014\"\270\002\n\031msg_chang"
    "e_room_stock_cfg\022\016\n\006roomid\030\001 \001(\005\022\021\n\tstoc"
    "k_max\030\002 \001(\003\022\035\n\025stock_conversion_rate\030\003 \001"
    "(\005\022\023\n\013jackpot_min\030\004 \001(\003\022\030\n\020jackpot_max_r"
    "ate\030\005 \001(\005\022\024\n\014jackpot_rate\030\006 \001(\005\022\033\n\023jackp"
    "ot_coefficient\030\007 \001(\005\022\034\n\024jackpot_extract_"
    "rate\030\010 \001(\005\022\021\n\tadd_stock\030\t \001(\003\022\030\n\020kill_po"
    "ints_line\030\n \001(\003\022\027\n\017player_win_rate\030\013 \001(\005"
    "\022\023\n\013add_jackpot\030\014 \001(\003\" \n\021msg_syn_lucky_c"
    "fg\022\013\n\003uid\030\001 \001(\r\"W\n\020msg_syn_fish_cfg\022\n\n\002i"
    "d\030\001 \001(\r\022\021\n\tprize_min\030\002 \001(\r\022\021\n\tprize_max\030"
    "\003 \001(\r\022\021\n\tkill_rate\030\004 \001(\r\"\"\n\023msg_reset_lu"
    "cky_cfg\022\013\n\003uid\030\001 \001(\r", 4500);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "servers_msg.proto", &protobuf_RegisterTypes);
  msg_register_svr::default_instance_ = new msg_register_svr();
  msg_register_svr_rep::default_instance_ = new msg_register_svr_rep();
  msg_report_svr_info::default_instance_ = new msg_report_svr_info();
  msg_leave_svr::default_instance_ = new msg_leave_svr();
  msg_notify_net_state::default_instance_ = new msg_notify_net_state();
  msg_enter_into_game_svr::default_instance_ = new msg_enter_into_game_svr();
  msg_notify_change_account_data::default_instance_ = new msg_notify_change_account_data();
  msg_update_lobby_change_account_data::default_instance_ = new msg_update_lobby_change_account_data();
  msg_notify_change_playerinfo::default_instance_ = new msg_notify_change_playerinfo();
  msg_notify_stop_service::default_instance_ = new msg_notify_stop_service();
  land_game_result::default_instance_ = new land_game_result();
  msg_report_game_result::default_instance_ = new msg_report_game_result();
  msg_report_fee_log::default_instance_ = new msg_report_fee_log();
  msg_leave_robot::default_instance_ = new msg_leave_robot();
  msg_flush_change_account_data::default_instance_ = new msg_flush_change_account_data();
  msg_update_change_account_data::default_instance_ = new msg_update_change_account_data();
  msg_change_room_param::default_instance_ = new msg_change_room_param();
  msg_contorl_player::default_instance_ = new msg_contorl_player();
  msg_contorl_multi_player::default_instance_ = new msg_contorl_multi_player();
  msg_dice_control_req::default_instance_ = new msg_dice_control_req();
  msg_majiang_config_hand_card::default_instance_ = new msg_majiang_config_hand_card();
  msg_update_server_room_robot::default_instance_ = new msg_update_server_room_robot();
  msg_reload_robot_online_cfg::default_instance_ = new msg_reload_robot_online_cfg();
  msg_update_new_player_novice_welfare_right::default_instance_ = new msg_update_new_player_novice_welfare_right();
  msg_update_new_player_novice_welfare_value::default_instance_ = new msg_update_new_player_novice_welfare_value();
  msg_register_dispatch::default_instance_ = new msg_register_dispatch();
  msg_register_dispatch_rep::default_instance_ = new msg_register_dispatch_rep();
  msg_notify_gamesvrs_new_lobby::default_instance_ = new msg_notify_gamesvrs_new_lobby();
  msg_retire_lobbysvr::default_instance_ = new msg_retire_lobbysvr();
  msg_retire_gamesvr::default_instance_ = new msg_retire_gamesvr();
  msg_report_onlines::default_instance_ = new msg_report_onlines();
  msg_broadcast_other_lobby::default_instance_ = new msg_broadcast_other_lobby();
  msg_broadcast_info::default_instance_ = new msg_broadcast_info();
  msg_stop_snatch_coin::default_instance_ = new msg_stop_snatch_coin();
  msg_robot_snatch_coin::default_instance_ = new msg_robot_snatch_coin();
  msg_auto_kill_user_cfg::default_instance_ = new msg_auto_kill_user_cfg();
  msg_flush_active_welfare_cfg::default_instance_ = new msg_flush_active_welfare_cfg();
  msg_reset_active_welfare_info::default_instance_ = new msg_reset_active_welfare_info();
  msg_flush_new_register_welfare_cfg::default_instance_ = new msg_flush_new_register_welfare_cfg();
  msg_stop_conctrl_player::default_instance_ = new msg_stop_conctrl_player();
  msg_syn_ctrl_user_cfg::default_instance_ = new msg_syn_ctrl_user_cfg();
  msg_change_room_stock_cfg::default_instance_ = new msg_change_room_stock_cfg();
  msg_syn_lucky_cfg::default_instance_ = new msg_syn_lucky_cfg();
  msg_syn_fish_cfg::default_instance_ = new msg_syn_fish_cfg();
  msg_reset_lucky_cfg::default_instance_ = new msg_reset_lucky_cfg();
  msg_register_svr::default_instance_->InitAsDefaultInstance();
  msg_register_svr_rep::default_instance_->InitAsDefaultInstance();
  msg_report_svr_info::default_instance_->InitAsDefaultInstance();
  msg_leave_svr::default_instance_->InitAsDefaultInstance();
  msg_notify_net_state::default_instance_->InitAsDefaultInstance();
  msg_enter_into_game_svr::default_instance_->InitAsDefaultInstance();
  msg_notify_change_account_data::default_instance_->InitAsDefaultInstance();
  msg_update_lobby_change_account_data::default_instance_->InitAsDefaultInstance();
  msg_notify_change_playerinfo::default_instance_->InitAsDefaultInstance();
  msg_notify_stop_service::default_instance_->InitAsDefaultInstance();
  land_game_result::default_instance_->InitAsDefaultInstance();
  msg_report_game_result::default_instance_->InitAsDefaultInstance();
  msg_report_fee_log::default_instance_->InitAsDefaultInstance();
  msg_leave_robot::default_instance_->InitAsDefaultInstance();
  msg_flush_change_account_data::default_instance_->InitAsDefaultInstance();
  msg_update_change_account_data::default_instance_->InitAsDefaultInstance();
  msg_change_room_param::default_instance_->InitAsDefaultInstance();
  msg_contorl_player::default_instance_->InitAsDefaultInstance();
  msg_contorl_multi_player::default_instance_->InitAsDefaultInstance();
  msg_dice_control_req::default_instance_->InitAsDefaultInstance();
  msg_majiang_config_hand_card::default_instance_->InitAsDefaultInstance();
  msg_update_server_room_robot::default_instance_->InitAsDefaultInstance();
  msg_reload_robot_online_cfg::default_instance_->InitAsDefaultInstance();
  msg_update_new_player_novice_welfare_right::default_instance_->InitAsDefaultInstance();
  msg_update_new_player_novice_welfare_value::default_instance_->InitAsDefaultInstance();
  msg_register_dispatch::default_instance_->InitAsDefaultInstance();
  msg_register_dispatch_rep::default_instance_->InitAsDefaultInstance();
  msg_notify_gamesvrs_new_lobby::default_instance_->InitAsDefaultInstance();
  msg_retire_lobbysvr::default_instance_->InitAsDefaultInstance();
  msg_retire_gamesvr::default_instance_->InitAsDefaultInstance();
  msg_report_onlines::default_instance_->InitAsDefaultInstance();
  msg_broadcast_other_lobby::default_instance_->InitAsDefaultInstance();
  msg_broadcast_info::default_instance_->InitAsDefaultInstance();
  msg_stop_snatch_coin::default_instance_->InitAsDefaultInstance();
  msg_robot_snatch_coin::default_instance_->InitAsDefaultInstance();
  msg_auto_kill_user_cfg::default_instance_->InitAsDefaultInstance();
  msg_flush_active_welfare_cfg::default_instance_->InitAsDefaultInstance();
  msg_reset_active_welfare_info::default_instance_->InitAsDefaultInstance();
  msg_flush_new_register_welfare_cfg::default_instance_->InitAsDefaultInstance();
  msg_stop_conctrl_player::default_instance_->InitAsDefaultInstance();
  msg_syn_ctrl_user_cfg::default_instance_->InitAsDefaultInstance();
  msg_change_room_stock_cfg::default_instance_->InitAsDefaultInstance();
  msg_syn_lucky_cfg::default_instance_->InitAsDefaultInstance();
  msg_syn_fish_cfg::default_instance_->InitAsDefaultInstance();
  msg_reset_lucky_cfg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_servers_5fmsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_servers_5fmsg_2eproto {
  StaticDescriptorInitializer_servers_5fmsg_2eproto() {
    protobuf_AddDesc_servers_5fmsg_2eproto();
  }
} static_descriptor_initializer_servers_5fmsg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int msg_register_svr::kSvridFieldNumber;
const int msg_register_svr::kGameTypeFieldNumber;
const int msg_register_svr::kRobotFieldNumber;
const int msg_register_svr::kGameSubtypeFieldNumber;
#endif  // !_MSC_VER

msg_register_svr::msg_register_svr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_register_svr::InitAsDefaultInstance() {
}

msg_register_svr::msg_register_svr(const msg_register_svr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_register_svr::SharedCtor() {
  _cached_size_ = 0;
  svrid_ = 0u;
  game_type_ = 0u;
  robot_ = 0u;
  game_subtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_register_svr::~msg_register_svr() {
  SharedDtor();
}

void msg_register_svr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_register_svr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_register_svr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_register_svr_descriptor_;
}

const msg_register_svr& msg_register_svr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_register_svr* msg_register_svr::default_instance_ = NULL;

msg_register_svr* msg_register_svr::New() const {
  return new msg_register_svr;
}

void msg_register_svr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    svrid_ = 0u;
    game_type_ = 0u;
    robot_ = 0u;
    game_subtype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_register_svr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 svrid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svrid_)));
          set_has_svrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_type;
        break;
      }

      // optional uint32 game_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
          set_has_game_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_robot;
        break;
      }

      // optional uint32 robot = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &robot_)));
          set_has_robot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game_subtype;
        break;
      }

      // optional uint32 game_subtype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_subtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_subtype_)));
          set_has_game_subtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_register_svr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 svrid = 1;
  if (has_svrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->svrid(), output);
  }

  // optional uint32 game_type = 2;
  if (has_game_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_type(), output);
  }

  // optional uint32 robot = 3;
  if (has_robot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->robot(), output);
  }

  // optional uint32 game_subtype = 4;
  if (has_game_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_subtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_register_svr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 svrid = 1;
  if (has_svrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->svrid(), target);
  }

  // optional uint32 game_type = 2;
  if (has_game_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_type(), target);
  }

  // optional uint32 robot = 3;
  if (has_robot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->robot(), target);
  }

  // optional uint32 game_subtype = 4;
  if (has_game_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_subtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_register_svr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 svrid = 1;
    if (has_svrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svrid());
    }

    // optional uint32 game_type = 2;
    if (has_game_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_type());
    }

    // optional uint32 robot = 3;
    if (has_robot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->robot());
    }

    // optional uint32 game_subtype = 4;
    if (has_game_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_subtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_register_svr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_register_svr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_register_svr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_register_svr::MergeFrom(const msg_register_svr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svrid()) {
      set_svrid(from.svrid());
    }
    if (from.has_game_type()) {
      set_game_type(from.game_type());
    }
    if (from.has_robot()) {
      set_robot(from.robot());
    }
    if (from.has_game_subtype()) {
      set_game_subtype(from.game_subtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_register_svr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_register_svr::CopyFrom(const msg_register_svr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_register_svr::IsInitialized() const {

  return true;
}

void msg_register_svr::Swap(msg_register_svr* other) {
  if (other != this) {
    std::swap(svrid_, other->svrid_);
    std::swap(game_type_, other->game_type_);
    std::swap(robot_, other->robot_);
    std::swap(game_subtype_, other->game_subtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_register_svr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_register_svr_descriptor_;
  metadata.reflection = msg_register_svr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_register_svr_rep::kResultFieldNumber;
#endif  // !_MSC_VER

msg_register_svr_rep::msg_register_svr_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_register_svr_rep::InitAsDefaultInstance() {
}

msg_register_svr_rep::msg_register_svr_rep(const msg_register_svr_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_register_svr_rep::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_register_svr_rep::~msg_register_svr_rep() {
  SharedDtor();
}

void msg_register_svr_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_register_svr_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_register_svr_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_register_svr_rep_descriptor_;
}

const msg_register_svr_rep& msg_register_svr_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_register_svr_rep* msg_register_svr_rep::default_instance_ = NULL;

msg_register_svr_rep* msg_register_svr_rep::New() const {
  return new msg_register_svr_rep;
}

void msg_register_svr_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_register_svr_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_register_svr_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_register_svr_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_register_svr_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_register_svr_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_register_svr_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_register_svr_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_register_svr_rep::MergeFrom(const msg_register_svr_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_register_svr_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_register_svr_rep::CopyFrom(const msg_register_svr_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_register_svr_rep::IsInitialized() const {

  return true;
}

void msg_register_svr_rep::Swap(msg_register_svr_rep* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_register_svr_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_register_svr_rep_descriptor_;
  metadata.reflection = msg_register_svr_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_report_svr_info::kOnlinesFieldNumber;
const int msg_report_svr_info::kRobotsFieldNumber;
#endif  // !_MSC_VER

msg_report_svr_info::msg_report_svr_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_report_svr_info::InitAsDefaultInstance() {
}

msg_report_svr_info::msg_report_svr_info(const msg_report_svr_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_report_svr_info::SharedCtor() {
  _cached_size_ = 0;
  onlines_ = 0u;
  robots_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_report_svr_info::~msg_report_svr_info() {
  SharedDtor();
}

void msg_report_svr_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_report_svr_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_report_svr_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_report_svr_info_descriptor_;
}

const msg_report_svr_info& msg_report_svr_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_report_svr_info* msg_report_svr_info::default_instance_ = NULL;

msg_report_svr_info* msg_report_svr_info::New() const {
  return new msg_report_svr_info;
}

void msg_report_svr_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    onlines_ = 0u;
    robots_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_report_svr_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 onlines = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onlines_)));
          set_has_onlines();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_robots;
        break;
      }

      // optional uint32 robots = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robots:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &robots_)));
          set_has_robots();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_report_svr_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 onlines = 1;
  if (has_onlines()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->onlines(), output);
  }

  // optional uint32 robots = 2;
  if (has_robots()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->robots(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_report_svr_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 onlines = 1;
  if (has_onlines()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->onlines(), target);
  }

  // optional uint32 robots = 2;
  if (has_robots()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->robots(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_report_svr_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 onlines = 1;
    if (has_onlines()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->onlines());
    }

    // optional uint32 robots = 2;
    if (has_robots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->robots());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_report_svr_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_report_svr_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_report_svr_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_report_svr_info::MergeFrom(const msg_report_svr_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_onlines()) {
      set_onlines(from.onlines());
    }
    if (from.has_robots()) {
      set_robots(from.robots());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_report_svr_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_report_svr_info::CopyFrom(const msg_report_svr_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_report_svr_info::IsInitialized() const {

  return true;
}

void msg_report_svr_info::Swap(msg_report_svr_info* other) {
  if (other != this) {
    std::swap(onlines_, other->onlines_);
    std::swap(robots_, other->robots_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_report_svr_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_report_svr_info_descriptor_;
  metadata.reflection = msg_report_svr_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_leave_svr::kUidFieldNumber;
const int msg_leave_svr::kGotoSvrFieldNumber;
#endif  // !_MSC_VER

msg_leave_svr::msg_leave_svr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_leave_svr::InitAsDefaultInstance() {
}

msg_leave_svr::msg_leave_svr(const msg_leave_svr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_leave_svr::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  goto_svr_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_leave_svr::~msg_leave_svr() {
  SharedDtor();
}

void msg_leave_svr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_leave_svr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_leave_svr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_leave_svr_descriptor_;
}

const msg_leave_svr& msg_leave_svr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_leave_svr* msg_leave_svr::default_instance_ = NULL;

msg_leave_svr* msg_leave_svr::New() const {
  return new msg_leave_svr;
}

void msg_leave_svr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    goto_svr_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_leave_svr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_goto_svr;
        break;
      }

      // optional uint32 goto_svr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goto_svr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goto_svr_)));
          set_has_goto_svr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_leave_svr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 goto_svr = 2;
  if (has_goto_svr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->goto_svr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_leave_svr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional uint32 goto_svr = 2;
  if (has_goto_svr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->goto_svr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_leave_svr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 goto_svr = 2;
    if (has_goto_svr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goto_svr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_leave_svr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_leave_svr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_leave_svr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_leave_svr::MergeFrom(const msg_leave_svr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_goto_svr()) {
      set_goto_svr(from.goto_svr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_leave_svr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_leave_svr::CopyFrom(const msg_leave_svr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_leave_svr::IsInitialized() const {

  return true;
}

void msg_leave_svr::Swap(msg_leave_svr* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(goto_svr_, other->goto_svr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_leave_svr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_leave_svr_descriptor_;
  metadata.reflection = msg_leave_svr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_notify_net_state::kUidFieldNumber;
const int msg_notify_net_state::kStateFieldNumber;
#endif  // !_MSC_VER

msg_notify_net_state::msg_notify_net_state()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_notify_net_state::InitAsDefaultInstance() {
}

msg_notify_net_state::msg_notify_net_state(const msg_notify_net_state& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_notify_net_state::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_notify_net_state::~msg_notify_net_state() {
  SharedDtor();
}

void msg_notify_net_state::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_notify_net_state::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_notify_net_state::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_notify_net_state_descriptor_;
}

const msg_notify_net_state& msg_notify_net_state::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_notify_net_state* msg_notify_net_state::default_instance_ = NULL;

msg_notify_net_state* msg_notify_net_state::New() const {
  return new msg_notify_net_state;
}

void msg_notify_net_state::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    state_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_notify_net_state::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional uint32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_notify_net_state::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_notify_net_state::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_notify_net_state::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_notify_net_state::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_notify_net_state* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_notify_net_state*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_notify_net_state::MergeFrom(const msg_notify_net_state& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_notify_net_state::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_notify_net_state::CopyFrom(const msg_notify_net_state& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_notify_net_state::IsInitialized() const {

  return true;
}

void msg_notify_net_state::Swap(msg_notify_net_state* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_notify_net_state::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_notify_net_state_descriptor_;
  metadata.reflection = msg_notify_net_state_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_enter_into_game_svr::kPlayerTypeFieldNumber;
const int msg_enter_into_game_svr::kBaseDataFieldNumber;
const int msg_enter_into_game_svr::kGameDataFieldNumber;
const int msg_enter_into_game_svr::kCtrlFlagFieldNumber;
#endif  // !_MSC_VER

msg_enter_into_game_svr::msg_enter_into_game_svr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_enter_into_game_svr::InitAsDefaultInstance() {
  base_data_ = const_cast< ::net::base_info*>(&::net::base_info::default_instance());
  game_data_ = const_cast< ::net::game_data_info*>(&::net::game_data_info::default_instance());
}

msg_enter_into_game_svr::msg_enter_into_game_svr(const msg_enter_into_game_svr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_enter_into_game_svr::SharedCtor() {
  _cached_size_ = 0;
  player_type_ = 0u;
  base_data_ = NULL;
  game_data_ = NULL;
  ctrl_flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_enter_into_game_svr::~msg_enter_into_game_svr() {
  SharedDtor();
}

void msg_enter_into_game_svr::SharedDtor() {
  if (this != default_instance_) {
    delete base_data_;
    delete game_data_;
  }
}

void msg_enter_into_game_svr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_enter_into_game_svr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_enter_into_game_svr_descriptor_;
}

const msg_enter_into_game_svr& msg_enter_into_game_svr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_enter_into_game_svr* msg_enter_into_game_svr::default_instance_ = NULL;

msg_enter_into_game_svr* msg_enter_into_game_svr::New() const {
  return new msg_enter_into_game_svr;
}

void msg_enter_into_game_svr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_type_ = 0u;
    if (has_base_data()) {
      if (base_data_ != NULL) base_data_->::net::base_info::Clear();
    }
    if (has_game_data()) {
      if (game_data_ != NULL) game_data_->::net::game_data_info::Clear();
    }
    ctrl_flag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_enter_into_game_svr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_type_)));
          set_has_player_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_base_data;
        break;
      }

      // optional .net.base_info base_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_game_data;
        break;
      }

      // optional .net.game_data_info game_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ctrl_flag;
        break;
      }

      // optional uint32 ctrl_flag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ctrl_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ctrl_flag_)));
          set_has_ctrl_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_enter_into_game_svr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 player_type = 1;
  if (has_player_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_type(), output);
  }

  // optional .net.base_info base_data = 2;
  if (has_base_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->base_data(), output);
  }

  // optional .net.game_data_info game_data = 3;
  if (has_game_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->game_data(), output);
  }

  // optional uint32 ctrl_flag = 4;
  if (has_ctrl_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ctrl_flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_enter_into_game_svr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 player_type = 1;
  if (has_player_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_type(), target);
  }

  // optional .net.base_info base_data = 2;
  if (has_base_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->base_data(), target);
  }

  // optional .net.game_data_info game_data = 3;
  if (has_game_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->game_data(), target);
  }

  // optional uint32 ctrl_flag = 4;
  if (has_ctrl_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ctrl_flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_enter_into_game_svr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 player_type = 1;
    if (has_player_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_type());
    }

    // optional .net.base_info base_data = 2;
    if (has_base_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_data());
    }

    // optional .net.game_data_info game_data = 3;
    if (has_game_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_data());
    }

    // optional uint32 ctrl_flag = 4;
    if (has_ctrl_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ctrl_flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_enter_into_game_svr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_enter_into_game_svr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_enter_into_game_svr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_enter_into_game_svr::MergeFrom(const msg_enter_into_game_svr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_type()) {
      set_player_type(from.player_type());
    }
    if (from.has_base_data()) {
      mutable_base_data()->::net::base_info::MergeFrom(from.base_data());
    }
    if (from.has_game_data()) {
      mutable_game_data()->::net::game_data_info::MergeFrom(from.game_data());
    }
    if (from.has_ctrl_flag()) {
      set_ctrl_flag(from.ctrl_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_enter_into_game_svr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_enter_into_game_svr::CopyFrom(const msg_enter_into_game_svr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_enter_into_game_svr::IsInitialized() const {

  return true;
}

void msg_enter_into_game_svr::Swap(msg_enter_into_game_svr* other) {
  if (other != this) {
    std::swap(player_type_, other->player_type_);
    std::swap(base_data_, other->base_data_);
    std::swap(game_data_, other->game_data_);
    std::swap(ctrl_flag_, other->ctrl_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_enter_into_game_svr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_enter_into_game_svr_descriptor_;
  metadata.reflection = msg_enter_into_game_svr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_notify_change_account_data::kUidFieldNumber;
const int msg_notify_change_account_data::kDiamondFieldNumber;
const int msg_notify_change_account_data::kCoinFieldNumber;
const int msg_notify_change_account_data::kScoreFieldNumber;
const int msg_notify_change_account_data::kIngotFieldNumber;
const int msg_notify_change_account_data::kCvalueFieldNumber;
const int msg_notify_change_account_data::kOperTypeFieldNumber;
const int msg_notify_change_account_data::kSubTypeFieldNumber;
const int msg_notify_change_account_data::kSafeCoinFieldNumber;
const int msg_notify_change_account_data::kChessidFieldNumber;
#endif  // !_MSC_VER

msg_notify_change_account_data::msg_notify_change_account_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_notify_change_account_data::InitAsDefaultInstance() {
}

msg_notify_change_account_data::msg_notify_change_account_data(const msg_notify_change_account_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_notify_change_account_data::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  diamond_ = GOOGLE_LONGLONG(0);
  coin_ = GOOGLE_LONGLONG(0);
  score_ = GOOGLE_LONGLONG(0);
  ingot_ = GOOGLE_LONGLONG(0);
  cvalue_ = GOOGLE_LONGLONG(0);
  oper_type_ = 0u;
  sub_type_ = 0u;
  safe_coin_ = GOOGLE_LONGLONG(0);
  chessid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_notify_change_account_data::~msg_notify_change_account_data() {
  SharedDtor();
}

void msg_notify_change_account_data::SharedDtor() {
  if (chessid_ != &::google::protobuf::internal::kEmptyString) {
    delete chessid_;
  }
  if (this != default_instance_) {
  }
}

void msg_notify_change_account_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_notify_change_account_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_notify_change_account_data_descriptor_;
}

const msg_notify_change_account_data& msg_notify_change_account_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_notify_change_account_data* msg_notify_change_account_data::default_instance_ = NULL;

msg_notify_change_account_data* msg_notify_change_account_data::New() const {
  return new msg_notify_change_account_data;
}

void msg_notify_change_account_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    diamond_ = GOOGLE_LONGLONG(0);
    coin_ = GOOGLE_LONGLONG(0);
    score_ = GOOGLE_LONGLONG(0);
    ingot_ = GOOGLE_LONGLONG(0);
    cvalue_ = GOOGLE_LONGLONG(0);
    oper_type_ = 0u;
    sub_type_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    safe_coin_ = GOOGLE_LONGLONG(0);
    if (has_chessid()) {
      if (chessid_ != &::google::protobuf::internal::kEmptyString) {
        chessid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_notify_change_account_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_diamond;
        break;
      }

      // optional int64 diamond = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_coin;
        break;
      }

      // optional int64 coin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }

      // optional int64 score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ingot;
        break;
      }

      // optional int64 ingot = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ingot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ingot_)));
          set_has_ingot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cvalue;
        break;
      }

      // optional int64 cvalue = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cvalue_)));
          set_has_cvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_oper_type;
        break;
      }

      // optional uint32 oper_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oper_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oper_type_)));
          set_has_oper_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_sub_type;
        break;
      }

      // optional uint32 sub_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sub_type_)));
          set_has_sub_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_safe_coin;
        break;
      }

      // optional int64 safe_coin = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_safe_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &safe_coin_)));
          set_has_safe_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_chessid;
        break;
      }

      // optional bytes chessid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chessid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chessid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_notify_change_account_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional int64 diamond = 2;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->diamond(), output);
  }

  // optional int64 coin = 3;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->coin(), output);
  }

  // optional int64 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->score(), output);
  }

  // optional int64 ingot = 5;
  if (has_ingot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->ingot(), output);
  }

  // optional int64 cvalue = 6;
  if (has_cvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->cvalue(), output);
  }

  // optional uint32 oper_type = 7;
  if (has_oper_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->oper_type(), output);
  }

  // optional uint32 sub_type = 8;
  if (has_sub_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->sub_type(), output);
  }

  // optional int64 safe_coin = 9;
  if (has_safe_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->safe_coin(), output);
  }

  // optional bytes chessid = 10;
  if (has_chessid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->chessid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_notify_change_account_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional int64 diamond = 2;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->diamond(), target);
  }

  // optional int64 coin = 3;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->coin(), target);
  }

  // optional int64 score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->score(), target);
  }

  // optional int64 ingot = 5;
  if (has_ingot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->ingot(), target);
  }

  // optional int64 cvalue = 6;
  if (has_cvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->cvalue(), target);
  }

  // optional uint32 oper_type = 7;
  if (has_oper_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->oper_type(), target);
  }

  // optional uint32 sub_type = 8;
  if (has_sub_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->sub_type(), target);
  }

  // optional int64 safe_coin = 9;
  if (has_safe_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->safe_coin(), target);
  }

  // optional bytes chessid = 10;
  if (has_chessid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->chessid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_notify_change_account_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional int64 diamond = 2;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->diamond());
    }

    // optional int64 coin = 3;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->coin());
    }

    // optional int64 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->score());
    }

    // optional int64 ingot = 5;
    if (has_ingot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ingot());
    }

    // optional int64 cvalue = 6;
    if (has_cvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cvalue());
    }

    // optional uint32 oper_type = 7;
    if (has_oper_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oper_type());
    }

    // optional uint32 sub_type = 8;
    if (has_sub_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sub_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 safe_coin = 9;
    if (has_safe_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->safe_coin());
    }

    // optional bytes chessid = 10;
    if (has_chessid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->chessid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_notify_change_account_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_notify_change_account_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_notify_change_account_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_notify_change_account_data::MergeFrom(const msg_notify_change_account_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_ingot()) {
      set_ingot(from.ingot());
    }
    if (from.has_cvalue()) {
      set_cvalue(from.cvalue());
    }
    if (from.has_oper_type()) {
      set_oper_type(from.oper_type());
    }
    if (from.has_sub_type()) {
      set_sub_type(from.sub_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_safe_coin()) {
      set_safe_coin(from.safe_coin());
    }
    if (from.has_chessid()) {
      set_chessid(from.chessid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_notify_change_account_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_notify_change_account_data::CopyFrom(const msg_notify_change_account_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_notify_change_account_data::IsInitialized() const {

  return true;
}

void msg_notify_change_account_data::Swap(msg_notify_change_account_data* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(diamond_, other->diamond_);
    std::swap(coin_, other->coin_);
    std::swap(score_, other->score_);
    std::swap(ingot_, other->ingot_);
    std::swap(cvalue_, other->cvalue_);
    std::swap(oper_type_, other->oper_type_);
    std::swap(sub_type_, other->sub_type_);
    std::swap(safe_coin_, other->safe_coin_);
    std::swap(chessid_, other->chessid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_notify_change_account_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_notify_change_account_data_descriptor_;
  metadata.reflection = msg_notify_change_account_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_update_lobby_change_account_data::kUidFieldNumber;
const int msg_update_lobby_change_account_data::kDiamondFieldNumber;
const int msg_update_lobby_change_account_data::kCoinFieldNumber;
const int msg_update_lobby_change_account_data::kScoreFieldNumber;
const int msg_update_lobby_change_account_data::kIngotFieldNumber;
const int msg_update_lobby_change_account_data::kCvalueFieldNumber;
const int msg_update_lobby_change_account_data::kOperTypeFieldNumber;
const int msg_update_lobby_change_account_data::kSubTypeFieldNumber;
const int msg_update_lobby_change_account_data::kSafeCoinFieldNumber;
const int msg_update_lobby_change_account_data::kChessidFieldNumber;
#endif  // !_MSC_VER

msg_update_lobby_change_account_data::msg_update_lobby_change_account_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_update_lobby_change_account_data::InitAsDefaultInstance() {
}

msg_update_lobby_change_account_data::msg_update_lobby_change_account_data(const msg_update_lobby_change_account_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_update_lobby_change_account_data::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  diamond_ = GOOGLE_LONGLONG(0);
  coin_ = GOOGLE_LONGLONG(0);
  score_ = GOOGLE_LONGLONG(0);
  ingot_ = GOOGLE_LONGLONG(0);
  cvalue_ = GOOGLE_LONGLONG(0);
  oper_type_ = 0u;
  sub_type_ = 0u;
  safe_coin_ = GOOGLE_LONGLONG(0);
  chessid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_update_lobby_change_account_data::~msg_update_lobby_change_account_data() {
  SharedDtor();
}

void msg_update_lobby_change_account_data::SharedDtor() {
  if (chessid_ != &::google::protobuf::internal::kEmptyString) {
    delete chessid_;
  }
  if (this != default_instance_) {
  }
}

void msg_update_lobby_change_account_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_update_lobby_change_account_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_update_lobby_change_account_data_descriptor_;
}

const msg_update_lobby_change_account_data& msg_update_lobby_change_account_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_update_lobby_change_account_data* msg_update_lobby_change_account_data::default_instance_ = NULL;

msg_update_lobby_change_account_data* msg_update_lobby_change_account_data::New() const {
  return new msg_update_lobby_change_account_data;
}

void msg_update_lobby_change_account_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    diamond_ = GOOGLE_LONGLONG(0);
    coin_ = GOOGLE_LONGLONG(0);
    score_ = GOOGLE_LONGLONG(0);
    ingot_ = GOOGLE_LONGLONG(0);
    cvalue_ = GOOGLE_LONGLONG(0);
    oper_type_ = 0u;
    sub_type_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    safe_coin_ = GOOGLE_LONGLONG(0);
    if (has_chessid()) {
      if (chessid_ != &::google::protobuf::internal::kEmptyString) {
        chessid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_update_lobby_change_account_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_diamond;
        break;
      }

      // optional int64 diamond = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_coin;
        break;
      }

      // optional int64 coin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }

      // optional int64 score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ingot;
        break;
      }

      // optional int64 ingot = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ingot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ingot_)));
          set_has_ingot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cvalue;
        break;
      }

      // optional int64 cvalue = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cvalue_)));
          set_has_cvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_oper_type;
        break;
      }

      // optional uint32 oper_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oper_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oper_type_)));
          set_has_oper_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_sub_type;
        break;
      }

      // optional uint32 sub_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sub_type_)));
          set_has_sub_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_safe_coin;
        break;
      }

      // optional int64 safe_coin = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_safe_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &safe_coin_)));
          set_has_safe_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_chessid;
        break;
      }

      // optional bytes chessid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chessid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chessid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_update_lobby_change_account_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional int64 diamond = 2;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->diamond(), output);
  }

  // optional int64 coin = 3;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->coin(), output);
  }

  // optional int64 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->score(), output);
  }

  // optional int64 ingot = 5;
  if (has_ingot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->ingot(), output);
  }

  // optional int64 cvalue = 6;
  if (has_cvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->cvalue(), output);
  }

  // optional uint32 oper_type = 7;
  if (has_oper_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->oper_type(), output);
  }

  // optional uint32 sub_type = 8;
  if (has_sub_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->sub_type(), output);
  }

  // optional int64 safe_coin = 9;
  if (has_safe_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->safe_coin(), output);
  }

  // optional bytes chessid = 10;
  if (has_chessid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->chessid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_update_lobby_change_account_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional int64 diamond = 2;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->diamond(), target);
  }

  // optional int64 coin = 3;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->coin(), target);
  }

  // optional int64 score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->score(), target);
  }

  // optional int64 ingot = 5;
  if (has_ingot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->ingot(), target);
  }

  // optional int64 cvalue = 6;
  if (has_cvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->cvalue(), target);
  }

  // optional uint32 oper_type = 7;
  if (has_oper_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->oper_type(), target);
  }

  // optional uint32 sub_type = 8;
  if (has_sub_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->sub_type(), target);
  }

  // optional int64 safe_coin = 9;
  if (has_safe_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->safe_coin(), target);
  }

  // optional bytes chessid = 10;
  if (has_chessid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->chessid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_update_lobby_change_account_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional int64 diamond = 2;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->diamond());
    }

    // optional int64 coin = 3;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->coin());
    }

    // optional int64 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->score());
    }

    // optional int64 ingot = 5;
    if (has_ingot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ingot());
    }

    // optional int64 cvalue = 6;
    if (has_cvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cvalue());
    }

    // optional uint32 oper_type = 7;
    if (has_oper_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oper_type());
    }

    // optional uint32 sub_type = 8;
    if (has_sub_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sub_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 safe_coin = 9;
    if (has_safe_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->safe_coin());
    }

    // optional bytes chessid = 10;
    if (has_chessid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->chessid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_update_lobby_change_account_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_update_lobby_change_account_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_update_lobby_change_account_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_update_lobby_change_account_data::MergeFrom(const msg_update_lobby_change_account_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_ingot()) {
      set_ingot(from.ingot());
    }
    if (from.has_cvalue()) {
      set_cvalue(from.cvalue());
    }
    if (from.has_oper_type()) {
      set_oper_type(from.oper_type());
    }
    if (from.has_sub_type()) {
      set_sub_type(from.sub_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_safe_coin()) {
      set_safe_coin(from.safe_coin());
    }
    if (from.has_chessid()) {
      set_chessid(from.chessid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_update_lobby_change_account_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_update_lobby_change_account_data::CopyFrom(const msg_update_lobby_change_account_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_update_lobby_change_account_data::IsInitialized() const {

  return true;
}

void msg_update_lobby_change_account_data::Swap(msg_update_lobby_change_account_data* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(diamond_, other->diamond_);
    std::swap(coin_, other->coin_);
    std::swap(score_, other->score_);
    std::swap(ingot_, other->ingot_);
    std::swap(cvalue_, other->cvalue_);
    std::swap(oper_type_, other->oper_type_);
    std::swap(sub_type_, other->sub_type_);
    std::swap(safe_coin_, other->safe_coin_);
    std::swap(chessid_, other->chessid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_update_lobby_change_account_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_update_lobby_change_account_data_descriptor_;
  metadata.reflection = msg_update_lobby_change_account_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_notify_change_playerinfo::kSafeboxFieldNumber;
const int msg_notify_change_playerinfo::kNameFieldNumber;
#endif  // !_MSC_VER

msg_notify_change_playerinfo::msg_notify_change_playerinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_notify_change_playerinfo::InitAsDefaultInstance() {
}

msg_notify_change_playerinfo::msg_notify_change_playerinfo(const msg_notify_change_playerinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_notify_change_playerinfo::SharedCtor() {
  _cached_size_ = 0;
  safebox_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_notify_change_playerinfo::~msg_notify_change_playerinfo() {
  SharedDtor();
}

void msg_notify_change_playerinfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void msg_notify_change_playerinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_notify_change_playerinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_notify_change_playerinfo_descriptor_;
}

const msg_notify_change_playerinfo& msg_notify_change_playerinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_notify_change_playerinfo* msg_notify_change_playerinfo::default_instance_ = NULL;

msg_notify_change_playerinfo* msg_notify_change_playerinfo::New() const {
  return new msg_notify_change_playerinfo;
}

void msg_notify_change_playerinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    safebox_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_notify_change_playerinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 safebox = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &safebox_)));
          set_has_safebox();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_notify_change_playerinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 safebox = 1;
  if (has_safebox()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->safebox(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_notify_change_playerinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 safebox = 1;
  if (has_safebox()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->safebox(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_notify_change_playerinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 safebox = 1;
    if (has_safebox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->safebox());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_notify_change_playerinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_notify_change_playerinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_notify_change_playerinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_notify_change_playerinfo::MergeFrom(const msg_notify_change_playerinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_safebox()) {
      set_safebox(from.safebox());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_notify_change_playerinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_notify_change_playerinfo::CopyFrom(const msg_notify_change_playerinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_notify_change_playerinfo::IsInitialized() const {

  return true;
}

void msg_notify_change_playerinfo::Swap(msg_notify_change_playerinfo* other) {
  if (other != this) {
    std::swap(safebox_, other->safebox_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_notify_change_playerinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_notify_change_playerinfo_descriptor_;
  metadata.reflection = msg_notify_change_playerinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_notify_stop_service::kBtimeFieldNumber;
const int msg_notify_stop_service::kEtimeFieldNumber;
#endif  // !_MSC_VER

msg_notify_stop_service::msg_notify_stop_service()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_notify_stop_service::InitAsDefaultInstance() {
}

msg_notify_stop_service::msg_notify_stop_service(const msg_notify_stop_service& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_notify_stop_service::SharedCtor() {
  _cached_size_ = 0;
  btime_ = 0u;
  etime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_notify_stop_service::~msg_notify_stop_service() {
  SharedDtor();
}

void msg_notify_stop_service::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_notify_stop_service::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_notify_stop_service::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_notify_stop_service_descriptor_;
}

const msg_notify_stop_service& msg_notify_stop_service::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_notify_stop_service* msg_notify_stop_service::default_instance_ = NULL;

msg_notify_stop_service* msg_notify_stop_service::New() const {
  return new msg_notify_stop_service;
}

void msg_notify_stop_service::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    btime_ = 0u;
    etime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_notify_stop_service::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 btime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &btime_)));
          set_has_btime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_etime;
        break;
      }

      // optional uint32 etime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_etime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &etime_)));
          set_has_etime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_notify_stop_service::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 btime = 1;
  if (has_btime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->btime(), output);
  }

  // optional uint32 etime = 2;
  if (has_etime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->etime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_notify_stop_service::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 btime = 1;
  if (has_btime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->btime(), target);
  }

  // optional uint32 etime = 2;
  if (has_etime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->etime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_notify_stop_service::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 btime = 1;
    if (has_btime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->btime());
    }

    // optional uint32 etime = 2;
    if (has_etime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->etime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_notify_stop_service::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_notify_stop_service* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_notify_stop_service*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_notify_stop_service::MergeFrom(const msg_notify_stop_service& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_btime()) {
      set_btime(from.btime());
    }
    if (from.has_etime()) {
      set_etime(from.etime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_notify_stop_service::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_notify_stop_service::CopyFrom(const msg_notify_stop_service& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_notify_stop_service::IsInitialized() const {

  return true;
}

void msg_notify_stop_service::Swap(msg_notify_stop_service* other) {
  if (other != this) {
    std::swap(btime_, other->btime_);
    std::swap(etime_, other->etime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_notify_stop_service::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_notify_stop_service_descriptor_;
  metadata.reflection = msg_notify_stop_service_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int land_game_result::kIsSpringFieldNumber;
const int land_game_result::kIsLandFieldNumber;
const int land_game_result::kDealFieldNumber;
const int land_game_result::kEnterMinFieldNumber;
const int land_game_result::kBasescoreFieldNumber;
const int land_game_result::kPressCountFieldNumber;
const int land_game_result::kBankruptCountFieldNumber;
#endif  // !_MSC_VER

land_game_result::land_game_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void land_game_result::InitAsDefaultInstance() {
}

land_game_result::land_game_result(const land_game_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void land_game_result::SharedCtor() {
  _cached_size_ = 0;
  is_spring_ = 0u;
  is_land_ = 0u;
  deal_ = 0u;
  enter_min_ = GOOGLE_ULONGLONG(0);
  basescore_ = 0u;
  press_count_ = 0u;
  bankrupt_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

land_game_result::~land_game_result() {
  SharedDtor();
}

void land_game_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void land_game_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* land_game_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return land_game_result_descriptor_;
}

const land_game_result& land_game_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

land_game_result* land_game_result::default_instance_ = NULL;

land_game_result* land_game_result::New() const {
  return new land_game_result;
}

void land_game_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_spring_ = 0u;
    is_land_ = 0u;
    deal_ = 0u;
    enter_min_ = GOOGLE_ULONGLONG(0);
    basescore_ = 0u;
    press_count_ = 0u;
    bankrupt_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool land_game_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 is_spring = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_spring_)));
          set_has_is_spring();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_land;
        break;
      }

      // optional uint32 is_land = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_land:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_land_)));
          set_has_is_land();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_deal;
        break;
      }

      // optional uint32 deal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deal_)));
          set_has_deal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_enter_min;
        break;
      }

      // optional uint64 enter_min = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enter_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enter_min_)));
          set_has_enter_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_basescore;
        break;
      }

      // optional uint32 basescore = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_basescore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &basescore_)));
          set_has_basescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_press_count;
        break;
      }

      // optional uint32 press_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_press_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &press_count_)));
          set_has_press_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bankrupt_count;
        break;
      }

      // optional uint32 bankrupt_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bankrupt_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bankrupt_count_)));
          set_has_bankrupt_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void land_game_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 is_spring = 1;
  if (has_is_spring()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->is_spring(), output);
  }

  // optional uint32 is_land = 2;
  if (has_is_land()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->is_land(), output);
  }

  // optional uint32 deal = 3;
  if (has_deal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->deal(), output);
  }

  // optional uint64 enter_min = 4;
  if (has_enter_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->enter_min(), output);
  }

  // optional uint32 basescore = 5;
  if (has_basescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->basescore(), output);
  }

  // optional uint32 press_count = 6;
  if (has_press_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->press_count(), output);
  }

  // optional uint32 bankrupt_count = 7;
  if (has_bankrupt_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->bankrupt_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* land_game_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 is_spring = 1;
  if (has_is_spring()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->is_spring(), target);
  }

  // optional uint32 is_land = 2;
  if (has_is_land()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->is_land(), target);
  }

  // optional uint32 deal = 3;
  if (has_deal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->deal(), target);
  }

  // optional uint64 enter_min = 4;
  if (has_enter_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->enter_min(), target);
  }

  // optional uint32 basescore = 5;
  if (has_basescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->basescore(), target);
  }

  // optional uint32 press_count = 6;
  if (has_press_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->press_count(), target);
  }

  // optional uint32 bankrupt_count = 7;
  if (has_bankrupt_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->bankrupt_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int land_game_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 is_spring = 1;
    if (has_is_spring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_spring());
    }

    // optional uint32 is_land = 2;
    if (has_is_land()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_land());
    }

    // optional uint32 deal = 3;
    if (has_deal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deal());
    }

    // optional uint64 enter_min = 4;
    if (has_enter_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->enter_min());
    }

    // optional uint32 basescore = 5;
    if (has_basescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->basescore());
    }

    // optional uint32 press_count = 6;
    if (has_press_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->press_count());
    }

    // optional uint32 bankrupt_count = 7;
    if (has_bankrupt_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bankrupt_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void land_game_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const land_game_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const land_game_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void land_game_result::MergeFrom(const land_game_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_spring()) {
      set_is_spring(from.is_spring());
    }
    if (from.has_is_land()) {
      set_is_land(from.is_land());
    }
    if (from.has_deal()) {
      set_deal(from.deal());
    }
    if (from.has_enter_min()) {
      set_enter_min(from.enter_min());
    }
    if (from.has_basescore()) {
      set_basescore(from.basescore());
    }
    if (from.has_press_count()) {
      set_press_count(from.press_count());
    }
    if (from.has_bankrupt_count()) {
      set_bankrupt_count(from.bankrupt_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void land_game_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void land_game_result::CopyFrom(const land_game_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool land_game_result::IsInitialized() const {

  return true;
}

void land_game_result::Swap(land_game_result* other) {
  if (other != this) {
    std::swap(is_spring_, other->is_spring_);
    std::swap(is_land_, other->is_land_);
    std::swap(deal_, other->deal_);
    std::swap(enter_min_, other->enter_min_);
    std::swap(basescore_, other->basescore_);
    std::swap(press_count_, other->press_count_);
    std::swap(bankrupt_count_, other->bankrupt_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata land_game_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = land_game_result_descriptor_;
  metadata.reflection = land_game_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_report_game_result::kUidFieldNumber;
const int msg_report_game_result::kConsumeFieldNumber;
const int msg_report_game_result::kGameTypeFieldNumber;
const int msg_report_game_result::kRoomidFieldNumber;
const int msg_report_game_result::kWinScoreFieldNumber;
const int msg_report_game_result::kExWinScoreFieldNumber;
const int msg_report_game_result::kBetScoreFieldNumber;
const int msg_report_game_result::kBrankerFieldNumber;
const int msg_report_game_result::kWelcountFieldNumber;
const int msg_report_game_result::kWeltimeFieldNumber;
const int msg_report_game_result::kLandFieldNumber;
#endif  // !_MSC_VER

msg_report_game_result::msg_report_game_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_report_game_result::InitAsDefaultInstance() {
  land_ = const_cast< ::net::land_game_result*>(&::net::land_game_result::default_instance());
}

msg_report_game_result::msg_report_game_result(const msg_report_game_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_report_game_result::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  consume_ = 0u;
  game_type_ = 0u;
  roomid_ = 0u;
  win_score_ = GOOGLE_LONGLONG(0);
  ex_win_score_ = GOOGLE_LONGLONG(0);
  bet_score_ = GOOGLE_LONGLONG(0);
  branker_ = 0;
  welcount_ = 0;
  weltime_ = GOOGLE_ULONGLONG(0);
  land_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_report_game_result::~msg_report_game_result() {
  SharedDtor();
}

void msg_report_game_result::SharedDtor() {
  if (this != default_instance_) {
    delete land_;
  }
}

void msg_report_game_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_report_game_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_report_game_result_descriptor_;
}

const msg_report_game_result& msg_report_game_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_report_game_result* msg_report_game_result::default_instance_ = NULL;

msg_report_game_result* msg_report_game_result::New() const {
  return new msg_report_game_result;
}

void msg_report_game_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    consume_ = 0u;
    game_type_ = 0u;
    roomid_ = 0u;
    win_score_ = GOOGLE_LONGLONG(0);
    ex_win_score_ = GOOGLE_LONGLONG(0);
    bet_score_ = GOOGLE_LONGLONG(0);
    branker_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    welcount_ = 0;
    weltime_ = GOOGLE_ULONGLONG(0);
    if (has_land()) {
      if (land_ != NULL) land_->::net::land_game_result::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_report_game_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_consume;
        break;
      }

      // optional uint32 consume = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consume_)));
          set_has_consume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_game_type;
        break;
      }

      // optional uint32 game_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
          set_has_game_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_roomid;
        break;
      }

      // optional uint32 roomid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_win_score;
        break;
      }

      // optional int64 win_score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &win_score_)));
          set_has_win_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ex_win_score;
        break;
      }

      // optional int64 ex_win_score = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ex_win_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ex_win_score_)));
          set_has_ex_win_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bet_score;
        break;
      }

      // optional int64 bet_score = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bet_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bet_score_)));
          set_has_bet_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_branker;
        break;
      }

      // optional int32 branker = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_branker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &branker_)));
          set_has_branker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_welcount;
        break;
      }

      // optional int32 welcount = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_welcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &welcount_)));
          set_has_welcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_weltime;
        break;
      }

      // optional uint64 weltime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weltime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &weltime_)));
          set_has_weltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_land;
        break;
      }

      // optional .net.land_game_result land = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_land:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_land()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_report_game_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 consume = 2;
  if (has_consume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->consume(), output);
  }

  // optional uint32 game_type = 3;
  if (has_game_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_type(), output);
  }

  // optional uint32 roomid = 4;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->roomid(), output);
  }

  // optional int64 win_score = 5;
  if (has_win_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->win_score(), output);
  }

  // optional int64 ex_win_score = 6;
  if (has_ex_win_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->ex_win_score(), output);
  }

  // optional int64 bet_score = 7;
  if (has_bet_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->bet_score(), output);
  }

  // optional int32 branker = 8;
  if (has_branker()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->branker(), output);
  }

  // optional int32 welcount = 9;
  if (has_welcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->welcount(), output);
  }

  // optional uint64 weltime = 10;
  if (has_weltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->weltime(), output);
  }

  // optional .net.land_game_result land = 11;
  if (has_land()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->land(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_report_game_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional uint32 consume = 2;
  if (has_consume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->consume(), target);
  }

  // optional uint32 game_type = 3;
  if (has_game_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_type(), target);
  }

  // optional uint32 roomid = 4;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->roomid(), target);
  }

  // optional int64 win_score = 5;
  if (has_win_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->win_score(), target);
  }

  // optional int64 ex_win_score = 6;
  if (has_ex_win_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->ex_win_score(), target);
  }

  // optional int64 bet_score = 7;
  if (has_bet_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->bet_score(), target);
  }

  // optional int32 branker = 8;
  if (has_branker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->branker(), target);
  }

  // optional int32 welcount = 9;
  if (has_welcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->welcount(), target);
  }

  // optional uint64 weltime = 10;
  if (has_weltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->weltime(), target);
  }

  // optional .net.land_game_result land = 11;
  if (has_land()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->land(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_report_game_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 consume = 2;
    if (has_consume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consume());
    }

    // optional uint32 game_type = 3;
    if (has_game_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_type());
    }

    // optional uint32 roomid = 4;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roomid());
    }

    // optional int64 win_score = 5;
    if (has_win_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->win_score());
    }

    // optional int64 ex_win_score = 6;
    if (has_ex_win_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ex_win_score());
    }

    // optional int64 bet_score = 7;
    if (has_bet_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bet_score());
    }

    // optional int32 branker = 8;
    if (has_branker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->branker());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 welcount = 9;
    if (has_welcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->welcount());
    }

    // optional uint64 weltime = 10;
    if (has_weltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->weltime());
    }

    // optional .net.land_game_result land = 11;
    if (has_land()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->land());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_report_game_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_report_game_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_report_game_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_report_game_result::MergeFrom(const msg_report_game_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_consume()) {
      set_consume(from.consume());
    }
    if (from.has_game_type()) {
      set_game_type(from.game_type());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_win_score()) {
      set_win_score(from.win_score());
    }
    if (from.has_ex_win_score()) {
      set_ex_win_score(from.ex_win_score());
    }
    if (from.has_bet_score()) {
      set_bet_score(from.bet_score());
    }
    if (from.has_branker()) {
      set_branker(from.branker());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_welcount()) {
      set_welcount(from.welcount());
    }
    if (from.has_weltime()) {
      set_weltime(from.weltime());
    }
    if (from.has_land()) {
      mutable_land()->::net::land_game_result::MergeFrom(from.land());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_report_game_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_report_game_result::CopyFrom(const msg_report_game_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_report_game_result::IsInitialized() const {

  return true;
}

void msg_report_game_result::Swap(msg_report_game_result* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(consume_, other->consume_);
    std::swap(game_type_, other->game_type_);
    std::swap(roomid_, other->roomid_);
    std::swap(win_score_, other->win_score_);
    std::swap(ex_win_score_, other->ex_win_score_);
    std::swap(bet_score_, other->bet_score_);
    std::swap(branker_, other->branker_);
    std::swap(welcount_, other->welcount_);
    std::swap(weltime_, other->weltime_);
    std::swap(land_, other->land_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_report_game_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_report_game_result_descriptor_;
  metadata.reflection = msg_report_game_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_report_fee_log::kUidFieldNumber;
const int msg_report_fee_log::kFeeWinFieldNumber;
const int msg_report_fee_log::kFeeLoseFieldNumber;
#endif  // !_MSC_VER

msg_report_fee_log::msg_report_fee_log()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_report_fee_log::InitAsDefaultInstance() {
}

msg_report_fee_log::msg_report_fee_log(const msg_report_fee_log& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_report_fee_log::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  fee_win_ = GOOGLE_LONGLONG(0);
  fee_lose_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_report_fee_log::~msg_report_fee_log() {
  SharedDtor();
}

void msg_report_fee_log::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_report_fee_log::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_report_fee_log::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_report_fee_log_descriptor_;
}

const msg_report_fee_log& msg_report_fee_log::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_report_fee_log* msg_report_fee_log::default_instance_ = NULL;

msg_report_fee_log* msg_report_fee_log::New() const {
  return new msg_report_fee_log;
}

void msg_report_fee_log::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    fee_win_ = GOOGLE_LONGLONG(0);
    fee_lose_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_report_fee_log::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fee_win;
        break;
      }

      // optional int64 fee_win = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fee_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fee_win_)));
          set_has_fee_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fee_lose;
        break;
      }

      // optional int64 fee_lose = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fee_lose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fee_lose_)));
          set_has_fee_lose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_report_fee_log::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional int64 fee_win = 2;
  if (has_fee_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->fee_win(), output);
  }

  // optional int64 fee_lose = 3;
  if (has_fee_lose()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->fee_lose(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_report_fee_log::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional int64 fee_win = 2;
  if (has_fee_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->fee_win(), target);
  }

  // optional int64 fee_lose = 3;
  if (has_fee_lose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->fee_lose(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_report_fee_log::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional int64 fee_win = 2;
    if (has_fee_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fee_win());
    }

    // optional int64 fee_lose = 3;
    if (has_fee_lose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fee_lose());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_report_fee_log::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_report_fee_log* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_report_fee_log*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_report_fee_log::MergeFrom(const msg_report_fee_log& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_fee_win()) {
      set_fee_win(from.fee_win());
    }
    if (from.has_fee_lose()) {
      set_fee_lose(from.fee_lose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_report_fee_log::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_report_fee_log::CopyFrom(const msg_report_fee_log& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_report_fee_log::IsInitialized() const {

  return true;
}

void msg_report_fee_log::Swap(msg_report_fee_log* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(fee_win_, other->fee_win_);
    std::swap(fee_lose_, other->fee_lose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_report_fee_log::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_report_fee_log_descriptor_;
  metadata.reflection = msg_report_fee_log_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_leave_robot::kUidFieldNumber;
#endif  // !_MSC_VER

msg_leave_robot::msg_leave_robot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_leave_robot::InitAsDefaultInstance() {
}

msg_leave_robot::msg_leave_robot(const msg_leave_robot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_leave_robot::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_leave_robot::~msg_leave_robot() {
  SharedDtor();
}

void msg_leave_robot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_leave_robot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_leave_robot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_leave_robot_descriptor_;
}

const msg_leave_robot& msg_leave_robot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_leave_robot* msg_leave_robot::default_instance_ = NULL;

msg_leave_robot* msg_leave_robot::New() const {
  return new msg_leave_robot;
}

void msg_leave_robot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_leave_robot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_leave_robot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_leave_robot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_leave_robot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_leave_robot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_leave_robot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_leave_robot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_leave_robot::MergeFrom(const msg_leave_robot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_leave_robot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_leave_robot::CopyFrom(const msg_leave_robot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_leave_robot::IsInitialized() const {

  return true;
}

void msg_leave_robot::Swap(msg_leave_robot* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_leave_robot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_leave_robot_descriptor_;
  metadata.reflection = msg_leave_robot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_flush_change_account_data::kUidFieldNumber;
const int msg_flush_change_account_data::kDiamondFieldNumber;
const int msg_flush_change_account_data::kCoinFieldNumber;
const int msg_flush_change_account_data::kScoreFieldNumber;
const int msg_flush_change_account_data::kIngotFieldNumber;
const int msg_flush_change_account_data::kCvalueFieldNumber;
const int msg_flush_change_account_data::kSafeCoinFieldNumber;
#endif  // !_MSC_VER

msg_flush_change_account_data::msg_flush_change_account_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_flush_change_account_data::InitAsDefaultInstance() {
}

msg_flush_change_account_data::msg_flush_change_account_data(const msg_flush_change_account_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_flush_change_account_data::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  diamond_ = GOOGLE_LONGLONG(0);
  coin_ = GOOGLE_LONGLONG(0);
  score_ = GOOGLE_LONGLONG(0);
  ingot_ = GOOGLE_LONGLONG(0);
  cvalue_ = GOOGLE_LONGLONG(0);
  safe_coin_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_flush_change_account_data::~msg_flush_change_account_data() {
  SharedDtor();
}

void msg_flush_change_account_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_flush_change_account_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_flush_change_account_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_flush_change_account_data_descriptor_;
}

const msg_flush_change_account_data& msg_flush_change_account_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_flush_change_account_data* msg_flush_change_account_data::default_instance_ = NULL;

msg_flush_change_account_data* msg_flush_change_account_data::New() const {
  return new msg_flush_change_account_data;
}

void msg_flush_change_account_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    diamond_ = GOOGLE_LONGLONG(0);
    coin_ = GOOGLE_LONGLONG(0);
    score_ = GOOGLE_LONGLONG(0);
    ingot_ = GOOGLE_LONGLONG(0);
    cvalue_ = GOOGLE_LONGLONG(0);
    safe_coin_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_flush_change_account_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_diamond;
        break;
      }

      // optional int64 diamond = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_coin;
        break;
      }

      // optional int64 coin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }

      // optional int64 score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ingot;
        break;
      }

      // optional int64 ingot = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ingot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ingot_)));
          set_has_ingot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cvalue;
        break;
      }

      // optional int64 cvalue = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cvalue_)));
          set_has_cvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_safe_coin;
        break;
      }

      // optional int64 safe_coin = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_safe_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &safe_coin_)));
          set_has_safe_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_flush_change_account_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional int64 diamond = 2;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->diamond(), output);
  }

  // optional int64 coin = 3;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->coin(), output);
  }

  // optional int64 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->score(), output);
  }

  // optional int64 ingot = 5;
  if (has_ingot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->ingot(), output);
  }

  // optional int64 cvalue = 6;
  if (has_cvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->cvalue(), output);
  }

  // optional int64 safe_coin = 7;
  if (has_safe_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->safe_coin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_flush_change_account_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional int64 diamond = 2;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->diamond(), target);
  }

  // optional int64 coin = 3;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->coin(), target);
  }

  // optional int64 score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->score(), target);
  }

  // optional int64 ingot = 5;
  if (has_ingot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->ingot(), target);
  }

  // optional int64 cvalue = 6;
  if (has_cvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->cvalue(), target);
  }

  // optional int64 safe_coin = 7;
  if (has_safe_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->safe_coin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_flush_change_account_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional int64 diamond = 2;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->diamond());
    }

    // optional int64 coin = 3;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->coin());
    }

    // optional int64 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->score());
    }

    // optional int64 ingot = 5;
    if (has_ingot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ingot());
    }

    // optional int64 cvalue = 6;
    if (has_cvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cvalue());
    }

    // optional int64 safe_coin = 7;
    if (has_safe_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->safe_coin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_flush_change_account_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_flush_change_account_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_flush_change_account_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_flush_change_account_data::MergeFrom(const msg_flush_change_account_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_ingot()) {
      set_ingot(from.ingot());
    }
    if (from.has_cvalue()) {
      set_cvalue(from.cvalue());
    }
    if (from.has_safe_coin()) {
      set_safe_coin(from.safe_coin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_flush_change_account_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_flush_change_account_data::CopyFrom(const msg_flush_change_account_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_flush_change_account_data::IsInitialized() const {

  return true;
}

void msg_flush_change_account_data::Swap(msg_flush_change_account_data* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(diamond_, other->diamond_);
    std::swap(coin_, other->coin_);
    std::swap(score_, other->score_);
    std::swap(ingot_, other->ingot_);
    std::swap(cvalue_, other->cvalue_);
    std::swap(safe_coin_, other->safe_coin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_flush_change_account_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_flush_change_account_data_descriptor_;
  metadata.reflection = msg_flush_change_account_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_update_change_account_data::kUidFieldNumber;
const int msg_update_change_account_data::kDiamondFieldNumber;
const int msg_update_change_account_data::kCoinFieldNumber;
const int msg_update_change_account_data::kScoreFieldNumber;
const int msg_update_change_account_data::kIngotFieldNumber;
const int msg_update_change_account_data::kCvalueFieldNumber;
const int msg_update_change_account_data::kSafeCoinFieldNumber;
const int msg_update_change_account_data::kOperTypeFieldNumber;
const int msg_update_change_account_data::kSubTypeFieldNumber;
#endif  // !_MSC_VER

msg_update_change_account_data::msg_update_change_account_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_update_change_account_data::InitAsDefaultInstance() {
}

msg_update_change_account_data::msg_update_change_account_data(const msg_update_change_account_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_update_change_account_data::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  diamond_ = GOOGLE_LONGLONG(0);
  coin_ = GOOGLE_LONGLONG(0);
  score_ = GOOGLE_LONGLONG(0);
  ingot_ = GOOGLE_LONGLONG(0);
  cvalue_ = GOOGLE_LONGLONG(0);
  safe_coin_ = GOOGLE_LONGLONG(0);
  oper_type_ = 0u;
  sub_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_update_change_account_data::~msg_update_change_account_data() {
  SharedDtor();
}

void msg_update_change_account_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_update_change_account_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_update_change_account_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_update_change_account_data_descriptor_;
}

const msg_update_change_account_data& msg_update_change_account_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_update_change_account_data* msg_update_change_account_data::default_instance_ = NULL;

msg_update_change_account_data* msg_update_change_account_data::New() const {
  return new msg_update_change_account_data;
}

void msg_update_change_account_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    diamond_ = GOOGLE_LONGLONG(0);
    coin_ = GOOGLE_LONGLONG(0);
    score_ = GOOGLE_LONGLONG(0);
    ingot_ = GOOGLE_LONGLONG(0);
    cvalue_ = GOOGLE_LONGLONG(0);
    safe_coin_ = GOOGLE_LONGLONG(0);
    oper_type_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    sub_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_update_change_account_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_diamond;
        break;
      }

      // optional int64 diamond = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_coin;
        break;
      }

      // optional int64 coin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }

      // optional int64 score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ingot;
        break;
      }

      // optional int64 ingot = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ingot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ingot_)));
          set_has_ingot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cvalue;
        break;
      }

      // optional int64 cvalue = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cvalue_)));
          set_has_cvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_safe_coin;
        break;
      }

      // optional int64 safe_coin = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_safe_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &safe_coin_)));
          set_has_safe_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_oper_type;
        break;
      }

      // optional uint32 oper_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oper_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oper_type_)));
          set_has_oper_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_sub_type;
        break;
      }

      // optional uint32 sub_type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sub_type_)));
          set_has_sub_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_update_change_account_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional int64 diamond = 2;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->diamond(), output);
  }

  // optional int64 coin = 3;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->coin(), output);
  }

  // optional int64 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->score(), output);
  }

  // optional int64 ingot = 5;
  if (has_ingot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->ingot(), output);
  }

  // optional int64 cvalue = 6;
  if (has_cvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->cvalue(), output);
  }

  // optional int64 safe_coin = 7;
  if (has_safe_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->safe_coin(), output);
  }

  // optional uint32 oper_type = 8;
  if (has_oper_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->oper_type(), output);
  }

  // optional uint32 sub_type = 9;
  if (has_sub_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->sub_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_update_change_account_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional int64 diamond = 2;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->diamond(), target);
  }

  // optional int64 coin = 3;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->coin(), target);
  }

  // optional int64 score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->score(), target);
  }

  // optional int64 ingot = 5;
  if (has_ingot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->ingot(), target);
  }

  // optional int64 cvalue = 6;
  if (has_cvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->cvalue(), target);
  }

  // optional int64 safe_coin = 7;
  if (has_safe_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->safe_coin(), target);
  }

  // optional uint32 oper_type = 8;
  if (has_oper_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->oper_type(), target);
  }

  // optional uint32 sub_type = 9;
  if (has_sub_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->sub_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_update_change_account_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional int64 diamond = 2;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->diamond());
    }

    // optional int64 coin = 3;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->coin());
    }

    // optional int64 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->score());
    }

    // optional int64 ingot = 5;
    if (has_ingot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ingot());
    }

    // optional int64 cvalue = 6;
    if (has_cvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cvalue());
    }

    // optional int64 safe_coin = 7;
    if (has_safe_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->safe_coin());
    }

    // optional uint32 oper_type = 8;
    if (has_oper_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oper_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 sub_type = 9;
    if (has_sub_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sub_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_update_change_account_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_update_change_account_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_update_change_account_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_update_change_account_data::MergeFrom(const msg_update_change_account_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_ingot()) {
      set_ingot(from.ingot());
    }
    if (from.has_cvalue()) {
      set_cvalue(from.cvalue());
    }
    if (from.has_safe_coin()) {
      set_safe_coin(from.safe_coin());
    }
    if (from.has_oper_type()) {
      set_oper_type(from.oper_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sub_type()) {
      set_sub_type(from.sub_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_update_change_account_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_update_change_account_data::CopyFrom(const msg_update_change_account_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_update_change_account_data::IsInitialized() const {

  return true;
}

void msg_update_change_account_data::Swap(msg_update_change_account_data* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(diamond_, other->diamond_);
    std::swap(coin_, other->coin_);
    std::swap(score_, other->score_);
    std::swap(ingot_, other->ingot_);
    std::swap(cvalue_, other->cvalue_);
    std::swap(safe_coin_, other->safe_coin_);
    std::swap(oper_type_, other->oper_type_);
    std::swap(sub_type_, other->sub_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_update_change_account_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_update_change_account_data_descriptor_;
  metadata.reflection = msg_update_change_account_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_change_room_param::kGametypeFieldNumber;
const int msg_change_room_param::kRoomidFieldNumber;
const int msg_change_room_param::kParamFieldNumber;
#endif  // !_MSC_VER

msg_change_room_param::msg_change_room_param()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_change_room_param::InitAsDefaultInstance() {
}

msg_change_room_param::msg_change_room_param(const msg_change_room_param& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_change_room_param::SharedCtor() {
  _cached_size_ = 0;
  gametype_ = 0u;
  roomid_ = 0u;
  param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_change_room_param::~msg_change_room_param() {
  SharedDtor();
}

void msg_change_room_param::SharedDtor() {
  if (param_ != &::google::protobuf::internal::kEmptyString) {
    delete param_;
  }
  if (this != default_instance_) {
  }
}

void msg_change_room_param::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_change_room_param::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_change_room_param_descriptor_;
}

const msg_change_room_param& msg_change_room_param::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_change_room_param* msg_change_room_param::default_instance_ = NULL;

msg_change_room_param* msg_change_room_param::New() const {
  return new msg_change_room_param;
}

void msg_change_room_param::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gametype_ = 0u;
    roomid_ = 0u;
    if (has_param()) {
      if (param_ != &::google::protobuf::internal::kEmptyString) {
        param_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_change_room_param::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gametype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gametype_)));
          set_has_gametype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // optional uint32 roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_param;
        break;
      }

      // optional bytes param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_change_room_param::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 gametype = 1;
  if (has_gametype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gametype(), output);
  }

  // optional uint32 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->roomid(), output);
  }

  // optional bytes param = 3;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_change_room_param::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 gametype = 1;
  if (has_gametype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gametype(), target);
  }

  // optional uint32 roomid = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->roomid(), target);
  }

  // optional bytes param = 3;
  if (has_param()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_change_room_param::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gametype = 1;
    if (has_gametype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gametype());
    }

    // optional uint32 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roomid());
    }

    // optional bytes param = 3;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_change_room_param::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_change_room_param* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_change_room_param*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_change_room_param::MergeFrom(const msg_change_room_param& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gametype()) {
      set_gametype(from.gametype());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_change_room_param::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_change_room_param::CopyFrom(const msg_change_room_param& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_change_room_param::IsInitialized() const {

  return true;
}

void msg_change_room_param::Swap(msg_change_room_param* other) {
  if (other != this) {
    std::swap(gametype_, other->gametype_);
    std::swap(roomid_, other->roomid_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_change_room_param::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_change_room_param_descriptor_;
  metadata.reflection = msg_change_room_param_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_contorl_player::kGametypeFieldNumber;
const int msg_contorl_player::kRoomidFieldNumber;
const int msg_contorl_player::kUidFieldNumber;
const int msg_contorl_player::kOperatetypeFieldNumber;
const int msg_contorl_player::kGamecountFieldNumber;
const int msg_contorl_player::kIdFieldNumber;
#endif  // !_MSC_VER

msg_contorl_player::msg_contorl_player()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_contorl_player::InitAsDefaultInstance() {
}

msg_contorl_player::msg_contorl_player(const msg_contorl_player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_contorl_player::SharedCtor() {
  _cached_size_ = 0;
  gametype_ = 0u;
  roomid_ = 0u;
  uid_ = 0u;
  operatetype_ = 0u;
  gamecount_ = 0u;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_contorl_player::~msg_contorl_player() {
  SharedDtor();
}

void msg_contorl_player::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_contorl_player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_contorl_player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_contorl_player_descriptor_;
}

const msg_contorl_player& msg_contorl_player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_contorl_player* msg_contorl_player::default_instance_ = NULL;

msg_contorl_player* msg_contorl_player::New() const {
  return new msg_contorl_player;
}

void msg_contorl_player::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gametype_ = 0u;
    roomid_ = 0u;
    uid_ = 0u;
    operatetype_ = 0u;
    gamecount_ = 0u;
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_contorl_player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gametype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gametype_)));
          set_has_gametype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // optional uint32 roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uid;
        break;
      }

      // optional uint32 uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_operatetype;
        break;
      }

      // optional uint32 operatetype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operatetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operatetype_)));
          set_has_operatetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gamecount;
        break;
      }

      // optional uint32 gamecount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gamecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gamecount_)));
          set_has_gamecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_id;
        break;
      }

      // optional int64 id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_contorl_player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 gametype = 1;
  if (has_gametype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gametype(), output);
  }

  // optional uint32 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->roomid(), output);
  }

  // optional uint32 uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uid(), output);
  }

  // optional uint32 operatetype = 4;
  if (has_operatetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->operatetype(), output);
  }

  // optional uint32 gamecount = 5;
  if (has_gamecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->gamecount(), output);
  }

  // optional int64 id = 6;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_contorl_player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 gametype = 1;
  if (has_gametype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gametype(), target);
  }

  // optional uint32 roomid = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->roomid(), target);
  }

  // optional uint32 uid = 3;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uid(), target);
  }

  // optional uint32 operatetype = 4;
  if (has_operatetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->operatetype(), target);
  }

  // optional uint32 gamecount = 5;
  if (has_gamecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->gamecount(), target);
  }

  // optional int64 id = 6;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_contorl_player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gametype = 1;
    if (has_gametype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gametype());
    }

    // optional uint32 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roomid());
    }

    // optional uint32 uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 operatetype = 4;
    if (has_operatetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operatetype());
    }

    // optional uint32 gamecount = 5;
    if (has_gamecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gamecount());
    }

    // optional int64 id = 6;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_contorl_player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_contorl_player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_contorl_player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_contorl_player::MergeFrom(const msg_contorl_player& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gametype()) {
      set_gametype(from.gametype());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_operatetype()) {
      set_operatetype(from.operatetype());
    }
    if (from.has_gamecount()) {
      set_gamecount(from.gamecount());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_contorl_player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_contorl_player::CopyFrom(const msg_contorl_player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_contorl_player::IsInitialized() const {

  return true;
}

void msg_contorl_player::Swap(msg_contorl_player* other) {
  if (other != this) {
    std::swap(gametype_, other->gametype_);
    std::swap(roomid_, other->roomid_);
    std::swap(uid_, other->uid_);
    std::swap(operatetype_, other->operatetype_);
    std::swap(gamecount_, other->gamecount_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_contorl_player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_contorl_player_descriptor_;
  metadata.reflection = msg_contorl_player_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_contorl_multi_player::kGametypeFieldNumber;
const int msg_contorl_multi_player::kRoomidFieldNumber;
const int msg_contorl_multi_player::kUidFieldNumber;
const int msg_contorl_multi_player::kOperatetypeFieldNumber;
const int msg_contorl_multi_player::kGamecountFieldNumber;
const int msg_contorl_multi_player::kGametimeFieldNumber;
const int msg_contorl_multi_player::kTotalscoreFieldNumber;
const int msg_contorl_multi_player::kIdFieldNumber;
#endif  // !_MSC_VER

msg_contorl_multi_player::msg_contorl_multi_player()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_contorl_multi_player::InitAsDefaultInstance() {
}

msg_contorl_multi_player::msg_contorl_multi_player(const msg_contorl_multi_player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_contorl_multi_player::SharedCtor() {
  _cached_size_ = 0;
  gametype_ = 0u;
  roomid_ = 0u;
  uid_ = 0u;
  operatetype_ = 0u;
  gamecount_ = 0u;
  gametime_ = GOOGLE_ULONGLONG(0);
  totalscore_ = GOOGLE_LONGLONG(0);
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_contorl_multi_player::~msg_contorl_multi_player() {
  SharedDtor();
}

void msg_contorl_multi_player::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_contorl_multi_player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_contorl_multi_player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_contorl_multi_player_descriptor_;
}

const msg_contorl_multi_player& msg_contorl_multi_player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_contorl_multi_player* msg_contorl_multi_player::default_instance_ = NULL;

msg_contorl_multi_player* msg_contorl_multi_player::New() const {
  return new msg_contorl_multi_player;
}

void msg_contorl_multi_player::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gametype_ = 0u;
    roomid_ = 0u;
    uid_ = 0u;
    operatetype_ = 0u;
    gamecount_ = 0u;
    gametime_ = GOOGLE_ULONGLONG(0);
    totalscore_ = GOOGLE_LONGLONG(0);
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_contorl_multi_player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gametype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gametype_)));
          set_has_gametype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // optional uint32 roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uid;
        break;
      }

      // optional uint32 uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_operatetype;
        break;
      }

      // optional uint32 operatetype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operatetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operatetype_)));
          set_has_operatetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gamecount;
        break;
      }

      // optional uint32 gamecount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gamecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gamecount_)));
          set_has_gamecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gametime;
        break;
      }

      // optional uint64 gametime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gametime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gametime_)));
          set_has_gametime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_totalscore;
        break;
      }

      // optional int64 totalscore = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalscore_)));
          set_has_totalscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_id;
        break;
      }

      // optional int64 id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_contorl_multi_player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 gametype = 1;
  if (has_gametype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gametype(), output);
  }

  // optional uint32 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->roomid(), output);
  }

  // optional uint32 uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uid(), output);
  }

  // optional uint32 operatetype = 4;
  if (has_operatetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->operatetype(), output);
  }

  // optional uint32 gamecount = 5;
  if (has_gamecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->gamecount(), output);
  }

  // optional uint64 gametime = 6;
  if (has_gametime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->gametime(), output);
  }

  // optional int64 totalscore = 7;
  if (has_totalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->totalscore(), output);
  }

  // optional int64 id = 8;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_contorl_multi_player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 gametype = 1;
  if (has_gametype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gametype(), target);
  }

  // optional uint32 roomid = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->roomid(), target);
  }

  // optional uint32 uid = 3;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uid(), target);
  }

  // optional uint32 operatetype = 4;
  if (has_operatetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->operatetype(), target);
  }

  // optional uint32 gamecount = 5;
  if (has_gamecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->gamecount(), target);
  }

  // optional uint64 gametime = 6;
  if (has_gametime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->gametime(), target);
  }

  // optional int64 totalscore = 7;
  if (has_totalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->totalscore(), target);
  }

  // optional int64 id = 8;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_contorl_multi_player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gametype = 1;
    if (has_gametype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gametype());
    }

    // optional uint32 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roomid());
    }

    // optional uint32 uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 operatetype = 4;
    if (has_operatetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operatetype());
    }

    // optional uint32 gamecount = 5;
    if (has_gamecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gamecount());
    }

    // optional uint64 gametime = 6;
    if (has_gametime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gametime());
    }

    // optional int64 totalscore = 7;
    if (has_totalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->totalscore());
    }

    // optional int64 id = 8;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_contorl_multi_player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_contorl_multi_player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_contorl_multi_player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_contorl_multi_player::MergeFrom(const msg_contorl_multi_player& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gametype()) {
      set_gametype(from.gametype());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_operatetype()) {
      set_operatetype(from.operatetype());
    }
    if (from.has_gamecount()) {
      set_gamecount(from.gamecount());
    }
    if (from.has_gametime()) {
      set_gametime(from.gametime());
    }
    if (from.has_totalscore()) {
      set_totalscore(from.totalscore());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_contorl_multi_player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_contorl_multi_player::CopyFrom(const msg_contorl_multi_player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_contorl_multi_player::IsInitialized() const {

  return true;
}

void msg_contorl_multi_player::Swap(msg_contorl_multi_player* other) {
  if (other != this) {
    std::swap(gametype_, other->gametype_);
    std::swap(roomid_, other->roomid_);
    std::swap(uid_, other->uid_);
    std::swap(operatetype_, other->operatetype_);
    std::swap(gamecount_, other->gamecount_);
    std::swap(gametime_, other->gametime_);
    std::swap(totalscore_, other->totalscore_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_contorl_multi_player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_contorl_multi_player_descriptor_;
  metadata.reflection = msg_contorl_multi_player_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_dice_control_req::kGametypeFieldNumber;
const int msg_dice_control_req::kRoomidFieldNumber;
const int msg_dice_control_req::kDiceFieldNumber;
#endif  // !_MSC_VER

msg_dice_control_req::msg_dice_control_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_dice_control_req::InitAsDefaultInstance() {
  dice_ = const_cast< ::net::dice_control_req*>(&::net::dice_control_req::default_instance());
}

msg_dice_control_req::msg_dice_control_req(const msg_dice_control_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_dice_control_req::SharedCtor() {
  _cached_size_ = 0;
  gametype_ = 0u;
  roomid_ = 0u;
  dice_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_dice_control_req::~msg_dice_control_req() {
  SharedDtor();
}

void msg_dice_control_req::SharedDtor() {
  if (this != default_instance_) {
    delete dice_;
  }
}

void msg_dice_control_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_dice_control_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_dice_control_req_descriptor_;
}

const msg_dice_control_req& msg_dice_control_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_dice_control_req* msg_dice_control_req::default_instance_ = NULL;

msg_dice_control_req* msg_dice_control_req::New() const {
  return new msg_dice_control_req;
}

void msg_dice_control_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gametype_ = 0u;
    roomid_ = 0u;
    if (has_dice()) {
      if (dice_ != NULL) dice_->::net::dice_control_req::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_dice_control_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gametype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gametype_)));
          set_has_gametype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // optional uint32 roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dice;
        break;
      }

      // optional .net.dice_control_req dice = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_dice_control_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 gametype = 1;
  if (has_gametype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gametype(), output);
  }

  // optional uint32 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->roomid(), output);
  }

  // optional .net.dice_control_req dice = 3;
  if (has_dice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_dice_control_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 gametype = 1;
  if (has_gametype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gametype(), target);
  }

  // optional uint32 roomid = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->roomid(), target);
  }

  // optional .net.dice_control_req dice = 3;
  if (has_dice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->dice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_dice_control_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gametype = 1;
    if (has_gametype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gametype());
    }

    // optional uint32 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roomid());
    }

    // optional .net.dice_control_req dice = 3;
    if (has_dice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_dice_control_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_dice_control_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_dice_control_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_dice_control_req::MergeFrom(const msg_dice_control_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gametype()) {
      set_gametype(from.gametype());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_dice()) {
      mutable_dice()->::net::dice_control_req::MergeFrom(from.dice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_dice_control_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_dice_control_req::CopyFrom(const msg_dice_control_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_dice_control_req::IsInitialized() const {

  return true;
}

void msg_dice_control_req::Swap(msg_dice_control_req* other) {
  if (other != this) {
    std::swap(gametype_, other->gametype_);
    std::swap(roomid_, other->roomid_);
    std::swap(dice_, other->dice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_dice_control_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_dice_control_req_descriptor_;
  metadata.reflection = msg_dice_control_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_majiang_config_hand_card::kGametypeFieldNumber;
const int msg_majiang_config_hand_card::kRoomidFieldNumber;
const int msg_majiang_config_hand_card::kHandCardFieldNumber;
#endif  // !_MSC_VER

msg_majiang_config_hand_card::msg_majiang_config_hand_card()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_majiang_config_hand_card::InitAsDefaultInstance() {
}

msg_majiang_config_hand_card::msg_majiang_config_hand_card(const msg_majiang_config_hand_card& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_majiang_config_hand_card::SharedCtor() {
  _cached_size_ = 0;
  gametype_ = 0u;
  roomid_ = 0u;
  hand_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_majiang_config_hand_card::~msg_majiang_config_hand_card() {
  SharedDtor();
}

void msg_majiang_config_hand_card::SharedDtor() {
  if (hand_card_ != &::google::protobuf::internal::kEmptyString) {
    delete hand_card_;
  }
  if (this != default_instance_) {
  }
}

void msg_majiang_config_hand_card::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_majiang_config_hand_card::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_majiang_config_hand_card_descriptor_;
}

const msg_majiang_config_hand_card& msg_majiang_config_hand_card::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_majiang_config_hand_card* msg_majiang_config_hand_card::default_instance_ = NULL;

msg_majiang_config_hand_card* msg_majiang_config_hand_card::New() const {
  return new msg_majiang_config_hand_card;
}

void msg_majiang_config_hand_card::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gametype_ = 0u;
    roomid_ = 0u;
    if (has_hand_card()) {
      if (hand_card_ != &::google::protobuf::internal::kEmptyString) {
        hand_card_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_majiang_config_hand_card::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gametype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gametype_)));
          set_has_gametype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // optional uint32 roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hand_card;
        break;
      }

      // optional bytes hand_card = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hand_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hand_card()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_majiang_config_hand_card::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 gametype = 1;
  if (has_gametype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gametype(), output);
  }

  // optional uint32 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->roomid(), output);
  }

  // optional bytes hand_card = 3;
  if (has_hand_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->hand_card(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_majiang_config_hand_card::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 gametype = 1;
  if (has_gametype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gametype(), target);
  }

  // optional uint32 roomid = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->roomid(), target);
  }

  // optional bytes hand_card = 3;
  if (has_hand_card()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->hand_card(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_majiang_config_hand_card::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gametype = 1;
    if (has_gametype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gametype());
    }

    // optional uint32 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roomid());
    }

    // optional bytes hand_card = 3;
    if (has_hand_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hand_card());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_majiang_config_hand_card::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_majiang_config_hand_card* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_majiang_config_hand_card*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_majiang_config_hand_card::MergeFrom(const msg_majiang_config_hand_card& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gametype()) {
      set_gametype(from.gametype());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_hand_card()) {
      set_hand_card(from.hand_card());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_majiang_config_hand_card::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_majiang_config_hand_card::CopyFrom(const msg_majiang_config_hand_card& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_majiang_config_hand_card::IsInitialized() const {

  return true;
}

void msg_majiang_config_hand_card::Swap(msg_majiang_config_hand_card* other) {
  if (other != this) {
    std::swap(gametype_, other->gametype_);
    std::swap(roomid_, other->roomid_);
    std::swap(hand_card_, other->hand_card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_majiang_config_hand_card::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_majiang_config_hand_card_descriptor_;
  metadata.reflection = msg_majiang_config_hand_card_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_update_server_room_robot::kGametypeFieldNumber;
const int msg_update_server_room_robot::kRoomidFieldNumber;
const int msg_update_server_room_robot::kRobotFieldNumber;
#endif  // !_MSC_VER

msg_update_server_room_robot::msg_update_server_room_robot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_update_server_room_robot::InitAsDefaultInstance() {
}

msg_update_server_room_robot::msg_update_server_room_robot(const msg_update_server_room_robot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_update_server_room_robot::SharedCtor() {
  _cached_size_ = 0;
  gametype_ = 0u;
  roomid_ = 0u;
  robot_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_update_server_room_robot::~msg_update_server_room_robot() {
  SharedDtor();
}

void msg_update_server_room_robot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_update_server_room_robot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_update_server_room_robot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_update_server_room_robot_descriptor_;
}

const msg_update_server_room_robot& msg_update_server_room_robot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_update_server_room_robot* msg_update_server_room_robot::default_instance_ = NULL;

msg_update_server_room_robot* msg_update_server_room_robot::New() const {
  return new msg_update_server_room_robot;
}

void msg_update_server_room_robot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gametype_ = 0u;
    roomid_ = 0u;
    robot_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_update_server_room_robot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gametype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gametype_)));
          set_has_gametype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // optional uint32 roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_robot;
        break;
      }

      // optional uint32 robot = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &robot_)));
          set_has_robot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_update_server_room_robot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 gametype = 1;
  if (has_gametype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gametype(), output);
  }

  // optional uint32 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->roomid(), output);
  }

  // optional uint32 robot = 3;
  if (has_robot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->robot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_update_server_room_robot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 gametype = 1;
  if (has_gametype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gametype(), target);
  }

  // optional uint32 roomid = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->roomid(), target);
  }

  // optional uint32 robot = 3;
  if (has_robot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->robot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_update_server_room_robot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gametype = 1;
    if (has_gametype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gametype());
    }

    // optional uint32 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roomid());
    }

    // optional uint32 robot = 3;
    if (has_robot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->robot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_update_server_room_robot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_update_server_room_robot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_update_server_room_robot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_update_server_room_robot::MergeFrom(const msg_update_server_room_robot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gametype()) {
      set_gametype(from.gametype());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_robot()) {
      set_robot(from.robot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_update_server_room_robot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_update_server_room_robot::CopyFrom(const msg_update_server_room_robot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_update_server_room_robot::IsInitialized() const {

  return true;
}

void msg_update_server_room_robot::Swap(msg_update_server_room_robot* other) {
  if (other != this) {
    std::swap(gametype_, other->gametype_);
    std::swap(roomid_, other->roomid_);
    std::swap(robot_, other->robot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_update_server_room_robot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_update_server_room_robot_descriptor_;
  metadata.reflection = msg_update_server_room_robot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_reload_robot_online_cfg::kOptypeFieldNumber;
const int msg_reload_robot_online_cfg::kGametypeFieldNumber;
const int msg_reload_robot_online_cfg::kRoomidFieldNumber;
const int msg_reload_robot_online_cfg::kLeveltypeFieldNumber;
const int msg_reload_robot_online_cfg::kBatchidFieldNumber;
const int msg_reload_robot_online_cfg::kLogintypeFieldNumber;
const int msg_reload_robot_online_cfg::kEntertimerFieldNumber;
const int msg_reload_robot_online_cfg::kLeavetimerFieldNumber;
const int msg_reload_robot_online_cfg::kOnlineFieldNumber;
#endif  // !_MSC_VER

msg_reload_robot_online_cfg::msg_reload_robot_online_cfg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_reload_robot_online_cfg::InitAsDefaultInstance() {
}

msg_reload_robot_online_cfg::msg_reload_robot_online_cfg(const msg_reload_robot_online_cfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_reload_robot_online_cfg::SharedCtor() {
  _cached_size_ = 0;
  optype_ = 0u;
  gametype_ = 0u;
  roomid_ = 0u;
  leveltype_ = 0u;
  batchid_ = 0u;
  logintype_ = 0u;
  entertimer_ = 0u;
  leavetimer_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_reload_robot_online_cfg::~msg_reload_robot_online_cfg() {
  SharedDtor();
}

void msg_reload_robot_online_cfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_reload_robot_online_cfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_reload_robot_online_cfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_reload_robot_online_cfg_descriptor_;
}

const msg_reload_robot_online_cfg& msg_reload_robot_online_cfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_reload_robot_online_cfg* msg_reload_robot_online_cfg::default_instance_ = NULL;

msg_reload_robot_online_cfg* msg_reload_robot_online_cfg::New() const {
  return new msg_reload_robot_online_cfg;
}

void msg_reload_robot_online_cfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    optype_ = 0u;
    gametype_ = 0u;
    roomid_ = 0u;
    leveltype_ = 0u;
    batchid_ = 0u;
    logintype_ = 0u;
    entertimer_ = 0u;
    leavetimer_ = 0u;
  }
  online_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_reload_robot_online_cfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 optype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gametype;
        break;
      }

      // optional uint32 gametype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gametype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gametype_)));
          set_has_gametype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_roomid;
        break;
      }

      // optional uint32 roomid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_leveltype;
        break;
      }

      // optional uint32 leveltype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leveltype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leveltype_)));
          set_has_leveltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_batchid;
        break;
      }

      // optional uint32 batchid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_batchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batchid_)));
          set_has_batchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_logintype;
        break;
      }

      // optional uint32 logintype = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logintype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logintype_)));
          set_has_logintype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_entertimer;
        break;
      }

      // optional uint32 entertimer = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entertimer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entertimer_)));
          set_has_entertimer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_leavetimer;
        break;
      }

      // optional uint32 leavetimer = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leavetimer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leavetimer_)));
          set_has_leavetimer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_online;
        break;
      }

      // repeated uint32 online = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72, input, this->mutable_online())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_online())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_online;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_reload_robot_online_cfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 optype = 1;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->optype(), output);
  }

  // optional uint32 gametype = 2;
  if (has_gametype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gametype(), output);
  }

  // optional uint32 roomid = 3;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->roomid(), output);
  }

  // optional uint32 leveltype = 4;
  if (has_leveltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->leveltype(), output);
  }

  // optional uint32 batchid = 5;
  if (has_batchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->batchid(), output);
  }

  // optional uint32 logintype = 6;
  if (has_logintype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->logintype(), output);
  }

  // optional uint32 entertimer = 7;
  if (has_entertimer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->entertimer(), output);
  }

  // optional uint32 leavetimer = 8;
  if (has_leavetimer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->leavetimer(), output);
  }

  // repeated uint32 online = 9;
  for (int i = 0; i < this->online_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->online(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_reload_robot_online_cfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 optype = 1;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->optype(), target);
  }

  // optional uint32 gametype = 2;
  if (has_gametype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gametype(), target);
  }

  // optional uint32 roomid = 3;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->roomid(), target);
  }

  // optional uint32 leveltype = 4;
  if (has_leveltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->leveltype(), target);
  }

  // optional uint32 batchid = 5;
  if (has_batchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->batchid(), target);
  }

  // optional uint32 logintype = 6;
  if (has_logintype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->logintype(), target);
  }

  // optional uint32 entertimer = 7;
  if (has_entertimer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->entertimer(), target);
  }

  // optional uint32 leavetimer = 8;
  if (has_leavetimer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->leavetimer(), target);
  }

  // repeated uint32 online = 9;
  for (int i = 0; i < this->online_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(9, this->online(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_reload_robot_online_cfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 optype = 1;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->optype());
    }

    // optional uint32 gametype = 2;
    if (has_gametype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gametype());
    }

    // optional uint32 roomid = 3;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roomid());
    }

    // optional uint32 leveltype = 4;
    if (has_leveltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leveltype());
    }

    // optional uint32 batchid = 5;
    if (has_batchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batchid());
    }

    // optional uint32 logintype = 6;
    if (has_logintype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logintype());
    }

    // optional uint32 entertimer = 7;
    if (has_entertimer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entertimer());
    }

    // optional uint32 leavetimer = 8;
    if (has_leavetimer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leavetimer());
    }

  }
  // repeated uint32 online = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->online_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->online(i));
    }
    total_size += 1 * this->online_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_reload_robot_online_cfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_reload_robot_online_cfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_reload_robot_online_cfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_reload_robot_online_cfg::MergeFrom(const msg_reload_robot_online_cfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  online_.MergeFrom(from.online_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_optype()) {
      set_optype(from.optype());
    }
    if (from.has_gametype()) {
      set_gametype(from.gametype());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_leveltype()) {
      set_leveltype(from.leveltype());
    }
    if (from.has_batchid()) {
      set_batchid(from.batchid());
    }
    if (from.has_logintype()) {
      set_logintype(from.logintype());
    }
    if (from.has_entertimer()) {
      set_entertimer(from.entertimer());
    }
    if (from.has_leavetimer()) {
      set_leavetimer(from.leavetimer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_reload_robot_online_cfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_reload_robot_online_cfg::CopyFrom(const msg_reload_robot_online_cfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_reload_robot_online_cfg::IsInitialized() const {

  return true;
}

void msg_reload_robot_online_cfg::Swap(msg_reload_robot_online_cfg* other) {
  if (other != this) {
    std::swap(optype_, other->optype_);
    std::swap(gametype_, other->gametype_);
    std::swap(roomid_, other->roomid_);
    std::swap(leveltype_, other->leveltype_);
    std::swap(batchid_, other->batchid_);
    std::swap(logintype_, other->logintype_);
    std::swap(entertimer_, other->entertimer_);
    std::swap(leavetimer_, other->leavetimer_);
    online_.Swap(&other->online_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_reload_robot_online_cfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_reload_robot_online_cfg_descriptor_;
  metadata.reflection = msg_reload_robot_online_cfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_update_new_player_novice_welfare_right::kUidFieldNumber;
const int msg_update_new_player_novice_welfare_right::kUserrightFieldNumber;
const int msg_update_new_player_novice_welfare_right::kPosrmbFieldNumber;
const int msg_update_new_player_novice_welfare_right::kPostimeFieldNumber;
#endif  // !_MSC_VER

msg_update_new_player_novice_welfare_right::msg_update_new_player_novice_welfare_right()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_update_new_player_novice_welfare_right::InitAsDefaultInstance() {
}

msg_update_new_player_novice_welfare_right::msg_update_new_player_novice_welfare_right(const msg_update_new_player_novice_welfare_right& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_update_new_player_novice_welfare_right::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  userright_ = 0u;
  posrmb_ = 0u;
  postime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_update_new_player_novice_welfare_right::~msg_update_new_player_novice_welfare_right() {
  SharedDtor();
}

void msg_update_new_player_novice_welfare_right::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_update_new_player_novice_welfare_right::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_update_new_player_novice_welfare_right::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_update_new_player_novice_welfare_right_descriptor_;
}

const msg_update_new_player_novice_welfare_right& msg_update_new_player_novice_welfare_right::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_update_new_player_novice_welfare_right* msg_update_new_player_novice_welfare_right::default_instance_ = NULL;

msg_update_new_player_novice_welfare_right* msg_update_new_player_novice_welfare_right::New() const {
  return new msg_update_new_player_novice_welfare_right;
}

void msg_update_new_player_novice_welfare_right::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    userright_ = 0u;
    posrmb_ = 0u;
    postime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_update_new_player_novice_welfare_right::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userright;
        break;
      }

      // optional uint32 userright = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userright:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userright_)));
          set_has_userright();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_posrmb;
        break;
      }

      // optional uint32 posrmb = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posrmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &posrmb_)));
          set_has_posrmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_postime;
        break;
      }

      // optional uint64 postime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_postime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &postime_)));
          set_has_postime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_update_new_player_novice_welfare_right::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 userright = 2;
  if (has_userright()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->userright(), output);
  }

  // optional uint32 posrmb = 3;
  if (has_posrmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->posrmb(), output);
  }

  // optional uint64 postime = 4;
  if (has_postime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->postime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_update_new_player_novice_welfare_right::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional uint32 userright = 2;
  if (has_userright()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->userright(), target);
  }

  // optional uint32 posrmb = 3;
  if (has_posrmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->posrmb(), target);
  }

  // optional uint64 postime = 4;
  if (has_postime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->postime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_update_new_player_novice_welfare_right::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 userright = 2;
    if (has_userright()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userright());
    }

    // optional uint32 posrmb = 3;
    if (has_posrmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->posrmb());
    }

    // optional uint64 postime = 4;
    if (has_postime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->postime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_update_new_player_novice_welfare_right::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_update_new_player_novice_welfare_right* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_update_new_player_novice_welfare_right*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_update_new_player_novice_welfare_right::MergeFrom(const msg_update_new_player_novice_welfare_right& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_userright()) {
      set_userright(from.userright());
    }
    if (from.has_posrmb()) {
      set_posrmb(from.posrmb());
    }
    if (from.has_postime()) {
      set_postime(from.postime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_update_new_player_novice_welfare_right::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_update_new_player_novice_welfare_right::CopyFrom(const msg_update_new_player_novice_welfare_right& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_update_new_player_novice_welfare_right::IsInitialized() const {

  return true;
}

void msg_update_new_player_novice_welfare_right::Swap(msg_update_new_player_novice_welfare_right* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(userright_, other->userright_);
    std::swap(posrmb_, other->posrmb_);
    std::swap(postime_, other->postime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_update_new_player_novice_welfare_right::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_update_new_player_novice_welfare_right_descriptor_;
  metadata.reflection = msg_update_new_player_novice_welfare_right_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_update_new_player_novice_welfare_value::kIdFieldNumber;
const int msg_update_new_player_novice_welfare_value::kMinpayrmbFieldNumber;
const int msg_update_new_player_novice_welfare_value::kMaxpayrmbFieldNumber;
const int msg_update_new_player_novice_welfare_value::kMaxwinscoreFieldNumber;
const int msg_update_new_player_novice_welfare_value::kWelfarecountFieldNumber;
const int msg_update_new_player_novice_welfare_value::kWelfareproFieldNumber;
const int msg_update_new_player_novice_welfare_value::kPostimeFieldNumber;
const int msg_update_new_player_novice_welfare_value::kLiftOddsFieldNumber;
#endif  // !_MSC_VER

msg_update_new_player_novice_welfare_value::msg_update_new_player_novice_welfare_value()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_update_new_player_novice_welfare_value::InitAsDefaultInstance() {
}

msg_update_new_player_novice_welfare_value::msg_update_new_player_novice_welfare_value(const msg_update_new_player_novice_welfare_value& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_update_new_player_novice_welfare_value::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  minpayrmb_ = 0u;
  maxpayrmb_ = 0u;
  maxwinscore_ = 0u;
  welfarecount_ = 0u;
  welfarepro_ = 0u;
  postime_ = 0u;
  lift_odds_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_update_new_player_novice_welfare_value::~msg_update_new_player_novice_welfare_value() {
  SharedDtor();
}

void msg_update_new_player_novice_welfare_value::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_update_new_player_novice_welfare_value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_update_new_player_novice_welfare_value::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_update_new_player_novice_welfare_value_descriptor_;
}

const msg_update_new_player_novice_welfare_value& msg_update_new_player_novice_welfare_value::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_update_new_player_novice_welfare_value* msg_update_new_player_novice_welfare_value::default_instance_ = NULL;

msg_update_new_player_novice_welfare_value* msg_update_new_player_novice_welfare_value::New() const {
  return new msg_update_new_player_novice_welfare_value;
}

void msg_update_new_player_novice_welfare_value::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    minpayrmb_ = 0u;
    maxpayrmb_ = 0u;
    maxwinscore_ = 0u;
    welfarecount_ = 0u;
    welfarepro_ = 0u;
    postime_ = 0u;
    lift_odds_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_update_new_player_novice_welfare_value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_minpayrmb;
        break;
      }

      // optional uint32 minpayrmb = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minpayrmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minpayrmb_)));
          set_has_minpayrmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_maxpayrmb;
        break;
      }

      // optional uint32 maxpayrmb = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxpayrmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxpayrmb_)));
          set_has_maxpayrmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_maxwinscore;
        break;
      }

      // optional uint32 maxwinscore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxwinscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxwinscore_)));
          set_has_maxwinscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_welfarecount;
        break;
      }

      // optional uint32 welfarecount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_welfarecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &welfarecount_)));
          set_has_welfarecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_welfarepro;
        break;
      }

      // optional uint32 welfarepro = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_welfarepro:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &welfarepro_)));
          set_has_welfarepro();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_postime;
        break;
      }

      // optional uint32 postime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_postime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &postime_)));
          set_has_postime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_lift_odds;
        break;
      }

      // optional uint32 lift_odds = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lift_odds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lift_odds_)));
          set_has_lift_odds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_update_new_player_novice_welfare_value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 minpayrmb = 2;
  if (has_minpayrmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->minpayrmb(), output);
  }

  // optional uint32 maxpayrmb = 3;
  if (has_maxpayrmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->maxpayrmb(), output);
  }

  // optional uint32 maxwinscore = 4;
  if (has_maxwinscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->maxwinscore(), output);
  }

  // optional uint32 welfarecount = 5;
  if (has_welfarecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->welfarecount(), output);
  }

  // optional uint32 welfarepro = 6;
  if (has_welfarepro()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->welfarepro(), output);
  }

  // optional uint32 postime = 7;
  if (has_postime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->postime(), output);
  }

  // optional uint32 lift_odds = 8;
  if (has_lift_odds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->lift_odds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_update_new_player_novice_welfare_value::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 minpayrmb = 2;
  if (has_minpayrmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->minpayrmb(), target);
  }

  // optional uint32 maxpayrmb = 3;
  if (has_maxpayrmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->maxpayrmb(), target);
  }

  // optional uint32 maxwinscore = 4;
  if (has_maxwinscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->maxwinscore(), target);
  }

  // optional uint32 welfarecount = 5;
  if (has_welfarecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->welfarecount(), target);
  }

  // optional uint32 welfarepro = 6;
  if (has_welfarepro()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->welfarepro(), target);
  }

  // optional uint32 postime = 7;
  if (has_postime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->postime(), target);
  }

  // optional uint32 lift_odds = 8;
  if (has_lift_odds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->lift_odds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_update_new_player_novice_welfare_value::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 minpayrmb = 2;
    if (has_minpayrmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minpayrmb());
    }

    // optional uint32 maxpayrmb = 3;
    if (has_maxpayrmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxpayrmb());
    }

    // optional uint32 maxwinscore = 4;
    if (has_maxwinscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxwinscore());
    }

    // optional uint32 welfarecount = 5;
    if (has_welfarecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->welfarecount());
    }

    // optional uint32 welfarepro = 6;
    if (has_welfarepro()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->welfarepro());
    }

    // optional uint32 postime = 7;
    if (has_postime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->postime());
    }

    // optional uint32 lift_odds = 8;
    if (has_lift_odds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lift_odds());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_update_new_player_novice_welfare_value::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_update_new_player_novice_welfare_value* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_update_new_player_novice_welfare_value*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_update_new_player_novice_welfare_value::MergeFrom(const msg_update_new_player_novice_welfare_value& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_minpayrmb()) {
      set_minpayrmb(from.minpayrmb());
    }
    if (from.has_maxpayrmb()) {
      set_maxpayrmb(from.maxpayrmb());
    }
    if (from.has_maxwinscore()) {
      set_maxwinscore(from.maxwinscore());
    }
    if (from.has_welfarecount()) {
      set_welfarecount(from.welfarecount());
    }
    if (from.has_welfarepro()) {
      set_welfarepro(from.welfarepro());
    }
    if (from.has_postime()) {
      set_postime(from.postime());
    }
    if (from.has_lift_odds()) {
      set_lift_odds(from.lift_odds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_update_new_player_novice_welfare_value::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_update_new_player_novice_welfare_value::CopyFrom(const msg_update_new_player_novice_welfare_value& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_update_new_player_novice_welfare_value::IsInitialized() const {

  return true;
}

void msg_update_new_player_novice_welfare_value::Swap(msg_update_new_player_novice_welfare_value* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(minpayrmb_, other->minpayrmb_);
    std::swap(maxpayrmb_, other->maxpayrmb_);
    std::swap(maxwinscore_, other->maxwinscore_);
    std::swap(welfarecount_, other->welfarecount_);
    std::swap(welfarepro_, other->welfarepro_);
    std::swap(postime_, other->postime_);
    std::swap(lift_odds_, other->lift_odds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_update_new_player_novice_welfare_value::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_update_new_player_novice_welfare_value_descriptor_;
  metadata.reflection = msg_update_new_player_novice_welfare_value_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_register_dispatch::kSvridFieldNumber;
const int msg_register_dispatch::kSvrTypeFieldNumber;
const int msg_register_dispatch::kGameTypeFieldNumber;
#endif  // !_MSC_VER

msg_register_dispatch::msg_register_dispatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_register_dispatch::InitAsDefaultInstance() {
}

msg_register_dispatch::msg_register_dispatch(const msg_register_dispatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_register_dispatch::SharedCtor() {
  _cached_size_ = 0;
  svrid_ = 0u;
  svr_type_ = 0u;
  game_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_register_dispatch::~msg_register_dispatch() {
  SharedDtor();
}

void msg_register_dispatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_register_dispatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_register_dispatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_register_dispatch_descriptor_;
}

const msg_register_dispatch& msg_register_dispatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_register_dispatch* msg_register_dispatch::default_instance_ = NULL;

msg_register_dispatch* msg_register_dispatch::New() const {
  return new msg_register_dispatch;
}

void msg_register_dispatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    svrid_ = 0u;
    svr_type_ = 0u;
    game_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_register_dispatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 svrid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svrid_)));
          set_has_svrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_svr_type;
        break;
      }

      // optional uint32 svr_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_svr_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svr_type_)));
          set_has_svr_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_game_type;
        break;
      }

      // optional uint32 game_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
          set_has_game_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_register_dispatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 svrid = 1;
  if (has_svrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->svrid(), output);
  }

  // optional uint32 svr_type = 2;
  if (has_svr_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->svr_type(), output);
  }

  // optional uint32 game_type = 3;
  if (has_game_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_register_dispatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 svrid = 1;
  if (has_svrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->svrid(), target);
  }

  // optional uint32 svr_type = 2;
  if (has_svr_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->svr_type(), target);
  }

  // optional uint32 game_type = 3;
  if (has_game_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_register_dispatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 svrid = 1;
    if (has_svrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svrid());
    }

    // optional uint32 svr_type = 2;
    if (has_svr_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svr_type());
    }

    // optional uint32 game_type = 3;
    if (has_game_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_register_dispatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_register_dispatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_register_dispatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_register_dispatch::MergeFrom(const msg_register_dispatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svrid()) {
      set_svrid(from.svrid());
    }
    if (from.has_svr_type()) {
      set_svr_type(from.svr_type());
    }
    if (from.has_game_type()) {
      set_game_type(from.game_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_register_dispatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_register_dispatch::CopyFrom(const msg_register_dispatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_register_dispatch::IsInitialized() const {

  return true;
}

void msg_register_dispatch::Swap(msg_register_dispatch* other) {
  if (other != this) {
    std::swap(svrid_, other->svrid_);
    std::swap(svr_type_, other->svr_type_);
    std::swap(game_type_, other->game_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_register_dispatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_register_dispatch_descriptor_;
  metadata.reflection = msg_register_dispatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_register_dispatch_rep::kResultFieldNumber;
#endif  // !_MSC_VER

msg_register_dispatch_rep::msg_register_dispatch_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_register_dispatch_rep::InitAsDefaultInstance() {
}

msg_register_dispatch_rep::msg_register_dispatch_rep(const msg_register_dispatch_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_register_dispatch_rep::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_register_dispatch_rep::~msg_register_dispatch_rep() {
  SharedDtor();
}

void msg_register_dispatch_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_register_dispatch_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_register_dispatch_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_register_dispatch_rep_descriptor_;
}

const msg_register_dispatch_rep& msg_register_dispatch_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_register_dispatch_rep* msg_register_dispatch_rep::default_instance_ = NULL;

msg_register_dispatch_rep* msg_register_dispatch_rep::New() const {
  return new msg_register_dispatch_rep;
}

void msg_register_dispatch_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_register_dispatch_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_register_dispatch_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_register_dispatch_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_register_dispatch_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_register_dispatch_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_register_dispatch_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_register_dispatch_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_register_dispatch_rep::MergeFrom(const msg_register_dispatch_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_register_dispatch_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_register_dispatch_rep::CopyFrom(const msg_register_dispatch_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_register_dispatch_rep::IsInitialized() const {

  return true;
}

void msg_register_dispatch_rep::Swap(msg_register_dispatch_rep* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_register_dispatch_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_register_dispatch_rep_descriptor_;
  metadata.reflection = msg_register_dispatch_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_notify_gamesvrs_new_lobby::kLobbySvridFieldNumber;
#endif  // !_MSC_VER

msg_notify_gamesvrs_new_lobby::msg_notify_gamesvrs_new_lobby()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_notify_gamesvrs_new_lobby::InitAsDefaultInstance() {
}

msg_notify_gamesvrs_new_lobby::msg_notify_gamesvrs_new_lobby(const msg_notify_gamesvrs_new_lobby& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_notify_gamesvrs_new_lobby::SharedCtor() {
  _cached_size_ = 0;
  lobby_svrid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_notify_gamesvrs_new_lobby::~msg_notify_gamesvrs_new_lobby() {
  SharedDtor();
}

void msg_notify_gamesvrs_new_lobby::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_notify_gamesvrs_new_lobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_notify_gamesvrs_new_lobby::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_notify_gamesvrs_new_lobby_descriptor_;
}

const msg_notify_gamesvrs_new_lobby& msg_notify_gamesvrs_new_lobby::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_notify_gamesvrs_new_lobby* msg_notify_gamesvrs_new_lobby::default_instance_ = NULL;

msg_notify_gamesvrs_new_lobby* msg_notify_gamesvrs_new_lobby::New() const {
  return new msg_notify_gamesvrs_new_lobby;
}

void msg_notify_gamesvrs_new_lobby::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lobby_svrid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_notify_gamesvrs_new_lobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 lobby_svrid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lobby_svrid_)));
          set_has_lobby_svrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_notify_gamesvrs_new_lobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 lobby_svrid = 1;
  if (has_lobby_svrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lobby_svrid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_notify_gamesvrs_new_lobby::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 lobby_svrid = 1;
  if (has_lobby_svrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->lobby_svrid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_notify_gamesvrs_new_lobby::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 lobby_svrid = 1;
    if (has_lobby_svrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lobby_svrid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_notify_gamesvrs_new_lobby::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_notify_gamesvrs_new_lobby* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_notify_gamesvrs_new_lobby*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_notify_gamesvrs_new_lobby::MergeFrom(const msg_notify_gamesvrs_new_lobby& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lobby_svrid()) {
      set_lobby_svrid(from.lobby_svrid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_notify_gamesvrs_new_lobby::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_notify_gamesvrs_new_lobby::CopyFrom(const msg_notify_gamesvrs_new_lobby& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_notify_gamesvrs_new_lobby::IsInitialized() const {

  return true;
}

void msg_notify_gamesvrs_new_lobby::Swap(msg_notify_gamesvrs_new_lobby* other) {
  if (other != this) {
    std::swap(lobby_svrid_, other->lobby_svrid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_notify_gamesvrs_new_lobby::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_notify_gamesvrs_new_lobby_descriptor_;
  metadata.reflection = msg_notify_gamesvrs_new_lobby_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_retire_lobbysvr::kSvridFieldNumber;
#endif  // !_MSC_VER

msg_retire_lobbysvr::msg_retire_lobbysvr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_retire_lobbysvr::InitAsDefaultInstance() {
}

msg_retire_lobbysvr::msg_retire_lobbysvr(const msg_retire_lobbysvr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_retire_lobbysvr::SharedCtor() {
  _cached_size_ = 0;
  svrid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_retire_lobbysvr::~msg_retire_lobbysvr() {
  SharedDtor();
}

void msg_retire_lobbysvr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_retire_lobbysvr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_retire_lobbysvr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_retire_lobbysvr_descriptor_;
}

const msg_retire_lobbysvr& msg_retire_lobbysvr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_retire_lobbysvr* msg_retire_lobbysvr::default_instance_ = NULL;

msg_retire_lobbysvr* msg_retire_lobbysvr::New() const {
  return new msg_retire_lobbysvr;
}

void msg_retire_lobbysvr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    svrid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_retire_lobbysvr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 svrid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svrid_)));
          set_has_svrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_retire_lobbysvr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 svrid = 1;
  if (has_svrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->svrid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_retire_lobbysvr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 svrid = 1;
  if (has_svrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->svrid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_retire_lobbysvr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 svrid = 1;
    if (has_svrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svrid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_retire_lobbysvr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_retire_lobbysvr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_retire_lobbysvr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_retire_lobbysvr::MergeFrom(const msg_retire_lobbysvr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svrid()) {
      set_svrid(from.svrid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_retire_lobbysvr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_retire_lobbysvr::CopyFrom(const msg_retire_lobbysvr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_retire_lobbysvr::IsInitialized() const {

  return true;
}

void msg_retire_lobbysvr::Swap(msg_retire_lobbysvr* other) {
  if (other != this) {
    std::swap(svrid_, other->svrid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_retire_lobbysvr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_retire_lobbysvr_descriptor_;
  metadata.reflection = msg_retire_lobbysvr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_retire_gamesvr::kSvridFieldNumber;
#endif  // !_MSC_VER

msg_retire_gamesvr::msg_retire_gamesvr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_retire_gamesvr::InitAsDefaultInstance() {
}

msg_retire_gamesvr::msg_retire_gamesvr(const msg_retire_gamesvr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_retire_gamesvr::SharedCtor() {
  _cached_size_ = 0;
  svrid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_retire_gamesvr::~msg_retire_gamesvr() {
  SharedDtor();
}

void msg_retire_gamesvr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_retire_gamesvr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_retire_gamesvr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_retire_gamesvr_descriptor_;
}

const msg_retire_gamesvr& msg_retire_gamesvr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_retire_gamesvr* msg_retire_gamesvr::default_instance_ = NULL;

msg_retire_gamesvr* msg_retire_gamesvr::New() const {
  return new msg_retire_gamesvr;
}

void msg_retire_gamesvr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    svrid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_retire_gamesvr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 svrid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svrid_)));
          set_has_svrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_retire_gamesvr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 svrid = 1;
  if (has_svrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->svrid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_retire_gamesvr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 svrid = 1;
  if (has_svrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->svrid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_retire_gamesvr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 svrid = 1;
    if (has_svrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svrid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_retire_gamesvr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_retire_gamesvr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_retire_gamesvr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_retire_gamesvr::MergeFrom(const msg_retire_gamesvr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svrid()) {
      set_svrid(from.svrid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_retire_gamesvr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_retire_gamesvr::CopyFrom(const msg_retire_gamesvr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_retire_gamesvr::IsInitialized() const {

  return true;
}

void msg_retire_gamesvr::Swap(msg_retire_gamesvr* other) {
  if (other != this) {
    std::swap(svrid_, other->svrid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_retire_gamesvr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_retire_gamesvr_descriptor_;
  metadata.reflection = msg_retire_gamesvr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_report_onlines::kPlayerSizeFieldNumber;
const int msg_report_onlines::kRobotSizeFieldNumber;
#endif  // !_MSC_VER

msg_report_onlines::msg_report_onlines()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_report_onlines::InitAsDefaultInstance() {
}

msg_report_onlines::msg_report_onlines(const msg_report_onlines& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_report_onlines::SharedCtor() {
  _cached_size_ = 0;
  player_size_ = 0u;
  robot_size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_report_onlines::~msg_report_onlines() {
  SharedDtor();
}

void msg_report_onlines::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_report_onlines::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_report_onlines::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_report_onlines_descriptor_;
}

const msg_report_onlines& msg_report_onlines::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_report_onlines* msg_report_onlines::default_instance_ = NULL;

msg_report_onlines* msg_report_onlines::New() const {
  return new msg_report_onlines;
}

void msg_report_onlines::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_size_ = 0u;
    robot_size_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_report_onlines::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_size = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_size_)));
          set_has_player_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_robot_size;
        break;
      }

      // optional uint32 robot_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robot_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &robot_size_)));
          set_has_robot_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_report_onlines::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 player_size = 1;
  if (has_player_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_size(), output);
  }

  // optional uint32 robot_size = 2;
  if (has_robot_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->robot_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_report_onlines::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 player_size = 1;
  if (has_player_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_size(), target);
  }

  // optional uint32 robot_size = 2;
  if (has_robot_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->robot_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_report_onlines::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 player_size = 1;
    if (has_player_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_size());
    }

    // optional uint32 robot_size = 2;
    if (has_robot_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->robot_size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_report_onlines::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_report_onlines* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_report_onlines*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_report_onlines::MergeFrom(const msg_report_onlines& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_size()) {
      set_player_size(from.player_size());
    }
    if (from.has_robot_size()) {
      set_robot_size(from.robot_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_report_onlines::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_report_onlines::CopyFrom(const msg_report_onlines& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_report_onlines::IsInitialized() const {

  return true;
}

void msg_report_onlines::Swap(msg_report_onlines* other) {
  if (other != this) {
    std::swap(player_size_, other->player_size_);
    std::swap(robot_size_, other->robot_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_report_onlines::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_report_onlines_descriptor_;
  metadata.reflection = msg_report_onlines_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_broadcast_other_lobby::kTypeFieldNumber;
const int msg_broadcast_other_lobby::kSvridFieldNumber;
const int msg_broadcast_other_lobby::kDataFieldNumber;
const int msg_broadcast_other_lobby::kCmdFieldNumber;
#endif  // !_MSC_VER

msg_broadcast_other_lobby::msg_broadcast_other_lobby()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_broadcast_other_lobby::InitAsDefaultInstance() {
}

msg_broadcast_other_lobby::msg_broadcast_other_lobby(const msg_broadcast_other_lobby& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_broadcast_other_lobby::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  svrid_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cmd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_broadcast_other_lobby::~msg_broadcast_other_lobby() {
  SharedDtor();
}

void msg_broadcast_other_lobby::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void msg_broadcast_other_lobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_broadcast_other_lobby::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_broadcast_other_lobby_descriptor_;
}

const msg_broadcast_other_lobby& msg_broadcast_other_lobby::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_broadcast_other_lobby* msg_broadcast_other_lobby::default_instance_ = NULL;

msg_broadcast_other_lobby* msg_broadcast_other_lobby::New() const {
  return new msg_broadcast_other_lobby;
}

void msg_broadcast_other_lobby::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    svrid_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    cmd_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_broadcast_other_lobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_svrid;
        break;
      }

      // optional uint32 svrid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_svrid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svrid_)));
          set_has_svrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cmd;
        break;
      }

      // optional uint32 cmd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_broadcast_other_lobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 svrid = 2;
  if (has_svrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->svrid(), output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data(), output);
  }

  // optional uint32 cmd = 4;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_broadcast_other_lobby::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 svrid = 2;
  if (has_svrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->svrid(), target);
  }

  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // optional uint32 cmd = 4;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_broadcast_other_lobby::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 svrid = 2;
    if (has_svrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svrid());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 cmd = 4;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_broadcast_other_lobby::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_broadcast_other_lobby* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_broadcast_other_lobby*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_broadcast_other_lobby::MergeFrom(const msg_broadcast_other_lobby& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_svrid()) {
      set_svrid(from.svrid());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_broadcast_other_lobby::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_broadcast_other_lobby::CopyFrom(const msg_broadcast_other_lobby& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_broadcast_other_lobby::IsInitialized() const {

  return true;
}

void msg_broadcast_other_lobby::Swap(msg_broadcast_other_lobby* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(svrid_, other->svrid_);
    std::swap(data_, other->data_);
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_broadcast_other_lobby::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_broadcast_other_lobby_descriptor_;
  metadata.reflection = msg_broadcast_other_lobby_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_broadcast_info::kDataFieldNumber;
const int msg_broadcast_info::kCmdFieldNumber;
#endif  // !_MSC_VER

msg_broadcast_info::msg_broadcast_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_broadcast_info::InitAsDefaultInstance() {
}

msg_broadcast_info::msg_broadcast_info(const msg_broadcast_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_broadcast_info::SharedCtor() {
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cmd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_broadcast_info::~msg_broadcast_info() {
  SharedDtor();
}

void msg_broadcast_info::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void msg_broadcast_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_broadcast_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_broadcast_info_descriptor_;
}

const msg_broadcast_info& msg_broadcast_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_broadcast_info* msg_broadcast_info::default_instance_ = NULL;

msg_broadcast_info* msg_broadcast_info::New() const {
  return new msg_broadcast_info;
}

void msg_broadcast_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    cmd_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_broadcast_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cmd;
        break;
      }

      // optional uint32 cmd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_broadcast_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->data(), output);
  }

  // optional uint32 cmd = 2;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_broadcast_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // optional uint32 cmd = 2;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_broadcast_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 cmd = 2;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_broadcast_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_broadcast_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_broadcast_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_broadcast_info::MergeFrom(const msg_broadcast_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_broadcast_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_broadcast_info::CopyFrom(const msg_broadcast_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_broadcast_info::IsInitialized() const {

  return true;
}

void msg_broadcast_info::Swap(msg_broadcast_info* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_broadcast_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_broadcast_info_descriptor_;
  metadata.reflection = msg_broadcast_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_stop_snatch_coin::kGametypeFieldNumber;
const int msg_stop_snatch_coin::kRoomidFieldNumber;
const int msg_stop_snatch_coin::kStopFieldNumber;
#endif  // !_MSC_VER

msg_stop_snatch_coin::msg_stop_snatch_coin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_stop_snatch_coin::InitAsDefaultInstance() {
}

msg_stop_snatch_coin::msg_stop_snatch_coin(const msg_stop_snatch_coin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_stop_snatch_coin::SharedCtor() {
  _cached_size_ = 0;
  gametype_ = 0u;
  roomid_ = 0u;
  stop_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_stop_snatch_coin::~msg_stop_snatch_coin() {
  SharedDtor();
}

void msg_stop_snatch_coin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_stop_snatch_coin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_stop_snatch_coin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_stop_snatch_coin_descriptor_;
}

const msg_stop_snatch_coin& msg_stop_snatch_coin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_stop_snatch_coin* msg_stop_snatch_coin::default_instance_ = NULL;

msg_stop_snatch_coin* msg_stop_snatch_coin::New() const {
  return new msg_stop_snatch_coin;
}

void msg_stop_snatch_coin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gametype_ = 0u;
    roomid_ = 0u;
    stop_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_stop_snatch_coin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gametype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gametype_)));
          set_has_gametype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // optional uint32 roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stop;
        break;
      }

      // optional uint32 stop = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stop_)));
          set_has_stop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_stop_snatch_coin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 gametype = 1;
  if (has_gametype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gametype(), output);
  }

  // optional uint32 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->roomid(), output);
  }

  // optional uint32 stop = 3;
  if (has_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stop(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_stop_snatch_coin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 gametype = 1;
  if (has_gametype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gametype(), target);
  }

  // optional uint32 roomid = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->roomid(), target);
  }

  // optional uint32 stop = 3;
  if (has_stop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stop(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_stop_snatch_coin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gametype = 1;
    if (has_gametype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gametype());
    }

    // optional uint32 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roomid());
    }

    // optional uint32 stop = 3;
    if (has_stop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stop());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_stop_snatch_coin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_stop_snatch_coin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_stop_snatch_coin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_stop_snatch_coin::MergeFrom(const msg_stop_snatch_coin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gametype()) {
      set_gametype(from.gametype());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_stop()) {
      set_stop(from.stop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_stop_snatch_coin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_stop_snatch_coin::CopyFrom(const msg_stop_snatch_coin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_stop_snatch_coin::IsInitialized() const {

  return true;
}

void msg_stop_snatch_coin::Swap(msg_stop_snatch_coin* other) {
  if (other != this) {
    std::swap(gametype_, other->gametype_);
    std::swap(roomid_, other->roomid_);
    std::swap(stop_, other->stop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_stop_snatch_coin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_stop_snatch_coin_descriptor_;
  metadata.reflection = msg_stop_snatch_coin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_robot_snatch_coin::kGametypeFieldNumber;
const int msg_robot_snatch_coin::kRoomidFieldNumber;
const int msg_robot_snatch_coin::kSnatchtypeFieldNumber;
const int msg_robot_snatch_coin::kRobotcountFieldNumber;
const int msg_robot_snatch_coin::kCardcountFieldNumber;
#endif  // !_MSC_VER

msg_robot_snatch_coin::msg_robot_snatch_coin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_robot_snatch_coin::InitAsDefaultInstance() {
}

msg_robot_snatch_coin::msg_robot_snatch_coin(const msg_robot_snatch_coin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_robot_snatch_coin::SharedCtor() {
  _cached_size_ = 0;
  gametype_ = 0u;
  roomid_ = 0u;
  snatchtype_ = 0u;
  robotcount_ = 0u;
  cardcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_robot_snatch_coin::~msg_robot_snatch_coin() {
  SharedDtor();
}

void msg_robot_snatch_coin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_robot_snatch_coin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_robot_snatch_coin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_robot_snatch_coin_descriptor_;
}

const msg_robot_snatch_coin& msg_robot_snatch_coin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_robot_snatch_coin* msg_robot_snatch_coin::default_instance_ = NULL;

msg_robot_snatch_coin* msg_robot_snatch_coin::New() const {
  return new msg_robot_snatch_coin;
}

void msg_robot_snatch_coin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gametype_ = 0u;
    roomid_ = 0u;
    snatchtype_ = 0u;
    robotcount_ = 0u;
    cardcount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_robot_snatch_coin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gametype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gametype_)));
          set_has_gametype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // optional uint32 roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_snatchtype;
        break;
      }

      // optional uint32 snatchtype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_snatchtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &snatchtype_)));
          set_has_snatchtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_robotcount;
        break;
      }

      // optional uint32 robotcount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robotcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &robotcount_)));
          set_has_robotcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cardcount;
        break;
      }

      // optional uint32 cardcount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cardcount_)));
          set_has_cardcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_robot_snatch_coin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 gametype = 1;
  if (has_gametype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gametype(), output);
  }

  // optional uint32 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->roomid(), output);
  }

  // optional uint32 snatchtype = 3;
  if (has_snatchtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->snatchtype(), output);
  }

  // optional uint32 robotcount = 4;
  if (has_robotcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->robotcount(), output);
  }

  // optional uint32 cardcount = 5;
  if (has_cardcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cardcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_robot_snatch_coin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 gametype = 1;
  if (has_gametype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gametype(), target);
  }

  // optional uint32 roomid = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->roomid(), target);
  }

  // optional uint32 snatchtype = 3;
  if (has_snatchtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->snatchtype(), target);
  }

  // optional uint32 robotcount = 4;
  if (has_robotcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->robotcount(), target);
  }

  // optional uint32 cardcount = 5;
  if (has_cardcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cardcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_robot_snatch_coin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gametype = 1;
    if (has_gametype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gametype());
    }

    // optional uint32 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roomid());
    }

    // optional uint32 snatchtype = 3;
    if (has_snatchtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->snatchtype());
    }

    // optional uint32 robotcount = 4;
    if (has_robotcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->robotcount());
    }

    // optional uint32 cardcount = 5;
    if (has_cardcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cardcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_robot_snatch_coin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_robot_snatch_coin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_robot_snatch_coin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_robot_snatch_coin::MergeFrom(const msg_robot_snatch_coin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gametype()) {
      set_gametype(from.gametype());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_snatchtype()) {
      set_snatchtype(from.snatchtype());
    }
    if (from.has_robotcount()) {
      set_robotcount(from.robotcount());
    }
    if (from.has_cardcount()) {
      set_cardcount(from.cardcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_robot_snatch_coin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_robot_snatch_coin::CopyFrom(const msg_robot_snatch_coin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_robot_snatch_coin::IsInitialized() const {

  return true;
}

void msg_robot_snatch_coin::Swap(msg_robot_snatch_coin* other) {
  if (other != this) {
    std::swap(gametype_, other->gametype_);
    std::swap(roomid_, other->roomid_);
    std::swap(snatchtype_, other->snatchtype_);
    std::swap(robotcount_, other->robotcount_);
    std::swap(cardcount_, other->cardcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_robot_snatch_coin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_robot_snatch_coin_descriptor_;
  metadata.reflection = msg_robot_snatch_coin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_auto_kill_user_cfg::kUpdatejsonFieldNumber;
#endif  // !_MSC_VER

msg_auto_kill_user_cfg::msg_auto_kill_user_cfg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_auto_kill_user_cfg::InitAsDefaultInstance() {
}

msg_auto_kill_user_cfg::msg_auto_kill_user_cfg(const msg_auto_kill_user_cfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_auto_kill_user_cfg::SharedCtor() {
  _cached_size_ = 0;
  updatejson_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_auto_kill_user_cfg::~msg_auto_kill_user_cfg() {
  SharedDtor();
}

void msg_auto_kill_user_cfg::SharedDtor() {
  if (updatejson_ != &::google::protobuf::internal::kEmptyString) {
    delete updatejson_;
  }
  if (this != default_instance_) {
  }
}

void msg_auto_kill_user_cfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_auto_kill_user_cfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_auto_kill_user_cfg_descriptor_;
}

const msg_auto_kill_user_cfg& msg_auto_kill_user_cfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_auto_kill_user_cfg* msg_auto_kill_user_cfg::default_instance_ = NULL;

msg_auto_kill_user_cfg* msg_auto_kill_user_cfg::New() const {
  return new msg_auto_kill_user_cfg;
}

void msg_auto_kill_user_cfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_updatejson()) {
      if (updatejson_ != &::google::protobuf::internal::kEmptyString) {
        updatejson_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_auto_kill_user_cfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes updatejson = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_updatejson()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_auto_kill_user_cfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes updatejson = 1;
  if (has_updatejson()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->updatejson(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_auto_kill_user_cfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes updatejson = 1;
  if (has_updatejson()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->updatejson(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_auto_kill_user_cfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes updatejson = 1;
    if (has_updatejson()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->updatejson());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_auto_kill_user_cfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_auto_kill_user_cfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_auto_kill_user_cfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_auto_kill_user_cfg::MergeFrom(const msg_auto_kill_user_cfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_updatejson()) {
      set_updatejson(from.updatejson());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_auto_kill_user_cfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_auto_kill_user_cfg::CopyFrom(const msg_auto_kill_user_cfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_auto_kill_user_cfg::IsInitialized() const {

  return true;
}

void msg_auto_kill_user_cfg::Swap(msg_auto_kill_user_cfg* other) {
  if (other != this) {
    std::swap(updatejson_, other->updatejson_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_auto_kill_user_cfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_auto_kill_user_cfg_descriptor_;
  metadata.reflection = msg_auto_kill_user_cfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_flush_active_welfare_cfg::kUpdatejsonFieldNumber;
#endif  // !_MSC_VER

msg_flush_active_welfare_cfg::msg_flush_active_welfare_cfg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_flush_active_welfare_cfg::InitAsDefaultInstance() {
}

msg_flush_active_welfare_cfg::msg_flush_active_welfare_cfg(const msg_flush_active_welfare_cfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_flush_active_welfare_cfg::SharedCtor() {
  _cached_size_ = 0;
  updatejson_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_flush_active_welfare_cfg::~msg_flush_active_welfare_cfg() {
  SharedDtor();
}

void msg_flush_active_welfare_cfg::SharedDtor() {
  if (updatejson_ != &::google::protobuf::internal::kEmptyString) {
    delete updatejson_;
  }
  if (this != default_instance_) {
  }
}

void msg_flush_active_welfare_cfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_flush_active_welfare_cfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_flush_active_welfare_cfg_descriptor_;
}

const msg_flush_active_welfare_cfg& msg_flush_active_welfare_cfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_flush_active_welfare_cfg* msg_flush_active_welfare_cfg::default_instance_ = NULL;

msg_flush_active_welfare_cfg* msg_flush_active_welfare_cfg::New() const {
  return new msg_flush_active_welfare_cfg;
}

void msg_flush_active_welfare_cfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_updatejson()) {
      if (updatejson_ != &::google::protobuf::internal::kEmptyString) {
        updatejson_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_flush_active_welfare_cfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes updatejson = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_updatejson()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_flush_active_welfare_cfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes updatejson = 1;
  if (has_updatejson()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->updatejson(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_flush_active_welfare_cfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes updatejson = 1;
  if (has_updatejson()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->updatejson(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_flush_active_welfare_cfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes updatejson = 1;
    if (has_updatejson()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->updatejson());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_flush_active_welfare_cfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_flush_active_welfare_cfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_flush_active_welfare_cfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_flush_active_welfare_cfg::MergeFrom(const msg_flush_active_welfare_cfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_updatejson()) {
      set_updatejson(from.updatejson());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_flush_active_welfare_cfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_flush_active_welfare_cfg::CopyFrom(const msg_flush_active_welfare_cfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_flush_active_welfare_cfg::IsInitialized() const {

  return true;
}

void msg_flush_active_welfare_cfg::Swap(msg_flush_active_welfare_cfg* other) {
  if (other != this) {
    std::swap(updatejson_, other->updatejson_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_flush_active_welfare_cfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_flush_active_welfare_cfg_descriptor_;
  metadata.reflection = msg_flush_active_welfare_cfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_reset_active_welfare_info::kUpdatejsonFieldNumber;
#endif  // !_MSC_VER

msg_reset_active_welfare_info::msg_reset_active_welfare_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_reset_active_welfare_info::InitAsDefaultInstance() {
}

msg_reset_active_welfare_info::msg_reset_active_welfare_info(const msg_reset_active_welfare_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_reset_active_welfare_info::SharedCtor() {
  _cached_size_ = 0;
  updatejson_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_reset_active_welfare_info::~msg_reset_active_welfare_info() {
  SharedDtor();
}

void msg_reset_active_welfare_info::SharedDtor() {
  if (updatejson_ != &::google::protobuf::internal::kEmptyString) {
    delete updatejson_;
  }
  if (this != default_instance_) {
  }
}

void msg_reset_active_welfare_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_reset_active_welfare_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_reset_active_welfare_info_descriptor_;
}

const msg_reset_active_welfare_info& msg_reset_active_welfare_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_reset_active_welfare_info* msg_reset_active_welfare_info::default_instance_ = NULL;

msg_reset_active_welfare_info* msg_reset_active_welfare_info::New() const {
  return new msg_reset_active_welfare_info;
}

void msg_reset_active_welfare_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_updatejson()) {
      if (updatejson_ != &::google::protobuf::internal::kEmptyString) {
        updatejson_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_reset_active_welfare_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes updatejson = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_updatejson()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_reset_active_welfare_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes updatejson = 1;
  if (has_updatejson()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->updatejson(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_reset_active_welfare_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes updatejson = 1;
  if (has_updatejson()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->updatejson(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_reset_active_welfare_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes updatejson = 1;
    if (has_updatejson()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->updatejson());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_reset_active_welfare_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_reset_active_welfare_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_reset_active_welfare_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_reset_active_welfare_info::MergeFrom(const msg_reset_active_welfare_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_updatejson()) {
      set_updatejson(from.updatejson());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_reset_active_welfare_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_reset_active_welfare_info::CopyFrom(const msg_reset_active_welfare_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_reset_active_welfare_info::IsInitialized() const {

  return true;
}

void msg_reset_active_welfare_info::Swap(msg_reset_active_welfare_info* other) {
  if (other != this) {
    std::swap(updatejson_, other->updatejson_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_reset_active_welfare_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_reset_active_welfare_info_descriptor_;
  metadata.reflection = msg_reset_active_welfare_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_flush_new_register_welfare_cfg::kUpdatejsonFieldNumber;
#endif  // !_MSC_VER

msg_flush_new_register_welfare_cfg::msg_flush_new_register_welfare_cfg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_flush_new_register_welfare_cfg::InitAsDefaultInstance() {
}

msg_flush_new_register_welfare_cfg::msg_flush_new_register_welfare_cfg(const msg_flush_new_register_welfare_cfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_flush_new_register_welfare_cfg::SharedCtor() {
  _cached_size_ = 0;
  updatejson_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_flush_new_register_welfare_cfg::~msg_flush_new_register_welfare_cfg() {
  SharedDtor();
}

void msg_flush_new_register_welfare_cfg::SharedDtor() {
  if (updatejson_ != &::google::protobuf::internal::kEmptyString) {
    delete updatejson_;
  }
  if (this != default_instance_) {
  }
}

void msg_flush_new_register_welfare_cfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_flush_new_register_welfare_cfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_flush_new_register_welfare_cfg_descriptor_;
}

const msg_flush_new_register_welfare_cfg& msg_flush_new_register_welfare_cfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_flush_new_register_welfare_cfg* msg_flush_new_register_welfare_cfg::default_instance_ = NULL;

msg_flush_new_register_welfare_cfg* msg_flush_new_register_welfare_cfg::New() const {
  return new msg_flush_new_register_welfare_cfg;
}

void msg_flush_new_register_welfare_cfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_updatejson()) {
      if (updatejson_ != &::google::protobuf::internal::kEmptyString) {
        updatejson_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_flush_new_register_welfare_cfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes updatejson = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_updatejson()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_flush_new_register_welfare_cfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes updatejson = 1;
  if (has_updatejson()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->updatejson(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_flush_new_register_welfare_cfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes updatejson = 1;
  if (has_updatejson()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->updatejson(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_flush_new_register_welfare_cfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes updatejson = 1;
    if (has_updatejson()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->updatejson());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_flush_new_register_welfare_cfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_flush_new_register_welfare_cfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_flush_new_register_welfare_cfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_flush_new_register_welfare_cfg::MergeFrom(const msg_flush_new_register_welfare_cfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_updatejson()) {
      set_updatejson(from.updatejson());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_flush_new_register_welfare_cfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_flush_new_register_welfare_cfg::CopyFrom(const msg_flush_new_register_welfare_cfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_flush_new_register_welfare_cfg::IsInitialized() const {

  return true;
}

void msg_flush_new_register_welfare_cfg::Swap(msg_flush_new_register_welfare_cfg* other) {
  if (other != this) {
    std::swap(updatejson_, other->updatejson_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_flush_new_register_welfare_cfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_flush_new_register_welfare_cfg_descriptor_;
  metadata.reflection = msg_flush_new_register_welfare_cfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_stop_conctrl_player::kUidFieldNumber;
#endif  // !_MSC_VER

msg_stop_conctrl_player::msg_stop_conctrl_player()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_stop_conctrl_player::InitAsDefaultInstance() {
}

msg_stop_conctrl_player::msg_stop_conctrl_player(const msg_stop_conctrl_player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_stop_conctrl_player::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_stop_conctrl_player::~msg_stop_conctrl_player() {
  SharedDtor();
}

void msg_stop_conctrl_player::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_stop_conctrl_player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_stop_conctrl_player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_stop_conctrl_player_descriptor_;
}

const msg_stop_conctrl_player& msg_stop_conctrl_player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_stop_conctrl_player* msg_stop_conctrl_player::default_instance_ = NULL;

msg_stop_conctrl_player* msg_stop_conctrl_player::New() const {
  return new msg_stop_conctrl_player;
}

void msg_stop_conctrl_player::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_stop_conctrl_player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_stop_conctrl_player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_stop_conctrl_player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_stop_conctrl_player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_stop_conctrl_player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_stop_conctrl_player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_stop_conctrl_player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_stop_conctrl_player::MergeFrom(const msg_stop_conctrl_player& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_stop_conctrl_player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_stop_conctrl_player::CopyFrom(const msg_stop_conctrl_player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_stop_conctrl_player::IsInitialized() const {

  return true;
}

void msg_stop_conctrl_player::Swap(msg_stop_conctrl_player* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_stop_conctrl_player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_stop_conctrl_player_descriptor_;
  metadata.reflection = msg_stop_conctrl_player_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_syn_ctrl_user_cfg::kVecSuidFieldNumber;
const int msg_syn_ctrl_user_cfg::kOpertypeFieldNumber;
const int msg_syn_ctrl_user_cfg::kTagSuidFieldNumber;
const int msg_syn_ctrl_user_cfg::kTagSdeviceidFieldNumber;
const int msg_syn_ctrl_user_cfg::kTagTuidFieldNumber;
const int msg_syn_ctrl_user_cfg::kTagCgidFieldNumber;
const int msg_syn_ctrl_user_cfg::kTagSkeyFieldNumber;
#endif  // !_MSC_VER

msg_syn_ctrl_user_cfg::msg_syn_ctrl_user_cfg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_syn_ctrl_user_cfg::InitAsDefaultInstance() {
}

msg_syn_ctrl_user_cfg::msg_syn_ctrl_user_cfg(const msg_syn_ctrl_user_cfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_syn_ctrl_user_cfg::SharedCtor() {
  _cached_size_ = 0;
  opertype_ = 0u;
  tag_suid_ = 0u;
  tag_sdeviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tag_tuid_ = 0u;
  tag_skey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_syn_ctrl_user_cfg::~msg_syn_ctrl_user_cfg() {
  SharedDtor();
}

void msg_syn_ctrl_user_cfg::SharedDtor() {
  if (tag_sdeviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete tag_sdeviceid_;
  }
  if (tag_skey_ != &::google::protobuf::internal::kEmptyString) {
    delete tag_skey_;
  }
  if (this != default_instance_) {
  }
}

void msg_syn_ctrl_user_cfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_syn_ctrl_user_cfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_syn_ctrl_user_cfg_descriptor_;
}

const msg_syn_ctrl_user_cfg& msg_syn_ctrl_user_cfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_syn_ctrl_user_cfg* msg_syn_ctrl_user_cfg::default_instance_ = NULL;

msg_syn_ctrl_user_cfg* msg_syn_ctrl_user_cfg::New() const {
  return new msg_syn_ctrl_user_cfg;
}

void msg_syn_ctrl_user_cfg::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    opertype_ = 0u;
    tag_suid_ = 0u;
    if (has_tag_sdeviceid()) {
      if (tag_sdeviceid_ != &::google::protobuf::internal::kEmptyString) {
        tag_sdeviceid_->clear();
      }
    }
    tag_tuid_ = 0u;
    if (has_tag_skey()) {
      if (tag_skey_ != &::google::protobuf::internal::kEmptyString) {
        tag_skey_->clear();
      }
    }
  }
  vec_suid_.Clear();
  tag_cgid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_syn_ctrl_user_cfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 vec_suid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vec_suid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_vec_suid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_vec_suid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_vec_suid;
        if (input->ExpectTag(16)) goto parse_opertype;
        break;
      }

      // optional uint32 opertype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opertype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opertype_)));
          set_has_opertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tag_suid;
        break;
      }

      // optional uint32 tag_suid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tag_suid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tag_suid_)));
          set_has_tag_suid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tag_sdeviceid;
        break;
      }

      // optional bytes tag_sdeviceid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tag_sdeviceid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tag_sdeviceid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_tag_tuid;
        break;
      }

      // optional uint32 tag_tuid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tag_tuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tag_tuid_)));
          set_has_tag_tuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tag_cgid;
        break;
      }

      // repeated uint32 tag_cgid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tag_cgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_tag_cgid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_tag_cgid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tag_cgid;
        if (input->ExpectTag(58)) goto parse_tag_skey;
        break;
      }

      // optional bytes tag_skey = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tag_skey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tag_skey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_syn_ctrl_user_cfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 vec_suid = 1;
  for (int i = 0; i < this->vec_suid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->vec_suid(i), output);
  }

  // optional uint32 opertype = 2;
  if (has_opertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->opertype(), output);
  }

  // optional uint32 tag_suid = 3;
  if (has_tag_suid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tag_suid(), output);
  }

  // optional bytes tag_sdeviceid = 4;
  if (has_tag_sdeviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->tag_sdeviceid(), output);
  }

  // optional uint32 tag_tuid = 5;
  if (has_tag_tuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tag_tuid(), output);
  }

  // repeated uint32 tag_cgid = 6;
  for (int i = 0; i < this->tag_cgid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->tag_cgid(i), output);
  }

  // optional bytes tag_skey = 7;
  if (has_tag_skey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->tag_skey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_syn_ctrl_user_cfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 vec_suid = 1;
  for (int i = 0; i < this->vec_suid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->vec_suid(i), target);
  }

  // optional uint32 opertype = 2;
  if (has_opertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->opertype(), target);
  }

  // optional uint32 tag_suid = 3;
  if (has_tag_suid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tag_suid(), target);
  }

  // optional bytes tag_sdeviceid = 4;
  if (has_tag_sdeviceid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->tag_sdeviceid(), target);
  }

  // optional uint32 tag_tuid = 5;
  if (has_tag_tuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tag_tuid(), target);
  }

  // repeated uint32 tag_cgid = 6;
  for (int i = 0; i < this->tag_cgid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->tag_cgid(i), target);
  }

  // optional bytes tag_skey = 7;
  if (has_tag_skey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->tag_skey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_syn_ctrl_user_cfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 opertype = 2;
    if (has_opertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opertype());
    }

    // optional uint32 tag_suid = 3;
    if (has_tag_suid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tag_suid());
    }

    // optional bytes tag_sdeviceid = 4;
    if (has_tag_sdeviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tag_sdeviceid());
    }

    // optional uint32 tag_tuid = 5;
    if (has_tag_tuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tag_tuid());
    }

    // optional bytes tag_skey = 7;
    if (has_tag_skey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tag_skey());
    }

  }
  // repeated uint32 vec_suid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->vec_suid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->vec_suid(i));
    }
    total_size += 1 * this->vec_suid_size() + data_size;
  }

  // repeated uint32 tag_cgid = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->tag_cgid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->tag_cgid(i));
    }
    total_size += 1 * this->tag_cgid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_syn_ctrl_user_cfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_syn_ctrl_user_cfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_syn_ctrl_user_cfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_syn_ctrl_user_cfg::MergeFrom(const msg_syn_ctrl_user_cfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  vec_suid_.MergeFrom(from.vec_suid_);
  tag_cgid_.MergeFrom(from.tag_cgid_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_opertype()) {
      set_opertype(from.opertype());
    }
    if (from.has_tag_suid()) {
      set_tag_suid(from.tag_suid());
    }
    if (from.has_tag_sdeviceid()) {
      set_tag_sdeviceid(from.tag_sdeviceid());
    }
    if (from.has_tag_tuid()) {
      set_tag_tuid(from.tag_tuid());
    }
    if (from.has_tag_skey()) {
      set_tag_skey(from.tag_skey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_syn_ctrl_user_cfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_syn_ctrl_user_cfg::CopyFrom(const msg_syn_ctrl_user_cfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_syn_ctrl_user_cfg::IsInitialized() const {

  return true;
}

void msg_syn_ctrl_user_cfg::Swap(msg_syn_ctrl_user_cfg* other) {
  if (other != this) {
    vec_suid_.Swap(&other->vec_suid_);
    std::swap(opertype_, other->opertype_);
    std::swap(tag_suid_, other->tag_suid_);
    std::swap(tag_sdeviceid_, other->tag_sdeviceid_);
    std::swap(tag_tuid_, other->tag_tuid_);
    tag_cgid_.Swap(&other->tag_cgid_);
    std::swap(tag_skey_, other->tag_skey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_syn_ctrl_user_cfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_syn_ctrl_user_cfg_descriptor_;
  metadata.reflection = msg_syn_ctrl_user_cfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_change_room_stock_cfg::kRoomidFieldNumber;
const int msg_change_room_stock_cfg::kStockMaxFieldNumber;
const int msg_change_room_stock_cfg::kStockConversionRateFieldNumber;
const int msg_change_room_stock_cfg::kJackpotMinFieldNumber;
const int msg_change_room_stock_cfg::kJackpotMaxRateFieldNumber;
const int msg_change_room_stock_cfg::kJackpotRateFieldNumber;
const int msg_change_room_stock_cfg::kJackpotCoefficientFieldNumber;
const int msg_change_room_stock_cfg::kJackpotExtractRateFieldNumber;
const int msg_change_room_stock_cfg::kAddStockFieldNumber;
const int msg_change_room_stock_cfg::kKillPointsLineFieldNumber;
const int msg_change_room_stock_cfg::kPlayerWinRateFieldNumber;
const int msg_change_room_stock_cfg::kAddJackpotFieldNumber;
#endif  // !_MSC_VER

msg_change_room_stock_cfg::msg_change_room_stock_cfg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_change_room_stock_cfg::InitAsDefaultInstance() {
}

msg_change_room_stock_cfg::msg_change_room_stock_cfg(const msg_change_room_stock_cfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_change_room_stock_cfg::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  stock_max_ = GOOGLE_LONGLONG(0);
  stock_conversion_rate_ = 0;
  jackpot_min_ = GOOGLE_LONGLONG(0);
  jackpot_max_rate_ = 0;
  jackpot_rate_ = 0;
  jackpot_coefficient_ = 0;
  jackpot_extract_rate_ = 0;
  add_stock_ = GOOGLE_LONGLONG(0);
  kill_points_line_ = GOOGLE_LONGLONG(0);
  player_win_rate_ = 0;
  add_jackpot_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_change_room_stock_cfg::~msg_change_room_stock_cfg() {
  SharedDtor();
}

void msg_change_room_stock_cfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_change_room_stock_cfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_change_room_stock_cfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_change_room_stock_cfg_descriptor_;
}

const msg_change_room_stock_cfg& msg_change_room_stock_cfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_change_room_stock_cfg* msg_change_room_stock_cfg::default_instance_ = NULL;

msg_change_room_stock_cfg* msg_change_room_stock_cfg::New() const {
  return new msg_change_room_stock_cfg;
}

void msg_change_room_stock_cfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
    stock_max_ = GOOGLE_LONGLONG(0);
    stock_conversion_rate_ = 0;
    jackpot_min_ = GOOGLE_LONGLONG(0);
    jackpot_max_rate_ = 0;
    jackpot_rate_ = 0;
    jackpot_coefficient_ = 0;
    jackpot_extract_rate_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    add_stock_ = GOOGLE_LONGLONG(0);
    kill_points_line_ = GOOGLE_LONGLONG(0);
    player_win_rate_ = 0;
    add_jackpot_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_change_room_stock_cfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 roomid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stock_max;
        break;
      }

      // optional int64 stock_max = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stock_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stock_max_)));
          set_has_stock_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stock_conversion_rate;
        break;
      }

      // optional int32 stock_conversion_rate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stock_conversion_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stock_conversion_rate_)));
          set_has_stock_conversion_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_jackpot_min;
        break;
      }

      // optional int64 jackpot_min = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jackpot_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &jackpot_min_)));
          set_has_jackpot_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_jackpot_max_rate;
        break;
      }

      // optional int32 jackpot_max_rate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jackpot_max_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jackpot_max_rate_)));
          set_has_jackpot_max_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_jackpot_rate;
        break;
      }

      // optional int32 jackpot_rate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jackpot_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jackpot_rate_)));
          set_has_jackpot_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_jackpot_coefficient;
        break;
      }

      // optional int32 jackpot_coefficient = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jackpot_coefficient:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jackpot_coefficient_)));
          set_has_jackpot_coefficient();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_jackpot_extract_rate;
        break;
      }

      // optional int32 jackpot_extract_rate = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jackpot_extract_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jackpot_extract_rate_)));
          set_has_jackpot_extract_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_add_stock;
        break;
      }

      // optional int64 add_stock = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_stock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &add_stock_)));
          set_has_add_stock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_kill_points_line;
        break;
      }

      // optional int64 kill_points_line = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_points_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &kill_points_line_)));
          set_has_kill_points_line();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_player_win_rate;
        break;
      }

      // optional int32 player_win_rate = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_win_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_win_rate_)));
          set_has_player_win_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_add_jackpot;
        break;
      }

      // optional int64 add_jackpot = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_jackpot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &add_jackpot_)));
          set_has_add_jackpot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_change_room_stock_cfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional int64 stock_max = 2;
  if (has_stock_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->stock_max(), output);
  }

  // optional int32 stock_conversion_rate = 3;
  if (has_stock_conversion_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->stock_conversion_rate(), output);
  }

  // optional int64 jackpot_min = 4;
  if (has_jackpot_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->jackpot_min(), output);
  }

  // optional int32 jackpot_max_rate = 5;
  if (has_jackpot_max_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->jackpot_max_rate(), output);
  }

  // optional int32 jackpot_rate = 6;
  if (has_jackpot_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->jackpot_rate(), output);
  }

  // optional int32 jackpot_coefficient = 7;
  if (has_jackpot_coefficient()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->jackpot_coefficient(), output);
  }

  // optional int32 jackpot_extract_rate = 8;
  if (has_jackpot_extract_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->jackpot_extract_rate(), output);
  }

  // optional int64 add_stock = 9;
  if (has_add_stock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->add_stock(), output);
  }

  // optional int64 kill_points_line = 10;
  if (has_kill_points_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->kill_points_line(), output);
  }

  // optional int32 player_win_rate = 11;
  if (has_player_win_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->player_win_rate(), output);
  }

  // optional int64 add_jackpot = 12;
  if (has_add_jackpot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->add_jackpot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_change_room_stock_cfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 roomid = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional int64 stock_max = 2;
  if (has_stock_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->stock_max(), target);
  }

  // optional int32 stock_conversion_rate = 3;
  if (has_stock_conversion_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->stock_conversion_rate(), target);
  }

  // optional int64 jackpot_min = 4;
  if (has_jackpot_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->jackpot_min(), target);
  }

  // optional int32 jackpot_max_rate = 5;
  if (has_jackpot_max_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->jackpot_max_rate(), target);
  }

  // optional int32 jackpot_rate = 6;
  if (has_jackpot_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->jackpot_rate(), target);
  }

  // optional int32 jackpot_coefficient = 7;
  if (has_jackpot_coefficient()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->jackpot_coefficient(), target);
  }

  // optional int32 jackpot_extract_rate = 8;
  if (has_jackpot_extract_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->jackpot_extract_rate(), target);
  }

  // optional int64 add_stock = 9;
  if (has_add_stock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->add_stock(), target);
  }

  // optional int64 kill_points_line = 10;
  if (has_kill_points_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->kill_points_line(), target);
  }

  // optional int32 player_win_rate = 11;
  if (has_player_win_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->player_win_rate(), target);
  }

  // optional int64 add_jackpot = 12;
  if (has_add_jackpot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->add_jackpot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_change_room_stock_cfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional int64 stock_max = 2;
    if (has_stock_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->stock_max());
    }

    // optional int32 stock_conversion_rate = 3;
    if (has_stock_conversion_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stock_conversion_rate());
    }

    // optional int64 jackpot_min = 4;
    if (has_jackpot_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->jackpot_min());
    }

    // optional int32 jackpot_max_rate = 5;
    if (has_jackpot_max_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jackpot_max_rate());
    }

    // optional int32 jackpot_rate = 6;
    if (has_jackpot_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jackpot_rate());
    }

    // optional int32 jackpot_coefficient = 7;
    if (has_jackpot_coefficient()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jackpot_coefficient());
    }

    // optional int32 jackpot_extract_rate = 8;
    if (has_jackpot_extract_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jackpot_extract_rate());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 add_stock = 9;
    if (has_add_stock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->add_stock());
    }

    // optional int64 kill_points_line = 10;
    if (has_kill_points_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->kill_points_line());
    }

    // optional int32 player_win_rate = 11;
    if (has_player_win_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_win_rate());
    }

    // optional int64 add_jackpot = 12;
    if (has_add_jackpot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->add_jackpot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_change_room_stock_cfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_change_room_stock_cfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_change_room_stock_cfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_change_room_stock_cfg::MergeFrom(const msg_change_room_stock_cfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_stock_max()) {
      set_stock_max(from.stock_max());
    }
    if (from.has_stock_conversion_rate()) {
      set_stock_conversion_rate(from.stock_conversion_rate());
    }
    if (from.has_jackpot_min()) {
      set_jackpot_min(from.jackpot_min());
    }
    if (from.has_jackpot_max_rate()) {
      set_jackpot_max_rate(from.jackpot_max_rate());
    }
    if (from.has_jackpot_rate()) {
      set_jackpot_rate(from.jackpot_rate());
    }
    if (from.has_jackpot_coefficient()) {
      set_jackpot_coefficient(from.jackpot_coefficient());
    }
    if (from.has_jackpot_extract_rate()) {
      set_jackpot_extract_rate(from.jackpot_extract_rate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_add_stock()) {
      set_add_stock(from.add_stock());
    }
    if (from.has_kill_points_line()) {
      set_kill_points_line(from.kill_points_line());
    }
    if (from.has_player_win_rate()) {
      set_player_win_rate(from.player_win_rate());
    }
    if (from.has_add_jackpot()) {
      set_add_jackpot(from.add_jackpot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_change_room_stock_cfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_change_room_stock_cfg::CopyFrom(const msg_change_room_stock_cfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_change_room_stock_cfg::IsInitialized() const {

  return true;
}

void msg_change_room_stock_cfg::Swap(msg_change_room_stock_cfg* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(stock_max_, other->stock_max_);
    std::swap(stock_conversion_rate_, other->stock_conversion_rate_);
    std::swap(jackpot_min_, other->jackpot_min_);
    std::swap(jackpot_max_rate_, other->jackpot_max_rate_);
    std::swap(jackpot_rate_, other->jackpot_rate_);
    std::swap(jackpot_coefficient_, other->jackpot_coefficient_);
    std::swap(jackpot_extract_rate_, other->jackpot_extract_rate_);
    std::swap(add_stock_, other->add_stock_);
    std::swap(kill_points_line_, other->kill_points_line_);
    std::swap(player_win_rate_, other->player_win_rate_);
    std::swap(add_jackpot_, other->add_jackpot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_change_room_stock_cfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_change_room_stock_cfg_descriptor_;
  metadata.reflection = msg_change_room_stock_cfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_syn_lucky_cfg::kUidFieldNumber;
#endif  // !_MSC_VER

msg_syn_lucky_cfg::msg_syn_lucky_cfg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_syn_lucky_cfg::InitAsDefaultInstance() {
}

msg_syn_lucky_cfg::msg_syn_lucky_cfg(const msg_syn_lucky_cfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_syn_lucky_cfg::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_syn_lucky_cfg::~msg_syn_lucky_cfg() {
  SharedDtor();
}

void msg_syn_lucky_cfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_syn_lucky_cfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_syn_lucky_cfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_syn_lucky_cfg_descriptor_;
}

const msg_syn_lucky_cfg& msg_syn_lucky_cfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_syn_lucky_cfg* msg_syn_lucky_cfg::default_instance_ = NULL;

msg_syn_lucky_cfg* msg_syn_lucky_cfg::New() const {
  return new msg_syn_lucky_cfg;
}

void msg_syn_lucky_cfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_syn_lucky_cfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_syn_lucky_cfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_syn_lucky_cfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_syn_lucky_cfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_syn_lucky_cfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_syn_lucky_cfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_syn_lucky_cfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_syn_lucky_cfg::MergeFrom(const msg_syn_lucky_cfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_syn_lucky_cfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_syn_lucky_cfg::CopyFrom(const msg_syn_lucky_cfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_syn_lucky_cfg::IsInitialized() const {

  return true;
}

void msg_syn_lucky_cfg::Swap(msg_syn_lucky_cfg* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_syn_lucky_cfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_syn_lucky_cfg_descriptor_;
  metadata.reflection = msg_syn_lucky_cfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_syn_fish_cfg::kIdFieldNumber;
const int msg_syn_fish_cfg::kPrizeMinFieldNumber;
const int msg_syn_fish_cfg::kPrizeMaxFieldNumber;
const int msg_syn_fish_cfg::kKillRateFieldNumber;
#endif  // !_MSC_VER

msg_syn_fish_cfg::msg_syn_fish_cfg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_syn_fish_cfg::InitAsDefaultInstance() {
}

msg_syn_fish_cfg::msg_syn_fish_cfg(const msg_syn_fish_cfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_syn_fish_cfg::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  prize_min_ = 0u;
  prize_max_ = 0u;
  kill_rate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_syn_fish_cfg::~msg_syn_fish_cfg() {
  SharedDtor();
}

void msg_syn_fish_cfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_syn_fish_cfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_syn_fish_cfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_syn_fish_cfg_descriptor_;
}

const msg_syn_fish_cfg& msg_syn_fish_cfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_syn_fish_cfg* msg_syn_fish_cfg::default_instance_ = NULL;

msg_syn_fish_cfg* msg_syn_fish_cfg::New() const {
  return new msg_syn_fish_cfg;
}

void msg_syn_fish_cfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    prize_min_ = 0u;
    prize_max_ = 0u;
    kill_rate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_syn_fish_cfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_prize_min;
        break;
      }

      // optional uint32 prize_min = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prize_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prize_min_)));
          set_has_prize_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_prize_max;
        break;
      }

      // optional uint32 prize_max = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prize_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prize_max_)));
          set_has_prize_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_kill_rate;
        break;
      }

      // optional uint32 kill_rate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_rate_)));
          set_has_kill_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_syn_fish_cfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 prize_min = 2;
  if (has_prize_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->prize_min(), output);
  }

  // optional uint32 prize_max = 3;
  if (has_prize_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->prize_max(), output);
  }

  // optional uint32 kill_rate = 4;
  if (has_kill_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->kill_rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_syn_fish_cfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 prize_min = 2;
  if (has_prize_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->prize_min(), target);
  }

  // optional uint32 prize_max = 3;
  if (has_prize_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->prize_max(), target);
  }

  // optional uint32 kill_rate = 4;
  if (has_kill_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->kill_rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_syn_fish_cfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 prize_min = 2;
    if (has_prize_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prize_min());
    }

    // optional uint32 prize_max = 3;
    if (has_prize_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prize_max());
    }

    // optional uint32 kill_rate = 4;
    if (has_kill_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kill_rate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_syn_fish_cfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_syn_fish_cfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_syn_fish_cfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_syn_fish_cfg::MergeFrom(const msg_syn_fish_cfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_prize_min()) {
      set_prize_min(from.prize_min());
    }
    if (from.has_prize_max()) {
      set_prize_max(from.prize_max());
    }
    if (from.has_kill_rate()) {
      set_kill_rate(from.kill_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_syn_fish_cfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_syn_fish_cfg::CopyFrom(const msg_syn_fish_cfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_syn_fish_cfg::IsInitialized() const {

  return true;
}

void msg_syn_fish_cfg::Swap(msg_syn_fish_cfg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(prize_min_, other->prize_min_);
    std::swap(prize_max_, other->prize_max_);
    std::swap(kill_rate_, other->kill_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_syn_fish_cfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_syn_fish_cfg_descriptor_;
  metadata.reflection = msg_syn_fish_cfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_reset_lucky_cfg::kUidFieldNumber;
#endif  // !_MSC_VER

msg_reset_lucky_cfg::msg_reset_lucky_cfg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_reset_lucky_cfg::InitAsDefaultInstance() {
}

msg_reset_lucky_cfg::msg_reset_lucky_cfg(const msg_reset_lucky_cfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_reset_lucky_cfg::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_reset_lucky_cfg::~msg_reset_lucky_cfg() {
  SharedDtor();
}

void msg_reset_lucky_cfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_reset_lucky_cfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_reset_lucky_cfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_reset_lucky_cfg_descriptor_;
}

const msg_reset_lucky_cfg& msg_reset_lucky_cfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_servers_5fmsg_2eproto();
  return *default_instance_;
}

msg_reset_lucky_cfg* msg_reset_lucky_cfg::default_instance_ = NULL;

msg_reset_lucky_cfg* msg_reset_lucky_cfg::New() const {
  return new msg_reset_lucky_cfg;
}

void msg_reset_lucky_cfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_reset_lucky_cfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_reset_lucky_cfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_reset_lucky_cfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_reset_lucky_cfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_reset_lucky_cfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_reset_lucky_cfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_reset_lucky_cfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_reset_lucky_cfg::MergeFrom(const msg_reset_lucky_cfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_reset_lucky_cfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_reset_lucky_cfg::CopyFrom(const msg_reset_lucky_cfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_reset_lucky_cfg::IsInitialized() const {

  return true;
}

void msg_reset_lucky_cfg::Swap(msg_reset_lucky_cfg* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_reset_lucky_cfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_reset_lucky_cfg_descriptor_;
  metadata.reflection = msg_reset_lucky_cfg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace net

// @@protoc_insertion_point(global_scope)
