// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: baccarat_logic_msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "baccarat_logic_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace net {

namespace {

const ::google::protobuf::Descriptor* msg_baccarat_game_info_free_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_baccarat_game_info_free_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_baccarat_game_info_play_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_baccarat_game_info_play_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_baccarat_start_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_baccarat_start_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_baccarat_place_jetton_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_baccarat_place_jetton_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_baccarat_place_jetton_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_baccarat_place_jetton_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_baccarat_place_jetton_broadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_baccarat_place_jetton_broadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_baccarat_game_end_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_baccarat_game_end_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_baccarat_apply_banker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_baccarat_apply_banker_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_baccarat_apply_banker_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_baccarat_apply_banker_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_baccarat_change_banker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_baccarat_change_banker_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_baccarat_change_user_score_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_baccarat_change_user_score_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_baccarat_apply_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_baccarat_apply_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_baccarat_jump_apply_queue_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_baccarat_jump_apply_queue_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_baccarat_jump_apply_queue_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_baccarat_jump_apply_queue_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_baccarat_banker_calc_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_baccarat_banker_calc_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_baccarat_add_bankerscore_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_baccarat_add_bankerscore_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* baccarat_play_log_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  baccarat_play_log_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_baccarat_play_log_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_baccarat_play_log_rep_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_baccarat_5flogic_5fmsg_2eproto() {
  protobuf_AddDesc_baccarat_5flogic_5fmsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "baccarat_logic_msg.proto");
  GOOGLE_CHECK(file != NULL);
  msg_baccarat_game_info_free_rep_descriptor_ = file->message_type(0);
  static const int msg_baccarat_game_info_free_rep_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_game_info_free_rep, time_leave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_game_info_free_rep, banker_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_game_info_free_rep, banker_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_game_info_free_rep, banker_win_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_game_info_free_rep, banker_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_game_info_free_rep, banker_buyin_score_),
  };
  msg_baccarat_game_info_free_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_baccarat_game_info_free_rep_descriptor_,
      msg_baccarat_game_info_free_rep::default_instance_,
      msg_baccarat_game_info_free_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_game_info_free_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_game_info_free_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_baccarat_game_info_free_rep));
  msg_baccarat_game_info_play_rep_descriptor_ = file->message_type(1);
  static const int msg_baccarat_game_info_play_rep_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_game_info_play_rep, all_jetton_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_game_info_play_rep, table_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_game_info_play_rep, banker_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_game_info_play_rep, banker_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_game_info_play_rep, banker_win_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_game_info_play_rep, banker_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_game_info_play_rep, time_leave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_game_info_play_rep, game_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_game_info_play_rep, self_jetton_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_game_info_play_rep, banker_buyin_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_game_info_play_rep, need_leave_banker_),
  };
  msg_baccarat_game_info_play_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_baccarat_game_info_play_rep_descriptor_,
      msg_baccarat_game_info_play_rep::default_instance_,
      msg_baccarat_game_info_play_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_game_info_play_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_game_info_play_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_baccarat_game_info_play_rep));
  msg_baccarat_start_rep_descriptor_ = file->message_type(2);
  static const int msg_baccarat_start_rep_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_start_rep, banker_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_start_rep, banker_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_start_rep, time_leave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_start_rep, banker_buyin_score_),
  };
  msg_baccarat_start_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_baccarat_start_rep_descriptor_,
      msg_baccarat_start_rep::default_instance_,
      msg_baccarat_start_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_start_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_start_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_baccarat_start_rep));
  msg_baccarat_place_jetton_req_descriptor_ = file->message_type(3);
  static const int msg_baccarat_place_jetton_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_place_jetton_req, jetton_area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_place_jetton_req, jetton_score_),
  };
  msg_baccarat_place_jetton_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_baccarat_place_jetton_req_descriptor_,
      msg_baccarat_place_jetton_req::default_instance_,
      msg_baccarat_place_jetton_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_place_jetton_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_place_jetton_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_baccarat_place_jetton_req));
  msg_baccarat_place_jetton_rep_descriptor_ = file->message_type(4);
  static const int msg_baccarat_place_jetton_rep_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_place_jetton_rep, jetton_area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_place_jetton_rep, jetton_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_place_jetton_rep, result_),
  };
  msg_baccarat_place_jetton_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_baccarat_place_jetton_rep_descriptor_,
      msg_baccarat_place_jetton_rep::default_instance_,
      msg_baccarat_place_jetton_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_place_jetton_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_place_jetton_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_baccarat_place_jetton_rep));
  msg_baccarat_place_jetton_broadcast_descriptor_ = file->message_type(5);
  static const int msg_baccarat_place_jetton_broadcast_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_place_jetton_broadcast, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_place_jetton_broadcast, jetton_area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_place_jetton_broadcast, jetton_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_place_jetton_broadcast, total_jetton_score_),
  };
  msg_baccarat_place_jetton_broadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_baccarat_place_jetton_broadcast_descriptor_,
      msg_baccarat_place_jetton_broadcast::default_instance_,
      msg_baccarat_place_jetton_broadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_place_jetton_broadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_place_jetton_broadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_baccarat_place_jetton_broadcast));
  msg_baccarat_game_end_descriptor_ = file->message_type(6);
  static const int msg_baccarat_game_end_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_game_end, time_leave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_game_end, table_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_game_end, card_types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_game_end, banker_win_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_game_end, banker_total_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_game_end, banker_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_game_end, user_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_game_end, player_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_game_end, win_types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_game_end, remain_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_game_end, settle_accounts_type_),
  };
  msg_baccarat_game_end_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_baccarat_game_end_descriptor_,
      msg_baccarat_game_end::default_instance_,
      msg_baccarat_game_end_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_game_end, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_game_end, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_baccarat_game_end));
  msg_baccarat_apply_banker_descriptor_ = file->message_type(7);
  static const int msg_baccarat_apply_banker_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_apply_banker, apply_oper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_apply_banker, apply_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_apply_banker, auto_addscore_),
  };
  msg_baccarat_apply_banker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_baccarat_apply_banker_descriptor_,
      msg_baccarat_apply_banker::default_instance_,
      msg_baccarat_apply_banker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_apply_banker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_apply_banker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_baccarat_apply_banker));
  msg_baccarat_apply_banker_rep_descriptor_ = file->message_type(8);
  static const int msg_baccarat_apply_banker_rep_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_apply_banker_rep, apply_oper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_apply_banker_rep, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_apply_banker_rep, buyin_score_),
  };
  msg_baccarat_apply_banker_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_baccarat_apply_banker_rep_descriptor_,
      msg_baccarat_apply_banker_rep::default_instance_,
      msg_baccarat_apply_banker_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_apply_banker_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_apply_banker_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_baccarat_apply_banker_rep));
  msg_baccarat_change_banker_descriptor_ = file->message_type(9);
  static const int msg_baccarat_change_banker_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_change_banker, banker_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_change_banker, banker_score_),
  };
  msg_baccarat_change_banker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_baccarat_change_banker_descriptor_,
      msg_baccarat_change_banker::default_instance_,
      msg_baccarat_change_banker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_change_banker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_change_banker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_baccarat_change_banker));
  msg_baccarat_change_user_score_descriptor_ = file->message_type(10);
  static const int msg_baccarat_change_user_score_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_change_user_score, chair_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_change_user_score, score_),
  };
  msg_baccarat_change_user_score_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_baccarat_change_user_score_descriptor_,
      msg_baccarat_change_user_score::default_instance_,
      msg_baccarat_change_user_score_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_change_user_score, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_change_user_score, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_baccarat_change_user_score));
  msg_baccarat_apply_list_descriptor_ = file->message_type(11);
  static const int msg_baccarat_apply_list_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_apply_list, player_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_apply_list, apply_score_),
  };
  msg_baccarat_apply_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_baccarat_apply_list_descriptor_,
      msg_baccarat_apply_list::default_instance_,
      msg_baccarat_apply_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_apply_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_apply_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_baccarat_apply_list));
  msg_baccarat_jump_apply_queue_req_descriptor_ = file->message_type(12);
  static const int msg_baccarat_jump_apply_queue_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_jump_apply_queue_req, jump_pos_),
  };
  msg_baccarat_jump_apply_queue_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_baccarat_jump_apply_queue_req_descriptor_,
      msg_baccarat_jump_apply_queue_req::default_instance_,
      msg_baccarat_jump_apply_queue_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_jump_apply_queue_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_jump_apply_queue_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_baccarat_jump_apply_queue_req));
  msg_baccarat_jump_apply_queue_rep_descriptor_ = file->message_type(13);
  static const int msg_baccarat_jump_apply_queue_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_jump_apply_queue_rep, result_),
  };
  msg_baccarat_jump_apply_queue_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_baccarat_jump_apply_queue_rep_descriptor_,
      msg_baccarat_jump_apply_queue_rep::default_instance_,
      msg_baccarat_jump_apply_queue_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_jump_apply_queue_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_jump_apply_queue_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_baccarat_jump_apply_queue_rep));
  msg_baccarat_banker_calc_rep_descriptor_ = file->message_type(14);
  static const int msg_baccarat_banker_calc_rep_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_banker_calc_rep, banker_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_banker_calc_rep, win_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_banker_calc_rep, buyin_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_banker_calc_rep, win_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_banker_calc_rep, win_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_banker_calc_rep, win_min_),
  };
  msg_baccarat_banker_calc_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_baccarat_banker_calc_rep_descriptor_,
      msg_baccarat_banker_calc_rep::default_instance_,
      msg_baccarat_banker_calc_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_banker_calc_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_banker_calc_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_baccarat_banker_calc_rep));
  msg_baccarat_add_bankerscore_rep_descriptor_ = file->message_type(15);
  static const int msg_baccarat_add_bankerscore_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_add_bankerscore_rep, buyin_score_),
  };
  msg_baccarat_add_bankerscore_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_baccarat_add_bankerscore_rep_descriptor_,
      msg_baccarat_add_bankerscore_rep::default_instance_,
      msg_baccarat_add_bankerscore_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_add_bankerscore_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_add_bankerscore_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_baccarat_add_bankerscore_rep));
  baccarat_play_log_descriptor_ = file->message_type(16);
  static const int baccarat_play_log_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baccarat_play_log, player_pair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baccarat_play_log, banker_pair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baccarat_play_log, player_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baccarat_play_log, banker_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baccarat_play_log, is_small_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baccarat_play_log, is_super_six_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baccarat_play_log, index_),
  };
  baccarat_play_log_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      baccarat_play_log_descriptor_,
      baccarat_play_log::default_instance_,
      baccarat_play_log_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baccarat_play_log, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baccarat_play_log, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(baccarat_play_log));
  msg_baccarat_play_log_rep_descriptor_ = file->message_type(17);
  static const int msg_baccarat_play_log_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_play_log_rep, logs_),
  };
  msg_baccarat_play_log_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_baccarat_play_log_rep_descriptor_,
      msg_baccarat_play_log_rep::default_instance_,
      msg_baccarat_play_log_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_play_log_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_baccarat_play_log_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_baccarat_play_log_rep));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_baccarat_5flogic_5fmsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_baccarat_game_info_free_rep_descriptor_, &msg_baccarat_game_info_free_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_baccarat_game_info_play_rep_descriptor_, &msg_baccarat_game_info_play_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_baccarat_start_rep_descriptor_, &msg_baccarat_start_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_baccarat_place_jetton_req_descriptor_, &msg_baccarat_place_jetton_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_baccarat_place_jetton_rep_descriptor_, &msg_baccarat_place_jetton_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_baccarat_place_jetton_broadcast_descriptor_, &msg_baccarat_place_jetton_broadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_baccarat_game_end_descriptor_, &msg_baccarat_game_end::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_baccarat_apply_banker_descriptor_, &msg_baccarat_apply_banker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_baccarat_apply_banker_rep_descriptor_, &msg_baccarat_apply_banker_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_baccarat_change_banker_descriptor_, &msg_baccarat_change_banker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_baccarat_change_user_score_descriptor_, &msg_baccarat_change_user_score::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_baccarat_apply_list_descriptor_, &msg_baccarat_apply_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_baccarat_jump_apply_queue_req_descriptor_, &msg_baccarat_jump_apply_queue_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_baccarat_jump_apply_queue_rep_descriptor_, &msg_baccarat_jump_apply_queue_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_baccarat_banker_calc_rep_descriptor_, &msg_baccarat_banker_calc_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_baccarat_add_bankerscore_rep_descriptor_, &msg_baccarat_add_bankerscore_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    baccarat_play_log_descriptor_, &baccarat_play_log::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_baccarat_play_log_rep_descriptor_, &msg_baccarat_play_log_rep::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_baccarat_5flogic_5fmsg_2eproto() {
  delete msg_baccarat_game_info_free_rep::default_instance_;
  delete msg_baccarat_game_info_free_rep_reflection_;
  delete msg_baccarat_game_info_play_rep::default_instance_;
  delete msg_baccarat_game_info_play_rep_reflection_;
  delete msg_baccarat_start_rep::default_instance_;
  delete msg_baccarat_start_rep_reflection_;
  delete msg_baccarat_place_jetton_req::default_instance_;
  delete msg_baccarat_place_jetton_req_reflection_;
  delete msg_baccarat_place_jetton_rep::default_instance_;
  delete msg_baccarat_place_jetton_rep_reflection_;
  delete msg_baccarat_place_jetton_broadcast::default_instance_;
  delete msg_baccarat_place_jetton_broadcast_reflection_;
  delete msg_baccarat_game_end::default_instance_;
  delete msg_baccarat_game_end_reflection_;
  delete msg_baccarat_apply_banker::default_instance_;
  delete msg_baccarat_apply_banker_reflection_;
  delete msg_baccarat_apply_banker_rep::default_instance_;
  delete msg_baccarat_apply_banker_rep_reflection_;
  delete msg_baccarat_change_banker::default_instance_;
  delete msg_baccarat_change_banker_reflection_;
  delete msg_baccarat_change_user_score::default_instance_;
  delete msg_baccarat_change_user_score_reflection_;
  delete msg_baccarat_apply_list::default_instance_;
  delete msg_baccarat_apply_list_reflection_;
  delete msg_baccarat_jump_apply_queue_req::default_instance_;
  delete msg_baccarat_jump_apply_queue_req_reflection_;
  delete msg_baccarat_jump_apply_queue_rep::default_instance_;
  delete msg_baccarat_jump_apply_queue_rep_reflection_;
  delete msg_baccarat_banker_calc_rep::default_instance_;
  delete msg_baccarat_banker_calc_rep_reflection_;
  delete msg_baccarat_add_bankerscore_rep::default_instance_;
  delete msg_baccarat_add_bankerscore_rep_reflection_;
  delete baccarat_play_log::default_instance_;
  delete baccarat_play_log_reflection_;
  delete msg_baccarat_play_log_rep::default_instance_;
  delete msg_baccarat_play_log_rep_reflection_;
}

void protobuf_AddDesc_baccarat_5flogic_5fmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::net::protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  ::net::protobuf_AddDesc_error_5fcode_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030baccarat_logic_msg.proto\022\003net\032\025base_ms"
    "g_struct.proto\032\020error_code.proto\"\251\001\n\037msg"
    "_baccarat_game_info_free_rep\022\022\n\ntime_lea"
    "ve\030\001 \001(\r\022\021\n\tbanker_id\030\002 \001(\r\022\023\n\013banker_ti"
    "me\030\003 \001(\r\022\030\n\020banker_win_score\030\004 \001(\003\022\024\n\014ba"
    "nker_score\030\005 \001(\003\022\032\n\022banker_buyin_score\030\006"
    " \001(\003\"\263\002\n\037msg_baccarat_game_info_play_rep"
    "\022\030\n\020all_jetton_score\030\001 \003(\003\022#\n\013table_card"
    "s\030\002 \003(\0132\016.net.msg_cards\022\021\n\tbanker_id\030\003 \001"
    "(\r\022\023\n\013banker_time\030\004 \001(\r\022\030\n\020banker_win_sc"
    "ore\030\005 \001(\003\022\024\n\014banker_score\030\006 \001(\003\022\022\n\ntime_"
    "leave\030\007 \001(\r\022\023\n\013game_status\030\010 \001(\r\022\031\n\021self"
    "_jetton_score\030\t \003(\003\022\032\n\022banker_buyin_scor"
    "e\030\n \001(\003\022\031\n\021need_leave_banker\030\013 \001(\r\"q\n\026ms"
    "g_baccarat_start_rep\022\021\n\tbanker_id\030\001 \001(\r\022"
    "\024\n\014banker_score\030\002 \001(\003\022\022\n\ntime_leave\030\003 \001("
    "\r\022\032\n\022banker_buyin_score\030\004 \001(\003\"J\n\035msg_bac"
    "carat_place_jetton_req\022\023\n\013jetton_area\030\001 "
    "\001(\r\022\024\n\014jetton_score\030\002 \001(\003\"Z\n\035msg_baccara"
    "t_place_jetton_rep\022\023\n\013jetton_area\030\001 \001(\r\022"
    "\024\n\014jetton_score\030\002 \001(\003\022\016\n\006result\030\003 \001(\r\"y\n"
    "#msg_baccarat_place_jetton_broadcast\022\013\n\003"
    "uid\030\001 \001(\r\022\023\n\013jetton_area\030\002 \001(\r\022\024\n\014jetton"
    "_score\030\003 \001(\003\022\032\n\022total_jetton_score\030\004 \001(\003"
    "\"\237\002\n\025msg_baccarat_game_end\022\022\n\ntime_leave"
    "\030\001 \001(\r\022#\n\013table_cards\030\002 \003(\0132\016.net.msg_ca"
    "rds\022\022\n\ncard_types\030\003 \003(\r\022\030\n\020banker_win_sc"
    "ore\030\004 \001(\003\022\032\n\022banker_total_score\030\005 \001(\003\022\023\n"
    "\013banker_time\030\006 \001(\r\022\022\n\nuser_score\030\007 \001(\003\022\024"
    "\n\014player_score\030\010 \003(\003\022\021\n\twin_types\030\t \003(\r\022"
    "\023\n\013remain_card\030\n \001(\r\022\034\n\024settle_accounts_"
    "type\030\013 \001(\r\"[\n\031msg_baccarat_apply_banker\022"
    "\022\n\napply_oper\030\001 \001(\r\022\023\n\013apply_score\030\002 \001(\003"
    "\022\025\n\rauto_addscore\030\003 \001(\r\"X\n\035msg_baccarat_"
    "apply_banker_rep\022\022\n\napply_oper\030\001 \001(\r\022\016\n\006"
    "result\030\002 \001(\r\022\023\n\013buyin_score\030\003 \001(\003\"G\n\032msg"
    "_baccarat_change_banker\022\023\n\013banker_user\030\001"
    " \001(\r\022\024\n\014banker_score\030\002 \001(\003\"A\n\036msg_baccar"
    "at_change_user_score\022\020\n\010chair_id\030\001 \001(\r\022\r"
    "\n\005score\030\002 \001(\003\"B\n\027msg_baccarat_apply_list"
    "\022\022\n\nplayer_ids\030\001 \003(\r\022\023\n\013apply_score\030\002 \003("
    "\003\"5\n!msg_baccarat_jump_apply_queue_req\022\020"
    "\n\010jump_pos\030\001 \001(\r\"3\n!msg_baccarat_jump_ap"
    "ply_queue_rep\022\016\n\006result\030\001 \001(\r\"\220\001\n\034msg_ba"
    "ccarat_banker_calc_rep\022\023\n\013banker_time\030\001 "
    "\001(\r\022\021\n\twin_count\030\002 \001(\r\022\023\n\013buyin_score\030\003 "
    "\001(\003\022\021\n\twin_score\030\004 \001(\003\022\017\n\007win_max\030\005 \001(\003\022"
    "\017\n\007win_min\030\006 \001(\003\"7\n msg_baccarat_add_ban"
    "kerscore_rep\022\023\n\013buyin_score\030\001 \001(\003\"\240\001\n\021ba"
    "ccarat_play_log\022\023\n\013player_pair\030\001 \001(\r\022\023\n\013"
    "banker_pair\030\002 \001(\r\022\024\n\014player_count\030\003 \001(\r\022"
    "\024\n\014banker_count\030\004 \001(\r\022\020\n\010is_small\030\005 \001(\r\022"
    "\024\n\014is_super_six\030\006 \001(\r\022\r\n\005index\030\007 \001(\r\"A\n\031"
    "msg_baccarat_play_log_rep\022$\n\004logs\030\001 \003(\0132"
    "\026.net.baccarat_play_log", 2183);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "baccarat_logic_msg.proto", &protobuf_RegisterTypes);
  msg_baccarat_game_info_free_rep::default_instance_ = new msg_baccarat_game_info_free_rep();
  msg_baccarat_game_info_play_rep::default_instance_ = new msg_baccarat_game_info_play_rep();
  msg_baccarat_start_rep::default_instance_ = new msg_baccarat_start_rep();
  msg_baccarat_place_jetton_req::default_instance_ = new msg_baccarat_place_jetton_req();
  msg_baccarat_place_jetton_rep::default_instance_ = new msg_baccarat_place_jetton_rep();
  msg_baccarat_place_jetton_broadcast::default_instance_ = new msg_baccarat_place_jetton_broadcast();
  msg_baccarat_game_end::default_instance_ = new msg_baccarat_game_end();
  msg_baccarat_apply_banker::default_instance_ = new msg_baccarat_apply_banker();
  msg_baccarat_apply_banker_rep::default_instance_ = new msg_baccarat_apply_banker_rep();
  msg_baccarat_change_banker::default_instance_ = new msg_baccarat_change_banker();
  msg_baccarat_change_user_score::default_instance_ = new msg_baccarat_change_user_score();
  msg_baccarat_apply_list::default_instance_ = new msg_baccarat_apply_list();
  msg_baccarat_jump_apply_queue_req::default_instance_ = new msg_baccarat_jump_apply_queue_req();
  msg_baccarat_jump_apply_queue_rep::default_instance_ = new msg_baccarat_jump_apply_queue_rep();
  msg_baccarat_banker_calc_rep::default_instance_ = new msg_baccarat_banker_calc_rep();
  msg_baccarat_add_bankerscore_rep::default_instance_ = new msg_baccarat_add_bankerscore_rep();
  baccarat_play_log::default_instance_ = new baccarat_play_log();
  msg_baccarat_play_log_rep::default_instance_ = new msg_baccarat_play_log_rep();
  msg_baccarat_game_info_free_rep::default_instance_->InitAsDefaultInstance();
  msg_baccarat_game_info_play_rep::default_instance_->InitAsDefaultInstance();
  msg_baccarat_start_rep::default_instance_->InitAsDefaultInstance();
  msg_baccarat_place_jetton_req::default_instance_->InitAsDefaultInstance();
  msg_baccarat_place_jetton_rep::default_instance_->InitAsDefaultInstance();
  msg_baccarat_place_jetton_broadcast::default_instance_->InitAsDefaultInstance();
  msg_baccarat_game_end::default_instance_->InitAsDefaultInstance();
  msg_baccarat_apply_banker::default_instance_->InitAsDefaultInstance();
  msg_baccarat_apply_banker_rep::default_instance_->InitAsDefaultInstance();
  msg_baccarat_change_banker::default_instance_->InitAsDefaultInstance();
  msg_baccarat_change_user_score::default_instance_->InitAsDefaultInstance();
  msg_baccarat_apply_list::default_instance_->InitAsDefaultInstance();
  msg_baccarat_jump_apply_queue_req::default_instance_->InitAsDefaultInstance();
  msg_baccarat_jump_apply_queue_rep::default_instance_->InitAsDefaultInstance();
  msg_baccarat_banker_calc_rep::default_instance_->InitAsDefaultInstance();
  msg_baccarat_add_bankerscore_rep::default_instance_->InitAsDefaultInstance();
  baccarat_play_log::default_instance_->InitAsDefaultInstance();
  msg_baccarat_play_log_rep::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_baccarat_5flogic_5fmsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_baccarat_5flogic_5fmsg_2eproto {
  StaticDescriptorInitializer_baccarat_5flogic_5fmsg_2eproto() {
    protobuf_AddDesc_baccarat_5flogic_5fmsg_2eproto();
  }
} static_descriptor_initializer_baccarat_5flogic_5fmsg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int msg_baccarat_game_info_free_rep::kTimeLeaveFieldNumber;
const int msg_baccarat_game_info_free_rep::kBankerIdFieldNumber;
const int msg_baccarat_game_info_free_rep::kBankerTimeFieldNumber;
const int msg_baccarat_game_info_free_rep::kBankerWinScoreFieldNumber;
const int msg_baccarat_game_info_free_rep::kBankerScoreFieldNumber;
const int msg_baccarat_game_info_free_rep::kBankerBuyinScoreFieldNumber;
#endif  // !_MSC_VER

msg_baccarat_game_info_free_rep::msg_baccarat_game_info_free_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_baccarat_game_info_free_rep::InitAsDefaultInstance() {
}

msg_baccarat_game_info_free_rep::msg_baccarat_game_info_free_rep(const msg_baccarat_game_info_free_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_baccarat_game_info_free_rep::SharedCtor() {
  _cached_size_ = 0;
  time_leave_ = 0u;
  banker_id_ = 0u;
  banker_time_ = 0u;
  banker_win_score_ = GOOGLE_LONGLONG(0);
  banker_score_ = GOOGLE_LONGLONG(0);
  banker_buyin_score_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_baccarat_game_info_free_rep::~msg_baccarat_game_info_free_rep() {
  SharedDtor();
}

void msg_baccarat_game_info_free_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_baccarat_game_info_free_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_baccarat_game_info_free_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_baccarat_game_info_free_rep_descriptor_;
}

const msg_baccarat_game_info_free_rep& msg_baccarat_game_info_free_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baccarat_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_baccarat_game_info_free_rep* msg_baccarat_game_info_free_rep::default_instance_ = NULL;

msg_baccarat_game_info_free_rep* msg_baccarat_game_info_free_rep::New() const {
  return new msg_baccarat_game_info_free_rep;
}

void msg_baccarat_game_info_free_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_leave_ = 0u;
    banker_id_ = 0u;
    banker_time_ = 0u;
    banker_win_score_ = GOOGLE_LONGLONG(0);
    banker_score_ = GOOGLE_LONGLONG(0);
    banker_buyin_score_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_baccarat_game_info_free_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 time_leave = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_leave_)));
          set_has_time_leave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_banker_id;
        break;
      }

      // optional uint32 banker_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &banker_id_)));
          set_has_banker_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_banker_time;
        break;
      }

      // optional uint32 banker_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &banker_time_)));
          set_has_banker_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_banker_win_score;
        break;
      }

      // optional int64 banker_win_score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_win_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &banker_win_score_)));
          set_has_banker_win_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_banker_score;
        break;
      }

      // optional int64 banker_score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &banker_score_)));
          set_has_banker_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_banker_buyin_score;
        break;
      }

      // optional int64 banker_buyin_score = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_buyin_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &banker_buyin_score_)));
          set_has_banker_buyin_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_baccarat_game_info_free_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 time_leave = 1;
  if (has_time_leave()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time_leave(), output);
  }

  // optional uint32 banker_id = 2;
  if (has_banker_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->banker_id(), output);
  }

  // optional uint32 banker_time = 3;
  if (has_banker_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->banker_time(), output);
  }

  // optional int64 banker_win_score = 4;
  if (has_banker_win_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->banker_win_score(), output);
  }

  // optional int64 banker_score = 5;
  if (has_banker_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->banker_score(), output);
  }

  // optional int64 banker_buyin_score = 6;
  if (has_banker_buyin_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->banker_buyin_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_baccarat_game_info_free_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 time_leave = 1;
  if (has_time_leave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time_leave(), target);
  }

  // optional uint32 banker_id = 2;
  if (has_banker_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->banker_id(), target);
  }

  // optional uint32 banker_time = 3;
  if (has_banker_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->banker_time(), target);
  }

  // optional int64 banker_win_score = 4;
  if (has_banker_win_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->banker_win_score(), target);
  }

  // optional int64 banker_score = 5;
  if (has_banker_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->banker_score(), target);
  }

  // optional int64 banker_buyin_score = 6;
  if (has_banker_buyin_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->banker_buyin_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_baccarat_game_info_free_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 time_leave = 1;
    if (has_time_leave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_leave());
    }

    // optional uint32 banker_id = 2;
    if (has_banker_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->banker_id());
    }

    // optional uint32 banker_time = 3;
    if (has_banker_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->banker_time());
    }

    // optional int64 banker_win_score = 4;
    if (has_banker_win_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->banker_win_score());
    }

    // optional int64 banker_score = 5;
    if (has_banker_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->banker_score());
    }

    // optional int64 banker_buyin_score = 6;
    if (has_banker_buyin_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->banker_buyin_score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_baccarat_game_info_free_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_baccarat_game_info_free_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_baccarat_game_info_free_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_baccarat_game_info_free_rep::MergeFrom(const msg_baccarat_game_info_free_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_leave()) {
      set_time_leave(from.time_leave());
    }
    if (from.has_banker_id()) {
      set_banker_id(from.banker_id());
    }
    if (from.has_banker_time()) {
      set_banker_time(from.banker_time());
    }
    if (from.has_banker_win_score()) {
      set_banker_win_score(from.banker_win_score());
    }
    if (from.has_banker_score()) {
      set_banker_score(from.banker_score());
    }
    if (from.has_banker_buyin_score()) {
      set_banker_buyin_score(from.banker_buyin_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_baccarat_game_info_free_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_baccarat_game_info_free_rep::CopyFrom(const msg_baccarat_game_info_free_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_baccarat_game_info_free_rep::IsInitialized() const {

  return true;
}

void msg_baccarat_game_info_free_rep::Swap(msg_baccarat_game_info_free_rep* other) {
  if (other != this) {
    std::swap(time_leave_, other->time_leave_);
    std::swap(banker_id_, other->banker_id_);
    std::swap(banker_time_, other->banker_time_);
    std::swap(banker_win_score_, other->banker_win_score_);
    std::swap(banker_score_, other->banker_score_);
    std::swap(banker_buyin_score_, other->banker_buyin_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_baccarat_game_info_free_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_baccarat_game_info_free_rep_descriptor_;
  metadata.reflection = msg_baccarat_game_info_free_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_baccarat_game_info_play_rep::kAllJettonScoreFieldNumber;
const int msg_baccarat_game_info_play_rep::kTableCardsFieldNumber;
const int msg_baccarat_game_info_play_rep::kBankerIdFieldNumber;
const int msg_baccarat_game_info_play_rep::kBankerTimeFieldNumber;
const int msg_baccarat_game_info_play_rep::kBankerWinScoreFieldNumber;
const int msg_baccarat_game_info_play_rep::kBankerScoreFieldNumber;
const int msg_baccarat_game_info_play_rep::kTimeLeaveFieldNumber;
const int msg_baccarat_game_info_play_rep::kGameStatusFieldNumber;
const int msg_baccarat_game_info_play_rep::kSelfJettonScoreFieldNumber;
const int msg_baccarat_game_info_play_rep::kBankerBuyinScoreFieldNumber;
const int msg_baccarat_game_info_play_rep::kNeedLeaveBankerFieldNumber;
#endif  // !_MSC_VER

msg_baccarat_game_info_play_rep::msg_baccarat_game_info_play_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_baccarat_game_info_play_rep::InitAsDefaultInstance() {
}

msg_baccarat_game_info_play_rep::msg_baccarat_game_info_play_rep(const msg_baccarat_game_info_play_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_baccarat_game_info_play_rep::SharedCtor() {
  _cached_size_ = 0;
  banker_id_ = 0u;
  banker_time_ = 0u;
  banker_win_score_ = GOOGLE_LONGLONG(0);
  banker_score_ = GOOGLE_LONGLONG(0);
  time_leave_ = 0u;
  game_status_ = 0u;
  banker_buyin_score_ = GOOGLE_LONGLONG(0);
  need_leave_banker_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_baccarat_game_info_play_rep::~msg_baccarat_game_info_play_rep() {
  SharedDtor();
}

void msg_baccarat_game_info_play_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_baccarat_game_info_play_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_baccarat_game_info_play_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_baccarat_game_info_play_rep_descriptor_;
}

const msg_baccarat_game_info_play_rep& msg_baccarat_game_info_play_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baccarat_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_baccarat_game_info_play_rep* msg_baccarat_game_info_play_rep::default_instance_ = NULL;

msg_baccarat_game_info_play_rep* msg_baccarat_game_info_play_rep::New() const {
  return new msg_baccarat_game_info_play_rep;
}

void msg_baccarat_game_info_play_rep::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    banker_id_ = 0u;
    banker_time_ = 0u;
    banker_win_score_ = GOOGLE_LONGLONG(0);
    banker_score_ = GOOGLE_LONGLONG(0);
    time_leave_ = 0u;
    game_status_ = 0u;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    banker_buyin_score_ = GOOGLE_LONGLONG(0);
    need_leave_banker_ = 0u;
  }
  all_jetton_score_.Clear();
  table_cards_.Clear();
  self_jetton_score_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_baccarat_game_info_play_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 all_jetton_score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_jetton_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_all_jetton_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_all_jetton_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_all_jetton_score;
        if (input->ExpectTag(18)) goto parse_table_cards;
        break;
      }

      // repeated .net.msg_cards table_cards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_table_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table_cards;
        if (input->ExpectTag(24)) goto parse_banker_id;
        break;
      }

      // optional uint32 banker_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &banker_id_)));
          set_has_banker_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_banker_time;
        break;
      }

      // optional uint32 banker_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &banker_time_)));
          set_has_banker_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_banker_win_score;
        break;
      }

      // optional int64 banker_win_score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_win_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &banker_win_score_)));
          set_has_banker_win_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_banker_score;
        break;
      }

      // optional int64 banker_score = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &banker_score_)));
          set_has_banker_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_time_leave;
        break;
      }

      // optional uint32 time_leave = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_leave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_leave_)));
          set_has_time_leave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_game_status;
        break;
      }

      // optional uint32 game_status = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_status_)));
          set_has_game_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_self_jetton_score;
        break;
      }

      // repeated int64 self_jetton_score = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_jetton_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 72, input, this->mutable_self_jetton_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_self_jetton_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_self_jetton_score;
        if (input->ExpectTag(80)) goto parse_banker_buyin_score;
        break;
      }

      // optional int64 banker_buyin_score = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_buyin_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &banker_buyin_score_)));
          set_has_banker_buyin_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_need_leave_banker;
        break;
      }

      // optional uint32 need_leave_banker = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_leave_banker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &need_leave_banker_)));
          set_has_need_leave_banker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_baccarat_game_info_play_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 all_jetton_score = 1;
  for (int i = 0; i < this->all_jetton_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->all_jetton_score(i), output);
  }

  // repeated .net.msg_cards table_cards = 2;
  for (int i = 0; i < this->table_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->table_cards(i), output);
  }

  // optional uint32 banker_id = 3;
  if (has_banker_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->banker_id(), output);
  }

  // optional uint32 banker_time = 4;
  if (has_banker_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->banker_time(), output);
  }

  // optional int64 banker_win_score = 5;
  if (has_banker_win_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->banker_win_score(), output);
  }

  // optional int64 banker_score = 6;
  if (has_banker_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->banker_score(), output);
  }

  // optional uint32 time_leave = 7;
  if (has_time_leave()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->time_leave(), output);
  }

  // optional uint32 game_status = 8;
  if (has_game_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->game_status(), output);
  }

  // repeated int64 self_jetton_score = 9;
  for (int i = 0; i < this->self_jetton_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      9, this->self_jetton_score(i), output);
  }

  // optional int64 banker_buyin_score = 10;
  if (has_banker_buyin_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->banker_buyin_score(), output);
  }

  // optional uint32 need_leave_banker = 11;
  if (has_need_leave_banker()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->need_leave_banker(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_baccarat_game_info_play_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 all_jetton_score = 1;
  for (int i = 0; i < this->all_jetton_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->all_jetton_score(i), target);
  }

  // repeated .net.msg_cards table_cards = 2;
  for (int i = 0; i < this->table_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->table_cards(i), target);
  }

  // optional uint32 banker_id = 3;
  if (has_banker_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->banker_id(), target);
  }

  // optional uint32 banker_time = 4;
  if (has_banker_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->banker_time(), target);
  }

  // optional int64 banker_win_score = 5;
  if (has_banker_win_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->banker_win_score(), target);
  }

  // optional int64 banker_score = 6;
  if (has_banker_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->banker_score(), target);
  }

  // optional uint32 time_leave = 7;
  if (has_time_leave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->time_leave(), target);
  }

  // optional uint32 game_status = 8;
  if (has_game_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->game_status(), target);
  }

  // repeated int64 self_jetton_score = 9;
  for (int i = 0; i < this->self_jetton_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(9, this->self_jetton_score(i), target);
  }

  // optional int64 banker_buyin_score = 10;
  if (has_banker_buyin_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->banker_buyin_score(), target);
  }

  // optional uint32 need_leave_banker = 11;
  if (has_need_leave_banker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->need_leave_banker(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_baccarat_game_info_play_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 banker_id = 3;
    if (has_banker_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->banker_id());
    }

    // optional uint32 banker_time = 4;
    if (has_banker_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->banker_time());
    }

    // optional int64 banker_win_score = 5;
    if (has_banker_win_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->banker_win_score());
    }

    // optional int64 banker_score = 6;
    if (has_banker_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->banker_score());
    }

    // optional uint32 time_leave = 7;
    if (has_time_leave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_leave());
    }

    // optional uint32 game_status = 8;
    if (has_game_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_status());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int64 banker_buyin_score = 10;
    if (has_banker_buyin_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->banker_buyin_score());
    }

    // optional uint32 need_leave_banker = 11;
    if (has_need_leave_banker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->need_leave_banker());
    }

  }
  // repeated int64 all_jetton_score = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->all_jetton_score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->all_jetton_score(i));
    }
    total_size += 1 * this->all_jetton_score_size() + data_size;
  }

  // repeated .net.msg_cards table_cards = 2;
  total_size += 1 * this->table_cards_size();
  for (int i = 0; i < this->table_cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->table_cards(i));
  }

  // repeated int64 self_jetton_score = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->self_jetton_score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->self_jetton_score(i));
    }
    total_size += 1 * this->self_jetton_score_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_baccarat_game_info_play_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_baccarat_game_info_play_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_baccarat_game_info_play_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_baccarat_game_info_play_rep::MergeFrom(const msg_baccarat_game_info_play_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  all_jetton_score_.MergeFrom(from.all_jetton_score_);
  table_cards_.MergeFrom(from.table_cards_);
  self_jetton_score_.MergeFrom(from.self_jetton_score_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_banker_id()) {
      set_banker_id(from.banker_id());
    }
    if (from.has_banker_time()) {
      set_banker_time(from.banker_time());
    }
    if (from.has_banker_win_score()) {
      set_banker_win_score(from.banker_win_score());
    }
    if (from.has_banker_score()) {
      set_banker_score(from.banker_score());
    }
    if (from.has_time_leave()) {
      set_time_leave(from.time_leave());
    }
    if (from.has_game_status()) {
      set_game_status(from.game_status());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_banker_buyin_score()) {
      set_banker_buyin_score(from.banker_buyin_score());
    }
    if (from.has_need_leave_banker()) {
      set_need_leave_banker(from.need_leave_banker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_baccarat_game_info_play_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_baccarat_game_info_play_rep::CopyFrom(const msg_baccarat_game_info_play_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_baccarat_game_info_play_rep::IsInitialized() const {

  return true;
}

void msg_baccarat_game_info_play_rep::Swap(msg_baccarat_game_info_play_rep* other) {
  if (other != this) {
    all_jetton_score_.Swap(&other->all_jetton_score_);
    table_cards_.Swap(&other->table_cards_);
    std::swap(banker_id_, other->banker_id_);
    std::swap(banker_time_, other->banker_time_);
    std::swap(banker_win_score_, other->banker_win_score_);
    std::swap(banker_score_, other->banker_score_);
    std::swap(time_leave_, other->time_leave_);
    std::swap(game_status_, other->game_status_);
    self_jetton_score_.Swap(&other->self_jetton_score_);
    std::swap(banker_buyin_score_, other->banker_buyin_score_);
    std::swap(need_leave_banker_, other->need_leave_banker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_baccarat_game_info_play_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_baccarat_game_info_play_rep_descriptor_;
  metadata.reflection = msg_baccarat_game_info_play_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_baccarat_start_rep::kBankerIdFieldNumber;
const int msg_baccarat_start_rep::kBankerScoreFieldNumber;
const int msg_baccarat_start_rep::kTimeLeaveFieldNumber;
const int msg_baccarat_start_rep::kBankerBuyinScoreFieldNumber;
#endif  // !_MSC_VER

msg_baccarat_start_rep::msg_baccarat_start_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_baccarat_start_rep::InitAsDefaultInstance() {
}

msg_baccarat_start_rep::msg_baccarat_start_rep(const msg_baccarat_start_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_baccarat_start_rep::SharedCtor() {
  _cached_size_ = 0;
  banker_id_ = 0u;
  banker_score_ = GOOGLE_LONGLONG(0);
  time_leave_ = 0u;
  banker_buyin_score_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_baccarat_start_rep::~msg_baccarat_start_rep() {
  SharedDtor();
}

void msg_baccarat_start_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_baccarat_start_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_baccarat_start_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_baccarat_start_rep_descriptor_;
}

const msg_baccarat_start_rep& msg_baccarat_start_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baccarat_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_baccarat_start_rep* msg_baccarat_start_rep::default_instance_ = NULL;

msg_baccarat_start_rep* msg_baccarat_start_rep::New() const {
  return new msg_baccarat_start_rep;
}

void msg_baccarat_start_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    banker_id_ = 0u;
    banker_score_ = GOOGLE_LONGLONG(0);
    time_leave_ = 0u;
    banker_buyin_score_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_baccarat_start_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 banker_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &banker_id_)));
          set_has_banker_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_banker_score;
        break;
      }

      // optional int64 banker_score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &banker_score_)));
          set_has_banker_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time_leave;
        break;
      }

      // optional uint32 time_leave = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_leave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_leave_)));
          set_has_time_leave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_banker_buyin_score;
        break;
      }

      // optional int64 banker_buyin_score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_buyin_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &banker_buyin_score_)));
          set_has_banker_buyin_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_baccarat_start_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 banker_id = 1;
  if (has_banker_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->banker_id(), output);
  }

  // optional int64 banker_score = 2;
  if (has_banker_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->banker_score(), output);
  }

  // optional uint32 time_leave = 3;
  if (has_time_leave()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_leave(), output);
  }

  // optional int64 banker_buyin_score = 4;
  if (has_banker_buyin_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->banker_buyin_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_baccarat_start_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 banker_id = 1;
  if (has_banker_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->banker_id(), target);
  }

  // optional int64 banker_score = 2;
  if (has_banker_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->banker_score(), target);
  }

  // optional uint32 time_leave = 3;
  if (has_time_leave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_leave(), target);
  }

  // optional int64 banker_buyin_score = 4;
  if (has_banker_buyin_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->banker_buyin_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_baccarat_start_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 banker_id = 1;
    if (has_banker_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->banker_id());
    }

    // optional int64 banker_score = 2;
    if (has_banker_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->banker_score());
    }

    // optional uint32 time_leave = 3;
    if (has_time_leave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_leave());
    }

    // optional int64 banker_buyin_score = 4;
    if (has_banker_buyin_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->banker_buyin_score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_baccarat_start_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_baccarat_start_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_baccarat_start_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_baccarat_start_rep::MergeFrom(const msg_baccarat_start_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_banker_id()) {
      set_banker_id(from.banker_id());
    }
    if (from.has_banker_score()) {
      set_banker_score(from.banker_score());
    }
    if (from.has_time_leave()) {
      set_time_leave(from.time_leave());
    }
    if (from.has_banker_buyin_score()) {
      set_banker_buyin_score(from.banker_buyin_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_baccarat_start_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_baccarat_start_rep::CopyFrom(const msg_baccarat_start_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_baccarat_start_rep::IsInitialized() const {

  return true;
}

void msg_baccarat_start_rep::Swap(msg_baccarat_start_rep* other) {
  if (other != this) {
    std::swap(banker_id_, other->banker_id_);
    std::swap(banker_score_, other->banker_score_);
    std::swap(time_leave_, other->time_leave_);
    std::swap(banker_buyin_score_, other->banker_buyin_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_baccarat_start_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_baccarat_start_rep_descriptor_;
  metadata.reflection = msg_baccarat_start_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_baccarat_place_jetton_req::kJettonAreaFieldNumber;
const int msg_baccarat_place_jetton_req::kJettonScoreFieldNumber;
#endif  // !_MSC_VER

msg_baccarat_place_jetton_req::msg_baccarat_place_jetton_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_baccarat_place_jetton_req::InitAsDefaultInstance() {
}

msg_baccarat_place_jetton_req::msg_baccarat_place_jetton_req(const msg_baccarat_place_jetton_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_baccarat_place_jetton_req::SharedCtor() {
  _cached_size_ = 0;
  jetton_area_ = 0u;
  jetton_score_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_baccarat_place_jetton_req::~msg_baccarat_place_jetton_req() {
  SharedDtor();
}

void msg_baccarat_place_jetton_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_baccarat_place_jetton_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_baccarat_place_jetton_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_baccarat_place_jetton_req_descriptor_;
}

const msg_baccarat_place_jetton_req& msg_baccarat_place_jetton_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baccarat_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_baccarat_place_jetton_req* msg_baccarat_place_jetton_req::default_instance_ = NULL;

msg_baccarat_place_jetton_req* msg_baccarat_place_jetton_req::New() const {
  return new msg_baccarat_place_jetton_req;
}

void msg_baccarat_place_jetton_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    jetton_area_ = 0u;
    jetton_score_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_baccarat_place_jetton_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 jetton_area = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jetton_area_)));
          set_has_jetton_area();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_jetton_score;
        break;
      }

      // optional int64 jetton_score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &jetton_score_)));
          set_has_jetton_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_baccarat_place_jetton_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 jetton_area = 1;
  if (has_jetton_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->jetton_area(), output);
  }

  // optional int64 jetton_score = 2;
  if (has_jetton_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->jetton_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_baccarat_place_jetton_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 jetton_area = 1;
  if (has_jetton_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->jetton_area(), target);
  }

  // optional int64 jetton_score = 2;
  if (has_jetton_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->jetton_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_baccarat_place_jetton_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 jetton_area = 1;
    if (has_jetton_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jetton_area());
    }

    // optional int64 jetton_score = 2;
    if (has_jetton_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->jetton_score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_baccarat_place_jetton_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_baccarat_place_jetton_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_baccarat_place_jetton_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_baccarat_place_jetton_req::MergeFrom(const msg_baccarat_place_jetton_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jetton_area()) {
      set_jetton_area(from.jetton_area());
    }
    if (from.has_jetton_score()) {
      set_jetton_score(from.jetton_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_baccarat_place_jetton_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_baccarat_place_jetton_req::CopyFrom(const msg_baccarat_place_jetton_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_baccarat_place_jetton_req::IsInitialized() const {

  return true;
}

void msg_baccarat_place_jetton_req::Swap(msg_baccarat_place_jetton_req* other) {
  if (other != this) {
    std::swap(jetton_area_, other->jetton_area_);
    std::swap(jetton_score_, other->jetton_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_baccarat_place_jetton_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_baccarat_place_jetton_req_descriptor_;
  metadata.reflection = msg_baccarat_place_jetton_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_baccarat_place_jetton_rep::kJettonAreaFieldNumber;
const int msg_baccarat_place_jetton_rep::kJettonScoreFieldNumber;
const int msg_baccarat_place_jetton_rep::kResultFieldNumber;
#endif  // !_MSC_VER

msg_baccarat_place_jetton_rep::msg_baccarat_place_jetton_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_baccarat_place_jetton_rep::InitAsDefaultInstance() {
}

msg_baccarat_place_jetton_rep::msg_baccarat_place_jetton_rep(const msg_baccarat_place_jetton_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_baccarat_place_jetton_rep::SharedCtor() {
  _cached_size_ = 0;
  jetton_area_ = 0u;
  jetton_score_ = GOOGLE_LONGLONG(0);
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_baccarat_place_jetton_rep::~msg_baccarat_place_jetton_rep() {
  SharedDtor();
}

void msg_baccarat_place_jetton_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_baccarat_place_jetton_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_baccarat_place_jetton_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_baccarat_place_jetton_rep_descriptor_;
}

const msg_baccarat_place_jetton_rep& msg_baccarat_place_jetton_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baccarat_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_baccarat_place_jetton_rep* msg_baccarat_place_jetton_rep::default_instance_ = NULL;

msg_baccarat_place_jetton_rep* msg_baccarat_place_jetton_rep::New() const {
  return new msg_baccarat_place_jetton_rep;
}

void msg_baccarat_place_jetton_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    jetton_area_ = 0u;
    jetton_score_ = GOOGLE_LONGLONG(0);
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_baccarat_place_jetton_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 jetton_area = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jetton_area_)));
          set_has_jetton_area();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_jetton_score;
        break;
      }

      // optional int64 jetton_score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &jetton_score_)));
          set_has_jetton_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional uint32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_baccarat_place_jetton_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 jetton_area = 1;
  if (has_jetton_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->jetton_area(), output);
  }

  // optional int64 jetton_score = 2;
  if (has_jetton_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->jetton_score(), output);
  }

  // optional uint32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_baccarat_place_jetton_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 jetton_area = 1;
  if (has_jetton_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->jetton_area(), target);
  }

  // optional int64 jetton_score = 2;
  if (has_jetton_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->jetton_score(), target);
  }

  // optional uint32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_baccarat_place_jetton_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 jetton_area = 1;
    if (has_jetton_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jetton_area());
    }

    // optional int64 jetton_score = 2;
    if (has_jetton_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->jetton_score());
    }

    // optional uint32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_baccarat_place_jetton_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_baccarat_place_jetton_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_baccarat_place_jetton_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_baccarat_place_jetton_rep::MergeFrom(const msg_baccarat_place_jetton_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jetton_area()) {
      set_jetton_area(from.jetton_area());
    }
    if (from.has_jetton_score()) {
      set_jetton_score(from.jetton_score());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_baccarat_place_jetton_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_baccarat_place_jetton_rep::CopyFrom(const msg_baccarat_place_jetton_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_baccarat_place_jetton_rep::IsInitialized() const {

  return true;
}

void msg_baccarat_place_jetton_rep::Swap(msg_baccarat_place_jetton_rep* other) {
  if (other != this) {
    std::swap(jetton_area_, other->jetton_area_);
    std::swap(jetton_score_, other->jetton_score_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_baccarat_place_jetton_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_baccarat_place_jetton_rep_descriptor_;
  metadata.reflection = msg_baccarat_place_jetton_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_baccarat_place_jetton_broadcast::kUidFieldNumber;
const int msg_baccarat_place_jetton_broadcast::kJettonAreaFieldNumber;
const int msg_baccarat_place_jetton_broadcast::kJettonScoreFieldNumber;
const int msg_baccarat_place_jetton_broadcast::kTotalJettonScoreFieldNumber;
#endif  // !_MSC_VER

msg_baccarat_place_jetton_broadcast::msg_baccarat_place_jetton_broadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_baccarat_place_jetton_broadcast::InitAsDefaultInstance() {
}

msg_baccarat_place_jetton_broadcast::msg_baccarat_place_jetton_broadcast(const msg_baccarat_place_jetton_broadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_baccarat_place_jetton_broadcast::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  jetton_area_ = 0u;
  jetton_score_ = GOOGLE_LONGLONG(0);
  total_jetton_score_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_baccarat_place_jetton_broadcast::~msg_baccarat_place_jetton_broadcast() {
  SharedDtor();
}

void msg_baccarat_place_jetton_broadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_baccarat_place_jetton_broadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_baccarat_place_jetton_broadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_baccarat_place_jetton_broadcast_descriptor_;
}

const msg_baccarat_place_jetton_broadcast& msg_baccarat_place_jetton_broadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baccarat_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_baccarat_place_jetton_broadcast* msg_baccarat_place_jetton_broadcast::default_instance_ = NULL;

msg_baccarat_place_jetton_broadcast* msg_baccarat_place_jetton_broadcast::New() const {
  return new msg_baccarat_place_jetton_broadcast;
}

void msg_baccarat_place_jetton_broadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    jetton_area_ = 0u;
    jetton_score_ = GOOGLE_LONGLONG(0);
    total_jetton_score_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_baccarat_place_jetton_broadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_jetton_area;
        break;
      }

      // optional uint32 jetton_area = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jetton_area_)));
          set_has_jetton_area();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_jetton_score;
        break;
      }

      // optional int64 jetton_score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &jetton_score_)));
          set_has_jetton_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_jetton_score;
        break;
      }

      // optional int64 total_jetton_score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_jetton_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_jetton_score_)));
          set_has_total_jetton_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_baccarat_place_jetton_broadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 jetton_area = 2;
  if (has_jetton_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->jetton_area(), output);
  }

  // optional int64 jetton_score = 3;
  if (has_jetton_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->jetton_score(), output);
  }

  // optional int64 total_jetton_score = 4;
  if (has_total_jetton_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->total_jetton_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_baccarat_place_jetton_broadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional uint32 jetton_area = 2;
  if (has_jetton_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->jetton_area(), target);
  }

  // optional int64 jetton_score = 3;
  if (has_jetton_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->jetton_score(), target);
  }

  // optional int64 total_jetton_score = 4;
  if (has_total_jetton_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->total_jetton_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_baccarat_place_jetton_broadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 jetton_area = 2;
    if (has_jetton_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jetton_area());
    }

    // optional int64 jetton_score = 3;
    if (has_jetton_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->jetton_score());
    }

    // optional int64 total_jetton_score = 4;
    if (has_total_jetton_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_jetton_score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_baccarat_place_jetton_broadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_baccarat_place_jetton_broadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_baccarat_place_jetton_broadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_baccarat_place_jetton_broadcast::MergeFrom(const msg_baccarat_place_jetton_broadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_jetton_area()) {
      set_jetton_area(from.jetton_area());
    }
    if (from.has_jetton_score()) {
      set_jetton_score(from.jetton_score());
    }
    if (from.has_total_jetton_score()) {
      set_total_jetton_score(from.total_jetton_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_baccarat_place_jetton_broadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_baccarat_place_jetton_broadcast::CopyFrom(const msg_baccarat_place_jetton_broadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_baccarat_place_jetton_broadcast::IsInitialized() const {

  return true;
}

void msg_baccarat_place_jetton_broadcast::Swap(msg_baccarat_place_jetton_broadcast* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(jetton_area_, other->jetton_area_);
    std::swap(jetton_score_, other->jetton_score_);
    std::swap(total_jetton_score_, other->total_jetton_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_baccarat_place_jetton_broadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_baccarat_place_jetton_broadcast_descriptor_;
  metadata.reflection = msg_baccarat_place_jetton_broadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_baccarat_game_end::kTimeLeaveFieldNumber;
const int msg_baccarat_game_end::kTableCardsFieldNumber;
const int msg_baccarat_game_end::kCardTypesFieldNumber;
const int msg_baccarat_game_end::kBankerWinScoreFieldNumber;
const int msg_baccarat_game_end::kBankerTotalScoreFieldNumber;
const int msg_baccarat_game_end::kBankerTimeFieldNumber;
const int msg_baccarat_game_end::kUserScoreFieldNumber;
const int msg_baccarat_game_end::kPlayerScoreFieldNumber;
const int msg_baccarat_game_end::kWinTypesFieldNumber;
const int msg_baccarat_game_end::kRemainCardFieldNumber;
const int msg_baccarat_game_end::kSettleAccountsTypeFieldNumber;
#endif  // !_MSC_VER

msg_baccarat_game_end::msg_baccarat_game_end()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_baccarat_game_end::InitAsDefaultInstance() {
}

msg_baccarat_game_end::msg_baccarat_game_end(const msg_baccarat_game_end& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_baccarat_game_end::SharedCtor() {
  _cached_size_ = 0;
  time_leave_ = 0u;
  banker_win_score_ = GOOGLE_LONGLONG(0);
  banker_total_score_ = GOOGLE_LONGLONG(0);
  banker_time_ = 0u;
  user_score_ = GOOGLE_LONGLONG(0);
  remain_card_ = 0u;
  settle_accounts_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_baccarat_game_end::~msg_baccarat_game_end() {
  SharedDtor();
}

void msg_baccarat_game_end::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_baccarat_game_end::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_baccarat_game_end::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_baccarat_game_end_descriptor_;
}

const msg_baccarat_game_end& msg_baccarat_game_end::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baccarat_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_baccarat_game_end* msg_baccarat_game_end::default_instance_ = NULL;

msg_baccarat_game_end* msg_baccarat_game_end::New() const {
  return new msg_baccarat_game_end;
}

void msg_baccarat_game_end::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_leave_ = 0u;
    banker_win_score_ = GOOGLE_LONGLONG(0);
    banker_total_score_ = GOOGLE_LONGLONG(0);
    banker_time_ = 0u;
    user_score_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    remain_card_ = 0u;
    settle_accounts_type_ = 0u;
  }
  table_cards_.Clear();
  card_types_.Clear();
  player_score_.Clear();
  win_types_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_baccarat_game_end::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 time_leave = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_leave_)));
          set_has_time_leave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table_cards;
        break;
      }

      // repeated .net.msg_cards table_cards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_table_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table_cards;
        if (input->ExpectTag(24)) goto parse_card_types;
        break;
      }

      // repeated uint32 card_types = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_types:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_card_types())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_types())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_card_types;
        if (input->ExpectTag(32)) goto parse_banker_win_score;
        break;
      }

      // optional int64 banker_win_score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_win_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &banker_win_score_)));
          set_has_banker_win_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_banker_total_score;
        break;
      }

      // optional int64 banker_total_score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_total_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &banker_total_score_)));
          set_has_banker_total_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_banker_time;
        break;
      }

      // optional uint32 banker_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &banker_time_)));
          set_has_banker_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_user_score;
        break;
      }

      // optional int64 user_score = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_score_)));
          set_has_user_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_player_score;
        break;
      }

      // repeated int64 player_score = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 64, input, this->mutable_player_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_player_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_player_score;
        if (input->ExpectTag(72)) goto parse_win_types;
        break;
      }

      // repeated uint32 win_types = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_types:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72, input, this->mutable_win_types())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_win_types())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_win_types;
        if (input->ExpectTag(80)) goto parse_remain_card;
        break;
      }

      // optional uint32 remain_card = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remain_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remain_card_)));
          set_has_remain_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_settle_accounts_type;
        break;
      }

      // optional uint32 settle_accounts_type = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_settle_accounts_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &settle_accounts_type_)));
          set_has_settle_accounts_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_baccarat_game_end::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 time_leave = 1;
  if (has_time_leave()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time_leave(), output);
  }

  // repeated .net.msg_cards table_cards = 2;
  for (int i = 0; i < this->table_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->table_cards(i), output);
  }

  // repeated uint32 card_types = 3;
  for (int i = 0; i < this->card_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->card_types(i), output);
  }

  // optional int64 banker_win_score = 4;
  if (has_banker_win_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->banker_win_score(), output);
  }

  // optional int64 banker_total_score = 5;
  if (has_banker_total_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->banker_total_score(), output);
  }

  // optional uint32 banker_time = 6;
  if (has_banker_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->banker_time(), output);
  }

  // optional int64 user_score = 7;
  if (has_user_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->user_score(), output);
  }

  // repeated int64 player_score = 8;
  for (int i = 0; i < this->player_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      8, this->player_score(i), output);
  }

  // repeated uint32 win_types = 9;
  for (int i = 0; i < this->win_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->win_types(i), output);
  }

  // optional uint32 remain_card = 10;
  if (has_remain_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->remain_card(), output);
  }

  // optional uint32 settle_accounts_type = 11;
  if (has_settle_accounts_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->settle_accounts_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_baccarat_game_end::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 time_leave = 1;
  if (has_time_leave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time_leave(), target);
  }

  // repeated .net.msg_cards table_cards = 2;
  for (int i = 0; i < this->table_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->table_cards(i), target);
  }

  // repeated uint32 card_types = 3;
  for (int i = 0; i < this->card_types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->card_types(i), target);
  }

  // optional int64 banker_win_score = 4;
  if (has_banker_win_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->banker_win_score(), target);
  }

  // optional int64 banker_total_score = 5;
  if (has_banker_total_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->banker_total_score(), target);
  }

  // optional uint32 banker_time = 6;
  if (has_banker_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->banker_time(), target);
  }

  // optional int64 user_score = 7;
  if (has_user_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->user_score(), target);
  }

  // repeated int64 player_score = 8;
  for (int i = 0; i < this->player_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(8, this->player_score(i), target);
  }

  // repeated uint32 win_types = 9;
  for (int i = 0; i < this->win_types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(9, this->win_types(i), target);
  }

  // optional uint32 remain_card = 10;
  if (has_remain_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->remain_card(), target);
  }

  // optional uint32 settle_accounts_type = 11;
  if (has_settle_accounts_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->settle_accounts_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_baccarat_game_end::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 time_leave = 1;
    if (has_time_leave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_leave());
    }

    // optional int64 banker_win_score = 4;
    if (has_banker_win_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->banker_win_score());
    }

    // optional int64 banker_total_score = 5;
    if (has_banker_total_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->banker_total_score());
    }

    // optional uint32 banker_time = 6;
    if (has_banker_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->banker_time());
    }

    // optional int64 user_score = 7;
    if (has_user_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_score());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional uint32 remain_card = 10;
    if (has_remain_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remain_card());
    }

    // optional uint32 settle_accounts_type = 11;
    if (has_settle_accounts_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->settle_accounts_type());
    }

  }
  // repeated .net.msg_cards table_cards = 2;
  total_size += 1 * this->table_cards_size();
  for (int i = 0; i < this->table_cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->table_cards(i));
  }

  // repeated uint32 card_types = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_types_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->card_types(i));
    }
    total_size += 1 * this->card_types_size() + data_size;
  }

  // repeated int64 player_score = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->player_score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->player_score(i));
    }
    total_size += 1 * this->player_score_size() + data_size;
  }

  // repeated uint32 win_types = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->win_types_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->win_types(i));
    }
    total_size += 1 * this->win_types_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_baccarat_game_end::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_baccarat_game_end* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_baccarat_game_end*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_baccarat_game_end::MergeFrom(const msg_baccarat_game_end& from) {
  GOOGLE_CHECK_NE(&from, this);
  table_cards_.MergeFrom(from.table_cards_);
  card_types_.MergeFrom(from.card_types_);
  player_score_.MergeFrom(from.player_score_);
  win_types_.MergeFrom(from.win_types_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_leave()) {
      set_time_leave(from.time_leave());
    }
    if (from.has_banker_win_score()) {
      set_banker_win_score(from.banker_win_score());
    }
    if (from.has_banker_total_score()) {
      set_banker_total_score(from.banker_total_score());
    }
    if (from.has_banker_time()) {
      set_banker_time(from.banker_time());
    }
    if (from.has_user_score()) {
      set_user_score(from.user_score());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_remain_card()) {
      set_remain_card(from.remain_card());
    }
    if (from.has_settle_accounts_type()) {
      set_settle_accounts_type(from.settle_accounts_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_baccarat_game_end::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_baccarat_game_end::CopyFrom(const msg_baccarat_game_end& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_baccarat_game_end::IsInitialized() const {

  return true;
}

void msg_baccarat_game_end::Swap(msg_baccarat_game_end* other) {
  if (other != this) {
    std::swap(time_leave_, other->time_leave_);
    table_cards_.Swap(&other->table_cards_);
    card_types_.Swap(&other->card_types_);
    std::swap(banker_win_score_, other->banker_win_score_);
    std::swap(banker_total_score_, other->banker_total_score_);
    std::swap(banker_time_, other->banker_time_);
    std::swap(user_score_, other->user_score_);
    player_score_.Swap(&other->player_score_);
    win_types_.Swap(&other->win_types_);
    std::swap(remain_card_, other->remain_card_);
    std::swap(settle_accounts_type_, other->settle_accounts_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_baccarat_game_end::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_baccarat_game_end_descriptor_;
  metadata.reflection = msg_baccarat_game_end_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_baccarat_apply_banker::kApplyOperFieldNumber;
const int msg_baccarat_apply_banker::kApplyScoreFieldNumber;
const int msg_baccarat_apply_banker::kAutoAddscoreFieldNumber;
#endif  // !_MSC_VER

msg_baccarat_apply_banker::msg_baccarat_apply_banker()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_baccarat_apply_banker::InitAsDefaultInstance() {
}

msg_baccarat_apply_banker::msg_baccarat_apply_banker(const msg_baccarat_apply_banker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_baccarat_apply_banker::SharedCtor() {
  _cached_size_ = 0;
  apply_oper_ = 0u;
  apply_score_ = GOOGLE_LONGLONG(0);
  auto_addscore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_baccarat_apply_banker::~msg_baccarat_apply_banker() {
  SharedDtor();
}

void msg_baccarat_apply_banker::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_baccarat_apply_banker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_baccarat_apply_banker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_baccarat_apply_banker_descriptor_;
}

const msg_baccarat_apply_banker& msg_baccarat_apply_banker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baccarat_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_baccarat_apply_banker* msg_baccarat_apply_banker::default_instance_ = NULL;

msg_baccarat_apply_banker* msg_baccarat_apply_banker::New() const {
  return new msg_baccarat_apply_banker;
}

void msg_baccarat_apply_banker::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    apply_oper_ = 0u;
    apply_score_ = GOOGLE_LONGLONG(0);
    auto_addscore_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_baccarat_apply_banker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 apply_oper = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &apply_oper_)));
          set_has_apply_oper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_apply_score;
        break;
      }

      // optional int64 apply_score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &apply_score_)));
          set_has_apply_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_auto_addscore;
        break;
      }

      // optional uint32 auto_addscore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_addscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auto_addscore_)));
          set_has_auto_addscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_baccarat_apply_banker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 apply_oper = 1;
  if (has_apply_oper()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->apply_oper(), output);
  }

  // optional int64 apply_score = 2;
  if (has_apply_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->apply_score(), output);
  }

  // optional uint32 auto_addscore = 3;
  if (has_auto_addscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->auto_addscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_baccarat_apply_banker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 apply_oper = 1;
  if (has_apply_oper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->apply_oper(), target);
  }

  // optional int64 apply_score = 2;
  if (has_apply_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->apply_score(), target);
  }

  // optional uint32 auto_addscore = 3;
  if (has_auto_addscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->auto_addscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_baccarat_apply_banker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 apply_oper = 1;
    if (has_apply_oper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->apply_oper());
    }

    // optional int64 apply_score = 2;
    if (has_apply_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->apply_score());
    }

    // optional uint32 auto_addscore = 3;
    if (has_auto_addscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auto_addscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_baccarat_apply_banker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_baccarat_apply_banker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_baccarat_apply_banker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_baccarat_apply_banker::MergeFrom(const msg_baccarat_apply_banker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_apply_oper()) {
      set_apply_oper(from.apply_oper());
    }
    if (from.has_apply_score()) {
      set_apply_score(from.apply_score());
    }
    if (from.has_auto_addscore()) {
      set_auto_addscore(from.auto_addscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_baccarat_apply_banker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_baccarat_apply_banker::CopyFrom(const msg_baccarat_apply_banker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_baccarat_apply_banker::IsInitialized() const {

  return true;
}

void msg_baccarat_apply_banker::Swap(msg_baccarat_apply_banker* other) {
  if (other != this) {
    std::swap(apply_oper_, other->apply_oper_);
    std::swap(apply_score_, other->apply_score_);
    std::swap(auto_addscore_, other->auto_addscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_baccarat_apply_banker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_baccarat_apply_banker_descriptor_;
  metadata.reflection = msg_baccarat_apply_banker_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_baccarat_apply_banker_rep::kApplyOperFieldNumber;
const int msg_baccarat_apply_banker_rep::kResultFieldNumber;
const int msg_baccarat_apply_banker_rep::kBuyinScoreFieldNumber;
#endif  // !_MSC_VER

msg_baccarat_apply_banker_rep::msg_baccarat_apply_banker_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_baccarat_apply_banker_rep::InitAsDefaultInstance() {
}

msg_baccarat_apply_banker_rep::msg_baccarat_apply_banker_rep(const msg_baccarat_apply_banker_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_baccarat_apply_banker_rep::SharedCtor() {
  _cached_size_ = 0;
  apply_oper_ = 0u;
  result_ = 0u;
  buyin_score_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_baccarat_apply_banker_rep::~msg_baccarat_apply_banker_rep() {
  SharedDtor();
}

void msg_baccarat_apply_banker_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_baccarat_apply_banker_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_baccarat_apply_banker_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_baccarat_apply_banker_rep_descriptor_;
}

const msg_baccarat_apply_banker_rep& msg_baccarat_apply_banker_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baccarat_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_baccarat_apply_banker_rep* msg_baccarat_apply_banker_rep::default_instance_ = NULL;

msg_baccarat_apply_banker_rep* msg_baccarat_apply_banker_rep::New() const {
  return new msg_baccarat_apply_banker_rep;
}

void msg_baccarat_apply_banker_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    apply_oper_ = 0u;
    result_ = 0u;
    buyin_score_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_baccarat_apply_banker_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 apply_oper = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &apply_oper_)));
          set_has_apply_oper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional uint32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buyin_score;
        break;
      }

      // optional int64 buyin_score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyin_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buyin_score_)));
          set_has_buyin_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_baccarat_apply_banker_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 apply_oper = 1;
  if (has_apply_oper()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->apply_oper(), output);
  }

  // optional uint32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result(), output);
  }

  // optional int64 buyin_score = 3;
  if (has_buyin_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->buyin_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_baccarat_apply_banker_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 apply_oper = 1;
  if (has_apply_oper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->apply_oper(), target);
  }

  // optional uint32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result(), target);
  }

  // optional int64 buyin_score = 3;
  if (has_buyin_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->buyin_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_baccarat_apply_banker_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 apply_oper = 1;
    if (has_apply_oper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->apply_oper());
    }

    // optional uint32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional int64 buyin_score = 3;
    if (has_buyin_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->buyin_score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_baccarat_apply_banker_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_baccarat_apply_banker_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_baccarat_apply_banker_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_baccarat_apply_banker_rep::MergeFrom(const msg_baccarat_apply_banker_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_apply_oper()) {
      set_apply_oper(from.apply_oper());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_buyin_score()) {
      set_buyin_score(from.buyin_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_baccarat_apply_banker_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_baccarat_apply_banker_rep::CopyFrom(const msg_baccarat_apply_banker_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_baccarat_apply_banker_rep::IsInitialized() const {

  return true;
}

void msg_baccarat_apply_banker_rep::Swap(msg_baccarat_apply_banker_rep* other) {
  if (other != this) {
    std::swap(apply_oper_, other->apply_oper_);
    std::swap(result_, other->result_);
    std::swap(buyin_score_, other->buyin_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_baccarat_apply_banker_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_baccarat_apply_banker_rep_descriptor_;
  metadata.reflection = msg_baccarat_apply_banker_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_baccarat_change_banker::kBankerUserFieldNumber;
const int msg_baccarat_change_banker::kBankerScoreFieldNumber;
#endif  // !_MSC_VER

msg_baccarat_change_banker::msg_baccarat_change_banker()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_baccarat_change_banker::InitAsDefaultInstance() {
}

msg_baccarat_change_banker::msg_baccarat_change_banker(const msg_baccarat_change_banker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_baccarat_change_banker::SharedCtor() {
  _cached_size_ = 0;
  banker_user_ = 0u;
  banker_score_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_baccarat_change_banker::~msg_baccarat_change_banker() {
  SharedDtor();
}

void msg_baccarat_change_banker::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_baccarat_change_banker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_baccarat_change_banker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_baccarat_change_banker_descriptor_;
}

const msg_baccarat_change_banker& msg_baccarat_change_banker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baccarat_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_baccarat_change_banker* msg_baccarat_change_banker::default_instance_ = NULL;

msg_baccarat_change_banker* msg_baccarat_change_banker::New() const {
  return new msg_baccarat_change_banker;
}

void msg_baccarat_change_banker::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    banker_user_ = 0u;
    banker_score_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_baccarat_change_banker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 banker_user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &banker_user_)));
          set_has_banker_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_banker_score;
        break;
      }

      // optional int64 banker_score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &banker_score_)));
          set_has_banker_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_baccarat_change_banker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 banker_user = 1;
  if (has_banker_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->banker_user(), output);
  }

  // optional int64 banker_score = 2;
  if (has_banker_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->banker_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_baccarat_change_banker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 banker_user = 1;
  if (has_banker_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->banker_user(), target);
  }

  // optional int64 banker_score = 2;
  if (has_banker_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->banker_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_baccarat_change_banker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 banker_user = 1;
    if (has_banker_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->banker_user());
    }

    // optional int64 banker_score = 2;
    if (has_banker_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->banker_score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_baccarat_change_banker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_baccarat_change_banker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_baccarat_change_banker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_baccarat_change_banker::MergeFrom(const msg_baccarat_change_banker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_banker_user()) {
      set_banker_user(from.banker_user());
    }
    if (from.has_banker_score()) {
      set_banker_score(from.banker_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_baccarat_change_banker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_baccarat_change_banker::CopyFrom(const msg_baccarat_change_banker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_baccarat_change_banker::IsInitialized() const {

  return true;
}

void msg_baccarat_change_banker::Swap(msg_baccarat_change_banker* other) {
  if (other != this) {
    std::swap(banker_user_, other->banker_user_);
    std::swap(banker_score_, other->banker_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_baccarat_change_banker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_baccarat_change_banker_descriptor_;
  metadata.reflection = msg_baccarat_change_banker_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_baccarat_change_user_score::kChairIdFieldNumber;
const int msg_baccarat_change_user_score::kScoreFieldNumber;
#endif  // !_MSC_VER

msg_baccarat_change_user_score::msg_baccarat_change_user_score()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_baccarat_change_user_score::InitAsDefaultInstance() {
}

msg_baccarat_change_user_score::msg_baccarat_change_user_score(const msg_baccarat_change_user_score& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_baccarat_change_user_score::SharedCtor() {
  _cached_size_ = 0;
  chair_id_ = 0u;
  score_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_baccarat_change_user_score::~msg_baccarat_change_user_score() {
  SharedDtor();
}

void msg_baccarat_change_user_score::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_baccarat_change_user_score::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_baccarat_change_user_score::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_baccarat_change_user_score_descriptor_;
}

const msg_baccarat_change_user_score& msg_baccarat_change_user_score::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baccarat_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_baccarat_change_user_score* msg_baccarat_change_user_score::default_instance_ = NULL;

msg_baccarat_change_user_score* msg_baccarat_change_user_score::New() const {
  return new msg_baccarat_change_user_score;
}

void msg_baccarat_change_user_score::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chair_id_ = 0u;
    score_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_baccarat_change_user_score::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 chair_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chair_id_)));
          set_has_chair_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional int64 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_baccarat_change_user_score::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 chair_id = 1;
  if (has_chair_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chair_id(), output);
  }

  // optional int64 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_baccarat_change_user_score::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 chair_id = 1;
  if (has_chair_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chair_id(), target);
  }

  // optional int64 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_baccarat_change_user_score::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 chair_id = 1;
    if (has_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chair_id());
    }

    // optional int64 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_baccarat_change_user_score::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_baccarat_change_user_score* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_baccarat_change_user_score*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_baccarat_change_user_score::MergeFrom(const msg_baccarat_change_user_score& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chair_id()) {
      set_chair_id(from.chair_id());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_baccarat_change_user_score::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_baccarat_change_user_score::CopyFrom(const msg_baccarat_change_user_score& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_baccarat_change_user_score::IsInitialized() const {

  return true;
}

void msg_baccarat_change_user_score::Swap(msg_baccarat_change_user_score* other) {
  if (other != this) {
    std::swap(chair_id_, other->chair_id_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_baccarat_change_user_score::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_baccarat_change_user_score_descriptor_;
  metadata.reflection = msg_baccarat_change_user_score_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_baccarat_apply_list::kPlayerIdsFieldNumber;
const int msg_baccarat_apply_list::kApplyScoreFieldNumber;
#endif  // !_MSC_VER

msg_baccarat_apply_list::msg_baccarat_apply_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_baccarat_apply_list::InitAsDefaultInstance() {
}

msg_baccarat_apply_list::msg_baccarat_apply_list(const msg_baccarat_apply_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_baccarat_apply_list::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_baccarat_apply_list::~msg_baccarat_apply_list() {
  SharedDtor();
}

void msg_baccarat_apply_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_baccarat_apply_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_baccarat_apply_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_baccarat_apply_list_descriptor_;
}

const msg_baccarat_apply_list& msg_baccarat_apply_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baccarat_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_baccarat_apply_list* msg_baccarat_apply_list::default_instance_ = NULL;

msg_baccarat_apply_list* msg_baccarat_apply_list::New() const {
  return new msg_baccarat_apply_list;
}

void msg_baccarat_apply_list::Clear() {
  player_ids_.Clear();
  apply_score_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_baccarat_apply_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 player_ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_player_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_player_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_player_ids;
        if (input->ExpectTag(16)) goto parse_apply_score;
        break;
      }

      // repeated int64 apply_score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_apply_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_apply_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_apply_score;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_baccarat_apply_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 player_ids = 1;
  for (int i = 0; i < this->player_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->player_ids(i), output);
  }

  // repeated int64 apply_score = 2;
  for (int i = 0; i < this->apply_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->apply_score(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_baccarat_apply_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 player_ids = 1;
  for (int i = 0; i < this->player_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->player_ids(i), target);
  }

  // repeated int64 apply_score = 2;
  for (int i = 0; i < this->apply_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->apply_score(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_baccarat_apply_list::ByteSize() const {
  int total_size = 0;

  // repeated uint32 player_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->player_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->player_ids(i));
    }
    total_size += 1 * this->player_ids_size() + data_size;
  }

  // repeated int64 apply_score = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->apply_score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->apply_score(i));
    }
    total_size += 1 * this->apply_score_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_baccarat_apply_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_baccarat_apply_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_baccarat_apply_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_baccarat_apply_list::MergeFrom(const msg_baccarat_apply_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_ids_.MergeFrom(from.player_ids_);
  apply_score_.MergeFrom(from.apply_score_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_baccarat_apply_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_baccarat_apply_list::CopyFrom(const msg_baccarat_apply_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_baccarat_apply_list::IsInitialized() const {

  return true;
}

void msg_baccarat_apply_list::Swap(msg_baccarat_apply_list* other) {
  if (other != this) {
    player_ids_.Swap(&other->player_ids_);
    apply_score_.Swap(&other->apply_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_baccarat_apply_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_baccarat_apply_list_descriptor_;
  metadata.reflection = msg_baccarat_apply_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_baccarat_jump_apply_queue_req::kJumpPosFieldNumber;
#endif  // !_MSC_VER

msg_baccarat_jump_apply_queue_req::msg_baccarat_jump_apply_queue_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_baccarat_jump_apply_queue_req::InitAsDefaultInstance() {
}

msg_baccarat_jump_apply_queue_req::msg_baccarat_jump_apply_queue_req(const msg_baccarat_jump_apply_queue_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_baccarat_jump_apply_queue_req::SharedCtor() {
  _cached_size_ = 0;
  jump_pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_baccarat_jump_apply_queue_req::~msg_baccarat_jump_apply_queue_req() {
  SharedDtor();
}

void msg_baccarat_jump_apply_queue_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_baccarat_jump_apply_queue_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_baccarat_jump_apply_queue_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_baccarat_jump_apply_queue_req_descriptor_;
}

const msg_baccarat_jump_apply_queue_req& msg_baccarat_jump_apply_queue_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baccarat_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_baccarat_jump_apply_queue_req* msg_baccarat_jump_apply_queue_req::default_instance_ = NULL;

msg_baccarat_jump_apply_queue_req* msg_baccarat_jump_apply_queue_req::New() const {
  return new msg_baccarat_jump_apply_queue_req;
}

void msg_baccarat_jump_apply_queue_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    jump_pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_baccarat_jump_apply_queue_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 jump_pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jump_pos_)));
          set_has_jump_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_baccarat_jump_apply_queue_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 jump_pos = 1;
  if (has_jump_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->jump_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_baccarat_jump_apply_queue_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 jump_pos = 1;
  if (has_jump_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->jump_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_baccarat_jump_apply_queue_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 jump_pos = 1;
    if (has_jump_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jump_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_baccarat_jump_apply_queue_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_baccarat_jump_apply_queue_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_baccarat_jump_apply_queue_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_baccarat_jump_apply_queue_req::MergeFrom(const msg_baccarat_jump_apply_queue_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jump_pos()) {
      set_jump_pos(from.jump_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_baccarat_jump_apply_queue_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_baccarat_jump_apply_queue_req::CopyFrom(const msg_baccarat_jump_apply_queue_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_baccarat_jump_apply_queue_req::IsInitialized() const {

  return true;
}

void msg_baccarat_jump_apply_queue_req::Swap(msg_baccarat_jump_apply_queue_req* other) {
  if (other != this) {
    std::swap(jump_pos_, other->jump_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_baccarat_jump_apply_queue_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_baccarat_jump_apply_queue_req_descriptor_;
  metadata.reflection = msg_baccarat_jump_apply_queue_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_baccarat_jump_apply_queue_rep::kResultFieldNumber;
#endif  // !_MSC_VER

msg_baccarat_jump_apply_queue_rep::msg_baccarat_jump_apply_queue_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_baccarat_jump_apply_queue_rep::InitAsDefaultInstance() {
}

msg_baccarat_jump_apply_queue_rep::msg_baccarat_jump_apply_queue_rep(const msg_baccarat_jump_apply_queue_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_baccarat_jump_apply_queue_rep::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_baccarat_jump_apply_queue_rep::~msg_baccarat_jump_apply_queue_rep() {
  SharedDtor();
}

void msg_baccarat_jump_apply_queue_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_baccarat_jump_apply_queue_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_baccarat_jump_apply_queue_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_baccarat_jump_apply_queue_rep_descriptor_;
}

const msg_baccarat_jump_apply_queue_rep& msg_baccarat_jump_apply_queue_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baccarat_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_baccarat_jump_apply_queue_rep* msg_baccarat_jump_apply_queue_rep::default_instance_ = NULL;

msg_baccarat_jump_apply_queue_rep* msg_baccarat_jump_apply_queue_rep::New() const {
  return new msg_baccarat_jump_apply_queue_rep;
}

void msg_baccarat_jump_apply_queue_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_baccarat_jump_apply_queue_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_baccarat_jump_apply_queue_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_baccarat_jump_apply_queue_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_baccarat_jump_apply_queue_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_baccarat_jump_apply_queue_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_baccarat_jump_apply_queue_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_baccarat_jump_apply_queue_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_baccarat_jump_apply_queue_rep::MergeFrom(const msg_baccarat_jump_apply_queue_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_baccarat_jump_apply_queue_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_baccarat_jump_apply_queue_rep::CopyFrom(const msg_baccarat_jump_apply_queue_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_baccarat_jump_apply_queue_rep::IsInitialized() const {

  return true;
}

void msg_baccarat_jump_apply_queue_rep::Swap(msg_baccarat_jump_apply_queue_rep* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_baccarat_jump_apply_queue_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_baccarat_jump_apply_queue_rep_descriptor_;
  metadata.reflection = msg_baccarat_jump_apply_queue_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_baccarat_banker_calc_rep::kBankerTimeFieldNumber;
const int msg_baccarat_banker_calc_rep::kWinCountFieldNumber;
const int msg_baccarat_banker_calc_rep::kBuyinScoreFieldNumber;
const int msg_baccarat_banker_calc_rep::kWinScoreFieldNumber;
const int msg_baccarat_banker_calc_rep::kWinMaxFieldNumber;
const int msg_baccarat_banker_calc_rep::kWinMinFieldNumber;
#endif  // !_MSC_VER

msg_baccarat_banker_calc_rep::msg_baccarat_banker_calc_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_baccarat_banker_calc_rep::InitAsDefaultInstance() {
}

msg_baccarat_banker_calc_rep::msg_baccarat_banker_calc_rep(const msg_baccarat_banker_calc_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_baccarat_banker_calc_rep::SharedCtor() {
  _cached_size_ = 0;
  banker_time_ = 0u;
  win_count_ = 0u;
  buyin_score_ = GOOGLE_LONGLONG(0);
  win_score_ = GOOGLE_LONGLONG(0);
  win_max_ = GOOGLE_LONGLONG(0);
  win_min_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_baccarat_banker_calc_rep::~msg_baccarat_banker_calc_rep() {
  SharedDtor();
}

void msg_baccarat_banker_calc_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_baccarat_banker_calc_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_baccarat_banker_calc_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_baccarat_banker_calc_rep_descriptor_;
}

const msg_baccarat_banker_calc_rep& msg_baccarat_banker_calc_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baccarat_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_baccarat_banker_calc_rep* msg_baccarat_banker_calc_rep::default_instance_ = NULL;

msg_baccarat_banker_calc_rep* msg_baccarat_banker_calc_rep::New() const {
  return new msg_baccarat_banker_calc_rep;
}

void msg_baccarat_banker_calc_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    banker_time_ = 0u;
    win_count_ = 0u;
    buyin_score_ = GOOGLE_LONGLONG(0);
    win_score_ = GOOGLE_LONGLONG(0);
    win_max_ = GOOGLE_LONGLONG(0);
    win_min_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_baccarat_banker_calc_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 banker_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &banker_time_)));
          set_has_banker_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_win_count;
        break;
      }

      // optional uint32 win_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_count_)));
          set_has_win_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buyin_score;
        break;
      }

      // optional int64 buyin_score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyin_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buyin_score_)));
          set_has_buyin_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_win_score;
        break;
      }

      // optional int64 win_score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &win_score_)));
          set_has_win_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_win_max;
        break;
      }

      // optional int64 win_max = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &win_max_)));
          set_has_win_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_win_min;
        break;
      }

      // optional int64 win_min = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &win_min_)));
          set_has_win_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_baccarat_banker_calc_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 banker_time = 1;
  if (has_banker_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->banker_time(), output);
  }

  // optional uint32 win_count = 2;
  if (has_win_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->win_count(), output);
  }

  // optional int64 buyin_score = 3;
  if (has_buyin_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->buyin_score(), output);
  }

  // optional int64 win_score = 4;
  if (has_win_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->win_score(), output);
  }

  // optional int64 win_max = 5;
  if (has_win_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->win_max(), output);
  }

  // optional int64 win_min = 6;
  if (has_win_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->win_min(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_baccarat_banker_calc_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 banker_time = 1;
  if (has_banker_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->banker_time(), target);
  }

  // optional uint32 win_count = 2;
  if (has_win_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->win_count(), target);
  }

  // optional int64 buyin_score = 3;
  if (has_buyin_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->buyin_score(), target);
  }

  // optional int64 win_score = 4;
  if (has_win_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->win_score(), target);
  }

  // optional int64 win_max = 5;
  if (has_win_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->win_max(), target);
  }

  // optional int64 win_min = 6;
  if (has_win_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->win_min(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_baccarat_banker_calc_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 banker_time = 1;
    if (has_banker_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->banker_time());
    }

    // optional uint32 win_count = 2;
    if (has_win_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win_count());
    }

    // optional int64 buyin_score = 3;
    if (has_buyin_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->buyin_score());
    }

    // optional int64 win_score = 4;
    if (has_win_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->win_score());
    }

    // optional int64 win_max = 5;
    if (has_win_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->win_max());
    }

    // optional int64 win_min = 6;
    if (has_win_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->win_min());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_baccarat_banker_calc_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_baccarat_banker_calc_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_baccarat_banker_calc_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_baccarat_banker_calc_rep::MergeFrom(const msg_baccarat_banker_calc_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_banker_time()) {
      set_banker_time(from.banker_time());
    }
    if (from.has_win_count()) {
      set_win_count(from.win_count());
    }
    if (from.has_buyin_score()) {
      set_buyin_score(from.buyin_score());
    }
    if (from.has_win_score()) {
      set_win_score(from.win_score());
    }
    if (from.has_win_max()) {
      set_win_max(from.win_max());
    }
    if (from.has_win_min()) {
      set_win_min(from.win_min());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_baccarat_banker_calc_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_baccarat_banker_calc_rep::CopyFrom(const msg_baccarat_banker_calc_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_baccarat_banker_calc_rep::IsInitialized() const {

  return true;
}

void msg_baccarat_banker_calc_rep::Swap(msg_baccarat_banker_calc_rep* other) {
  if (other != this) {
    std::swap(banker_time_, other->banker_time_);
    std::swap(win_count_, other->win_count_);
    std::swap(buyin_score_, other->buyin_score_);
    std::swap(win_score_, other->win_score_);
    std::swap(win_max_, other->win_max_);
    std::swap(win_min_, other->win_min_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_baccarat_banker_calc_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_baccarat_banker_calc_rep_descriptor_;
  metadata.reflection = msg_baccarat_banker_calc_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_baccarat_add_bankerscore_rep::kBuyinScoreFieldNumber;
#endif  // !_MSC_VER

msg_baccarat_add_bankerscore_rep::msg_baccarat_add_bankerscore_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_baccarat_add_bankerscore_rep::InitAsDefaultInstance() {
}

msg_baccarat_add_bankerscore_rep::msg_baccarat_add_bankerscore_rep(const msg_baccarat_add_bankerscore_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_baccarat_add_bankerscore_rep::SharedCtor() {
  _cached_size_ = 0;
  buyin_score_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_baccarat_add_bankerscore_rep::~msg_baccarat_add_bankerscore_rep() {
  SharedDtor();
}

void msg_baccarat_add_bankerscore_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_baccarat_add_bankerscore_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_baccarat_add_bankerscore_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_baccarat_add_bankerscore_rep_descriptor_;
}

const msg_baccarat_add_bankerscore_rep& msg_baccarat_add_bankerscore_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baccarat_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_baccarat_add_bankerscore_rep* msg_baccarat_add_bankerscore_rep::default_instance_ = NULL;

msg_baccarat_add_bankerscore_rep* msg_baccarat_add_bankerscore_rep::New() const {
  return new msg_baccarat_add_bankerscore_rep;
}

void msg_baccarat_add_bankerscore_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buyin_score_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_baccarat_add_bankerscore_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 buyin_score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buyin_score_)));
          set_has_buyin_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_baccarat_add_bankerscore_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 buyin_score = 1;
  if (has_buyin_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->buyin_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_baccarat_add_bankerscore_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 buyin_score = 1;
  if (has_buyin_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->buyin_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_baccarat_add_bankerscore_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 buyin_score = 1;
    if (has_buyin_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->buyin_score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_baccarat_add_bankerscore_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_baccarat_add_bankerscore_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_baccarat_add_bankerscore_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_baccarat_add_bankerscore_rep::MergeFrom(const msg_baccarat_add_bankerscore_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buyin_score()) {
      set_buyin_score(from.buyin_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_baccarat_add_bankerscore_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_baccarat_add_bankerscore_rep::CopyFrom(const msg_baccarat_add_bankerscore_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_baccarat_add_bankerscore_rep::IsInitialized() const {

  return true;
}

void msg_baccarat_add_bankerscore_rep::Swap(msg_baccarat_add_bankerscore_rep* other) {
  if (other != this) {
    std::swap(buyin_score_, other->buyin_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_baccarat_add_bankerscore_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_baccarat_add_bankerscore_rep_descriptor_;
  metadata.reflection = msg_baccarat_add_bankerscore_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int baccarat_play_log::kPlayerPairFieldNumber;
const int baccarat_play_log::kBankerPairFieldNumber;
const int baccarat_play_log::kPlayerCountFieldNumber;
const int baccarat_play_log::kBankerCountFieldNumber;
const int baccarat_play_log::kIsSmallFieldNumber;
const int baccarat_play_log::kIsSuperSixFieldNumber;
const int baccarat_play_log::kIndexFieldNumber;
#endif  // !_MSC_VER

baccarat_play_log::baccarat_play_log()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void baccarat_play_log::InitAsDefaultInstance() {
}

baccarat_play_log::baccarat_play_log(const baccarat_play_log& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void baccarat_play_log::SharedCtor() {
  _cached_size_ = 0;
  player_pair_ = 0u;
  banker_pair_ = 0u;
  player_count_ = 0u;
  banker_count_ = 0u;
  is_small_ = 0u;
  is_super_six_ = 0u;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

baccarat_play_log::~baccarat_play_log() {
  SharedDtor();
}

void baccarat_play_log::SharedDtor() {
  if (this != default_instance_) {
  }
}

void baccarat_play_log::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* baccarat_play_log::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return baccarat_play_log_descriptor_;
}

const baccarat_play_log& baccarat_play_log::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baccarat_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

baccarat_play_log* baccarat_play_log::default_instance_ = NULL;

baccarat_play_log* baccarat_play_log::New() const {
  return new baccarat_play_log;
}

void baccarat_play_log::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_pair_ = 0u;
    banker_pair_ = 0u;
    player_count_ = 0u;
    banker_count_ = 0u;
    is_small_ = 0u;
    is_super_six_ = 0u;
    index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool baccarat_play_log::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_pair = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_pair_)));
          set_has_player_pair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_banker_pair;
        break;
      }

      // optional uint32 banker_pair = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_pair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &banker_pair_)));
          set_has_banker_pair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_count;
        break;
      }

      // optional uint32 player_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_count_)));
          set_has_player_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_banker_count;
        break;
      }

      // optional uint32 banker_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &banker_count_)));
          set_has_banker_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_small;
        break;
      }

      // optional uint32 is_small = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_small:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_small_)));
          set_has_is_small();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_super_six;
        break;
      }

      // optional uint32 is_super_six = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_super_six:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_super_six_)));
          set_has_is_super_six();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_index;
        break;
      }

      // optional uint32 index = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void baccarat_play_log::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 player_pair = 1;
  if (has_player_pair()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_pair(), output);
  }

  // optional uint32 banker_pair = 2;
  if (has_banker_pair()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->banker_pair(), output);
  }

  // optional uint32 player_count = 3;
  if (has_player_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->player_count(), output);
  }

  // optional uint32 banker_count = 4;
  if (has_banker_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->banker_count(), output);
  }

  // optional uint32 is_small = 5;
  if (has_is_small()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->is_small(), output);
  }

  // optional uint32 is_super_six = 6;
  if (has_is_super_six()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->is_super_six(), output);
  }

  // optional uint32 index = 7;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* baccarat_play_log::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 player_pair = 1;
  if (has_player_pair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_pair(), target);
  }

  // optional uint32 banker_pair = 2;
  if (has_banker_pair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->banker_pair(), target);
  }

  // optional uint32 player_count = 3;
  if (has_player_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->player_count(), target);
  }

  // optional uint32 banker_count = 4;
  if (has_banker_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->banker_count(), target);
  }

  // optional uint32 is_small = 5;
  if (has_is_small()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->is_small(), target);
  }

  // optional uint32 is_super_six = 6;
  if (has_is_super_six()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->is_super_six(), target);
  }

  // optional uint32 index = 7;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int baccarat_play_log::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 player_pair = 1;
    if (has_player_pair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_pair());
    }

    // optional uint32 banker_pair = 2;
    if (has_banker_pair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->banker_pair());
    }

    // optional uint32 player_count = 3;
    if (has_player_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_count());
    }

    // optional uint32 banker_count = 4;
    if (has_banker_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->banker_count());
    }

    // optional uint32 is_small = 5;
    if (has_is_small()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_small());
    }

    // optional uint32 is_super_six = 6;
    if (has_is_super_six()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_super_six());
    }

    // optional uint32 index = 7;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void baccarat_play_log::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const baccarat_play_log* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const baccarat_play_log*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void baccarat_play_log::MergeFrom(const baccarat_play_log& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_pair()) {
      set_player_pair(from.player_pair());
    }
    if (from.has_banker_pair()) {
      set_banker_pair(from.banker_pair());
    }
    if (from.has_player_count()) {
      set_player_count(from.player_count());
    }
    if (from.has_banker_count()) {
      set_banker_count(from.banker_count());
    }
    if (from.has_is_small()) {
      set_is_small(from.is_small());
    }
    if (from.has_is_super_six()) {
      set_is_super_six(from.is_super_six());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void baccarat_play_log::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void baccarat_play_log::CopyFrom(const baccarat_play_log& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool baccarat_play_log::IsInitialized() const {

  return true;
}

void baccarat_play_log::Swap(baccarat_play_log* other) {
  if (other != this) {
    std::swap(player_pair_, other->player_pair_);
    std::swap(banker_pair_, other->banker_pair_);
    std::swap(player_count_, other->player_count_);
    std::swap(banker_count_, other->banker_count_);
    std::swap(is_small_, other->is_small_);
    std::swap(is_super_six_, other->is_super_six_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata baccarat_play_log::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = baccarat_play_log_descriptor_;
  metadata.reflection = baccarat_play_log_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_baccarat_play_log_rep::kLogsFieldNumber;
#endif  // !_MSC_VER

msg_baccarat_play_log_rep::msg_baccarat_play_log_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_baccarat_play_log_rep::InitAsDefaultInstance() {
}

msg_baccarat_play_log_rep::msg_baccarat_play_log_rep(const msg_baccarat_play_log_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_baccarat_play_log_rep::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_baccarat_play_log_rep::~msg_baccarat_play_log_rep() {
  SharedDtor();
}

void msg_baccarat_play_log_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_baccarat_play_log_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_baccarat_play_log_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_baccarat_play_log_rep_descriptor_;
}

const msg_baccarat_play_log_rep& msg_baccarat_play_log_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baccarat_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_baccarat_play_log_rep* msg_baccarat_play_log_rep::default_instance_ = NULL;

msg_baccarat_play_log_rep* msg_baccarat_play_log_rep::New() const {
  return new msg_baccarat_play_log_rep;
}

void msg_baccarat_play_log_rep::Clear() {
  logs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_baccarat_play_log_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .net.baccarat_play_log logs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_logs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_logs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_baccarat_play_log_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .net.baccarat_play_log logs = 1;
  for (int i = 0; i < this->logs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->logs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_baccarat_play_log_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .net.baccarat_play_log logs = 1;
  for (int i = 0; i < this->logs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->logs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_baccarat_play_log_rep::ByteSize() const {
  int total_size = 0;

  // repeated .net.baccarat_play_log logs = 1;
  total_size += 1 * this->logs_size();
  for (int i = 0; i < this->logs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->logs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_baccarat_play_log_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_baccarat_play_log_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_baccarat_play_log_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_baccarat_play_log_rep::MergeFrom(const msg_baccarat_play_log_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  logs_.MergeFrom(from.logs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_baccarat_play_log_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_baccarat_play_log_rep::CopyFrom(const msg_baccarat_play_log_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_baccarat_play_log_rep::IsInitialized() const {

  return true;
}

void msg_baccarat_play_log_rep::Swap(msg_baccarat_play_log_rep* other) {
  if (other != this) {
    logs_.Swap(&other->logs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_baccarat_play_log_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_baccarat_play_log_rep_descriptor_;
  metadata.reflection = msg_baccarat_play_log_rep_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace net

// @@protoc_insertion_point(global_scope)
