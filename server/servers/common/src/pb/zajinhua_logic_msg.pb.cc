// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zajinhua_logic_msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "zajinhua_logic_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace net {

namespace {

const ::google::protobuf::Descriptor* msg_zajinhua_game_info_free_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_zajinhua_game_info_free_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_zajinhua_game_info_play_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_zajinhua_game_info_play_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_zajinhua_start_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_zajinhua_start_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_zajinhua_addscore_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_zajinhua_addscore_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_zajinhua_addscore_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_zajinhua_addscore_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_zajinhua_giveup_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_zajinhua_giveup_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_zajinhua_giveup_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_zajinhua_giveup_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_zajinhua_compare_card_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_zajinhua_compare_card_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_zajinhua_compare_card_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_zajinhua_compare_card_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_zajinhua_look_card_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_zajinhua_look_card_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_zajinhua_look_card_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_zajinhua_look_card_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_zajinhua_open_card_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_zajinhua_open_card_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_zajinhua_open_card_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_zajinhua_open_card_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_zajinhua_game_end_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_zajinhua_game_end_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_zajinhua_show_card_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_zajinhua_show_card_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_zajinhua_show_card_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_zajinhua_show_card_rep_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_zajinhua_5flogic_5fmsg_2eproto() {
  protobuf_AddDesc_zajinhua_5flogic_5fmsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "zajinhua_logic_msg.proto");
  GOOGLE_CHECK(file != NULL);
  msg_zajinhua_game_info_free_rep_descriptor_ = file->message_type(0);
  static const int msg_zajinhua_game_info_free_rep_offsets_[1] = {
  };
  msg_zajinhua_game_info_free_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_zajinhua_game_info_free_rep_descriptor_,
      msg_zajinhua_game_info_free_rep::default_instance_,
      msg_zajinhua_game_info_free_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_game_info_free_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_game_info_free_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_zajinhua_game_info_free_rep));
  msg_zajinhua_game_info_play_rep_descriptor_ = file->message_type(1);
  static const int msg_zajinhua_game_info_play_rep_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_game_info_play_rep, current_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_game_info_play_rep, user_max_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_game_info_play_rep, banker_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_game_info_play_rep, current_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_game_info_play_rep, play_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_game_info_play_rep, card_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_game_info_play_rep, table_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_game_info_play_rep, hand_card_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_game_info_play_rep, compare_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_game_info_play_rep, current_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_game_info_play_rep, oper_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_game_info_play_rep, is_mingpai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_game_info_play_rep, card_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_game_info_play_rep, game_status_),
  };
  msg_zajinhua_game_info_play_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_zajinhua_game_info_play_rep_descriptor_,
      msg_zajinhua_game_info_play_rep::default_instance_,
      msg_zajinhua_game_info_play_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_game_info_play_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_game_info_play_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_zajinhua_game_info_play_rep));
  msg_zajinhua_start_rep_descriptor_ = file->message_type(2);
  static const int msg_zajinhua_start_rep_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_start_rep, banker_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_start_rep, current_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_start_rep, user_max_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_start_rep, play_status_),
  };
  msg_zajinhua_start_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_zajinhua_start_rep_descriptor_,
      msg_zajinhua_start_rep::default_instance_,
      msg_zajinhua_start_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_start_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_start_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_zajinhua_start_rep));
  msg_zajinhua_addscore_req_descriptor_ = file->message_type(3);
  static const int msg_zajinhua_addscore_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_addscore_req, add_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_addscore_req, is_allin_),
  };
  msg_zajinhua_addscore_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_zajinhua_addscore_req_descriptor_,
      msg_zajinhua_addscore_req::default_instance_,
      msg_zajinhua_addscore_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_addscore_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_addscore_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_zajinhua_addscore_req));
  msg_zajinhua_addscore_rep_descriptor_ = file->message_type(4);
  static const int msg_zajinhua_addscore_rep_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_addscore_rep, current_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_addscore_rep, add_score_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_addscore_rep, compare_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_addscore_rep, add_score_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_addscore_rep, current_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_addscore_rep, current_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_addscore_rep, only_compare_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_addscore_rep, is_allin_),
  };
  msg_zajinhua_addscore_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_zajinhua_addscore_rep_descriptor_,
      msg_zajinhua_addscore_rep::default_instance_,
      msg_zajinhua_addscore_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_addscore_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_addscore_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_zajinhua_addscore_rep));
  msg_zajinhua_giveup_req_descriptor_ = file->message_type(5);
  static const int msg_zajinhua_giveup_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_giveup_req, giveup_reason_),
  };
  msg_zajinhua_giveup_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_zajinhua_giveup_req_descriptor_,
      msg_zajinhua_giveup_req::default_instance_,
      msg_zajinhua_giveup_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_giveup_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_giveup_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_zajinhua_giveup_req));
  msg_zajinhua_giveup_rep_descriptor_ = file->message_type(6);
  static const int msg_zajinhua_giveup_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_giveup_rep, giveup_user_),
  };
  msg_zajinhua_giveup_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_zajinhua_giveup_rep_descriptor_,
      msg_zajinhua_giveup_rep::default_instance_,
      msg_zajinhua_giveup_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_giveup_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_giveup_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_zajinhua_giveup_rep));
  msg_zajinhua_compare_card_req_descriptor_ = file->message_type(7);
  static const int msg_zajinhua_compare_card_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_compare_card_req, compare_user_),
  };
  msg_zajinhua_compare_card_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_zajinhua_compare_card_req_descriptor_,
      msg_zajinhua_compare_card_req::default_instance_,
      msg_zajinhua_compare_card_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_compare_card_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_compare_card_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_zajinhua_compare_card_req));
  msg_zajinhua_compare_card_rep_descriptor_ = file->message_type(8);
  static const int msg_zajinhua_compare_card_rep_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_compare_card_rep, current_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_compare_card_rep, compare_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_compare_card_rep, lost_user_),
  };
  msg_zajinhua_compare_card_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_zajinhua_compare_card_rep_descriptor_,
      msg_zajinhua_compare_card_rep::default_instance_,
      msg_zajinhua_compare_card_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_compare_card_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_compare_card_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_zajinhua_compare_card_rep));
  msg_zajinhua_look_card_req_descriptor_ = file->message_type(9);
  static const int msg_zajinhua_look_card_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_look_card_req, chairid_),
  };
  msg_zajinhua_look_card_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_zajinhua_look_card_req_descriptor_,
      msg_zajinhua_look_card_req::default_instance_,
      msg_zajinhua_look_card_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_look_card_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_look_card_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_zajinhua_look_card_req));
  msg_zajinhua_look_card_rep_descriptor_ = file->message_type(10);
  static const int msg_zajinhua_look_card_rep_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_look_card_rep, look_card_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_look_card_rep, card_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_look_card_rep, card_type_),
  };
  msg_zajinhua_look_card_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_zajinhua_look_card_rep_descriptor_,
      msg_zajinhua_look_card_rep::default_instance_,
      msg_zajinhua_look_card_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_look_card_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_look_card_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_zajinhua_look_card_rep));
  msg_zajinhua_open_card_req_descriptor_ = file->message_type(11);
  static const int msg_zajinhua_open_card_req_offsets_[1] = {
  };
  msg_zajinhua_open_card_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_zajinhua_open_card_req_descriptor_,
      msg_zajinhua_open_card_req::default_instance_,
      msg_zajinhua_open_card_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_open_card_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_open_card_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_zajinhua_open_card_req));
  msg_zajinhua_open_card_descriptor_ = file->message_type(12);
  static const int msg_zajinhua_open_card_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_open_card, winner_),
  };
  msg_zajinhua_open_card_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_zajinhua_open_card_descriptor_,
      msg_zajinhua_open_card::default_instance_,
      msg_zajinhua_open_card_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_open_card, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_open_card, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_zajinhua_open_card));
  msg_zajinhua_game_end_rep_descriptor_ = file->message_type(13);
  static const int msg_zajinhua_game_end_rep_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_game_end_rep, game_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_game_end_rep, card_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_game_end_rep, compare_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_game_end_rep, end_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_game_end_rep, special_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_game_end_rep, card_types_),
  };
  msg_zajinhua_game_end_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_zajinhua_game_end_rep_descriptor_,
      msg_zajinhua_game_end_rep::default_instance_,
      msg_zajinhua_game_end_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_game_end_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_game_end_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_zajinhua_game_end_rep));
  msg_zajinhua_show_card_req_descriptor_ = file->message_type(14);
  static const int msg_zajinhua_show_card_req_offsets_[1] = {
  };
  msg_zajinhua_show_card_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_zajinhua_show_card_req_descriptor_,
      msg_zajinhua_show_card_req::default_instance_,
      msg_zajinhua_show_card_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_show_card_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_show_card_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_zajinhua_show_card_req));
  msg_zajinhua_show_card_rep_descriptor_ = file->message_type(15);
  static const int msg_zajinhua_show_card_rep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_show_card_rep, show_chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_show_card_rep, cards_),
  };
  msg_zajinhua_show_card_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_zajinhua_show_card_rep_descriptor_,
      msg_zajinhua_show_card_rep::default_instance_,
      msg_zajinhua_show_card_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_show_card_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_zajinhua_show_card_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_zajinhua_show_card_rep));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_zajinhua_5flogic_5fmsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_zajinhua_game_info_free_rep_descriptor_, &msg_zajinhua_game_info_free_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_zajinhua_game_info_play_rep_descriptor_, &msg_zajinhua_game_info_play_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_zajinhua_start_rep_descriptor_, &msg_zajinhua_start_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_zajinhua_addscore_req_descriptor_, &msg_zajinhua_addscore_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_zajinhua_addscore_rep_descriptor_, &msg_zajinhua_addscore_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_zajinhua_giveup_req_descriptor_, &msg_zajinhua_giveup_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_zajinhua_giveup_rep_descriptor_, &msg_zajinhua_giveup_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_zajinhua_compare_card_req_descriptor_, &msg_zajinhua_compare_card_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_zajinhua_compare_card_rep_descriptor_, &msg_zajinhua_compare_card_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_zajinhua_look_card_req_descriptor_, &msg_zajinhua_look_card_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_zajinhua_look_card_rep_descriptor_, &msg_zajinhua_look_card_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_zajinhua_open_card_req_descriptor_, &msg_zajinhua_open_card_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_zajinhua_open_card_descriptor_, &msg_zajinhua_open_card::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_zajinhua_game_end_rep_descriptor_, &msg_zajinhua_game_end_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_zajinhua_show_card_req_descriptor_, &msg_zajinhua_show_card_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_zajinhua_show_card_rep_descriptor_, &msg_zajinhua_show_card_rep::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_zajinhua_5flogic_5fmsg_2eproto() {
  delete msg_zajinhua_game_info_free_rep::default_instance_;
  delete msg_zajinhua_game_info_free_rep_reflection_;
  delete msg_zajinhua_game_info_play_rep::default_instance_;
  delete msg_zajinhua_game_info_play_rep_reflection_;
  delete msg_zajinhua_start_rep::default_instance_;
  delete msg_zajinhua_start_rep_reflection_;
  delete msg_zajinhua_addscore_req::default_instance_;
  delete msg_zajinhua_addscore_req_reflection_;
  delete msg_zajinhua_addscore_rep::default_instance_;
  delete msg_zajinhua_addscore_rep_reflection_;
  delete msg_zajinhua_giveup_req::default_instance_;
  delete msg_zajinhua_giveup_req_reflection_;
  delete msg_zajinhua_giveup_rep::default_instance_;
  delete msg_zajinhua_giveup_rep_reflection_;
  delete msg_zajinhua_compare_card_req::default_instance_;
  delete msg_zajinhua_compare_card_req_reflection_;
  delete msg_zajinhua_compare_card_rep::default_instance_;
  delete msg_zajinhua_compare_card_rep_reflection_;
  delete msg_zajinhua_look_card_req::default_instance_;
  delete msg_zajinhua_look_card_req_reflection_;
  delete msg_zajinhua_look_card_rep::default_instance_;
  delete msg_zajinhua_look_card_rep_reflection_;
  delete msg_zajinhua_open_card_req::default_instance_;
  delete msg_zajinhua_open_card_req_reflection_;
  delete msg_zajinhua_open_card::default_instance_;
  delete msg_zajinhua_open_card_reflection_;
  delete msg_zajinhua_game_end_rep::default_instance_;
  delete msg_zajinhua_game_end_rep_reflection_;
  delete msg_zajinhua_show_card_req::default_instance_;
  delete msg_zajinhua_show_card_req_reflection_;
  delete msg_zajinhua_show_card_rep::default_instance_;
  delete msg_zajinhua_show_card_rep_reflection_;
}

void protobuf_AddDesc_zajinhua_5flogic_5fmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::net::protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  ::net::protobuf_AddDesc_error_5fcode_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030zajinhua_logic_msg.proto\022\003net\032\025base_ms"
    "g_struct.proto\032\020error_code.proto\"!\n\037msg_"
    "zajinhua_game_info_free_rep\"\315\002\n\037msg_zaji"
    "nhua_game_info_play_rep\022\025\n\rcurrent_times"
    "\030\003 \001(\r\022\026\n\016user_max_score\030\004 \001(\003\022\023\n\013banker"
    "_user\030\005 \001(\r\022\024\n\014current_user\030\006 \001(\r\022\023\n\013pla"
    "y_status\030\007 \003(\r\022\021\n\tcard_stat\030\010 \003(\r\022\023\n\013tab"
    "le_score\030\t \003(\003\022\026\n\016hand_card_data\030\n \003(\r\022\025"
    "\n\rcompare_state\030\013 \001(\r\022\025\n\rcurrent_round\030\014"
    " \001(\r\022\021\n\toper_time\030\r \001(\r\022\022\n\nis_mingpai\030\016 "
    "\001(\r\022\021\n\tcard_type\030\017 \001(\r\022\023\n\013game_status\030\020 "
    "\001(\r\"p\n\026msg_zajinhua_start_rep\022\023\n\013banker_"
    "user\030\001 \001(\r\022\024\n\014current_user\030\002 \001(\r\022\026\n\016user"
    "_max_score\030\003 \001(\003\022\023\n\013play_status\030\004 \003(\r\"@\n"
    "\031msg_zajinhua_addscore_req\022\021\n\tadd_score\030"
    "\001 \001(\003\022\020\n\010is_allin\030\002 \001(\r\"\317\001\n\031msg_zajinhua"
    "_addscore_rep\022\024\n\014current_user\030\001 \001(\r\022\026\n\016a"
    "dd_score_user\030\002 \001(\r\022\025\n\rcompare_state\030\003 \001"
    "(\r\022\027\n\017add_score_count\030\004 \001(\003\022\025\n\rcurrent_t"
    "imes\030\005 \001(\r\022\025\n\rcurrent_round\030\006 \001(\r\022\024\n\014onl"
    "y_compare\030\007 \001(\r\022\020\n\010is_allin\030\010 \001(\r\"0\n\027msg"
    "_zajinhua_giveup_req\022\025\n\rgiveup_reason\030\001 "
    "\001(\r\".\n\027msg_zajinhua_giveup_rep\022\023\n\013giveup"
    "_user\030\001 \001(\r\"5\n\035msg_zajinhua_compare_card"
    "_req\022\024\n\014compare_user\030\001 \001(\r\"^\n\035msg_zajinh"
    "ua_compare_card_rep\022\024\n\014current_user\030\001 \001("
    "\r\022\024\n\014compare_user\030\002 \003(\r\022\021\n\tlost_user\030\003 \001"
    "(\r\"-\n\032msg_zajinhua_look_card_req\022\017\n\007chai"
    "rid\030\001 \001(\r\"Z\n\032msg_zajinhua_look_card_rep\022"
    "\026\n\016look_card_user\030\001 \001(\r\022\021\n\tcard_data\030\002 \003"
    "(\r\022\021\n\tcard_type\030\003 \001(\r\"\034\n\032msg_zajinhua_op"
    "en_card_req\"(\n\026msg_zajinhua_open_card\022\016\n"
    "\006winner\030\001 \001(\r\"\246\001\n\031msg_zajinhua_game_end_"
    "rep\022\022\n\ngame_score\030\001 \003(\003\022!\n\tcard_data\030\002 \003"
    "(\0132\016.net.msg_cards\022\024\n\014compare_user\030\003 \003(\r"
    "\022\021\n\tend_state\030\004 \001(\r\022\025\n\rspecial_score\030\005 \003"
    "(\003\022\022\n\ncard_types\030\006 \003(\r\"\034\n\032msg_zajinhua_s"
    "how_card_req\"A\n\032msg_zajinhua_show_card_r"
    "ep\022\024\n\014show_chairid\030\001 \001(\r\022\r\n\005cards\030\002 \003(\r", 1559);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "zajinhua_logic_msg.proto", &protobuf_RegisterTypes);
  msg_zajinhua_game_info_free_rep::default_instance_ = new msg_zajinhua_game_info_free_rep();
  msg_zajinhua_game_info_play_rep::default_instance_ = new msg_zajinhua_game_info_play_rep();
  msg_zajinhua_start_rep::default_instance_ = new msg_zajinhua_start_rep();
  msg_zajinhua_addscore_req::default_instance_ = new msg_zajinhua_addscore_req();
  msg_zajinhua_addscore_rep::default_instance_ = new msg_zajinhua_addscore_rep();
  msg_zajinhua_giveup_req::default_instance_ = new msg_zajinhua_giveup_req();
  msg_zajinhua_giveup_rep::default_instance_ = new msg_zajinhua_giveup_rep();
  msg_zajinhua_compare_card_req::default_instance_ = new msg_zajinhua_compare_card_req();
  msg_zajinhua_compare_card_rep::default_instance_ = new msg_zajinhua_compare_card_rep();
  msg_zajinhua_look_card_req::default_instance_ = new msg_zajinhua_look_card_req();
  msg_zajinhua_look_card_rep::default_instance_ = new msg_zajinhua_look_card_rep();
  msg_zajinhua_open_card_req::default_instance_ = new msg_zajinhua_open_card_req();
  msg_zajinhua_open_card::default_instance_ = new msg_zajinhua_open_card();
  msg_zajinhua_game_end_rep::default_instance_ = new msg_zajinhua_game_end_rep();
  msg_zajinhua_show_card_req::default_instance_ = new msg_zajinhua_show_card_req();
  msg_zajinhua_show_card_rep::default_instance_ = new msg_zajinhua_show_card_rep();
  msg_zajinhua_game_info_free_rep::default_instance_->InitAsDefaultInstance();
  msg_zajinhua_game_info_play_rep::default_instance_->InitAsDefaultInstance();
  msg_zajinhua_start_rep::default_instance_->InitAsDefaultInstance();
  msg_zajinhua_addscore_req::default_instance_->InitAsDefaultInstance();
  msg_zajinhua_addscore_rep::default_instance_->InitAsDefaultInstance();
  msg_zajinhua_giveup_req::default_instance_->InitAsDefaultInstance();
  msg_zajinhua_giveup_rep::default_instance_->InitAsDefaultInstance();
  msg_zajinhua_compare_card_req::default_instance_->InitAsDefaultInstance();
  msg_zajinhua_compare_card_rep::default_instance_->InitAsDefaultInstance();
  msg_zajinhua_look_card_req::default_instance_->InitAsDefaultInstance();
  msg_zajinhua_look_card_rep::default_instance_->InitAsDefaultInstance();
  msg_zajinhua_open_card_req::default_instance_->InitAsDefaultInstance();
  msg_zajinhua_open_card::default_instance_->InitAsDefaultInstance();
  msg_zajinhua_game_end_rep::default_instance_->InitAsDefaultInstance();
  msg_zajinhua_show_card_req::default_instance_->InitAsDefaultInstance();
  msg_zajinhua_show_card_rep::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_zajinhua_5flogic_5fmsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_zajinhua_5flogic_5fmsg_2eproto {
  StaticDescriptorInitializer_zajinhua_5flogic_5fmsg_2eproto() {
    protobuf_AddDesc_zajinhua_5flogic_5fmsg_2eproto();
  }
} static_descriptor_initializer_zajinhua_5flogic_5fmsg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

msg_zajinhua_game_info_free_rep::msg_zajinhua_game_info_free_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_zajinhua_game_info_free_rep::InitAsDefaultInstance() {
}

msg_zajinhua_game_info_free_rep::msg_zajinhua_game_info_free_rep(const msg_zajinhua_game_info_free_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_zajinhua_game_info_free_rep::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_zajinhua_game_info_free_rep::~msg_zajinhua_game_info_free_rep() {
  SharedDtor();
}

void msg_zajinhua_game_info_free_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_zajinhua_game_info_free_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_zajinhua_game_info_free_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_zajinhua_game_info_free_rep_descriptor_;
}

const msg_zajinhua_game_info_free_rep& msg_zajinhua_game_info_free_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zajinhua_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_zajinhua_game_info_free_rep* msg_zajinhua_game_info_free_rep::default_instance_ = NULL;

msg_zajinhua_game_info_free_rep* msg_zajinhua_game_info_free_rep::New() const {
  return new msg_zajinhua_game_info_free_rep;
}

void msg_zajinhua_game_info_free_rep::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_zajinhua_game_info_free_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void msg_zajinhua_game_info_free_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_zajinhua_game_info_free_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_zajinhua_game_info_free_rep::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_zajinhua_game_info_free_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_zajinhua_game_info_free_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_zajinhua_game_info_free_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_zajinhua_game_info_free_rep::MergeFrom(const msg_zajinhua_game_info_free_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_zajinhua_game_info_free_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_zajinhua_game_info_free_rep::CopyFrom(const msg_zajinhua_game_info_free_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_zajinhua_game_info_free_rep::IsInitialized() const {

  return true;
}

void msg_zajinhua_game_info_free_rep::Swap(msg_zajinhua_game_info_free_rep* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_zajinhua_game_info_free_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_zajinhua_game_info_free_rep_descriptor_;
  metadata.reflection = msg_zajinhua_game_info_free_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_zajinhua_game_info_play_rep::kCurrentTimesFieldNumber;
const int msg_zajinhua_game_info_play_rep::kUserMaxScoreFieldNumber;
const int msg_zajinhua_game_info_play_rep::kBankerUserFieldNumber;
const int msg_zajinhua_game_info_play_rep::kCurrentUserFieldNumber;
const int msg_zajinhua_game_info_play_rep::kPlayStatusFieldNumber;
const int msg_zajinhua_game_info_play_rep::kCardStatFieldNumber;
const int msg_zajinhua_game_info_play_rep::kTableScoreFieldNumber;
const int msg_zajinhua_game_info_play_rep::kHandCardDataFieldNumber;
const int msg_zajinhua_game_info_play_rep::kCompareStateFieldNumber;
const int msg_zajinhua_game_info_play_rep::kCurrentRoundFieldNumber;
const int msg_zajinhua_game_info_play_rep::kOperTimeFieldNumber;
const int msg_zajinhua_game_info_play_rep::kIsMingpaiFieldNumber;
const int msg_zajinhua_game_info_play_rep::kCardTypeFieldNumber;
const int msg_zajinhua_game_info_play_rep::kGameStatusFieldNumber;
#endif  // !_MSC_VER

msg_zajinhua_game_info_play_rep::msg_zajinhua_game_info_play_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_zajinhua_game_info_play_rep::InitAsDefaultInstance() {
}

msg_zajinhua_game_info_play_rep::msg_zajinhua_game_info_play_rep(const msg_zajinhua_game_info_play_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_zajinhua_game_info_play_rep::SharedCtor() {
  _cached_size_ = 0;
  current_times_ = 0u;
  user_max_score_ = GOOGLE_LONGLONG(0);
  banker_user_ = 0u;
  current_user_ = 0u;
  compare_state_ = 0u;
  current_round_ = 0u;
  oper_time_ = 0u;
  is_mingpai_ = 0u;
  card_type_ = 0u;
  game_status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_zajinhua_game_info_play_rep::~msg_zajinhua_game_info_play_rep() {
  SharedDtor();
}

void msg_zajinhua_game_info_play_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_zajinhua_game_info_play_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_zajinhua_game_info_play_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_zajinhua_game_info_play_rep_descriptor_;
}

const msg_zajinhua_game_info_play_rep& msg_zajinhua_game_info_play_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zajinhua_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_zajinhua_game_info_play_rep* msg_zajinhua_game_info_play_rep::default_instance_ = NULL;

msg_zajinhua_game_info_play_rep* msg_zajinhua_game_info_play_rep::New() const {
  return new msg_zajinhua_game_info_play_rep;
}

void msg_zajinhua_game_info_play_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    current_times_ = 0u;
    user_max_score_ = GOOGLE_LONGLONG(0);
    banker_user_ = 0u;
    current_user_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    compare_state_ = 0u;
    current_round_ = 0u;
    oper_time_ = 0u;
    is_mingpai_ = 0u;
    card_type_ = 0u;
    game_status_ = 0u;
  }
  play_status_.Clear();
  card_stat_.Clear();
  table_score_.Clear();
  hand_card_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_zajinhua_game_info_play_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 current_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_times_)));
          set_has_current_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_user_max_score;
        break;
      }

      // optional int64 user_max_score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_max_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_max_score_)));
          set_has_user_max_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_banker_user;
        break;
      }

      // optional uint32 banker_user = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &banker_user_)));
          set_has_banker_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_current_user;
        break;
      }

      // optional uint32 current_user = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_user_)));
          set_has_current_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_play_status;
        break;
      }

      // repeated uint32 play_status = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_play_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_play_status())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_play_status())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_play_status;
        if (input->ExpectTag(64)) goto parse_card_stat;
        break;
      }

      // repeated uint32 card_stat = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_stat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_card_stat())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_stat())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_card_stat;
        if (input->ExpectTag(72)) goto parse_table_score;
        break;
      }

      // repeated int64 table_score = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 72, input, this->mutable_table_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_table_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_table_score;
        if (input->ExpectTag(80)) goto parse_hand_card_data;
        break;
      }

      // repeated uint32 hand_card_data = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hand_card_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80, input, this->mutable_hand_card_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hand_card_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_hand_card_data;
        if (input->ExpectTag(88)) goto parse_compare_state;
        break;
      }

      // optional uint32 compare_state = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_compare_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &compare_state_)));
          set_has_compare_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_current_round;
        break;
      }

      // optional uint32 current_round = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_round_)));
          set_has_current_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_oper_time;
        break;
      }

      // optional uint32 oper_time = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oper_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oper_time_)));
          set_has_oper_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_is_mingpai;
        break;
      }

      // optional uint32 is_mingpai = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_mingpai:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_mingpai_)));
          set_has_is_mingpai();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_card_type;
        break;
      }

      // optional uint32 card_type = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_type_)));
          set_has_card_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_game_status;
        break;
      }

      // optional uint32 game_status = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_status_)));
          set_has_game_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_zajinhua_game_info_play_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 current_times = 3;
  if (has_current_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->current_times(), output);
  }

  // optional int64 user_max_score = 4;
  if (has_user_max_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->user_max_score(), output);
  }

  // optional uint32 banker_user = 5;
  if (has_banker_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->banker_user(), output);
  }

  // optional uint32 current_user = 6;
  if (has_current_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->current_user(), output);
  }

  // repeated uint32 play_status = 7;
  for (int i = 0; i < this->play_status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->play_status(i), output);
  }

  // repeated uint32 card_stat = 8;
  for (int i = 0; i < this->card_stat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->card_stat(i), output);
  }

  // repeated int64 table_score = 9;
  for (int i = 0; i < this->table_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      9, this->table_score(i), output);
  }

  // repeated uint32 hand_card_data = 10;
  for (int i = 0; i < this->hand_card_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->hand_card_data(i), output);
  }

  // optional uint32 compare_state = 11;
  if (has_compare_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->compare_state(), output);
  }

  // optional uint32 current_round = 12;
  if (has_current_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->current_round(), output);
  }

  // optional uint32 oper_time = 13;
  if (has_oper_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->oper_time(), output);
  }

  // optional uint32 is_mingpai = 14;
  if (has_is_mingpai()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->is_mingpai(), output);
  }

  // optional uint32 card_type = 15;
  if (has_card_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->card_type(), output);
  }

  // optional uint32 game_status = 16;
  if (has_game_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->game_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_zajinhua_game_info_play_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 current_times = 3;
  if (has_current_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->current_times(), target);
  }

  // optional int64 user_max_score = 4;
  if (has_user_max_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->user_max_score(), target);
  }

  // optional uint32 banker_user = 5;
  if (has_banker_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->banker_user(), target);
  }

  // optional uint32 current_user = 6;
  if (has_current_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->current_user(), target);
  }

  // repeated uint32 play_status = 7;
  for (int i = 0; i < this->play_status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->play_status(i), target);
  }

  // repeated uint32 card_stat = 8;
  for (int i = 0; i < this->card_stat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->card_stat(i), target);
  }

  // repeated int64 table_score = 9;
  for (int i = 0; i < this->table_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(9, this->table_score(i), target);
  }

  // repeated uint32 hand_card_data = 10;
  for (int i = 0; i < this->hand_card_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(10, this->hand_card_data(i), target);
  }

  // optional uint32 compare_state = 11;
  if (has_compare_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->compare_state(), target);
  }

  // optional uint32 current_round = 12;
  if (has_current_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->current_round(), target);
  }

  // optional uint32 oper_time = 13;
  if (has_oper_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->oper_time(), target);
  }

  // optional uint32 is_mingpai = 14;
  if (has_is_mingpai()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->is_mingpai(), target);
  }

  // optional uint32 card_type = 15;
  if (has_card_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->card_type(), target);
  }

  // optional uint32 game_status = 16;
  if (has_game_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->game_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_zajinhua_game_info_play_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 current_times = 3;
    if (has_current_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_times());
    }

    // optional int64 user_max_score = 4;
    if (has_user_max_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_max_score());
    }

    // optional uint32 banker_user = 5;
    if (has_banker_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->banker_user());
    }

    // optional uint32 current_user = 6;
    if (has_current_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_user());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 compare_state = 11;
    if (has_compare_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->compare_state());
    }

    // optional uint32 current_round = 12;
    if (has_current_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_round());
    }

    // optional uint32 oper_time = 13;
    if (has_oper_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oper_time());
    }

    // optional uint32 is_mingpai = 14;
    if (has_is_mingpai()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_mingpai());
    }

    // optional uint32 card_type = 15;
    if (has_card_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card_type());
    }

    // optional uint32 game_status = 16;
    if (has_game_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_status());
    }

  }
  // repeated uint32 play_status = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->play_status_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->play_status(i));
    }
    total_size += 1 * this->play_status_size() + data_size;
  }

  // repeated uint32 card_stat = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_stat_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->card_stat(i));
    }
    total_size += 1 * this->card_stat_size() + data_size;
  }

  // repeated int64 table_score = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->table_score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->table_score(i));
    }
    total_size += 1 * this->table_score_size() + data_size;
  }

  // repeated uint32 hand_card_data = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->hand_card_data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hand_card_data(i));
    }
    total_size += 1 * this->hand_card_data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_zajinhua_game_info_play_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_zajinhua_game_info_play_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_zajinhua_game_info_play_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_zajinhua_game_info_play_rep::MergeFrom(const msg_zajinhua_game_info_play_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  play_status_.MergeFrom(from.play_status_);
  card_stat_.MergeFrom(from.card_stat_);
  table_score_.MergeFrom(from.table_score_);
  hand_card_data_.MergeFrom(from.hand_card_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_current_times()) {
      set_current_times(from.current_times());
    }
    if (from.has_user_max_score()) {
      set_user_max_score(from.user_max_score());
    }
    if (from.has_banker_user()) {
      set_banker_user(from.banker_user());
    }
    if (from.has_current_user()) {
      set_current_user(from.current_user());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_compare_state()) {
      set_compare_state(from.compare_state());
    }
    if (from.has_current_round()) {
      set_current_round(from.current_round());
    }
    if (from.has_oper_time()) {
      set_oper_time(from.oper_time());
    }
    if (from.has_is_mingpai()) {
      set_is_mingpai(from.is_mingpai());
    }
    if (from.has_card_type()) {
      set_card_type(from.card_type());
    }
    if (from.has_game_status()) {
      set_game_status(from.game_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_zajinhua_game_info_play_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_zajinhua_game_info_play_rep::CopyFrom(const msg_zajinhua_game_info_play_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_zajinhua_game_info_play_rep::IsInitialized() const {

  return true;
}

void msg_zajinhua_game_info_play_rep::Swap(msg_zajinhua_game_info_play_rep* other) {
  if (other != this) {
    std::swap(current_times_, other->current_times_);
    std::swap(user_max_score_, other->user_max_score_);
    std::swap(banker_user_, other->banker_user_);
    std::swap(current_user_, other->current_user_);
    play_status_.Swap(&other->play_status_);
    card_stat_.Swap(&other->card_stat_);
    table_score_.Swap(&other->table_score_);
    hand_card_data_.Swap(&other->hand_card_data_);
    std::swap(compare_state_, other->compare_state_);
    std::swap(current_round_, other->current_round_);
    std::swap(oper_time_, other->oper_time_);
    std::swap(is_mingpai_, other->is_mingpai_);
    std::swap(card_type_, other->card_type_);
    std::swap(game_status_, other->game_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_zajinhua_game_info_play_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_zajinhua_game_info_play_rep_descriptor_;
  metadata.reflection = msg_zajinhua_game_info_play_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_zajinhua_start_rep::kBankerUserFieldNumber;
const int msg_zajinhua_start_rep::kCurrentUserFieldNumber;
const int msg_zajinhua_start_rep::kUserMaxScoreFieldNumber;
const int msg_zajinhua_start_rep::kPlayStatusFieldNumber;
#endif  // !_MSC_VER

msg_zajinhua_start_rep::msg_zajinhua_start_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_zajinhua_start_rep::InitAsDefaultInstance() {
}

msg_zajinhua_start_rep::msg_zajinhua_start_rep(const msg_zajinhua_start_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_zajinhua_start_rep::SharedCtor() {
  _cached_size_ = 0;
  banker_user_ = 0u;
  current_user_ = 0u;
  user_max_score_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_zajinhua_start_rep::~msg_zajinhua_start_rep() {
  SharedDtor();
}

void msg_zajinhua_start_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_zajinhua_start_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_zajinhua_start_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_zajinhua_start_rep_descriptor_;
}

const msg_zajinhua_start_rep& msg_zajinhua_start_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zajinhua_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_zajinhua_start_rep* msg_zajinhua_start_rep::default_instance_ = NULL;

msg_zajinhua_start_rep* msg_zajinhua_start_rep::New() const {
  return new msg_zajinhua_start_rep;
}

void msg_zajinhua_start_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    banker_user_ = 0u;
    current_user_ = 0u;
    user_max_score_ = GOOGLE_LONGLONG(0);
  }
  play_status_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_zajinhua_start_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 banker_user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &banker_user_)));
          set_has_banker_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_current_user;
        break;
      }

      // optional uint32 current_user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_user_)));
          set_has_current_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_user_max_score;
        break;
      }

      // optional int64 user_max_score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_max_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_max_score_)));
          set_has_user_max_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_play_status;
        break;
      }

      // repeated uint32 play_status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_play_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_play_status())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_play_status())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_play_status;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_zajinhua_start_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 banker_user = 1;
  if (has_banker_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->banker_user(), output);
  }

  // optional uint32 current_user = 2;
  if (has_current_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->current_user(), output);
  }

  // optional int64 user_max_score = 3;
  if (has_user_max_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->user_max_score(), output);
  }

  // repeated uint32 play_status = 4;
  for (int i = 0; i < this->play_status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->play_status(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_zajinhua_start_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 banker_user = 1;
  if (has_banker_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->banker_user(), target);
  }

  // optional uint32 current_user = 2;
  if (has_current_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->current_user(), target);
  }

  // optional int64 user_max_score = 3;
  if (has_user_max_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->user_max_score(), target);
  }

  // repeated uint32 play_status = 4;
  for (int i = 0; i < this->play_status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->play_status(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_zajinhua_start_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 banker_user = 1;
    if (has_banker_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->banker_user());
    }

    // optional uint32 current_user = 2;
    if (has_current_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_user());
    }

    // optional int64 user_max_score = 3;
    if (has_user_max_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_max_score());
    }

  }
  // repeated uint32 play_status = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->play_status_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->play_status(i));
    }
    total_size += 1 * this->play_status_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_zajinhua_start_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_zajinhua_start_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_zajinhua_start_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_zajinhua_start_rep::MergeFrom(const msg_zajinhua_start_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  play_status_.MergeFrom(from.play_status_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_banker_user()) {
      set_banker_user(from.banker_user());
    }
    if (from.has_current_user()) {
      set_current_user(from.current_user());
    }
    if (from.has_user_max_score()) {
      set_user_max_score(from.user_max_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_zajinhua_start_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_zajinhua_start_rep::CopyFrom(const msg_zajinhua_start_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_zajinhua_start_rep::IsInitialized() const {

  return true;
}

void msg_zajinhua_start_rep::Swap(msg_zajinhua_start_rep* other) {
  if (other != this) {
    std::swap(banker_user_, other->banker_user_);
    std::swap(current_user_, other->current_user_);
    std::swap(user_max_score_, other->user_max_score_);
    play_status_.Swap(&other->play_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_zajinhua_start_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_zajinhua_start_rep_descriptor_;
  metadata.reflection = msg_zajinhua_start_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_zajinhua_addscore_req::kAddScoreFieldNumber;
const int msg_zajinhua_addscore_req::kIsAllinFieldNumber;
#endif  // !_MSC_VER

msg_zajinhua_addscore_req::msg_zajinhua_addscore_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_zajinhua_addscore_req::InitAsDefaultInstance() {
}

msg_zajinhua_addscore_req::msg_zajinhua_addscore_req(const msg_zajinhua_addscore_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_zajinhua_addscore_req::SharedCtor() {
  _cached_size_ = 0;
  add_score_ = GOOGLE_LONGLONG(0);
  is_allin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_zajinhua_addscore_req::~msg_zajinhua_addscore_req() {
  SharedDtor();
}

void msg_zajinhua_addscore_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_zajinhua_addscore_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_zajinhua_addscore_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_zajinhua_addscore_req_descriptor_;
}

const msg_zajinhua_addscore_req& msg_zajinhua_addscore_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zajinhua_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_zajinhua_addscore_req* msg_zajinhua_addscore_req::default_instance_ = NULL;

msg_zajinhua_addscore_req* msg_zajinhua_addscore_req::New() const {
  return new msg_zajinhua_addscore_req;
}

void msg_zajinhua_addscore_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    add_score_ = GOOGLE_LONGLONG(0);
    is_allin_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_zajinhua_addscore_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 add_score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &add_score_)));
          set_has_add_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_allin;
        break;
      }

      // optional uint32 is_allin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_allin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_allin_)));
          set_has_is_allin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_zajinhua_addscore_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 add_score = 1;
  if (has_add_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->add_score(), output);
  }

  // optional uint32 is_allin = 2;
  if (has_is_allin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->is_allin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_zajinhua_addscore_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 add_score = 1;
  if (has_add_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->add_score(), target);
  }

  // optional uint32 is_allin = 2;
  if (has_is_allin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->is_allin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_zajinhua_addscore_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 add_score = 1;
    if (has_add_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->add_score());
    }

    // optional uint32 is_allin = 2;
    if (has_is_allin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_allin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_zajinhua_addscore_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_zajinhua_addscore_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_zajinhua_addscore_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_zajinhua_addscore_req::MergeFrom(const msg_zajinhua_addscore_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_add_score()) {
      set_add_score(from.add_score());
    }
    if (from.has_is_allin()) {
      set_is_allin(from.is_allin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_zajinhua_addscore_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_zajinhua_addscore_req::CopyFrom(const msg_zajinhua_addscore_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_zajinhua_addscore_req::IsInitialized() const {

  return true;
}

void msg_zajinhua_addscore_req::Swap(msg_zajinhua_addscore_req* other) {
  if (other != this) {
    std::swap(add_score_, other->add_score_);
    std::swap(is_allin_, other->is_allin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_zajinhua_addscore_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_zajinhua_addscore_req_descriptor_;
  metadata.reflection = msg_zajinhua_addscore_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_zajinhua_addscore_rep::kCurrentUserFieldNumber;
const int msg_zajinhua_addscore_rep::kAddScoreUserFieldNumber;
const int msg_zajinhua_addscore_rep::kCompareStateFieldNumber;
const int msg_zajinhua_addscore_rep::kAddScoreCountFieldNumber;
const int msg_zajinhua_addscore_rep::kCurrentTimesFieldNumber;
const int msg_zajinhua_addscore_rep::kCurrentRoundFieldNumber;
const int msg_zajinhua_addscore_rep::kOnlyCompareFieldNumber;
const int msg_zajinhua_addscore_rep::kIsAllinFieldNumber;
#endif  // !_MSC_VER

msg_zajinhua_addscore_rep::msg_zajinhua_addscore_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_zajinhua_addscore_rep::InitAsDefaultInstance() {
}

msg_zajinhua_addscore_rep::msg_zajinhua_addscore_rep(const msg_zajinhua_addscore_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_zajinhua_addscore_rep::SharedCtor() {
  _cached_size_ = 0;
  current_user_ = 0u;
  add_score_user_ = 0u;
  compare_state_ = 0u;
  add_score_count_ = GOOGLE_LONGLONG(0);
  current_times_ = 0u;
  current_round_ = 0u;
  only_compare_ = 0u;
  is_allin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_zajinhua_addscore_rep::~msg_zajinhua_addscore_rep() {
  SharedDtor();
}

void msg_zajinhua_addscore_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_zajinhua_addscore_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_zajinhua_addscore_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_zajinhua_addscore_rep_descriptor_;
}

const msg_zajinhua_addscore_rep& msg_zajinhua_addscore_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zajinhua_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_zajinhua_addscore_rep* msg_zajinhua_addscore_rep::default_instance_ = NULL;

msg_zajinhua_addscore_rep* msg_zajinhua_addscore_rep::New() const {
  return new msg_zajinhua_addscore_rep;
}

void msg_zajinhua_addscore_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    current_user_ = 0u;
    add_score_user_ = 0u;
    compare_state_ = 0u;
    add_score_count_ = GOOGLE_LONGLONG(0);
    current_times_ = 0u;
    current_round_ = 0u;
    only_compare_ = 0u;
    is_allin_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_zajinhua_addscore_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 current_user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_user_)));
          set_has_current_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_add_score_user;
        break;
      }

      // optional uint32 add_score_user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_score_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_score_user_)));
          set_has_add_score_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_compare_state;
        break;
      }

      // optional uint32 compare_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_compare_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &compare_state_)));
          set_has_compare_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_add_score_count;
        break;
      }

      // optional int64 add_score_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_score_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &add_score_count_)));
          set_has_add_score_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_current_times;
        break;
      }

      // optional uint32 current_times = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_times_)));
          set_has_current_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_current_round;
        break;
      }

      // optional uint32 current_round = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_round_)));
          set_has_current_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_only_compare;
        break;
      }

      // optional uint32 only_compare = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_only_compare:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &only_compare_)));
          set_has_only_compare();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_is_allin;
        break;
      }

      // optional uint32 is_allin = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_allin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_allin_)));
          set_has_is_allin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_zajinhua_addscore_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 current_user = 1;
  if (has_current_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->current_user(), output);
  }

  // optional uint32 add_score_user = 2;
  if (has_add_score_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->add_score_user(), output);
  }

  // optional uint32 compare_state = 3;
  if (has_compare_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->compare_state(), output);
  }

  // optional int64 add_score_count = 4;
  if (has_add_score_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->add_score_count(), output);
  }

  // optional uint32 current_times = 5;
  if (has_current_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->current_times(), output);
  }

  // optional uint32 current_round = 6;
  if (has_current_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->current_round(), output);
  }

  // optional uint32 only_compare = 7;
  if (has_only_compare()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->only_compare(), output);
  }

  // optional uint32 is_allin = 8;
  if (has_is_allin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->is_allin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_zajinhua_addscore_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 current_user = 1;
  if (has_current_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->current_user(), target);
  }

  // optional uint32 add_score_user = 2;
  if (has_add_score_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->add_score_user(), target);
  }

  // optional uint32 compare_state = 3;
  if (has_compare_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->compare_state(), target);
  }

  // optional int64 add_score_count = 4;
  if (has_add_score_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->add_score_count(), target);
  }

  // optional uint32 current_times = 5;
  if (has_current_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->current_times(), target);
  }

  // optional uint32 current_round = 6;
  if (has_current_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->current_round(), target);
  }

  // optional uint32 only_compare = 7;
  if (has_only_compare()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->only_compare(), target);
  }

  // optional uint32 is_allin = 8;
  if (has_is_allin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->is_allin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_zajinhua_addscore_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 current_user = 1;
    if (has_current_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_user());
    }

    // optional uint32 add_score_user = 2;
    if (has_add_score_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->add_score_user());
    }

    // optional uint32 compare_state = 3;
    if (has_compare_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->compare_state());
    }

    // optional int64 add_score_count = 4;
    if (has_add_score_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->add_score_count());
    }

    // optional uint32 current_times = 5;
    if (has_current_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_times());
    }

    // optional uint32 current_round = 6;
    if (has_current_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_round());
    }

    // optional uint32 only_compare = 7;
    if (has_only_compare()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->only_compare());
    }

    // optional uint32 is_allin = 8;
    if (has_is_allin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_allin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_zajinhua_addscore_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_zajinhua_addscore_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_zajinhua_addscore_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_zajinhua_addscore_rep::MergeFrom(const msg_zajinhua_addscore_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_current_user()) {
      set_current_user(from.current_user());
    }
    if (from.has_add_score_user()) {
      set_add_score_user(from.add_score_user());
    }
    if (from.has_compare_state()) {
      set_compare_state(from.compare_state());
    }
    if (from.has_add_score_count()) {
      set_add_score_count(from.add_score_count());
    }
    if (from.has_current_times()) {
      set_current_times(from.current_times());
    }
    if (from.has_current_round()) {
      set_current_round(from.current_round());
    }
    if (from.has_only_compare()) {
      set_only_compare(from.only_compare());
    }
    if (from.has_is_allin()) {
      set_is_allin(from.is_allin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_zajinhua_addscore_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_zajinhua_addscore_rep::CopyFrom(const msg_zajinhua_addscore_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_zajinhua_addscore_rep::IsInitialized() const {

  return true;
}

void msg_zajinhua_addscore_rep::Swap(msg_zajinhua_addscore_rep* other) {
  if (other != this) {
    std::swap(current_user_, other->current_user_);
    std::swap(add_score_user_, other->add_score_user_);
    std::swap(compare_state_, other->compare_state_);
    std::swap(add_score_count_, other->add_score_count_);
    std::swap(current_times_, other->current_times_);
    std::swap(current_round_, other->current_round_);
    std::swap(only_compare_, other->only_compare_);
    std::swap(is_allin_, other->is_allin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_zajinhua_addscore_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_zajinhua_addscore_rep_descriptor_;
  metadata.reflection = msg_zajinhua_addscore_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_zajinhua_giveup_req::kGiveupReasonFieldNumber;
#endif  // !_MSC_VER

msg_zajinhua_giveup_req::msg_zajinhua_giveup_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_zajinhua_giveup_req::InitAsDefaultInstance() {
}

msg_zajinhua_giveup_req::msg_zajinhua_giveup_req(const msg_zajinhua_giveup_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_zajinhua_giveup_req::SharedCtor() {
  _cached_size_ = 0;
  giveup_reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_zajinhua_giveup_req::~msg_zajinhua_giveup_req() {
  SharedDtor();
}

void msg_zajinhua_giveup_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_zajinhua_giveup_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_zajinhua_giveup_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_zajinhua_giveup_req_descriptor_;
}

const msg_zajinhua_giveup_req& msg_zajinhua_giveup_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zajinhua_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_zajinhua_giveup_req* msg_zajinhua_giveup_req::default_instance_ = NULL;

msg_zajinhua_giveup_req* msg_zajinhua_giveup_req::New() const {
  return new msg_zajinhua_giveup_req;
}

void msg_zajinhua_giveup_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    giveup_reason_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_zajinhua_giveup_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 giveup_reason = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &giveup_reason_)));
          set_has_giveup_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_zajinhua_giveup_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 giveup_reason = 1;
  if (has_giveup_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->giveup_reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_zajinhua_giveup_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 giveup_reason = 1;
  if (has_giveup_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->giveup_reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_zajinhua_giveup_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 giveup_reason = 1;
    if (has_giveup_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->giveup_reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_zajinhua_giveup_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_zajinhua_giveup_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_zajinhua_giveup_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_zajinhua_giveup_req::MergeFrom(const msg_zajinhua_giveup_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_giveup_reason()) {
      set_giveup_reason(from.giveup_reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_zajinhua_giveup_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_zajinhua_giveup_req::CopyFrom(const msg_zajinhua_giveup_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_zajinhua_giveup_req::IsInitialized() const {

  return true;
}

void msg_zajinhua_giveup_req::Swap(msg_zajinhua_giveup_req* other) {
  if (other != this) {
    std::swap(giveup_reason_, other->giveup_reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_zajinhua_giveup_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_zajinhua_giveup_req_descriptor_;
  metadata.reflection = msg_zajinhua_giveup_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_zajinhua_giveup_rep::kGiveupUserFieldNumber;
#endif  // !_MSC_VER

msg_zajinhua_giveup_rep::msg_zajinhua_giveup_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_zajinhua_giveup_rep::InitAsDefaultInstance() {
}

msg_zajinhua_giveup_rep::msg_zajinhua_giveup_rep(const msg_zajinhua_giveup_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_zajinhua_giveup_rep::SharedCtor() {
  _cached_size_ = 0;
  giveup_user_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_zajinhua_giveup_rep::~msg_zajinhua_giveup_rep() {
  SharedDtor();
}

void msg_zajinhua_giveup_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_zajinhua_giveup_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_zajinhua_giveup_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_zajinhua_giveup_rep_descriptor_;
}

const msg_zajinhua_giveup_rep& msg_zajinhua_giveup_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zajinhua_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_zajinhua_giveup_rep* msg_zajinhua_giveup_rep::default_instance_ = NULL;

msg_zajinhua_giveup_rep* msg_zajinhua_giveup_rep::New() const {
  return new msg_zajinhua_giveup_rep;
}

void msg_zajinhua_giveup_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    giveup_user_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_zajinhua_giveup_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 giveup_user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &giveup_user_)));
          set_has_giveup_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_zajinhua_giveup_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 giveup_user = 1;
  if (has_giveup_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->giveup_user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_zajinhua_giveup_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 giveup_user = 1;
  if (has_giveup_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->giveup_user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_zajinhua_giveup_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 giveup_user = 1;
    if (has_giveup_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->giveup_user());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_zajinhua_giveup_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_zajinhua_giveup_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_zajinhua_giveup_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_zajinhua_giveup_rep::MergeFrom(const msg_zajinhua_giveup_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_giveup_user()) {
      set_giveup_user(from.giveup_user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_zajinhua_giveup_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_zajinhua_giveup_rep::CopyFrom(const msg_zajinhua_giveup_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_zajinhua_giveup_rep::IsInitialized() const {

  return true;
}

void msg_zajinhua_giveup_rep::Swap(msg_zajinhua_giveup_rep* other) {
  if (other != this) {
    std::swap(giveup_user_, other->giveup_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_zajinhua_giveup_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_zajinhua_giveup_rep_descriptor_;
  metadata.reflection = msg_zajinhua_giveup_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_zajinhua_compare_card_req::kCompareUserFieldNumber;
#endif  // !_MSC_VER

msg_zajinhua_compare_card_req::msg_zajinhua_compare_card_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_zajinhua_compare_card_req::InitAsDefaultInstance() {
}

msg_zajinhua_compare_card_req::msg_zajinhua_compare_card_req(const msg_zajinhua_compare_card_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_zajinhua_compare_card_req::SharedCtor() {
  _cached_size_ = 0;
  compare_user_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_zajinhua_compare_card_req::~msg_zajinhua_compare_card_req() {
  SharedDtor();
}

void msg_zajinhua_compare_card_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_zajinhua_compare_card_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_zajinhua_compare_card_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_zajinhua_compare_card_req_descriptor_;
}

const msg_zajinhua_compare_card_req& msg_zajinhua_compare_card_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zajinhua_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_zajinhua_compare_card_req* msg_zajinhua_compare_card_req::default_instance_ = NULL;

msg_zajinhua_compare_card_req* msg_zajinhua_compare_card_req::New() const {
  return new msg_zajinhua_compare_card_req;
}

void msg_zajinhua_compare_card_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    compare_user_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_zajinhua_compare_card_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 compare_user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &compare_user_)));
          set_has_compare_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_zajinhua_compare_card_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 compare_user = 1;
  if (has_compare_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->compare_user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_zajinhua_compare_card_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 compare_user = 1;
  if (has_compare_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->compare_user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_zajinhua_compare_card_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 compare_user = 1;
    if (has_compare_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->compare_user());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_zajinhua_compare_card_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_zajinhua_compare_card_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_zajinhua_compare_card_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_zajinhua_compare_card_req::MergeFrom(const msg_zajinhua_compare_card_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_compare_user()) {
      set_compare_user(from.compare_user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_zajinhua_compare_card_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_zajinhua_compare_card_req::CopyFrom(const msg_zajinhua_compare_card_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_zajinhua_compare_card_req::IsInitialized() const {

  return true;
}

void msg_zajinhua_compare_card_req::Swap(msg_zajinhua_compare_card_req* other) {
  if (other != this) {
    std::swap(compare_user_, other->compare_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_zajinhua_compare_card_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_zajinhua_compare_card_req_descriptor_;
  metadata.reflection = msg_zajinhua_compare_card_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_zajinhua_compare_card_rep::kCurrentUserFieldNumber;
const int msg_zajinhua_compare_card_rep::kCompareUserFieldNumber;
const int msg_zajinhua_compare_card_rep::kLostUserFieldNumber;
#endif  // !_MSC_VER

msg_zajinhua_compare_card_rep::msg_zajinhua_compare_card_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_zajinhua_compare_card_rep::InitAsDefaultInstance() {
}

msg_zajinhua_compare_card_rep::msg_zajinhua_compare_card_rep(const msg_zajinhua_compare_card_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_zajinhua_compare_card_rep::SharedCtor() {
  _cached_size_ = 0;
  current_user_ = 0u;
  lost_user_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_zajinhua_compare_card_rep::~msg_zajinhua_compare_card_rep() {
  SharedDtor();
}

void msg_zajinhua_compare_card_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_zajinhua_compare_card_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_zajinhua_compare_card_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_zajinhua_compare_card_rep_descriptor_;
}

const msg_zajinhua_compare_card_rep& msg_zajinhua_compare_card_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zajinhua_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_zajinhua_compare_card_rep* msg_zajinhua_compare_card_rep::default_instance_ = NULL;

msg_zajinhua_compare_card_rep* msg_zajinhua_compare_card_rep::New() const {
  return new msg_zajinhua_compare_card_rep;
}

void msg_zajinhua_compare_card_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    current_user_ = 0u;
    lost_user_ = 0u;
  }
  compare_user_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_zajinhua_compare_card_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 current_user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_user_)));
          set_has_current_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_compare_user;
        break;
      }

      // repeated uint32 compare_user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_compare_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_compare_user())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_compare_user())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_compare_user;
        if (input->ExpectTag(24)) goto parse_lost_user;
        break;
      }

      // optional uint32 lost_user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lost_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lost_user_)));
          set_has_lost_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_zajinhua_compare_card_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 current_user = 1;
  if (has_current_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->current_user(), output);
  }

  // repeated uint32 compare_user = 2;
  for (int i = 0; i < this->compare_user_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->compare_user(i), output);
  }

  // optional uint32 lost_user = 3;
  if (has_lost_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lost_user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_zajinhua_compare_card_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 current_user = 1;
  if (has_current_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->current_user(), target);
  }

  // repeated uint32 compare_user = 2;
  for (int i = 0; i < this->compare_user_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->compare_user(i), target);
  }

  // optional uint32 lost_user = 3;
  if (has_lost_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lost_user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_zajinhua_compare_card_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 current_user = 1;
    if (has_current_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_user());
    }

    // optional uint32 lost_user = 3;
    if (has_lost_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lost_user());
    }

  }
  // repeated uint32 compare_user = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->compare_user_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->compare_user(i));
    }
    total_size += 1 * this->compare_user_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_zajinhua_compare_card_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_zajinhua_compare_card_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_zajinhua_compare_card_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_zajinhua_compare_card_rep::MergeFrom(const msg_zajinhua_compare_card_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  compare_user_.MergeFrom(from.compare_user_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_current_user()) {
      set_current_user(from.current_user());
    }
    if (from.has_lost_user()) {
      set_lost_user(from.lost_user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_zajinhua_compare_card_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_zajinhua_compare_card_rep::CopyFrom(const msg_zajinhua_compare_card_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_zajinhua_compare_card_rep::IsInitialized() const {

  return true;
}

void msg_zajinhua_compare_card_rep::Swap(msg_zajinhua_compare_card_rep* other) {
  if (other != this) {
    std::swap(current_user_, other->current_user_);
    compare_user_.Swap(&other->compare_user_);
    std::swap(lost_user_, other->lost_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_zajinhua_compare_card_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_zajinhua_compare_card_rep_descriptor_;
  metadata.reflection = msg_zajinhua_compare_card_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_zajinhua_look_card_req::kChairidFieldNumber;
#endif  // !_MSC_VER

msg_zajinhua_look_card_req::msg_zajinhua_look_card_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_zajinhua_look_card_req::InitAsDefaultInstance() {
}

msg_zajinhua_look_card_req::msg_zajinhua_look_card_req(const msg_zajinhua_look_card_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_zajinhua_look_card_req::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_zajinhua_look_card_req::~msg_zajinhua_look_card_req() {
  SharedDtor();
}

void msg_zajinhua_look_card_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_zajinhua_look_card_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_zajinhua_look_card_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_zajinhua_look_card_req_descriptor_;
}

const msg_zajinhua_look_card_req& msg_zajinhua_look_card_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zajinhua_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_zajinhua_look_card_req* msg_zajinhua_look_card_req::default_instance_ = NULL;

msg_zajinhua_look_card_req* msg_zajinhua_look_card_req::New() const {
  return new msg_zajinhua_look_card_req;
}

void msg_zajinhua_look_card_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_zajinhua_look_card_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 chairid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_zajinhua_look_card_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 chairid = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chairid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_zajinhua_look_card_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 chairid = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chairid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_zajinhua_look_card_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 chairid = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chairid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_zajinhua_look_card_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_zajinhua_look_card_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_zajinhua_look_card_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_zajinhua_look_card_req::MergeFrom(const msg_zajinhua_look_card_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_zajinhua_look_card_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_zajinhua_look_card_req::CopyFrom(const msg_zajinhua_look_card_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_zajinhua_look_card_req::IsInitialized() const {

  return true;
}

void msg_zajinhua_look_card_req::Swap(msg_zajinhua_look_card_req* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_zajinhua_look_card_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_zajinhua_look_card_req_descriptor_;
  metadata.reflection = msg_zajinhua_look_card_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_zajinhua_look_card_rep::kLookCardUserFieldNumber;
const int msg_zajinhua_look_card_rep::kCardDataFieldNumber;
const int msg_zajinhua_look_card_rep::kCardTypeFieldNumber;
#endif  // !_MSC_VER

msg_zajinhua_look_card_rep::msg_zajinhua_look_card_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_zajinhua_look_card_rep::InitAsDefaultInstance() {
}

msg_zajinhua_look_card_rep::msg_zajinhua_look_card_rep(const msg_zajinhua_look_card_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_zajinhua_look_card_rep::SharedCtor() {
  _cached_size_ = 0;
  look_card_user_ = 0u;
  card_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_zajinhua_look_card_rep::~msg_zajinhua_look_card_rep() {
  SharedDtor();
}

void msg_zajinhua_look_card_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_zajinhua_look_card_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_zajinhua_look_card_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_zajinhua_look_card_rep_descriptor_;
}

const msg_zajinhua_look_card_rep& msg_zajinhua_look_card_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zajinhua_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_zajinhua_look_card_rep* msg_zajinhua_look_card_rep::default_instance_ = NULL;

msg_zajinhua_look_card_rep* msg_zajinhua_look_card_rep::New() const {
  return new msg_zajinhua_look_card_rep;
}

void msg_zajinhua_look_card_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    look_card_user_ = 0u;
    card_type_ = 0u;
  }
  card_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_zajinhua_look_card_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 look_card_user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &look_card_user_)));
          set_has_look_card_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_card_data;
        break;
      }

      // repeated uint32 card_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_card_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_card_data;
        if (input->ExpectTag(24)) goto parse_card_type;
        break;
      }

      // optional uint32 card_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_type_)));
          set_has_card_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_zajinhua_look_card_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 look_card_user = 1;
  if (has_look_card_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->look_card_user(), output);
  }

  // repeated uint32 card_data = 2;
  for (int i = 0; i < this->card_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->card_data(i), output);
  }

  // optional uint32 card_type = 3;
  if (has_card_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->card_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_zajinhua_look_card_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 look_card_user = 1;
  if (has_look_card_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->look_card_user(), target);
  }

  // repeated uint32 card_data = 2;
  for (int i = 0; i < this->card_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->card_data(i), target);
  }

  // optional uint32 card_type = 3;
  if (has_card_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->card_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_zajinhua_look_card_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 look_card_user = 1;
    if (has_look_card_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->look_card_user());
    }

    // optional uint32 card_type = 3;
    if (has_card_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card_type());
    }

  }
  // repeated uint32 card_data = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->card_data(i));
    }
    total_size += 1 * this->card_data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_zajinhua_look_card_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_zajinhua_look_card_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_zajinhua_look_card_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_zajinhua_look_card_rep::MergeFrom(const msg_zajinhua_look_card_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_data_.MergeFrom(from.card_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_look_card_user()) {
      set_look_card_user(from.look_card_user());
    }
    if (from.has_card_type()) {
      set_card_type(from.card_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_zajinhua_look_card_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_zajinhua_look_card_rep::CopyFrom(const msg_zajinhua_look_card_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_zajinhua_look_card_rep::IsInitialized() const {

  return true;
}

void msg_zajinhua_look_card_rep::Swap(msg_zajinhua_look_card_rep* other) {
  if (other != this) {
    std::swap(look_card_user_, other->look_card_user_);
    card_data_.Swap(&other->card_data_);
    std::swap(card_type_, other->card_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_zajinhua_look_card_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_zajinhua_look_card_rep_descriptor_;
  metadata.reflection = msg_zajinhua_look_card_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

msg_zajinhua_open_card_req::msg_zajinhua_open_card_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_zajinhua_open_card_req::InitAsDefaultInstance() {
}

msg_zajinhua_open_card_req::msg_zajinhua_open_card_req(const msg_zajinhua_open_card_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_zajinhua_open_card_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_zajinhua_open_card_req::~msg_zajinhua_open_card_req() {
  SharedDtor();
}

void msg_zajinhua_open_card_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_zajinhua_open_card_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_zajinhua_open_card_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_zajinhua_open_card_req_descriptor_;
}

const msg_zajinhua_open_card_req& msg_zajinhua_open_card_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zajinhua_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_zajinhua_open_card_req* msg_zajinhua_open_card_req::default_instance_ = NULL;

msg_zajinhua_open_card_req* msg_zajinhua_open_card_req::New() const {
  return new msg_zajinhua_open_card_req;
}

void msg_zajinhua_open_card_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_zajinhua_open_card_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void msg_zajinhua_open_card_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_zajinhua_open_card_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_zajinhua_open_card_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_zajinhua_open_card_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_zajinhua_open_card_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_zajinhua_open_card_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_zajinhua_open_card_req::MergeFrom(const msg_zajinhua_open_card_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_zajinhua_open_card_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_zajinhua_open_card_req::CopyFrom(const msg_zajinhua_open_card_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_zajinhua_open_card_req::IsInitialized() const {

  return true;
}

void msg_zajinhua_open_card_req::Swap(msg_zajinhua_open_card_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_zajinhua_open_card_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_zajinhua_open_card_req_descriptor_;
  metadata.reflection = msg_zajinhua_open_card_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_zajinhua_open_card::kWinnerFieldNumber;
#endif  // !_MSC_VER

msg_zajinhua_open_card::msg_zajinhua_open_card()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_zajinhua_open_card::InitAsDefaultInstance() {
}

msg_zajinhua_open_card::msg_zajinhua_open_card(const msg_zajinhua_open_card& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_zajinhua_open_card::SharedCtor() {
  _cached_size_ = 0;
  winner_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_zajinhua_open_card::~msg_zajinhua_open_card() {
  SharedDtor();
}

void msg_zajinhua_open_card::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_zajinhua_open_card::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_zajinhua_open_card::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_zajinhua_open_card_descriptor_;
}

const msg_zajinhua_open_card& msg_zajinhua_open_card::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zajinhua_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_zajinhua_open_card* msg_zajinhua_open_card::default_instance_ = NULL;

msg_zajinhua_open_card* msg_zajinhua_open_card::New() const {
  return new msg_zajinhua_open_card;
}

void msg_zajinhua_open_card::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    winner_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_zajinhua_open_card::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 winner = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winner_)));
          set_has_winner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_zajinhua_open_card::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 winner = 1;
  if (has_winner()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->winner(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_zajinhua_open_card::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 winner = 1;
  if (has_winner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->winner(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_zajinhua_open_card::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 winner = 1;
    if (has_winner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winner());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_zajinhua_open_card::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_zajinhua_open_card* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_zajinhua_open_card*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_zajinhua_open_card::MergeFrom(const msg_zajinhua_open_card& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_winner()) {
      set_winner(from.winner());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_zajinhua_open_card::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_zajinhua_open_card::CopyFrom(const msg_zajinhua_open_card& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_zajinhua_open_card::IsInitialized() const {

  return true;
}

void msg_zajinhua_open_card::Swap(msg_zajinhua_open_card* other) {
  if (other != this) {
    std::swap(winner_, other->winner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_zajinhua_open_card::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_zajinhua_open_card_descriptor_;
  metadata.reflection = msg_zajinhua_open_card_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_zajinhua_game_end_rep::kGameScoreFieldNumber;
const int msg_zajinhua_game_end_rep::kCardDataFieldNumber;
const int msg_zajinhua_game_end_rep::kCompareUserFieldNumber;
const int msg_zajinhua_game_end_rep::kEndStateFieldNumber;
const int msg_zajinhua_game_end_rep::kSpecialScoreFieldNumber;
const int msg_zajinhua_game_end_rep::kCardTypesFieldNumber;
#endif  // !_MSC_VER

msg_zajinhua_game_end_rep::msg_zajinhua_game_end_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_zajinhua_game_end_rep::InitAsDefaultInstance() {
}

msg_zajinhua_game_end_rep::msg_zajinhua_game_end_rep(const msg_zajinhua_game_end_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_zajinhua_game_end_rep::SharedCtor() {
  _cached_size_ = 0;
  end_state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_zajinhua_game_end_rep::~msg_zajinhua_game_end_rep() {
  SharedDtor();
}

void msg_zajinhua_game_end_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_zajinhua_game_end_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_zajinhua_game_end_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_zajinhua_game_end_rep_descriptor_;
}

const msg_zajinhua_game_end_rep& msg_zajinhua_game_end_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zajinhua_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_zajinhua_game_end_rep* msg_zajinhua_game_end_rep::default_instance_ = NULL;

msg_zajinhua_game_end_rep* msg_zajinhua_game_end_rep::New() const {
  return new msg_zajinhua_game_end_rep;
}

void msg_zajinhua_game_end_rep::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    end_state_ = 0u;
  }
  game_score_.Clear();
  card_data_.Clear();
  compare_user_.Clear();
  special_score_.Clear();
  card_types_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_zajinhua_game_end_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 game_score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_game_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_game_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_game_score;
        if (input->ExpectTag(18)) goto parse_card_data;
        break;
      }

      // repeated .net.msg_cards card_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_card_data;
        if (input->ExpectTag(24)) goto parse_compare_user;
        break;
      }

      // repeated uint32 compare_user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_compare_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_compare_user())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_compare_user())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_compare_user;
        if (input->ExpectTag(32)) goto parse_end_state;
        break;
      }

      // optional uint32 end_state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_state_)));
          set_has_end_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_special_score;
        break;
      }

      // repeated int64 special_score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_special_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 40, input, this->mutable_special_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_special_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_special_score;
        if (input->ExpectTag(48)) goto parse_card_types;
        break;
      }

      // repeated uint32 card_types = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_types:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_card_types())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_types())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_card_types;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_zajinhua_game_end_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 game_score = 1;
  for (int i = 0; i < this->game_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->game_score(i), output);
  }

  // repeated .net.msg_cards card_data = 2;
  for (int i = 0; i < this->card_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->card_data(i), output);
  }

  // repeated uint32 compare_user = 3;
  for (int i = 0; i < this->compare_user_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->compare_user(i), output);
  }

  // optional uint32 end_state = 4;
  if (has_end_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->end_state(), output);
  }

  // repeated int64 special_score = 5;
  for (int i = 0; i < this->special_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      5, this->special_score(i), output);
  }

  // repeated uint32 card_types = 6;
  for (int i = 0; i < this->card_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->card_types(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_zajinhua_game_end_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 game_score = 1;
  for (int i = 0; i < this->game_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->game_score(i), target);
  }

  // repeated .net.msg_cards card_data = 2;
  for (int i = 0; i < this->card_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->card_data(i), target);
  }

  // repeated uint32 compare_user = 3;
  for (int i = 0; i < this->compare_user_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->compare_user(i), target);
  }

  // optional uint32 end_state = 4;
  if (has_end_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->end_state(), target);
  }

  // repeated int64 special_score = 5;
  for (int i = 0; i < this->special_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(5, this->special_score(i), target);
  }

  // repeated uint32 card_types = 6;
  for (int i = 0; i < this->card_types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->card_types(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_zajinhua_game_end_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional uint32 end_state = 4;
    if (has_end_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_state());
    }

  }
  // repeated int64 game_score = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->game_score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->game_score(i));
    }
    total_size += 1 * this->game_score_size() + data_size;
  }

  // repeated .net.msg_cards card_data = 2;
  total_size += 1 * this->card_data_size();
  for (int i = 0; i < this->card_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->card_data(i));
  }

  // repeated uint32 compare_user = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->compare_user_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->compare_user(i));
    }
    total_size += 1 * this->compare_user_size() + data_size;
  }

  // repeated int64 special_score = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->special_score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->special_score(i));
    }
    total_size += 1 * this->special_score_size() + data_size;
  }

  // repeated uint32 card_types = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_types_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->card_types(i));
    }
    total_size += 1 * this->card_types_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_zajinhua_game_end_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_zajinhua_game_end_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_zajinhua_game_end_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_zajinhua_game_end_rep::MergeFrom(const msg_zajinhua_game_end_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  game_score_.MergeFrom(from.game_score_);
  card_data_.MergeFrom(from.card_data_);
  compare_user_.MergeFrom(from.compare_user_);
  special_score_.MergeFrom(from.special_score_);
  card_types_.MergeFrom(from.card_types_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_end_state()) {
      set_end_state(from.end_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_zajinhua_game_end_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_zajinhua_game_end_rep::CopyFrom(const msg_zajinhua_game_end_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_zajinhua_game_end_rep::IsInitialized() const {

  return true;
}

void msg_zajinhua_game_end_rep::Swap(msg_zajinhua_game_end_rep* other) {
  if (other != this) {
    game_score_.Swap(&other->game_score_);
    card_data_.Swap(&other->card_data_);
    compare_user_.Swap(&other->compare_user_);
    std::swap(end_state_, other->end_state_);
    special_score_.Swap(&other->special_score_);
    card_types_.Swap(&other->card_types_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_zajinhua_game_end_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_zajinhua_game_end_rep_descriptor_;
  metadata.reflection = msg_zajinhua_game_end_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

msg_zajinhua_show_card_req::msg_zajinhua_show_card_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_zajinhua_show_card_req::InitAsDefaultInstance() {
}

msg_zajinhua_show_card_req::msg_zajinhua_show_card_req(const msg_zajinhua_show_card_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_zajinhua_show_card_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_zajinhua_show_card_req::~msg_zajinhua_show_card_req() {
  SharedDtor();
}

void msg_zajinhua_show_card_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_zajinhua_show_card_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_zajinhua_show_card_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_zajinhua_show_card_req_descriptor_;
}

const msg_zajinhua_show_card_req& msg_zajinhua_show_card_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zajinhua_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_zajinhua_show_card_req* msg_zajinhua_show_card_req::default_instance_ = NULL;

msg_zajinhua_show_card_req* msg_zajinhua_show_card_req::New() const {
  return new msg_zajinhua_show_card_req;
}

void msg_zajinhua_show_card_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_zajinhua_show_card_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void msg_zajinhua_show_card_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_zajinhua_show_card_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_zajinhua_show_card_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_zajinhua_show_card_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_zajinhua_show_card_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_zajinhua_show_card_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_zajinhua_show_card_req::MergeFrom(const msg_zajinhua_show_card_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_zajinhua_show_card_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_zajinhua_show_card_req::CopyFrom(const msg_zajinhua_show_card_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_zajinhua_show_card_req::IsInitialized() const {

  return true;
}

void msg_zajinhua_show_card_req::Swap(msg_zajinhua_show_card_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_zajinhua_show_card_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_zajinhua_show_card_req_descriptor_;
  metadata.reflection = msg_zajinhua_show_card_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_zajinhua_show_card_rep::kShowChairidFieldNumber;
const int msg_zajinhua_show_card_rep::kCardsFieldNumber;
#endif  // !_MSC_VER

msg_zajinhua_show_card_rep::msg_zajinhua_show_card_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_zajinhua_show_card_rep::InitAsDefaultInstance() {
}

msg_zajinhua_show_card_rep::msg_zajinhua_show_card_rep(const msg_zajinhua_show_card_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_zajinhua_show_card_rep::SharedCtor() {
  _cached_size_ = 0;
  show_chairid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_zajinhua_show_card_rep::~msg_zajinhua_show_card_rep() {
  SharedDtor();
}

void msg_zajinhua_show_card_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_zajinhua_show_card_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_zajinhua_show_card_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_zajinhua_show_card_rep_descriptor_;
}

const msg_zajinhua_show_card_rep& msg_zajinhua_show_card_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zajinhua_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_zajinhua_show_card_rep* msg_zajinhua_show_card_rep::default_instance_ = NULL;

msg_zajinhua_show_card_rep* msg_zajinhua_show_card_rep::New() const {
  return new msg_zajinhua_show_card_rep;
}

void msg_zajinhua_show_card_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    show_chairid_ = 0u;
  }
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_zajinhua_show_card_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 show_chairid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &show_chairid_)));
          set_has_show_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cards;
        break;
      }

      // repeated uint32 cards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_zajinhua_show_card_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 show_chairid = 1;
  if (has_show_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->show_chairid(), output);
  }

  // repeated uint32 cards = 2;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->cards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_zajinhua_show_card_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 show_chairid = 1;
  if (has_show_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->show_chairid(), target);
  }

  // repeated uint32 cards = 2;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->cards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_zajinhua_show_card_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 show_chairid = 1;
    if (has_show_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->show_chairid());
    }

  }
  // repeated uint32 cards = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_zajinhua_show_card_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_zajinhua_show_card_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_zajinhua_show_card_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_zajinhua_show_card_rep::MergeFrom(const msg_zajinhua_show_card_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_show_chairid()) {
      set_show_chairid(from.show_chairid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_zajinhua_show_card_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_zajinhua_show_card_rep::CopyFrom(const msg_zajinhua_show_card_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_zajinhua_show_card_rep::IsInitialized() const {

  return true;
}

void msg_zajinhua_show_card_rep::Swap(msg_zajinhua_show_card_rep* other) {
  if (other != this) {
    std::swap(show_chairid_, other->show_chairid_);
    cards_.Swap(&other->cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_zajinhua_show_card_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_zajinhua_show_card_rep_descriptor_;
  metadata.reflection = msg_zajinhua_show_card_rep_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace net

// @@protoc_insertion_point(global_scope)
