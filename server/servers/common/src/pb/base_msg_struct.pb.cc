// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base_msg_struct.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "base_msg_struct.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace net {

namespace {

const ::google::protobuf::Descriptor* base_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  base_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* land_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  land_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_data_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_data_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* svr_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  svr_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* room_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  room_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* seat_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  seat_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* seat_face_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  seat_face_reflection_ = NULL;
const ::google::protobuf::Descriptor* looker_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  looker_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* land_table_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  land_table_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* showhand_table_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  showhand_table_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* bainiu_table_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  bainiu_table_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* texas_table_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  texas_table_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* zajinhua_table_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  zajinhua_table_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* niuniu_table_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  niuniu_table_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* baccarat_table_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  baccarat_table_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* sangong_table_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sangong_table_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* paijiu_table_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  paijiu_table_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* everycolor_table_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  everycolor_table_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* dice_table_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dice_table_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* majiang_table_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  majiang_table_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* slot_table_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  slot_table_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* war_table_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  war_table_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* fight_table_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fight_table_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* robniu_table_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  robniu_table_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* table_face_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  table_face_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* fishing_table_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fishing_table_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* twoeight_table_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  twoeight_table_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* mission_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mission_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  item_reflection_ = NULL;
const ::google::protobuf::Descriptor* item_bag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  item_bag_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_cards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_cards_reflection_ = NULL;
const ::google::protobuf::Descriptor* player_num_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  player_num_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_base_5fmsg_5fstruct_2eproto() {
  protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "base_msg_struct.proto");
  GOOGLE_CHECK(file != NULL);
  base_info_descriptor_ = file->message_type(0);
  static const int base_info_offsets_[34] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, ingot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, cvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, safe_coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, safeboxstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, clogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, weeklogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, bankrupt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, head_icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, day_game_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, login_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, recharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, converts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, batchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, lvscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, lvcoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, postime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, userright_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, posrmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, welcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, weltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, recharge_actwle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, converts_actwle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, rtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, ispay_),
  };
  base_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      base_info_descriptor_,
      base_info::default_instance_,
      base_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(base_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(base_info));
  land_info_descriptor_ = file->message_type(1);
  static const int land_info_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_info, win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_info, lose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_info, land_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_info, spring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_info, maxwin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_info, winc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_info, losec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_info, landc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_info, maxwinc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_info, springc_),
  };
  land_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      land_info_descriptor_,
      land_info::default_instance_,
      land_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(land_info));
  game_data_info_descriptor_ = file->message_type(2);
  static const int game_data_info_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_data_info, game_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_data_info, win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_data_info, lose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_data_info, maxwin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_data_info, winc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_data_info, losec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_data_info, maxwinc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_data_info, maxcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_data_info, maxcardc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_data_info, daywin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_data_info, daywinc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_data_info, land_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_data_info, spring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_data_info, landc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_data_info, springc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_data_info, weekwinc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_data_info, totalwinc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_data_info, stockscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_data_info, gamecount_),
  };
  game_data_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_data_info_descriptor_,
      game_data_info::default_instance_,
      game_data_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_data_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_data_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_data_info));
  svr_info_descriptor_ = file->message_type(3);
  static const int svr_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(svr_info, svrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(svr_info, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(svr_info, game_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(svr_info, game_subtype_),
  };
  svr_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      svr_info_descriptor_,
      svr_info::default_instance_,
      svr_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(svr_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(svr_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(svr_info));
  room_info_descriptor_ = file->message_type(4);
  static const int room_info_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_info, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_info, consume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_info, deal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_info, enter_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_info, enter_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_info, player_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_info, basescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_info, create_table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_info, show_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_info, show_pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_info, jetton_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_info, maxjettonrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_info, uproom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_info, exitchip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_info, room_name_),
  };
  room_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      room_info_descriptor_,
      room_info::default_instance_,
      room_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(room_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(room_info));
  seat_info_descriptor_ = file->message_type(5);
  static const int seat_info_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seat_info, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seat_info, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seat_info, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seat_info, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seat_info, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seat_info, cvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seat_info, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seat_info, head_icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seat_info, buyin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seat_info, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seat_info, wincount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seat_info, betscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seat_info, betcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seat_info, showuid_),
  };
  seat_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      seat_info_descriptor_,
      seat_info::default_instance_,
      seat_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seat_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seat_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(seat_info));
  seat_face_descriptor_ = file->message_type(6);
  static const int seat_face_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seat_face, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seat_face, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seat_face, head_icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seat_face, ready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seat_face, chairid_),
  };
  seat_face_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      seat_face_descriptor_,
      seat_face::default_instance_,
      seat_face_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seat_face, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seat_face, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(seat_face));
  looker_info_descriptor_ = file->message_type(7);
  static const int looker_info_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(looker_info, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(looker_info, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(looker_info, head_icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(looker_info, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(looker_info, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(looker_info, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(looker_info, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(looker_info, wincount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(looker_info, betscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(looker_info, betcount_),
  };
  looker_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      looker_info_descriptor_,
      looker_info::default_instance_,
      looker_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(looker_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(looker_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(looker_info));
  land_table_info_descriptor_ = file->message_type(8);
  static const int land_table_info_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_table_info, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_table_info, tablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_table_info, is_passwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_table_info, deal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_table_info, basescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_table_info, consume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_table_info, entermin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_table_info, duetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_table_info, feetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_table_info, feevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_table_info, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_table_info, show_hand_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_table_info, call_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_table_info, card_time_),
  };
  land_table_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      land_table_info_descriptor_,
      land_table_info::default_instance_,
      land_table_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_table_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(land_table_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(land_table_info));
  showhand_table_info_descriptor_ = file->message_type(9);
  static const int showhand_table_info_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(showhand_table_info, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(showhand_table_info, tablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(showhand_table_info, is_passwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(showhand_table_info, basescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(showhand_table_info, consume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(showhand_table_info, entermin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(showhand_table_info, duetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(showhand_table_info, feetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(showhand_table_info, feevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(showhand_table_info, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(showhand_table_info, card_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(showhand_table_info, table_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(showhand_table_info, players_),
  };
  showhand_table_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      showhand_table_info_descriptor_,
      showhand_table_info::default_instance_,
      showhand_table_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(showhand_table_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(showhand_table_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(showhand_table_info));
  bainiu_table_info_descriptor_ = file->message_type(10);
  static const int bainiu_table_info_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bainiu_table_info, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bainiu_table_info, tablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bainiu_table_info, is_passwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bainiu_table_info, basescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bainiu_table_info, consume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bainiu_table_info, entermin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bainiu_table_info, duetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bainiu_table_info, feetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bainiu_table_info, feevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bainiu_table_info, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bainiu_table_info, card_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bainiu_table_info, table_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bainiu_table_info, sitdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bainiu_table_info, apply_banker_condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bainiu_table_info, apply_banker_maxscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bainiu_table_info, banker_max_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bainiu_table_info, max_jetton_rate_),
  };
  bainiu_table_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      bainiu_table_info_descriptor_,
      bainiu_table_info::default_instance_,
      bainiu_table_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bainiu_table_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bainiu_table_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(bainiu_table_info));
  texas_table_info_descriptor_ = file->message_type(11);
  static const int texas_table_info_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texas_table_info, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texas_table_info, tablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texas_table_info, is_passwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texas_table_info, basescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texas_table_info, consume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texas_table_info, entermin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texas_table_info, duetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texas_table_info, feetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texas_table_info, feevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texas_table_info, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texas_table_info, card_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texas_table_info, table_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texas_table_info, sitdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texas_table_info, player_num_),
  };
  texas_table_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      texas_table_info_descriptor_,
      texas_table_info::default_instance_,
      texas_table_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texas_table_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texas_table_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(texas_table_info));
  zajinhua_table_info_descriptor_ = file->message_type(12);
  static const int zajinhua_table_info_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zajinhua_table_info, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zajinhua_table_info, tablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zajinhua_table_info, is_passwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zajinhua_table_info, basescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zajinhua_table_info, consume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zajinhua_table_info, entermin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zajinhua_table_info, duetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zajinhua_table_info, feetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zajinhua_table_info, feevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zajinhua_table_info, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zajinhua_table_info, card_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zajinhua_table_info, table_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zajinhua_table_info, compare_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zajinhua_table_info, look_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zajinhua_table_info, limit_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zajinhua_table_info, ming_multip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zajinhua_table_info, blind_multip_),
  };
  zajinhua_table_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      zajinhua_table_info_descriptor_,
      zajinhua_table_info::default_instance_,
      zajinhua_table_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zajinhua_table_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zajinhua_table_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(zajinhua_table_info));
  niuniu_table_info_descriptor_ = file->message_type(13);
  static const int niuniu_table_info_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niuniu_table_info, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niuniu_table_info, tablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niuniu_table_info, is_passwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niuniu_table_info, basescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niuniu_table_info, consume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niuniu_table_info, entermin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niuniu_table_info, duetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niuniu_table_info, feetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niuniu_table_info, feevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niuniu_table_info, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niuniu_table_info, table_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niuniu_table_info, seat_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niuniu_table_info, can_banker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niuniu_table_info, apply_banker_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niuniu_table_info, card_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niuniu_table_info, show_card_time_),
  };
  niuniu_table_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      niuniu_table_info_descriptor_,
      niuniu_table_info::default_instance_,
      niuniu_table_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niuniu_table_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(niuniu_table_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(niuniu_table_info));
  baccarat_table_info_descriptor_ = file->message_type(14);
  static const int baccarat_table_info_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baccarat_table_info, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baccarat_table_info, tablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baccarat_table_info, is_passwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baccarat_table_info, basescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baccarat_table_info, consume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baccarat_table_info, entermin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baccarat_table_info, duetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baccarat_table_info, feetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baccarat_table_info, feevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baccarat_table_info, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baccarat_table_info, card_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baccarat_table_info, table_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baccarat_table_info, sitdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baccarat_table_info, apply_banker_condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baccarat_table_info, apply_banker_maxscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baccarat_table_info, banker_max_time_),
  };
  baccarat_table_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      baccarat_table_info_descriptor_,
      baccarat_table_info::default_instance_,
      baccarat_table_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baccarat_table_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baccarat_table_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(baccarat_table_info));
  sangong_table_info_descriptor_ = file->message_type(15);
  static const int sangong_table_info_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sangong_table_info, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sangong_table_info, tablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sangong_table_info, is_passwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sangong_table_info, basescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sangong_table_info, consume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sangong_table_info, entermin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sangong_table_info, duetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sangong_table_info, feetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sangong_table_info, feevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sangong_table_info, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sangong_table_info, table_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sangong_table_info, seat_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sangong_table_info, can_banker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sangong_table_info, apply_banker_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sangong_table_info, card_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sangong_table_info, show_card_time_),
  };
  sangong_table_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sangong_table_info_descriptor_,
      sangong_table_info::default_instance_,
      sangong_table_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sangong_table_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sangong_table_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sangong_table_info));
  paijiu_table_info_descriptor_ = file->message_type(16);
  static const int paijiu_table_info_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(paijiu_table_info, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(paijiu_table_info, tablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(paijiu_table_info, is_passwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(paijiu_table_info, basescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(paijiu_table_info, consume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(paijiu_table_info, entermin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(paijiu_table_info, duetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(paijiu_table_info, feetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(paijiu_table_info, feevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(paijiu_table_info, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(paijiu_table_info, card_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(paijiu_table_info, table_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(paijiu_table_info, sitdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(paijiu_table_info, apply_banker_condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(paijiu_table_info, apply_banker_maxscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(paijiu_table_info, banker_max_time_),
  };
  paijiu_table_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      paijiu_table_info_descriptor_,
      paijiu_table_info::default_instance_,
      paijiu_table_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(paijiu_table_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(paijiu_table_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(paijiu_table_info));
  everycolor_table_info_descriptor_ = file->message_type(17);
  static const int everycolor_table_info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(everycolor_table_info, basescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(everycolor_table_info, consume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(everycolor_table_info, feetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(everycolor_table_info, feevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(everycolor_table_info, table_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(everycolor_table_info, add_score_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(everycolor_table_info, show_card_time_),
  };
  everycolor_table_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      everycolor_table_info_descriptor_,
      everycolor_table_info::default_instance_,
      everycolor_table_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(everycolor_table_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(everycolor_table_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(everycolor_table_info));
  dice_table_info_descriptor_ = file->message_type(18);
  static const int dice_table_info_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dice_table_info, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dice_table_info, tablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dice_table_info, is_passwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dice_table_info, basescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dice_table_info, consume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dice_table_info, entermin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dice_table_info, duetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dice_table_info, feetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dice_table_info, feevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dice_table_info, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dice_table_info, free_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dice_table_info, card_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dice_table_info, dispatch_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dice_table_info, table_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dice_table_info, sitdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dice_table_info, apply_banker_condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dice_table_info, apply_banker_maxscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dice_table_info, banker_max_time_),
  };
  dice_table_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dice_table_info_descriptor_,
      dice_table_info::default_instance_,
      dice_table_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dice_table_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dice_table_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dice_table_info));
  majiang_table_info_descriptor_ = file->message_type(19);
  static const int majiang_table_info_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(majiang_table_info, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(majiang_table_info, tablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(majiang_table_info, is_passwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(majiang_table_info, deal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(majiang_table_info, basescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(majiang_table_info, consume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(majiang_table_info, entermin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(majiang_table_info, duetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(majiang_table_info, feetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(majiang_table_info, feevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(majiang_table_info, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(majiang_table_info, show_hand_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(majiang_table_info, call_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(majiang_table_info, card_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(majiang_table_info, play_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(majiang_table_info, seat_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(majiang_table_info, kind_cards_),
  };
  majiang_table_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      majiang_table_info_descriptor_,
      majiang_table_info::default_instance_,
      majiang_table_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(majiang_table_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(majiang_table_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(majiang_table_info));
  slot_table_info_descriptor_ = file->message_type(20);
  static const int slot_table_info_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slot_table_info, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slot_table_info, tablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slot_table_info, is_passwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slot_table_info, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slot_table_info, basescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slot_table_info, consume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slot_table_info, entermin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slot_table_info, duetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slot_table_info, feetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slot_table_info, feevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slot_table_info, seat_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slot_table_info, jackpot_score_),
  };
  slot_table_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      slot_table_info_descriptor_,
      slot_table_info::default_instance_,
      slot_table_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slot_table_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slot_table_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(slot_table_info));
  war_table_info_descriptor_ = file->message_type(21);
  static const int war_table_info_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(war_table_info, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(war_table_info, tablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(war_table_info, is_passwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(war_table_info, basescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(war_table_info, consume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(war_table_info, entermin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(war_table_info, duetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(war_table_info, feetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(war_table_info, feevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(war_table_info, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(war_table_info, card_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(war_table_info, table_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(war_table_info, sitdown_),
  };
  war_table_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      war_table_info_descriptor_,
      war_table_info::default_instance_,
      war_table_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(war_table_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(war_table_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(war_table_info));
  fight_table_info_descriptor_ = file->message_type(22);
  static const int fight_table_info_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fight_table_info, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fight_table_info, tablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fight_table_info, is_passwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fight_table_info, basescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fight_table_info, consume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fight_table_info, entermin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fight_table_info, duetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fight_table_info, feetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fight_table_info, feevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fight_table_info, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fight_table_info, card_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fight_table_info, table_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fight_table_info, sitdown_),
  };
  fight_table_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fight_table_info_descriptor_,
      fight_table_info::default_instance_,
      fight_table_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fight_table_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fight_table_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fight_table_info));
  robniu_table_info_descriptor_ = file->message_type(23);
  static const int robniu_table_info_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robniu_table_info, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robniu_table_info, tablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robniu_table_info, is_passwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robniu_table_info, basescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robniu_table_info, consume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robniu_table_info, entermin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robniu_table_info, duetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robniu_table_info, feetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robniu_table_info, feevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robniu_table_info, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robniu_table_info, table_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robniu_table_info, seat_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robniu_table_info, can_banker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robniu_table_info, apply_banker_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robniu_table_info, card_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robniu_table_info, show_card_time_),
  };
  robniu_table_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      robniu_table_info_descriptor_,
      robniu_table_info::default_instance_,
      robniu_table_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robniu_table_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robniu_table_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(robniu_table_info));
  table_face_info_descriptor_ = file->message_type(24);
  static const int table_face_info_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_face_info, land_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_face_info, showhand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_face_info, bainiu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_face_info, texas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_face_info, zajinhua_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_face_info, niuniu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_face_info, baccarat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_face_info, sangong_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_face_info, paijiu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_face_info, everycolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_face_info, dice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_face_info, majiang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_face_info, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_face_info, war_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_face_info, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_face_info, robniu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_face_info, fishing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_face_info, twoeight_),
  };
  table_face_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      table_face_info_descriptor_,
      table_face_info::default_instance_,
      table_face_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_face_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table_face_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(table_face_info));
  fishing_table_info_descriptor_ = file->message_type(25);
  static const int fishing_table_info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fishing_table_info, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fishing_table_info, tablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fishing_table_info, basescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fishing_table_info, consume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fishing_table_info, entermin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fishing_table_info, maplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fishing_table_info, table_state_),
  };
  fishing_table_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fishing_table_info_descriptor_,
      fishing_table_info::default_instance_,
      fishing_table_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fishing_table_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fishing_table_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fishing_table_info));
  twoeight_table_info_descriptor_ = file->message_type(26);
  static const int twoeight_table_info_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(twoeight_table_info, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(twoeight_table_info, tablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(twoeight_table_info, is_passwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(twoeight_table_info, basescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(twoeight_table_info, consume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(twoeight_table_info, entermin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(twoeight_table_info, duetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(twoeight_table_info, feetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(twoeight_table_info, feevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(twoeight_table_info, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(twoeight_table_info, card_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(twoeight_table_info, table_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(twoeight_table_info, sitdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(twoeight_table_info, apply_banker_condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(twoeight_table_info, apply_banker_maxscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(twoeight_table_info, banker_max_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(twoeight_table_info, max_jetton_rate_),
  };
  twoeight_table_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      twoeight_table_info_descriptor_,
      twoeight_table_info::default_instance_,
      twoeight_table_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(twoeight_table_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(twoeight_table_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(twoeight_table_info));
  mission_data_descriptor_ = file->message_type(27);
  static const int mission_data_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mission_data, msid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mission_data, rtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mission_data, ctimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mission_data, cptime_),
  };
  mission_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mission_data_descriptor_,
      mission_data::default_instance_,
      mission_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mission_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mission_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mission_data));
  item_descriptor_ = file->message_type(28);
  static const int item_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item, item_num_),
  };
  item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      item_descriptor_,
      item::default_instance_,
      item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(item));
  item_bag_descriptor_ = file->message_type(29);
  static const int item_bag_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_bag, items_),
  };
  item_bag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      item_bag_descriptor_,
      item_bag::default_instance_,
      item_bag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_bag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_bag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(item_bag));
  msg_cards_descriptor_ = file->message_type(30);
  static const int msg_cards_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_cards, cards_),
  };
  msg_cards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_cards_descriptor_,
      msg_cards::default_instance_,
      msg_cards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_cards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_cards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_cards));
  player_num_descriptor_ = file->message_type(31);
  static const int player_num_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_num, svrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_num, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_num, robots_),
  };
  player_num_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      player_num_descriptor_,
      player_num::default_instance_,
      player_num_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_num, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_num, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(player_num));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_base_5fmsg_5fstruct_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    base_info_descriptor_, &base_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    land_info_descriptor_, &land_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_data_info_descriptor_, &game_data_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    svr_info_descriptor_, &svr_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    room_info_descriptor_, &room_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    seat_info_descriptor_, &seat_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    seat_face_descriptor_, &seat_face::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    looker_info_descriptor_, &looker_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    land_table_info_descriptor_, &land_table_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    showhand_table_info_descriptor_, &showhand_table_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    bainiu_table_info_descriptor_, &bainiu_table_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    texas_table_info_descriptor_, &texas_table_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    zajinhua_table_info_descriptor_, &zajinhua_table_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    niuniu_table_info_descriptor_, &niuniu_table_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    baccarat_table_info_descriptor_, &baccarat_table_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sangong_table_info_descriptor_, &sangong_table_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    paijiu_table_info_descriptor_, &paijiu_table_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    everycolor_table_info_descriptor_, &everycolor_table_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dice_table_info_descriptor_, &dice_table_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    majiang_table_info_descriptor_, &majiang_table_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    slot_table_info_descriptor_, &slot_table_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    war_table_info_descriptor_, &war_table_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fight_table_info_descriptor_, &fight_table_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    robniu_table_info_descriptor_, &robniu_table_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    table_face_info_descriptor_, &table_face_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fishing_table_info_descriptor_, &fishing_table_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    twoeight_table_info_descriptor_, &twoeight_table_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mission_data_descriptor_, &mission_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    item_descriptor_, &item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    item_bag_descriptor_, &item_bag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_cards_descriptor_, &msg_cards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    player_num_descriptor_, &player_num::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_base_5fmsg_5fstruct_2eproto() {
  delete base_info::default_instance_;
  delete base_info_reflection_;
  delete land_info::default_instance_;
  delete land_info_reflection_;
  delete game_data_info::default_instance_;
  delete game_data_info_reflection_;
  delete svr_info::default_instance_;
  delete svr_info_reflection_;
  delete room_info::default_instance_;
  delete room_info_reflection_;
  delete seat_info::default_instance_;
  delete seat_info_reflection_;
  delete seat_face::default_instance_;
  delete seat_face_reflection_;
  delete looker_info::default_instance_;
  delete looker_info_reflection_;
  delete land_table_info::default_instance_;
  delete land_table_info_reflection_;
  delete showhand_table_info::default_instance_;
  delete showhand_table_info_reflection_;
  delete bainiu_table_info::default_instance_;
  delete bainiu_table_info_reflection_;
  delete texas_table_info::default_instance_;
  delete texas_table_info_reflection_;
  delete zajinhua_table_info::default_instance_;
  delete zajinhua_table_info_reflection_;
  delete niuniu_table_info::default_instance_;
  delete niuniu_table_info_reflection_;
  delete baccarat_table_info::default_instance_;
  delete baccarat_table_info_reflection_;
  delete sangong_table_info::default_instance_;
  delete sangong_table_info_reflection_;
  delete paijiu_table_info::default_instance_;
  delete paijiu_table_info_reflection_;
  delete everycolor_table_info::default_instance_;
  delete everycolor_table_info_reflection_;
  delete dice_table_info::default_instance_;
  delete dice_table_info_reflection_;
  delete majiang_table_info::default_instance_;
  delete majiang_table_info_reflection_;
  delete slot_table_info::default_instance_;
  delete slot_table_info_reflection_;
  delete war_table_info::default_instance_;
  delete war_table_info_reflection_;
  delete fight_table_info::default_instance_;
  delete fight_table_info_reflection_;
  delete robniu_table_info::default_instance_;
  delete robniu_table_info_reflection_;
  delete table_face_info::default_instance_;
  delete table_face_info_reflection_;
  delete fishing_table_info::default_instance_;
  delete fishing_table_info_reflection_;
  delete twoeight_table_info::default_instance_;
  delete twoeight_table_info_reflection_;
  delete mission_data::default_instance_;
  delete mission_data_reflection_;
  delete item::default_instance_;
  delete item_reflection_;
  delete item_bag::default_instance_;
  delete item_bag_reflection_;
  delete msg_cards::default_instance_;
  delete msg_cards_reflection_;
  delete player_num::default_instance_;
  delete player_num_reflection_;
}

void protobuf_AddDesc_base_5fmsg_5fstruct_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025base_msg_struct.proto\022\003net\"\320\004\n\tbase_in"
    "fo\022\013\n\003uid\030\001 \001(\r\022\014\n\004name\030\002 \001(\014\022\013\n\003sex\030\003 \001"
    "(\r\022\017\n\007diamond\030\004 \001(\003\022\014\n\004coin\030\005 \001(\003\022\r\n\005sco"
    "re\030\006 \001(\003\022\r\n\005ingot\030\007 \001(\003\022\016\n\006cvalue\030\010 \001(\003\022"
    "\021\n\tsafe_coin\030\t \001(\003\022\013\n\003vip\030\n \001(\r\022\024\n\014safeb"
    "oxstate\030\013 \001(\r\022\016\n\006clogin\030\014 \001(\r\022\021\n\tweeklog"
    "in\030\r \001(\r\022\016\n\006reward\030\016 \001(\r\022\020\n\010bankrupt\030\017 \001"
    "(\r\022\021\n\thead_icon\030\020 \001(\r\022\026\n\016day_game_count\030"
    "\021 \001(\r\022\020\n\010login_ip\030\022 \001(\r\022\014\n\004city\030\023 \001(\014\022\020\n"
    "\010recharge\030\024 \001(\003\022\020\n\010converts\030\025 \001(\003\022\017\n\007bat"
    "chid\030\026 \001(\r\022\017\n\007lvscore\030\027 \001(\r\022\016\n\006lvcoin\030\030 "
    "\001(\r\022\017\n\007postime\030\031 \001(\004\022\021\n\tuserright\030\032 \001(\r\022"
    "\013\n\003win\030\033 \001(\003\022\016\n\006posrmb\030\034 \001(\r\022\020\n\010welcount"
    "\030\035 \001(\r\022\017\n\007weltime\030\036 \001(\004\022\027\n\017recharge_actw"
    "le\030\037 \001(\r\022\027\n\017converts_actwle\030  \001(\004\022\r\n\005rti"
    "me\030! \001(\004\022\r\n\005ispay\030\" \001(\r\"\242\001\n\tland_info\022\013\n"
    "\003win\030\001 \001(\r\022\014\n\004lose\030\002 \001(\r\022\014\n\004land\030\003 \001(\r\022\016"
    "\n\006spring\030\004 \001(\r\022\016\n\006maxwin\030\005 \001(\003\022\014\n\004winc\030\006"
    " \001(\r\022\r\n\005losec\030\007 \001(\r\022\r\n\005landc\030\010 \001(\r\022\017\n\007ma"
    "xwinc\030\t \001(\003\022\017\n\007springc\030\n \001(\r\"\312\002\n\016game_da"
    "ta_info\022\021\n\tgame_type\030\001 \001(\r\022\013\n\003win\030\002 \001(\r\022"
    "\014\n\004lose\030\003 \001(\r\022\016\n\006maxwin\030\004 \001(\003\022\014\n\004winc\030\005 "
    "\001(\r\022\r\n\005losec\030\006 \001(\r\022\017\n\007maxwinc\030\007 \001(\003\022\017\n\007m"
    "axcard\030\010 \003(\r\022\020\n\010maxcardc\030\t \003(\r\022\016\n\006daywin"
    "\030\n \001(\003\022\017\n\007daywinc\030\013 \001(\003\022\014\n\004land\030\014 \001(\r\022\016\n"
    "\006spring\030\r \001(\r\022\r\n\005landc\030\016 \001(\r\022\017\n\007springc\030"
    "\017 \001(\r\022\020\n\010weekwinc\030\020 \001(\003\022\021\n\ttotalwinc\030\021 \001"
    "(\003\022\022\n\nstockscore\030\022 \001(\003\022\021\n\tgamecount\030\023 \001("
    "\003\"Q\n\010svr_info\022\r\n\005svrid\030\001 \001(\r\022\r\n\005state\030\002 "
    "\001(\r\022\021\n\tgame_type\030\003 \001(\r\022\024\n\014game_subtype\030\004"
    " \001(\r\"\236\002\n\troom_info\022\n\n\002id\030\001 \001(\r\022\017\n\007consum"
    "e\030\002 \001(\r\022\014\n\004deal\030\003 \001(\r\022\021\n\tenter_min\030\004 \001(\004"
    "\022\021\n\tenter_max\030\005 \001(\004\022\022\n\nplayer_num\030\006 \001(\r\022"
    "\021\n\tbasescore\030\007 \001(\r\022\024\n\014create_table\030\010 \001(\r"
    "\022\021\n\tshow_type\030\t \001(\r\022\020\n\010show_pic\030\n \001(\r\022\022\n"
    "\njetton_min\030\013 \001(\004\022\025\n\rmaxjettonrate\030\014 \001(\r"
    "\022\016\n\006uproom\030\r \001(\r\022\020\n\010exitchip\030\016 \001(\r\022\021\n\tro"
    "om_name\030\017 \001(\014\"\350\001\n\tseat_info\022\013\n\003uid\030\001 \001(\r"
    "\022\014\n\004name\030\002 \001(\014\022\013\n\003sex\030\003 \001(\r\022\014\n\004coin\030\004 \001("
    "\003\022\r\n\005score\030\005 \001(\003\022\016\n\006cvalue\030\006 \001(\003\022\017\n\007chai"
    "rid\030\007 \001(\r\022\021\n\thead_icon\030\010 \001(\r\022\r\n\005buyin\030\t "
    "\001(\003\022\014\n\004city\030\n \001(\014\022\020\n\010wincount\030\013 \001(\r\022\020\n\010b"
    "etscore\030\014 \001(\003\022\020\n\010betcount\030\r \001(\r\022\017\n\007showu"
    "id\030\016 \001(\r\"Y\n\tseat_face\022\013\n\003uid\030\001 \001(\r\022\014\n\004na"
    "me\030\002 \001(\014\022\021\n\thead_icon\030\003 \001(\r\022\r\n\005ready\030\004 \001"
    "(\r\022\017\n\007chairid\030\005 \001(\r\"\251\001\n\013looker_info\022\013\n\003u"
    "id\030\001 \001(\r\022\014\n\004name\030\002 \001(\014\022\021\n\thead_icon\030\003 \001("
    "\r\022\013\n\003sex\030\004 \001(\r\022\r\n\005score\030\005 \001(\003\022\014\n\004coin\030\006 "
    "\001(\003\022\014\n\004city\030\007 \001(\014\022\020\n\010wincount\030\010 \001(\r\022\020\n\010b"
    "etscore\030\t \001(\003\022\020\n\010betcount\030\n \001(\r\"\217\002\n\017land"
    "_table_info\022\017\n\007tableid\030\001 \001(\r\022\021\n\ttablenam"
    "e\030\002 \001(\014\022\021\n\tis_passwd\030\003 \001(\r\022\014\n\004deal\030\004 \001(\r"
    "\022\021\n\tbasescore\030\005 \001(\003\022\017\n\007consume\030\006 \001(\r\022\020\n\010"
    "entermin\030\007 \001(\004\022\017\n\007duetime\030\010 \001(\r\022\017\n\007feety"
    "pe\030\t \001(\r\022\020\n\010feevalue\030\n \001(\003\022\020\n\010hostname\030\013"
    " \001(\014\022\025\n\rshow_hand_num\030\014 \001(\r\022\021\n\tcall_time"
    "\030\r \001(\r\022\021\n\tcard_time\030\016 \001(\r\"\221\002\n\023showhand_t"
    "able_info\022\017\n\007tableid\030\001 \001(\r\022\021\n\ttablename\030"
    "\002 \001(\014\022\021\n\tis_passwd\030\003 \001(\r\022\021\n\tbasescore\030\004 "
    "\001(\003\022\017\n\007consume\030\005 \001(\r\022\020\n\010entermin\030\006 \001(\004\022\017"
    "\n\007duetime\030\007 \001(\r\022\017\n\007feetype\030\010 \001(\r\022\020\n\010feev"
    "alue\030\t \001(\003\022\020\n\010hostname\030\n \001(\014\022\021\n\tcard_tim"
    "e\030\013 \001(\r\022\023\n\013table_state\030\014 \001(\r\022\037\n\007players\030"
    "\r \003(\0132\016.net.seat_face\"\360\002\n\021bainiu_table_i"
    "nfo\022\017\n\007tableid\030\001 \001(\r\022\021\n\ttablename\030\002 \001(\014\022"
    "\021\n\tis_passwd\030\003 \001(\r\022\021\n\tbasescore\030\004 \001(\003\022\017\n"
    "\007consume\030\005 \001(\r\022\020\n\010entermin\030\006 \001(\004\022\017\n\007duet"
    "ime\030\007 \001(\r\022\017\n\007feetype\030\010 \001(\r\022\020\n\010feevalue\030\t"
    " \001(\003\022\020\n\010hostname\030\n \001(\014\022\021\n\tcard_time\030\013 \001("
    "\r\022\023\n\013table_state\030\014 \001(\r\022\017\n\007sitdown\030\r \001(\003\022"
    "\036\n\026apply_banker_condition\030\016 \001(\003\022\035\n\025apply"
    "_banker_maxscore\030\017 \001(\003\022\027\n\017banker_max_tim"
    "e\030\020 \001(\r\022\027\n\017max_jetton_rate\030\021 \001(\r\"\222\002\n\020tex"
    "as_table_info\022\017\n\007tableid\030\001 \001(\r\022\021\n\ttablen"
    "ame\030\002 \001(\014\022\021\n\tis_passwd\030\003 \001(\r\022\021\n\tbasescor"
    "e\030\004 \001(\003\022\017\n\007consume\030\005 \001(\r\022\020\n\010entermin\030\006 \001"
    "(\004\022\017\n\007duetime\030\007 \001(\r\022\017\n\007feetype\030\010 \001(\r\022\020\n\010"
    "feevalue\030\t \001(\003\022\020\n\010hostname\030\n \001(\014\022\021\n\tcard"
    "_time\030\013 \001(\r\022\023\n\013table_state\030\014 \001(\r\022\017\n\007sitd"
    "own\030\r \001(\003\022\022\n\nplayer_num\030\016 \001(\r\"\333\002\n\023zajinh"
    "ua_table_info\022\017\n\007tableid\030\001 \001(\r\022\021\n\ttablen"
    "ame\030\002 \001(\014\022\021\n\tis_passwd\030\003 \001(\r\022\021\n\tbasescor"
    "e\030\004 \001(\003\022\017\n\007consume\030\005 \001(\r\022\020\n\010entermin\030\006 \001"
    "(\004\022\017\n\007duetime\030\007 \001(\r\022\017\n\007feetype\030\010 \001(\r\022\020\n\010"
    "feevalue\030\t \001(\003\022\020\n\010hostname\030\n \001(\014\022\021\n\tcard"
    "_time\030\013 \001(\r\022\023\n\013table_state\030\014 \001(\r\022\025\n\rcomp"
    "are_round\030\r \001(\r\022\022\n\nlook_round\030\016 \001(\r\022\023\n\013l"
    "imit_round\030\017 \001(\r\022\023\n\013ming_multip\030\020 \003(\r\022\024\n"
    "\014blind_multip\030\021 \003(\r\"\307\002\n\021niuniu_table_inf"
    "o\022\017\n\007tableid\030\001 \001(\r\022\021\n\ttablename\030\002 \001(\014\022\021\n"
    "\tis_passwd\030\003 \001(\r\022\021\n\tbasescore\030\004 \001(\003\022\017\n\007c"
    "onsume\030\005 \001(\r\022\020\n\010entermin\030\006 \001(\004\022\017\n\007duetim"
    "e\030\007 \001(\r\022\017\n\007feetype\030\010 \001(\r\022\020\n\010feevalue\030\t \001"
    "(\003\022\020\n\010hostname\030\n \001(\014\022\023\n\013table_state\030\013 \001("
    "\r\022\020\n\010seat_num\030\014 \001(\r\022\022\n\ncan_banker\030\r \001(\r\022"
    "\031\n\021apply_banker_time\030\016 \001(\r\022\021\n\tcard_time\030"
    "\017 \001(\r\022\026\n\016show_card_time\030\020 \001(\r\"\331\002\n\023baccar"
    "at_table_info\022\017\n\007tableid\030\001 \001(\r\022\021\n\ttablen"
    "ame\030\002 \001(\014\022\021\n\tis_passwd\030\003 \001(\r\022\021\n\tbasescor"
    "e\030\004 \001(\003\022\017\n\007consume\030\005 \001(\r\022\020\n\010entermin\030\006 \001"
    "(\004\022\017\n\007duetime\030\007 \001(\r\022\017\n\007feetype\030\010 \001(\r\022\020\n\010"
    "feevalue\030\t \001(\003\022\020\n\010hostname\030\n \001(\014\022\021\n\tcard"
    "_time\030\013 \001(\r\022\023\n\013table_state\030\014 \001(\r\022\017\n\007sitd"
    "own\030\r \001(\003\022\036\n\026apply_banker_condition\030\016 \001("
    "\003\022\035\n\025apply_banker_maxscore\030\017 \001(\003\022\027\n\017bank"
    "er_max_time\030\020 \001(\r\"\310\002\n\022sangong_table_info"
    "\022\017\n\007tableid\030\001 \001(\r\022\021\n\ttablename\030\002 \001(\014\022\021\n\t"
    "is_passwd\030\003 \001(\r\022\021\n\tbasescore\030\004 \001(\003\022\017\n\007co"
    "nsume\030\005 \001(\r\022\020\n\010entermin\030\006 \001(\004\022\017\n\007duetime"
    "\030\007 \001(\r\022\017\n\007feetype\030\010 \001(\r\022\020\n\010feevalue\030\t \001("
    "\003\022\020\n\010hostname\030\n \001(\014\022\023\n\013table_state\030\013 \001(\r"
    "\022\020\n\010seat_num\030\014 \001(\r\022\022\n\ncan_banker\030\r \001(\r\022\031"
    "\n\021apply_banker_time\030\016 \001(\r\022\021\n\tcard_time\030\017"
    " \001(\r\022\026\n\016show_card_time\030\020 \001(\r\"\327\002\n\021paijiu_"
    "table_info\022\017\n\007tableid\030\001 \001(\r\022\021\n\ttablename"
    "\030\002 \001(\014\022\021\n\tis_passwd\030\003 \001(\r\022\021\n\tbasescore\030\004"
    " \001(\003\022\017\n\007consume\030\005 \001(\r\022\020\n\010entermin\030\006 \001(\004\022"
    "\017\n\007duetime\030\007 \001(\r\022\017\n\007feetype\030\010 \001(\r\022\020\n\010fee"
    "value\030\t \001(\003\022\020\n\010hostname\030\n \001(\014\022\021\n\tcard_ti"
    "me\030\013 \001(\r\022\023\n\013table_state\030\014 \001(\r\022\017\n\007sitdown"
    "\030\r \001(\003\022\036\n\026apply_banker_condition\030\016 \001(\003\022\035"
    "\n\025apply_banker_maxscore\030\017 \001(\003\022\027\n\017banker_"
    "max_time\030\020 \001(\r\"\243\001\n\025everycolor_table_info"
    "\022\021\n\tbasescore\030\001 \001(\003\022\017\n\007consume\030\002 \001(\r\022\017\n\007"
    "feetype\030\003 \001(\r\022\020\n\010feevalue\030\004 \001(\003\022\023\n\013table"
    "_state\030\005 \001(\r\022\026\n\016add_score_time\030\006 \001(\r\022\026\n\016"
    "show_card_time\030\007 \001(\r\"\377\002\n\017dice_table_info"
    "\022\017\n\007tableid\030\001 \001(\r\022\021\n\ttablename\030\002 \001(\014\022\021\n\t"
    "is_passwd\030\003 \001(\r\022\021\n\tbasescore\030\004 \001(\003\022\017\n\007co"
    "nsume\030\005 \001(\r\022\020\n\010entermin\030\006 \001(\004\022\017\n\007duetime"
    "\030\007 \001(\r\022\017\n\007feetype\030\010 \001(\r\022\020\n\010feevalue\030\t \001("
    "\003\022\020\n\010hostname\030\n \001(\014\022\021\n\tfree_time\030\013 \001(\r\022\021"
    "\n\tcard_time\030\014 \001(\r\022\025\n\rdispatch_time\030\r \001(\r"
    "\022\023\n\013table_state\030\016 \001(\r\022\017\n\007sitdown\030\017 \001(\003\022\036"
    "\n\026apply_banker_condition\030\020 \001(\003\022\035\n\025apply_"
    "banker_maxscore\030\021 \001(\003\022\027\n\017banker_max_time"
    "\030\022 \001(\r\"\313\002\n\022majiang_table_info\022\017\n\007tableid"
    "\030\001 \001(\r\022\021\n\ttablename\030\002 \001(\014\022\021\n\tis_passwd\030\003"
    " \001(\r\022\014\n\004deal\030\004 \001(\r\022\021\n\tbasescore\030\005 \001(\003\022\017\n"
    "\007consume\030\006 \001(\r\022\020\n\010entermin\030\007 \001(\004\022\017\n\007duet"
    "ime\030\010 \001(\r\022\017\n\007feetype\030\t \001(\r\022\020\n\010feevalue\030\n"
    " \001(\003\022\020\n\010hostname\030\013 \001(\014\022\025\n\rshow_hand_num\030"
    "\014 \001(\r\022\021\n\tcall_time\030\r \001(\r\022\021\n\tcard_time\030\016 "
    "\001(\r\022\021\n\tplay_type\030\017 \001(\r\022\020\n\010seat_num\030\020 \001(\r"
    "\022\022\n\nkind_cards\030\021 \003(\r\"\355\001\n\017slot_table_info"
    "\022\017\n\007tableid\030\001 \001(\r\022\021\n\ttablename\030\002 \001(\014\022\021\n\t"
    "is_passwd\030\003 \001(\r\022\020\n\010hostname\030\004 \001(\014\022\021\n\tbas"
    "escore\030\005 \001(\003\022\017\n\007consume\030\006 \001(\r\022\020\n\010entermi"
    "n\030\007 \001(\004\022\017\n\007duetime\030\010 \001(\r\022\017\n\007feetype\030\t \001("
    "\r\022\020\n\010feevalue\030\n \001(\003\022\020\n\010seat_num\030\013 \001(\r\022\025\n"
    "\rjackpot_score\030\014 \001(\r\"\374\001\n\016war_table_info\022"
    "\017\n\007tableid\030\001 \001(\r\022\021\n\ttablename\030\002 \001(\014\022\021\n\ti"
    "s_passwd\030\003 \001(\r\022\021\n\tbasescore\030\004 \001(\003\022\017\n\007con"
    "sume\030\005 \001(\r\022\020\n\010entermin\030\006 \001(\004\022\017\n\007duetime\030"
    "\007 \001(\r\022\017\n\007feetype\030\010 \001(\r\022\020\n\010feevalue\030\t \001(\003"
    "\022\020\n\010hostname\030\n \001(\014\022\021\n\tcard_time\030\013 \001(\r\022\023\n"
    "\013table_state\030\014 \001(\r\022\017\n\007sitdown\030\r \001(\003\"\376\001\n\020"
    "fight_table_info\022\017\n\007tableid\030\001 \001(\r\022\021\n\ttab"
    "lename\030\002 \001(\014\022\021\n\tis_passwd\030\003 \001(\r\022\021\n\tbases"
    "core\030\004 \001(\003\022\017\n\007consume\030\005 \001(\r\022\020\n\010entermin\030"
    "\006 \001(\004\022\017\n\007duetime\030\007 \001(\r\022\017\n\007feetype\030\010 \001(\r\022"
    "\020\n\010feevalue\030\t \001(\003\022\020\n\010hostname\030\n \001(\014\022\021\n\tc"
    "ard_time\030\013 \001(\r\022\023\n\013table_state\030\014 \001(\r\022\017\n\007s"
    "itdown\030\r \001(\003\"\307\002\n\021robniu_table_info\022\017\n\007ta"
    "bleid\030\001 \001(\r\022\021\n\ttablename\030\002 \001(\014\022\021\n\tis_pas"
    "swd\030\003 \001(\r\022\021\n\tbasescore\030\004 \001(\003\022\017\n\007consume\030"
    "\005 \001(\r\022\020\n\010entermin\030\006 \001(\004\022\017\n\007duetime\030\007 \001(\r"
    "\022\017\n\007feetype\030\010 \001(\r\022\020\n\010feevalue\030\t \001(\003\022\020\n\010h"
    "ostname\030\n \001(\014\022\023\n\013table_state\030\013 \001(\r\022\020\n\010se"
    "at_num\030\014 \001(\r\022\022\n\ncan_banker\030\r \001(\r\022\031\n\021appl"
    "y_banker_time\030\016 \001(\r\022\021\n\tcard_time\030\017 \001(\r\022\026"
    "\n\016show_card_time\030\020 \001(\r\"\351\005\n\017table_face_in"
    "fo\022\"\n\004land\030\001 \001(\0132\024.net.land_table_info\022*"
    "\n\010showhand\030\002 \001(\0132\030.net.showhand_table_in"
    "fo\022&\n\006bainiu\030\003 \001(\0132\026.net.bainiu_table_in"
    "fo\022$\n\005texas\030\004 \001(\0132\025.net.texas_table_info"
    "\022*\n\010zajinhua\030\005 \001(\0132\030.net.zajinhua_table_"
    "info\022&\n\006niuniu\030\006 \001(\0132\026.net.niuniu_table_"
    "info\022*\n\010baccarat\030\007 \001(\0132\030.net.baccarat_ta"
    "ble_info\022(\n\007sangong\030\010 \001(\0132\027.net.sangong_"
    "table_info\022&\n\006paijiu\030\t \001(\0132\026.net.paijiu_"
    "table_info\022.\n\neverycolor\030\n \001(\0132\032.net.eve"
    "rycolor_table_info\022\"\n\004dice\030\013 \001(\0132\024.net.d"
    "ice_table_info\022(\n\007majiang\030\014 \001(\0132\027.net.ma"
    "jiang_table_info\022\"\n\004slot\030\r \001(\0132\024.net.slo"
    "t_table_info\022 \n\003war\030\016 \001(\0132\023.net.war_tabl"
    "e_info\022$\n\005fight\030\017 \001(\0132\025.net.fight_table_"
    "info\022&\n\006robniu\030\020 \001(\0132\026.net.robniu_table_"
    "info\022(\n\007fishing\030\021 \001(\0132\027.net.fishing_tabl"
    "e_info\022*\n\010twoeight\030\022 \001(\0132\030.net.twoeight_"
    "table_info\"\225\001\n\022fishing_table_info\022\017\n\007tab"
    "leid\030\001 \001(\r\022\021\n\ttablename\030\002 \001(\014\022\021\n\tbasesco"
    "re\030\003 \001(\003\022\017\n\007consume\030\004 \001(\r\022\020\n\010entermin\030\005 "
    "\001(\004\022\020\n\010maplevel\030\006 \001(\004\022\023\n\013table_state\030\007 \001"
    "(\r\"\362\002\n\023twoeight_table_info\022\017\n\007tableid\030\001 "
    "\001(\r\022\021\n\ttablename\030\002 \001(\014\022\021\n\tis_passwd\030\003 \001("
    "\r\022\021\n\tbasescore\030\004 \001(\003\022\017\n\007consume\030\005 \001(\r\022\020\n"
    "\010entermin\030\006 \001(\004\022\017\n\007duetime\030\007 \001(\r\022\017\n\007feet"
    "ype\030\010 \001(\r\022\020\n\010feevalue\030\t \001(\003\022\020\n\010hostname\030"
    "\n \001(\014\022\021\n\tcard_time\030\013 \001(\r\022\023\n\013table_state\030"
    "\014 \001(\r\022\017\n\007sitdown\030\r \001(\003\022\036\n\026apply_banker_c"
    "ondition\030\016 \001(\003\022\035\n\025apply_banker_maxscore\030"
    "\017 \001(\003\022\027\n\017banker_max_time\030\020 \001(\r\022\027\n\017max_je"
    "tton_rate\030\021 \001(\r\"L\n\014mission_data\022\014\n\004msid\030"
    "\001 \001(\r\022\016\n\006rtimes\030\002 \001(\r\022\016\n\006ctimes\030\003 \001(\r\022\016\n"
    "\006cptime\030\004 \001(\r\")\n\004item\022\017\n\007item_id\030\001 \001(\r\022\020"
    "\n\010item_num\030\002 \001(\r\"$\n\010item_bag\022\030\n\005items\030\001 "
    "\003(\0132\t.net.item\"\032\n\tmsg_cards\022\r\n\005cards\030\001 \003"
    "(\r\"<\n\nplayer_num\022\r\n\005svrid\030\001 \001(\r\022\017\n\007playe"
    "rs\030\002 \001(\r\022\016\n\006robots\030\003 \001(\r", 8384);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "base_msg_struct.proto", &protobuf_RegisterTypes);
  base_info::default_instance_ = new base_info();
  land_info::default_instance_ = new land_info();
  game_data_info::default_instance_ = new game_data_info();
  svr_info::default_instance_ = new svr_info();
  room_info::default_instance_ = new room_info();
  seat_info::default_instance_ = new seat_info();
  seat_face::default_instance_ = new seat_face();
  looker_info::default_instance_ = new looker_info();
  land_table_info::default_instance_ = new land_table_info();
  showhand_table_info::default_instance_ = new showhand_table_info();
  bainiu_table_info::default_instance_ = new bainiu_table_info();
  texas_table_info::default_instance_ = new texas_table_info();
  zajinhua_table_info::default_instance_ = new zajinhua_table_info();
  niuniu_table_info::default_instance_ = new niuniu_table_info();
  baccarat_table_info::default_instance_ = new baccarat_table_info();
  sangong_table_info::default_instance_ = new sangong_table_info();
  paijiu_table_info::default_instance_ = new paijiu_table_info();
  everycolor_table_info::default_instance_ = new everycolor_table_info();
  dice_table_info::default_instance_ = new dice_table_info();
  majiang_table_info::default_instance_ = new majiang_table_info();
  slot_table_info::default_instance_ = new slot_table_info();
  war_table_info::default_instance_ = new war_table_info();
  fight_table_info::default_instance_ = new fight_table_info();
  robniu_table_info::default_instance_ = new robniu_table_info();
  table_face_info::default_instance_ = new table_face_info();
  fishing_table_info::default_instance_ = new fishing_table_info();
  twoeight_table_info::default_instance_ = new twoeight_table_info();
  mission_data::default_instance_ = new mission_data();
  item::default_instance_ = new item();
  item_bag::default_instance_ = new item_bag();
  msg_cards::default_instance_ = new msg_cards();
  player_num::default_instance_ = new player_num();
  base_info::default_instance_->InitAsDefaultInstance();
  land_info::default_instance_->InitAsDefaultInstance();
  game_data_info::default_instance_->InitAsDefaultInstance();
  svr_info::default_instance_->InitAsDefaultInstance();
  room_info::default_instance_->InitAsDefaultInstance();
  seat_info::default_instance_->InitAsDefaultInstance();
  seat_face::default_instance_->InitAsDefaultInstance();
  looker_info::default_instance_->InitAsDefaultInstance();
  land_table_info::default_instance_->InitAsDefaultInstance();
  showhand_table_info::default_instance_->InitAsDefaultInstance();
  bainiu_table_info::default_instance_->InitAsDefaultInstance();
  texas_table_info::default_instance_->InitAsDefaultInstance();
  zajinhua_table_info::default_instance_->InitAsDefaultInstance();
  niuniu_table_info::default_instance_->InitAsDefaultInstance();
  baccarat_table_info::default_instance_->InitAsDefaultInstance();
  sangong_table_info::default_instance_->InitAsDefaultInstance();
  paijiu_table_info::default_instance_->InitAsDefaultInstance();
  everycolor_table_info::default_instance_->InitAsDefaultInstance();
  dice_table_info::default_instance_->InitAsDefaultInstance();
  majiang_table_info::default_instance_->InitAsDefaultInstance();
  slot_table_info::default_instance_->InitAsDefaultInstance();
  war_table_info::default_instance_->InitAsDefaultInstance();
  fight_table_info::default_instance_->InitAsDefaultInstance();
  robniu_table_info::default_instance_->InitAsDefaultInstance();
  table_face_info::default_instance_->InitAsDefaultInstance();
  fishing_table_info::default_instance_->InitAsDefaultInstance();
  twoeight_table_info::default_instance_->InitAsDefaultInstance();
  mission_data::default_instance_->InitAsDefaultInstance();
  item::default_instance_->InitAsDefaultInstance();
  item_bag::default_instance_->InitAsDefaultInstance();
  msg_cards::default_instance_->InitAsDefaultInstance();
  player_num::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_base_5fmsg_5fstruct_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_base_5fmsg_5fstruct_2eproto {
  StaticDescriptorInitializer_base_5fmsg_5fstruct_2eproto() {
    protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  }
} static_descriptor_initializer_base_5fmsg_5fstruct_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int base_info::kUidFieldNumber;
const int base_info::kNameFieldNumber;
const int base_info::kSexFieldNumber;
const int base_info::kDiamondFieldNumber;
const int base_info::kCoinFieldNumber;
const int base_info::kScoreFieldNumber;
const int base_info::kIngotFieldNumber;
const int base_info::kCvalueFieldNumber;
const int base_info::kSafeCoinFieldNumber;
const int base_info::kVipFieldNumber;
const int base_info::kSafeboxstateFieldNumber;
const int base_info::kCloginFieldNumber;
const int base_info::kWeekloginFieldNumber;
const int base_info::kRewardFieldNumber;
const int base_info::kBankruptFieldNumber;
const int base_info::kHeadIconFieldNumber;
const int base_info::kDayGameCountFieldNumber;
const int base_info::kLoginIpFieldNumber;
const int base_info::kCityFieldNumber;
const int base_info::kRechargeFieldNumber;
const int base_info::kConvertsFieldNumber;
const int base_info::kBatchidFieldNumber;
const int base_info::kLvscoreFieldNumber;
const int base_info::kLvcoinFieldNumber;
const int base_info::kPostimeFieldNumber;
const int base_info::kUserrightFieldNumber;
const int base_info::kWinFieldNumber;
const int base_info::kPosrmbFieldNumber;
const int base_info::kWelcountFieldNumber;
const int base_info::kWeltimeFieldNumber;
const int base_info::kRechargeActwleFieldNumber;
const int base_info::kConvertsActwleFieldNumber;
const int base_info::kRtimeFieldNumber;
const int base_info::kIspayFieldNumber;
#endif  // !_MSC_VER

base_info::base_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void base_info::InitAsDefaultInstance() {
}

base_info::base_info(const base_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void base_info::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0u;
  diamond_ = GOOGLE_LONGLONG(0);
  coin_ = GOOGLE_LONGLONG(0);
  score_ = GOOGLE_LONGLONG(0);
  ingot_ = GOOGLE_LONGLONG(0);
  cvalue_ = GOOGLE_LONGLONG(0);
  safe_coin_ = GOOGLE_LONGLONG(0);
  vip_ = 0u;
  safeboxstate_ = 0u;
  clogin_ = 0u;
  weeklogin_ = 0u;
  reward_ = 0u;
  bankrupt_ = 0u;
  head_icon_ = 0u;
  day_game_count_ = 0u;
  login_ip_ = 0u;
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  recharge_ = GOOGLE_LONGLONG(0);
  converts_ = GOOGLE_LONGLONG(0);
  batchid_ = 0u;
  lvscore_ = 0u;
  lvcoin_ = 0u;
  postime_ = GOOGLE_ULONGLONG(0);
  userright_ = 0u;
  win_ = GOOGLE_LONGLONG(0);
  posrmb_ = 0u;
  welcount_ = 0u;
  weltime_ = GOOGLE_ULONGLONG(0);
  recharge_actwle_ = 0u;
  converts_actwle_ = GOOGLE_ULONGLONG(0);
  rtime_ = GOOGLE_ULONGLONG(0);
  ispay_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

base_info::~base_info() {
  SharedDtor();
}

void base_info::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (this != default_instance_) {
  }
}

void base_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* base_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return base_info_descriptor_;
}

const base_info& base_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  return *default_instance_;
}

base_info* base_info::default_instance_ = NULL;

base_info* base_info::New() const {
  return new base_info;
}

void base_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    sex_ = 0u;
    diamond_ = GOOGLE_LONGLONG(0);
    coin_ = GOOGLE_LONGLONG(0);
    score_ = GOOGLE_LONGLONG(0);
    ingot_ = GOOGLE_LONGLONG(0);
    cvalue_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    safe_coin_ = GOOGLE_LONGLONG(0);
    vip_ = 0u;
    safeboxstate_ = 0u;
    clogin_ = 0u;
    weeklogin_ = 0u;
    reward_ = 0u;
    bankrupt_ = 0u;
    head_icon_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    day_game_count_ = 0u;
    login_ip_ = 0u;
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::kEmptyString) {
        city_->clear();
      }
    }
    recharge_ = GOOGLE_LONGLONG(0);
    converts_ = GOOGLE_LONGLONG(0);
    batchid_ = 0u;
    lvscore_ = 0u;
    lvcoin_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    postime_ = GOOGLE_ULONGLONG(0);
    userright_ = 0u;
    win_ = GOOGLE_LONGLONG(0);
    posrmb_ = 0u;
    welcount_ = 0u;
    weltime_ = GOOGLE_ULONGLONG(0);
    recharge_actwle_ = 0u;
    converts_actwle_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    rtime_ = GOOGLE_ULONGLONG(0);
    ispay_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool base_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_diamond;
        break;
      }

      // optional int64 diamond = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_coin;
        break;
      }

      // optional int64 coin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_score;
        break;
      }

      // optional int64 score = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ingot;
        break;
      }

      // optional int64 ingot = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ingot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ingot_)));
          set_has_ingot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_cvalue;
        break;
      }

      // optional int64 cvalue = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cvalue_)));
          set_has_cvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_safe_coin;
        break;
      }

      // optional int64 safe_coin = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_safe_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &safe_coin_)));
          set_has_safe_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_vip;
        break;
      }

      // optional uint32 vip = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_safeboxstate;
        break;
      }

      // optional uint32 safeboxstate = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_safeboxstate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &safeboxstate_)));
          set_has_safeboxstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_clogin;
        break;
      }

      // optional uint32 clogin = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clogin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clogin_)));
          set_has_clogin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_weeklogin;
        break;
      }

      // optional uint32 weeklogin = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weeklogin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weeklogin_)));
          set_has_weeklogin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_reward;
        break;
      }

      // optional uint32 reward = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_)));
          set_has_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_bankrupt;
        break;
      }

      // optional uint32 bankrupt = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bankrupt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bankrupt_)));
          set_has_bankrupt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_head_icon;
        break;
      }

      // optional uint32 head_icon = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_icon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_icon_)));
          set_has_head_icon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_day_game_count;
        break;
      }

      // optional uint32 day_game_count = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day_game_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_game_count_)));
          set_has_day_game_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_login_ip;
        break;
      }

      // optional uint32 login_ip = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &login_ip_)));
          set_has_login_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_city;
        break;
      }

      // optional bytes city = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_city()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_recharge;
        break;
      }

      // optional int64 recharge = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &recharge_)));
          set_has_recharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_converts;
        break;
      }

      // optional int64 converts = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_converts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &converts_)));
          set_has_converts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_batchid;
        break;
      }

      // optional uint32 batchid = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_batchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batchid_)));
          set_has_batchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_lvscore;
        break;
      }

      // optional uint32 lvscore = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lvscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lvscore_)));
          set_has_lvscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_lvcoin;
        break;
      }

      // optional uint32 lvcoin = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lvcoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lvcoin_)));
          set_has_lvcoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_postime;
        break;
      }

      // optional uint64 postime = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_postime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &postime_)));
          set_has_postime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_userright;
        break;
      }

      // optional uint32 userright = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userright:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userright_)));
          set_has_userright();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_win;
        break;
      }

      // optional int64 win = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_posrmb;
        break;
      }

      // optional uint32 posrmb = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posrmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &posrmb_)));
          set_has_posrmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_welcount;
        break;
      }

      // optional uint32 welcount = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_welcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &welcount_)));
          set_has_welcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_weltime;
        break;
      }

      // optional uint64 weltime = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weltime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &weltime_)));
          set_has_weltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_recharge_actwle;
        break;
      }

      // optional uint32 recharge_actwle = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recharge_actwle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recharge_actwle_)));
          set_has_recharge_actwle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_converts_actwle;
        break;
      }

      // optional uint64 converts_actwle = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_converts_actwle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &converts_actwle_)));
          set_has_converts_actwle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_rtime;
        break;
      }

      // optional uint64 rtime = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rtime_)));
          set_has_rtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_ispay;
        break;
      }

      // optional uint32 ispay = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ispay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ispay_)));
          set_has_ispay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void base_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional uint32 sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sex(), output);
  }

  // optional int64 diamond = 4;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->diamond(), output);
  }

  // optional int64 coin = 5;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->coin(), output);
  }

  // optional int64 score = 6;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->score(), output);
  }

  // optional int64 ingot = 7;
  if (has_ingot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->ingot(), output);
  }

  // optional int64 cvalue = 8;
  if (has_cvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->cvalue(), output);
  }

  // optional int64 safe_coin = 9;
  if (has_safe_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->safe_coin(), output);
  }

  // optional uint32 vip = 10;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->vip(), output);
  }

  // optional uint32 safeboxstate = 11;
  if (has_safeboxstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->safeboxstate(), output);
  }

  // optional uint32 clogin = 12;
  if (has_clogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->clogin(), output);
  }

  // optional uint32 weeklogin = 13;
  if (has_weeklogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->weeklogin(), output);
  }

  // optional uint32 reward = 14;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->reward(), output);
  }

  // optional uint32 bankrupt = 15;
  if (has_bankrupt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->bankrupt(), output);
  }

  // optional uint32 head_icon = 16;
  if (has_head_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->head_icon(), output);
  }

  // optional uint32 day_game_count = 17;
  if (has_day_game_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->day_game_count(), output);
  }

  // optional uint32 login_ip = 18;
  if (has_login_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->login_ip(), output);
  }

  // optional bytes city = 19;
  if (has_city()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      19, this->city(), output);
  }

  // optional int64 recharge = 20;
  if (has_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->recharge(), output);
  }

  // optional int64 converts = 21;
  if (has_converts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->converts(), output);
  }

  // optional uint32 batchid = 22;
  if (has_batchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->batchid(), output);
  }

  // optional uint32 lvscore = 23;
  if (has_lvscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->lvscore(), output);
  }

  // optional uint32 lvcoin = 24;
  if (has_lvcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->lvcoin(), output);
  }

  // optional uint64 postime = 25;
  if (has_postime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(25, this->postime(), output);
  }

  // optional uint32 userright = 26;
  if (has_userright()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->userright(), output);
  }

  // optional int64 win = 27;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(27, this->win(), output);
  }

  // optional uint32 posrmb = 28;
  if (has_posrmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->posrmb(), output);
  }

  // optional uint32 welcount = 29;
  if (has_welcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->welcount(), output);
  }

  // optional uint64 weltime = 30;
  if (has_weltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(30, this->weltime(), output);
  }

  // optional uint32 recharge_actwle = 31;
  if (has_recharge_actwle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->recharge_actwle(), output);
  }

  // optional uint64 converts_actwle = 32;
  if (has_converts_actwle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(32, this->converts_actwle(), output);
  }

  // optional uint64 rtime = 33;
  if (has_rtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(33, this->rtime(), output);
  }

  // optional uint32 ispay = 34;
  if (has_ispay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->ispay(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* base_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional uint32 sex = 3;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sex(), target);
  }

  // optional int64 diamond = 4;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->diamond(), target);
  }

  // optional int64 coin = 5;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->coin(), target);
  }

  // optional int64 score = 6;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->score(), target);
  }

  // optional int64 ingot = 7;
  if (has_ingot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->ingot(), target);
  }

  // optional int64 cvalue = 8;
  if (has_cvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->cvalue(), target);
  }

  // optional int64 safe_coin = 9;
  if (has_safe_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->safe_coin(), target);
  }

  // optional uint32 vip = 10;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->vip(), target);
  }

  // optional uint32 safeboxstate = 11;
  if (has_safeboxstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->safeboxstate(), target);
  }

  // optional uint32 clogin = 12;
  if (has_clogin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->clogin(), target);
  }

  // optional uint32 weeklogin = 13;
  if (has_weeklogin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->weeklogin(), target);
  }

  // optional uint32 reward = 14;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->reward(), target);
  }

  // optional uint32 bankrupt = 15;
  if (has_bankrupt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->bankrupt(), target);
  }

  // optional uint32 head_icon = 16;
  if (has_head_icon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->head_icon(), target);
  }

  // optional uint32 day_game_count = 17;
  if (has_day_game_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->day_game_count(), target);
  }

  // optional uint32 login_ip = 18;
  if (has_login_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->login_ip(), target);
  }

  // optional bytes city = 19;
  if (has_city()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        19, this->city(), target);
  }

  // optional int64 recharge = 20;
  if (has_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->recharge(), target);
  }

  // optional int64 converts = 21;
  if (has_converts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->converts(), target);
  }

  // optional uint32 batchid = 22;
  if (has_batchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->batchid(), target);
  }

  // optional uint32 lvscore = 23;
  if (has_lvscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->lvscore(), target);
  }

  // optional uint32 lvcoin = 24;
  if (has_lvcoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->lvcoin(), target);
  }

  // optional uint64 postime = 25;
  if (has_postime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(25, this->postime(), target);
  }

  // optional uint32 userright = 26;
  if (has_userright()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->userright(), target);
  }

  // optional int64 win = 27;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(27, this->win(), target);
  }

  // optional uint32 posrmb = 28;
  if (has_posrmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->posrmb(), target);
  }

  // optional uint32 welcount = 29;
  if (has_welcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->welcount(), target);
  }

  // optional uint64 weltime = 30;
  if (has_weltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(30, this->weltime(), target);
  }

  // optional uint32 recharge_actwle = 31;
  if (has_recharge_actwle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->recharge_actwle(), target);
  }

  // optional uint64 converts_actwle = 32;
  if (has_converts_actwle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(32, this->converts_actwle(), target);
  }

  // optional uint64 rtime = 33;
  if (has_rtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(33, this->rtime(), target);
  }

  // optional uint32 ispay = 34;
  if (has_ispay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->ispay(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int base_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint32 sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional int64 diamond = 4;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->diamond());
    }

    // optional int64 coin = 5;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->coin());
    }

    // optional int64 score = 6;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->score());
    }

    // optional int64 ingot = 7;
    if (has_ingot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ingot());
    }

    // optional int64 cvalue = 8;
    if (has_cvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cvalue());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 safe_coin = 9;
    if (has_safe_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->safe_coin());
    }

    // optional uint32 vip = 10;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip());
    }

    // optional uint32 safeboxstate = 11;
    if (has_safeboxstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->safeboxstate());
    }

    // optional uint32 clogin = 12;
    if (has_clogin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clogin());
    }

    // optional uint32 weeklogin = 13;
    if (has_weeklogin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weeklogin());
    }

    // optional uint32 reward = 14;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward());
    }

    // optional uint32 bankrupt = 15;
    if (has_bankrupt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bankrupt());
    }

    // optional uint32 head_icon = 16;
    if (has_head_icon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_icon());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 day_game_count = 17;
    if (has_day_game_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day_game_count());
    }

    // optional uint32 login_ip = 18;
    if (has_login_ip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->login_ip());
    }

    // optional bytes city = 19;
    if (has_city()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->city());
    }

    // optional int64 recharge = 20;
    if (has_recharge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->recharge());
    }

    // optional int64 converts = 21;
    if (has_converts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->converts());
    }

    // optional uint32 batchid = 22;
    if (has_batchid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batchid());
    }

    // optional uint32 lvscore = 23;
    if (has_lvscore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lvscore());
    }

    // optional uint32 lvcoin = 24;
    if (has_lvcoin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lvcoin());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint64 postime = 25;
    if (has_postime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->postime());
    }

    // optional uint32 userright = 26;
    if (has_userright()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userright());
    }

    // optional int64 win = 27;
    if (has_win()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->win());
    }

    // optional uint32 posrmb = 28;
    if (has_posrmb()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->posrmb());
    }

    // optional uint32 welcount = 29;
    if (has_welcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->welcount());
    }

    // optional uint64 weltime = 30;
    if (has_weltime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->weltime());
    }

    // optional uint32 recharge_actwle = 31;
    if (has_recharge_actwle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recharge_actwle());
    }

    // optional uint64 converts_actwle = 32;
    if (has_converts_actwle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->converts_actwle());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint64 rtime = 33;
    if (has_rtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rtime());
    }

    // optional uint32 ispay = 34;
    if (has_ispay()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ispay());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void base_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const base_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const base_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void base_info::MergeFrom(const base_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_ingot()) {
      set_ingot(from.ingot());
    }
    if (from.has_cvalue()) {
      set_cvalue(from.cvalue());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_safe_coin()) {
      set_safe_coin(from.safe_coin());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_safeboxstate()) {
      set_safeboxstate(from.safeboxstate());
    }
    if (from.has_clogin()) {
      set_clogin(from.clogin());
    }
    if (from.has_weeklogin()) {
      set_weeklogin(from.weeklogin());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
    if (from.has_bankrupt()) {
      set_bankrupt(from.bankrupt());
    }
    if (from.has_head_icon()) {
      set_head_icon(from.head_icon());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_day_game_count()) {
      set_day_game_count(from.day_game_count());
    }
    if (from.has_login_ip()) {
      set_login_ip(from.login_ip());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_recharge()) {
      set_recharge(from.recharge());
    }
    if (from.has_converts()) {
      set_converts(from.converts());
    }
    if (from.has_batchid()) {
      set_batchid(from.batchid());
    }
    if (from.has_lvscore()) {
      set_lvscore(from.lvscore());
    }
    if (from.has_lvcoin()) {
      set_lvcoin(from.lvcoin());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_postime()) {
      set_postime(from.postime());
    }
    if (from.has_userright()) {
      set_userright(from.userright());
    }
    if (from.has_win()) {
      set_win(from.win());
    }
    if (from.has_posrmb()) {
      set_posrmb(from.posrmb());
    }
    if (from.has_welcount()) {
      set_welcount(from.welcount());
    }
    if (from.has_weltime()) {
      set_weltime(from.weltime());
    }
    if (from.has_recharge_actwle()) {
      set_recharge_actwle(from.recharge_actwle());
    }
    if (from.has_converts_actwle()) {
      set_converts_actwle(from.converts_actwle());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_rtime()) {
      set_rtime(from.rtime());
    }
    if (from.has_ispay()) {
      set_ispay(from.ispay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void base_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void base_info::CopyFrom(const base_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool base_info::IsInitialized() const {

  return true;
}

void base_info::Swap(base_info* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(diamond_, other->diamond_);
    std::swap(coin_, other->coin_);
    std::swap(score_, other->score_);
    std::swap(ingot_, other->ingot_);
    std::swap(cvalue_, other->cvalue_);
    std::swap(safe_coin_, other->safe_coin_);
    std::swap(vip_, other->vip_);
    std::swap(safeboxstate_, other->safeboxstate_);
    std::swap(clogin_, other->clogin_);
    std::swap(weeklogin_, other->weeklogin_);
    std::swap(reward_, other->reward_);
    std::swap(bankrupt_, other->bankrupt_);
    std::swap(head_icon_, other->head_icon_);
    std::swap(day_game_count_, other->day_game_count_);
    std::swap(login_ip_, other->login_ip_);
    std::swap(city_, other->city_);
    std::swap(recharge_, other->recharge_);
    std::swap(converts_, other->converts_);
    std::swap(batchid_, other->batchid_);
    std::swap(lvscore_, other->lvscore_);
    std::swap(lvcoin_, other->lvcoin_);
    std::swap(postime_, other->postime_);
    std::swap(userright_, other->userright_);
    std::swap(win_, other->win_);
    std::swap(posrmb_, other->posrmb_);
    std::swap(welcount_, other->welcount_);
    std::swap(weltime_, other->weltime_);
    std::swap(recharge_actwle_, other->recharge_actwle_);
    std::swap(converts_actwle_, other->converts_actwle_);
    std::swap(rtime_, other->rtime_);
    std::swap(ispay_, other->ispay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata base_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = base_info_descriptor_;
  metadata.reflection = base_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int land_info::kWinFieldNumber;
const int land_info::kLoseFieldNumber;
const int land_info::kLandFieldNumber;
const int land_info::kSpringFieldNumber;
const int land_info::kMaxwinFieldNumber;
const int land_info::kWincFieldNumber;
const int land_info::kLosecFieldNumber;
const int land_info::kLandcFieldNumber;
const int land_info::kMaxwincFieldNumber;
const int land_info::kSpringcFieldNumber;
#endif  // !_MSC_VER

land_info::land_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void land_info::InitAsDefaultInstance() {
}

land_info::land_info(const land_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void land_info::SharedCtor() {
  _cached_size_ = 0;
  win_ = 0u;
  lose_ = 0u;
  land_ = 0u;
  spring_ = 0u;
  maxwin_ = GOOGLE_LONGLONG(0);
  winc_ = 0u;
  losec_ = 0u;
  landc_ = 0u;
  maxwinc_ = GOOGLE_LONGLONG(0);
  springc_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

land_info::~land_info() {
  SharedDtor();
}

void land_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void land_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* land_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return land_info_descriptor_;
}

const land_info& land_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  return *default_instance_;
}

land_info* land_info::default_instance_ = NULL;

land_info* land_info::New() const {
  return new land_info;
}

void land_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    win_ = 0u;
    lose_ = 0u;
    land_ = 0u;
    spring_ = 0u;
    maxwin_ = GOOGLE_LONGLONG(0);
    winc_ = 0u;
    losec_ = 0u;
    landc_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    maxwinc_ = GOOGLE_LONGLONG(0);
    springc_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool land_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 win = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lose;
        break;
      }

      // optional uint32 lose = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lose_)));
          set_has_lose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_land;
        break;
      }

      // optional uint32 land = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_land:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &land_)));
          set_has_land();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_spring;
        break;
      }

      // optional uint32 spring = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spring:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spring_)));
          set_has_spring();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_maxwin;
        break;
      }

      // optional int64 maxwin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxwin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &maxwin_)));
          set_has_maxwin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_winc;
        break;
      }

      // optional uint32 winc = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winc_)));
          set_has_winc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_losec;
        break;
      }

      // optional uint32 losec = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_losec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &losec_)));
          set_has_losec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_landc;
        break;
      }

      // optional uint32 landc = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_landc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &landc_)));
          set_has_landc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_maxwinc;
        break;
      }

      // optional int64 maxwinc = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxwinc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &maxwinc_)));
          set_has_maxwinc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_springc;
        break;
      }

      // optional uint32 springc = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_springc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &springc_)));
          set_has_springc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void land_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 win = 1;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->win(), output);
  }

  // optional uint32 lose = 2;
  if (has_lose()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lose(), output);
  }

  // optional uint32 land = 3;
  if (has_land()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->land(), output);
  }

  // optional uint32 spring = 4;
  if (has_spring()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->spring(), output);
  }

  // optional int64 maxwin = 5;
  if (has_maxwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->maxwin(), output);
  }

  // optional uint32 winc = 6;
  if (has_winc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->winc(), output);
  }

  // optional uint32 losec = 7;
  if (has_losec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->losec(), output);
  }

  // optional uint32 landc = 8;
  if (has_landc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->landc(), output);
  }

  // optional int64 maxwinc = 9;
  if (has_maxwinc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->maxwinc(), output);
  }

  // optional uint32 springc = 10;
  if (has_springc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->springc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* land_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 win = 1;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->win(), target);
  }

  // optional uint32 lose = 2;
  if (has_lose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lose(), target);
  }

  // optional uint32 land = 3;
  if (has_land()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->land(), target);
  }

  // optional uint32 spring = 4;
  if (has_spring()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->spring(), target);
  }

  // optional int64 maxwin = 5;
  if (has_maxwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->maxwin(), target);
  }

  // optional uint32 winc = 6;
  if (has_winc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->winc(), target);
  }

  // optional uint32 losec = 7;
  if (has_losec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->losec(), target);
  }

  // optional uint32 landc = 8;
  if (has_landc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->landc(), target);
  }

  // optional int64 maxwinc = 9;
  if (has_maxwinc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->maxwinc(), target);
  }

  // optional uint32 springc = 10;
  if (has_springc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->springc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int land_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 win = 1;
    if (has_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win());
    }

    // optional uint32 lose = 2;
    if (has_lose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lose());
    }

    // optional uint32 land = 3;
    if (has_land()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->land());
    }

    // optional uint32 spring = 4;
    if (has_spring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spring());
    }

    // optional int64 maxwin = 5;
    if (has_maxwin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->maxwin());
    }

    // optional uint32 winc = 6;
    if (has_winc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winc());
    }

    // optional uint32 losec = 7;
    if (has_losec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->losec());
    }

    // optional uint32 landc = 8;
    if (has_landc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->landc());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 maxwinc = 9;
    if (has_maxwinc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->maxwinc());
    }

    // optional uint32 springc = 10;
    if (has_springc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->springc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void land_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const land_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const land_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void land_info::MergeFrom(const land_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_win()) {
      set_win(from.win());
    }
    if (from.has_lose()) {
      set_lose(from.lose());
    }
    if (from.has_land()) {
      set_land(from.land());
    }
    if (from.has_spring()) {
      set_spring(from.spring());
    }
    if (from.has_maxwin()) {
      set_maxwin(from.maxwin());
    }
    if (from.has_winc()) {
      set_winc(from.winc());
    }
    if (from.has_losec()) {
      set_losec(from.losec());
    }
    if (from.has_landc()) {
      set_landc(from.landc());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_maxwinc()) {
      set_maxwinc(from.maxwinc());
    }
    if (from.has_springc()) {
      set_springc(from.springc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void land_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void land_info::CopyFrom(const land_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool land_info::IsInitialized() const {

  return true;
}

void land_info::Swap(land_info* other) {
  if (other != this) {
    std::swap(win_, other->win_);
    std::swap(lose_, other->lose_);
    std::swap(land_, other->land_);
    std::swap(spring_, other->spring_);
    std::swap(maxwin_, other->maxwin_);
    std::swap(winc_, other->winc_);
    std::swap(losec_, other->losec_);
    std::swap(landc_, other->landc_);
    std::swap(maxwinc_, other->maxwinc_);
    std::swap(springc_, other->springc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata land_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = land_info_descriptor_;
  metadata.reflection = land_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_data_info::kGameTypeFieldNumber;
const int game_data_info::kWinFieldNumber;
const int game_data_info::kLoseFieldNumber;
const int game_data_info::kMaxwinFieldNumber;
const int game_data_info::kWincFieldNumber;
const int game_data_info::kLosecFieldNumber;
const int game_data_info::kMaxwincFieldNumber;
const int game_data_info::kMaxcardFieldNumber;
const int game_data_info::kMaxcardcFieldNumber;
const int game_data_info::kDaywinFieldNumber;
const int game_data_info::kDaywincFieldNumber;
const int game_data_info::kLandFieldNumber;
const int game_data_info::kSpringFieldNumber;
const int game_data_info::kLandcFieldNumber;
const int game_data_info::kSpringcFieldNumber;
const int game_data_info::kWeekwincFieldNumber;
const int game_data_info::kTotalwincFieldNumber;
const int game_data_info::kStockscoreFieldNumber;
const int game_data_info::kGamecountFieldNumber;
#endif  // !_MSC_VER

game_data_info::game_data_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_data_info::InitAsDefaultInstance() {
}

game_data_info::game_data_info(const game_data_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_data_info::SharedCtor() {
  _cached_size_ = 0;
  game_type_ = 0u;
  win_ = 0u;
  lose_ = 0u;
  maxwin_ = GOOGLE_LONGLONG(0);
  winc_ = 0u;
  losec_ = 0u;
  maxwinc_ = GOOGLE_LONGLONG(0);
  daywin_ = GOOGLE_LONGLONG(0);
  daywinc_ = GOOGLE_LONGLONG(0);
  land_ = 0u;
  spring_ = 0u;
  landc_ = 0u;
  springc_ = 0u;
  weekwinc_ = GOOGLE_LONGLONG(0);
  totalwinc_ = GOOGLE_LONGLONG(0);
  stockscore_ = GOOGLE_LONGLONG(0);
  gamecount_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_data_info::~game_data_info() {
  SharedDtor();
}

void game_data_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_data_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_data_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_data_info_descriptor_;
}

const game_data_info& game_data_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  return *default_instance_;
}

game_data_info* game_data_info::default_instance_ = NULL;

game_data_info* game_data_info::New() const {
  return new game_data_info;
}

void game_data_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_type_ = 0u;
    win_ = 0u;
    lose_ = 0u;
    maxwin_ = GOOGLE_LONGLONG(0);
    winc_ = 0u;
    losec_ = 0u;
    maxwinc_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    daywin_ = GOOGLE_LONGLONG(0);
    daywinc_ = GOOGLE_LONGLONG(0);
    land_ = 0u;
    spring_ = 0u;
    landc_ = 0u;
    springc_ = 0u;
    weekwinc_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    totalwinc_ = GOOGLE_LONGLONG(0);
    stockscore_ = GOOGLE_LONGLONG(0);
    gamecount_ = GOOGLE_LONGLONG(0);
  }
  maxcard_.Clear();
  maxcardc_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_data_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 game_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
          set_has_game_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_win;
        break;
      }

      // optional uint32 win = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lose;
        break;
      }

      // optional uint32 lose = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lose_)));
          set_has_lose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_maxwin;
        break;
      }

      // optional int64 maxwin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxwin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &maxwin_)));
          set_has_maxwin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_winc;
        break;
      }

      // optional uint32 winc = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winc_)));
          set_has_winc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_losec;
        break;
      }

      // optional uint32 losec = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_losec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &losec_)));
          set_has_losec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_maxwinc;
        break;
      }

      // optional int64 maxwinc = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxwinc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &maxwinc_)));
          set_has_maxwinc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_maxcard;
        break;
      }

      // repeated uint32 maxcard = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxcard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_maxcard())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_maxcard())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_maxcard;
        if (input->ExpectTag(72)) goto parse_maxcardc;
        break;
      }

      // repeated uint32 maxcardc = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxcardc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72, input, this->mutable_maxcardc())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_maxcardc())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_maxcardc;
        if (input->ExpectTag(80)) goto parse_daywin;
        break;
      }

      // optional int64 daywin = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daywin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &daywin_)));
          set_has_daywin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_daywinc;
        break;
      }

      // optional int64 daywinc = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daywinc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &daywinc_)));
          set_has_daywinc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_land;
        break;
      }

      // optional uint32 land = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_land:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &land_)));
          set_has_land();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_spring;
        break;
      }

      // optional uint32 spring = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spring:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spring_)));
          set_has_spring();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_landc;
        break;
      }

      // optional uint32 landc = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_landc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &landc_)));
          set_has_landc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_springc;
        break;
      }

      // optional uint32 springc = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_springc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &springc_)));
          set_has_springc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_weekwinc;
        break;
      }

      // optional int64 weekwinc = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weekwinc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &weekwinc_)));
          set_has_weekwinc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_totalwinc;
        break;
      }

      // optional int64 totalwinc = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalwinc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalwinc_)));
          set_has_totalwinc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_stockscore;
        break;
      }

      // optional int64 stockscore = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stockscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stockscore_)));
          set_has_stockscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_gamecount;
        break;
      }

      // optional int64 gamecount = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gamecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gamecount_)));
          set_has_gamecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_data_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 game_type = 1;
  if (has_game_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_type(), output);
  }

  // optional uint32 win = 2;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->win(), output);
  }

  // optional uint32 lose = 3;
  if (has_lose()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lose(), output);
  }

  // optional int64 maxwin = 4;
  if (has_maxwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->maxwin(), output);
  }

  // optional uint32 winc = 5;
  if (has_winc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->winc(), output);
  }

  // optional uint32 losec = 6;
  if (has_losec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->losec(), output);
  }

  // optional int64 maxwinc = 7;
  if (has_maxwinc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->maxwinc(), output);
  }

  // repeated uint32 maxcard = 8;
  for (int i = 0; i < this->maxcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->maxcard(i), output);
  }

  // repeated uint32 maxcardc = 9;
  for (int i = 0; i < this->maxcardc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->maxcardc(i), output);
  }

  // optional int64 daywin = 10;
  if (has_daywin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->daywin(), output);
  }

  // optional int64 daywinc = 11;
  if (has_daywinc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->daywinc(), output);
  }

  // optional uint32 land = 12;
  if (has_land()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->land(), output);
  }

  // optional uint32 spring = 13;
  if (has_spring()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->spring(), output);
  }

  // optional uint32 landc = 14;
  if (has_landc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->landc(), output);
  }

  // optional uint32 springc = 15;
  if (has_springc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->springc(), output);
  }

  // optional int64 weekwinc = 16;
  if (has_weekwinc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->weekwinc(), output);
  }

  // optional int64 totalwinc = 17;
  if (has_totalwinc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->totalwinc(), output);
  }

  // optional int64 stockscore = 18;
  if (has_stockscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->stockscore(), output);
  }

  // optional int64 gamecount = 19;
  if (has_gamecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->gamecount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_data_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 game_type = 1;
  if (has_game_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_type(), target);
  }

  // optional uint32 win = 2;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->win(), target);
  }

  // optional uint32 lose = 3;
  if (has_lose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lose(), target);
  }

  // optional int64 maxwin = 4;
  if (has_maxwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->maxwin(), target);
  }

  // optional uint32 winc = 5;
  if (has_winc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->winc(), target);
  }

  // optional uint32 losec = 6;
  if (has_losec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->losec(), target);
  }

  // optional int64 maxwinc = 7;
  if (has_maxwinc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->maxwinc(), target);
  }

  // repeated uint32 maxcard = 8;
  for (int i = 0; i < this->maxcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->maxcard(i), target);
  }

  // repeated uint32 maxcardc = 9;
  for (int i = 0; i < this->maxcardc_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(9, this->maxcardc(i), target);
  }

  // optional int64 daywin = 10;
  if (has_daywin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->daywin(), target);
  }

  // optional int64 daywinc = 11;
  if (has_daywinc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->daywinc(), target);
  }

  // optional uint32 land = 12;
  if (has_land()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->land(), target);
  }

  // optional uint32 spring = 13;
  if (has_spring()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->spring(), target);
  }

  // optional uint32 landc = 14;
  if (has_landc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->landc(), target);
  }

  // optional uint32 springc = 15;
  if (has_springc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->springc(), target);
  }

  // optional int64 weekwinc = 16;
  if (has_weekwinc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->weekwinc(), target);
  }

  // optional int64 totalwinc = 17;
  if (has_totalwinc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->totalwinc(), target);
  }

  // optional int64 stockscore = 18;
  if (has_stockscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->stockscore(), target);
  }

  // optional int64 gamecount = 19;
  if (has_gamecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->gamecount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_data_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 game_type = 1;
    if (has_game_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_type());
    }

    // optional uint32 win = 2;
    if (has_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win());
    }

    // optional uint32 lose = 3;
    if (has_lose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lose());
    }

    // optional int64 maxwin = 4;
    if (has_maxwin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->maxwin());
    }

    // optional uint32 winc = 5;
    if (has_winc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winc());
    }

    // optional uint32 losec = 6;
    if (has_losec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->losec());
    }

    // optional int64 maxwinc = 7;
    if (has_maxwinc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->maxwinc());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int64 daywin = 10;
    if (has_daywin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->daywin());
    }

    // optional int64 daywinc = 11;
    if (has_daywinc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->daywinc());
    }

    // optional uint32 land = 12;
    if (has_land()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->land());
    }

    // optional uint32 spring = 13;
    if (has_spring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spring());
    }

    // optional uint32 landc = 14;
    if (has_landc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->landc());
    }

    // optional uint32 springc = 15;
    if (has_springc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->springc());
    }

    // optional int64 weekwinc = 16;
    if (has_weekwinc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->weekwinc());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int64 totalwinc = 17;
    if (has_totalwinc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->totalwinc());
    }

    // optional int64 stockscore = 18;
    if (has_stockscore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->stockscore());
    }

    // optional int64 gamecount = 19;
    if (has_gamecount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gamecount());
    }

  }
  // repeated uint32 maxcard = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->maxcard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->maxcard(i));
    }
    total_size += 1 * this->maxcard_size() + data_size;
  }

  // repeated uint32 maxcardc = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->maxcardc_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->maxcardc(i));
    }
    total_size += 1 * this->maxcardc_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_data_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_data_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_data_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_data_info::MergeFrom(const game_data_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  maxcard_.MergeFrom(from.maxcard_);
  maxcardc_.MergeFrom(from.maxcardc_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_type()) {
      set_game_type(from.game_type());
    }
    if (from.has_win()) {
      set_win(from.win());
    }
    if (from.has_lose()) {
      set_lose(from.lose());
    }
    if (from.has_maxwin()) {
      set_maxwin(from.maxwin());
    }
    if (from.has_winc()) {
      set_winc(from.winc());
    }
    if (from.has_losec()) {
      set_losec(from.losec());
    }
    if (from.has_maxwinc()) {
      set_maxwinc(from.maxwinc());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_daywin()) {
      set_daywin(from.daywin());
    }
    if (from.has_daywinc()) {
      set_daywinc(from.daywinc());
    }
    if (from.has_land()) {
      set_land(from.land());
    }
    if (from.has_spring()) {
      set_spring(from.spring());
    }
    if (from.has_landc()) {
      set_landc(from.landc());
    }
    if (from.has_springc()) {
      set_springc(from.springc());
    }
    if (from.has_weekwinc()) {
      set_weekwinc(from.weekwinc());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_totalwinc()) {
      set_totalwinc(from.totalwinc());
    }
    if (from.has_stockscore()) {
      set_stockscore(from.stockscore());
    }
    if (from.has_gamecount()) {
      set_gamecount(from.gamecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_data_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_data_info::CopyFrom(const game_data_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_data_info::IsInitialized() const {

  return true;
}

void game_data_info::Swap(game_data_info* other) {
  if (other != this) {
    std::swap(game_type_, other->game_type_);
    std::swap(win_, other->win_);
    std::swap(lose_, other->lose_);
    std::swap(maxwin_, other->maxwin_);
    std::swap(winc_, other->winc_);
    std::swap(losec_, other->losec_);
    std::swap(maxwinc_, other->maxwinc_);
    maxcard_.Swap(&other->maxcard_);
    maxcardc_.Swap(&other->maxcardc_);
    std::swap(daywin_, other->daywin_);
    std::swap(daywinc_, other->daywinc_);
    std::swap(land_, other->land_);
    std::swap(spring_, other->spring_);
    std::swap(landc_, other->landc_);
    std::swap(springc_, other->springc_);
    std::swap(weekwinc_, other->weekwinc_);
    std::swap(totalwinc_, other->totalwinc_);
    std::swap(stockscore_, other->stockscore_);
    std::swap(gamecount_, other->gamecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_data_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_data_info_descriptor_;
  metadata.reflection = game_data_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int svr_info::kSvridFieldNumber;
const int svr_info::kStateFieldNumber;
const int svr_info::kGameTypeFieldNumber;
const int svr_info::kGameSubtypeFieldNumber;
#endif  // !_MSC_VER

svr_info::svr_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void svr_info::InitAsDefaultInstance() {
}

svr_info::svr_info(const svr_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void svr_info::SharedCtor() {
  _cached_size_ = 0;
  svrid_ = 0u;
  state_ = 0u;
  game_type_ = 0u;
  game_subtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

svr_info::~svr_info() {
  SharedDtor();
}

void svr_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void svr_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* svr_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return svr_info_descriptor_;
}

const svr_info& svr_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  return *default_instance_;
}

svr_info* svr_info::default_instance_ = NULL;

svr_info* svr_info::New() const {
  return new svr_info;
}

void svr_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    svrid_ = 0u;
    state_ = 0u;
    game_type_ = 0u;
    game_subtype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool svr_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 svrid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svrid_)));
          set_has_svrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional uint32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_game_type;
        break;
      }

      // optional uint32 game_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
          set_has_game_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game_subtype;
        break;
      }

      // optional uint32 game_subtype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_subtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_subtype_)));
          set_has_game_subtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void svr_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 svrid = 1;
  if (has_svrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->svrid(), output);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  // optional uint32 game_type = 3;
  if (has_game_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_type(), output);
  }

  // optional uint32 game_subtype = 4;
  if (has_game_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_subtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* svr_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 svrid = 1;
  if (has_svrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->svrid(), target);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }

  // optional uint32 game_type = 3;
  if (has_game_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_type(), target);
  }

  // optional uint32 game_subtype = 4;
  if (has_game_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_subtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int svr_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 svrid = 1;
    if (has_svrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svrid());
    }

    // optional uint32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional uint32 game_type = 3;
    if (has_game_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_type());
    }

    // optional uint32 game_subtype = 4;
    if (has_game_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_subtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void svr_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const svr_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const svr_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void svr_info::MergeFrom(const svr_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svrid()) {
      set_svrid(from.svrid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_game_type()) {
      set_game_type(from.game_type());
    }
    if (from.has_game_subtype()) {
      set_game_subtype(from.game_subtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void svr_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void svr_info::CopyFrom(const svr_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool svr_info::IsInitialized() const {

  return true;
}

void svr_info::Swap(svr_info* other) {
  if (other != this) {
    std::swap(svrid_, other->svrid_);
    std::swap(state_, other->state_);
    std::swap(game_type_, other->game_type_);
    std::swap(game_subtype_, other->game_subtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata svr_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = svr_info_descriptor_;
  metadata.reflection = svr_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int room_info::kIdFieldNumber;
const int room_info::kConsumeFieldNumber;
const int room_info::kDealFieldNumber;
const int room_info::kEnterMinFieldNumber;
const int room_info::kEnterMaxFieldNumber;
const int room_info::kPlayerNumFieldNumber;
const int room_info::kBasescoreFieldNumber;
const int room_info::kCreateTableFieldNumber;
const int room_info::kShowTypeFieldNumber;
const int room_info::kShowPicFieldNumber;
const int room_info::kJettonMinFieldNumber;
const int room_info::kMaxjettonrateFieldNumber;
const int room_info::kUproomFieldNumber;
const int room_info::kExitchipFieldNumber;
const int room_info::kRoomNameFieldNumber;
#endif  // !_MSC_VER

room_info::room_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void room_info::InitAsDefaultInstance() {
}

room_info::room_info(const room_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void room_info::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  consume_ = 0u;
  deal_ = 0u;
  enter_min_ = GOOGLE_ULONGLONG(0);
  enter_max_ = GOOGLE_ULONGLONG(0);
  player_num_ = 0u;
  basescore_ = 0u;
  create_table_ = 0u;
  show_type_ = 0u;
  show_pic_ = 0u;
  jetton_min_ = GOOGLE_ULONGLONG(0);
  maxjettonrate_ = 0u;
  uproom_ = 0u;
  exitchip_ = 0u;
  room_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

room_info::~room_info() {
  SharedDtor();
}

void room_info::SharedDtor() {
  if (room_name_ != &::google::protobuf::internal::kEmptyString) {
    delete room_name_;
  }
  if (this != default_instance_) {
  }
}

void room_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* room_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return room_info_descriptor_;
}

const room_info& room_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  return *default_instance_;
}

room_info* room_info::default_instance_ = NULL;

room_info* room_info::New() const {
  return new room_info;
}

void room_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    consume_ = 0u;
    deal_ = 0u;
    enter_min_ = GOOGLE_ULONGLONG(0);
    enter_max_ = GOOGLE_ULONGLONG(0);
    player_num_ = 0u;
    basescore_ = 0u;
    create_table_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    show_type_ = 0u;
    show_pic_ = 0u;
    jetton_min_ = GOOGLE_ULONGLONG(0);
    maxjettonrate_ = 0u;
    uproom_ = 0u;
    exitchip_ = 0u;
    if (has_room_name()) {
      if (room_name_ != &::google::protobuf::internal::kEmptyString) {
        room_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool room_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_consume;
        break;
      }

      // optional uint32 consume = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consume_)));
          set_has_consume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_deal;
        break;
      }

      // optional uint32 deal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deal_)));
          set_has_deal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_enter_min;
        break;
      }

      // optional uint64 enter_min = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enter_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enter_min_)));
          set_has_enter_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_enter_max;
        break;
      }

      // optional uint64 enter_max = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enter_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enter_max_)));
          set_has_enter_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_player_num;
        break;
      }

      // optional uint32 player_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_num_)));
          set_has_player_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_basescore;
        break;
      }

      // optional uint32 basescore = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_basescore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &basescore_)));
          set_has_basescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_create_table;
        break;
      }

      // optional uint32 create_table = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_table:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_table_)));
          set_has_create_table();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_show_type;
        break;
      }

      // optional uint32 show_type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &show_type_)));
          set_has_show_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_show_pic;
        break;
      }

      // optional uint32 show_pic = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_pic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &show_pic_)));
          set_has_show_pic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_jetton_min;
        break;
      }

      // optional uint64 jetton_min = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &jetton_min_)));
          set_has_jetton_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_maxjettonrate;
        break;
      }

      // optional uint32 maxjettonrate = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxjettonrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxjettonrate_)));
          set_has_maxjettonrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_uproom;
        break;
      }

      // optional uint32 uproom = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uproom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uproom_)));
          set_has_uproom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_exitchip;
        break;
      }

      // optional uint32 exitchip = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exitchip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exitchip_)));
          set_has_exitchip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_room_name;
        break;
      }

      // optional bytes room_name = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_room_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void room_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 consume = 2;
  if (has_consume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->consume(), output);
  }

  // optional uint32 deal = 3;
  if (has_deal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->deal(), output);
  }

  // optional uint64 enter_min = 4;
  if (has_enter_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->enter_min(), output);
  }

  // optional uint64 enter_max = 5;
  if (has_enter_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->enter_max(), output);
  }

  // optional uint32 player_num = 6;
  if (has_player_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->player_num(), output);
  }

  // optional uint32 basescore = 7;
  if (has_basescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->basescore(), output);
  }

  // optional uint32 create_table = 8;
  if (has_create_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->create_table(), output);
  }

  // optional uint32 show_type = 9;
  if (has_show_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->show_type(), output);
  }

  // optional uint32 show_pic = 10;
  if (has_show_pic()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->show_pic(), output);
  }

  // optional uint64 jetton_min = 11;
  if (has_jetton_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->jetton_min(), output);
  }

  // optional uint32 maxjettonrate = 12;
  if (has_maxjettonrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->maxjettonrate(), output);
  }

  // optional uint32 uproom = 13;
  if (has_uproom()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->uproom(), output);
  }

  // optional uint32 exitchip = 14;
  if (has_exitchip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->exitchip(), output);
  }

  // optional bytes room_name = 15;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      15, this->room_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* room_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 consume = 2;
  if (has_consume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->consume(), target);
  }

  // optional uint32 deal = 3;
  if (has_deal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->deal(), target);
  }

  // optional uint64 enter_min = 4;
  if (has_enter_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->enter_min(), target);
  }

  // optional uint64 enter_max = 5;
  if (has_enter_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->enter_max(), target);
  }

  // optional uint32 player_num = 6;
  if (has_player_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->player_num(), target);
  }

  // optional uint32 basescore = 7;
  if (has_basescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->basescore(), target);
  }

  // optional uint32 create_table = 8;
  if (has_create_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->create_table(), target);
  }

  // optional uint32 show_type = 9;
  if (has_show_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->show_type(), target);
  }

  // optional uint32 show_pic = 10;
  if (has_show_pic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->show_pic(), target);
  }

  // optional uint64 jetton_min = 11;
  if (has_jetton_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->jetton_min(), target);
  }

  // optional uint32 maxjettonrate = 12;
  if (has_maxjettonrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->maxjettonrate(), target);
  }

  // optional uint32 uproom = 13;
  if (has_uproom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->uproom(), target);
  }

  // optional uint32 exitchip = 14;
  if (has_exitchip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->exitchip(), target);
  }

  // optional bytes room_name = 15;
  if (has_room_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->room_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int room_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 consume = 2;
    if (has_consume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consume());
    }

    // optional uint32 deal = 3;
    if (has_deal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deal());
    }

    // optional uint64 enter_min = 4;
    if (has_enter_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->enter_min());
    }

    // optional uint64 enter_max = 5;
    if (has_enter_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->enter_max());
    }

    // optional uint32 player_num = 6;
    if (has_player_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_num());
    }

    // optional uint32 basescore = 7;
    if (has_basescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->basescore());
    }

    // optional uint32 create_table = 8;
    if (has_create_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_table());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 show_type = 9;
    if (has_show_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->show_type());
    }

    // optional uint32 show_pic = 10;
    if (has_show_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->show_pic());
    }

    // optional uint64 jetton_min = 11;
    if (has_jetton_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->jetton_min());
    }

    // optional uint32 maxjettonrate = 12;
    if (has_maxjettonrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxjettonrate());
    }

    // optional uint32 uproom = 13;
    if (has_uproom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uproom());
    }

    // optional uint32 exitchip = 14;
    if (has_exitchip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exitchip());
    }

    // optional bytes room_name = 15;
    if (has_room_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->room_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void room_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const room_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const room_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void room_info::MergeFrom(const room_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_consume()) {
      set_consume(from.consume());
    }
    if (from.has_deal()) {
      set_deal(from.deal());
    }
    if (from.has_enter_min()) {
      set_enter_min(from.enter_min());
    }
    if (from.has_enter_max()) {
      set_enter_max(from.enter_max());
    }
    if (from.has_player_num()) {
      set_player_num(from.player_num());
    }
    if (from.has_basescore()) {
      set_basescore(from.basescore());
    }
    if (from.has_create_table()) {
      set_create_table(from.create_table());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_show_type()) {
      set_show_type(from.show_type());
    }
    if (from.has_show_pic()) {
      set_show_pic(from.show_pic());
    }
    if (from.has_jetton_min()) {
      set_jetton_min(from.jetton_min());
    }
    if (from.has_maxjettonrate()) {
      set_maxjettonrate(from.maxjettonrate());
    }
    if (from.has_uproom()) {
      set_uproom(from.uproom());
    }
    if (from.has_exitchip()) {
      set_exitchip(from.exitchip());
    }
    if (from.has_room_name()) {
      set_room_name(from.room_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void room_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void room_info::CopyFrom(const room_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool room_info::IsInitialized() const {

  return true;
}

void room_info::Swap(room_info* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(consume_, other->consume_);
    std::swap(deal_, other->deal_);
    std::swap(enter_min_, other->enter_min_);
    std::swap(enter_max_, other->enter_max_);
    std::swap(player_num_, other->player_num_);
    std::swap(basescore_, other->basescore_);
    std::swap(create_table_, other->create_table_);
    std::swap(show_type_, other->show_type_);
    std::swap(show_pic_, other->show_pic_);
    std::swap(jetton_min_, other->jetton_min_);
    std::swap(maxjettonrate_, other->maxjettonrate_);
    std::swap(uproom_, other->uproom_);
    std::swap(exitchip_, other->exitchip_);
    std::swap(room_name_, other->room_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata room_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = room_info_descriptor_;
  metadata.reflection = room_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int seat_info::kUidFieldNumber;
const int seat_info::kNameFieldNumber;
const int seat_info::kSexFieldNumber;
const int seat_info::kCoinFieldNumber;
const int seat_info::kScoreFieldNumber;
const int seat_info::kCvalueFieldNumber;
const int seat_info::kChairidFieldNumber;
const int seat_info::kHeadIconFieldNumber;
const int seat_info::kBuyinFieldNumber;
const int seat_info::kCityFieldNumber;
const int seat_info::kWincountFieldNumber;
const int seat_info::kBetscoreFieldNumber;
const int seat_info::kBetcountFieldNumber;
const int seat_info::kShowuidFieldNumber;
#endif  // !_MSC_VER

seat_info::seat_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void seat_info::InitAsDefaultInstance() {
}

seat_info::seat_info(const seat_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void seat_info::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0u;
  coin_ = GOOGLE_LONGLONG(0);
  score_ = GOOGLE_LONGLONG(0);
  cvalue_ = GOOGLE_LONGLONG(0);
  chairid_ = 0u;
  head_icon_ = 0u;
  buyin_ = GOOGLE_LONGLONG(0);
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wincount_ = 0u;
  betscore_ = GOOGLE_LONGLONG(0);
  betcount_ = 0u;
  showuid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

seat_info::~seat_info() {
  SharedDtor();
}

void seat_info::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (this != default_instance_) {
  }
}

void seat_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* seat_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return seat_info_descriptor_;
}

const seat_info& seat_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  return *default_instance_;
}

seat_info* seat_info::default_instance_ = NULL;

seat_info* seat_info::New() const {
  return new seat_info;
}

void seat_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    sex_ = 0u;
    coin_ = GOOGLE_LONGLONG(0);
    score_ = GOOGLE_LONGLONG(0);
    cvalue_ = GOOGLE_LONGLONG(0);
    chairid_ = 0u;
    head_icon_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    buyin_ = GOOGLE_LONGLONG(0);
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::kEmptyString) {
        city_->clear();
      }
    }
    wincount_ = 0u;
    betscore_ = GOOGLE_LONGLONG(0);
    betcount_ = 0u;
    showuid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool seat_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_coin;
        break;
      }

      // optional int64 coin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_score;
        break;
      }

      // optional int64 score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cvalue;
        break;
      }

      // optional int64 cvalue = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cvalue_)));
          set_has_cvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_chairid;
        break;
      }

      // optional uint32 chairid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chairid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_head_icon;
        break;
      }

      // optional uint32 head_icon = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_icon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_icon_)));
          set_has_head_icon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_buyin;
        break;
      }

      // optional int64 buyin = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buyin_)));
          set_has_buyin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_city;
        break;
      }

      // optional bytes city = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_city()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_wincount;
        break;
      }

      // optional uint32 wincount = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wincount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wincount_)));
          set_has_wincount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_betscore;
        break;
      }

      // optional int64 betscore = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_betscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &betscore_)));
          set_has_betscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_betcount;
        break;
      }

      // optional uint32 betcount = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_betcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &betcount_)));
          set_has_betcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_showuid;
        break;
      }

      // optional uint32 showuid = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_showuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &showuid_)));
          set_has_showuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void seat_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional uint32 sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sex(), output);
  }

  // optional int64 coin = 4;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->coin(), output);
  }

  // optional int64 score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->score(), output);
  }

  // optional int64 cvalue = 6;
  if (has_cvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->cvalue(), output);
  }

  // optional uint32 chairid = 7;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->chairid(), output);
  }

  // optional uint32 head_icon = 8;
  if (has_head_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->head_icon(), output);
  }

  // optional int64 buyin = 9;
  if (has_buyin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->buyin(), output);
  }

  // optional bytes city = 10;
  if (has_city()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->city(), output);
  }

  // optional uint32 wincount = 11;
  if (has_wincount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->wincount(), output);
  }

  // optional int64 betscore = 12;
  if (has_betscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->betscore(), output);
  }

  // optional uint32 betcount = 13;
  if (has_betcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->betcount(), output);
  }

  // optional uint32 showuid = 14;
  if (has_showuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->showuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* seat_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional uint32 sex = 3;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sex(), target);
  }

  // optional int64 coin = 4;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->coin(), target);
  }

  // optional int64 score = 5;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->score(), target);
  }

  // optional int64 cvalue = 6;
  if (has_cvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->cvalue(), target);
  }

  // optional uint32 chairid = 7;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->chairid(), target);
  }

  // optional uint32 head_icon = 8;
  if (has_head_icon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->head_icon(), target);
  }

  // optional int64 buyin = 9;
  if (has_buyin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->buyin(), target);
  }

  // optional bytes city = 10;
  if (has_city()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->city(), target);
  }

  // optional uint32 wincount = 11;
  if (has_wincount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->wincount(), target);
  }

  // optional int64 betscore = 12;
  if (has_betscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->betscore(), target);
  }

  // optional uint32 betcount = 13;
  if (has_betcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->betcount(), target);
  }

  // optional uint32 showuid = 14;
  if (has_showuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->showuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int seat_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint32 sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional int64 coin = 4;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->coin());
    }

    // optional int64 score = 5;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->score());
    }

    // optional int64 cvalue = 6;
    if (has_cvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cvalue());
    }

    // optional uint32 chairid = 7;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chairid());
    }

    // optional uint32 head_icon = 8;
    if (has_head_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_icon());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 buyin = 9;
    if (has_buyin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->buyin());
    }

    // optional bytes city = 10;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->city());
    }

    // optional uint32 wincount = 11;
    if (has_wincount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wincount());
    }

    // optional int64 betscore = 12;
    if (has_betscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->betscore());
    }

    // optional uint32 betcount = 13;
    if (has_betcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->betcount());
    }

    // optional uint32 showuid = 14;
    if (has_showuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->showuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void seat_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const seat_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const seat_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void seat_info::MergeFrom(const seat_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_cvalue()) {
      set_cvalue(from.cvalue());
    }
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_head_icon()) {
      set_head_icon(from.head_icon());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_buyin()) {
      set_buyin(from.buyin());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_wincount()) {
      set_wincount(from.wincount());
    }
    if (from.has_betscore()) {
      set_betscore(from.betscore());
    }
    if (from.has_betcount()) {
      set_betcount(from.betcount());
    }
    if (from.has_showuid()) {
      set_showuid(from.showuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void seat_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void seat_info::CopyFrom(const seat_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool seat_info::IsInitialized() const {

  return true;
}

void seat_info::Swap(seat_info* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(coin_, other->coin_);
    std::swap(score_, other->score_);
    std::swap(cvalue_, other->cvalue_);
    std::swap(chairid_, other->chairid_);
    std::swap(head_icon_, other->head_icon_);
    std::swap(buyin_, other->buyin_);
    std::swap(city_, other->city_);
    std::swap(wincount_, other->wincount_);
    std::swap(betscore_, other->betscore_);
    std::swap(betcount_, other->betcount_);
    std::swap(showuid_, other->showuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata seat_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = seat_info_descriptor_;
  metadata.reflection = seat_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int seat_face::kUidFieldNumber;
const int seat_face::kNameFieldNumber;
const int seat_face::kHeadIconFieldNumber;
const int seat_face::kReadyFieldNumber;
const int seat_face::kChairidFieldNumber;
#endif  // !_MSC_VER

seat_face::seat_face()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void seat_face::InitAsDefaultInstance() {
}

seat_face::seat_face(const seat_face& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void seat_face::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_icon_ = 0u;
  ready_ = 0u;
  chairid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

seat_face::~seat_face() {
  SharedDtor();
}

void seat_face::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void seat_face::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* seat_face::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return seat_face_descriptor_;
}

const seat_face& seat_face::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  return *default_instance_;
}

seat_face* seat_face::default_instance_ = NULL;

seat_face* seat_face::New() const {
  return new seat_face;
}

void seat_face::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    head_icon_ = 0u;
    ready_ = 0u;
    chairid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool seat_face::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_head_icon;
        break;
      }

      // optional uint32 head_icon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_icon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_icon_)));
          set_has_head_icon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ready;
        break;
      }

      // optional uint32 ready = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ready_)));
          set_has_ready();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_chairid;
        break;
      }

      // optional uint32 chairid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chairid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void seat_face::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional uint32 head_icon = 3;
  if (has_head_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->head_icon(), output);
  }

  // optional uint32 ready = 4;
  if (has_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ready(), output);
  }

  // optional uint32 chairid = 5;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->chairid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* seat_face::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional uint32 head_icon = 3;
  if (has_head_icon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->head_icon(), target);
  }

  // optional uint32 ready = 4;
  if (has_ready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ready(), target);
  }

  // optional uint32 chairid = 5;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->chairid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int seat_face::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint32 head_icon = 3;
    if (has_head_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_icon());
    }

    // optional uint32 ready = 4;
    if (has_ready()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ready());
    }

    // optional uint32 chairid = 5;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chairid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void seat_face::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const seat_face* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const seat_face*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void seat_face::MergeFrom(const seat_face& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_head_icon()) {
      set_head_icon(from.head_icon());
    }
    if (from.has_ready()) {
      set_ready(from.ready());
    }
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void seat_face::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void seat_face::CopyFrom(const seat_face& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool seat_face::IsInitialized() const {

  return true;
}

void seat_face::Swap(seat_face* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(head_icon_, other->head_icon_);
    std::swap(ready_, other->ready_);
    std::swap(chairid_, other->chairid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata seat_face::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = seat_face_descriptor_;
  metadata.reflection = seat_face_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int looker_info::kUidFieldNumber;
const int looker_info::kNameFieldNumber;
const int looker_info::kHeadIconFieldNumber;
const int looker_info::kSexFieldNumber;
const int looker_info::kScoreFieldNumber;
const int looker_info::kCoinFieldNumber;
const int looker_info::kCityFieldNumber;
const int looker_info::kWincountFieldNumber;
const int looker_info::kBetscoreFieldNumber;
const int looker_info::kBetcountFieldNumber;
#endif  // !_MSC_VER

looker_info::looker_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void looker_info::InitAsDefaultInstance() {
}

looker_info::looker_info(const looker_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void looker_info::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_icon_ = 0u;
  sex_ = 0u;
  score_ = GOOGLE_LONGLONG(0);
  coin_ = GOOGLE_LONGLONG(0);
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wincount_ = 0u;
  betscore_ = GOOGLE_LONGLONG(0);
  betcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

looker_info::~looker_info() {
  SharedDtor();
}

void looker_info::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (this != default_instance_) {
  }
}

void looker_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* looker_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return looker_info_descriptor_;
}

const looker_info& looker_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  return *default_instance_;
}

looker_info* looker_info::default_instance_ = NULL;

looker_info* looker_info::New() const {
  return new looker_info;
}

void looker_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    head_icon_ = 0u;
    sex_ = 0u;
    score_ = GOOGLE_LONGLONG(0);
    coin_ = GOOGLE_LONGLONG(0);
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::kEmptyString) {
        city_->clear();
      }
    }
    wincount_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    betscore_ = GOOGLE_LONGLONG(0);
    betcount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool looker_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_head_icon;
        break;
      }

      // optional uint32 head_icon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_icon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_icon_)));
          set_has_head_icon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_score;
        break;
      }

      // optional int64 score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_coin;
        break;
      }

      // optional int64 coin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_city;
        break;
      }

      // optional bytes city = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_city()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_wincount;
        break;
      }

      // optional uint32 wincount = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wincount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wincount_)));
          set_has_wincount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_betscore;
        break;
      }

      // optional int64 betscore = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_betscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &betscore_)));
          set_has_betscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_betcount;
        break;
      }

      // optional uint32 betcount = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_betcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &betcount_)));
          set_has_betcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void looker_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional uint32 head_icon = 3;
  if (has_head_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->head_icon(), output);
  }

  // optional uint32 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sex(), output);
  }

  // optional int64 score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->score(), output);
  }

  // optional int64 coin = 6;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->coin(), output);
  }

  // optional bytes city = 7;
  if (has_city()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->city(), output);
  }

  // optional uint32 wincount = 8;
  if (has_wincount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->wincount(), output);
  }

  // optional int64 betscore = 9;
  if (has_betscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->betscore(), output);
  }

  // optional uint32 betcount = 10;
  if (has_betcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->betcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* looker_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional uint32 head_icon = 3;
  if (has_head_icon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->head_icon(), target);
  }

  // optional uint32 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sex(), target);
  }

  // optional int64 score = 5;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->score(), target);
  }

  // optional int64 coin = 6;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->coin(), target);
  }

  // optional bytes city = 7;
  if (has_city()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->city(), target);
  }

  // optional uint32 wincount = 8;
  if (has_wincount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->wincount(), target);
  }

  // optional int64 betscore = 9;
  if (has_betscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->betscore(), target);
  }

  // optional uint32 betcount = 10;
  if (has_betcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->betcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int looker_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint32 head_icon = 3;
    if (has_head_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_icon());
    }

    // optional uint32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional int64 score = 5;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->score());
    }

    // optional int64 coin = 6;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->coin());
    }

    // optional bytes city = 7;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->city());
    }

    // optional uint32 wincount = 8;
    if (has_wincount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wincount());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 betscore = 9;
    if (has_betscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->betscore());
    }

    // optional uint32 betcount = 10;
    if (has_betcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->betcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void looker_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const looker_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const looker_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void looker_info::MergeFrom(const looker_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_head_icon()) {
      set_head_icon(from.head_icon());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_wincount()) {
      set_wincount(from.wincount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_betscore()) {
      set_betscore(from.betscore());
    }
    if (from.has_betcount()) {
      set_betcount(from.betcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void looker_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void looker_info::CopyFrom(const looker_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool looker_info::IsInitialized() const {

  return true;
}

void looker_info::Swap(looker_info* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(head_icon_, other->head_icon_);
    std::swap(sex_, other->sex_);
    std::swap(score_, other->score_);
    std::swap(coin_, other->coin_);
    std::swap(city_, other->city_);
    std::swap(wincount_, other->wincount_);
    std::swap(betscore_, other->betscore_);
    std::swap(betcount_, other->betcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata looker_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = looker_info_descriptor_;
  metadata.reflection = looker_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int land_table_info::kTableidFieldNumber;
const int land_table_info::kTablenameFieldNumber;
const int land_table_info::kIsPasswdFieldNumber;
const int land_table_info::kDealFieldNumber;
const int land_table_info::kBasescoreFieldNumber;
const int land_table_info::kConsumeFieldNumber;
const int land_table_info::kEnterminFieldNumber;
const int land_table_info::kDuetimeFieldNumber;
const int land_table_info::kFeetypeFieldNumber;
const int land_table_info::kFeevalueFieldNumber;
const int land_table_info::kHostnameFieldNumber;
const int land_table_info::kShowHandNumFieldNumber;
const int land_table_info::kCallTimeFieldNumber;
const int land_table_info::kCardTimeFieldNumber;
#endif  // !_MSC_VER

land_table_info::land_table_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void land_table_info::InitAsDefaultInstance() {
}

land_table_info::land_table_info(const land_table_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void land_table_info::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0u;
  tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_passwd_ = 0u;
  deal_ = 0u;
  basescore_ = GOOGLE_LONGLONG(0);
  consume_ = 0u;
  entermin_ = GOOGLE_ULONGLONG(0);
  duetime_ = 0u;
  feetype_ = 0u;
  feevalue_ = GOOGLE_LONGLONG(0);
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  show_hand_num_ = 0u;
  call_time_ = 0u;
  card_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

land_table_info::~land_table_info() {
  SharedDtor();
}

void land_table_info::SharedDtor() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (this != default_instance_) {
  }
}

void land_table_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* land_table_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return land_table_info_descriptor_;
}

const land_table_info& land_table_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  return *default_instance_;
}

land_table_info* land_table_info::default_instance_ = NULL;

land_table_info* land_table_info::New() const {
  return new land_table_info;
}

void land_table_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0u;
    if (has_tablename()) {
      if (tablename_ != &::google::protobuf::internal::kEmptyString) {
        tablename_->clear();
      }
    }
    is_passwd_ = 0u;
    deal_ = 0u;
    basescore_ = GOOGLE_LONGLONG(0);
    consume_ = 0u;
    entermin_ = GOOGLE_ULONGLONG(0);
    duetime_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    feetype_ = 0u;
    feevalue_ = GOOGLE_LONGLONG(0);
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    show_hand_num_ = 0u;
    call_time_ = 0u;
    card_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool land_table_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tablename;
        break;
      }

      // optional bytes tablename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tablename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tablename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_passwd;
        break;
      }

      // optional uint32 is_passwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_passwd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_passwd_)));
          set_has_is_passwd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_deal;
        break;
      }

      // optional uint32 deal = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deal_)));
          set_has_deal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_basescore;
        break;
      }

      // optional int64 basescore = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_basescore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &basescore_)));
          set_has_basescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_consume;
        break;
      }

      // optional uint32 consume = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consume_)));
          set_has_consume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_entermin;
        break;
      }

      // optional uint64 entermin = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entermin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entermin_)));
          set_has_entermin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_duetime;
        break;
      }

      // optional uint32 duetime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duetime_)));
          set_has_duetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_feetype;
        break;
      }

      // optional uint32 feetype = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &feetype_)));
          set_has_feetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_feevalue;
        break;
      }

      // optional int64 feevalue = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feevalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &feevalue_)));
          set_has_feevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_hostname;
        break;
      }

      // optional bytes hostname = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hostname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_show_hand_num;
        break;
      }

      // optional uint32 show_hand_num = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_hand_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &show_hand_num_)));
          set_has_show_hand_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_call_time;
        break;
      }

      // optional uint32 call_time = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_call_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &call_time_)));
          set_has_call_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_card_time;
        break;
      }

      // optional uint32 card_time = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_time_)));
          set_has_card_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void land_table_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tableid(), output);
  }

  // optional bytes tablename = 2;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->tablename(), output);
  }

  // optional uint32 is_passwd = 3;
  if (has_is_passwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->is_passwd(), output);
  }

  // optional uint32 deal = 4;
  if (has_deal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->deal(), output);
  }

  // optional int64 basescore = 5;
  if (has_basescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->basescore(), output);
  }

  // optional uint32 consume = 6;
  if (has_consume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->consume(), output);
  }

  // optional uint64 entermin = 7;
  if (has_entermin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->entermin(), output);
  }

  // optional uint32 duetime = 8;
  if (has_duetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->duetime(), output);
  }

  // optional uint32 feetype = 9;
  if (has_feetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->feetype(), output);
  }

  // optional int64 feevalue = 10;
  if (has_feevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->feevalue(), output);
  }

  // optional bytes hostname = 11;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->hostname(), output);
  }

  // optional uint32 show_hand_num = 12;
  if (has_show_hand_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->show_hand_num(), output);
  }

  // optional uint32 call_time = 13;
  if (has_call_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->call_time(), output);
  }

  // optional uint32 card_time = 14;
  if (has_card_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->card_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* land_table_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tableid(), target);
  }

  // optional bytes tablename = 2;
  if (has_tablename()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->tablename(), target);
  }

  // optional uint32 is_passwd = 3;
  if (has_is_passwd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->is_passwd(), target);
  }

  // optional uint32 deal = 4;
  if (has_deal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->deal(), target);
  }

  // optional int64 basescore = 5;
  if (has_basescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->basescore(), target);
  }

  // optional uint32 consume = 6;
  if (has_consume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->consume(), target);
  }

  // optional uint64 entermin = 7;
  if (has_entermin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->entermin(), target);
  }

  // optional uint32 duetime = 8;
  if (has_duetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->duetime(), target);
  }

  // optional uint32 feetype = 9;
  if (has_feetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->feetype(), target);
  }

  // optional int64 feevalue = 10;
  if (has_feevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->feevalue(), target);
  }

  // optional bytes hostname = 11;
  if (has_hostname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->hostname(), target);
  }

  // optional uint32 show_hand_num = 12;
  if (has_show_hand_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->show_hand_num(), target);
  }

  // optional uint32 call_time = 13;
  if (has_call_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->call_time(), target);
  }

  // optional uint32 card_time = 14;
  if (has_card_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->card_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int land_table_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tableid());
    }

    // optional bytes tablename = 2;
    if (has_tablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tablename());
    }

    // optional uint32 is_passwd = 3;
    if (has_is_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_passwd());
    }

    // optional uint32 deal = 4;
    if (has_deal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deal());
    }

    // optional int64 basescore = 5;
    if (has_basescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->basescore());
    }

    // optional uint32 consume = 6;
    if (has_consume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consume());
    }

    // optional uint64 entermin = 7;
    if (has_entermin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entermin());
    }

    // optional uint32 duetime = 8;
    if (has_duetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duetime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 feetype = 9;
    if (has_feetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->feetype());
    }

    // optional int64 feevalue = 10;
    if (has_feevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->feevalue());
    }

    // optional bytes hostname = 11;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hostname());
    }

    // optional uint32 show_hand_num = 12;
    if (has_show_hand_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->show_hand_num());
    }

    // optional uint32 call_time = 13;
    if (has_call_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->call_time());
    }

    // optional uint32 card_time = 14;
    if (has_card_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void land_table_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const land_table_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const land_table_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void land_table_info::MergeFrom(const land_table_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_tablename()) {
      set_tablename(from.tablename());
    }
    if (from.has_is_passwd()) {
      set_is_passwd(from.is_passwd());
    }
    if (from.has_deal()) {
      set_deal(from.deal());
    }
    if (from.has_basescore()) {
      set_basescore(from.basescore());
    }
    if (from.has_consume()) {
      set_consume(from.consume());
    }
    if (from.has_entermin()) {
      set_entermin(from.entermin());
    }
    if (from.has_duetime()) {
      set_duetime(from.duetime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_feetype()) {
      set_feetype(from.feetype());
    }
    if (from.has_feevalue()) {
      set_feevalue(from.feevalue());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_show_hand_num()) {
      set_show_hand_num(from.show_hand_num());
    }
    if (from.has_call_time()) {
      set_call_time(from.call_time());
    }
    if (from.has_card_time()) {
      set_card_time(from.card_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void land_table_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void land_table_info::CopyFrom(const land_table_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool land_table_info::IsInitialized() const {

  return true;
}

void land_table_info::Swap(land_table_info* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(tablename_, other->tablename_);
    std::swap(is_passwd_, other->is_passwd_);
    std::swap(deal_, other->deal_);
    std::swap(basescore_, other->basescore_);
    std::swap(consume_, other->consume_);
    std::swap(entermin_, other->entermin_);
    std::swap(duetime_, other->duetime_);
    std::swap(feetype_, other->feetype_);
    std::swap(feevalue_, other->feevalue_);
    std::swap(hostname_, other->hostname_);
    std::swap(show_hand_num_, other->show_hand_num_);
    std::swap(call_time_, other->call_time_);
    std::swap(card_time_, other->card_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata land_table_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = land_table_info_descriptor_;
  metadata.reflection = land_table_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int showhand_table_info::kTableidFieldNumber;
const int showhand_table_info::kTablenameFieldNumber;
const int showhand_table_info::kIsPasswdFieldNumber;
const int showhand_table_info::kBasescoreFieldNumber;
const int showhand_table_info::kConsumeFieldNumber;
const int showhand_table_info::kEnterminFieldNumber;
const int showhand_table_info::kDuetimeFieldNumber;
const int showhand_table_info::kFeetypeFieldNumber;
const int showhand_table_info::kFeevalueFieldNumber;
const int showhand_table_info::kHostnameFieldNumber;
const int showhand_table_info::kCardTimeFieldNumber;
const int showhand_table_info::kTableStateFieldNumber;
const int showhand_table_info::kPlayersFieldNumber;
#endif  // !_MSC_VER

showhand_table_info::showhand_table_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void showhand_table_info::InitAsDefaultInstance() {
}

showhand_table_info::showhand_table_info(const showhand_table_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void showhand_table_info::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0u;
  tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_passwd_ = 0u;
  basescore_ = GOOGLE_LONGLONG(0);
  consume_ = 0u;
  entermin_ = GOOGLE_ULONGLONG(0);
  duetime_ = 0u;
  feetype_ = 0u;
  feevalue_ = GOOGLE_LONGLONG(0);
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  card_time_ = 0u;
  table_state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

showhand_table_info::~showhand_table_info() {
  SharedDtor();
}

void showhand_table_info::SharedDtor() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (this != default_instance_) {
  }
}

void showhand_table_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* showhand_table_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return showhand_table_info_descriptor_;
}

const showhand_table_info& showhand_table_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  return *default_instance_;
}

showhand_table_info* showhand_table_info::default_instance_ = NULL;

showhand_table_info* showhand_table_info::New() const {
  return new showhand_table_info;
}

void showhand_table_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0u;
    if (has_tablename()) {
      if (tablename_ != &::google::protobuf::internal::kEmptyString) {
        tablename_->clear();
      }
    }
    is_passwd_ = 0u;
    basescore_ = GOOGLE_LONGLONG(0);
    consume_ = 0u;
    entermin_ = GOOGLE_ULONGLONG(0);
    duetime_ = 0u;
    feetype_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    feevalue_ = GOOGLE_LONGLONG(0);
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    card_time_ = 0u;
    table_state_ = 0u;
  }
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool showhand_table_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tablename;
        break;
      }

      // optional bytes tablename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tablename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tablename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_passwd;
        break;
      }

      // optional uint32 is_passwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_passwd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_passwd_)));
          set_has_is_passwd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_basescore;
        break;
      }

      // optional int64 basescore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_basescore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &basescore_)));
          set_has_basescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_consume;
        break;
      }

      // optional uint32 consume = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consume_)));
          set_has_consume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_entermin;
        break;
      }

      // optional uint64 entermin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entermin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entermin_)));
          set_has_entermin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_duetime;
        break;
      }

      // optional uint32 duetime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duetime_)));
          set_has_duetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_feetype;
        break;
      }

      // optional uint32 feetype = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &feetype_)));
          set_has_feetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_feevalue;
        break;
      }

      // optional int64 feevalue = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feevalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &feevalue_)));
          set_has_feevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_hostname;
        break;
      }

      // optional bytes hostname = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hostname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_card_time;
        break;
      }

      // optional uint32 card_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_time_)));
          set_has_card_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_table_state;
        break;
      }

      // optional uint32 table_state = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_state_)));
          set_has_table_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_players;
        break;
      }

      // repeated .net.seat_face players = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void showhand_table_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tableid(), output);
  }

  // optional bytes tablename = 2;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->tablename(), output);
  }

  // optional uint32 is_passwd = 3;
  if (has_is_passwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->is_passwd(), output);
  }

  // optional int64 basescore = 4;
  if (has_basescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->basescore(), output);
  }

  // optional uint32 consume = 5;
  if (has_consume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->consume(), output);
  }

  // optional uint64 entermin = 6;
  if (has_entermin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->entermin(), output);
  }

  // optional uint32 duetime = 7;
  if (has_duetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->duetime(), output);
  }

  // optional uint32 feetype = 8;
  if (has_feetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->feetype(), output);
  }

  // optional int64 feevalue = 9;
  if (has_feevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->feevalue(), output);
  }

  // optional bytes hostname = 10;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->hostname(), output);
  }

  // optional uint32 card_time = 11;
  if (has_card_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->card_time(), output);
  }

  // optional uint32 table_state = 12;
  if (has_table_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->table_state(), output);
  }

  // repeated .net.seat_face players = 13;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->players(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* showhand_table_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tableid(), target);
  }

  // optional bytes tablename = 2;
  if (has_tablename()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->tablename(), target);
  }

  // optional uint32 is_passwd = 3;
  if (has_is_passwd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->is_passwd(), target);
  }

  // optional int64 basescore = 4;
  if (has_basescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->basescore(), target);
  }

  // optional uint32 consume = 5;
  if (has_consume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->consume(), target);
  }

  // optional uint64 entermin = 6;
  if (has_entermin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->entermin(), target);
  }

  // optional uint32 duetime = 7;
  if (has_duetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->duetime(), target);
  }

  // optional uint32 feetype = 8;
  if (has_feetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->feetype(), target);
  }

  // optional int64 feevalue = 9;
  if (has_feevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->feevalue(), target);
  }

  // optional bytes hostname = 10;
  if (has_hostname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->hostname(), target);
  }

  // optional uint32 card_time = 11;
  if (has_card_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->card_time(), target);
  }

  // optional uint32 table_state = 12;
  if (has_table_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->table_state(), target);
  }

  // repeated .net.seat_face players = 13;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->players(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int showhand_table_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tableid());
    }

    // optional bytes tablename = 2;
    if (has_tablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tablename());
    }

    // optional uint32 is_passwd = 3;
    if (has_is_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_passwd());
    }

    // optional int64 basescore = 4;
    if (has_basescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->basescore());
    }

    // optional uint32 consume = 5;
    if (has_consume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consume());
    }

    // optional uint64 entermin = 6;
    if (has_entermin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entermin());
    }

    // optional uint32 duetime = 7;
    if (has_duetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duetime());
    }

    // optional uint32 feetype = 8;
    if (has_feetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->feetype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 feevalue = 9;
    if (has_feevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->feevalue());
    }

    // optional bytes hostname = 10;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hostname());
    }

    // optional uint32 card_time = 11;
    if (has_card_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card_time());
    }

    // optional uint32 table_state = 12;
    if (has_table_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_state());
    }

  }
  // repeated .net.seat_face players = 13;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void showhand_table_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const showhand_table_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const showhand_table_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void showhand_table_info::MergeFrom(const showhand_table_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_tablename()) {
      set_tablename(from.tablename());
    }
    if (from.has_is_passwd()) {
      set_is_passwd(from.is_passwd());
    }
    if (from.has_basescore()) {
      set_basescore(from.basescore());
    }
    if (from.has_consume()) {
      set_consume(from.consume());
    }
    if (from.has_entermin()) {
      set_entermin(from.entermin());
    }
    if (from.has_duetime()) {
      set_duetime(from.duetime());
    }
    if (from.has_feetype()) {
      set_feetype(from.feetype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_feevalue()) {
      set_feevalue(from.feevalue());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_card_time()) {
      set_card_time(from.card_time());
    }
    if (from.has_table_state()) {
      set_table_state(from.table_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void showhand_table_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void showhand_table_info::CopyFrom(const showhand_table_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool showhand_table_info::IsInitialized() const {

  return true;
}

void showhand_table_info::Swap(showhand_table_info* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(tablename_, other->tablename_);
    std::swap(is_passwd_, other->is_passwd_);
    std::swap(basescore_, other->basescore_);
    std::swap(consume_, other->consume_);
    std::swap(entermin_, other->entermin_);
    std::swap(duetime_, other->duetime_);
    std::swap(feetype_, other->feetype_);
    std::swap(feevalue_, other->feevalue_);
    std::swap(hostname_, other->hostname_);
    std::swap(card_time_, other->card_time_);
    std::swap(table_state_, other->table_state_);
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata showhand_table_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = showhand_table_info_descriptor_;
  metadata.reflection = showhand_table_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int bainiu_table_info::kTableidFieldNumber;
const int bainiu_table_info::kTablenameFieldNumber;
const int bainiu_table_info::kIsPasswdFieldNumber;
const int bainiu_table_info::kBasescoreFieldNumber;
const int bainiu_table_info::kConsumeFieldNumber;
const int bainiu_table_info::kEnterminFieldNumber;
const int bainiu_table_info::kDuetimeFieldNumber;
const int bainiu_table_info::kFeetypeFieldNumber;
const int bainiu_table_info::kFeevalueFieldNumber;
const int bainiu_table_info::kHostnameFieldNumber;
const int bainiu_table_info::kCardTimeFieldNumber;
const int bainiu_table_info::kTableStateFieldNumber;
const int bainiu_table_info::kSitdownFieldNumber;
const int bainiu_table_info::kApplyBankerConditionFieldNumber;
const int bainiu_table_info::kApplyBankerMaxscoreFieldNumber;
const int bainiu_table_info::kBankerMaxTimeFieldNumber;
const int bainiu_table_info::kMaxJettonRateFieldNumber;
#endif  // !_MSC_VER

bainiu_table_info::bainiu_table_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void bainiu_table_info::InitAsDefaultInstance() {
}

bainiu_table_info::bainiu_table_info(const bainiu_table_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void bainiu_table_info::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0u;
  tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_passwd_ = 0u;
  basescore_ = GOOGLE_LONGLONG(0);
  consume_ = 0u;
  entermin_ = GOOGLE_ULONGLONG(0);
  duetime_ = 0u;
  feetype_ = 0u;
  feevalue_ = GOOGLE_LONGLONG(0);
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  card_time_ = 0u;
  table_state_ = 0u;
  sitdown_ = GOOGLE_LONGLONG(0);
  apply_banker_condition_ = GOOGLE_LONGLONG(0);
  apply_banker_maxscore_ = GOOGLE_LONGLONG(0);
  banker_max_time_ = 0u;
  max_jetton_rate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bainiu_table_info::~bainiu_table_info() {
  SharedDtor();
}

void bainiu_table_info::SharedDtor() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (this != default_instance_) {
  }
}

void bainiu_table_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bainiu_table_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return bainiu_table_info_descriptor_;
}

const bainiu_table_info& bainiu_table_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  return *default_instance_;
}

bainiu_table_info* bainiu_table_info::default_instance_ = NULL;

bainiu_table_info* bainiu_table_info::New() const {
  return new bainiu_table_info;
}

void bainiu_table_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0u;
    if (has_tablename()) {
      if (tablename_ != &::google::protobuf::internal::kEmptyString) {
        tablename_->clear();
      }
    }
    is_passwd_ = 0u;
    basescore_ = GOOGLE_LONGLONG(0);
    consume_ = 0u;
    entermin_ = GOOGLE_ULONGLONG(0);
    duetime_ = 0u;
    feetype_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    feevalue_ = GOOGLE_LONGLONG(0);
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    card_time_ = 0u;
    table_state_ = 0u;
    sitdown_ = GOOGLE_LONGLONG(0);
    apply_banker_condition_ = GOOGLE_LONGLONG(0);
    apply_banker_maxscore_ = GOOGLE_LONGLONG(0);
    banker_max_time_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    max_jetton_rate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool bainiu_table_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tablename;
        break;
      }

      // optional bytes tablename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tablename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tablename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_passwd;
        break;
      }

      // optional uint32 is_passwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_passwd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_passwd_)));
          set_has_is_passwd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_basescore;
        break;
      }

      // optional int64 basescore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_basescore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &basescore_)));
          set_has_basescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_consume;
        break;
      }

      // optional uint32 consume = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consume_)));
          set_has_consume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_entermin;
        break;
      }

      // optional uint64 entermin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entermin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entermin_)));
          set_has_entermin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_duetime;
        break;
      }

      // optional uint32 duetime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duetime_)));
          set_has_duetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_feetype;
        break;
      }

      // optional uint32 feetype = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &feetype_)));
          set_has_feetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_feevalue;
        break;
      }

      // optional int64 feevalue = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feevalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &feevalue_)));
          set_has_feevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_hostname;
        break;
      }

      // optional bytes hostname = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hostname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_card_time;
        break;
      }

      // optional uint32 card_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_time_)));
          set_has_card_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_table_state;
        break;
      }

      // optional uint32 table_state = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_state_)));
          set_has_table_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_sitdown;
        break;
      }

      // optional int64 sitdown = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sitdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sitdown_)));
          set_has_sitdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_apply_banker_condition;
        break;
      }

      // optional int64 apply_banker_condition = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_banker_condition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &apply_banker_condition_)));
          set_has_apply_banker_condition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_apply_banker_maxscore;
        break;
      }

      // optional int64 apply_banker_maxscore = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_banker_maxscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &apply_banker_maxscore_)));
          set_has_apply_banker_maxscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_banker_max_time;
        break;
      }

      // optional uint32 banker_max_time = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_max_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &banker_max_time_)));
          set_has_banker_max_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_max_jetton_rate;
        break;
      }

      // optional uint32 max_jetton_rate = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_jetton_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_jetton_rate_)));
          set_has_max_jetton_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void bainiu_table_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tableid(), output);
  }

  // optional bytes tablename = 2;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->tablename(), output);
  }

  // optional uint32 is_passwd = 3;
  if (has_is_passwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->is_passwd(), output);
  }

  // optional int64 basescore = 4;
  if (has_basescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->basescore(), output);
  }

  // optional uint32 consume = 5;
  if (has_consume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->consume(), output);
  }

  // optional uint64 entermin = 6;
  if (has_entermin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->entermin(), output);
  }

  // optional uint32 duetime = 7;
  if (has_duetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->duetime(), output);
  }

  // optional uint32 feetype = 8;
  if (has_feetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->feetype(), output);
  }

  // optional int64 feevalue = 9;
  if (has_feevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->feevalue(), output);
  }

  // optional bytes hostname = 10;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->hostname(), output);
  }

  // optional uint32 card_time = 11;
  if (has_card_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->card_time(), output);
  }

  // optional uint32 table_state = 12;
  if (has_table_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->table_state(), output);
  }

  // optional int64 sitdown = 13;
  if (has_sitdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->sitdown(), output);
  }

  // optional int64 apply_banker_condition = 14;
  if (has_apply_banker_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->apply_banker_condition(), output);
  }

  // optional int64 apply_banker_maxscore = 15;
  if (has_apply_banker_maxscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->apply_banker_maxscore(), output);
  }

  // optional uint32 banker_max_time = 16;
  if (has_banker_max_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->banker_max_time(), output);
  }

  // optional uint32 max_jetton_rate = 17;
  if (has_max_jetton_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->max_jetton_rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* bainiu_table_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tableid(), target);
  }

  // optional bytes tablename = 2;
  if (has_tablename()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->tablename(), target);
  }

  // optional uint32 is_passwd = 3;
  if (has_is_passwd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->is_passwd(), target);
  }

  // optional int64 basescore = 4;
  if (has_basescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->basescore(), target);
  }

  // optional uint32 consume = 5;
  if (has_consume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->consume(), target);
  }

  // optional uint64 entermin = 6;
  if (has_entermin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->entermin(), target);
  }

  // optional uint32 duetime = 7;
  if (has_duetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->duetime(), target);
  }

  // optional uint32 feetype = 8;
  if (has_feetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->feetype(), target);
  }

  // optional int64 feevalue = 9;
  if (has_feevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->feevalue(), target);
  }

  // optional bytes hostname = 10;
  if (has_hostname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->hostname(), target);
  }

  // optional uint32 card_time = 11;
  if (has_card_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->card_time(), target);
  }

  // optional uint32 table_state = 12;
  if (has_table_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->table_state(), target);
  }

  // optional int64 sitdown = 13;
  if (has_sitdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->sitdown(), target);
  }

  // optional int64 apply_banker_condition = 14;
  if (has_apply_banker_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->apply_banker_condition(), target);
  }

  // optional int64 apply_banker_maxscore = 15;
  if (has_apply_banker_maxscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->apply_banker_maxscore(), target);
  }

  // optional uint32 banker_max_time = 16;
  if (has_banker_max_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->banker_max_time(), target);
  }

  // optional uint32 max_jetton_rate = 17;
  if (has_max_jetton_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->max_jetton_rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int bainiu_table_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tableid());
    }

    // optional bytes tablename = 2;
    if (has_tablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tablename());
    }

    // optional uint32 is_passwd = 3;
    if (has_is_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_passwd());
    }

    // optional int64 basescore = 4;
    if (has_basescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->basescore());
    }

    // optional uint32 consume = 5;
    if (has_consume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consume());
    }

    // optional uint64 entermin = 6;
    if (has_entermin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entermin());
    }

    // optional uint32 duetime = 7;
    if (has_duetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duetime());
    }

    // optional uint32 feetype = 8;
    if (has_feetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->feetype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 feevalue = 9;
    if (has_feevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->feevalue());
    }

    // optional bytes hostname = 10;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hostname());
    }

    // optional uint32 card_time = 11;
    if (has_card_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card_time());
    }

    // optional uint32 table_state = 12;
    if (has_table_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_state());
    }

    // optional int64 sitdown = 13;
    if (has_sitdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sitdown());
    }

    // optional int64 apply_banker_condition = 14;
    if (has_apply_banker_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->apply_banker_condition());
    }

    // optional int64 apply_banker_maxscore = 15;
    if (has_apply_banker_maxscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->apply_banker_maxscore());
    }

    // optional uint32 banker_max_time = 16;
    if (has_banker_max_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->banker_max_time());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 max_jetton_rate = 17;
    if (has_max_jetton_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_jetton_rate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bainiu_table_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const bainiu_table_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const bainiu_table_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void bainiu_table_info::MergeFrom(const bainiu_table_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_tablename()) {
      set_tablename(from.tablename());
    }
    if (from.has_is_passwd()) {
      set_is_passwd(from.is_passwd());
    }
    if (from.has_basescore()) {
      set_basescore(from.basescore());
    }
    if (from.has_consume()) {
      set_consume(from.consume());
    }
    if (from.has_entermin()) {
      set_entermin(from.entermin());
    }
    if (from.has_duetime()) {
      set_duetime(from.duetime());
    }
    if (from.has_feetype()) {
      set_feetype(from.feetype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_feevalue()) {
      set_feevalue(from.feevalue());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_card_time()) {
      set_card_time(from.card_time());
    }
    if (from.has_table_state()) {
      set_table_state(from.table_state());
    }
    if (from.has_sitdown()) {
      set_sitdown(from.sitdown());
    }
    if (from.has_apply_banker_condition()) {
      set_apply_banker_condition(from.apply_banker_condition());
    }
    if (from.has_apply_banker_maxscore()) {
      set_apply_banker_maxscore(from.apply_banker_maxscore());
    }
    if (from.has_banker_max_time()) {
      set_banker_max_time(from.banker_max_time());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_max_jetton_rate()) {
      set_max_jetton_rate(from.max_jetton_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void bainiu_table_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bainiu_table_info::CopyFrom(const bainiu_table_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bainiu_table_info::IsInitialized() const {

  return true;
}

void bainiu_table_info::Swap(bainiu_table_info* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(tablename_, other->tablename_);
    std::swap(is_passwd_, other->is_passwd_);
    std::swap(basescore_, other->basescore_);
    std::swap(consume_, other->consume_);
    std::swap(entermin_, other->entermin_);
    std::swap(duetime_, other->duetime_);
    std::swap(feetype_, other->feetype_);
    std::swap(feevalue_, other->feevalue_);
    std::swap(hostname_, other->hostname_);
    std::swap(card_time_, other->card_time_);
    std::swap(table_state_, other->table_state_);
    std::swap(sitdown_, other->sitdown_);
    std::swap(apply_banker_condition_, other->apply_banker_condition_);
    std::swap(apply_banker_maxscore_, other->apply_banker_maxscore_);
    std::swap(banker_max_time_, other->banker_max_time_);
    std::swap(max_jetton_rate_, other->max_jetton_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata bainiu_table_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = bainiu_table_info_descriptor_;
  metadata.reflection = bainiu_table_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int texas_table_info::kTableidFieldNumber;
const int texas_table_info::kTablenameFieldNumber;
const int texas_table_info::kIsPasswdFieldNumber;
const int texas_table_info::kBasescoreFieldNumber;
const int texas_table_info::kConsumeFieldNumber;
const int texas_table_info::kEnterminFieldNumber;
const int texas_table_info::kDuetimeFieldNumber;
const int texas_table_info::kFeetypeFieldNumber;
const int texas_table_info::kFeevalueFieldNumber;
const int texas_table_info::kHostnameFieldNumber;
const int texas_table_info::kCardTimeFieldNumber;
const int texas_table_info::kTableStateFieldNumber;
const int texas_table_info::kSitdownFieldNumber;
const int texas_table_info::kPlayerNumFieldNumber;
#endif  // !_MSC_VER

texas_table_info::texas_table_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void texas_table_info::InitAsDefaultInstance() {
}

texas_table_info::texas_table_info(const texas_table_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void texas_table_info::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0u;
  tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_passwd_ = 0u;
  basescore_ = GOOGLE_LONGLONG(0);
  consume_ = 0u;
  entermin_ = GOOGLE_ULONGLONG(0);
  duetime_ = 0u;
  feetype_ = 0u;
  feevalue_ = GOOGLE_LONGLONG(0);
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  card_time_ = 0u;
  table_state_ = 0u;
  sitdown_ = GOOGLE_LONGLONG(0);
  player_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

texas_table_info::~texas_table_info() {
  SharedDtor();
}

void texas_table_info::SharedDtor() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (this != default_instance_) {
  }
}

void texas_table_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* texas_table_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return texas_table_info_descriptor_;
}

const texas_table_info& texas_table_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  return *default_instance_;
}

texas_table_info* texas_table_info::default_instance_ = NULL;

texas_table_info* texas_table_info::New() const {
  return new texas_table_info;
}

void texas_table_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0u;
    if (has_tablename()) {
      if (tablename_ != &::google::protobuf::internal::kEmptyString) {
        tablename_->clear();
      }
    }
    is_passwd_ = 0u;
    basescore_ = GOOGLE_LONGLONG(0);
    consume_ = 0u;
    entermin_ = GOOGLE_ULONGLONG(0);
    duetime_ = 0u;
    feetype_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    feevalue_ = GOOGLE_LONGLONG(0);
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    card_time_ = 0u;
    table_state_ = 0u;
    sitdown_ = GOOGLE_LONGLONG(0);
    player_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool texas_table_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tablename;
        break;
      }

      // optional bytes tablename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tablename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tablename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_passwd;
        break;
      }

      // optional uint32 is_passwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_passwd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_passwd_)));
          set_has_is_passwd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_basescore;
        break;
      }

      // optional int64 basescore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_basescore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &basescore_)));
          set_has_basescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_consume;
        break;
      }

      // optional uint32 consume = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consume_)));
          set_has_consume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_entermin;
        break;
      }

      // optional uint64 entermin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entermin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entermin_)));
          set_has_entermin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_duetime;
        break;
      }

      // optional uint32 duetime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duetime_)));
          set_has_duetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_feetype;
        break;
      }

      // optional uint32 feetype = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &feetype_)));
          set_has_feetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_feevalue;
        break;
      }

      // optional int64 feevalue = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feevalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &feevalue_)));
          set_has_feevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_hostname;
        break;
      }

      // optional bytes hostname = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hostname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_card_time;
        break;
      }

      // optional uint32 card_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_time_)));
          set_has_card_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_table_state;
        break;
      }

      // optional uint32 table_state = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_state_)));
          set_has_table_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_sitdown;
        break;
      }

      // optional int64 sitdown = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sitdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sitdown_)));
          set_has_sitdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_player_num;
        break;
      }

      // optional uint32 player_num = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_num_)));
          set_has_player_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void texas_table_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tableid(), output);
  }

  // optional bytes tablename = 2;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->tablename(), output);
  }

  // optional uint32 is_passwd = 3;
  if (has_is_passwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->is_passwd(), output);
  }

  // optional int64 basescore = 4;
  if (has_basescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->basescore(), output);
  }

  // optional uint32 consume = 5;
  if (has_consume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->consume(), output);
  }

  // optional uint64 entermin = 6;
  if (has_entermin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->entermin(), output);
  }

  // optional uint32 duetime = 7;
  if (has_duetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->duetime(), output);
  }

  // optional uint32 feetype = 8;
  if (has_feetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->feetype(), output);
  }

  // optional int64 feevalue = 9;
  if (has_feevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->feevalue(), output);
  }

  // optional bytes hostname = 10;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->hostname(), output);
  }

  // optional uint32 card_time = 11;
  if (has_card_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->card_time(), output);
  }

  // optional uint32 table_state = 12;
  if (has_table_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->table_state(), output);
  }

  // optional int64 sitdown = 13;
  if (has_sitdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->sitdown(), output);
  }

  // optional uint32 player_num = 14;
  if (has_player_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->player_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* texas_table_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tableid(), target);
  }

  // optional bytes tablename = 2;
  if (has_tablename()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->tablename(), target);
  }

  // optional uint32 is_passwd = 3;
  if (has_is_passwd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->is_passwd(), target);
  }

  // optional int64 basescore = 4;
  if (has_basescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->basescore(), target);
  }

  // optional uint32 consume = 5;
  if (has_consume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->consume(), target);
  }

  // optional uint64 entermin = 6;
  if (has_entermin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->entermin(), target);
  }

  // optional uint32 duetime = 7;
  if (has_duetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->duetime(), target);
  }

  // optional uint32 feetype = 8;
  if (has_feetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->feetype(), target);
  }

  // optional int64 feevalue = 9;
  if (has_feevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->feevalue(), target);
  }

  // optional bytes hostname = 10;
  if (has_hostname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->hostname(), target);
  }

  // optional uint32 card_time = 11;
  if (has_card_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->card_time(), target);
  }

  // optional uint32 table_state = 12;
  if (has_table_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->table_state(), target);
  }

  // optional int64 sitdown = 13;
  if (has_sitdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->sitdown(), target);
  }

  // optional uint32 player_num = 14;
  if (has_player_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->player_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int texas_table_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tableid());
    }

    // optional bytes tablename = 2;
    if (has_tablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tablename());
    }

    // optional uint32 is_passwd = 3;
    if (has_is_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_passwd());
    }

    // optional int64 basescore = 4;
    if (has_basescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->basescore());
    }

    // optional uint32 consume = 5;
    if (has_consume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consume());
    }

    // optional uint64 entermin = 6;
    if (has_entermin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entermin());
    }

    // optional uint32 duetime = 7;
    if (has_duetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duetime());
    }

    // optional uint32 feetype = 8;
    if (has_feetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->feetype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 feevalue = 9;
    if (has_feevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->feevalue());
    }

    // optional bytes hostname = 10;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hostname());
    }

    // optional uint32 card_time = 11;
    if (has_card_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card_time());
    }

    // optional uint32 table_state = 12;
    if (has_table_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_state());
    }

    // optional int64 sitdown = 13;
    if (has_sitdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sitdown());
    }

    // optional uint32 player_num = 14;
    if (has_player_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void texas_table_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const texas_table_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const texas_table_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void texas_table_info::MergeFrom(const texas_table_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_tablename()) {
      set_tablename(from.tablename());
    }
    if (from.has_is_passwd()) {
      set_is_passwd(from.is_passwd());
    }
    if (from.has_basescore()) {
      set_basescore(from.basescore());
    }
    if (from.has_consume()) {
      set_consume(from.consume());
    }
    if (from.has_entermin()) {
      set_entermin(from.entermin());
    }
    if (from.has_duetime()) {
      set_duetime(from.duetime());
    }
    if (from.has_feetype()) {
      set_feetype(from.feetype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_feevalue()) {
      set_feevalue(from.feevalue());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_card_time()) {
      set_card_time(from.card_time());
    }
    if (from.has_table_state()) {
      set_table_state(from.table_state());
    }
    if (from.has_sitdown()) {
      set_sitdown(from.sitdown());
    }
    if (from.has_player_num()) {
      set_player_num(from.player_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void texas_table_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void texas_table_info::CopyFrom(const texas_table_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool texas_table_info::IsInitialized() const {

  return true;
}

void texas_table_info::Swap(texas_table_info* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(tablename_, other->tablename_);
    std::swap(is_passwd_, other->is_passwd_);
    std::swap(basescore_, other->basescore_);
    std::swap(consume_, other->consume_);
    std::swap(entermin_, other->entermin_);
    std::swap(duetime_, other->duetime_);
    std::swap(feetype_, other->feetype_);
    std::swap(feevalue_, other->feevalue_);
    std::swap(hostname_, other->hostname_);
    std::swap(card_time_, other->card_time_);
    std::swap(table_state_, other->table_state_);
    std::swap(sitdown_, other->sitdown_);
    std::swap(player_num_, other->player_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata texas_table_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = texas_table_info_descriptor_;
  metadata.reflection = texas_table_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int zajinhua_table_info::kTableidFieldNumber;
const int zajinhua_table_info::kTablenameFieldNumber;
const int zajinhua_table_info::kIsPasswdFieldNumber;
const int zajinhua_table_info::kBasescoreFieldNumber;
const int zajinhua_table_info::kConsumeFieldNumber;
const int zajinhua_table_info::kEnterminFieldNumber;
const int zajinhua_table_info::kDuetimeFieldNumber;
const int zajinhua_table_info::kFeetypeFieldNumber;
const int zajinhua_table_info::kFeevalueFieldNumber;
const int zajinhua_table_info::kHostnameFieldNumber;
const int zajinhua_table_info::kCardTimeFieldNumber;
const int zajinhua_table_info::kTableStateFieldNumber;
const int zajinhua_table_info::kCompareRoundFieldNumber;
const int zajinhua_table_info::kLookRoundFieldNumber;
const int zajinhua_table_info::kLimitRoundFieldNumber;
const int zajinhua_table_info::kMingMultipFieldNumber;
const int zajinhua_table_info::kBlindMultipFieldNumber;
#endif  // !_MSC_VER

zajinhua_table_info::zajinhua_table_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void zajinhua_table_info::InitAsDefaultInstance() {
}

zajinhua_table_info::zajinhua_table_info(const zajinhua_table_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void zajinhua_table_info::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0u;
  tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_passwd_ = 0u;
  basescore_ = GOOGLE_LONGLONG(0);
  consume_ = 0u;
  entermin_ = GOOGLE_ULONGLONG(0);
  duetime_ = 0u;
  feetype_ = 0u;
  feevalue_ = GOOGLE_LONGLONG(0);
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  card_time_ = 0u;
  table_state_ = 0u;
  compare_round_ = 0u;
  look_round_ = 0u;
  limit_round_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

zajinhua_table_info::~zajinhua_table_info() {
  SharedDtor();
}

void zajinhua_table_info::SharedDtor() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (this != default_instance_) {
  }
}

void zajinhua_table_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* zajinhua_table_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return zajinhua_table_info_descriptor_;
}

const zajinhua_table_info& zajinhua_table_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  return *default_instance_;
}

zajinhua_table_info* zajinhua_table_info::default_instance_ = NULL;

zajinhua_table_info* zajinhua_table_info::New() const {
  return new zajinhua_table_info;
}

void zajinhua_table_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0u;
    if (has_tablename()) {
      if (tablename_ != &::google::protobuf::internal::kEmptyString) {
        tablename_->clear();
      }
    }
    is_passwd_ = 0u;
    basescore_ = GOOGLE_LONGLONG(0);
    consume_ = 0u;
    entermin_ = GOOGLE_ULONGLONG(0);
    duetime_ = 0u;
    feetype_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    feevalue_ = GOOGLE_LONGLONG(0);
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    card_time_ = 0u;
    table_state_ = 0u;
    compare_round_ = 0u;
    look_round_ = 0u;
    limit_round_ = 0u;
  }
  ming_multip_.Clear();
  blind_multip_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool zajinhua_table_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tablename;
        break;
      }

      // optional bytes tablename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tablename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tablename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_passwd;
        break;
      }

      // optional uint32 is_passwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_passwd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_passwd_)));
          set_has_is_passwd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_basescore;
        break;
      }

      // optional int64 basescore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_basescore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &basescore_)));
          set_has_basescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_consume;
        break;
      }

      // optional uint32 consume = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consume_)));
          set_has_consume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_entermin;
        break;
      }

      // optional uint64 entermin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entermin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entermin_)));
          set_has_entermin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_duetime;
        break;
      }

      // optional uint32 duetime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duetime_)));
          set_has_duetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_feetype;
        break;
      }

      // optional uint32 feetype = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &feetype_)));
          set_has_feetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_feevalue;
        break;
      }

      // optional int64 feevalue = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feevalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &feevalue_)));
          set_has_feevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_hostname;
        break;
      }

      // optional bytes hostname = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hostname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_card_time;
        break;
      }

      // optional uint32 card_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_time_)));
          set_has_card_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_table_state;
        break;
      }

      // optional uint32 table_state = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_state_)));
          set_has_table_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_compare_round;
        break;
      }

      // optional uint32 compare_round = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_compare_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &compare_round_)));
          set_has_compare_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_look_round;
        break;
      }

      // optional uint32 look_round = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_look_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &look_round_)));
          set_has_look_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_limit_round;
        break;
      }

      // optional uint32 limit_round = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_round_)));
          set_has_limit_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_ming_multip;
        break;
      }

      // repeated uint32 ming_multip = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ming_multip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 128, input, this->mutable_ming_multip())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ming_multip())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_ming_multip;
        if (input->ExpectTag(136)) goto parse_blind_multip;
        break;
      }

      // repeated uint32 blind_multip = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blind_multip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 136, input, this->mutable_blind_multip())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_blind_multip())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_blind_multip;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void zajinhua_table_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tableid(), output);
  }

  // optional bytes tablename = 2;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->tablename(), output);
  }

  // optional uint32 is_passwd = 3;
  if (has_is_passwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->is_passwd(), output);
  }

  // optional int64 basescore = 4;
  if (has_basescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->basescore(), output);
  }

  // optional uint32 consume = 5;
  if (has_consume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->consume(), output);
  }

  // optional uint64 entermin = 6;
  if (has_entermin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->entermin(), output);
  }

  // optional uint32 duetime = 7;
  if (has_duetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->duetime(), output);
  }

  // optional uint32 feetype = 8;
  if (has_feetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->feetype(), output);
  }

  // optional int64 feevalue = 9;
  if (has_feevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->feevalue(), output);
  }

  // optional bytes hostname = 10;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->hostname(), output);
  }

  // optional uint32 card_time = 11;
  if (has_card_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->card_time(), output);
  }

  // optional uint32 table_state = 12;
  if (has_table_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->table_state(), output);
  }

  // optional uint32 compare_round = 13;
  if (has_compare_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->compare_round(), output);
  }

  // optional uint32 look_round = 14;
  if (has_look_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->look_round(), output);
  }

  // optional uint32 limit_round = 15;
  if (has_limit_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->limit_round(), output);
  }

  // repeated uint32 ming_multip = 16;
  for (int i = 0; i < this->ming_multip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      16, this->ming_multip(i), output);
  }

  // repeated uint32 blind_multip = 17;
  for (int i = 0; i < this->blind_multip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      17, this->blind_multip(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* zajinhua_table_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tableid(), target);
  }

  // optional bytes tablename = 2;
  if (has_tablename()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->tablename(), target);
  }

  // optional uint32 is_passwd = 3;
  if (has_is_passwd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->is_passwd(), target);
  }

  // optional int64 basescore = 4;
  if (has_basescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->basescore(), target);
  }

  // optional uint32 consume = 5;
  if (has_consume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->consume(), target);
  }

  // optional uint64 entermin = 6;
  if (has_entermin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->entermin(), target);
  }

  // optional uint32 duetime = 7;
  if (has_duetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->duetime(), target);
  }

  // optional uint32 feetype = 8;
  if (has_feetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->feetype(), target);
  }

  // optional int64 feevalue = 9;
  if (has_feevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->feevalue(), target);
  }

  // optional bytes hostname = 10;
  if (has_hostname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->hostname(), target);
  }

  // optional uint32 card_time = 11;
  if (has_card_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->card_time(), target);
  }

  // optional uint32 table_state = 12;
  if (has_table_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->table_state(), target);
  }

  // optional uint32 compare_round = 13;
  if (has_compare_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->compare_round(), target);
  }

  // optional uint32 look_round = 14;
  if (has_look_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->look_round(), target);
  }

  // optional uint32 limit_round = 15;
  if (has_limit_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->limit_round(), target);
  }

  // repeated uint32 ming_multip = 16;
  for (int i = 0; i < this->ming_multip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(16, this->ming_multip(i), target);
  }

  // repeated uint32 blind_multip = 17;
  for (int i = 0; i < this->blind_multip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(17, this->blind_multip(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int zajinhua_table_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tableid());
    }

    // optional bytes tablename = 2;
    if (has_tablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tablename());
    }

    // optional uint32 is_passwd = 3;
    if (has_is_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_passwd());
    }

    // optional int64 basescore = 4;
    if (has_basescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->basescore());
    }

    // optional uint32 consume = 5;
    if (has_consume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consume());
    }

    // optional uint64 entermin = 6;
    if (has_entermin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entermin());
    }

    // optional uint32 duetime = 7;
    if (has_duetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duetime());
    }

    // optional uint32 feetype = 8;
    if (has_feetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->feetype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 feevalue = 9;
    if (has_feevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->feevalue());
    }

    // optional bytes hostname = 10;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hostname());
    }

    // optional uint32 card_time = 11;
    if (has_card_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card_time());
    }

    // optional uint32 table_state = 12;
    if (has_table_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_state());
    }

    // optional uint32 compare_round = 13;
    if (has_compare_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->compare_round());
    }

    // optional uint32 look_round = 14;
    if (has_look_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->look_round());
    }

    // optional uint32 limit_round = 15;
    if (has_limit_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit_round());
    }

  }
  // repeated uint32 ming_multip = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->ming_multip_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->ming_multip(i));
    }
    total_size += 2 * this->ming_multip_size() + data_size;
  }

  // repeated uint32 blind_multip = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->blind_multip_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->blind_multip(i));
    }
    total_size += 2 * this->blind_multip_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void zajinhua_table_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const zajinhua_table_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const zajinhua_table_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void zajinhua_table_info::MergeFrom(const zajinhua_table_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  ming_multip_.MergeFrom(from.ming_multip_);
  blind_multip_.MergeFrom(from.blind_multip_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_tablename()) {
      set_tablename(from.tablename());
    }
    if (from.has_is_passwd()) {
      set_is_passwd(from.is_passwd());
    }
    if (from.has_basescore()) {
      set_basescore(from.basescore());
    }
    if (from.has_consume()) {
      set_consume(from.consume());
    }
    if (from.has_entermin()) {
      set_entermin(from.entermin());
    }
    if (from.has_duetime()) {
      set_duetime(from.duetime());
    }
    if (from.has_feetype()) {
      set_feetype(from.feetype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_feevalue()) {
      set_feevalue(from.feevalue());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_card_time()) {
      set_card_time(from.card_time());
    }
    if (from.has_table_state()) {
      set_table_state(from.table_state());
    }
    if (from.has_compare_round()) {
      set_compare_round(from.compare_round());
    }
    if (from.has_look_round()) {
      set_look_round(from.look_round());
    }
    if (from.has_limit_round()) {
      set_limit_round(from.limit_round());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void zajinhua_table_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void zajinhua_table_info::CopyFrom(const zajinhua_table_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool zajinhua_table_info::IsInitialized() const {

  return true;
}

void zajinhua_table_info::Swap(zajinhua_table_info* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(tablename_, other->tablename_);
    std::swap(is_passwd_, other->is_passwd_);
    std::swap(basescore_, other->basescore_);
    std::swap(consume_, other->consume_);
    std::swap(entermin_, other->entermin_);
    std::swap(duetime_, other->duetime_);
    std::swap(feetype_, other->feetype_);
    std::swap(feevalue_, other->feevalue_);
    std::swap(hostname_, other->hostname_);
    std::swap(card_time_, other->card_time_);
    std::swap(table_state_, other->table_state_);
    std::swap(compare_round_, other->compare_round_);
    std::swap(look_round_, other->look_round_);
    std::swap(limit_round_, other->limit_round_);
    ming_multip_.Swap(&other->ming_multip_);
    blind_multip_.Swap(&other->blind_multip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata zajinhua_table_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = zajinhua_table_info_descriptor_;
  metadata.reflection = zajinhua_table_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int niuniu_table_info::kTableidFieldNumber;
const int niuniu_table_info::kTablenameFieldNumber;
const int niuniu_table_info::kIsPasswdFieldNumber;
const int niuniu_table_info::kBasescoreFieldNumber;
const int niuniu_table_info::kConsumeFieldNumber;
const int niuniu_table_info::kEnterminFieldNumber;
const int niuniu_table_info::kDuetimeFieldNumber;
const int niuniu_table_info::kFeetypeFieldNumber;
const int niuniu_table_info::kFeevalueFieldNumber;
const int niuniu_table_info::kHostnameFieldNumber;
const int niuniu_table_info::kTableStateFieldNumber;
const int niuniu_table_info::kSeatNumFieldNumber;
const int niuniu_table_info::kCanBankerFieldNumber;
const int niuniu_table_info::kApplyBankerTimeFieldNumber;
const int niuniu_table_info::kCardTimeFieldNumber;
const int niuniu_table_info::kShowCardTimeFieldNumber;
#endif  // !_MSC_VER

niuniu_table_info::niuniu_table_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void niuniu_table_info::InitAsDefaultInstance() {
}

niuniu_table_info::niuniu_table_info(const niuniu_table_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void niuniu_table_info::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0u;
  tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_passwd_ = 0u;
  basescore_ = GOOGLE_LONGLONG(0);
  consume_ = 0u;
  entermin_ = GOOGLE_ULONGLONG(0);
  duetime_ = 0u;
  feetype_ = 0u;
  feevalue_ = GOOGLE_LONGLONG(0);
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  table_state_ = 0u;
  seat_num_ = 0u;
  can_banker_ = 0u;
  apply_banker_time_ = 0u;
  card_time_ = 0u;
  show_card_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

niuniu_table_info::~niuniu_table_info() {
  SharedDtor();
}

void niuniu_table_info::SharedDtor() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (this != default_instance_) {
  }
}

void niuniu_table_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* niuniu_table_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return niuniu_table_info_descriptor_;
}

const niuniu_table_info& niuniu_table_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  return *default_instance_;
}

niuniu_table_info* niuniu_table_info::default_instance_ = NULL;

niuniu_table_info* niuniu_table_info::New() const {
  return new niuniu_table_info;
}

void niuniu_table_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0u;
    if (has_tablename()) {
      if (tablename_ != &::google::protobuf::internal::kEmptyString) {
        tablename_->clear();
      }
    }
    is_passwd_ = 0u;
    basescore_ = GOOGLE_LONGLONG(0);
    consume_ = 0u;
    entermin_ = GOOGLE_ULONGLONG(0);
    duetime_ = 0u;
    feetype_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    feevalue_ = GOOGLE_LONGLONG(0);
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    table_state_ = 0u;
    seat_num_ = 0u;
    can_banker_ = 0u;
    apply_banker_time_ = 0u;
    card_time_ = 0u;
    show_card_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool niuniu_table_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tablename;
        break;
      }

      // optional bytes tablename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tablename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tablename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_passwd;
        break;
      }

      // optional uint32 is_passwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_passwd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_passwd_)));
          set_has_is_passwd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_basescore;
        break;
      }

      // optional int64 basescore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_basescore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &basescore_)));
          set_has_basescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_consume;
        break;
      }

      // optional uint32 consume = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consume_)));
          set_has_consume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_entermin;
        break;
      }

      // optional uint64 entermin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entermin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entermin_)));
          set_has_entermin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_duetime;
        break;
      }

      // optional uint32 duetime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duetime_)));
          set_has_duetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_feetype;
        break;
      }

      // optional uint32 feetype = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &feetype_)));
          set_has_feetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_feevalue;
        break;
      }

      // optional int64 feevalue = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feevalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &feevalue_)));
          set_has_feevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_hostname;
        break;
      }

      // optional bytes hostname = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hostname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_table_state;
        break;
      }

      // optional uint32 table_state = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_state_)));
          set_has_table_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_seat_num;
        break;
      }

      // optional uint32 seat_num = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_num_)));
          set_has_seat_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_can_banker;
        break;
      }

      // optional uint32 can_banker = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_banker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &can_banker_)));
          set_has_can_banker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_apply_banker_time;
        break;
      }

      // optional uint32 apply_banker_time = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_banker_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &apply_banker_time_)));
          set_has_apply_banker_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_card_time;
        break;
      }

      // optional uint32 card_time = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_time_)));
          set_has_card_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_show_card_time;
        break;
      }

      // optional uint32 show_card_time = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_card_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &show_card_time_)));
          set_has_show_card_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void niuniu_table_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tableid(), output);
  }

  // optional bytes tablename = 2;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->tablename(), output);
  }

  // optional uint32 is_passwd = 3;
  if (has_is_passwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->is_passwd(), output);
  }

  // optional int64 basescore = 4;
  if (has_basescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->basescore(), output);
  }

  // optional uint32 consume = 5;
  if (has_consume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->consume(), output);
  }

  // optional uint64 entermin = 6;
  if (has_entermin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->entermin(), output);
  }

  // optional uint32 duetime = 7;
  if (has_duetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->duetime(), output);
  }

  // optional uint32 feetype = 8;
  if (has_feetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->feetype(), output);
  }

  // optional int64 feevalue = 9;
  if (has_feevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->feevalue(), output);
  }

  // optional bytes hostname = 10;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->hostname(), output);
  }

  // optional uint32 table_state = 11;
  if (has_table_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->table_state(), output);
  }

  // optional uint32 seat_num = 12;
  if (has_seat_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->seat_num(), output);
  }

  // optional uint32 can_banker = 13;
  if (has_can_banker()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->can_banker(), output);
  }

  // optional uint32 apply_banker_time = 14;
  if (has_apply_banker_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->apply_banker_time(), output);
  }

  // optional uint32 card_time = 15;
  if (has_card_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->card_time(), output);
  }

  // optional uint32 show_card_time = 16;
  if (has_show_card_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->show_card_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* niuniu_table_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tableid(), target);
  }

  // optional bytes tablename = 2;
  if (has_tablename()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->tablename(), target);
  }

  // optional uint32 is_passwd = 3;
  if (has_is_passwd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->is_passwd(), target);
  }

  // optional int64 basescore = 4;
  if (has_basescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->basescore(), target);
  }

  // optional uint32 consume = 5;
  if (has_consume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->consume(), target);
  }

  // optional uint64 entermin = 6;
  if (has_entermin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->entermin(), target);
  }

  // optional uint32 duetime = 7;
  if (has_duetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->duetime(), target);
  }

  // optional uint32 feetype = 8;
  if (has_feetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->feetype(), target);
  }

  // optional int64 feevalue = 9;
  if (has_feevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->feevalue(), target);
  }

  // optional bytes hostname = 10;
  if (has_hostname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->hostname(), target);
  }

  // optional uint32 table_state = 11;
  if (has_table_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->table_state(), target);
  }

  // optional uint32 seat_num = 12;
  if (has_seat_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->seat_num(), target);
  }

  // optional uint32 can_banker = 13;
  if (has_can_banker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->can_banker(), target);
  }

  // optional uint32 apply_banker_time = 14;
  if (has_apply_banker_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->apply_banker_time(), target);
  }

  // optional uint32 card_time = 15;
  if (has_card_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->card_time(), target);
  }

  // optional uint32 show_card_time = 16;
  if (has_show_card_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->show_card_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int niuniu_table_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tableid());
    }

    // optional bytes tablename = 2;
    if (has_tablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tablename());
    }

    // optional uint32 is_passwd = 3;
    if (has_is_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_passwd());
    }

    // optional int64 basescore = 4;
    if (has_basescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->basescore());
    }

    // optional uint32 consume = 5;
    if (has_consume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consume());
    }

    // optional uint64 entermin = 6;
    if (has_entermin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entermin());
    }

    // optional uint32 duetime = 7;
    if (has_duetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duetime());
    }

    // optional uint32 feetype = 8;
    if (has_feetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->feetype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 feevalue = 9;
    if (has_feevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->feevalue());
    }

    // optional bytes hostname = 10;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hostname());
    }

    // optional uint32 table_state = 11;
    if (has_table_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_state());
    }

    // optional uint32 seat_num = 12;
    if (has_seat_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seat_num());
    }

    // optional uint32 can_banker = 13;
    if (has_can_banker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->can_banker());
    }

    // optional uint32 apply_banker_time = 14;
    if (has_apply_banker_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->apply_banker_time());
    }

    // optional uint32 card_time = 15;
    if (has_card_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card_time());
    }

    // optional uint32 show_card_time = 16;
    if (has_show_card_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->show_card_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void niuniu_table_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const niuniu_table_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const niuniu_table_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void niuniu_table_info::MergeFrom(const niuniu_table_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_tablename()) {
      set_tablename(from.tablename());
    }
    if (from.has_is_passwd()) {
      set_is_passwd(from.is_passwd());
    }
    if (from.has_basescore()) {
      set_basescore(from.basescore());
    }
    if (from.has_consume()) {
      set_consume(from.consume());
    }
    if (from.has_entermin()) {
      set_entermin(from.entermin());
    }
    if (from.has_duetime()) {
      set_duetime(from.duetime());
    }
    if (from.has_feetype()) {
      set_feetype(from.feetype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_feevalue()) {
      set_feevalue(from.feevalue());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_table_state()) {
      set_table_state(from.table_state());
    }
    if (from.has_seat_num()) {
      set_seat_num(from.seat_num());
    }
    if (from.has_can_banker()) {
      set_can_banker(from.can_banker());
    }
    if (from.has_apply_banker_time()) {
      set_apply_banker_time(from.apply_banker_time());
    }
    if (from.has_card_time()) {
      set_card_time(from.card_time());
    }
    if (from.has_show_card_time()) {
      set_show_card_time(from.show_card_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void niuniu_table_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void niuniu_table_info::CopyFrom(const niuniu_table_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool niuniu_table_info::IsInitialized() const {

  return true;
}

void niuniu_table_info::Swap(niuniu_table_info* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(tablename_, other->tablename_);
    std::swap(is_passwd_, other->is_passwd_);
    std::swap(basescore_, other->basescore_);
    std::swap(consume_, other->consume_);
    std::swap(entermin_, other->entermin_);
    std::swap(duetime_, other->duetime_);
    std::swap(feetype_, other->feetype_);
    std::swap(feevalue_, other->feevalue_);
    std::swap(hostname_, other->hostname_);
    std::swap(table_state_, other->table_state_);
    std::swap(seat_num_, other->seat_num_);
    std::swap(can_banker_, other->can_banker_);
    std::swap(apply_banker_time_, other->apply_banker_time_);
    std::swap(card_time_, other->card_time_);
    std::swap(show_card_time_, other->show_card_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata niuniu_table_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = niuniu_table_info_descriptor_;
  metadata.reflection = niuniu_table_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int baccarat_table_info::kTableidFieldNumber;
const int baccarat_table_info::kTablenameFieldNumber;
const int baccarat_table_info::kIsPasswdFieldNumber;
const int baccarat_table_info::kBasescoreFieldNumber;
const int baccarat_table_info::kConsumeFieldNumber;
const int baccarat_table_info::kEnterminFieldNumber;
const int baccarat_table_info::kDuetimeFieldNumber;
const int baccarat_table_info::kFeetypeFieldNumber;
const int baccarat_table_info::kFeevalueFieldNumber;
const int baccarat_table_info::kHostnameFieldNumber;
const int baccarat_table_info::kCardTimeFieldNumber;
const int baccarat_table_info::kTableStateFieldNumber;
const int baccarat_table_info::kSitdownFieldNumber;
const int baccarat_table_info::kApplyBankerConditionFieldNumber;
const int baccarat_table_info::kApplyBankerMaxscoreFieldNumber;
const int baccarat_table_info::kBankerMaxTimeFieldNumber;
#endif  // !_MSC_VER

baccarat_table_info::baccarat_table_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void baccarat_table_info::InitAsDefaultInstance() {
}

baccarat_table_info::baccarat_table_info(const baccarat_table_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void baccarat_table_info::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0u;
  tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_passwd_ = 0u;
  basescore_ = GOOGLE_LONGLONG(0);
  consume_ = 0u;
  entermin_ = GOOGLE_ULONGLONG(0);
  duetime_ = 0u;
  feetype_ = 0u;
  feevalue_ = GOOGLE_LONGLONG(0);
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  card_time_ = 0u;
  table_state_ = 0u;
  sitdown_ = GOOGLE_LONGLONG(0);
  apply_banker_condition_ = GOOGLE_LONGLONG(0);
  apply_banker_maxscore_ = GOOGLE_LONGLONG(0);
  banker_max_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

baccarat_table_info::~baccarat_table_info() {
  SharedDtor();
}

void baccarat_table_info::SharedDtor() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (this != default_instance_) {
  }
}

void baccarat_table_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* baccarat_table_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return baccarat_table_info_descriptor_;
}

const baccarat_table_info& baccarat_table_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  return *default_instance_;
}

baccarat_table_info* baccarat_table_info::default_instance_ = NULL;

baccarat_table_info* baccarat_table_info::New() const {
  return new baccarat_table_info;
}

void baccarat_table_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0u;
    if (has_tablename()) {
      if (tablename_ != &::google::protobuf::internal::kEmptyString) {
        tablename_->clear();
      }
    }
    is_passwd_ = 0u;
    basescore_ = GOOGLE_LONGLONG(0);
    consume_ = 0u;
    entermin_ = GOOGLE_ULONGLONG(0);
    duetime_ = 0u;
    feetype_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    feevalue_ = GOOGLE_LONGLONG(0);
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    card_time_ = 0u;
    table_state_ = 0u;
    sitdown_ = GOOGLE_LONGLONG(0);
    apply_banker_condition_ = GOOGLE_LONGLONG(0);
    apply_banker_maxscore_ = GOOGLE_LONGLONG(0);
    banker_max_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool baccarat_table_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tablename;
        break;
      }

      // optional bytes tablename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tablename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tablename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_passwd;
        break;
      }

      // optional uint32 is_passwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_passwd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_passwd_)));
          set_has_is_passwd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_basescore;
        break;
      }

      // optional int64 basescore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_basescore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &basescore_)));
          set_has_basescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_consume;
        break;
      }

      // optional uint32 consume = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consume_)));
          set_has_consume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_entermin;
        break;
      }

      // optional uint64 entermin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entermin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entermin_)));
          set_has_entermin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_duetime;
        break;
      }

      // optional uint32 duetime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duetime_)));
          set_has_duetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_feetype;
        break;
      }

      // optional uint32 feetype = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &feetype_)));
          set_has_feetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_feevalue;
        break;
      }

      // optional int64 feevalue = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feevalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &feevalue_)));
          set_has_feevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_hostname;
        break;
      }

      // optional bytes hostname = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hostname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_card_time;
        break;
      }

      // optional uint32 card_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_time_)));
          set_has_card_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_table_state;
        break;
      }

      // optional uint32 table_state = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_state_)));
          set_has_table_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_sitdown;
        break;
      }

      // optional int64 sitdown = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sitdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sitdown_)));
          set_has_sitdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_apply_banker_condition;
        break;
      }

      // optional int64 apply_banker_condition = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_banker_condition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &apply_banker_condition_)));
          set_has_apply_banker_condition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_apply_banker_maxscore;
        break;
      }

      // optional int64 apply_banker_maxscore = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_banker_maxscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &apply_banker_maxscore_)));
          set_has_apply_banker_maxscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_banker_max_time;
        break;
      }

      // optional uint32 banker_max_time = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_max_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &banker_max_time_)));
          set_has_banker_max_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void baccarat_table_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tableid(), output);
  }

  // optional bytes tablename = 2;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->tablename(), output);
  }

  // optional uint32 is_passwd = 3;
  if (has_is_passwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->is_passwd(), output);
  }

  // optional int64 basescore = 4;
  if (has_basescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->basescore(), output);
  }

  // optional uint32 consume = 5;
  if (has_consume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->consume(), output);
  }

  // optional uint64 entermin = 6;
  if (has_entermin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->entermin(), output);
  }

  // optional uint32 duetime = 7;
  if (has_duetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->duetime(), output);
  }

  // optional uint32 feetype = 8;
  if (has_feetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->feetype(), output);
  }

  // optional int64 feevalue = 9;
  if (has_feevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->feevalue(), output);
  }

  // optional bytes hostname = 10;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->hostname(), output);
  }

  // optional uint32 card_time = 11;
  if (has_card_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->card_time(), output);
  }

  // optional uint32 table_state = 12;
  if (has_table_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->table_state(), output);
  }

  // optional int64 sitdown = 13;
  if (has_sitdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->sitdown(), output);
  }

  // optional int64 apply_banker_condition = 14;
  if (has_apply_banker_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->apply_banker_condition(), output);
  }

  // optional int64 apply_banker_maxscore = 15;
  if (has_apply_banker_maxscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->apply_banker_maxscore(), output);
  }

  // optional uint32 banker_max_time = 16;
  if (has_banker_max_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->banker_max_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* baccarat_table_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tableid(), target);
  }

  // optional bytes tablename = 2;
  if (has_tablename()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->tablename(), target);
  }

  // optional uint32 is_passwd = 3;
  if (has_is_passwd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->is_passwd(), target);
  }

  // optional int64 basescore = 4;
  if (has_basescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->basescore(), target);
  }

  // optional uint32 consume = 5;
  if (has_consume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->consume(), target);
  }

  // optional uint64 entermin = 6;
  if (has_entermin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->entermin(), target);
  }

  // optional uint32 duetime = 7;
  if (has_duetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->duetime(), target);
  }

  // optional uint32 feetype = 8;
  if (has_feetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->feetype(), target);
  }

  // optional int64 feevalue = 9;
  if (has_feevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->feevalue(), target);
  }

  // optional bytes hostname = 10;
  if (has_hostname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->hostname(), target);
  }

  // optional uint32 card_time = 11;
  if (has_card_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->card_time(), target);
  }

  // optional uint32 table_state = 12;
  if (has_table_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->table_state(), target);
  }

  // optional int64 sitdown = 13;
  if (has_sitdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->sitdown(), target);
  }

  // optional int64 apply_banker_condition = 14;
  if (has_apply_banker_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->apply_banker_condition(), target);
  }

  // optional int64 apply_banker_maxscore = 15;
  if (has_apply_banker_maxscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->apply_banker_maxscore(), target);
  }

  // optional uint32 banker_max_time = 16;
  if (has_banker_max_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->banker_max_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int baccarat_table_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tableid());
    }

    // optional bytes tablename = 2;
    if (has_tablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tablename());
    }

    // optional uint32 is_passwd = 3;
    if (has_is_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_passwd());
    }

    // optional int64 basescore = 4;
    if (has_basescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->basescore());
    }

    // optional uint32 consume = 5;
    if (has_consume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consume());
    }

    // optional uint64 entermin = 6;
    if (has_entermin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entermin());
    }

    // optional uint32 duetime = 7;
    if (has_duetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duetime());
    }

    // optional uint32 feetype = 8;
    if (has_feetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->feetype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 feevalue = 9;
    if (has_feevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->feevalue());
    }

    // optional bytes hostname = 10;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hostname());
    }

    // optional uint32 card_time = 11;
    if (has_card_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card_time());
    }

    // optional uint32 table_state = 12;
    if (has_table_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_state());
    }

    // optional int64 sitdown = 13;
    if (has_sitdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sitdown());
    }

    // optional int64 apply_banker_condition = 14;
    if (has_apply_banker_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->apply_banker_condition());
    }

    // optional int64 apply_banker_maxscore = 15;
    if (has_apply_banker_maxscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->apply_banker_maxscore());
    }

    // optional uint32 banker_max_time = 16;
    if (has_banker_max_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->banker_max_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void baccarat_table_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const baccarat_table_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const baccarat_table_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void baccarat_table_info::MergeFrom(const baccarat_table_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_tablename()) {
      set_tablename(from.tablename());
    }
    if (from.has_is_passwd()) {
      set_is_passwd(from.is_passwd());
    }
    if (from.has_basescore()) {
      set_basescore(from.basescore());
    }
    if (from.has_consume()) {
      set_consume(from.consume());
    }
    if (from.has_entermin()) {
      set_entermin(from.entermin());
    }
    if (from.has_duetime()) {
      set_duetime(from.duetime());
    }
    if (from.has_feetype()) {
      set_feetype(from.feetype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_feevalue()) {
      set_feevalue(from.feevalue());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_card_time()) {
      set_card_time(from.card_time());
    }
    if (from.has_table_state()) {
      set_table_state(from.table_state());
    }
    if (from.has_sitdown()) {
      set_sitdown(from.sitdown());
    }
    if (from.has_apply_banker_condition()) {
      set_apply_banker_condition(from.apply_banker_condition());
    }
    if (from.has_apply_banker_maxscore()) {
      set_apply_banker_maxscore(from.apply_banker_maxscore());
    }
    if (from.has_banker_max_time()) {
      set_banker_max_time(from.banker_max_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void baccarat_table_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void baccarat_table_info::CopyFrom(const baccarat_table_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool baccarat_table_info::IsInitialized() const {

  return true;
}

void baccarat_table_info::Swap(baccarat_table_info* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(tablename_, other->tablename_);
    std::swap(is_passwd_, other->is_passwd_);
    std::swap(basescore_, other->basescore_);
    std::swap(consume_, other->consume_);
    std::swap(entermin_, other->entermin_);
    std::swap(duetime_, other->duetime_);
    std::swap(feetype_, other->feetype_);
    std::swap(feevalue_, other->feevalue_);
    std::swap(hostname_, other->hostname_);
    std::swap(card_time_, other->card_time_);
    std::swap(table_state_, other->table_state_);
    std::swap(sitdown_, other->sitdown_);
    std::swap(apply_banker_condition_, other->apply_banker_condition_);
    std::swap(apply_banker_maxscore_, other->apply_banker_maxscore_);
    std::swap(banker_max_time_, other->banker_max_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata baccarat_table_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = baccarat_table_info_descriptor_;
  metadata.reflection = baccarat_table_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sangong_table_info::kTableidFieldNumber;
const int sangong_table_info::kTablenameFieldNumber;
const int sangong_table_info::kIsPasswdFieldNumber;
const int sangong_table_info::kBasescoreFieldNumber;
const int sangong_table_info::kConsumeFieldNumber;
const int sangong_table_info::kEnterminFieldNumber;
const int sangong_table_info::kDuetimeFieldNumber;
const int sangong_table_info::kFeetypeFieldNumber;
const int sangong_table_info::kFeevalueFieldNumber;
const int sangong_table_info::kHostnameFieldNumber;
const int sangong_table_info::kTableStateFieldNumber;
const int sangong_table_info::kSeatNumFieldNumber;
const int sangong_table_info::kCanBankerFieldNumber;
const int sangong_table_info::kApplyBankerTimeFieldNumber;
const int sangong_table_info::kCardTimeFieldNumber;
const int sangong_table_info::kShowCardTimeFieldNumber;
#endif  // !_MSC_VER

sangong_table_info::sangong_table_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sangong_table_info::InitAsDefaultInstance() {
}

sangong_table_info::sangong_table_info(const sangong_table_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sangong_table_info::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0u;
  tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_passwd_ = 0u;
  basescore_ = GOOGLE_LONGLONG(0);
  consume_ = 0u;
  entermin_ = GOOGLE_ULONGLONG(0);
  duetime_ = 0u;
  feetype_ = 0u;
  feevalue_ = GOOGLE_LONGLONG(0);
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  table_state_ = 0u;
  seat_num_ = 0u;
  can_banker_ = 0u;
  apply_banker_time_ = 0u;
  card_time_ = 0u;
  show_card_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sangong_table_info::~sangong_table_info() {
  SharedDtor();
}

void sangong_table_info::SharedDtor() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (this != default_instance_) {
  }
}

void sangong_table_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sangong_table_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sangong_table_info_descriptor_;
}

const sangong_table_info& sangong_table_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  return *default_instance_;
}

sangong_table_info* sangong_table_info::default_instance_ = NULL;

sangong_table_info* sangong_table_info::New() const {
  return new sangong_table_info;
}

void sangong_table_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0u;
    if (has_tablename()) {
      if (tablename_ != &::google::protobuf::internal::kEmptyString) {
        tablename_->clear();
      }
    }
    is_passwd_ = 0u;
    basescore_ = GOOGLE_LONGLONG(0);
    consume_ = 0u;
    entermin_ = GOOGLE_ULONGLONG(0);
    duetime_ = 0u;
    feetype_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    feevalue_ = GOOGLE_LONGLONG(0);
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    table_state_ = 0u;
    seat_num_ = 0u;
    can_banker_ = 0u;
    apply_banker_time_ = 0u;
    card_time_ = 0u;
    show_card_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sangong_table_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tablename;
        break;
      }

      // optional bytes tablename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tablename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tablename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_passwd;
        break;
      }

      // optional uint32 is_passwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_passwd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_passwd_)));
          set_has_is_passwd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_basescore;
        break;
      }

      // optional int64 basescore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_basescore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &basescore_)));
          set_has_basescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_consume;
        break;
      }

      // optional uint32 consume = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consume_)));
          set_has_consume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_entermin;
        break;
      }

      // optional uint64 entermin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entermin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entermin_)));
          set_has_entermin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_duetime;
        break;
      }

      // optional uint32 duetime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duetime_)));
          set_has_duetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_feetype;
        break;
      }

      // optional uint32 feetype = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &feetype_)));
          set_has_feetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_feevalue;
        break;
      }

      // optional int64 feevalue = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feevalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &feevalue_)));
          set_has_feevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_hostname;
        break;
      }

      // optional bytes hostname = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hostname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_table_state;
        break;
      }

      // optional uint32 table_state = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_state_)));
          set_has_table_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_seat_num;
        break;
      }

      // optional uint32 seat_num = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_num_)));
          set_has_seat_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_can_banker;
        break;
      }

      // optional uint32 can_banker = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_banker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &can_banker_)));
          set_has_can_banker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_apply_banker_time;
        break;
      }

      // optional uint32 apply_banker_time = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_banker_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &apply_banker_time_)));
          set_has_apply_banker_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_card_time;
        break;
      }

      // optional uint32 card_time = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_time_)));
          set_has_card_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_show_card_time;
        break;
      }

      // optional uint32 show_card_time = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_card_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &show_card_time_)));
          set_has_show_card_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sangong_table_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tableid(), output);
  }

  // optional bytes tablename = 2;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->tablename(), output);
  }

  // optional uint32 is_passwd = 3;
  if (has_is_passwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->is_passwd(), output);
  }

  // optional int64 basescore = 4;
  if (has_basescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->basescore(), output);
  }

  // optional uint32 consume = 5;
  if (has_consume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->consume(), output);
  }

  // optional uint64 entermin = 6;
  if (has_entermin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->entermin(), output);
  }

  // optional uint32 duetime = 7;
  if (has_duetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->duetime(), output);
  }

  // optional uint32 feetype = 8;
  if (has_feetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->feetype(), output);
  }

  // optional int64 feevalue = 9;
  if (has_feevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->feevalue(), output);
  }

  // optional bytes hostname = 10;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->hostname(), output);
  }

  // optional uint32 table_state = 11;
  if (has_table_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->table_state(), output);
  }

  // optional uint32 seat_num = 12;
  if (has_seat_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->seat_num(), output);
  }

  // optional uint32 can_banker = 13;
  if (has_can_banker()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->can_banker(), output);
  }

  // optional uint32 apply_banker_time = 14;
  if (has_apply_banker_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->apply_banker_time(), output);
  }

  // optional uint32 card_time = 15;
  if (has_card_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->card_time(), output);
  }

  // optional uint32 show_card_time = 16;
  if (has_show_card_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->show_card_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sangong_table_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tableid(), target);
  }

  // optional bytes tablename = 2;
  if (has_tablename()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->tablename(), target);
  }

  // optional uint32 is_passwd = 3;
  if (has_is_passwd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->is_passwd(), target);
  }

  // optional int64 basescore = 4;
  if (has_basescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->basescore(), target);
  }

  // optional uint32 consume = 5;
  if (has_consume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->consume(), target);
  }

  // optional uint64 entermin = 6;
  if (has_entermin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->entermin(), target);
  }

  // optional uint32 duetime = 7;
  if (has_duetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->duetime(), target);
  }

  // optional uint32 feetype = 8;
  if (has_feetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->feetype(), target);
  }

  // optional int64 feevalue = 9;
  if (has_feevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->feevalue(), target);
  }

  // optional bytes hostname = 10;
  if (has_hostname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->hostname(), target);
  }

  // optional uint32 table_state = 11;
  if (has_table_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->table_state(), target);
  }

  // optional uint32 seat_num = 12;
  if (has_seat_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->seat_num(), target);
  }

  // optional uint32 can_banker = 13;
  if (has_can_banker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->can_banker(), target);
  }

  // optional uint32 apply_banker_time = 14;
  if (has_apply_banker_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->apply_banker_time(), target);
  }

  // optional uint32 card_time = 15;
  if (has_card_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->card_time(), target);
  }

  // optional uint32 show_card_time = 16;
  if (has_show_card_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->show_card_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sangong_table_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tableid());
    }

    // optional bytes tablename = 2;
    if (has_tablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tablename());
    }

    // optional uint32 is_passwd = 3;
    if (has_is_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_passwd());
    }

    // optional int64 basescore = 4;
    if (has_basescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->basescore());
    }

    // optional uint32 consume = 5;
    if (has_consume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consume());
    }

    // optional uint64 entermin = 6;
    if (has_entermin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entermin());
    }

    // optional uint32 duetime = 7;
    if (has_duetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duetime());
    }

    // optional uint32 feetype = 8;
    if (has_feetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->feetype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 feevalue = 9;
    if (has_feevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->feevalue());
    }

    // optional bytes hostname = 10;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hostname());
    }

    // optional uint32 table_state = 11;
    if (has_table_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_state());
    }

    // optional uint32 seat_num = 12;
    if (has_seat_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seat_num());
    }

    // optional uint32 can_banker = 13;
    if (has_can_banker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->can_banker());
    }

    // optional uint32 apply_banker_time = 14;
    if (has_apply_banker_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->apply_banker_time());
    }

    // optional uint32 card_time = 15;
    if (has_card_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card_time());
    }

    // optional uint32 show_card_time = 16;
    if (has_show_card_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->show_card_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sangong_table_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sangong_table_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sangong_table_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sangong_table_info::MergeFrom(const sangong_table_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_tablename()) {
      set_tablename(from.tablename());
    }
    if (from.has_is_passwd()) {
      set_is_passwd(from.is_passwd());
    }
    if (from.has_basescore()) {
      set_basescore(from.basescore());
    }
    if (from.has_consume()) {
      set_consume(from.consume());
    }
    if (from.has_entermin()) {
      set_entermin(from.entermin());
    }
    if (from.has_duetime()) {
      set_duetime(from.duetime());
    }
    if (from.has_feetype()) {
      set_feetype(from.feetype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_feevalue()) {
      set_feevalue(from.feevalue());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_table_state()) {
      set_table_state(from.table_state());
    }
    if (from.has_seat_num()) {
      set_seat_num(from.seat_num());
    }
    if (from.has_can_banker()) {
      set_can_banker(from.can_banker());
    }
    if (from.has_apply_banker_time()) {
      set_apply_banker_time(from.apply_banker_time());
    }
    if (from.has_card_time()) {
      set_card_time(from.card_time());
    }
    if (from.has_show_card_time()) {
      set_show_card_time(from.show_card_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sangong_table_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sangong_table_info::CopyFrom(const sangong_table_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sangong_table_info::IsInitialized() const {

  return true;
}

void sangong_table_info::Swap(sangong_table_info* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(tablename_, other->tablename_);
    std::swap(is_passwd_, other->is_passwd_);
    std::swap(basescore_, other->basescore_);
    std::swap(consume_, other->consume_);
    std::swap(entermin_, other->entermin_);
    std::swap(duetime_, other->duetime_);
    std::swap(feetype_, other->feetype_);
    std::swap(feevalue_, other->feevalue_);
    std::swap(hostname_, other->hostname_);
    std::swap(table_state_, other->table_state_);
    std::swap(seat_num_, other->seat_num_);
    std::swap(can_banker_, other->can_banker_);
    std::swap(apply_banker_time_, other->apply_banker_time_);
    std::swap(card_time_, other->card_time_);
    std::swap(show_card_time_, other->show_card_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sangong_table_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sangong_table_info_descriptor_;
  metadata.reflection = sangong_table_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int paijiu_table_info::kTableidFieldNumber;
const int paijiu_table_info::kTablenameFieldNumber;
const int paijiu_table_info::kIsPasswdFieldNumber;
const int paijiu_table_info::kBasescoreFieldNumber;
const int paijiu_table_info::kConsumeFieldNumber;
const int paijiu_table_info::kEnterminFieldNumber;
const int paijiu_table_info::kDuetimeFieldNumber;
const int paijiu_table_info::kFeetypeFieldNumber;
const int paijiu_table_info::kFeevalueFieldNumber;
const int paijiu_table_info::kHostnameFieldNumber;
const int paijiu_table_info::kCardTimeFieldNumber;
const int paijiu_table_info::kTableStateFieldNumber;
const int paijiu_table_info::kSitdownFieldNumber;
const int paijiu_table_info::kApplyBankerConditionFieldNumber;
const int paijiu_table_info::kApplyBankerMaxscoreFieldNumber;
const int paijiu_table_info::kBankerMaxTimeFieldNumber;
#endif  // !_MSC_VER

paijiu_table_info::paijiu_table_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void paijiu_table_info::InitAsDefaultInstance() {
}

paijiu_table_info::paijiu_table_info(const paijiu_table_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void paijiu_table_info::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0u;
  tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_passwd_ = 0u;
  basescore_ = GOOGLE_LONGLONG(0);
  consume_ = 0u;
  entermin_ = GOOGLE_ULONGLONG(0);
  duetime_ = 0u;
  feetype_ = 0u;
  feevalue_ = GOOGLE_LONGLONG(0);
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  card_time_ = 0u;
  table_state_ = 0u;
  sitdown_ = GOOGLE_LONGLONG(0);
  apply_banker_condition_ = GOOGLE_LONGLONG(0);
  apply_banker_maxscore_ = GOOGLE_LONGLONG(0);
  banker_max_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

paijiu_table_info::~paijiu_table_info() {
  SharedDtor();
}

void paijiu_table_info::SharedDtor() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (this != default_instance_) {
  }
}

void paijiu_table_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* paijiu_table_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return paijiu_table_info_descriptor_;
}

const paijiu_table_info& paijiu_table_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  return *default_instance_;
}

paijiu_table_info* paijiu_table_info::default_instance_ = NULL;

paijiu_table_info* paijiu_table_info::New() const {
  return new paijiu_table_info;
}

void paijiu_table_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0u;
    if (has_tablename()) {
      if (tablename_ != &::google::protobuf::internal::kEmptyString) {
        tablename_->clear();
      }
    }
    is_passwd_ = 0u;
    basescore_ = GOOGLE_LONGLONG(0);
    consume_ = 0u;
    entermin_ = GOOGLE_ULONGLONG(0);
    duetime_ = 0u;
    feetype_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    feevalue_ = GOOGLE_LONGLONG(0);
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    card_time_ = 0u;
    table_state_ = 0u;
    sitdown_ = GOOGLE_LONGLONG(0);
    apply_banker_condition_ = GOOGLE_LONGLONG(0);
    apply_banker_maxscore_ = GOOGLE_LONGLONG(0);
    banker_max_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool paijiu_table_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tablename;
        break;
      }

      // optional bytes tablename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tablename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tablename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_passwd;
        break;
      }

      // optional uint32 is_passwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_passwd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_passwd_)));
          set_has_is_passwd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_basescore;
        break;
      }

      // optional int64 basescore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_basescore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &basescore_)));
          set_has_basescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_consume;
        break;
      }

      // optional uint32 consume = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consume_)));
          set_has_consume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_entermin;
        break;
      }

      // optional uint64 entermin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entermin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entermin_)));
          set_has_entermin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_duetime;
        break;
      }

      // optional uint32 duetime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duetime_)));
          set_has_duetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_feetype;
        break;
      }

      // optional uint32 feetype = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &feetype_)));
          set_has_feetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_feevalue;
        break;
      }

      // optional int64 feevalue = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feevalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &feevalue_)));
          set_has_feevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_hostname;
        break;
      }

      // optional bytes hostname = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hostname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_card_time;
        break;
      }

      // optional uint32 card_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_time_)));
          set_has_card_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_table_state;
        break;
      }

      // optional uint32 table_state = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_state_)));
          set_has_table_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_sitdown;
        break;
      }

      // optional int64 sitdown = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sitdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sitdown_)));
          set_has_sitdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_apply_banker_condition;
        break;
      }

      // optional int64 apply_banker_condition = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_banker_condition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &apply_banker_condition_)));
          set_has_apply_banker_condition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_apply_banker_maxscore;
        break;
      }

      // optional int64 apply_banker_maxscore = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_banker_maxscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &apply_banker_maxscore_)));
          set_has_apply_banker_maxscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_banker_max_time;
        break;
      }

      // optional uint32 banker_max_time = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_max_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &banker_max_time_)));
          set_has_banker_max_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void paijiu_table_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tableid(), output);
  }

  // optional bytes tablename = 2;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->tablename(), output);
  }

  // optional uint32 is_passwd = 3;
  if (has_is_passwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->is_passwd(), output);
  }

  // optional int64 basescore = 4;
  if (has_basescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->basescore(), output);
  }

  // optional uint32 consume = 5;
  if (has_consume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->consume(), output);
  }

  // optional uint64 entermin = 6;
  if (has_entermin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->entermin(), output);
  }

  // optional uint32 duetime = 7;
  if (has_duetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->duetime(), output);
  }

  // optional uint32 feetype = 8;
  if (has_feetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->feetype(), output);
  }

  // optional int64 feevalue = 9;
  if (has_feevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->feevalue(), output);
  }

  // optional bytes hostname = 10;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->hostname(), output);
  }

  // optional uint32 card_time = 11;
  if (has_card_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->card_time(), output);
  }

  // optional uint32 table_state = 12;
  if (has_table_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->table_state(), output);
  }

  // optional int64 sitdown = 13;
  if (has_sitdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->sitdown(), output);
  }

  // optional int64 apply_banker_condition = 14;
  if (has_apply_banker_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->apply_banker_condition(), output);
  }

  // optional int64 apply_banker_maxscore = 15;
  if (has_apply_banker_maxscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->apply_banker_maxscore(), output);
  }

  // optional uint32 banker_max_time = 16;
  if (has_banker_max_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->banker_max_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* paijiu_table_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tableid(), target);
  }

  // optional bytes tablename = 2;
  if (has_tablename()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->tablename(), target);
  }

  // optional uint32 is_passwd = 3;
  if (has_is_passwd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->is_passwd(), target);
  }

  // optional int64 basescore = 4;
  if (has_basescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->basescore(), target);
  }

  // optional uint32 consume = 5;
  if (has_consume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->consume(), target);
  }

  // optional uint64 entermin = 6;
  if (has_entermin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->entermin(), target);
  }

  // optional uint32 duetime = 7;
  if (has_duetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->duetime(), target);
  }

  // optional uint32 feetype = 8;
  if (has_feetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->feetype(), target);
  }

  // optional int64 feevalue = 9;
  if (has_feevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->feevalue(), target);
  }

  // optional bytes hostname = 10;
  if (has_hostname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->hostname(), target);
  }

  // optional uint32 card_time = 11;
  if (has_card_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->card_time(), target);
  }

  // optional uint32 table_state = 12;
  if (has_table_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->table_state(), target);
  }

  // optional int64 sitdown = 13;
  if (has_sitdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->sitdown(), target);
  }

  // optional int64 apply_banker_condition = 14;
  if (has_apply_banker_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->apply_banker_condition(), target);
  }

  // optional int64 apply_banker_maxscore = 15;
  if (has_apply_banker_maxscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->apply_banker_maxscore(), target);
  }

  // optional uint32 banker_max_time = 16;
  if (has_banker_max_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->banker_max_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int paijiu_table_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tableid());
    }

    // optional bytes tablename = 2;
    if (has_tablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tablename());
    }

    // optional uint32 is_passwd = 3;
    if (has_is_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_passwd());
    }

    // optional int64 basescore = 4;
    if (has_basescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->basescore());
    }

    // optional uint32 consume = 5;
    if (has_consume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consume());
    }

    // optional uint64 entermin = 6;
    if (has_entermin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entermin());
    }

    // optional uint32 duetime = 7;
    if (has_duetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duetime());
    }

    // optional uint32 feetype = 8;
    if (has_feetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->feetype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 feevalue = 9;
    if (has_feevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->feevalue());
    }

    // optional bytes hostname = 10;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hostname());
    }

    // optional uint32 card_time = 11;
    if (has_card_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card_time());
    }

    // optional uint32 table_state = 12;
    if (has_table_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_state());
    }

    // optional int64 sitdown = 13;
    if (has_sitdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sitdown());
    }

    // optional int64 apply_banker_condition = 14;
    if (has_apply_banker_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->apply_banker_condition());
    }

    // optional int64 apply_banker_maxscore = 15;
    if (has_apply_banker_maxscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->apply_banker_maxscore());
    }

    // optional uint32 banker_max_time = 16;
    if (has_banker_max_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->banker_max_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void paijiu_table_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const paijiu_table_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const paijiu_table_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void paijiu_table_info::MergeFrom(const paijiu_table_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_tablename()) {
      set_tablename(from.tablename());
    }
    if (from.has_is_passwd()) {
      set_is_passwd(from.is_passwd());
    }
    if (from.has_basescore()) {
      set_basescore(from.basescore());
    }
    if (from.has_consume()) {
      set_consume(from.consume());
    }
    if (from.has_entermin()) {
      set_entermin(from.entermin());
    }
    if (from.has_duetime()) {
      set_duetime(from.duetime());
    }
    if (from.has_feetype()) {
      set_feetype(from.feetype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_feevalue()) {
      set_feevalue(from.feevalue());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_card_time()) {
      set_card_time(from.card_time());
    }
    if (from.has_table_state()) {
      set_table_state(from.table_state());
    }
    if (from.has_sitdown()) {
      set_sitdown(from.sitdown());
    }
    if (from.has_apply_banker_condition()) {
      set_apply_banker_condition(from.apply_banker_condition());
    }
    if (from.has_apply_banker_maxscore()) {
      set_apply_banker_maxscore(from.apply_banker_maxscore());
    }
    if (from.has_banker_max_time()) {
      set_banker_max_time(from.banker_max_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void paijiu_table_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void paijiu_table_info::CopyFrom(const paijiu_table_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool paijiu_table_info::IsInitialized() const {

  return true;
}

void paijiu_table_info::Swap(paijiu_table_info* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(tablename_, other->tablename_);
    std::swap(is_passwd_, other->is_passwd_);
    std::swap(basescore_, other->basescore_);
    std::swap(consume_, other->consume_);
    std::swap(entermin_, other->entermin_);
    std::swap(duetime_, other->duetime_);
    std::swap(feetype_, other->feetype_);
    std::swap(feevalue_, other->feevalue_);
    std::swap(hostname_, other->hostname_);
    std::swap(card_time_, other->card_time_);
    std::swap(table_state_, other->table_state_);
    std::swap(sitdown_, other->sitdown_);
    std::swap(apply_banker_condition_, other->apply_banker_condition_);
    std::swap(apply_banker_maxscore_, other->apply_banker_maxscore_);
    std::swap(banker_max_time_, other->banker_max_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata paijiu_table_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = paijiu_table_info_descriptor_;
  metadata.reflection = paijiu_table_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int everycolor_table_info::kBasescoreFieldNumber;
const int everycolor_table_info::kConsumeFieldNumber;
const int everycolor_table_info::kFeetypeFieldNumber;
const int everycolor_table_info::kFeevalueFieldNumber;
const int everycolor_table_info::kTableStateFieldNumber;
const int everycolor_table_info::kAddScoreTimeFieldNumber;
const int everycolor_table_info::kShowCardTimeFieldNumber;
#endif  // !_MSC_VER

everycolor_table_info::everycolor_table_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void everycolor_table_info::InitAsDefaultInstance() {
}

everycolor_table_info::everycolor_table_info(const everycolor_table_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void everycolor_table_info::SharedCtor() {
  _cached_size_ = 0;
  basescore_ = GOOGLE_LONGLONG(0);
  consume_ = 0u;
  feetype_ = 0u;
  feevalue_ = GOOGLE_LONGLONG(0);
  table_state_ = 0u;
  add_score_time_ = 0u;
  show_card_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

everycolor_table_info::~everycolor_table_info() {
  SharedDtor();
}

void everycolor_table_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void everycolor_table_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* everycolor_table_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return everycolor_table_info_descriptor_;
}

const everycolor_table_info& everycolor_table_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  return *default_instance_;
}

everycolor_table_info* everycolor_table_info::default_instance_ = NULL;

everycolor_table_info* everycolor_table_info::New() const {
  return new everycolor_table_info;
}

void everycolor_table_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    basescore_ = GOOGLE_LONGLONG(0);
    consume_ = 0u;
    feetype_ = 0u;
    feevalue_ = GOOGLE_LONGLONG(0);
    table_state_ = 0u;
    add_score_time_ = 0u;
    show_card_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool everycolor_table_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 basescore = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &basescore_)));
          set_has_basescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_consume;
        break;
      }

      // optional uint32 consume = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consume_)));
          set_has_consume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_feetype;
        break;
      }

      // optional uint32 feetype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &feetype_)));
          set_has_feetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_feevalue;
        break;
      }

      // optional int64 feevalue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feevalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &feevalue_)));
          set_has_feevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_table_state;
        break;
      }

      // optional uint32 table_state = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_state_)));
          set_has_table_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_add_score_time;
        break;
      }

      // optional uint32 add_score_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_score_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_score_time_)));
          set_has_add_score_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_show_card_time;
        break;
      }

      // optional uint32 show_card_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_card_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &show_card_time_)));
          set_has_show_card_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void everycolor_table_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 basescore = 1;
  if (has_basescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->basescore(), output);
  }

  // optional uint32 consume = 2;
  if (has_consume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->consume(), output);
  }

  // optional uint32 feetype = 3;
  if (has_feetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->feetype(), output);
  }

  // optional int64 feevalue = 4;
  if (has_feevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->feevalue(), output);
  }

  // optional uint32 table_state = 5;
  if (has_table_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->table_state(), output);
  }

  // optional uint32 add_score_time = 6;
  if (has_add_score_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->add_score_time(), output);
  }

  // optional uint32 show_card_time = 7;
  if (has_show_card_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->show_card_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* everycolor_table_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 basescore = 1;
  if (has_basescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->basescore(), target);
  }

  // optional uint32 consume = 2;
  if (has_consume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->consume(), target);
  }

  // optional uint32 feetype = 3;
  if (has_feetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->feetype(), target);
  }

  // optional int64 feevalue = 4;
  if (has_feevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->feevalue(), target);
  }

  // optional uint32 table_state = 5;
  if (has_table_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->table_state(), target);
  }

  // optional uint32 add_score_time = 6;
  if (has_add_score_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->add_score_time(), target);
  }

  // optional uint32 show_card_time = 7;
  if (has_show_card_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->show_card_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int everycolor_table_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 basescore = 1;
    if (has_basescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->basescore());
    }

    // optional uint32 consume = 2;
    if (has_consume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consume());
    }

    // optional uint32 feetype = 3;
    if (has_feetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->feetype());
    }

    // optional int64 feevalue = 4;
    if (has_feevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->feevalue());
    }

    // optional uint32 table_state = 5;
    if (has_table_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_state());
    }

    // optional uint32 add_score_time = 6;
    if (has_add_score_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->add_score_time());
    }

    // optional uint32 show_card_time = 7;
    if (has_show_card_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->show_card_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void everycolor_table_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const everycolor_table_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const everycolor_table_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void everycolor_table_info::MergeFrom(const everycolor_table_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_basescore()) {
      set_basescore(from.basescore());
    }
    if (from.has_consume()) {
      set_consume(from.consume());
    }
    if (from.has_feetype()) {
      set_feetype(from.feetype());
    }
    if (from.has_feevalue()) {
      set_feevalue(from.feevalue());
    }
    if (from.has_table_state()) {
      set_table_state(from.table_state());
    }
    if (from.has_add_score_time()) {
      set_add_score_time(from.add_score_time());
    }
    if (from.has_show_card_time()) {
      set_show_card_time(from.show_card_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void everycolor_table_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void everycolor_table_info::CopyFrom(const everycolor_table_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool everycolor_table_info::IsInitialized() const {

  return true;
}

void everycolor_table_info::Swap(everycolor_table_info* other) {
  if (other != this) {
    std::swap(basescore_, other->basescore_);
    std::swap(consume_, other->consume_);
    std::swap(feetype_, other->feetype_);
    std::swap(feevalue_, other->feevalue_);
    std::swap(table_state_, other->table_state_);
    std::swap(add_score_time_, other->add_score_time_);
    std::swap(show_card_time_, other->show_card_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata everycolor_table_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = everycolor_table_info_descriptor_;
  metadata.reflection = everycolor_table_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dice_table_info::kTableidFieldNumber;
const int dice_table_info::kTablenameFieldNumber;
const int dice_table_info::kIsPasswdFieldNumber;
const int dice_table_info::kBasescoreFieldNumber;
const int dice_table_info::kConsumeFieldNumber;
const int dice_table_info::kEnterminFieldNumber;
const int dice_table_info::kDuetimeFieldNumber;
const int dice_table_info::kFeetypeFieldNumber;
const int dice_table_info::kFeevalueFieldNumber;
const int dice_table_info::kHostnameFieldNumber;
const int dice_table_info::kFreeTimeFieldNumber;
const int dice_table_info::kCardTimeFieldNumber;
const int dice_table_info::kDispatchTimeFieldNumber;
const int dice_table_info::kTableStateFieldNumber;
const int dice_table_info::kSitdownFieldNumber;
const int dice_table_info::kApplyBankerConditionFieldNumber;
const int dice_table_info::kApplyBankerMaxscoreFieldNumber;
const int dice_table_info::kBankerMaxTimeFieldNumber;
#endif  // !_MSC_VER

dice_table_info::dice_table_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dice_table_info::InitAsDefaultInstance() {
}

dice_table_info::dice_table_info(const dice_table_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dice_table_info::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0u;
  tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_passwd_ = 0u;
  basescore_ = GOOGLE_LONGLONG(0);
  consume_ = 0u;
  entermin_ = GOOGLE_ULONGLONG(0);
  duetime_ = 0u;
  feetype_ = 0u;
  feevalue_ = GOOGLE_LONGLONG(0);
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  free_time_ = 0u;
  card_time_ = 0u;
  dispatch_time_ = 0u;
  table_state_ = 0u;
  sitdown_ = GOOGLE_LONGLONG(0);
  apply_banker_condition_ = GOOGLE_LONGLONG(0);
  apply_banker_maxscore_ = GOOGLE_LONGLONG(0);
  banker_max_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dice_table_info::~dice_table_info() {
  SharedDtor();
}

void dice_table_info::SharedDtor() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (this != default_instance_) {
  }
}

void dice_table_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dice_table_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dice_table_info_descriptor_;
}

const dice_table_info& dice_table_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  return *default_instance_;
}

dice_table_info* dice_table_info::default_instance_ = NULL;

dice_table_info* dice_table_info::New() const {
  return new dice_table_info;
}

void dice_table_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0u;
    if (has_tablename()) {
      if (tablename_ != &::google::protobuf::internal::kEmptyString) {
        tablename_->clear();
      }
    }
    is_passwd_ = 0u;
    basescore_ = GOOGLE_LONGLONG(0);
    consume_ = 0u;
    entermin_ = GOOGLE_ULONGLONG(0);
    duetime_ = 0u;
    feetype_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    feevalue_ = GOOGLE_LONGLONG(0);
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    free_time_ = 0u;
    card_time_ = 0u;
    dispatch_time_ = 0u;
    table_state_ = 0u;
    sitdown_ = GOOGLE_LONGLONG(0);
    apply_banker_condition_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    apply_banker_maxscore_ = GOOGLE_LONGLONG(0);
    banker_max_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dice_table_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tablename;
        break;
      }

      // optional bytes tablename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tablename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tablename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_passwd;
        break;
      }

      // optional uint32 is_passwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_passwd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_passwd_)));
          set_has_is_passwd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_basescore;
        break;
      }

      // optional int64 basescore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_basescore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &basescore_)));
          set_has_basescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_consume;
        break;
      }

      // optional uint32 consume = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consume_)));
          set_has_consume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_entermin;
        break;
      }

      // optional uint64 entermin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entermin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entermin_)));
          set_has_entermin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_duetime;
        break;
      }

      // optional uint32 duetime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duetime_)));
          set_has_duetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_feetype;
        break;
      }

      // optional uint32 feetype = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &feetype_)));
          set_has_feetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_feevalue;
        break;
      }

      // optional int64 feevalue = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feevalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &feevalue_)));
          set_has_feevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_hostname;
        break;
      }

      // optional bytes hostname = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hostname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_free_time;
        break;
      }

      // optional uint32 free_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &free_time_)));
          set_has_free_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_card_time;
        break;
      }

      // optional uint32 card_time = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_time_)));
          set_has_card_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_dispatch_time;
        break;
      }

      // optional uint32 dispatch_time = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dispatch_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dispatch_time_)));
          set_has_dispatch_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_table_state;
        break;
      }

      // optional uint32 table_state = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_state_)));
          set_has_table_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_sitdown;
        break;
      }

      // optional int64 sitdown = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sitdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sitdown_)));
          set_has_sitdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_apply_banker_condition;
        break;
      }

      // optional int64 apply_banker_condition = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_banker_condition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &apply_banker_condition_)));
          set_has_apply_banker_condition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_apply_banker_maxscore;
        break;
      }

      // optional int64 apply_banker_maxscore = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_banker_maxscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &apply_banker_maxscore_)));
          set_has_apply_banker_maxscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_banker_max_time;
        break;
      }

      // optional uint32 banker_max_time = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_max_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &banker_max_time_)));
          set_has_banker_max_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dice_table_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tableid(), output);
  }

  // optional bytes tablename = 2;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->tablename(), output);
  }

  // optional uint32 is_passwd = 3;
  if (has_is_passwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->is_passwd(), output);
  }

  // optional int64 basescore = 4;
  if (has_basescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->basescore(), output);
  }

  // optional uint32 consume = 5;
  if (has_consume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->consume(), output);
  }

  // optional uint64 entermin = 6;
  if (has_entermin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->entermin(), output);
  }

  // optional uint32 duetime = 7;
  if (has_duetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->duetime(), output);
  }

  // optional uint32 feetype = 8;
  if (has_feetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->feetype(), output);
  }

  // optional int64 feevalue = 9;
  if (has_feevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->feevalue(), output);
  }

  // optional bytes hostname = 10;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->hostname(), output);
  }

  // optional uint32 free_time = 11;
  if (has_free_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->free_time(), output);
  }

  // optional uint32 card_time = 12;
  if (has_card_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->card_time(), output);
  }

  // optional uint32 dispatch_time = 13;
  if (has_dispatch_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->dispatch_time(), output);
  }

  // optional uint32 table_state = 14;
  if (has_table_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->table_state(), output);
  }

  // optional int64 sitdown = 15;
  if (has_sitdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->sitdown(), output);
  }

  // optional int64 apply_banker_condition = 16;
  if (has_apply_banker_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->apply_banker_condition(), output);
  }

  // optional int64 apply_banker_maxscore = 17;
  if (has_apply_banker_maxscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->apply_banker_maxscore(), output);
  }

  // optional uint32 banker_max_time = 18;
  if (has_banker_max_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->banker_max_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dice_table_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tableid(), target);
  }

  // optional bytes tablename = 2;
  if (has_tablename()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->tablename(), target);
  }

  // optional uint32 is_passwd = 3;
  if (has_is_passwd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->is_passwd(), target);
  }

  // optional int64 basescore = 4;
  if (has_basescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->basescore(), target);
  }

  // optional uint32 consume = 5;
  if (has_consume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->consume(), target);
  }

  // optional uint64 entermin = 6;
  if (has_entermin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->entermin(), target);
  }

  // optional uint32 duetime = 7;
  if (has_duetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->duetime(), target);
  }

  // optional uint32 feetype = 8;
  if (has_feetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->feetype(), target);
  }

  // optional int64 feevalue = 9;
  if (has_feevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->feevalue(), target);
  }

  // optional bytes hostname = 10;
  if (has_hostname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->hostname(), target);
  }

  // optional uint32 free_time = 11;
  if (has_free_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->free_time(), target);
  }

  // optional uint32 card_time = 12;
  if (has_card_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->card_time(), target);
  }

  // optional uint32 dispatch_time = 13;
  if (has_dispatch_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->dispatch_time(), target);
  }

  // optional uint32 table_state = 14;
  if (has_table_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->table_state(), target);
  }

  // optional int64 sitdown = 15;
  if (has_sitdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->sitdown(), target);
  }

  // optional int64 apply_banker_condition = 16;
  if (has_apply_banker_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->apply_banker_condition(), target);
  }

  // optional int64 apply_banker_maxscore = 17;
  if (has_apply_banker_maxscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->apply_banker_maxscore(), target);
  }

  // optional uint32 banker_max_time = 18;
  if (has_banker_max_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->banker_max_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dice_table_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tableid());
    }

    // optional bytes tablename = 2;
    if (has_tablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tablename());
    }

    // optional uint32 is_passwd = 3;
    if (has_is_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_passwd());
    }

    // optional int64 basescore = 4;
    if (has_basescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->basescore());
    }

    // optional uint32 consume = 5;
    if (has_consume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consume());
    }

    // optional uint64 entermin = 6;
    if (has_entermin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entermin());
    }

    // optional uint32 duetime = 7;
    if (has_duetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duetime());
    }

    // optional uint32 feetype = 8;
    if (has_feetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->feetype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 feevalue = 9;
    if (has_feevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->feevalue());
    }

    // optional bytes hostname = 10;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hostname());
    }

    // optional uint32 free_time = 11;
    if (has_free_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->free_time());
    }

    // optional uint32 card_time = 12;
    if (has_card_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card_time());
    }

    // optional uint32 dispatch_time = 13;
    if (has_dispatch_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dispatch_time());
    }

    // optional uint32 table_state = 14;
    if (has_table_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_state());
    }

    // optional int64 sitdown = 15;
    if (has_sitdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sitdown());
    }

    // optional int64 apply_banker_condition = 16;
    if (has_apply_banker_condition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->apply_banker_condition());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int64 apply_banker_maxscore = 17;
    if (has_apply_banker_maxscore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->apply_banker_maxscore());
    }

    // optional uint32 banker_max_time = 18;
    if (has_banker_max_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->banker_max_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dice_table_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dice_table_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dice_table_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dice_table_info::MergeFrom(const dice_table_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_tablename()) {
      set_tablename(from.tablename());
    }
    if (from.has_is_passwd()) {
      set_is_passwd(from.is_passwd());
    }
    if (from.has_basescore()) {
      set_basescore(from.basescore());
    }
    if (from.has_consume()) {
      set_consume(from.consume());
    }
    if (from.has_entermin()) {
      set_entermin(from.entermin());
    }
    if (from.has_duetime()) {
      set_duetime(from.duetime());
    }
    if (from.has_feetype()) {
      set_feetype(from.feetype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_feevalue()) {
      set_feevalue(from.feevalue());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_free_time()) {
      set_free_time(from.free_time());
    }
    if (from.has_card_time()) {
      set_card_time(from.card_time());
    }
    if (from.has_dispatch_time()) {
      set_dispatch_time(from.dispatch_time());
    }
    if (from.has_table_state()) {
      set_table_state(from.table_state());
    }
    if (from.has_sitdown()) {
      set_sitdown(from.sitdown());
    }
    if (from.has_apply_banker_condition()) {
      set_apply_banker_condition(from.apply_banker_condition());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_apply_banker_maxscore()) {
      set_apply_banker_maxscore(from.apply_banker_maxscore());
    }
    if (from.has_banker_max_time()) {
      set_banker_max_time(from.banker_max_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dice_table_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dice_table_info::CopyFrom(const dice_table_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dice_table_info::IsInitialized() const {

  return true;
}

void dice_table_info::Swap(dice_table_info* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(tablename_, other->tablename_);
    std::swap(is_passwd_, other->is_passwd_);
    std::swap(basescore_, other->basescore_);
    std::swap(consume_, other->consume_);
    std::swap(entermin_, other->entermin_);
    std::swap(duetime_, other->duetime_);
    std::swap(feetype_, other->feetype_);
    std::swap(feevalue_, other->feevalue_);
    std::swap(hostname_, other->hostname_);
    std::swap(free_time_, other->free_time_);
    std::swap(card_time_, other->card_time_);
    std::swap(dispatch_time_, other->dispatch_time_);
    std::swap(table_state_, other->table_state_);
    std::swap(sitdown_, other->sitdown_);
    std::swap(apply_banker_condition_, other->apply_banker_condition_);
    std::swap(apply_banker_maxscore_, other->apply_banker_maxscore_);
    std::swap(banker_max_time_, other->banker_max_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dice_table_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dice_table_info_descriptor_;
  metadata.reflection = dice_table_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int majiang_table_info::kTableidFieldNumber;
const int majiang_table_info::kTablenameFieldNumber;
const int majiang_table_info::kIsPasswdFieldNumber;
const int majiang_table_info::kDealFieldNumber;
const int majiang_table_info::kBasescoreFieldNumber;
const int majiang_table_info::kConsumeFieldNumber;
const int majiang_table_info::kEnterminFieldNumber;
const int majiang_table_info::kDuetimeFieldNumber;
const int majiang_table_info::kFeetypeFieldNumber;
const int majiang_table_info::kFeevalueFieldNumber;
const int majiang_table_info::kHostnameFieldNumber;
const int majiang_table_info::kShowHandNumFieldNumber;
const int majiang_table_info::kCallTimeFieldNumber;
const int majiang_table_info::kCardTimeFieldNumber;
const int majiang_table_info::kPlayTypeFieldNumber;
const int majiang_table_info::kSeatNumFieldNumber;
const int majiang_table_info::kKindCardsFieldNumber;
#endif  // !_MSC_VER

majiang_table_info::majiang_table_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void majiang_table_info::InitAsDefaultInstance() {
}

majiang_table_info::majiang_table_info(const majiang_table_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void majiang_table_info::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0u;
  tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_passwd_ = 0u;
  deal_ = 0u;
  basescore_ = GOOGLE_LONGLONG(0);
  consume_ = 0u;
  entermin_ = GOOGLE_ULONGLONG(0);
  duetime_ = 0u;
  feetype_ = 0u;
  feevalue_ = GOOGLE_LONGLONG(0);
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  show_hand_num_ = 0u;
  call_time_ = 0u;
  card_time_ = 0u;
  play_type_ = 0u;
  seat_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

majiang_table_info::~majiang_table_info() {
  SharedDtor();
}

void majiang_table_info::SharedDtor() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (this != default_instance_) {
  }
}

void majiang_table_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* majiang_table_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return majiang_table_info_descriptor_;
}

const majiang_table_info& majiang_table_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  return *default_instance_;
}

majiang_table_info* majiang_table_info::default_instance_ = NULL;

majiang_table_info* majiang_table_info::New() const {
  return new majiang_table_info;
}

void majiang_table_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0u;
    if (has_tablename()) {
      if (tablename_ != &::google::protobuf::internal::kEmptyString) {
        tablename_->clear();
      }
    }
    is_passwd_ = 0u;
    deal_ = 0u;
    basescore_ = GOOGLE_LONGLONG(0);
    consume_ = 0u;
    entermin_ = GOOGLE_ULONGLONG(0);
    duetime_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    feetype_ = 0u;
    feevalue_ = GOOGLE_LONGLONG(0);
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    show_hand_num_ = 0u;
    call_time_ = 0u;
    card_time_ = 0u;
    play_type_ = 0u;
    seat_num_ = 0u;
  }
  kind_cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool majiang_table_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tablename;
        break;
      }

      // optional bytes tablename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tablename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tablename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_passwd;
        break;
      }

      // optional uint32 is_passwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_passwd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_passwd_)));
          set_has_is_passwd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_deal;
        break;
      }

      // optional uint32 deal = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deal_)));
          set_has_deal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_basescore;
        break;
      }

      // optional int64 basescore = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_basescore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &basescore_)));
          set_has_basescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_consume;
        break;
      }

      // optional uint32 consume = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consume_)));
          set_has_consume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_entermin;
        break;
      }

      // optional uint64 entermin = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entermin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entermin_)));
          set_has_entermin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_duetime;
        break;
      }

      // optional uint32 duetime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duetime_)));
          set_has_duetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_feetype;
        break;
      }

      // optional uint32 feetype = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &feetype_)));
          set_has_feetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_feevalue;
        break;
      }

      // optional int64 feevalue = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feevalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &feevalue_)));
          set_has_feevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_hostname;
        break;
      }

      // optional bytes hostname = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hostname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_show_hand_num;
        break;
      }

      // optional uint32 show_hand_num = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_hand_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &show_hand_num_)));
          set_has_show_hand_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_call_time;
        break;
      }

      // optional uint32 call_time = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_call_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &call_time_)));
          set_has_call_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_card_time;
        break;
      }

      // optional uint32 card_time = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_time_)));
          set_has_card_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_play_type;
        break;
      }

      // optional uint32 play_type = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_play_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_type_)));
          set_has_play_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_seat_num;
        break;
      }

      // optional uint32 seat_num = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_num_)));
          set_has_seat_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_kind_cards;
        break;
      }

      // repeated uint32 kind_cards = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kind_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 136, input, this->mutable_kind_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_kind_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_kind_cards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void majiang_table_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tableid(), output);
  }

  // optional bytes tablename = 2;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->tablename(), output);
  }

  // optional uint32 is_passwd = 3;
  if (has_is_passwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->is_passwd(), output);
  }

  // optional uint32 deal = 4;
  if (has_deal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->deal(), output);
  }

  // optional int64 basescore = 5;
  if (has_basescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->basescore(), output);
  }

  // optional uint32 consume = 6;
  if (has_consume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->consume(), output);
  }

  // optional uint64 entermin = 7;
  if (has_entermin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->entermin(), output);
  }

  // optional uint32 duetime = 8;
  if (has_duetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->duetime(), output);
  }

  // optional uint32 feetype = 9;
  if (has_feetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->feetype(), output);
  }

  // optional int64 feevalue = 10;
  if (has_feevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->feevalue(), output);
  }

  // optional bytes hostname = 11;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->hostname(), output);
  }

  // optional uint32 show_hand_num = 12;
  if (has_show_hand_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->show_hand_num(), output);
  }

  // optional uint32 call_time = 13;
  if (has_call_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->call_time(), output);
  }

  // optional uint32 card_time = 14;
  if (has_card_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->card_time(), output);
  }

  // optional uint32 play_type = 15;
  if (has_play_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->play_type(), output);
  }

  // optional uint32 seat_num = 16;
  if (has_seat_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->seat_num(), output);
  }

  // repeated uint32 kind_cards = 17;
  for (int i = 0; i < this->kind_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      17, this->kind_cards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* majiang_table_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tableid(), target);
  }

  // optional bytes tablename = 2;
  if (has_tablename()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->tablename(), target);
  }

  // optional uint32 is_passwd = 3;
  if (has_is_passwd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->is_passwd(), target);
  }

  // optional uint32 deal = 4;
  if (has_deal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->deal(), target);
  }

  // optional int64 basescore = 5;
  if (has_basescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->basescore(), target);
  }

  // optional uint32 consume = 6;
  if (has_consume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->consume(), target);
  }

  // optional uint64 entermin = 7;
  if (has_entermin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->entermin(), target);
  }

  // optional uint32 duetime = 8;
  if (has_duetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->duetime(), target);
  }

  // optional uint32 feetype = 9;
  if (has_feetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->feetype(), target);
  }

  // optional int64 feevalue = 10;
  if (has_feevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->feevalue(), target);
  }

  // optional bytes hostname = 11;
  if (has_hostname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->hostname(), target);
  }

  // optional uint32 show_hand_num = 12;
  if (has_show_hand_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->show_hand_num(), target);
  }

  // optional uint32 call_time = 13;
  if (has_call_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->call_time(), target);
  }

  // optional uint32 card_time = 14;
  if (has_card_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->card_time(), target);
  }

  // optional uint32 play_type = 15;
  if (has_play_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->play_type(), target);
  }

  // optional uint32 seat_num = 16;
  if (has_seat_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->seat_num(), target);
  }

  // repeated uint32 kind_cards = 17;
  for (int i = 0; i < this->kind_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(17, this->kind_cards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int majiang_table_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tableid());
    }

    // optional bytes tablename = 2;
    if (has_tablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tablename());
    }

    // optional uint32 is_passwd = 3;
    if (has_is_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_passwd());
    }

    // optional uint32 deal = 4;
    if (has_deal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deal());
    }

    // optional int64 basescore = 5;
    if (has_basescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->basescore());
    }

    // optional uint32 consume = 6;
    if (has_consume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consume());
    }

    // optional uint64 entermin = 7;
    if (has_entermin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entermin());
    }

    // optional uint32 duetime = 8;
    if (has_duetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duetime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 feetype = 9;
    if (has_feetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->feetype());
    }

    // optional int64 feevalue = 10;
    if (has_feevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->feevalue());
    }

    // optional bytes hostname = 11;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hostname());
    }

    // optional uint32 show_hand_num = 12;
    if (has_show_hand_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->show_hand_num());
    }

    // optional uint32 call_time = 13;
    if (has_call_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->call_time());
    }

    // optional uint32 card_time = 14;
    if (has_card_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card_time());
    }

    // optional uint32 play_type = 15;
    if (has_play_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->play_type());
    }

    // optional uint32 seat_num = 16;
    if (has_seat_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seat_num());
    }

  }
  // repeated uint32 kind_cards = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->kind_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->kind_cards(i));
    }
    total_size += 2 * this->kind_cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void majiang_table_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const majiang_table_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const majiang_table_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void majiang_table_info::MergeFrom(const majiang_table_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  kind_cards_.MergeFrom(from.kind_cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_tablename()) {
      set_tablename(from.tablename());
    }
    if (from.has_is_passwd()) {
      set_is_passwd(from.is_passwd());
    }
    if (from.has_deal()) {
      set_deal(from.deal());
    }
    if (from.has_basescore()) {
      set_basescore(from.basescore());
    }
    if (from.has_consume()) {
      set_consume(from.consume());
    }
    if (from.has_entermin()) {
      set_entermin(from.entermin());
    }
    if (from.has_duetime()) {
      set_duetime(from.duetime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_feetype()) {
      set_feetype(from.feetype());
    }
    if (from.has_feevalue()) {
      set_feevalue(from.feevalue());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_show_hand_num()) {
      set_show_hand_num(from.show_hand_num());
    }
    if (from.has_call_time()) {
      set_call_time(from.call_time());
    }
    if (from.has_card_time()) {
      set_card_time(from.card_time());
    }
    if (from.has_play_type()) {
      set_play_type(from.play_type());
    }
    if (from.has_seat_num()) {
      set_seat_num(from.seat_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void majiang_table_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void majiang_table_info::CopyFrom(const majiang_table_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool majiang_table_info::IsInitialized() const {

  return true;
}

void majiang_table_info::Swap(majiang_table_info* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(tablename_, other->tablename_);
    std::swap(is_passwd_, other->is_passwd_);
    std::swap(deal_, other->deal_);
    std::swap(basescore_, other->basescore_);
    std::swap(consume_, other->consume_);
    std::swap(entermin_, other->entermin_);
    std::swap(duetime_, other->duetime_);
    std::swap(feetype_, other->feetype_);
    std::swap(feevalue_, other->feevalue_);
    std::swap(hostname_, other->hostname_);
    std::swap(show_hand_num_, other->show_hand_num_);
    std::swap(call_time_, other->call_time_);
    std::swap(card_time_, other->card_time_);
    std::swap(play_type_, other->play_type_);
    std::swap(seat_num_, other->seat_num_);
    kind_cards_.Swap(&other->kind_cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata majiang_table_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = majiang_table_info_descriptor_;
  metadata.reflection = majiang_table_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int slot_table_info::kTableidFieldNumber;
const int slot_table_info::kTablenameFieldNumber;
const int slot_table_info::kIsPasswdFieldNumber;
const int slot_table_info::kHostnameFieldNumber;
const int slot_table_info::kBasescoreFieldNumber;
const int slot_table_info::kConsumeFieldNumber;
const int slot_table_info::kEnterminFieldNumber;
const int slot_table_info::kDuetimeFieldNumber;
const int slot_table_info::kFeetypeFieldNumber;
const int slot_table_info::kFeevalueFieldNumber;
const int slot_table_info::kSeatNumFieldNumber;
const int slot_table_info::kJackpotScoreFieldNumber;
#endif  // !_MSC_VER

slot_table_info::slot_table_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void slot_table_info::InitAsDefaultInstance() {
}

slot_table_info::slot_table_info(const slot_table_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void slot_table_info::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0u;
  tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_passwd_ = 0u;
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  basescore_ = GOOGLE_LONGLONG(0);
  consume_ = 0u;
  entermin_ = GOOGLE_ULONGLONG(0);
  duetime_ = 0u;
  feetype_ = 0u;
  feevalue_ = GOOGLE_LONGLONG(0);
  seat_num_ = 0u;
  jackpot_score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

slot_table_info::~slot_table_info() {
  SharedDtor();
}

void slot_table_info::SharedDtor() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (this != default_instance_) {
  }
}

void slot_table_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* slot_table_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return slot_table_info_descriptor_;
}

const slot_table_info& slot_table_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  return *default_instance_;
}

slot_table_info* slot_table_info::default_instance_ = NULL;

slot_table_info* slot_table_info::New() const {
  return new slot_table_info;
}

void slot_table_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0u;
    if (has_tablename()) {
      if (tablename_ != &::google::protobuf::internal::kEmptyString) {
        tablename_->clear();
      }
    }
    is_passwd_ = 0u;
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    basescore_ = GOOGLE_LONGLONG(0);
    consume_ = 0u;
    entermin_ = GOOGLE_ULONGLONG(0);
    duetime_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    feetype_ = 0u;
    feevalue_ = GOOGLE_LONGLONG(0);
    seat_num_ = 0u;
    jackpot_score_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool slot_table_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tablename;
        break;
      }

      // optional bytes tablename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tablename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tablename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_passwd;
        break;
      }

      // optional uint32 is_passwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_passwd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_passwd_)));
          set_has_is_passwd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_hostname;
        break;
      }

      // optional bytes hostname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hostname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_basescore;
        break;
      }

      // optional int64 basescore = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_basescore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &basescore_)));
          set_has_basescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_consume;
        break;
      }

      // optional uint32 consume = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consume_)));
          set_has_consume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_entermin;
        break;
      }

      // optional uint64 entermin = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entermin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entermin_)));
          set_has_entermin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_duetime;
        break;
      }

      // optional uint32 duetime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duetime_)));
          set_has_duetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_feetype;
        break;
      }

      // optional uint32 feetype = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &feetype_)));
          set_has_feetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_feevalue;
        break;
      }

      // optional int64 feevalue = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feevalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &feevalue_)));
          set_has_feevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_seat_num;
        break;
      }

      // optional uint32 seat_num = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_num_)));
          set_has_seat_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_jackpot_score;
        break;
      }

      // optional uint32 jackpot_score = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jackpot_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jackpot_score_)));
          set_has_jackpot_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void slot_table_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tableid(), output);
  }

  // optional bytes tablename = 2;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->tablename(), output);
  }

  // optional uint32 is_passwd = 3;
  if (has_is_passwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->is_passwd(), output);
  }

  // optional bytes hostname = 4;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->hostname(), output);
  }

  // optional int64 basescore = 5;
  if (has_basescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->basescore(), output);
  }

  // optional uint32 consume = 6;
  if (has_consume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->consume(), output);
  }

  // optional uint64 entermin = 7;
  if (has_entermin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->entermin(), output);
  }

  // optional uint32 duetime = 8;
  if (has_duetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->duetime(), output);
  }

  // optional uint32 feetype = 9;
  if (has_feetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->feetype(), output);
  }

  // optional int64 feevalue = 10;
  if (has_feevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->feevalue(), output);
  }

  // optional uint32 seat_num = 11;
  if (has_seat_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->seat_num(), output);
  }

  // optional uint32 jackpot_score = 12;
  if (has_jackpot_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->jackpot_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* slot_table_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tableid(), target);
  }

  // optional bytes tablename = 2;
  if (has_tablename()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->tablename(), target);
  }

  // optional uint32 is_passwd = 3;
  if (has_is_passwd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->is_passwd(), target);
  }

  // optional bytes hostname = 4;
  if (has_hostname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->hostname(), target);
  }

  // optional int64 basescore = 5;
  if (has_basescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->basescore(), target);
  }

  // optional uint32 consume = 6;
  if (has_consume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->consume(), target);
  }

  // optional uint64 entermin = 7;
  if (has_entermin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->entermin(), target);
  }

  // optional uint32 duetime = 8;
  if (has_duetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->duetime(), target);
  }

  // optional uint32 feetype = 9;
  if (has_feetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->feetype(), target);
  }

  // optional int64 feevalue = 10;
  if (has_feevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->feevalue(), target);
  }

  // optional uint32 seat_num = 11;
  if (has_seat_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->seat_num(), target);
  }

  // optional uint32 jackpot_score = 12;
  if (has_jackpot_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->jackpot_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int slot_table_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tableid());
    }

    // optional bytes tablename = 2;
    if (has_tablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tablename());
    }

    // optional uint32 is_passwd = 3;
    if (has_is_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_passwd());
    }

    // optional bytes hostname = 4;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hostname());
    }

    // optional int64 basescore = 5;
    if (has_basescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->basescore());
    }

    // optional uint32 consume = 6;
    if (has_consume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consume());
    }

    // optional uint64 entermin = 7;
    if (has_entermin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entermin());
    }

    // optional uint32 duetime = 8;
    if (has_duetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duetime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 feetype = 9;
    if (has_feetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->feetype());
    }

    // optional int64 feevalue = 10;
    if (has_feevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->feevalue());
    }

    // optional uint32 seat_num = 11;
    if (has_seat_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seat_num());
    }

    // optional uint32 jackpot_score = 12;
    if (has_jackpot_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jackpot_score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void slot_table_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const slot_table_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const slot_table_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void slot_table_info::MergeFrom(const slot_table_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_tablename()) {
      set_tablename(from.tablename());
    }
    if (from.has_is_passwd()) {
      set_is_passwd(from.is_passwd());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_basescore()) {
      set_basescore(from.basescore());
    }
    if (from.has_consume()) {
      set_consume(from.consume());
    }
    if (from.has_entermin()) {
      set_entermin(from.entermin());
    }
    if (from.has_duetime()) {
      set_duetime(from.duetime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_feetype()) {
      set_feetype(from.feetype());
    }
    if (from.has_feevalue()) {
      set_feevalue(from.feevalue());
    }
    if (from.has_seat_num()) {
      set_seat_num(from.seat_num());
    }
    if (from.has_jackpot_score()) {
      set_jackpot_score(from.jackpot_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void slot_table_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void slot_table_info::CopyFrom(const slot_table_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool slot_table_info::IsInitialized() const {

  return true;
}

void slot_table_info::Swap(slot_table_info* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(tablename_, other->tablename_);
    std::swap(is_passwd_, other->is_passwd_);
    std::swap(hostname_, other->hostname_);
    std::swap(basescore_, other->basescore_);
    std::swap(consume_, other->consume_);
    std::swap(entermin_, other->entermin_);
    std::swap(duetime_, other->duetime_);
    std::swap(feetype_, other->feetype_);
    std::swap(feevalue_, other->feevalue_);
    std::swap(seat_num_, other->seat_num_);
    std::swap(jackpot_score_, other->jackpot_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata slot_table_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = slot_table_info_descriptor_;
  metadata.reflection = slot_table_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int war_table_info::kTableidFieldNumber;
const int war_table_info::kTablenameFieldNumber;
const int war_table_info::kIsPasswdFieldNumber;
const int war_table_info::kBasescoreFieldNumber;
const int war_table_info::kConsumeFieldNumber;
const int war_table_info::kEnterminFieldNumber;
const int war_table_info::kDuetimeFieldNumber;
const int war_table_info::kFeetypeFieldNumber;
const int war_table_info::kFeevalueFieldNumber;
const int war_table_info::kHostnameFieldNumber;
const int war_table_info::kCardTimeFieldNumber;
const int war_table_info::kTableStateFieldNumber;
const int war_table_info::kSitdownFieldNumber;
#endif  // !_MSC_VER

war_table_info::war_table_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void war_table_info::InitAsDefaultInstance() {
}

war_table_info::war_table_info(const war_table_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void war_table_info::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0u;
  tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_passwd_ = 0u;
  basescore_ = GOOGLE_LONGLONG(0);
  consume_ = 0u;
  entermin_ = GOOGLE_ULONGLONG(0);
  duetime_ = 0u;
  feetype_ = 0u;
  feevalue_ = GOOGLE_LONGLONG(0);
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  card_time_ = 0u;
  table_state_ = 0u;
  sitdown_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

war_table_info::~war_table_info() {
  SharedDtor();
}

void war_table_info::SharedDtor() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (this != default_instance_) {
  }
}

void war_table_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* war_table_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return war_table_info_descriptor_;
}

const war_table_info& war_table_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  return *default_instance_;
}

war_table_info* war_table_info::default_instance_ = NULL;

war_table_info* war_table_info::New() const {
  return new war_table_info;
}

void war_table_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0u;
    if (has_tablename()) {
      if (tablename_ != &::google::protobuf::internal::kEmptyString) {
        tablename_->clear();
      }
    }
    is_passwd_ = 0u;
    basescore_ = GOOGLE_LONGLONG(0);
    consume_ = 0u;
    entermin_ = GOOGLE_ULONGLONG(0);
    duetime_ = 0u;
    feetype_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    feevalue_ = GOOGLE_LONGLONG(0);
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    card_time_ = 0u;
    table_state_ = 0u;
    sitdown_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool war_table_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tablename;
        break;
      }

      // optional bytes tablename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tablename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tablename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_passwd;
        break;
      }

      // optional uint32 is_passwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_passwd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_passwd_)));
          set_has_is_passwd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_basescore;
        break;
      }

      // optional int64 basescore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_basescore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &basescore_)));
          set_has_basescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_consume;
        break;
      }

      // optional uint32 consume = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consume_)));
          set_has_consume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_entermin;
        break;
      }

      // optional uint64 entermin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entermin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entermin_)));
          set_has_entermin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_duetime;
        break;
      }

      // optional uint32 duetime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duetime_)));
          set_has_duetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_feetype;
        break;
      }

      // optional uint32 feetype = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &feetype_)));
          set_has_feetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_feevalue;
        break;
      }

      // optional int64 feevalue = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feevalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &feevalue_)));
          set_has_feevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_hostname;
        break;
      }

      // optional bytes hostname = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hostname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_card_time;
        break;
      }

      // optional uint32 card_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_time_)));
          set_has_card_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_table_state;
        break;
      }

      // optional uint32 table_state = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_state_)));
          set_has_table_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_sitdown;
        break;
      }

      // optional int64 sitdown = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sitdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sitdown_)));
          set_has_sitdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void war_table_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tableid(), output);
  }

  // optional bytes tablename = 2;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->tablename(), output);
  }

  // optional uint32 is_passwd = 3;
  if (has_is_passwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->is_passwd(), output);
  }

  // optional int64 basescore = 4;
  if (has_basescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->basescore(), output);
  }

  // optional uint32 consume = 5;
  if (has_consume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->consume(), output);
  }

  // optional uint64 entermin = 6;
  if (has_entermin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->entermin(), output);
  }

  // optional uint32 duetime = 7;
  if (has_duetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->duetime(), output);
  }

  // optional uint32 feetype = 8;
  if (has_feetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->feetype(), output);
  }

  // optional int64 feevalue = 9;
  if (has_feevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->feevalue(), output);
  }

  // optional bytes hostname = 10;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->hostname(), output);
  }

  // optional uint32 card_time = 11;
  if (has_card_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->card_time(), output);
  }

  // optional uint32 table_state = 12;
  if (has_table_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->table_state(), output);
  }

  // optional int64 sitdown = 13;
  if (has_sitdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->sitdown(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* war_table_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tableid(), target);
  }

  // optional bytes tablename = 2;
  if (has_tablename()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->tablename(), target);
  }

  // optional uint32 is_passwd = 3;
  if (has_is_passwd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->is_passwd(), target);
  }

  // optional int64 basescore = 4;
  if (has_basescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->basescore(), target);
  }

  // optional uint32 consume = 5;
  if (has_consume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->consume(), target);
  }

  // optional uint64 entermin = 6;
  if (has_entermin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->entermin(), target);
  }

  // optional uint32 duetime = 7;
  if (has_duetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->duetime(), target);
  }

  // optional uint32 feetype = 8;
  if (has_feetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->feetype(), target);
  }

  // optional int64 feevalue = 9;
  if (has_feevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->feevalue(), target);
  }

  // optional bytes hostname = 10;
  if (has_hostname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->hostname(), target);
  }

  // optional uint32 card_time = 11;
  if (has_card_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->card_time(), target);
  }

  // optional uint32 table_state = 12;
  if (has_table_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->table_state(), target);
  }

  // optional int64 sitdown = 13;
  if (has_sitdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->sitdown(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int war_table_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tableid());
    }

    // optional bytes tablename = 2;
    if (has_tablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tablename());
    }

    // optional uint32 is_passwd = 3;
    if (has_is_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_passwd());
    }

    // optional int64 basescore = 4;
    if (has_basescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->basescore());
    }

    // optional uint32 consume = 5;
    if (has_consume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consume());
    }

    // optional uint64 entermin = 6;
    if (has_entermin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entermin());
    }

    // optional uint32 duetime = 7;
    if (has_duetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duetime());
    }

    // optional uint32 feetype = 8;
    if (has_feetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->feetype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 feevalue = 9;
    if (has_feevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->feevalue());
    }

    // optional bytes hostname = 10;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hostname());
    }

    // optional uint32 card_time = 11;
    if (has_card_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card_time());
    }

    // optional uint32 table_state = 12;
    if (has_table_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_state());
    }

    // optional int64 sitdown = 13;
    if (has_sitdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sitdown());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void war_table_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const war_table_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const war_table_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void war_table_info::MergeFrom(const war_table_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_tablename()) {
      set_tablename(from.tablename());
    }
    if (from.has_is_passwd()) {
      set_is_passwd(from.is_passwd());
    }
    if (from.has_basescore()) {
      set_basescore(from.basescore());
    }
    if (from.has_consume()) {
      set_consume(from.consume());
    }
    if (from.has_entermin()) {
      set_entermin(from.entermin());
    }
    if (from.has_duetime()) {
      set_duetime(from.duetime());
    }
    if (from.has_feetype()) {
      set_feetype(from.feetype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_feevalue()) {
      set_feevalue(from.feevalue());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_card_time()) {
      set_card_time(from.card_time());
    }
    if (from.has_table_state()) {
      set_table_state(from.table_state());
    }
    if (from.has_sitdown()) {
      set_sitdown(from.sitdown());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void war_table_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void war_table_info::CopyFrom(const war_table_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool war_table_info::IsInitialized() const {

  return true;
}

void war_table_info::Swap(war_table_info* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(tablename_, other->tablename_);
    std::swap(is_passwd_, other->is_passwd_);
    std::swap(basescore_, other->basescore_);
    std::swap(consume_, other->consume_);
    std::swap(entermin_, other->entermin_);
    std::swap(duetime_, other->duetime_);
    std::swap(feetype_, other->feetype_);
    std::swap(feevalue_, other->feevalue_);
    std::swap(hostname_, other->hostname_);
    std::swap(card_time_, other->card_time_);
    std::swap(table_state_, other->table_state_);
    std::swap(sitdown_, other->sitdown_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata war_table_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = war_table_info_descriptor_;
  metadata.reflection = war_table_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fight_table_info::kTableidFieldNumber;
const int fight_table_info::kTablenameFieldNumber;
const int fight_table_info::kIsPasswdFieldNumber;
const int fight_table_info::kBasescoreFieldNumber;
const int fight_table_info::kConsumeFieldNumber;
const int fight_table_info::kEnterminFieldNumber;
const int fight_table_info::kDuetimeFieldNumber;
const int fight_table_info::kFeetypeFieldNumber;
const int fight_table_info::kFeevalueFieldNumber;
const int fight_table_info::kHostnameFieldNumber;
const int fight_table_info::kCardTimeFieldNumber;
const int fight_table_info::kTableStateFieldNumber;
const int fight_table_info::kSitdownFieldNumber;
#endif  // !_MSC_VER

fight_table_info::fight_table_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fight_table_info::InitAsDefaultInstance() {
}

fight_table_info::fight_table_info(const fight_table_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fight_table_info::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0u;
  tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_passwd_ = 0u;
  basescore_ = GOOGLE_LONGLONG(0);
  consume_ = 0u;
  entermin_ = GOOGLE_ULONGLONG(0);
  duetime_ = 0u;
  feetype_ = 0u;
  feevalue_ = GOOGLE_LONGLONG(0);
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  card_time_ = 0u;
  table_state_ = 0u;
  sitdown_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fight_table_info::~fight_table_info() {
  SharedDtor();
}

void fight_table_info::SharedDtor() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (this != default_instance_) {
  }
}

void fight_table_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fight_table_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fight_table_info_descriptor_;
}

const fight_table_info& fight_table_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  return *default_instance_;
}

fight_table_info* fight_table_info::default_instance_ = NULL;

fight_table_info* fight_table_info::New() const {
  return new fight_table_info;
}

void fight_table_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0u;
    if (has_tablename()) {
      if (tablename_ != &::google::protobuf::internal::kEmptyString) {
        tablename_->clear();
      }
    }
    is_passwd_ = 0u;
    basescore_ = GOOGLE_LONGLONG(0);
    consume_ = 0u;
    entermin_ = GOOGLE_ULONGLONG(0);
    duetime_ = 0u;
    feetype_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    feevalue_ = GOOGLE_LONGLONG(0);
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    card_time_ = 0u;
    table_state_ = 0u;
    sitdown_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fight_table_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tablename;
        break;
      }

      // optional bytes tablename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tablename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tablename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_passwd;
        break;
      }

      // optional uint32 is_passwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_passwd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_passwd_)));
          set_has_is_passwd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_basescore;
        break;
      }

      // optional int64 basescore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_basescore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &basescore_)));
          set_has_basescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_consume;
        break;
      }

      // optional uint32 consume = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consume_)));
          set_has_consume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_entermin;
        break;
      }

      // optional uint64 entermin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entermin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entermin_)));
          set_has_entermin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_duetime;
        break;
      }

      // optional uint32 duetime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duetime_)));
          set_has_duetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_feetype;
        break;
      }

      // optional uint32 feetype = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &feetype_)));
          set_has_feetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_feevalue;
        break;
      }

      // optional int64 feevalue = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feevalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &feevalue_)));
          set_has_feevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_hostname;
        break;
      }

      // optional bytes hostname = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hostname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_card_time;
        break;
      }

      // optional uint32 card_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_time_)));
          set_has_card_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_table_state;
        break;
      }

      // optional uint32 table_state = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_state_)));
          set_has_table_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_sitdown;
        break;
      }

      // optional int64 sitdown = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sitdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sitdown_)));
          set_has_sitdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fight_table_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tableid(), output);
  }

  // optional bytes tablename = 2;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->tablename(), output);
  }

  // optional uint32 is_passwd = 3;
  if (has_is_passwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->is_passwd(), output);
  }

  // optional int64 basescore = 4;
  if (has_basescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->basescore(), output);
  }

  // optional uint32 consume = 5;
  if (has_consume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->consume(), output);
  }

  // optional uint64 entermin = 6;
  if (has_entermin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->entermin(), output);
  }

  // optional uint32 duetime = 7;
  if (has_duetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->duetime(), output);
  }

  // optional uint32 feetype = 8;
  if (has_feetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->feetype(), output);
  }

  // optional int64 feevalue = 9;
  if (has_feevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->feevalue(), output);
  }

  // optional bytes hostname = 10;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->hostname(), output);
  }

  // optional uint32 card_time = 11;
  if (has_card_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->card_time(), output);
  }

  // optional uint32 table_state = 12;
  if (has_table_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->table_state(), output);
  }

  // optional int64 sitdown = 13;
  if (has_sitdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->sitdown(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fight_table_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tableid(), target);
  }

  // optional bytes tablename = 2;
  if (has_tablename()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->tablename(), target);
  }

  // optional uint32 is_passwd = 3;
  if (has_is_passwd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->is_passwd(), target);
  }

  // optional int64 basescore = 4;
  if (has_basescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->basescore(), target);
  }

  // optional uint32 consume = 5;
  if (has_consume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->consume(), target);
  }

  // optional uint64 entermin = 6;
  if (has_entermin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->entermin(), target);
  }

  // optional uint32 duetime = 7;
  if (has_duetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->duetime(), target);
  }

  // optional uint32 feetype = 8;
  if (has_feetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->feetype(), target);
  }

  // optional int64 feevalue = 9;
  if (has_feevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->feevalue(), target);
  }

  // optional bytes hostname = 10;
  if (has_hostname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->hostname(), target);
  }

  // optional uint32 card_time = 11;
  if (has_card_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->card_time(), target);
  }

  // optional uint32 table_state = 12;
  if (has_table_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->table_state(), target);
  }

  // optional int64 sitdown = 13;
  if (has_sitdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->sitdown(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fight_table_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tableid());
    }

    // optional bytes tablename = 2;
    if (has_tablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tablename());
    }

    // optional uint32 is_passwd = 3;
    if (has_is_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_passwd());
    }

    // optional int64 basescore = 4;
    if (has_basescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->basescore());
    }

    // optional uint32 consume = 5;
    if (has_consume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consume());
    }

    // optional uint64 entermin = 6;
    if (has_entermin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entermin());
    }

    // optional uint32 duetime = 7;
    if (has_duetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duetime());
    }

    // optional uint32 feetype = 8;
    if (has_feetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->feetype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 feevalue = 9;
    if (has_feevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->feevalue());
    }

    // optional bytes hostname = 10;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hostname());
    }

    // optional uint32 card_time = 11;
    if (has_card_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card_time());
    }

    // optional uint32 table_state = 12;
    if (has_table_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_state());
    }

    // optional int64 sitdown = 13;
    if (has_sitdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sitdown());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fight_table_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fight_table_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fight_table_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fight_table_info::MergeFrom(const fight_table_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_tablename()) {
      set_tablename(from.tablename());
    }
    if (from.has_is_passwd()) {
      set_is_passwd(from.is_passwd());
    }
    if (from.has_basescore()) {
      set_basescore(from.basescore());
    }
    if (from.has_consume()) {
      set_consume(from.consume());
    }
    if (from.has_entermin()) {
      set_entermin(from.entermin());
    }
    if (from.has_duetime()) {
      set_duetime(from.duetime());
    }
    if (from.has_feetype()) {
      set_feetype(from.feetype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_feevalue()) {
      set_feevalue(from.feevalue());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_card_time()) {
      set_card_time(from.card_time());
    }
    if (from.has_table_state()) {
      set_table_state(from.table_state());
    }
    if (from.has_sitdown()) {
      set_sitdown(from.sitdown());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fight_table_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fight_table_info::CopyFrom(const fight_table_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fight_table_info::IsInitialized() const {

  return true;
}

void fight_table_info::Swap(fight_table_info* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(tablename_, other->tablename_);
    std::swap(is_passwd_, other->is_passwd_);
    std::swap(basescore_, other->basescore_);
    std::swap(consume_, other->consume_);
    std::swap(entermin_, other->entermin_);
    std::swap(duetime_, other->duetime_);
    std::swap(feetype_, other->feetype_);
    std::swap(feevalue_, other->feevalue_);
    std::swap(hostname_, other->hostname_);
    std::swap(card_time_, other->card_time_);
    std::swap(table_state_, other->table_state_);
    std::swap(sitdown_, other->sitdown_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fight_table_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fight_table_info_descriptor_;
  metadata.reflection = fight_table_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int robniu_table_info::kTableidFieldNumber;
const int robniu_table_info::kTablenameFieldNumber;
const int robniu_table_info::kIsPasswdFieldNumber;
const int robniu_table_info::kBasescoreFieldNumber;
const int robniu_table_info::kConsumeFieldNumber;
const int robniu_table_info::kEnterminFieldNumber;
const int robniu_table_info::kDuetimeFieldNumber;
const int robniu_table_info::kFeetypeFieldNumber;
const int robniu_table_info::kFeevalueFieldNumber;
const int robniu_table_info::kHostnameFieldNumber;
const int robniu_table_info::kTableStateFieldNumber;
const int robniu_table_info::kSeatNumFieldNumber;
const int robniu_table_info::kCanBankerFieldNumber;
const int robniu_table_info::kApplyBankerTimeFieldNumber;
const int robniu_table_info::kCardTimeFieldNumber;
const int robniu_table_info::kShowCardTimeFieldNumber;
#endif  // !_MSC_VER

robniu_table_info::robniu_table_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void robniu_table_info::InitAsDefaultInstance() {
}

robniu_table_info::robniu_table_info(const robniu_table_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void robniu_table_info::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0u;
  tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_passwd_ = 0u;
  basescore_ = GOOGLE_LONGLONG(0);
  consume_ = 0u;
  entermin_ = GOOGLE_ULONGLONG(0);
  duetime_ = 0u;
  feetype_ = 0u;
  feevalue_ = GOOGLE_LONGLONG(0);
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  table_state_ = 0u;
  seat_num_ = 0u;
  can_banker_ = 0u;
  apply_banker_time_ = 0u;
  card_time_ = 0u;
  show_card_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

robniu_table_info::~robniu_table_info() {
  SharedDtor();
}

void robniu_table_info::SharedDtor() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (this != default_instance_) {
  }
}

void robniu_table_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* robniu_table_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return robniu_table_info_descriptor_;
}

const robniu_table_info& robniu_table_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  return *default_instance_;
}

robniu_table_info* robniu_table_info::default_instance_ = NULL;

robniu_table_info* robniu_table_info::New() const {
  return new robniu_table_info;
}

void robniu_table_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0u;
    if (has_tablename()) {
      if (tablename_ != &::google::protobuf::internal::kEmptyString) {
        tablename_->clear();
      }
    }
    is_passwd_ = 0u;
    basescore_ = GOOGLE_LONGLONG(0);
    consume_ = 0u;
    entermin_ = GOOGLE_ULONGLONG(0);
    duetime_ = 0u;
    feetype_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    feevalue_ = GOOGLE_LONGLONG(0);
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    table_state_ = 0u;
    seat_num_ = 0u;
    can_banker_ = 0u;
    apply_banker_time_ = 0u;
    card_time_ = 0u;
    show_card_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool robniu_table_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tablename;
        break;
      }

      // optional bytes tablename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tablename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tablename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_passwd;
        break;
      }

      // optional uint32 is_passwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_passwd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_passwd_)));
          set_has_is_passwd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_basescore;
        break;
      }

      // optional int64 basescore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_basescore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &basescore_)));
          set_has_basescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_consume;
        break;
      }

      // optional uint32 consume = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consume_)));
          set_has_consume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_entermin;
        break;
      }

      // optional uint64 entermin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entermin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entermin_)));
          set_has_entermin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_duetime;
        break;
      }

      // optional uint32 duetime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duetime_)));
          set_has_duetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_feetype;
        break;
      }

      // optional uint32 feetype = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &feetype_)));
          set_has_feetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_feevalue;
        break;
      }

      // optional int64 feevalue = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feevalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &feevalue_)));
          set_has_feevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_hostname;
        break;
      }

      // optional bytes hostname = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hostname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_table_state;
        break;
      }

      // optional uint32 table_state = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_state_)));
          set_has_table_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_seat_num;
        break;
      }

      // optional uint32 seat_num = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_num_)));
          set_has_seat_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_can_banker;
        break;
      }

      // optional uint32 can_banker = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_banker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &can_banker_)));
          set_has_can_banker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_apply_banker_time;
        break;
      }

      // optional uint32 apply_banker_time = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_banker_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &apply_banker_time_)));
          set_has_apply_banker_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_card_time;
        break;
      }

      // optional uint32 card_time = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_time_)));
          set_has_card_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_show_card_time;
        break;
      }

      // optional uint32 show_card_time = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_card_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &show_card_time_)));
          set_has_show_card_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void robniu_table_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tableid(), output);
  }

  // optional bytes tablename = 2;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->tablename(), output);
  }

  // optional uint32 is_passwd = 3;
  if (has_is_passwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->is_passwd(), output);
  }

  // optional int64 basescore = 4;
  if (has_basescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->basescore(), output);
  }

  // optional uint32 consume = 5;
  if (has_consume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->consume(), output);
  }

  // optional uint64 entermin = 6;
  if (has_entermin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->entermin(), output);
  }

  // optional uint32 duetime = 7;
  if (has_duetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->duetime(), output);
  }

  // optional uint32 feetype = 8;
  if (has_feetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->feetype(), output);
  }

  // optional int64 feevalue = 9;
  if (has_feevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->feevalue(), output);
  }

  // optional bytes hostname = 10;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->hostname(), output);
  }

  // optional uint32 table_state = 11;
  if (has_table_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->table_state(), output);
  }

  // optional uint32 seat_num = 12;
  if (has_seat_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->seat_num(), output);
  }

  // optional uint32 can_banker = 13;
  if (has_can_banker()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->can_banker(), output);
  }

  // optional uint32 apply_banker_time = 14;
  if (has_apply_banker_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->apply_banker_time(), output);
  }

  // optional uint32 card_time = 15;
  if (has_card_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->card_time(), output);
  }

  // optional uint32 show_card_time = 16;
  if (has_show_card_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->show_card_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* robniu_table_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tableid(), target);
  }

  // optional bytes tablename = 2;
  if (has_tablename()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->tablename(), target);
  }

  // optional uint32 is_passwd = 3;
  if (has_is_passwd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->is_passwd(), target);
  }

  // optional int64 basescore = 4;
  if (has_basescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->basescore(), target);
  }

  // optional uint32 consume = 5;
  if (has_consume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->consume(), target);
  }

  // optional uint64 entermin = 6;
  if (has_entermin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->entermin(), target);
  }

  // optional uint32 duetime = 7;
  if (has_duetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->duetime(), target);
  }

  // optional uint32 feetype = 8;
  if (has_feetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->feetype(), target);
  }

  // optional int64 feevalue = 9;
  if (has_feevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->feevalue(), target);
  }

  // optional bytes hostname = 10;
  if (has_hostname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->hostname(), target);
  }

  // optional uint32 table_state = 11;
  if (has_table_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->table_state(), target);
  }

  // optional uint32 seat_num = 12;
  if (has_seat_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->seat_num(), target);
  }

  // optional uint32 can_banker = 13;
  if (has_can_banker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->can_banker(), target);
  }

  // optional uint32 apply_banker_time = 14;
  if (has_apply_banker_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->apply_banker_time(), target);
  }

  // optional uint32 card_time = 15;
  if (has_card_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->card_time(), target);
  }

  // optional uint32 show_card_time = 16;
  if (has_show_card_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->show_card_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int robniu_table_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tableid());
    }

    // optional bytes tablename = 2;
    if (has_tablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tablename());
    }

    // optional uint32 is_passwd = 3;
    if (has_is_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_passwd());
    }

    // optional int64 basescore = 4;
    if (has_basescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->basescore());
    }

    // optional uint32 consume = 5;
    if (has_consume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consume());
    }

    // optional uint64 entermin = 6;
    if (has_entermin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entermin());
    }

    // optional uint32 duetime = 7;
    if (has_duetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duetime());
    }

    // optional uint32 feetype = 8;
    if (has_feetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->feetype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 feevalue = 9;
    if (has_feevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->feevalue());
    }

    // optional bytes hostname = 10;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hostname());
    }

    // optional uint32 table_state = 11;
    if (has_table_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_state());
    }

    // optional uint32 seat_num = 12;
    if (has_seat_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seat_num());
    }

    // optional uint32 can_banker = 13;
    if (has_can_banker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->can_banker());
    }

    // optional uint32 apply_banker_time = 14;
    if (has_apply_banker_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->apply_banker_time());
    }

    // optional uint32 card_time = 15;
    if (has_card_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card_time());
    }

    // optional uint32 show_card_time = 16;
    if (has_show_card_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->show_card_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void robniu_table_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const robniu_table_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const robniu_table_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void robniu_table_info::MergeFrom(const robniu_table_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_tablename()) {
      set_tablename(from.tablename());
    }
    if (from.has_is_passwd()) {
      set_is_passwd(from.is_passwd());
    }
    if (from.has_basescore()) {
      set_basescore(from.basescore());
    }
    if (from.has_consume()) {
      set_consume(from.consume());
    }
    if (from.has_entermin()) {
      set_entermin(from.entermin());
    }
    if (from.has_duetime()) {
      set_duetime(from.duetime());
    }
    if (from.has_feetype()) {
      set_feetype(from.feetype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_feevalue()) {
      set_feevalue(from.feevalue());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_table_state()) {
      set_table_state(from.table_state());
    }
    if (from.has_seat_num()) {
      set_seat_num(from.seat_num());
    }
    if (from.has_can_banker()) {
      set_can_banker(from.can_banker());
    }
    if (from.has_apply_banker_time()) {
      set_apply_banker_time(from.apply_banker_time());
    }
    if (from.has_card_time()) {
      set_card_time(from.card_time());
    }
    if (from.has_show_card_time()) {
      set_show_card_time(from.show_card_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void robniu_table_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void robniu_table_info::CopyFrom(const robniu_table_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool robniu_table_info::IsInitialized() const {

  return true;
}

void robniu_table_info::Swap(robniu_table_info* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(tablename_, other->tablename_);
    std::swap(is_passwd_, other->is_passwd_);
    std::swap(basescore_, other->basescore_);
    std::swap(consume_, other->consume_);
    std::swap(entermin_, other->entermin_);
    std::swap(duetime_, other->duetime_);
    std::swap(feetype_, other->feetype_);
    std::swap(feevalue_, other->feevalue_);
    std::swap(hostname_, other->hostname_);
    std::swap(table_state_, other->table_state_);
    std::swap(seat_num_, other->seat_num_);
    std::swap(can_banker_, other->can_banker_);
    std::swap(apply_banker_time_, other->apply_banker_time_);
    std::swap(card_time_, other->card_time_);
    std::swap(show_card_time_, other->show_card_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata robniu_table_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = robniu_table_info_descriptor_;
  metadata.reflection = robniu_table_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int table_face_info::kLandFieldNumber;
const int table_face_info::kShowhandFieldNumber;
const int table_face_info::kBainiuFieldNumber;
const int table_face_info::kTexasFieldNumber;
const int table_face_info::kZajinhuaFieldNumber;
const int table_face_info::kNiuniuFieldNumber;
const int table_face_info::kBaccaratFieldNumber;
const int table_face_info::kSangongFieldNumber;
const int table_face_info::kPaijiuFieldNumber;
const int table_face_info::kEverycolorFieldNumber;
const int table_face_info::kDiceFieldNumber;
const int table_face_info::kMajiangFieldNumber;
const int table_face_info::kSlotFieldNumber;
const int table_face_info::kWarFieldNumber;
const int table_face_info::kFightFieldNumber;
const int table_face_info::kRobniuFieldNumber;
const int table_face_info::kFishingFieldNumber;
const int table_face_info::kTwoeightFieldNumber;
#endif  // !_MSC_VER

table_face_info::table_face_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void table_face_info::InitAsDefaultInstance() {
  land_ = const_cast< ::net::land_table_info*>(&::net::land_table_info::default_instance());
  showhand_ = const_cast< ::net::showhand_table_info*>(&::net::showhand_table_info::default_instance());
  bainiu_ = const_cast< ::net::bainiu_table_info*>(&::net::bainiu_table_info::default_instance());
  texas_ = const_cast< ::net::texas_table_info*>(&::net::texas_table_info::default_instance());
  zajinhua_ = const_cast< ::net::zajinhua_table_info*>(&::net::zajinhua_table_info::default_instance());
  niuniu_ = const_cast< ::net::niuniu_table_info*>(&::net::niuniu_table_info::default_instance());
  baccarat_ = const_cast< ::net::baccarat_table_info*>(&::net::baccarat_table_info::default_instance());
  sangong_ = const_cast< ::net::sangong_table_info*>(&::net::sangong_table_info::default_instance());
  paijiu_ = const_cast< ::net::paijiu_table_info*>(&::net::paijiu_table_info::default_instance());
  everycolor_ = const_cast< ::net::everycolor_table_info*>(&::net::everycolor_table_info::default_instance());
  dice_ = const_cast< ::net::dice_table_info*>(&::net::dice_table_info::default_instance());
  majiang_ = const_cast< ::net::majiang_table_info*>(&::net::majiang_table_info::default_instance());
  slot_ = const_cast< ::net::slot_table_info*>(&::net::slot_table_info::default_instance());
  war_ = const_cast< ::net::war_table_info*>(&::net::war_table_info::default_instance());
  fight_ = const_cast< ::net::fight_table_info*>(&::net::fight_table_info::default_instance());
  robniu_ = const_cast< ::net::robniu_table_info*>(&::net::robniu_table_info::default_instance());
  fishing_ = const_cast< ::net::fishing_table_info*>(&::net::fishing_table_info::default_instance());
  twoeight_ = const_cast< ::net::twoeight_table_info*>(&::net::twoeight_table_info::default_instance());
}

table_face_info::table_face_info(const table_face_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void table_face_info::SharedCtor() {
  _cached_size_ = 0;
  land_ = NULL;
  showhand_ = NULL;
  bainiu_ = NULL;
  texas_ = NULL;
  zajinhua_ = NULL;
  niuniu_ = NULL;
  baccarat_ = NULL;
  sangong_ = NULL;
  paijiu_ = NULL;
  everycolor_ = NULL;
  dice_ = NULL;
  majiang_ = NULL;
  slot_ = NULL;
  war_ = NULL;
  fight_ = NULL;
  robniu_ = NULL;
  fishing_ = NULL;
  twoeight_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

table_face_info::~table_face_info() {
  SharedDtor();
}

void table_face_info::SharedDtor() {
  if (this != default_instance_) {
    delete land_;
    delete showhand_;
    delete bainiu_;
    delete texas_;
    delete zajinhua_;
    delete niuniu_;
    delete baccarat_;
    delete sangong_;
    delete paijiu_;
    delete everycolor_;
    delete dice_;
    delete majiang_;
    delete slot_;
    delete war_;
    delete fight_;
    delete robniu_;
    delete fishing_;
    delete twoeight_;
  }
}

void table_face_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* table_face_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return table_face_info_descriptor_;
}

const table_face_info& table_face_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  return *default_instance_;
}

table_face_info* table_face_info::default_instance_ = NULL;

table_face_info* table_face_info::New() const {
  return new table_face_info;
}

void table_face_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_land()) {
      if (land_ != NULL) land_->::net::land_table_info::Clear();
    }
    if (has_showhand()) {
      if (showhand_ != NULL) showhand_->::net::showhand_table_info::Clear();
    }
    if (has_bainiu()) {
      if (bainiu_ != NULL) bainiu_->::net::bainiu_table_info::Clear();
    }
    if (has_texas()) {
      if (texas_ != NULL) texas_->::net::texas_table_info::Clear();
    }
    if (has_zajinhua()) {
      if (zajinhua_ != NULL) zajinhua_->::net::zajinhua_table_info::Clear();
    }
    if (has_niuniu()) {
      if (niuniu_ != NULL) niuniu_->::net::niuniu_table_info::Clear();
    }
    if (has_baccarat()) {
      if (baccarat_ != NULL) baccarat_->::net::baccarat_table_info::Clear();
    }
    if (has_sangong()) {
      if (sangong_ != NULL) sangong_->::net::sangong_table_info::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_paijiu()) {
      if (paijiu_ != NULL) paijiu_->::net::paijiu_table_info::Clear();
    }
    if (has_everycolor()) {
      if (everycolor_ != NULL) everycolor_->::net::everycolor_table_info::Clear();
    }
    if (has_dice()) {
      if (dice_ != NULL) dice_->::net::dice_table_info::Clear();
    }
    if (has_majiang()) {
      if (majiang_ != NULL) majiang_->::net::majiang_table_info::Clear();
    }
    if (has_slot()) {
      if (slot_ != NULL) slot_->::net::slot_table_info::Clear();
    }
    if (has_war()) {
      if (war_ != NULL) war_->::net::war_table_info::Clear();
    }
    if (has_fight()) {
      if (fight_ != NULL) fight_->::net::fight_table_info::Clear();
    }
    if (has_robniu()) {
      if (robniu_ != NULL) robniu_->::net::robniu_table_info::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_fishing()) {
      if (fishing_ != NULL) fishing_->::net::fishing_table_info::Clear();
    }
    if (has_twoeight()) {
      if (twoeight_ != NULL) twoeight_->::net::twoeight_table_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool table_face_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .net.land_table_info land = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_land()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_showhand;
        break;
      }

      // optional .net.showhand_table_info showhand = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_showhand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_showhand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bainiu;
        break;
      }

      // optional .net.bainiu_table_info bainiu = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bainiu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bainiu()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_texas;
        break;
      }

      // optional .net.texas_table_info texas = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_texas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_texas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_zajinhua;
        break;
      }

      // optional .net.zajinhua_table_info zajinhua = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_zajinhua:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_zajinhua()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_niuniu;
        break;
      }

      // optional .net.niuniu_table_info niuniu = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_niuniu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_niuniu()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_baccarat;
        break;
      }

      // optional .net.baccarat_table_info baccarat = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_baccarat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baccarat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_sangong;
        break;
      }

      // optional .net.sangong_table_info sangong = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sangong:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sangong()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_paijiu;
        break;
      }

      // optional .net.paijiu_table_info paijiu = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_paijiu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_paijiu()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_everycolor;
        break;
      }

      // optional .net.everycolor_table_info everycolor = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_everycolor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_everycolor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_dice;
        break;
      }

      // optional .net.dice_table_info dice = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_majiang;
        break;
      }

      // optional .net.majiang_table_info majiang = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_majiang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_majiang()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_slot;
        break;
      }

      // optional .net.slot_table_info slot = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_war;
        break;
      }

      // optional .net.war_table_info war = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_war:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_war()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_fight;
        break;
      }

      // optional .net.fight_table_info fight = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fight:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fight()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_robniu;
        break;
      }

      // optional .net.robniu_table_info robniu = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_robniu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_robniu()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_fishing;
        break;
      }

      // optional .net.fishing_table_info fishing = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fishing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fishing()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_twoeight;
        break;
      }

      // optional .net.twoeight_table_info twoeight = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_twoeight:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_twoeight()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void table_face_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .net.land_table_info land = 1;
  if (has_land()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->land(), output);
  }

  // optional .net.showhand_table_info showhand = 2;
  if (has_showhand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->showhand(), output);
  }

  // optional .net.bainiu_table_info bainiu = 3;
  if (has_bainiu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bainiu(), output);
  }

  // optional .net.texas_table_info texas = 4;
  if (has_texas()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->texas(), output);
  }

  // optional .net.zajinhua_table_info zajinhua = 5;
  if (has_zajinhua()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->zajinhua(), output);
  }

  // optional .net.niuniu_table_info niuniu = 6;
  if (has_niuniu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->niuniu(), output);
  }

  // optional .net.baccarat_table_info baccarat = 7;
  if (has_baccarat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->baccarat(), output);
  }

  // optional .net.sangong_table_info sangong = 8;
  if (has_sangong()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->sangong(), output);
  }

  // optional .net.paijiu_table_info paijiu = 9;
  if (has_paijiu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->paijiu(), output);
  }

  // optional .net.everycolor_table_info everycolor = 10;
  if (has_everycolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->everycolor(), output);
  }

  // optional .net.dice_table_info dice = 11;
  if (has_dice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->dice(), output);
  }

  // optional .net.majiang_table_info majiang = 12;
  if (has_majiang()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->majiang(), output);
  }

  // optional .net.slot_table_info slot = 13;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->slot(), output);
  }

  // optional .net.war_table_info war = 14;
  if (has_war()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->war(), output);
  }

  // optional .net.fight_table_info fight = 15;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->fight(), output);
  }

  // optional .net.robniu_table_info robniu = 16;
  if (has_robniu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->robniu(), output);
  }

  // optional .net.fishing_table_info fishing = 17;
  if (has_fishing()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->fishing(), output);
  }

  // optional .net.twoeight_table_info twoeight = 18;
  if (has_twoeight()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->twoeight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* table_face_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .net.land_table_info land = 1;
  if (has_land()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->land(), target);
  }

  // optional .net.showhand_table_info showhand = 2;
  if (has_showhand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->showhand(), target);
  }

  // optional .net.bainiu_table_info bainiu = 3;
  if (has_bainiu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bainiu(), target);
  }

  // optional .net.texas_table_info texas = 4;
  if (has_texas()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->texas(), target);
  }

  // optional .net.zajinhua_table_info zajinhua = 5;
  if (has_zajinhua()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->zajinhua(), target);
  }

  // optional .net.niuniu_table_info niuniu = 6;
  if (has_niuniu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->niuniu(), target);
  }

  // optional .net.baccarat_table_info baccarat = 7;
  if (has_baccarat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->baccarat(), target);
  }

  // optional .net.sangong_table_info sangong = 8;
  if (has_sangong()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->sangong(), target);
  }

  // optional .net.paijiu_table_info paijiu = 9;
  if (has_paijiu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->paijiu(), target);
  }

  // optional .net.everycolor_table_info everycolor = 10;
  if (has_everycolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->everycolor(), target);
  }

  // optional .net.dice_table_info dice = 11;
  if (has_dice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->dice(), target);
  }

  // optional .net.majiang_table_info majiang = 12;
  if (has_majiang()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->majiang(), target);
  }

  // optional .net.slot_table_info slot = 13;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->slot(), target);
  }

  // optional .net.war_table_info war = 14;
  if (has_war()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->war(), target);
  }

  // optional .net.fight_table_info fight = 15;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->fight(), target);
  }

  // optional .net.robniu_table_info robniu = 16;
  if (has_robniu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->robniu(), target);
  }

  // optional .net.fishing_table_info fishing = 17;
  if (has_fishing()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->fishing(), target);
  }

  // optional .net.twoeight_table_info twoeight = 18;
  if (has_twoeight()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->twoeight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int table_face_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .net.land_table_info land = 1;
    if (has_land()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->land());
    }

    // optional .net.showhand_table_info showhand = 2;
    if (has_showhand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->showhand());
    }

    // optional .net.bainiu_table_info bainiu = 3;
    if (has_bainiu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bainiu());
    }

    // optional .net.texas_table_info texas = 4;
    if (has_texas()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->texas());
    }

    // optional .net.zajinhua_table_info zajinhua = 5;
    if (has_zajinhua()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->zajinhua());
    }

    // optional .net.niuniu_table_info niuniu = 6;
    if (has_niuniu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->niuniu());
    }

    // optional .net.baccarat_table_info baccarat = 7;
    if (has_baccarat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baccarat());
    }

    // optional .net.sangong_table_info sangong = 8;
    if (has_sangong()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sangong());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .net.paijiu_table_info paijiu = 9;
    if (has_paijiu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->paijiu());
    }

    // optional .net.everycolor_table_info everycolor = 10;
    if (has_everycolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->everycolor());
    }

    // optional .net.dice_table_info dice = 11;
    if (has_dice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dice());
    }

    // optional .net.majiang_table_info majiang = 12;
    if (has_majiang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->majiang());
    }

    // optional .net.slot_table_info slot = 13;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slot());
    }

    // optional .net.war_table_info war = 14;
    if (has_war()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->war());
    }

    // optional .net.fight_table_info fight = 15;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fight());
    }

    // optional .net.robniu_table_info robniu = 16;
    if (has_robniu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->robniu());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .net.fishing_table_info fishing = 17;
    if (has_fishing()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fishing());
    }

    // optional .net.twoeight_table_info twoeight = 18;
    if (has_twoeight()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->twoeight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void table_face_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const table_face_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const table_face_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void table_face_info::MergeFrom(const table_face_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_land()) {
      mutable_land()->::net::land_table_info::MergeFrom(from.land());
    }
    if (from.has_showhand()) {
      mutable_showhand()->::net::showhand_table_info::MergeFrom(from.showhand());
    }
    if (from.has_bainiu()) {
      mutable_bainiu()->::net::bainiu_table_info::MergeFrom(from.bainiu());
    }
    if (from.has_texas()) {
      mutable_texas()->::net::texas_table_info::MergeFrom(from.texas());
    }
    if (from.has_zajinhua()) {
      mutable_zajinhua()->::net::zajinhua_table_info::MergeFrom(from.zajinhua());
    }
    if (from.has_niuniu()) {
      mutable_niuniu()->::net::niuniu_table_info::MergeFrom(from.niuniu());
    }
    if (from.has_baccarat()) {
      mutable_baccarat()->::net::baccarat_table_info::MergeFrom(from.baccarat());
    }
    if (from.has_sangong()) {
      mutable_sangong()->::net::sangong_table_info::MergeFrom(from.sangong());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_paijiu()) {
      mutable_paijiu()->::net::paijiu_table_info::MergeFrom(from.paijiu());
    }
    if (from.has_everycolor()) {
      mutable_everycolor()->::net::everycolor_table_info::MergeFrom(from.everycolor());
    }
    if (from.has_dice()) {
      mutable_dice()->::net::dice_table_info::MergeFrom(from.dice());
    }
    if (from.has_majiang()) {
      mutable_majiang()->::net::majiang_table_info::MergeFrom(from.majiang());
    }
    if (from.has_slot()) {
      mutable_slot()->::net::slot_table_info::MergeFrom(from.slot());
    }
    if (from.has_war()) {
      mutable_war()->::net::war_table_info::MergeFrom(from.war());
    }
    if (from.has_fight()) {
      mutable_fight()->::net::fight_table_info::MergeFrom(from.fight());
    }
    if (from.has_robniu()) {
      mutable_robniu()->::net::robniu_table_info::MergeFrom(from.robniu());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_fishing()) {
      mutable_fishing()->::net::fishing_table_info::MergeFrom(from.fishing());
    }
    if (from.has_twoeight()) {
      mutable_twoeight()->::net::twoeight_table_info::MergeFrom(from.twoeight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void table_face_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void table_face_info::CopyFrom(const table_face_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool table_face_info::IsInitialized() const {

  return true;
}

void table_face_info::Swap(table_face_info* other) {
  if (other != this) {
    std::swap(land_, other->land_);
    std::swap(showhand_, other->showhand_);
    std::swap(bainiu_, other->bainiu_);
    std::swap(texas_, other->texas_);
    std::swap(zajinhua_, other->zajinhua_);
    std::swap(niuniu_, other->niuniu_);
    std::swap(baccarat_, other->baccarat_);
    std::swap(sangong_, other->sangong_);
    std::swap(paijiu_, other->paijiu_);
    std::swap(everycolor_, other->everycolor_);
    std::swap(dice_, other->dice_);
    std::swap(majiang_, other->majiang_);
    std::swap(slot_, other->slot_);
    std::swap(war_, other->war_);
    std::swap(fight_, other->fight_);
    std::swap(robniu_, other->robniu_);
    std::swap(fishing_, other->fishing_);
    std::swap(twoeight_, other->twoeight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata table_face_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = table_face_info_descriptor_;
  metadata.reflection = table_face_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fishing_table_info::kTableidFieldNumber;
const int fishing_table_info::kTablenameFieldNumber;
const int fishing_table_info::kBasescoreFieldNumber;
const int fishing_table_info::kConsumeFieldNumber;
const int fishing_table_info::kEnterminFieldNumber;
const int fishing_table_info::kMaplevelFieldNumber;
const int fishing_table_info::kTableStateFieldNumber;
#endif  // !_MSC_VER

fishing_table_info::fishing_table_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fishing_table_info::InitAsDefaultInstance() {
}

fishing_table_info::fishing_table_info(const fishing_table_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fishing_table_info::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0u;
  tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  basescore_ = GOOGLE_LONGLONG(0);
  consume_ = 0u;
  entermin_ = GOOGLE_ULONGLONG(0);
  maplevel_ = GOOGLE_ULONGLONG(0);
  table_state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fishing_table_info::~fishing_table_info() {
  SharedDtor();
}

void fishing_table_info::SharedDtor() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (this != default_instance_) {
  }
}

void fishing_table_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fishing_table_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fishing_table_info_descriptor_;
}

const fishing_table_info& fishing_table_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  return *default_instance_;
}

fishing_table_info* fishing_table_info::default_instance_ = NULL;

fishing_table_info* fishing_table_info::New() const {
  return new fishing_table_info;
}

void fishing_table_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0u;
    if (has_tablename()) {
      if (tablename_ != &::google::protobuf::internal::kEmptyString) {
        tablename_->clear();
      }
    }
    basescore_ = GOOGLE_LONGLONG(0);
    consume_ = 0u;
    entermin_ = GOOGLE_ULONGLONG(0);
    maplevel_ = GOOGLE_ULONGLONG(0);
    table_state_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fishing_table_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tablename;
        break;
      }

      // optional bytes tablename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tablename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tablename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_basescore;
        break;
      }

      // optional int64 basescore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_basescore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &basescore_)));
          set_has_basescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_consume;
        break;
      }

      // optional uint32 consume = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consume_)));
          set_has_consume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_entermin;
        break;
      }

      // optional uint64 entermin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entermin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entermin_)));
          set_has_entermin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_maplevel;
        break;
      }

      // optional uint64 maplevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maplevel_)));
          set_has_maplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_table_state;
        break;
      }

      // optional uint32 table_state = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_state_)));
          set_has_table_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fishing_table_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tableid(), output);
  }

  // optional bytes tablename = 2;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->tablename(), output);
  }

  // optional int64 basescore = 3;
  if (has_basescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->basescore(), output);
  }

  // optional uint32 consume = 4;
  if (has_consume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->consume(), output);
  }

  // optional uint64 entermin = 5;
  if (has_entermin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->entermin(), output);
  }

  // optional uint64 maplevel = 6;
  if (has_maplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->maplevel(), output);
  }

  // optional uint32 table_state = 7;
  if (has_table_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->table_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fishing_table_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tableid(), target);
  }

  // optional bytes tablename = 2;
  if (has_tablename()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->tablename(), target);
  }

  // optional int64 basescore = 3;
  if (has_basescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->basescore(), target);
  }

  // optional uint32 consume = 4;
  if (has_consume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->consume(), target);
  }

  // optional uint64 entermin = 5;
  if (has_entermin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->entermin(), target);
  }

  // optional uint64 maplevel = 6;
  if (has_maplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->maplevel(), target);
  }

  // optional uint32 table_state = 7;
  if (has_table_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->table_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fishing_table_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tableid());
    }

    // optional bytes tablename = 2;
    if (has_tablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tablename());
    }

    // optional int64 basescore = 3;
    if (has_basescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->basescore());
    }

    // optional uint32 consume = 4;
    if (has_consume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consume());
    }

    // optional uint64 entermin = 5;
    if (has_entermin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entermin());
    }

    // optional uint64 maplevel = 6;
    if (has_maplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maplevel());
    }

    // optional uint32 table_state = 7;
    if (has_table_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fishing_table_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fishing_table_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fishing_table_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fishing_table_info::MergeFrom(const fishing_table_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_tablename()) {
      set_tablename(from.tablename());
    }
    if (from.has_basescore()) {
      set_basescore(from.basescore());
    }
    if (from.has_consume()) {
      set_consume(from.consume());
    }
    if (from.has_entermin()) {
      set_entermin(from.entermin());
    }
    if (from.has_maplevel()) {
      set_maplevel(from.maplevel());
    }
    if (from.has_table_state()) {
      set_table_state(from.table_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fishing_table_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fishing_table_info::CopyFrom(const fishing_table_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fishing_table_info::IsInitialized() const {

  return true;
}

void fishing_table_info::Swap(fishing_table_info* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(tablename_, other->tablename_);
    std::swap(basescore_, other->basescore_);
    std::swap(consume_, other->consume_);
    std::swap(entermin_, other->entermin_);
    std::swap(maplevel_, other->maplevel_);
    std::swap(table_state_, other->table_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fishing_table_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fishing_table_info_descriptor_;
  metadata.reflection = fishing_table_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int twoeight_table_info::kTableidFieldNumber;
const int twoeight_table_info::kTablenameFieldNumber;
const int twoeight_table_info::kIsPasswdFieldNumber;
const int twoeight_table_info::kBasescoreFieldNumber;
const int twoeight_table_info::kConsumeFieldNumber;
const int twoeight_table_info::kEnterminFieldNumber;
const int twoeight_table_info::kDuetimeFieldNumber;
const int twoeight_table_info::kFeetypeFieldNumber;
const int twoeight_table_info::kFeevalueFieldNumber;
const int twoeight_table_info::kHostnameFieldNumber;
const int twoeight_table_info::kCardTimeFieldNumber;
const int twoeight_table_info::kTableStateFieldNumber;
const int twoeight_table_info::kSitdownFieldNumber;
const int twoeight_table_info::kApplyBankerConditionFieldNumber;
const int twoeight_table_info::kApplyBankerMaxscoreFieldNumber;
const int twoeight_table_info::kBankerMaxTimeFieldNumber;
const int twoeight_table_info::kMaxJettonRateFieldNumber;
#endif  // !_MSC_VER

twoeight_table_info::twoeight_table_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void twoeight_table_info::InitAsDefaultInstance() {
}

twoeight_table_info::twoeight_table_info(const twoeight_table_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void twoeight_table_info::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0u;
  tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_passwd_ = 0u;
  basescore_ = GOOGLE_LONGLONG(0);
  consume_ = 0u;
  entermin_ = GOOGLE_ULONGLONG(0);
  duetime_ = 0u;
  feetype_ = 0u;
  feevalue_ = GOOGLE_LONGLONG(0);
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  card_time_ = 0u;
  table_state_ = 0u;
  sitdown_ = GOOGLE_LONGLONG(0);
  apply_banker_condition_ = GOOGLE_LONGLONG(0);
  apply_banker_maxscore_ = GOOGLE_LONGLONG(0);
  banker_max_time_ = 0u;
  max_jetton_rate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

twoeight_table_info::~twoeight_table_info() {
  SharedDtor();
}

void twoeight_table_info::SharedDtor() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (this != default_instance_) {
  }
}

void twoeight_table_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* twoeight_table_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return twoeight_table_info_descriptor_;
}

const twoeight_table_info& twoeight_table_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  return *default_instance_;
}

twoeight_table_info* twoeight_table_info::default_instance_ = NULL;

twoeight_table_info* twoeight_table_info::New() const {
  return new twoeight_table_info;
}

void twoeight_table_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0u;
    if (has_tablename()) {
      if (tablename_ != &::google::protobuf::internal::kEmptyString) {
        tablename_->clear();
      }
    }
    is_passwd_ = 0u;
    basescore_ = GOOGLE_LONGLONG(0);
    consume_ = 0u;
    entermin_ = GOOGLE_ULONGLONG(0);
    duetime_ = 0u;
    feetype_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    feevalue_ = GOOGLE_LONGLONG(0);
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    card_time_ = 0u;
    table_state_ = 0u;
    sitdown_ = GOOGLE_LONGLONG(0);
    apply_banker_condition_ = GOOGLE_LONGLONG(0);
    apply_banker_maxscore_ = GOOGLE_LONGLONG(0);
    banker_max_time_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    max_jetton_rate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool twoeight_table_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tablename;
        break;
      }

      // optional bytes tablename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tablename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tablename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_passwd;
        break;
      }

      // optional uint32 is_passwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_passwd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_passwd_)));
          set_has_is_passwd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_basescore;
        break;
      }

      // optional int64 basescore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_basescore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &basescore_)));
          set_has_basescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_consume;
        break;
      }

      // optional uint32 consume = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consume_)));
          set_has_consume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_entermin;
        break;
      }

      // optional uint64 entermin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entermin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entermin_)));
          set_has_entermin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_duetime;
        break;
      }

      // optional uint32 duetime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duetime_)));
          set_has_duetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_feetype;
        break;
      }

      // optional uint32 feetype = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &feetype_)));
          set_has_feetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_feevalue;
        break;
      }

      // optional int64 feevalue = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feevalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &feevalue_)));
          set_has_feevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_hostname;
        break;
      }

      // optional bytes hostname = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hostname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_card_time;
        break;
      }

      // optional uint32 card_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_time_)));
          set_has_card_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_table_state;
        break;
      }

      // optional uint32 table_state = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_state_)));
          set_has_table_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_sitdown;
        break;
      }

      // optional int64 sitdown = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sitdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sitdown_)));
          set_has_sitdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_apply_banker_condition;
        break;
      }

      // optional int64 apply_banker_condition = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_banker_condition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &apply_banker_condition_)));
          set_has_apply_banker_condition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_apply_banker_maxscore;
        break;
      }

      // optional int64 apply_banker_maxscore = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_banker_maxscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &apply_banker_maxscore_)));
          set_has_apply_banker_maxscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_banker_max_time;
        break;
      }

      // optional uint32 banker_max_time = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_max_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &banker_max_time_)));
          set_has_banker_max_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_max_jetton_rate;
        break;
      }

      // optional uint32 max_jetton_rate = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_jetton_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_jetton_rate_)));
          set_has_max_jetton_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void twoeight_table_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tableid(), output);
  }

  // optional bytes tablename = 2;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->tablename(), output);
  }

  // optional uint32 is_passwd = 3;
  if (has_is_passwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->is_passwd(), output);
  }

  // optional int64 basescore = 4;
  if (has_basescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->basescore(), output);
  }

  // optional uint32 consume = 5;
  if (has_consume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->consume(), output);
  }

  // optional uint64 entermin = 6;
  if (has_entermin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->entermin(), output);
  }

  // optional uint32 duetime = 7;
  if (has_duetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->duetime(), output);
  }

  // optional uint32 feetype = 8;
  if (has_feetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->feetype(), output);
  }

  // optional int64 feevalue = 9;
  if (has_feevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->feevalue(), output);
  }

  // optional bytes hostname = 10;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->hostname(), output);
  }

  // optional uint32 card_time = 11;
  if (has_card_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->card_time(), output);
  }

  // optional uint32 table_state = 12;
  if (has_table_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->table_state(), output);
  }

  // optional int64 sitdown = 13;
  if (has_sitdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->sitdown(), output);
  }

  // optional int64 apply_banker_condition = 14;
  if (has_apply_banker_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->apply_banker_condition(), output);
  }

  // optional int64 apply_banker_maxscore = 15;
  if (has_apply_banker_maxscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->apply_banker_maxscore(), output);
  }

  // optional uint32 banker_max_time = 16;
  if (has_banker_max_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->banker_max_time(), output);
  }

  // optional uint32 max_jetton_rate = 17;
  if (has_max_jetton_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->max_jetton_rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* twoeight_table_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tableid(), target);
  }

  // optional bytes tablename = 2;
  if (has_tablename()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->tablename(), target);
  }

  // optional uint32 is_passwd = 3;
  if (has_is_passwd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->is_passwd(), target);
  }

  // optional int64 basescore = 4;
  if (has_basescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->basescore(), target);
  }

  // optional uint32 consume = 5;
  if (has_consume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->consume(), target);
  }

  // optional uint64 entermin = 6;
  if (has_entermin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->entermin(), target);
  }

  // optional uint32 duetime = 7;
  if (has_duetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->duetime(), target);
  }

  // optional uint32 feetype = 8;
  if (has_feetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->feetype(), target);
  }

  // optional int64 feevalue = 9;
  if (has_feevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->feevalue(), target);
  }

  // optional bytes hostname = 10;
  if (has_hostname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->hostname(), target);
  }

  // optional uint32 card_time = 11;
  if (has_card_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->card_time(), target);
  }

  // optional uint32 table_state = 12;
  if (has_table_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->table_state(), target);
  }

  // optional int64 sitdown = 13;
  if (has_sitdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->sitdown(), target);
  }

  // optional int64 apply_banker_condition = 14;
  if (has_apply_banker_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->apply_banker_condition(), target);
  }

  // optional int64 apply_banker_maxscore = 15;
  if (has_apply_banker_maxscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->apply_banker_maxscore(), target);
  }

  // optional uint32 banker_max_time = 16;
  if (has_banker_max_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->banker_max_time(), target);
  }

  // optional uint32 max_jetton_rate = 17;
  if (has_max_jetton_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->max_jetton_rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int twoeight_table_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tableid());
    }

    // optional bytes tablename = 2;
    if (has_tablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tablename());
    }

    // optional uint32 is_passwd = 3;
    if (has_is_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_passwd());
    }

    // optional int64 basescore = 4;
    if (has_basescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->basescore());
    }

    // optional uint32 consume = 5;
    if (has_consume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consume());
    }

    // optional uint64 entermin = 6;
    if (has_entermin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entermin());
    }

    // optional uint32 duetime = 7;
    if (has_duetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duetime());
    }

    // optional uint32 feetype = 8;
    if (has_feetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->feetype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 feevalue = 9;
    if (has_feevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->feevalue());
    }

    // optional bytes hostname = 10;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hostname());
    }

    // optional uint32 card_time = 11;
    if (has_card_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card_time());
    }

    // optional uint32 table_state = 12;
    if (has_table_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_state());
    }

    // optional int64 sitdown = 13;
    if (has_sitdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sitdown());
    }

    // optional int64 apply_banker_condition = 14;
    if (has_apply_banker_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->apply_banker_condition());
    }

    // optional int64 apply_banker_maxscore = 15;
    if (has_apply_banker_maxscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->apply_banker_maxscore());
    }

    // optional uint32 banker_max_time = 16;
    if (has_banker_max_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->banker_max_time());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 max_jetton_rate = 17;
    if (has_max_jetton_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_jetton_rate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void twoeight_table_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const twoeight_table_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const twoeight_table_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void twoeight_table_info::MergeFrom(const twoeight_table_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_tablename()) {
      set_tablename(from.tablename());
    }
    if (from.has_is_passwd()) {
      set_is_passwd(from.is_passwd());
    }
    if (from.has_basescore()) {
      set_basescore(from.basescore());
    }
    if (from.has_consume()) {
      set_consume(from.consume());
    }
    if (from.has_entermin()) {
      set_entermin(from.entermin());
    }
    if (from.has_duetime()) {
      set_duetime(from.duetime());
    }
    if (from.has_feetype()) {
      set_feetype(from.feetype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_feevalue()) {
      set_feevalue(from.feevalue());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_card_time()) {
      set_card_time(from.card_time());
    }
    if (from.has_table_state()) {
      set_table_state(from.table_state());
    }
    if (from.has_sitdown()) {
      set_sitdown(from.sitdown());
    }
    if (from.has_apply_banker_condition()) {
      set_apply_banker_condition(from.apply_banker_condition());
    }
    if (from.has_apply_banker_maxscore()) {
      set_apply_banker_maxscore(from.apply_banker_maxscore());
    }
    if (from.has_banker_max_time()) {
      set_banker_max_time(from.banker_max_time());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_max_jetton_rate()) {
      set_max_jetton_rate(from.max_jetton_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void twoeight_table_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void twoeight_table_info::CopyFrom(const twoeight_table_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool twoeight_table_info::IsInitialized() const {

  return true;
}

void twoeight_table_info::Swap(twoeight_table_info* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(tablename_, other->tablename_);
    std::swap(is_passwd_, other->is_passwd_);
    std::swap(basescore_, other->basescore_);
    std::swap(consume_, other->consume_);
    std::swap(entermin_, other->entermin_);
    std::swap(duetime_, other->duetime_);
    std::swap(feetype_, other->feetype_);
    std::swap(feevalue_, other->feevalue_);
    std::swap(hostname_, other->hostname_);
    std::swap(card_time_, other->card_time_);
    std::swap(table_state_, other->table_state_);
    std::swap(sitdown_, other->sitdown_);
    std::swap(apply_banker_condition_, other->apply_banker_condition_);
    std::swap(apply_banker_maxscore_, other->apply_banker_maxscore_);
    std::swap(banker_max_time_, other->banker_max_time_);
    std::swap(max_jetton_rate_, other->max_jetton_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata twoeight_table_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = twoeight_table_info_descriptor_;
  metadata.reflection = twoeight_table_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mission_data::kMsidFieldNumber;
const int mission_data::kRtimesFieldNumber;
const int mission_data::kCtimesFieldNumber;
const int mission_data::kCptimeFieldNumber;
#endif  // !_MSC_VER

mission_data::mission_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mission_data::InitAsDefaultInstance() {
}

mission_data::mission_data(const mission_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mission_data::SharedCtor() {
  _cached_size_ = 0;
  msid_ = 0u;
  rtimes_ = 0u;
  ctimes_ = 0u;
  cptime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mission_data::~mission_data() {
  SharedDtor();
}

void mission_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mission_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mission_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mission_data_descriptor_;
}

const mission_data& mission_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  return *default_instance_;
}

mission_data* mission_data::default_instance_ = NULL;

mission_data* mission_data::New() const {
  return new mission_data;
}

void mission_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msid_ = 0u;
    rtimes_ = 0u;
    ctimes_ = 0u;
    cptime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mission_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 msid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msid_)));
          set_has_msid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rtimes;
        break;
      }

      // optional uint32 rtimes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rtimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtimes_)));
          set_has_rtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ctimes;
        break;
      }

      // optional uint32 ctimes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ctimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ctimes_)));
          set_has_ctimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cptime;
        break;
      }

      // optional uint32 cptime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cptime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cptime_)));
          set_has_cptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mission_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 msid = 1;
  if (has_msid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msid(), output);
  }

  // optional uint32 rtimes = 2;
  if (has_rtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rtimes(), output);
  }

  // optional uint32 ctimes = 3;
  if (has_ctimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ctimes(), output);
  }

  // optional uint32 cptime = 4;
  if (has_cptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cptime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mission_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 msid = 1;
  if (has_msid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msid(), target);
  }

  // optional uint32 rtimes = 2;
  if (has_rtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rtimes(), target);
  }

  // optional uint32 ctimes = 3;
  if (has_ctimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ctimes(), target);
  }

  // optional uint32 cptime = 4;
  if (has_cptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cptime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mission_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 msid = 1;
    if (has_msid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msid());
    }

    // optional uint32 rtimes = 2;
    if (has_rtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rtimes());
    }

    // optional uint32 ctimes = 3;
    if (has_ctimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ctimes());
    }

    // optional uint32 cptime = 4;
    if (has_cptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cptime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mission_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mission_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mission_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mission_data::MergeFrom(const mission_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msid()) {
      set_msid(from.msid());
    }
    if (from.has_rtimes()) {
      set_rtimes(from.rtimes());
    }
    if (from.has_ctimes()) {
      set_ctimes(from.ctimes());
    }
    if (from.has_cptime()) {
      set_cptime(from.cptime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mission_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mission_data::CopyFrom(const mission_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mission_data::IsInitialized() const {

  return true;
}

void mission_data::Swap(mission_data* other) {
  if (other != this) {
    std::swap(msid_, other->msid_);
    std::swap(rtimes_, other->rtimes_);
    std::swap(ctimes_, other->ctimes_);
    std::swap(cptime_, other->cptime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mission_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mission_data_descriptor_;
  metadata.reflection = mission_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int item::kItemIdFieldNumber;
const int item::kItemNumFieldNumber;
#endif  // !_MSC_VER

item::item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void item::InitAsDefaultInstance() {
}

item::item(const item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void item::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0u;
  item_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

item::~item() {
  SharedDtor();
}

void item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return item_descriptor_;
}

const item& item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  return *default_instance_;
}

item* item::default_instance_ = NULL;

item* item::New() const {
  return new item;
}

void item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0u;
    item_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_num;
        break;
      }

      // optional uint32 item_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_id(), output);
  }

  // optional uint32 item_num = 2;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_id(), target);
  }

  // optional uint32 item_num = 2;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // optional uint32 item_num = 2;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void item::MergeFrom(const item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void item::CopyFrom(const item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool item::IsInitialized() const {

  return true;
}

void item::Swap(item* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_num_, other->item_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = item_descriptor_;
  metadata.reflection = item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int item_bag::kItemsFieldNumber;
#endif  // !_MSC_VER

item_bag::item_bag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void item_bag::InitAsDefaultInstance() {
}

item_bag::item_bag(const item_bag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void item_bag::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

item_bag::~item_bag() {
  SharedDtor();
}

void item_bag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void item_bag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* item_bag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return item_bag_descriptor_;
}

const item_bag& item_bag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  return *default_instance_;
}

item_bag* item_bag::default_instance_ = NULL;

item_bag* item_bag::New() const {
  return new item_bag;
}

void item_bag::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool item_bag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .net.item items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void item_bag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .net.item items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* item_bag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .net.item items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int item_bag::ByteSize() const {
  int total_size = 0;

  // repeated .net.item items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void item_bag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const item_bag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const item_bag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void item_bag::MergeFrom(const item_bag& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void item_bag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void item_bag::CopyFrom(const item_bag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool item_bag::IsInitialized() const {

  return true;
}

void item_bag::Swap(item_bag* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata item_bag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = item_bag_descriptor_;
  metadata.reflection = item_bag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_cards::kCardsFieldNumber;
#endif  // !_MSC_VER

msg_cards::msg_cards()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_cards::InitAsDefaultInstance() {
}

msg_cards::msg_cards(const msg_cards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_cards::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_cards::~msg_cards() {
  SharedDtor();
}

void msg_cards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_cards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_cards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_cards_descriptor_;
}

const msg_cards& msg_cards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  return *default_instance_;
}

msg_cards* msg_cards::default_instance_ = NULL;

msg_cards* msg_cards::New() const {
  return new msg_cards;
}

void msg_cards::Clear() {
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_cards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 cards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_cards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_cards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 cards = 1;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->cards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_cards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 cards = 1;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->cards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_cards::ByteSize() const {
  int total_size = 0;

  // repeated uint32 cards = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_cards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_cards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_cards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_cards::MergeFrom(const msg_cards& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_cards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_cards::CopyFrom(const msg_cards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_cards::IsInitialized() const {

  return true;
}

void msg_cards::Swap(msg_cards* other) {
  if (other != this) {
    cards_.Swap(&other->cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_cards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_cards_descriptor_;
  metadata.reflection = msg_cards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int player_num::kSvridFieldNumber;
const int player_num::kPlayersFieldNumber;
const int player_num::kRobotsFieldNumber;
#endif  // !_MSC_VER

player_num::player_num()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void player_num::InitAsDefaultInstance() {
}

player_num::player_num(const player_num& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void player_num::SharedCtor() {
  _cached_size_ = 0;
  svrid_ = 0u;
  players_ = 0u;
  robots_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

player_num::~player_num() {
  SharedDtor();
}

void player_num::SharedDtor() {
  if (this != default_instance_) {
  }
}

void player_num::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* player_num::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return player_num_descriptor_;
}

const player_num& player_num::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  return *default_instance_;
}

player_num* player_num::default_instance_ = NULL;

player_num* player_num::New() const {
  return new player_num;
}

void player_num::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    svrid_ = 0u;
    players_ = 0u;
    robots_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool player_num::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 svrid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svrid_)));
          set_has_svrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_players;
        break;
      }

      // optional uint32 players = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &players_)));
          set_has_players();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_robots;
        break;
      }

      // optional uint32 robots = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robots:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &robots_)));
          set_has_robots();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void player_num::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 svrid = 1;
  if (has_svrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->svrid(), output);
  }

  // optional uint32 players = 2;
  if (has_players()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->players(), output);
  }

  // optional uint32 robots = 3;
  if (has_robots()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->robots(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* player_num::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 svrid = 1;
  if (has_svrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->svrid(), target);
  }

  // optional uint32 players = 2;
  if (has_players()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->players(), target);
  }

  // optional uint32 robots = 3;
  if (has_robots()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->robots(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int player_num::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 svrid = 1;
    if (has_svrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svrid());
    }

    // optional uint32 players = 2;
    if (has_players()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->players());
    }

    // optional uint32 robots = 3;
    if (has_robots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->robots());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void player_num::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const player_num* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const player_num*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void player_num::MergeFrom(const player_num& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svrid()) {
      set_svrid(from.svrid());
    }
    if (from.has_players()) {
      set_players(from.players());
    }
    if (from.has_robots()) {
      set_robots(from.robots());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void player_num::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_num::CopyFrom(const player_num& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_num::IsInitialized() const {

  return true;
}

void player_num::Swap(player_num* other) {
  if (other != this) {
    std::swap(svrid_, other->svrid_);
    std::swap(players_, other->players_);
    std::swap(robots_, other->robots_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata player_num::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = player_num_descriptor_;
  metadata.reflection = player_num_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace net

// @@protoc_insertion_point(global_scope)
