// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robniu_logic_msg.proto

#ifndef PROTOBUF_robniu_5flogic_5fmsg_2eproto__INCLUDED
#define PROTOBUF_robniu_5flogic_5fmsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "base_msg_struct.pb.h"
#include "error_code.pb.h"
// @@protoc_insertion_point(includes)

namespace net {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_robniu_5flogic_5fmsg_2eproto();
void protobuf_AssignDesc_robniu_5flogic_5fmsg_2eproto();
void protobuf_ShutdownFile_robniu_5flogic_5fmsg_2eproto();

class msg_robniu_game_info_free_rep;
class msg_robniu_game_info_play_rep;
class msg_robniu_ready_start_rep;
class msg_robniu_start_rep;
class msg_robniu_apply_banker;
class msg_robniu_apply_banker_rep;
class msg_robniu_banker_result_rep;
class msg_robniu_place_jetton_req;
class msg_robniu_place_jetton_rep;
class msg_robniu_place_jetton_broadcast;
class msg_robniu_send_card_rep;
class msg_robniu_change_card;
class msg_robniu_change_card_rep;
class msg_robniu_game_end;
class msg_robniu_socre_less;
class msg_robniu_game_status;

// ===================================================================

class msg_robniu_game_info_free_rep : public ::google::protobuf::Message {
 public:
  msg_robniu_game_info_free_rep();
  virtual ~msg_robniu_game_info_free_rep();

  msg_robniu_game_info_free_rep(const msg_robniu_game_info_free_rep& from);

  inline msg_robniu_game_info_free_rep& operator=(const msg_robniu_game_info_free_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_robniu_game_info_free_rep& default_instance();

  void Swap(msg_robniu_game_info_free_rep* other);

  // implements Message ----------------------------------------------

  msg_robniu_game_info_free_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_robniu_game_info_free_rep& from);
  void MergeFrom(const msg_robniu_game_info_free_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 time_leave = 1;
  inline bool has_time_leave() const;
  inline void clear_time_leave();
  static const int kTimeLeaveFieldNumber = 1;
  inline ::google::protobuf::uint32 time_leave() const;
  inline void set_time_leave(::google::protobuf::uint32 value);

  // optional uint32 banker_id = 2;
  inline bool has_banker_id() const;
  inline void clear_banker_id();
  static const int kBankerIdFieldNumber = 2;
  inline ::google::protobuf::uint32 banker_id() const;
  inline void set_banker_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_robniu_game_info_free_rep)
 private:
  inline void set_has_time_leave();
  inline void clear_has_time_leave();
  inline void set_has_banker_id();
  inline void clear_has_banker_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 time_leave_;
  ::google::protobuf::uint32 banker_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_robniu_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_robniu_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_robniu_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_robniu_game_info_free_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_robniu_game_info_play_rep : public ::google::protobuf::Message {
 public:
  msg_robniu_game_info_play_rep();
  virtual ~msg_robniu_game_info_play_rep();

  msg_robniu_game_info_play_rep(const msg_robniu_game_info_play_rep& from);

  inline msg_robniu_game_info_play_rep& operator=(const msg_robniu_game_info_play_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_robniu_game_info_play_rep& default_instance();

  void Swap(msg_robniu_game_info_play_rep* other);

  // implements Message ----------------------------------------------

  msg_robniu_game_info_play_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_robniu_game_info_play_rep& from);
  void MergeFrom(const msg_robniu_game_info_play_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 all_jetton_score = 1;
  inline int all_jetton_score_size() const;
  inline void clear_all_jetton_score();
  static const int kAllJettonScoreFieldNumber = 1;
  inline ::google::protobuf::int64 all_jetton_score(int index) const;
  inline void set_all_jetton_score(int index, ::google::protobuf::int64 value);
  inline void add_all_jetton_score(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      all_jetton_score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_all_jetton_score();

  // repeated .net.msg_cards table_cards = 2;
  inline int table_cards_size() const;
  inline void clear_table_cards();
  static const int kTableCardsFieldNumber = 2;
  inline const ::net::msg_cards& table_cards(int index) const;
  inline ::net::msg_cards* mutable_table_cards(int index);
  inline ::net::msg_cards* add_table_cards();
  inline const ::google::protobuf::RepeatedPtrField< ::net::msg_cards >&
      table_cards() const;
  inline ::google::protobuf::RepeatedPtrField< ::net::msg_cards >*
      mutable_table_cards();

  // optional uint32 banker_id = 3;
  inline bool has_banker_id() const;
  inline void clear_banker_id();
  static const int kBankerIdFieldNumber = 3;
  inline ::google::protobuf::uint32 banker_id() const;
  inline void set_banker_id(::google::protobuf::uint32 value);

  // optional uint32 game_status = 4;
  inline bool has_game_status() const;
  inline void clear_game_status();
  static const int kGameStatusFieldNumber = 4;
  inline ::google::protobuf::uint32 game_status() const;
  inline void set_game_status(::google::protobuf::uint32 value);

  // repeated uint32 show_cards = 5;
  inline int show_cards_size() const;
  inline void clear_show_cards();
  static const int kShowCardsFieldNumber = 5;
  inline ::google::protobuf::uint32 show_cards(int index) const;
  inline void set_show_cards(int index, ::google::protobuf::uint32 value);
  inline void add_show_cards(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      show_cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_show_cards();

  // repeated uint32 player_status = 6;
  inline int player_status_size() const;
  inline void clear_player_status();
  static const int kPlayerStatusFieldNumber = 6;
  inline ::google::protobuf::uint32 player_status(int index) const;
  inline void set_player_status(int index, ::google::protobuf::uint32 value);
  inline void add_player_status(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      player_status() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_player_status();

  // optional uint32 time_leave = 7;
  inline bool has_time_leave() const;
  inline void clear_time_leave();
  static const int kTimeLeaveFieldNumber = 7;
  inline ::google::protobuf::uint32 time_leave() const;
  inline void set_time_leave(::google::protobuf::uint32 value);

  // repeated uint32 apply_list = 8;
  inline int apply_list_size() const;
  inline void clear_apply_list();
  static const int kApplyListFieldNumber = 8;
  inline ::google::protobuf::uint32 apply_list(int index) const;
  inline void set_apply_list(int index, ::google::protobuf::uint32 value);
  inline void add_apply_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      apply_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_apply_list();

  // repeated int64 apply_multiple = 9;
  inline int apply_multiple_size() const;
  inline void clear_apply_multiple();
  static const int kApplyMultipleFieldNumber = 9;
  inline ::google::protobuf::int64 apply_multiple(int index) const;
  inline void set_apply_multiple(int index, ::google::protobuf::int64 value);
  inline void add_apply_multiple(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      apply_multiple() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_apply_multiple();

  // repeated int64 jetton_multiple = 10;
  inline int jetton_multiple_size() const;
  inline void clear_jetton_multiple();
  static const int kJettonMultipleFieldNumber = 10;
  inline ::google::protobuf::int64 jetton_multiple(int index) const;
  inline void set_jetton_multiple(int index, ::google::protobuf::int64 value);
  inline void add_jetton_multiple(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      jetton_multiple() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_jetton_multiple();

  // repeated uint32 card_types = 11;
  inline int card_types_size() const;
  inline void clear_card_types();
  static const int kCardTypesFieldNumber = 11;
  inline ::google::protobuf::uint32 card_types(int index) const;
  inline void set_card_types(int index, ::google::protobuf::uint32 value);
  inline void add_card_types(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      card_types() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_card_types();

  // @@protoc_insertion_point(class_scope:net.msg_robniu_game_info_play_rep)
 private:
  inline void set_has_banker_id();
  inline void clear_has_banker_id();
  inline void set_has_game_status();
  inline void clear_has_game_status();
  inline void set_has_time_leave();
  inline void clear_has_time_leave();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > all_jetton_score_;
  ::google::protobuf::RepeatedPtrField< ::net::msg_cards > table_cards_;
  ::google::protobuf::uint32 banker_id_;
  ::google::protobuf::uint32 game_status_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > show_cards_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > player_status_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > apply_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > apply_multiple_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > jetton_multiple_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > card_types_;
  ::google::protobuf::uint32 time_leave_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_robniu_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_robniu_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_robniu_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_robniu_game_info_play_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_robniu_ready_start_rep : public ::google::protobuf::Message {
 public:
  msg_robniu_ready_start_rep();
  virtual ~msg_robniu_ready_start_rep();

  msg_robniu_ready_start_rep(const msg_robniu_ready_start_rep& from);

  inline msg_robniu_ready_start_rep& operator=(const msg_robniu_ready_start_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_robniu_ready_start_rep& default_instance();

  void Swap(msg_robniu_ready_start_rep* other);

  // implements Message ----------------------------------------------

  msg_robniu_ready_start_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_robniu_ready_start_rep& from);
  void MergeFrom(const msg_robniu_ready_start_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 time_leave = 1;
  inline bool has_time_leave() const;
  inline void clear_time_leave();
  static const int kTimeLeaveFieldNumber = 1;
  inline ::google::protobuf::uint32 time_leave() const;
  inline void set_time_leave(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_robniu_ready_start_rep)
 private:
  inline void set_has_time_leave();
  inline void clear_has_time_leave();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 time_leave_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_robniu_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_robniu_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_robniu_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_robniu_ready_start_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_robniu_start_rep : public ::google::protobuf::Message {
 public:
  msg_robniu_start_rep();
  virtual ~msg_robniu_start_rep();

  msg_robniu_start_rep(const msg_robniu_start_rep& from);

  inline msg_robniu_start_rep& operator=(const msg_robniu_start_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_robniu_start_rep& default_instance();

  void Swap(msg_robniu_start_rep* other);

  // implements Message ----------------------------------------------

  msg_robniu_start_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_robniu_start_rep& from);
  void MergeFrom(const msg_robniu_start_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 jetton_multiple = 1;
  inline int jetton_multiple_size() const;
  inline void clear_jetton_multiple();
  static const int kJettonMultipleFieldNumber = 1;
  inline ::google::protobuf::int64 jetton_multiple(int index) const;
  inline void set_jetton_multiple(int index, ::google::protobuf::int64 value);
  inline void add_jetton_multiple(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      jetton_multiple() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_jetton_multiple();

  // @@protoc_insertion_point(class_scope:net.msg_robniu_start_rep)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > jetton_multiple_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_robniu_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_robniu_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_robniu_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_robniu_start_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_robniu_apply_banker : public ::google::protobuf::Message {
 public:
  msg_robniu_apply_banker();
  virtual ~msg_robniu_apply_banker();

  msg_robniu_apply_banker(const msg_robniu_apply_banker& from);

  inline msg_robniu_apply_banker& operator=(const msg_robniu_apply_banker& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_robniu_apply_banker& default_instance();

  void Swap(msg_robniu_apply_banker* other);

  // implements Message ----------------------------------------------

  msg_robniu_apply_banker* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_robniu_apply_banker& from);
  void MergeFrom(const msg_robniu_apply_banker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 score = 1;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 1;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_robniu_apply_banker)
 private:
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_robniu_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_robniu_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_robniu_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_robniu_apply_banker* default_instance_;
};
// -------------------------------------------------------------------

class msg_robniu_apply_banker_rep : public ::google::protobuf::Message {
 public:
  msg_robniu_apply_banker_rep();
  virtual ~msg_robniu_apply_banker_rep();

  msg_robniu_apply_banker_rep(const msg_robniu_apply_banker_rep& from);

  inline msg_robniu_apply_banker_rep& operator=(const msg_robniu_apply_banker_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_robniu_apply_banker_rep& default_instance();

  void Swap(msg_robniu_apply_banker_rep* other);

  // implements Message ----------------------------------------------

  msg_robniu_apply_banker_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_robniu_apply_banker_rep& from);
  void MergeFrom(const msg_robniu_apply_banker_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 chairid = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairidFieldNumber = 1;
  inline ::google::protobuf::uint32 chairid() const;
  inline void set_chairid(::google::protobuf::uint32 value);

  // optional uint32 score = 2;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // optional uint32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_robniu_apply_banker_rep)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 chairid_;
  ::google::protobuf::uint32 score_;
  ::google::protobuf::uint32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_robniu_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_robniu_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_robniu_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_robniu_apply_banker_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_robniu_banker_result_rep : public ::google::protobuf::Message {
 public:
  msg_robniu_banker_result_rep();
  virtual ~msg_robniu_banker_result_rep();

  msg_robniu_banker_result_rep(const msg_robniu_banker_result_rep& from);

  inline msg_robniu_banker_result_rep& operator=(const msg_robniu_banker_result_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_robniu_banker_result_rep& default_instance();

  void Swap(msg_robniu_banker_result_rep* other);

  // implements Message ----------------------------------------------

  msg_robniu_banker_result_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_robniu_banker_result_rep& from);
  void MergeFrom(const msg_robniu_banker_result_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 banker_id = 1;
  inline bool has_banker_id() const;
  inline void clear_banker_id();
  static const int kBankerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 banker_id() const;
  inline void set_banker_id(::google::protobuf::uint32 value);

  // repeated uint32 apply_list = 2;
  inline int apply_list_size() const;
  inline void clear_apply_list();
  static const int kApplyListFieldNumber = 2;
  inline ::google::protobuf::uint32 apply_list(int index) const;
  inline void set_apply_list(int index, ::google::protobuf::uint32 value);
  inline void add_apply_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      apply_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_apply_list();

  // repeated int64 apply_multiple = 3;
  inline int apply_multiple_size() const;
  inline void clear_apply_multiple();
  static const int kApplyMultipleFieldNumber = 3;
  inline ::google::protobuf::int64 apply_multiple(int index) const;
  inline void set_apply_multiple(int index, ::google::protobuf::int64 value);
  inline void add_apply_multiple(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      apply_multiple() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_apply_multiple();

  // repeated uint32 time_leave = 4;
  inline int time_leave_size() const;
  inline void clear_time_leave();
  static const int kTimeLeaveFieldNumber = 4;
  inline ::google::protobuf::uint32 time_leave(int index) const;
  inline void set_time_leave(int index, ::google::protobuf::uint32 value);
  inline void add_time_leave(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      time_leave() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_time_leave();

  // @@protoc_insertion_point(class_scope:net.msg_robniu_banker_result_rep)
 private:
  inline void set_has_banker_id();
  inline void clear_has_banker_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > apply_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > apply_multiple_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > time_leave_;
  ::google::protobuf::uint32 banker_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_robniu_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_robniu_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_robniu_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_robniu_banker_result_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_robniu_place_jetton_req : public ::google::protobuf::Message {
 public:
  msg_robniu_place_jetton_req();
  virtual ~msg_robniu_place_jetton_req();

  msg_robniu_place_jetton_req(const msg_robniu_place_jetton_req& from);

  inline msg_robniu_place_jetton_req& operator=(const msg_robniu_place_jetton_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_robniu_place_jetton_req& default_instance();

  void Swap(msg_robniu_place_jetton_req* other);

  // implements Message ----------------------------------------------

  msg_robniu_place_jetton_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_robniu_place_jetton_req& from);
  void MergeFrom(const msg_robniu_place_jetton_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 jetton_score = 1;
  inline bool has_jetton_score() const;
  inline void clear_jetton_score();
  static const int kJettonScoreFieldNumber = 1;
  inline ::google::protobuf::int64 jetton_score() const;
  inline void set_jetton_score(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:net.msg_robniu_place_jetton_req)
 private:
  inline void set_has_jetton_score();
  inline void clear_has_jetton_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 jetton_score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_robniu_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_robniu_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_robniu_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_robniu_place_jetton_req* default_instance_;
};
// -------------------------------------------------------------------

class msg_robniu_place_jetton_rep : public ::google::protobuf::Message {
 public:
  msg_robniu_place_jetton_rep();
  virtual ~msg_robniu_place_jetton_rep();

  msg_robniu_place_jetton_rep(const msg_robniu_place_jetton_rep& from);

  inline msg_robniu_place_jetton_rep& operator=(const msg_robniu_place_jetton_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_robniu_place_jetton_rep& default_instance();

  void Swap(msg_robniu_place_jetton_rep* other);

  // implements Message ----------------------------------------------

  msg_robniu_place_jetton_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_robniu_place_jetton_rep& from);
  void MergeFrom(const msg_robniu_place_jetton_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 jetton_score = 1;
  inline bool has_jetton_score() const;
  inline void clear_jetton_score();
  static const int kJettonScoreFieldNumber = 1;
  inline ::google::protobuf::int64 jetton_score() const;
  inline void set_jetton_score(::google::protobuf::int64 value);

  // optional uint32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_robniu_place_jetton_rep)
 private:
  inline void set_has_jetton_score();
  inline void clear_has_jetton_score();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 jetton_score_;
  ::google::protobuf::uint32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_robniu_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_robniu_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_robniu_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_robniu_place_jetton_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_robniu_place_jetton_broadcast : public ::google::protobuf::Message {
 public:
  msg_robniu_place_jetton_broadcast();
  virtual ~msg_robniu_place_jetton_broadcast();

  msg_robniu_place_jetton_broadcast(const msg_robniu_place_jetton_broadcast& from);

  inline msg_robniu_place_jetton_broadcast& operator=(const msg_robniu_place_jetton_broadcast& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_robniu_place_jetton_broadcast& default_instance();

  void Swap(msg_robniu_place_jetton_broadcast* other);

  // implements Message ----------------------------------------------

  msg_robniu_place_jetton_broadcast* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_robniu_place_jetton_broadcast& from);
  void MergeFrom(const msg_robniu_place_jetton_broadcast& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 chairid = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairidFieldNumber = 1;
  inline ::google::protobuf::uint32 chairid() const;
  inline void set_chairid(::google::protobuf::uint32 value);

  // optional int64 jetton_score = 2;
  inline bool has_jetton_score() const;
  inline void clear_jetton_score();
  static const int kJettonScoreFieldNumber = 2;
  inline ::google::protobuf::int64 jetton_score() const;
  inline void set_jetton_score(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:net.msg_robniu_place_jetton_broadcast)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_jetton_score();
  inline void clear_has_jetton_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 jetton_score_;
  ::google::protobuf::uint32 chairid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_robniu_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_robniu_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_robniu_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_robniu_place_jetton_broadcast* default_instance_;
};
// -------------------------------------------------------------------

class msg_robniu_send_card_rep : public ::google::protobuf::Message {
 public:
  msg_robniu_send_card_rep();
  virtual ~msg_robniu_send_card_rep();

  msg_robniu_send_card_rep(const msg_robniu_send_card_rep& from);

  inline msg_robniu_send_card_rep& operator=(const msg_robniu_send_card_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_robniu_send_card_rep& default_instance();

  void Swap(msg_robniu_send_card_rep* other);

  // implements Message ----------------------------------------------

  msg_robniu_send_card_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_robniu_send_card_rep& from);
  void MergeFrom(const msg_robniu_send_card_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 card_types = 1;
  inline int card_types_size() const;
  inline void clear_card_types();
  static const int kCardTypesFieldNumber = 1;
  inline ::google::protobuf::uint32 card_types(int index) const;
  inline void set_card_types(int index, ::google::protobuf::uint32 value);
  inline void add_card_types(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      card_types() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_card_types();

  // repeated uint32 chairid = 2;
  inline int chairid_size() const;
  inline void clear_chairid();
  static const int kChairidFieldNumber = 2;
  inline ::google::protobuf::uint32 chairid(int index) const;
  inline void set_chairid(int index, ::google::protobuf::uint32 value);
  inline void add_chairid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      chairid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_chairid();

  // repeated uint32 cards = 3;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 3;
  inline ::google::protobuf::uint32 cards(int index) const;
  inline void set_cards(int index, ::google::protobuf::uint32 value);
  inline void add_cards(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cards();

  // optional uint32 time_leave = 4;
  inline bool has_time_leave() const;
  inline void clear_time_leave();
  static const int kTimeLeaveFieldNumber = 4;
  inline ::google::protobuf::uint32 time_leave() const;
  inline void set_time_leave(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_robniu_send_card_rep)
 private:
  inline void set_has_time_leave();
  inline void clear_has_time_leave();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > card_types_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > chairid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cards_;
  ::google::protobuf::uint32 time_leave_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_robniu_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_robniu_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_robniu_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_robniu_send_card_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_robniu_change_card : public ::google::protobuf::Message {
 public:
  msg_robniu_change_card();
  virtual ~msg_robniu_change_card();

  msg_robniu_change_card(const msg_robniu_change_card& from);

  inline msg_robniu_change_card& operator=(const msg_robniu_change_card& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_robniu_change_card& default_instance();

  void Swap(msg_robniu_change_card* other);

  // implements Message ----------------------------------------------

  msg_robniu_change_card* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_robniu_change_card& from);
  void MergeFrom(const msg_robniu_change_card& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 cards = 1;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 1;
  inline ::google::protobuf::uint32 cards(int index) const;
  inline void set_cards(int index, ::google::protobuf::uint32 value);
  inline void add_cards(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cards();

  // @@protoc_insertion_point(class_scope:net.msg_robniu_change_card)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cards_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_robniu_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_robniu_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_robniu_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_robniu_change_card* default_instance_;
};
// -------------------------------------------------------------------

class msg_robniu_change_card_rep : public ::google::protobuf::Message {
 public:
  msg_robniu_change_card_rep();
  virtual ~msg_robniu_change_card_rep();

  msg_robniu_change_card_rep(const msg_robniu_change_card_rep& from);

  inline msg_robniu_change_card_rep& operator=(const msg_robniu_change_card_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_robniu_change_card_rep& default_instance();

  void Swap(msg_robniu_change_card_rep* other);

  // implements Message ----------------------------------------------

  msg_robniu_change_card_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_robniu_change_card_rep& from);
  void MergeFrom(const msg_robniu_change_card_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 oper_id = 1;
  inline bool has_oper_id() const;
  inline void clear_oper_id();
  static const int kOperIdFieldNumber = 1;
  inline ::google::protobuf::uint32 oper_id() const;
  inline void set_oper_id(::google::protobuf::uint32 value);

  // optional uint32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // repeated uint32 cards = 3;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 3;
  inline ::google::protobuf::uint32 cards(int index) const;
  inline void set_cards(int index, ::google::protobuf::uint32 value);
  inline void add_cards(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cards();

  // optional uint32 card_type = 4;
  inline bool has_card_type() const;
  inline void clear_card_type();
  static const int kCardTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 card_type() const;
  inline void set_card_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_robniu_change_card_rep)
 private:
  inline void set_has_oper_id();
  inline void clear_has_oper_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_card_type();
  inline void clear_has_card_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 oper_id_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cards_;
  ::google::protobuf::uint32 card_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_robniu_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_robniu_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_robniu_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_robniu_change_card_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_robniu_game_end : public ::google::protobuf::Message {
 public:
  msg_robniu_game_end();
  virtual ~msg_robniu_game_end();

  msg_robniu_game_end(const msg_robniu_game_end& from);

  inline msg_robniu_game_end& operator=(const msg_robniu_game_end& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_robniu_game_end& default_instance();

  void Swap(msg_robniu_game_end* other);

  // implements Message ----------------------------------------------

  msg_robniu_game_end* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_robniu_game_end& from);
  void MergeFrom(const msg_robniu_game_end& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 time_leave = 1;
  inline bool has_time_leave() const;
  inline void clear_time_leave();
  static const int kTimeLeaveFieldNumber = 1;
  inline ::google::protobuf::uint32 time_leave() const;
  inline void set_time_leave(::google::protobuf::uint32 value);

  // repeated .net.msg_cards table_cards = 2;
  inline int table_cards_size() const;
  inline void clear_table_cards();
  static const int kTableCardsFieldNumber = 2;
  inline const ::net::msg_cards& table_cards(int index) const;
  inline ::net::msg_cards* mutable_table_cards(int index);
  inline ::net::msg_cards* add_table_cards();
  inline const ::google::protobuf::RepeatedPtrField< ::net::msg_cards >&
      table_cards() const;
  inline ::google::protobuf::RepeatedPtrField< ::net::msg_cards >*
      mutable_table_cards();

  // repeated uint32 card_types = 3;
  inline int card_types_size() const;
  inline void clear_card_types();
  static const int kCardTypesFieldNumber = 3;
  inline ::google::protobuf::uint32 card_types(int index) const;
  inline void set_card_types(int index, ::google::protobuf::uint32 value);
  inline void add_card_types(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      card_types() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_card_types();

  // repeated int64 player_score = 4;
  inline int player_score_size() const;
  inline void clear_player_score();
  static const int kPlayerScoreFieldNumber = 4;
  inline ::google::protobuf::int64 player_score(int index) const;
  inline void set_player_score(int index, ::google::protobuf::int64 value);
  inline void add_player_score(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      player_score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_player_score();

  // repeated int32 win_multiple = 5;
  inline int win_multiple_size() const;
  inline void clear_win_multiple();
  static const int kWinMultipleFieldNumber = 5;
  inline ::google::protobuf::int32 win_multiple(int index) const;
  inline void set_win_multiple(int index, ::google::protobuf::int32 value);
  inline void add_win_multiple(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      win_multiple() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_win_multiple();

  // optional uint32 settle_accounts_type = 6;
  inline bool has_settle_accounts_type() const;
  inline void clear_settle_accounts_type();
  static const int kSettleAccountsTypeFieldNumber = 6;
  inline ::google::protobuf::uint32 settle_accounts_type() const;
  inline void set_settle_accounts_type(::google::protobuf::uint32 value);

  // optional uint32 banker_id = 7;
  inline bool has_banker_id() const;
  inline void clear_banker_id();
  static const int kBankerIdFieldNumber = 7;
  inline ::google::protobuf::uint32 banker_id() const;
  inline void set_banker_id(::google::protobuf::uint32 value);

  // repeated uint32 change_chairid = 8;
  inline int change_chairid_size() const;
  inline void clear_change_chairid();
  static const int kChangeChairidFieldNumber = 8;
  inline ::google::protobuf::uint32 change_chairid(int index) const;
  inline void set_change_chairid(int index, ::google::protobuf::uint32 value);
  inline void add_change_chairid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      change_chairid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_change_chairid();

  // @@protoc_insertion_point(class_scope:net.msg_robniu_game_end)
 private:
  inline void set_has_time_leave();
  inline void clear_has_time_leave();
  inline void set_has_settle_accounts_type();
  inline void clear_has_settle_accounts_type();
  inline void set_has_banker_id();
  inline void clear_has_banker_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::net::msg_cards > table_cards_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > card_types_;
  ::google::protobuf::uint32 time_leave_;
  ::google::protobuf::uint32 settle_accounts_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > player_score_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > win_multiple_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > change_chairid_;
  ::google::protobuf::uint32 banker_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_robniu_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_robniu_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_robniu_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_robniu_game_end* default_instance_;
};
// -------------------------------------------------------------------

class msg_robniu_socre_less : public ::google::protobuf::Message {
 public:
  msg_robniu_socre_less();
  virtual ~msg_robniu_socre_less();

  msg_robniu_socre_less(const msg_robniu_socre_less& from);

  inline msg_robniu_socre_less& operator=(const msg_robniu_socre_less& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_robniu_socre_less& default_instance();

  void Swap(msg_robniu_socre_less* other);

  // implements Message ----------------------------------------------

  msg_robniu_socre_less* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_robniu_socre_less& from);
  void MergeFrom(const msg_robniu_socre_less& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_robniu_socre_less)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_robniu_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_robniu_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_robniu_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_robniu_socre_less* default_instance_;
};
// -------------------------------------------------------------------

class msg_robniu_game_status : public ::google::protobuf::Message {
 public:
  msg_robniu_game_status();
  virtual ~msg_robniu_game_status();

  msg_robniu_game_status(const msg_robniu_game_status& from);

  inline msg_robniu_game_status& operator=(const msg_robniu_game_status& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_robniu_game_status& default_instance();

  void Swap(msg_robniu_game_status* other);

  // implements Message ----------------------------------------------

  msg_robniu_game_status* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_robniu_game_status& from);
  void MergeFrom(const msg_robniu_game_status& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_robniu_game_status)
 private:
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_robniu_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_robniu_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_robniu_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_robniu_game_status* default_instance_;
};
// ===================================================================


// ===================================================================

// msg_robniu_game_info_free_rep

// optional uint32 time_leave = 1;
inline bool msg_robniu_game_info_free_rep::has_time_leave() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_robniu_game_info_free_rep::set_has_time_leave() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_robniu_game_info_free_rep::clear_has_time_leave() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_robniu_game_info_free_rep::clear_time_leave() {
  time_leave_ = 0u;
  clear_has_time_leave();
}
inline ::google::protobuf::uint32 msg_robniu_game_info_free_rep::time_leave() const {
  return time_leave_;
}
inline void msg_robniu_game_info_free_rep::set_time_leave(::google::protobuf::uint32 value) {
  set_has_time_leave();
  time_leave_ = value;
}

// optional uint32 banker_id = 2;
inline bool msg_robniu_game_info_free_rep::has_banker_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_robniu_game_info_free_rep::set_has_banker_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_robniu_game_info_free_rep::clear_has_banker_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_robniu_game_info_free_rep::clear_banker_id() {
  banker_id_ = 0u;
  clear_has_banker_id();
}
inline ::google::protobuf::uint32 msg_robniu_game_info_free_rep::banker_id() const {
  return banker_id_;
}
inline void msg_robniu_game_info_free_rep::set_banker_id(::google::protobuf::uint32 value) {
  set_has_banker_id();
  banker_id_ = value;
}

// -------------------------------------------------------------------

// msg_robniu_game_info_play_rep

// repeated int64 all_jetton_score = 1;
inline int msg_robniu_game_info_play_rep::all_jetton_score_size() const {
  return all_jetton_score_.size();
}
inline void msg_robniu_game_info_play_rep::clear_all_jetton_score() {
  all_jetton_score_.Clear();
}
inline ::google::protobuf::int64 msg_robniu_game_info_play_rep::all_jetton_score(int index) const {
  return all_jetton_score_.Get(index);
}
inline void msg_robniu_game_info_play_rep::set_all_jetton_score(int index, ::google::protobuf::int64 value) {
  all_jetton_score_.Set(index, value);
}
inline void msg_robniu_game_info_play_rep::add_all_jetton_score(::google::protobuf::int64 value) {
  all_jetton_score_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
msg_robniu_game_info_play_rep::all_jetton_score() const {
  return all_jetton_score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
msg_robniu_game_info_play_rep::mutable_all_jetton_score() {
  return &all_jetton_score_;
}

// repeated .net.msg_cards table_cards = 2;
inline int msg_robniu_game_info_play_rep::table_cards_size() const {
  return table_cards_.size();
}
inline void msg_robniu_game_info_play_rep::clear_table_cards() {
  table_cards_.Clear();
}
inline const ::net::msg_cards& msg_robniu_game_info_play_rep::table_cards(int index) const {
  return table_cards_.Get(index);
}
inline ::net::msg_cards* msg_robniu_game_info_play_rep::mutable_table_cards(int index) {
  return table_cards_.Mutable(index);
}
inline ::net::msg_cards* msg_robniu_game_info_play_rep::add_table_cards() {
  return table_cards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::net::msg_cards >&
msg_robniu_game_info_play_rep::table_cards() const {
  return table_cards_;
}
inline ::google::protobuf::RepeatedPtrField< ::net::msg_cards >*
msg_robniu_game_info_play_rep::mutable_table_cards() {
  return &table_cards_;
}

// optional uint32 banker_id = 3;
inline bool msg_robniu_game_info_play_rep::has_banker_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_robniu_game_info_play_rep::set_has_banker_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_robniu_game_info_play_rep::clear_has_banker_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_robniu_game_info_play_rep::clear_banker_id() {
  banker_id_ = 0u;
  clear_has_banker_id();
}
inline ::google::protobuf::uint32 msg_robniu_game_info_play_rep::banker_id() const {
  return banker_id_;
}
inline void msg_robniu_game_info_play_rep::set_banker_id(::google::protobuf::uint32 value) {
  set_has_banker_id();
  banker_id_ = value;
}

// optional uint32 game_status = 4;
inline bool msg_robniu_game_info_play_rep::has_game_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_robniu_game_info_play_rep::set_has_game_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_robniu_game_info_play_rep::clear_has_game_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_robniu_game_info_play_rep::clear_game_status() {
  game_status_ = 0u;
  clear_has_game_status();
}
inline ::google::protobuf::uint32 msg_robniu_game_info_play_rep::game_status() const {
  return game_status_;
}
inline void msg_robniu_game_info_play_rep::set_game_status(::google::protobuf::uint32 value) {
  set_has_game_status();
  game_status_ = value;
}

// repeated uint32 show_cards = 5;
inline int msg_robniu_game_info_play_rep::show_cards_size() const {
  return show_cards_.size();
}
inline void msg_robniu_game_info_play_rep::clear_show_cards() {
  show_cards_.Clear();
}
inline ::google::protobuf::uint32 msg_robniu_game_info_play_rep::show_cards(int index) const {
  return show_cards_.Get(index);
}
inline void msg_robniu_game_info_play_rep::set_show_cards(int index, ::google::protobuf::uint32 value) {
  show_cards_.Set(index, value);
}
inline void msg_robniu_game_info_play_rep::add_show_cards(::google::protobuf::uint32 value) {
  show_cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
msg_robniu_game_info_play_rep::show_cards() const {
  return show_cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
msg_robniu_game_info_play_rep::mutable_show_cards() {
  return &show_cards_;
}

// repeated uint32 player_status = 6;
inline int msg_robniu_game_info_play_rep::player_status_size() const {
  return player_status_.size();
}
inline void msg_robniu_game_info_play_rep::clear_player_status() {
  player_status_.Clear();
}
inline ::google::protobuf::uint32 msg_robniu_game_info_play_rep::player_status(int index) const {
  return player_status_.Get(index);
}
inline void msg_robniu_game_info_play_rep::set_player_status(int index, ::google::protobuf::uint32 value) {
  player_status_.Set(index, value);
}
inline void msg_robniu_game_info_play_rep::add_player_status(::google::protobuf::uint32 value) {
  player_status_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
msg_robniu_game_info_play_rep::player_status() const {
  return player_status_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
msg_robniu_game_info_play_rep::mutable_player_status() {
  return &player_status_;
}

// optional uint32 time_leave = 7;
inline bool msg_robniu_game_info_play_rep::has_time_leave() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_robniu_game_info_play_rep::set_has_time_leave() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_robniu_game_info_play_rep::clear_has_time_leave() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_robniu_game_info_play_rep::clear_time_leave() {
  time_leave_ = 0u;
  clear_has_time_leave();
}
inline ::google::protobuf::uint32 msg_robniu_game_info_play_rep::time_leave() const {
  return time_leave_;
}
inline void msg_robniu_game_info_play_rep::set_time_leave(::google::protobuf::uint32 value) {
  set_has_time_leave();
  time_leave_ = value;
}

// repeated uint32 apply_list = 8;
inline int msg_robniu_game_info_play_rep::apply_list_size() const {
  return apply_list_.size();
}
inline void msg_robniu_game_info_play_rep::clear_apply_list() {
  apply_list_.Clear();
}
inline ::google::protobuf::uint32 msg_robniu_game_info_play_rep::apply_list(int index) const {
  return apply_list_.Get(index);
}
inline void msg_robniu_game_info_play_rep::set_apply_list(int index, ::google::protobuf::uint32 value) {
  apply_list_.Set(index, value);
}
inline void msg_robniu_game_info_play_rep::add_apply_list(::google::protobuf::uint32 value) {
  apply_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
msg_robniu_game_info_play_rep::apply_list() const {
  return apply_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
msg_robniu_game_info_play_rep::mutable_apply_list() {
  return &apply_list_;
}

// repeated int64 apply_multiple = 9;
inline int msg_robniu_game_info_play_rep::apply_multiple_size() const {
  return apply_multiple_.size();
}
inline void msg_robniu_game_info_play_rep::clear_apply_multiple() {
  apply_multiple_.Clear();
}
inline ::google::protobuf::int64 msg_robniu_game_info_play_rep::apply_multiple(int index) const {
  return apply_multiple_.Get(index);
}
inline void msg_robniu_game_info_play_rep::set_apply_multiple(int index, ::google::protobuf::int64 value) {
  apply_multiple_.Set(index, value);
}
inline void msg_robniu_game_info_play_rep::add_apply_multiple(::google::protobuf::int64 value) {
  apply_multiple_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
msg_robniu_game_info_play_rep::apply_multiple() const {
  return apply_multiple_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
msg_robniu_game_info_play_rep::mutable_apply_multiple() {
  return &apply_multiple_;
}

// repeated int64 jetton_multiple = 10;
inline int msg_robniu_game_info_play_rep::jetton_multiple_size() const {
  return jetton_multiple_.size();
}
inline void msg_robniu_game_info_play_rep::clear_jetton_multiple() {
  jetton_multiple_.Clear();
}
inline ::google::protobuf::int64 msg_robniu_game_info_play_rep::jetton_multiple(int index) const {
  return jetton_multiple_.Get(index);
}
inline void msg_robniu_game_info_play_rep::set_jetton_multiple(int index, ::google::protobuf::int64 value) {
  jetton_multiple_.Set(index, value);
}
inline void msg_robniu_game_info_play_rep::add_jetton_multiple(::google::protobuf::int64 value) {
  jetton_multiple_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
msg_robniu_game_info_play_rep::jetton_multiple() const {
  return jetton_multiple_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
msg_robniu_game_info_play_rep::mutable_jetton_multiple() {
  return &jetton_multiple_;
}

// repeated uint32 card_types = 11;
inline int msg_robniu_game_info_play_rep::card_types_size() const {
  return card_types_.size();
}
inline void msg_robniu_game_info_play_rep::clear_card_types() {
  card_types_.Clear();
}
inline ::google::protobuf::uint32 msg_robniu_game_info_play_rep::card_types(int index) const {
  return card_types_.Get(index);
}
inline void msg_robniu_game_info_play_rep::set_card_types(int index, ::google::protobuf::uint32 value) {
  card_types_.Set(index, value);
}
inline void msg_robniu_game_info_play_rep::add_card_types(::google::protobuf::uint32 value) {
  card_types_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
msg_robniu_game_info_play_rep::card_types() const {
  return card_types_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
msg_robniu_game_info_play_rep::mutable_card_types() {
  return &card_types_;
}

// -------------------------------------------------------------------

// msg_robniu_ready_start_rep

// optional uint32 time_leave = 1;
inline bool msg_robniu_ready_start_rep::has_time_leave() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_robniu_ready_start_rep::set_has_time_leave() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_robniu_ready_start_rep::clear_has_time_leave() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_robniu_ready_start_rep::clear_time_leave() {
  time_leave_ = 0u;
  clear_has_time_leave();
}
inline ::google::protobuf::uint32 msg_robniu_ready_start_rep::time_leave() const {
  return time_leave_;
}
inline void msg_robniu_ready_start_rep::set_time_leave(::google::protobuf::uint32 value) {
  set_has_time_leave();
  time_leave_ = value;
}

// -------------------------------------------------------------------

// msg_robniu_start_rep

// repeated int64 jetton_multiple = 1;
inline int msg_robniu_start_rep::jetton_multiple_size() const {
  return jetton_multiple_.size();
}
inline void msg_robniu_start_rep::clear_jetton_multiple() {
  jetton_multiple_.Clear();
}
inline ::google::protobuf::int64 msg_robniu_start_rep::jetton_multiple(int index) const {
  return jetton_multiple_.Get(index);
}
inline void msg_robniu_start_rep::set_jetton_multiple(int index, ::google::protobuf::int64 value) {
  jetton_multiple_.Set(index, value);
}
inline void msg_robniu_start_rep::add_jetton_multiple(::google::protobuf::int64 value) {
  jetton_multiple_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
msg_robniu_start_rep::jetton_multiple() const {
  return jetton_multiple_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
msg_robniu_start_rep::mutable_jetton_multiple() {
  return &jetton_multiple_;
}

// -------------------------------------------------------------------

// msg_robniu_apply_banker

// optional uint32 score = 1;
inline bool msg_robniu_apply_banker::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_robniu_apply_banker::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_robniu_apply_banker::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_robniu_apply_banker::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 msg_robniu_apply_banker::score() const {
  return score_;
}
inline void msg_robniu_apply_banker::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// msg_robniu_apply_banker_rep

// optional uint32 chairid = 1;
inline bool msg_robniu_apply_banker_rep::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_robniu_apply_banker_rep::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_robniu_apply_banker_rep::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_robniu_apply_banker_rep::clear_chairid() {
  chairid_ = 0u;
  clear_has_chairid();
}
inline ::google::protobuf::uint32 msg_robniu_apply_banker_rep::chairid() const {
  return chairid_;
}
inline void msg_robniu_apply_banker_rep::set_chairid(::google::protobuf::uint32 value) {
  set_has_chairid();
  chairid_ = value;
}

// optional uint32 score = 2;
inline bool msg_robniu_apply_banker_rep::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_robniu_apply_banker_rep::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_robniu_apply_banker_rep::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_robniu_apply_banker_rep::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 msg_robniu_apply_banker_rep::score() const {
  return score_;
}
inline void msg_robniu_apply_banker_rep::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
}

// optional uint32 result = 3;
inline bool msg_robniu_apply_banker_rep::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_robniu_apply_banker_rep::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_robniu_apply_banker_rep::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_robniu_apply_banker_rep::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 msg_robniu_apply_banker_rep::result() const {
  return result_;
}
inline void msg_robniu_apply_banker_rep::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// msg_robniu_banker_result_rep

// optional uint32 banker_id = 1;
inline bool msg_robniu_banker_result_rep::has_banker_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_robniu_banker_result_rep::set_has_banker_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_robniu_banker_result_rep::clear_has_banker_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_robniu_banker_result_rep::clear_banker_id() {
  banker_id_ = 0u;
  clear_has_banker_id();
}
inline ::google::protobuf::uint32 msg_robniu_banker_result_rep::banker_id() const {
  return banker_id_;
}
inline void msg_robniu_banker_result_rep::set_banker_id(::google::protobuf::uint32 value) {
  set_has_banker_id();
  banker_id_ = value;
}

// repeated uint32 apply_list = 2;
inline int msg_robniu_banker_result_rep::apply_list_size() const {
  return apply_list_.size();
}
inline void msg_robniu_banker_result_rep::clear_apply_list() {
  apply_list_.Clear();
}
inline ::google::protobuf::uint32 msg_robniu_banker_result_rep::apply_list(int index) const {
  return apply_list_.Get(index);
}
inline void msg_robniu_banker_result_rep::set_apply_list(int index, ::google::protobuf::uint32 value) {
  apply_list_.Set(index, value);
}
inline void msg_robniu_banker_result_rep::add_apply_list(::google::protobuf::uint32 value) {
  apply_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
msg_robniu_banker_result_rep::apply_list() const {
  return apply_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
msg_robniu_banker_result_rep::mutable_apply_list() {
  return &apply_list_;
}

// repeated int64 apply_multiple = 3;
inline int msg_robniu_banker_result_rep::apply_multiple_size() const {
  return apply_multiple_.size();
}
inline void msg_robniu_banker_result_rep::clear_apply_multiple() {
  apply_multiple_.Clear();
}
inline ::google::protobuf::int64 msg_robniu_banker_result_rep::apply_multiple(int index) const {
  return apply_multiple_.Get(index);
}
inline void msg_robniu_banker_result_rep::set_apply_multiple(int index, ::google::protobuf::int64 value) {
  apply_multiple_.Set(index, value);
}
inline void msg_robniu_banker_result_rep::add_apply_multiple(::google::protobuf::int64 value) {
  apply_multiple_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
msg_robniu_banker_result_rep::apply_multiple() const {
  return apply_multiple_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
msg_robniu_banker_result_rep::mutable_apply_multiple() {
  return &apply_multiple_;
}

// repeated uint32 time_leave = 4;
inline int msg_robniu_banker_result_rep::time_leave_size() const {
  return time_leave_.size();
}
inline void msg_robniu_banker_result_rep::clear_time_leave() {
  time_leave_.Clear();
}
inline ::google::protobuf::uint32 msg_robniu_banker_result_rep::time_leave(int index) const {
  return time_leave_.Get(index);
}
inline void msg_robniu_banker_result_rep::set_time_leave(int index, ::google::protobuf::uint32 value) {
  time_leave_.Set(index, value);
}
inline void msg_robniu_banker_result_rep::add_time_leave(::google::protobuf::uint32 value) {
  time_leave_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
msg_robniu_banker_result_rep::time_leave() const {
  return time_leave_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
msg_robniu_banker_result_rep::mutable_time_leave() {
  return &time_leave_;
}

// -------------------------------------------------------------------

// msg_robniu_place_jetton_req

// optional int64 jetton_score = 1;
inline bool msg_robniu_place_jetton_req::has_jetton_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_robniu_place_jetton_req::set_has_jetton_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_robniu_place_jetton_req::clear_has_jetton_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_robniu_place_jetton_req::clear_jetton_score() {
  jetton_score_ = GOOGLE_LONGLONG(0);
  clear_has_jetton_score();
}
inline ::google::protobuf::int64 msg_robniu_place_jetton_req::jetton_score() const {
  return jetton_score_;
}
inline void msg_robniu_place_jetton_req::set_jetton_score(::google::protobuf::int64 value) {
  set_has_jetton_score();
  jetton_score_ = value;
}

// -------------------------------------------------------------------

// msg_robniu_place_jetton_rep

// optional int64 jetton_score = 1;
inline bool msg_robniu_place_jetton_rep::has_jetton_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_robniu_place_jetton_rep::set_has_jetton_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_robniu_place_jetton_rep::clear_has_jetton_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_robniu_place_jetton_rep::clear_jetton_score() {
  jetton_score_ = GOOGLE_LONGLONG(0);
  clear_has_jetton_score();
}
inline ::google::protobuf::int64 msg_robniu_place_jetton_rep::jetton_score() const {
  return jetton_score_;
}
inline void msg_robniu_place_jetton_rep::set_jetton_score(::google::protobuf::int64 value) {
  set_has_jetton_score();
  jetton_score_ = value;
}

// optional uint32 result = 2;
inline bool msg_robniu_place_jetton_rep::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_robniu_place_jetton_rep::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_robniu_place_jetton_rep::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_robniu_place_jetton_rep::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 msg_robniu_place_jetton_rep::result() const {
  return result_;
}
inline void msg_robniu_place_jetton_rep::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// msg_robniu_place_jetton_broadcast

// optional uint32 chairid = 1;
inline bool msg_robniu_place_jetton_broadcast::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_robniu_place_jetton_broadcast::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_robniu_place_jetton_broadcast::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_robniu_place_jetton_broadcast::clear_chairid() {
  chairid_ = 0u;
  clear_has_chairid();
}
inline ::google::protobuf::uint32 msg_robniu_place_jetton_broadcast::chairid() const {
  return chairid_;
}
inline void msg_robniu_place_jetton_broadcast::set_chairid(::google::protobuf::uint32 value) {
  set_has_chairid();
  chairid_ = value;
}

// optional int64 jetton_score = 2;
inline bool msg_robniu_place_jetton_broadcast::has_jetton_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_robniu_place_jetton_broadcast::set_has_jetton_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_robniu_place_jetton_broadcast::clear_has_jetton_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_robniu_place_jetton_broadcast::clear_jetton_score() {
  jetton_score_ = GOOGLE_LONGLONG(0);
  clear_has_jetton_score();
}
inline ::google::protobuf::int64 msg_robniu_place_jetton_broadcast::jetton_score() const {
  return jetton_score_;
}
inline void msg_robniu_place_jetton_broadcast::set_jetton_score(::google::protobuf::int64 value) {
  set_has_jetton_score();
  jetton_score_ = value;
}

// -------------------------------------------------------------------

// msg_robniu_send_card_rep

// repeated uint32 card_types = 1;
inline int msg_robniu_send_card_rep::card_types_size() const {
  return card_types_.size();
}
inline void msg_robniu_send_card_rep::clear_card_types() {
  card_types_.Clear();
}
inline ::google::protobuf::uint32 msg_robniu_send_card_rep::card_types(int index) const {
  return card_types_.Get(index);
}
inline void msg_robniu_send_card_rep::set_card_types(int index, ::google::protobuf::uint32 value) {
  card_types_.Set(index, value);
}
inline void msg_robniu_send_card_rep::add_card_types(::google::protobuf::uint32 value) {
  card_types_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
msg_robniu_send_card_rep::card_types() const {
  return card_types_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
msg_robniu_send_card_rep::mutable_card_types() {
  return &card_types_;
}

// repeated uint32 chairid = 2;
inline int msg_robniu_send_card_rep::chairid_size() const {
  return chairid_.size();
}
inline void msg_robniu_send_card_rep::clear_chairid() {
  chairid_.Clear();
}
inline ::google::protobuf::uint32 msg_robniu_send_card_rep::chairid(int index) const {
  return chairid_.Get(index);
}
inline void msg_robniu_send_card_rep::set_chairid(int index, ::google::protobuf::uint32 value) {
  chairid_.Set(index, value);
}
inline void msg_robniu_send_card_rep::add_chairid(::google::protobuf::uint32 value) {
  chairid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
msg_robniu_send_card_rep::chairid() const {
  return chairid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
msg_robniu_send_card_rep::mutable_chairid() {
  return &chairid_;
}

// repeated uint32 cards = 3;
inline int msg_robniu_send_card_rep::cards_size() const {
  return cards_.size();
}
inline void msg_robniu_send_card_rep::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::uint32 msg_robniu_send_card_rep::cards(int index) const {
  return cards_.Get(index);
}
inline void msg_robniu_send_card_rep::set_cards(int index, ::google::protobuf::uint32 value) {
  cards_.Set(index, value);
}
inline void msg_robniu_send_card_rep::add_cards(::google::protobuf::uint32 value) {
  cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
msg_robniu_send_card_rep::cards() const {
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
msg_robniu_send_card_rep::mutable_cards() {
  return &cards_;
}

// optional uint32 time_leave = 4;
inline bool msg_robniu_send_card_rep::has_time_leave() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_robniu_send_card_rep::set_has_time_leave() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_robniu_send_card_rep::clear_has_time_leave() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_robniu_send_card_rep::clear_time_leave() {
  time_leave_ = 0u;
  clear_has_time_leave();
}
inline ::google::protobuf::uint32 msg_robniu_send_card_rep::time_leave() const {
  return time_leave_;
}
inline void msg_robniu_send_card_rep::set_time_leave(::google::protobuf::uint32 value) {
  set_has_time_leave();
  time_leave_ = value;
}

// -------------------------------------------------------------------

// msg_robniu_change_card

// repeated uint32 cards = 1;
inline int msg_robniu_change_card::cards_size() const {
  return cards_.size();
}
inline void msg_robniu_change_card::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::uint32 msg_robniu_change_card::cards(int index) const {
  return cards_.Get(index);
}
inline void msg_robniu_change_card::set_cards(int index, ::google::protobuf::uint32 value) {
  cards_.Set(index, value);
}
inline void msg_robniu_change_card::add_cards(::google::protobuf::uint32 value) {
  cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
msg_robniu_change_card::cards() const {
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
msg_robniu_change_card::mutable_cards() {
  return &cards_;
}

// -------------------------------------------------------------------

// msg_robniu_change_card_rep

// optional uint32 oper_id = 1;
inline bool msg_robniu_change_card_rep::has_oper_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_robniu_change_card_rep::set_has_oper_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_robniu_change_card_rep::clear_has_oper_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_robniu_change_card_rep::clear_oper_id() {
  oper_id_ = 0u;
  clear_has_oper_id();
}
inline ::google::protobuf::uint32 msg_robniu_change_card_rep::oper_id() const {
  return oper_id_;
}
inline void msg_robniu_change_card_rep::set_oper_id(::google::protobuf::uint32 value) {
  set_has_oper_id();
  oper_id_ = value;
}

// optional uint32 result = 2;
inline bool msg_robniu_change_card_rep::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_robniu_change_card_rep::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_robniu_change_card_rep::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_robniu_change_card_rep::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 msg_robniu_change_card_rep::result() const {
  return result_;
}
inline void msg_robniu_change_card_rep::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// repeated uint32 cards = 3;
inline int msg_robniu_change_card_rep::cards_size() const {
  return cards_.size();
}
inline void msg_robniu_change_card_rep::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::uint32 msg_robniu_change_card_rep::cards(int index) const {
  return cards_.Get(index);
}
inline void msg_robniu_change_card_rep::set_cards(int index, ::google::protobuf::uint32 value) {
  cards_.Set(index, value);
}
inline void msg_robniu_change_card_rep::add_cards(::google::protobuf::uint32 value) {
  cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
msg_robniu_change_card_rep::cards() const {
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
msg_robniu_change_card_rep::mutable_cards() {
  return &cards_;
}

// optional uint32 card_type = 4;
inline bool msg_robniu_change_card_rep::has_card_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_robniu_change_card_rep::set_has_card_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_robniu_change_card_rep::clear_has_card_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_robniu_change_card_rep::clear_card_type() {
  card_type_ = 0u;
  clear_has_card_type();
}
inline ::google::protobuf::uint32 msg_robniu_change_card_rep::card_type() const {
  return card_type_;
}
inline void msg_robniu_change_card_rep::set_card_type(::google::protobuf::uint32 value) {
  set_has_card_type();
  card_type_ = value;
}

// -------------------------------------------------------------------

// msg_robniu_game_end

// optional uint32 time_leave = 1;
inline bool msg_robniu_game_end::has_time_leave() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_robniu_game_end::set_has_time_leave() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_robniu_game_end::clear_has_time_leave() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_robniu_game_end::clear_time_leave() {
  time_leave_ = 0u;
  clear_has_time_leave();
}
inline ::google::protobuf::uint32 msg_robniu_game_end::time_leave() const {
  return time_leave_;
}
inline void msg_robniu_game_end::set_time_leave(::google::protobuf::uint32 value) {
  set_has_time_leave();
  time_leave_ = value;
}

// repeated .net.msg_cards table_cards = 2;
inline int msg_robniu_game_end::table_cards_size() const {
  return table_cards_.size();
}
inline void msg_robniu_game_end::clear_table_cards() {
  table_cards_.Clear();
}
inline const ::net::msg_cards& msg_robniu_game_end::table_cards(int index) const {
  return table_cards_.Get(index);
}
inline ::net::msg_cards* msg_robniu_game_end::mutable_table_cards(int index) {
  return table_cards_.Mutable(index);
}
inline ::net::msg_cards* msg_robniu_game_end::add_table_cards() {
  return table_cards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::net::msg_cards >&
msg_robniu_game_end::table_cards() const {
  return table_cards_;
}
inline ::google::protobuf::RepeatedPtrField< ::net::msg_cards >*
msg_robniu_game_end::mutable_table_cards() {
  return &table_cards_;
}

// repeated uint32 card_types = 3;
inline int msg_robniu_game_end::card_types_size() const {
  return card_types_.size();
}
inline void msg_robniu_game_end::clear_card_types() {
  card_types_.Clear();
}
inline ::google::protobuf::uint32 msg_robniu_game_end::card_types(int index) const {
  return card_types_.Get(index);
}
inline void msg_robniu_game_end::set_card_types(int index, ::google::protobuf::uint32 value) {
  card_types_.Set(index, value);
}
inline void msg_robniu_game_end::add_card_types(::google::protobuf::uint32 value) {
  card_types_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
msg_robniu_game_end::card_types() const {
  return card_types_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
msg_robniu_game_end::mutable_card_types() {
  return &card_types_;
}

// repeated int64 player_score = 4;
inline int msg_robniu_game_end::player_score_size() const {
  return player_score_.size();
}
inline void msg_robniu_game_end::clear_player_score() {
  player_score_.Clear();
}
inline ::google::protobuf::int64 msg_robniu_game_end::player_score(int index) const {
  return player_score_.Get(index);
}
inline void msg_robniu_game_end::set_player_score(int index, ::google::protobuf::int64 value) {
  player_score_.Set(index, value);
}
inline void msg_robniu_game_end::add_player_score(::google::protobuf::int64 value) {
  player_score_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
msg_robniu_game_end::player_score() const {
  return player_score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
msg_robniu_game_end::mutable_player_score() {
  return &player_score_;
}

// repeated int32 win_multiple = 5;
inline int msg_robniu_game_end::win_multiple_size() const {
  return win_multiple_.size();
}
inline void msg_robniu_game_end::clear_win_multiple() {
  win_multiple_.Clear();
}
inline ::google::protobuf::int32 msg_robniu_game_end::win_multiple(int index) const {
  return win_multiple_.Get(index);
}
inline void msg_robniu_game_end::set_win_multiple(int index, ::google::protobuf::int32 value) {
  win_multiple_.Set(index, value);
}
inline void msg_robniu_game_end::add_win_multiple(::google::protobuf::int32 value) {
  win_multiple_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
msg_robniu_game_end::win_multiple() const {
  return win_multiple_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
msg_robniu_game_end::mutable_win_multiple() {
  return &win_multiple_;
}

// optional uint32 settle_accounts_type = 6;
inline bool msg_robniu_game_end::has_settle_accounts_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_robniu_game_end::set_has_settle_accounts_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_robniu_game_end::clear_has_settle_accounts_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_robniu_game_end::clear_settle_accounts_type() {
  settle_accounts_type_ = 0u;
  clear_has_settle_accounts_type();
}
inline ::google::protobuf::uint32 msg_robniu_game_end::settle_accounts_type() const {
  return settle_accounts_type_;
}
inline void msg_robniu_game_end::set_settle_accounts_type(::google::protobuf::uint32 value) {
  set_has_settle_accounts_type();
  settle_accounts_type_ = value;
}

// optional uint32 banker_id = 7;
inline bool msg_robniu_game_end::has_banker_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_robniu_game_end::set_has_banker_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_robniu_game_end::clear_has_banker_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_robniu_game_end::clear_banker_id() {
  banker_id_ = 0u;
  clear_has_banker_id();
}
inline ::google::protobuf::uint32 msg_robniu_game_end::banker_id() const {
  return banker_id_;
}
inline void msg_robniu_game_end::set_banker_id(::google::protobuf::uint32 value) {
  set_has_banker_id();
  banker_id_ = value;
}

// repeated uint32 change_chairid = 8;
inline int msg_robniu_game_end::change_chairid_size() const {
  return change_chairid_.size();
}
inline void msg_robniu_game_end::clear_change_chairid() {
  change_chairid_.Clear();
}
inline ::google::protobuf::uint32 msg_robniu_game_end::change_chairid(int index) const {
  return change_chairid_.Get(index);
}
inline void msg_robniu_game_end::set_change_chairid(int index, ::google::protobuf::uint32 value) {
  change_chairid_.Set(index, value);
}
inline void msg_robniu_game_end::add_change_chairid(::google::protobuf::uint32 value) {
  change_chairid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
msg_robniu_game_end::change_chairid() const {
  return change_chairid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
msg_robniu_game_end::mutable_change_chairid() {
  return &change_chairid_;
}

// -------------------------------------------------------------------

// msg_robniu_socre_less

// optional uint32 result = 1;
inline bool msg_robniu_socre_less::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_robniu_socre_less::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_robniu_socre_less::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_robniu_socre_less::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 msg_robniu_socre_less::result() const {
  return result_;
}
inline void msg_robniu_socre_less::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// msg_robniu_game_status

// optional uint32 status = 1;
inline bool msg_robniu_game_status::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_robniu_game_status::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_robniu_game_status::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_robniu_game_status::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 msg_robniu_game_status::status() const {
  return status_;
}
inline void msg_robniu_game_status::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace net

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_robniu_5flogic_5fmsg_2eproto__INCLUDED
