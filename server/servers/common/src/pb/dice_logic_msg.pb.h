// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dice_logic_msg.proto

#ifndef PROTOBUF_dice_5flogic_5fmsg_2eproto__INCLUDED
#define PROTOBUF_dice_5flogic_5fmsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "base_msg_struct.pb.h"
#include "error_code.pb.h"
// @@protoc_insertion_point(includes)

namespace net {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_dice_5flogic_5fmsg_2eproto();
void protobuf_AssignDesc_dice_5flogic_5fmsg_2eproto();
void protobuf_ShutdownFile_dice_5flogic_5fmsg_2eproto();

class dice_area_info;
class dice_game_score_rank;
class dice_jackpot_info_req;
class dice_jackpot_info;
class dice_game_end_info;
class msg_dice_game_info_free_rep;
class msg_dice_game_info_play_rep;
class msg_dice_start_rep;
class msg_dice_place_jetton_req;
class msg_dice_place_jetton_rep;
class msg_dice_place_jetton_broadcast;
class msg_dice_cancel_jetton_req;
class msg_dice_cancel_jetton_rep;
class msg_dice_cancel_jetton_broadcast;
class msg_dice_game_end;
class msg_dice_apply_banker;
class msg_dice_apply_banker_rep;
class msg_dice_change_banker;
class msg_dice_change_user_score;
class msg_dice_apply_list;
class msg_dice_jump_apply_queue_req;
class msg_dice_jump_apply_queue_rep;
class msg_dice_banker_calc_rep;
class msg_dice_add_bankerscore_rep;
class dice_play_log;
class msg_dice_play_log_rep;
class dice_control_req;

// ===================================================================

class dice_area_info : public ::google::protobuf::Message {
 public:
  dice_area_info();
  virtual ~dice_area_info();

  dice_area_info(const dice_area_info& from);

  inline dice_area_info& operator=(const dice_area_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dice_area_info& default_instance();

  void Swap(dice_area_info* other);

  // implements Message ----------------------------------------------

  dice_area_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const dice_area_info& from);
  void MergeFrom(const dice_area_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 jetton_area = 1;
  inline bool has_jetton_area() const;
  inline void clear_jetton_area();
  static const int kJettonAreaFieldNumber = 1;
  inline ::google::protobuf::uint32 jetton_area() const;
  inline void set_jetton_area(::google::protobuf::uint32 value);

  // optional uint32 jetton_multiple = 2;
  inline bool has_jetton_multiple() const;
  inline void clear_jetton_multiple();
  static const int kJettonMultipleFieldNumber = 2;
  inline ::google::protobuf::uint32 jetton_multiple() const;
  inline void set_jetton_multiple(::google::protobuf::uint32 value);

  // optional int64 jetton_score = 3;
  inline bool has_jetton_score() const;
  inline void clear_jetton_score();
  static const int kJettonScoreFieldNumber = 3;
  inline ::google::protobuf::int64 jetton_score() const;
  inline void set_jetton_score(::google::protobuf::int64 value);

  // optional int64 final_score = 4;
  inline bool has_final_score() const;
  inline void clear_final_score();
  static const int kFinalScoreFieldNumber = 4;
  inline ::google::protobuf::int64 final_score() const;
  inline void set_final_score(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:net.dice_area_info)
 private:
  inline void set_has_jetton_area();
  inline void clear_has_jetton_area();
  inline void set_has_jetton_multiple();
  inline void clear_has_jetton_multiple();
  inline void set_has_jetton_score();
  inline void clear_has_jetton_score();
  inline void set_has_final_score();
  inline void clear_has_final_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 jetton_area_;
  ::google::protobuf::uint32 jetton_multiple_;
  ::google::protobuf::int64 jetton_score_;
  ::google::protobuf::int64 final_score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_dice_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static dice_area_info* default_instance_;
};
// -------------------------------------------------------------------

class dice_game_score_rank : public ::google::protobuf::Message {
 public:
  dice_game_score_rank();
  virtual ~dice_game_score_rank();

  dice_game_score_rank(const dice_game_score_rank& from);

  inline dice_game_score_rank& operator=(const dice_game_score_rank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dice_game_score_rank& default_instance();

  void Swap(dice_game_score_rank* other);

  // implements Message ----------------------------------------------

  dice_game_score_rank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const dice_game_score_rank& from);
  void MergeFrom(const dice_game_score_rank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional bytes nick_name = 2;
  inline bool has_nick_name() const;
  inline void clear_nick_name();
  static const int kNickNameFieldNumber = 2;
  inline const ::std::string& nick_name() const;
  inline void set_nick_name(const ::std::string& value);
  inline void set_nick_name(const char* value);
  inline void set_nick_name(const void* value, size_t size);
  inline ::std::string* mutable_nick_name();
  inline ::std::string* release_nick_name();
  inline void set_allocated_nick_name(::std::string* nick_name);

  // optional bytes city = 3;
  inline bool has_city() const;
  inline void clear_city();
  static const int kCityFieldNumber = 3;
  inline const ::std::string& city() const;
  inline void set_city(const ::std::string& value);
  inline void set_city(const char* value);
  inline void set_city(const void* value, size_t size);
  inline ::std::string* mutable_city();
  inline ::std::string* release_city();
  inline void set_allocated_city(::std::string* city);

  // optional int64 income_score = 4;
  inline bool has_income_score() const;
  inline void clear_income_score();
  static const int kIncomeScoreFieldNumber = 4;
  inline ::google::protobuf::int64 income_score() const;
  inline void set_income_score(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:net.dice_game_score_rank)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_nick_name();
  inline void clear_has_nick_name();
  inline void set_has_city();
  inline void clear_has_city();
  inline void set_has_income_score();
  inline void clear_has_income_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* nick_name_;
  ::std::string* city_;
  ::google::protobuf::int64 income_score_;
  ::google::protobuf::uint32 uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_dice_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static dice_game_score_rank* default_instance_;
};
// -------------------------------------------------------------------

class dice_jackpot_info_req : public ::google::protobuf::Message {
 public:
  dice_jackpot_info_req();
  virtual ~dice_jackpot_info_req();

  dice_jackpot_info_req(const dice_jackpot_info_req& from);

  inline dice_jackpot_info_req& operator=(const dice_jackpot_info_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dice_jackpot_info_req& default_instance();

  void Swap(dice_jackpot_info_req* other);

  // implements Message ----------------------------------------------

  dice_jackpot_info_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const dice_jackpot_info_req& from);
  void MergeFrom(const dice_jackpot_info_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:net.dice_jackpot_info_req)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_dice_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static dice_jackpot_info_req* default_instance_;
};
// -------------------------------------------------------------------

class dice_jackpot_info : public ::google::protobuf::Message {
 public:
  dice_jackpot_info();
  virtual ~dice_jackpot_info();

  dice_jackpot_info(const dice_jackpot_info& from);

  inline dice_jackpot_info& operator=(const dice_jackpot_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dice_jackpot_info& default_instance();

  void Swap(dice_jackpot_info* other);

  // implements Message ----------------------------------------------

  dice_jackpot_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const dice_jackpot_info& from);
  void MergeFrom(const dice_jackpot_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 table_cards = 1;
  inline int table_cards_size() const;
  inline void clear_table_cards();
  static const int kTableCardsFieldNumber = 1;
  inline ::google::protobuf::uint32 table_cards(int index) const;
  inline void set_table_cards(int index, ::google::protobuf::uint32 value);
  inline void add_table_cards(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      table_cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_table_cards();

  // optional uint64 utime = 2;
  inline bool has_utime() const;
  inline void clear_utime();
  static const int kUtimeFieldNumber = 2;
  inline ::google::protobuf::uint64 utime() const;
  inline void set_utime(::google::protobuf::uint64 value);

  // optional int64 win_total_score = 3;
  inline bool has_win_total_score() const;
  inline void clear_win_total_score();
  static const int kWinTotalScoreFieldNumber = 3;
  inline ::google::protobuf::int64 win_total_score() const;
  inline void set_win_total_score(::google::protobuf::int64 value);

  // optional int64 cur_jackpot_score = 4;
  inline bool has_cur_jackpot_score() const;
  inline void clear_cur_jackpot_score();
  static const int kCurJackpotScoreFieldNumber = 4;
  inline ::google::protobuf::int64 cur_jackpot_score() const;
  inline void set_cur_jackpot_score(::google::protobuf::int64 value);

  // repeated .net.dice_game_score_rank score_rank = 5;
  inline int score_rank_size() const;
  inline void clear_score_rank();
  static const int kScoreRankFieldNumber = 5;
  inline const ::net::dice_game_score_rank& score_rank(int index) const;
  inline ::net::dice_game_score_rank* mutable_score_rank(int index);
  inline ::net::dice_game_score_rank* add_score_rank();
  inline const ::google::protobuf::RepeatedPtrField< ::net::dice_game_score_rank >&
      score_rank() const;
  inline ::google::protobuf::RepeatedPtrField< ::net::dice_game_score_rank >*
      mutable_score_rank();

  // @@protoc_insertion_point(class_scope:net.dice_jackpot_info)
 private:
  inline void set_has_utime();
  inline void clear_has_utime();
  inline void set_has_win_total_score();
  inline void clear_has_win_total_score();
  inline void set_has_cur_jackpot_score();
  inline void clear_has_cur_jackpot_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > table_cards_;
  ::google::protobuf::uint64 utime_;
  ::google::protobuf::int64 win_total_score_;
  ::google::protobuf::int64 cur_jackpot_score_;
  ::google::protobuf::RepeatedPtrField< ::net::dice_game_score_rank > score_rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_dice_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static dice_jackpot_info* default_instance_;
};
// -------------------------------------------------------------------

class dice_game_end_info : public ::google::protobuf::Message {
 public:
  dice_game_end_info();
  virtual ~dice_game_end_info();

  dice_game_end_info(const dice_game_end_info& from);

  inline dice_game_end_info& operator=(const dice_game_end_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dice_game_end_info& default_instance();

  void Swap(dice_game_end_info* other);

  // implements Message ----------------------------------------------

  dice_game_end_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const dice_game_end_info& from);
  void MergeFrom(const dice_game_end_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 table_cards = 1;
  inline int table_cards_size() const;
  inline void clear_table_cards();
  static const int kTableCardsFieldNumber = 1;
  inline ::google::protobuf::uint32 table_cards(int index) const;
  inline void set_table_cards(int index, ::google::protobuf::uint32 value);
  inline void add_table_cards(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      table_cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_table_cards();

  // repeated uint32 hit_area = 2;
  inline int hit_area_size() const;
  inline void clear_hit_area();
  static const int kHitAreaFieldNumber = 2;
  inline ::google::protobuf::uint32 hit_area(int index) const;
  inline void set_hit_area(int index, ::google::protobuf::uint32 value);
  inline void add_hit_area(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      hit_area() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_hit_area();

  // optional uint32 big_small = 3;
  inline bool has_big_small() const;
  inline void clear_big_small();
  static const int kBigSmallFieldNumber = 3;
  inline ::google::protobuf::uint32 big_small() const;
  inline void set_big_small(::google::protobuf::uint32 value);

  // optional uint32 sum_point = 4;
  inline bool has_sum_point() const;
  inline void clear_sum_point();
  static const int kSumPointFieldNumber = 4;
  inline ::google::protobuf::uint32 sum_point() const;
  inline void set_sum_point(::google::protobuf::uint32 value);

  // optional int64 user_score = 5;
  inline bool has_user_score() const;
  inline void clear_user_score();
  static const int kUserScoreFieldNumber = 5;
  inline ::google::protobuf::int64 user_score() const;
  inline void set_user_score(::google::protobuf::int64 value);

  // repeated int64 player_score = 6;
  inline int player_score_size() const;
  inline void clear_player_score();
  static const int kPlayerScoreFieldNumber = 6;
  inline ::google::protobuf::int64 player_score(int index) const;
  inline void set_player_score(int index, ::google::protobuf::int64 value);
  inline void add_player_score(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      player_score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_player_score();

  // optional int64 jackpot_score = 7;
  inline bool has_jackpot_score() const;
  inline void clear_jackpot_score();
  static const int kJackpotScoreFieldNumber = 7;
  inline ::google::protobuf::int64 jackpot_score() const;
  inline void set_jackpot_score(::google::protobuf::int64 value);

  // optional int64 total_score = 8;
  inline bool has_total_score() const;
  inline void clear_total_score();
  static const int kTotalScoreFieldNumber = 8;
  inline ::google::protobuf::int64 total_score() const;
  inline void set_total_score(::google::protobuf::int64 value);

  // optional int64 self_cur_score = 9;
  inline bool has_self_cur_score() const;
  inline void clear_self_cur_score();
  static const int kSelfCurScoreFieldNumber = 9;
  inline ::google::protobuf::int64 self_cur_score() const;
  inline void set_self_cur_score(::google::protobuf::int64 value);

  // repeated int64 player_cur_score = 10;
  inline int player_cur_score_size() const;
  inline void clear_player_cur_score();
  static const int kPlayerCurScoreFieldNumber = 10;
  inline ::google::protobuf::int64 player_cur_score(int index) const;
  inline void set_player_cur_score(int index, ::google::protobuf::int64 value);
  inline void add_player_cur_score(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      player_cur_score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_player_cur_score();

  // repeated .net.dice_area_info self_area_info = 11;
  inline int self_area_info_size() const;
  inline void clear_self_area_info();
  static const int kSelfAreaInfoFieldNumber = 11;
  inline const ::net::dice_area_info& self_area_info(int index) const;
  inline ::net::dice_area_info* mutable_self_area_info(int index);
  inline ::net::dice_area_info* add_self_area_info();
  inline const ::google::protobuf::RepeatedPtrField< ::net::dice_area_info >&
      self_area_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::net::dice_area_info >*
      mutable_self_area_info();

  // repeated .net.dice_area_info total_area_info = 12;
  inline int total_area_info_size() const;
  inline void clear_total_area_info();
  static const int kTotalAreaInfoFieldNumber = 12;
  inline const ::net::dice_area_info& total_area_info(int index) const;
  inline ::net::dice_area_info* mutable_total_area_info(int index);
  inline ::net::dice_area_info* add_total_area_info();
  inline const ::google::protobuf::RepeatedPtrField< ::net::dice_area_info >&
      total_area_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::net::dice_area_info >*
      mutable_total_area_info();

  // optional .net.dice_jackpot_info jackpot_info = 13;
  inline bool has_jackpot_info() const;
  inline void clear_jackpot_info();
  static const int kJackpotInfoFieldNumber = 13;
  inline const ::net::dice_jackpot_info& jackpot_info() const;
  inline ::net::dice_jackpot_info* mutable_jackpot_info();
  inline ::net::dice_jackpot_info* release_jackpot_info();
  inline void set_allocated_jackpot_info(::net::dice_jackpot_info* jackpot_info);

  // @@protoc_insertion_point(class_scope:net.dice_game_end_info)
 private:
  inline void set_has_big_small();
  inline void clear_has_big_small();
  inline void set_has_sum_point();
  inline void clear_has_sum_point();
  inline void set_has_user_score();
  inline void clear_has_user_score();
  inline void set_has_jackpot_score();
  inline void clear_has_jackpot_score();
  inline void set_has_total_score();
  inline void clear_has_total_score();
  inline void set_has_self_cur_score();
  inline void clear_has_self_cur_score();
  inline void set_has_jackpot_info();
  inline void clear_has_jackpot_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > table_cards_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > hit_area_;
  ::google::protobuf::uint32 big_small_;
  ::google::protobuf::uint32 sum_point_;
  ::google::protobuf::int64 user_score_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > player_score_;
  ::google::protobuf::int64 jackpot_score_;
  ::google::protobuf::int64 total_score_;
  ::google::protobuf::int64 self_cur_score_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > player_cur_score_;
  ::google::protobuf::RepeatedPtrField< ::net::dice_area_info > self_area_info_;
  ::google::protobuf::RepeatedPtrField< ::net::dice_area_info > total_area_info_;
  ::net::dice_jackpot_info* jackpot_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_dice_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static dice_game_end_info* default_instance_;
};
// -------------------------------------------------------------------

class msg_dice_game_info_free_rep : public ::google::protobuf::Message {
 public:
  msg_dice_game_info_free_rep();
  virtual ~msg_dice_game_info_free_rep();

  msg_dice_game_info_free_rep(const msg_dice_game_info_free_rep& from);

  inline msg_dice_game_info_free_rep& operator=(const msg_dice_game_info_free_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_dice_game_info_free_rep& default_instance();

  void Swap(msg_dice_game_info_free_rep* other);

  // implements Message ----------------------------------------------

  msg_dice_game_info_free_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_dice_game_info_free_rep& from);
  void MergeFrom(const msg_dice_game_info_free_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 time_leave = 1;
  inline bool has_time_leave() const;
  inline void clear_time_leave();
  static const int kTimeLeaveFieldNumber = 1;
  inline ::google::protobuf::uint32 time_leave() const;
  inline void set_time_leave(::google::protobuf::uint32 value);

  // optional uint32 game_status = 2;
  inline bool has_game_status() const;
  inline void clear_game_status();
  static const int kGameStatusFieldNumber = 2;
  inline ::google::protobuf::uint32 game_status() const;
  inline void set_game_status(::google::protobuf::uint32 value);

  // optional uint32 banker_id = 3;
  inline bool has_banker_id() const;
  inline void clear_banker_id();
  static const int kBankerIdFieldNumber = 3;
  inline ::google::protobuf::uint32 banker_id() const;
  inline void set_banker_id(::google::protobuf::uint32 value);

  // optional uint32 banker_time = 4;
  inline bool has_banker_time() const;
  inline void clear_banker_time();
  static const int kBankerTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 banker_time() const;
  inline void set_banker_time(::google::protobuf::uint32 value);

  // optional int64 banker_win_score = 5;
  inline bool has_banker_win_score() const;
  inline void clear_banker_win_score();
  static const int kBankerWinScoreFieldNumber = 5;
  inline ::google::protobuf::int64 banker_win_score() const;
  inline void set_banker_win_score(::google::protobuf::int64 value);

  // optional int64 banker_score = 6;
  inline bool has_banker_score() const;
  inline void clear_banker_score();
  static const int kBankerScoreFieldNumber = 6;
  inline ::google::protobuf::int64 banker_score() const;
  inline void set_banker_score(::google::protobuf::int64 value);

  // optional int64 banker_buyin_score = 7;
  inline bool has_banker_buyin_score() const;
  inline void clear_banker_buyin_score();
  static const int kBankerBuyinScoreFieldNumber = 7;
  inline ::google::protobuf::int64 banker_buyin_score() const;
  inline void set_banker_buyin_score(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:net.msg_dice_game_info_free_rep)
 private:
  inline void set_has_time_leave();
  inline void clear_has_time_leave();
  inline void set_has_game_status();
  inline void clear_has_game_status();
  inline void set_has_banker_id();
  inline void clear_has_banker_id();
  inline void set_has_banker_time();
  inline void clear_has_banker_time();
  inline void set_has_banker_win_score();
  inline void clear_has_banker_win_score();
  inline void set_has_banker_score();
  inline void clear_has_banker_score();
  inline void set_has_banker_buyin_score();
  inline void clear_has_banker_buyin_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 time_leave_;
  ::google::protobuf::uint32 game_status_;
  ::google::protobuf::uint32 banker_id_;
  ::google::protobuf::uint32 banker_time_;
  ::google::protobuf::int64 banker_win_score_;
  ::google::protobuf::int64 banker_score_;
  ::google::protobuf::int64 banker_buyin_score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_dice_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_dice_game_info_free_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_dice_game_info_play_rep : public ::google::protobuf::Message {
 public:
  msg_dice_game_info_play_rep();
  virtual ~msg_dice_game_info_play_rep();

  msg_dice_game_info_play_rep(const msg_dice_game_info_play_rep& from);

  inline msg_dice_game_info_play_rep& operator=(const msg_dice_game_info_play_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_dice_game_info_play_rep& default_instance();

  void Swap(msg_dice_game_info_play_rep* other);

  // implements Message ----------------------------------------------

  msg_dice_game_info_play_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_dice_game_info_play_rep& from);
  void MergeFrom(const msg_dice_game_info_play_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 banker_id = 1;
  inline bool has_banker_id() const;
  inline void clear_banker_id();
  static const int kBankerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 banker_id() const;
  inline void set_banker_id(::google::protobuf::uint32 value);

  // optional uint32 banker_time = 2;
  inline bool has_banker_time() const;
  inline void clear_banker_time();
  static const int kBankerTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 banker_time() const;
  inline void set_banker_time(::google::protobuf::uint32 value);

  // optional int64 banker_win_score = 3;
  inline bool has_banker_win_score() const;
  inline void clear_banker_win_score();
  static const int kBankerWinScoreFieldNumber = 3;
  inline ::google::protobuf::int64 banker_win_score() const;
  inline void set_banker_win_score(::google::protobuf::int64 value);

  // optional int64 banker_score = 4;
  inline bool has_banker_score() const;
  inline void clear_banker_score();
  static const int kBankerScoreFieldNumber = 4;
  inline ::google::protobuf::int64 banker_score() const;
  inline void set_banker_score(::google::protobuf::int64 value);

  // optional int64 banker_buyin_score = 5;
  inline bool has_banker_buyin_score() const;
  inline void clear_banker_buyin_score();
  static const int kBankerBuyinScoreFieldNumber = 5;
  inline ::google::protobuf::int64 banker_buyin_score() const;
  inline void set_banker_buyin_score(::google::protobuf::int64 value);

  // optional uint32 time_leave = 6;
  inline bool has_time_leave() const;
  inline void clear_time_leave();
  static const int kTimeLeaveFieldNumber = 6;
  inline ::google::protobuf::uint32 time_leave() const;
  inline void set_time_leave(::google::protobuf::uint32 value);

  // optional uint32 game_status = 7;
  inline bool has_game_status() const;
  inline void clear_game_status();
  static const int kGameStatusFieldNumber = 7;
  inline ::google::protobuf::uint32 game_status() const;
  inline void set_game_status(::google::protobuf::uint32 value);

  // repeated int64 all_jetton_score = 8;
  inline int all_jetton_score_size() const;
  inline void clear_all_jetton_score();
  static const int kAllJettonScoreFieldNumber = 8;
  inline ::google::protobuf::int64 all_jetton_score(int index) const;
  inline void set_all_jetton_score(int index, ::google::protobuf::int64 value);
  inline void add_all_jetton_score(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      all_jetton_score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_all_jetton_score();

  // repeated int64 self_jetton_score = 9;
  inline int self_jetton_score_size() const;
  inline void clear_self_jetton_score();
  static const int kSelfJettonScoreFieldNumber = 9;
  inline ::google::protobuf::int64 self_jetton_score(int index) const;
  inline void set_self_jetton_score(int index, ::google::protobuf::int64 value);
  inline void add_self_jetton_score(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      self_jetton_score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_self_jetton_score();

  // optional .net.dice_game_end_info end_info = 10;
  inline bool has_end_info() const;
  inline void clear_end_info();
  static const int kEndInfoFieldNumber = 10;
  inline const ::net::dice_game_end_info& end_info() const;
  inline ::net::dice_game_end_info* mutable_end_info();
  inline ::net::dice_game_end_info* release_end_info();
  inline void set_allocated_end_info(::net::dice_game_end_info* end_info);

  // @@protoc_insertion_point(class_scope:net.msg_dice_game_info_play_rep)
 private:
  inline void set_has_banker_id();
  inline void clear_has_banker_id();
  inline void set_has_banker_time();
  inline void clear_has_banker_time();
  inline void set_has_banker_win_score();
  inline void clear_has_banker_win_score();
  inline void set_has_banker_score();
  inline void clear_has_banker_score();
  inline void set_has_banker_buyin_score();
  inline void clear_has_banker_buyin_score();
  inline void set_has_time_leave();
  inline void clear_has_time_leave();
  inline void set_has_game_status();
  inline void clear_has_game_status();
  inline void set_has_end_info();
  inline void clear_has_end_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 banker_id_;
  ::google::protobuf::uint32 banker_time_;
  ::google::protobuf::int64 banker_win_score_;
  ::google::protobuf::int64 banker_score_;
  ::google::protobuf::int64 banker_buyin_score_;
  ::google::protobuf::uint32 time_leave_;
  ::google::protobuf::uint32 game_status_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > all_jetton_score_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > self_jetton_score_;
  ::net::dice_game_end_info* end_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_dice_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_dice_game_info_play_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_dice_start_rep : public ::google::protobuf::Message {
 public:
  msg_dice_start_rep();
  virtual ~msg_dice_start_rep();

  msg_dice_start_rep(const msg_dice_start_rep& from);

  inline msg_dice_start_rep& operator=(const msg_dice_start_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_dice_start_rep& default_instance();

  void Swap(msg_dice_start_rep* other);

  // implements Message ----------------------------------------------

  msg_dice_start_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_dice_start_rep& from);
  void MergeFrom(const msg_dice_start_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 banker_id = 1;
  inline bool has_banker_id() const;
  inline void clear_banker_id();
  static const int kBankerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 banker_id() const;
  inline void set_banker_id(::google::protobuf::uint32 value);

  // optional int64 banker_score = 2;
  inline bool has_banker_score() const;
  inline void clear_banker_score();
  static const int kBankerScoreFieldNumber = 2;
  inline ::google::protobuf::int64 banker_score() const;
  inline void set_banker_score(::google::protobuf::int64 value);

  // optional uint32 time_leave = 3;
  inline bool has_time_leave() const;
  inline void clear_time_leave();
  static const int kTimeLeaveFieldNumber = 3;
  inline ::google::protobuf::uint32 time_leave() const;
  inline void set_time_leave(::google::protobuf::uint32 value);

  // optional int64 banker_buyin_score = 4;
  inline bool has_banker_buyin_score() const;
  inline void clear_banker_buyin_score();
  static const int kBankerBuyinScoreFieldNumber = 4;
  inline ::google::protobuf::int64 banker_buyin_score() const;
  inline void set_banker_buyin_score(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:net.msg_dice_start_rep)
 private:
  inline void set_has_banker_id();
  inline void clear_has_banker_id();
  inline void set_has_banker_score();
  inline void clear_has_banker_score();
  inline void set_has_time_leave();
  inline void clear_has_time_leave();
  inline void set_has_banker_buyin_score();
  inline void clear_has_banker_buyin_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 banker_score_;
  ::google::protobuf::uint32 banker_id_;
  ::google::protobuf::uint32 time_leave_;
  ::google::protobuf::int64 banker_buyin_score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_dice_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_dice_start_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_dice_place_jetton_req : public ::google::protobuf::Message {
 public:
  msg_dice_place_jetton_req();
  virtual ~msg_dice_place_jetton_req();

  msg_dice_place_jetton_req(const msg_dice_place_jetton_req& from);

  inline msg_dice_place_jetton_req& operator=(const msg_dice_place_jetton_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_dice_place_jetton_req& default_instance();

  void Swap(msg_dice_place_jetton_req* other);

  // implements Message ----------------------------------------------

  msg_dice_place_jetton_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_dice_place_jetton_req& from);
  void MergeFrom(const msg_dice_place_jetton_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 jetton_area = 1;
  inline bool has_jetton_area() const;
  inline void clear_jetton_area();
  static const int kJettonAreaFieldNumber = 1;
  inline ::google::protobuf::uint32 jetton_area() const;
  inline void set_jetton_area(::google::protobuf::uint32 value);

  // optional int64 jetton_score = 2;
  inline bool has_jetton_score() const;
  inline void clear_jetton_score();
  static const int kJettonScoreFieldNumber = 2;
  inline ::google::protobuf::int64 jetton_score() const;
  inline void set_jetton_score(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:net.msg_dice_place_jetton_req)
 private:
  inline void set_has_jetton_area();
  inline void clear_has_jetton_area();
  inline void set_has_jetton_score();
  inline void clear_has_jetton_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 jetton_score_;
  ::google::protobuf::uint32 jetton_area_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_dice_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_dice_place_jetton_req* default_instance_;
};
// -------------------------------------------------------------------

class msg_dice_place_jetton_rep : public ::google::protobuf::Message {
 public:
  msg_dice_place_jetton_rep();
  virtual ~msg_dice_place_jetton_rep();

  msg_dice_place_jetton_rep(const msg_dice_place_jetton_rep& from);

  inline msg_dice_place_jetton_rep& operator=(const msg_dice_place_jetton_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_dice_place_jetton_rep& default_instance();

  void Swap(msg_dice_place_jetton_rep* other);

  // implements Message ----------------------------------------------

  msg_dice_place_jetton_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_dice_place_jetton_rep& from);
  void MergeFrom(const msg_dice_place_jetton_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 jetton_area = 1;
  inline bool has_jetton_area() const;
  inline void clear_jetton_area();
  static const int kJettonAreaFieldNumber = 1;
  inline ::google::protobuf::uint32 jetton_area() const;
  inline void set_jetton_area(::google::protobuf::uint32 value);

  // optional int64 jetton_score = 2;
  inline bool has_jetton_score() const;
  inline void clear_jetton_score();
  static const int kJettonScoreFieldNumber = 2;
  inline ::google::protobuf::int64 jetton_score() const;
  inline void set_jetton_score(::google::protobuf::int64 value);

  // optional uint32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_dice_place_jetton_rep)
 private:
  inline void set_has_jetton_area();
  inline void clear_has_jetton_area();
  inline void set_has_jetton_score();
  inline void clear_has_jetton_score();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 jetton_score_;
  ::google::protobuf::uint32 jetton_area_;
  ::google::protobuf::uint32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_dice_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_dice_place_jetton_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_dice_place_jetton_broadcast : public ::google::protobuf::Message {
 public:
  msg_dice_place_jetton_broadcast();
  virtual ~msg_dice_place_jetton_broadcast();

  msg_dice_place_jetton_broadcast(const msg_dice_place_jetton_broadcast& from);

  inline msg_dice_place_jetton_broadcast& operator=(const msg_dice_place_jetton_broadcast& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_dice_place_jetton_broadcast& default_instance();

  void Swap(msg_dice_place_jetton_broadcast* other);

  // implements Message ----------------------------------------------

  msg_dice_place_jetton_broadcast* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_dice_place_jetton_broadcast& from);
  void MergeFrom(const msg_dice_place_jetton_broadcast& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 jetton_area = 2;
  inline bool has_jetton_area() const;
  inline void clear_jetton_area();
  static const int kJettonAreaFieldNumber = 2;
  inline ::google::protobuf::uint32 jetton_area() const;
  inline void set_jetton_area(::google::protobuf::uint32 value);

  // optional int64 jetton_score = 3;
  inline bool has_jetton_score() const;
  inline void clear_jetton_score();
  static const int kJettonScoreFieldNumber = 3;
  inline ::google::protobuf::int64 jetton_score() const;
  inline void set_jetton_score(::google::protobuf::int64 value);

  // optional int64 total_jetton_score = 4;
  inline bool has_total_jetton_score() const;
  inline void clear_total_jetton_score();
  static const int kTotalJettonScoreFieldNumber = 4;
  inline ::google::protobuf::int64 total_jetton_score() const;
  inline void set_total_jetton_score(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:net.msg_dice_place_jetton_broadcast)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_jetton_area();
  inline void clear_has_jetton_area();
  inline void set_has_jetton_score();
  inline void clear_has_jetton_score();
  inline void set_has_total_jetton_score();
  inline void clear_has_total_jetton_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 jetton_area_;
  ::google::protobuf::int64 jetton_score_;
  ::google::protobuf::int64 total_jetton_score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_dice_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_dice_place_jetton_broadcast* default_instance_;
};
// -------------------------------------------------------------------

class msg_dice_cancel_jetton_req : public ::google::protobuf::Message {
 public:
  msg_dice_cancel_jetton_req();
  virtual ~msg_dice_cancel_jetton_req();

  msg_dice_cancel_jetton_req(const msg_dice_cancel_jetton_req& from);

  inline msg_dice_cancel_jetton_req& operator=(const msg_dice_cancel_jetton_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_dice_cancel_jetton_req& default_instance();

  void Swap(msg_dice_cancel_jetton_req* other);

  // implements Message ----------------------------------------------

  msg_dice_cancel_jetton_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_dice_cancel_jetton_req& from);
  void MergeFrom(const msg_dice_cancel_jetton_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:net.msg_dice_cancel_jetton_req)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_dice_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_dice_cancel_jetton_req* default_instance_;
};
// -------------------------------------------------------------------

class msg_dice_cancel_jetton_rep : public ::google::protobuf::Message {
 public:
  msg_dice_cancel_jetton_rep();
  virtual ~msg_dice_cancel_jetton_rep();

  msg_dice_cancel_jetton_rep(const msg_dice_cancel_jetton_rep& from);

  inline msg_dice_cancel_jetton_rep& operator=(const msg_dice_cancel_jetton_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_dice_cancel_jetton_rep& default_instance();

  void Swap(msg_dice_cancel_jetton_rep* other);

  // implements Message ----------------------------------------------

  msg_dice_cancel_jetton_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_dice_cancel_jetton_rep& from);
  void MergeFrom(const msg_dice_cancel_jetton_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_dice_cancel_jetton_rep)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_dice_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_dice_cancel_jetton_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_dice_cancel_jetton_broadcast : public ::google::protobuf::Message {
 public:
  msg_dice_cancel_jetton_broadcast();
  virtual ~msg_dice_cancel_jetton_broadcast();

  msg_dice_cancel_jetton_broadcast(const msg_dice_cancel_jetton_broadcast& from);

  inline msg_dice_cancel_jetton_broadcast& operator=(const msg_dice_cancel_jetton_broadcast& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_dice_cancel_jetton_broadcast& default_instance();

  void Swap(msg_dice_cancel_jetton_broadcast* other);

  // implements Message ----------------------------------------------

  msg_dice_cancel_jetton_broadcast* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_dice_cancel_jetton_broadcast& from);
  void MergeFrom(const msg_dice_cancel_jetton_broadcast& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 all_jetton_score = 1;
  inline int all_jetton_score_size() const;
  inline void clear_all_jetton_score();
  static const int kAllJettonScoreFieldNumber = 1;
  inline ::google::protobuf::int64 all_jetton_score(int index) const;
  inline void set_all_jetton_score(int index, ::google::protobuf::int64 value);
  inline void add_all_jetton_score(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      all_jetton_score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_all_jetton_score();

  // @@protoc_insertion_point(class_scope:net.msg_dice_cancel_jetton_broadcast)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > all_jetton_score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_dice_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_dice_cancel_jetton_broadcast* default_instance_;
};
// -------------------------------------------------------------------

class msg_dice_game_end : public ::google::protobuf::Message {
 public:
  msg_dice_game_end();
  virtual ~msg_dice_game_end();

  msg_dice_game_end(const msg_dice_game_end& from);

  inline msg_dice_game_end& operator=(const msg_dice_game_end& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_dice_game_end& default_instance();

  void Swap(msg_dice_game_end* other);

  // implements Message ----------------------------------------------

  msg_dice_game_end* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_dice_game_end& from);
  void MergeFrom(const msg_dice_game_end& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 time_leave = 1;
  inline bool has_time_leave() const;
  inline void clear_time_leave();
  static const int kTimeLeaveFieldNumber = 1;
  inline ::google::protobuf::uint32 time_leave() const;
  inline void set_time_leave(::google::protobuf::uint32 value);

  // optional uint32 banker_time = 2;
  inline bool has_banker_time() const;
  inline void clear_banker_time();
  static const int kBankerTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 banker_time() const;
  inline void set_banker_time(::google::protobuf::uint32 value);

  // optional int64 banker_win_score = 3;
  inline bool has_banker_win_score() const;
  inline void clear_banker_win_score();
  static const int kBankerWinScoreFieldNumber = 3;
  inline ::google::protobuf::int64 banker_win_score() const;
  inline void set_banker_win_score(::google::protobuf::int64 value);

  // optional int64 banker_total_score = 4;
  inline bool has_banker_total_score() const;
  inline void clear_banker_total_score();
  static const int kBankerTotalScoreFieldNumber = 4;
  inline ::google::protobuf::int64 banker_total_score() const;
  inline void set_banker_total_score(::google::protobuf::int64 value);

  // optional .net.dice_game_end_info end_info = 5;
  inline bool has_end_info() const;
  inline void clear_end_info();
  static const int kEndInfoFieldNumber = 5;
  inline const ::net::dice_game_end_info& end_info() const;
  inline ::net::dice_game_end_info* mutable_end_info();
  inline ::net::dice_game_end_info* release_end_info();
  inline void set_allocated_end_info(::net::dice_game_end_info* end_info);

  // @@protoc_insertion_point(class_scope:net.msg_dice_game_end)
 private:
  inline void set_has_time_leave();
  inline void clear_has_time_leave();
  inline void set_has_banker_time();
  inline void clear_has_banker_time();
  inline void set_has_banker_win_score();
  inline void clear_has_banker_win_score();
  inline void set_has_banker_total_score();
  inline void clear_has_banker_total_score();
  inline void set_has_end_info();
  inline void clear_has_end_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 time_leave_;
  ::google::protobuf::uint32 banker_time_;
  ::google::protobuf::int64 banker_win_score_;
  ::google::protobuf::int64 banker_total_score_;
  ::net::dice_game_end_info* end_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_dice_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_dice_game_end* default_instance_;
};
// -------------------------------------------------------------------

class msg_dice_apply_banker : public ::google::protobuf::Message {
 public:
  msg_dice_apply_banker();
  virtual ~msg_dice_apply_banker();

  msg_dice_apply_banker(const msg_dice_apply_banker& from);

  inline msg_dice_apply_banker& operator=(const msg_dice_apply_banker& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_dice_apply_banker& default_instance();

  void Swap(msg_dice_apply_banker* other);

  // implements Message ----------------------------------------------

  msg_dice_apply_banker* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_dice_apply_banker& from);
  void MergeFrom(const msg_dice_apply_banker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 apply_oper = 1;
  inline bool has_apply_oper() const;
  inline void clear_apply_oper();
  static const int kApplyOperFieldNumber = 1;
  inline ::google::protobuf::uint32 apply_oper() const;
  inline void set_apply_oper(::google::protobuf::uint32 value);

  // optional int64 apply_score = 2;
  inline bool has_apply_score() const;
  inline void clear_apply_score();
  static const int kApplyScoreFieldNumber = 2;
  inline ::google::protobuf::int64 apply_score() const;
  inline void set_apply_score(::google::protobuf::int64 value);

  // optional uint32 auto_addscore = 3;
  inline bool has_auto_addscore() const;
  inline void clear_auto_addscore();
  static const int kAutoAddscoreFieldNumber = 3;
  inline ::google::protobuf::uint32 auto_addscore() const;
  inline void set_auto_addscore(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_dice_apply_banker)
 private:
  inline void set_has_apply_oper();
  inline void clear_has_apply_oper();
  inline void set_has_apply_score();
  inline void clear_has_apply_score();
  inline void set_has_auto_addscore();
  inline void clear_has_auto_addscore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 apply_score_;
  ::google::protobuf::uint32 apply_oper_;
  ::google::protobuf::uint32 auto_addscore_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_dice_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_dice_apply_banker* default_instance_;
};
// -------------------------------------------------------------------

class msg_dice_apply_banker_rep : public ::google::protobuf::Message {
 public:
  msg_dice_apply_banker_rep();
  virtual ~msg_dice_apply_banker_rep();

  msg_dice_apply_banker_rep(const msg_dice_apply_banker_rep& from);

  inline msg_dice_apply_banker_rep& operator=(const msg_dice_apply_banker_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_dice_apply_banker_rep& default_instance();

  void Swap(msg_dice_apply_banker_rep* other);

  // implements Message ----------------------------------------------

  msg_dice_apply_banker_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_dice_apply_banker_rep& from);
  void MergeFrom(const msg_dice_apply_banker_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 apply_oper = 1;
  inline bool has_apply_oper() const;
  inline void clear_apply_oper();
  static const int kApplyOperFieldNumber = 1;
  inline ::google::protobuf::uint32 apply_oper() const;
  inline void set_apply_oper(::google::protobuf::uint32 value);

  // optional uint32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // optional int64 buyin_score = 3;
  inline bool has_buyin_score() const;
  inline void clear_buyin_score();
  static const int kBuyinScoreFieldNumber = 3;
  inline ::google::protobuf::int64 buyin_score() const;
  inline void set_buyin_score(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:net.msg_dice_apply_banker_rep)
 private:
  inline void set_has_apply_oper();
  inline void clear_has_apply_oper();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_buyin_score();
  inline void clear_has_buyin_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 apply_oper_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::int64 buyin_score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_dice_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_dice_apply_banker_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_dice_change_banker : public ::google::protobuf::Message {
 public:
  msg_dice_change_banker();
  virtual ~msg_dice_change_banker();

  msg_dice_change_banker(const msg_dice_change_banker& from);

  inline msg_dice_change_banker& operator=(const msg_dice_change_banker& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_dice_change_banker& default_instance();

  void Swap(msg_dice_change_banker* other);

  // implements Message ----------------------------------------------

  msg_dice_change_banker* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_dice_change_banker& from);
  void MergeFrom(const msg_dice_change_banker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 banker_user = 1;
  inline bool has_banker_user() const;
  inline void clear_banker_user();
  static const int kBankerUserFieldNumber = 1;
  inline ::google::protobuf::uint32 banker_user() const;
  inline void set_banker_user(::google::protobuf::uint32 value);

  // optional int64 banker_score = 2;
  inline bool has_banker_score() const;
  inline void clear_banker_score();
  static const int kBankerScoreFieldNumber = 2;
  inline ::google::protobuf::int64 banker_score() const;
  inline void set_banker_score(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:net.msg_dice_change_banker)
 private:
  inline void set_has_banker_user();
  inline void clear_has_banker_user();
  inline void set_has_banker_score();
  inline void clear_has_banker_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 banker_score_;
  ::google::protobuf::uint32 banker_user_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_dice_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_dice_change_banker* default_instance_;
};
// -------------------------------------------------------------------

class msg_dice_change_user_score : public ::google::protobuf::Message {
 public:
  msg_dice_change_user_score();
  virtual ~msg_dice_change_user_score();

  msg_dice_change_user_score(const msg_dice_change_user_score& from);

  inline msg_dice_change_user_score& operator=(const msg_dice_change_user_score& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_dice_change_user_score& default_instance();

  void Swap(msg_dice_change_user_score* other);

  // implements Message ----------------------------------------------

  msg_dice_change_user_score* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_dice_change_user_score& from);
  void MergeFrom(const msg_dice_change_user_score& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 chair_id = 1;
  inline bool has_chair_id() const;
  inline void clear_chair_id();
  static const int kChairIdFieldNumber = 1;
  inline ::google::protobuf::uint32 chair_id() const;
  inline void set_chair_id(::google::protobuf::uint32 value);

  // optional int64 score = 2;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  inline ::google::protobuf::int64 score() const;
  inline void set_score(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:net.msg_dice_change_user_score)
 private:
  inline void set_has_chair_id();
  inline void clear_has_chair_id();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 score_;
  ::google::protobuf::uint32 chair_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_dice_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_dice_change_user_score* default_instance_;
};
// -------------------------------------------------------------------

class msg_dice_apply_list : public ::google::protobuf::Message {
 public:
  msg_dice_apply_list();
  virtual ~msg_dice_apply_list();

  msg_dice_apply_list(const msg_dice_apply_list& from);

  inline msg_dice_apply_list& operator=(const msg_dice_apply_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_dice_apply_list& default_instance();

  void Swap(msg_dice_apply_list* other);

  // implements Message ----------------------------------------------

  msg_dice_apply_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_dice_apply_list& from);
  void MergeFrom(const msg_dice_apply_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 player_ids = 1;
  inline int player_ids_size() const;
  inline void clear_player_ids();
  static const int kPlayerIdsFieldNumber = 1;
  inline ::google::protobuf::uint32 player_ids(int index) const;
  inline void set_player_ids(int index, ::google::protobuf::uint32 value);
  inline void add_player_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      player_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_player_ids();

  // repeated int64 apply_score = 2;
  inline int apply_score_size() const;
  inline void clear_apply_score();
  static const int kApplyScoreFieldNumber = 2;
  inline ::google::protobuf::int64 apply_score(int index) const;
  inline void set_apply_score(int index, ::google::protobuf::int64 value);
  inline void add_apply_score(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      apply_score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_apply_score();

  // @@protoc_insertion_point(class_scope:net.msg_dice_apply_list)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > player_ids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > apply_score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_dice_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_dice_apply_list* default_instance_;
};
// -------------------------------------------------------------------

class msg_dice_jump_apply_queue_req : public ::google::protobuf::Message {
 public:
  msg_dice_jump_apply_queue_req();
  virtual ~msg_dice_jump_apply_queue_req();

  msg_dice_jump_apply_queue_req(const msg_dice_jump_apply_queue_req& from);

  inline msg_dice_jump_apply_queue_req& operator=(const msg_dice_jump_apply_queue_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_dice_jump_apply_queue_req& default_instance();

  void Swap(msg_dice_jump_apply_queue_req* other);

  // implements Message ----------------------------------------------

  msg_dice_jump_apply_queue_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_dice_jump_apply_queue_req& from);
  void MergeFrom(const msg_dice_jump_apply_queue_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 jump_pos = 1;
  inline bool has_jump_pos() const;
  inline void clear_jump_pos();
  static const int kJumpPosFieldNumber = 1;
  inline ::google::protobuf::uint32 jump_pos() const;
  inline void set_jump_pos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_dice_jump_apply_queue_req)
 private:
  inline void set_has_jump_pos();
  inline void clear_has_jump_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 jump_pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_dice_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_dice_jump_apply_queue_req* default_instance_;
};
// -------------------------------------------------------------------

class msg_dice_jump_apply_queue_rep : public ::google::protobuf::Message {
 public:
  msg_dice_jump_apply_queue_rep();
  virtual ~msg_dice_jump_apply_queue_rep();

  msg_dice_jump_apply_queue_rep(const msg_dice_jump_apply_queue_rep& from);

  inline msg_dice_jump_apply_queue_rep& operator=(const msg_dice_jump_apply_queue_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_dice_jump_apply_queue_rep& default_instance();

  void Swap(msg_dice_jump_apply_queue_rep* other);

  // implements Message ----------------------------------------------

  msg_dice_jump_apply_queue_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_dice_jump_apply_queue_rep& from);
  void MergeFrom(const msg_dice_jump_apply_queue_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_dice_jump_apply_queue_rep)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_dice_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_dice_jump_apply_queue_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_dice_banker_calc_rep : public ::google::protobuf::Message {
 public:
  msg_dice_banker_calc_rep();
  virtual ~msg_dice_banker_calc_rep();

  msg_dice_banker_calc_rep(const msg_dice_banker_calc_rep& from);

  inline msg_dice_banker_calc_rep& operator=(const msg_dice_banker_calc_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_dice_banker_calc_rep& default_instance();

  void Swap(msg_dice_banker_calc_rep* other);

  // implements Message ----------------------------------------------

  msg_dice_banker_calc_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_dice_banker_calc_rep& from);
  void MergeFrom(const msg_dice_banker_calc_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 banker_time = 1;
  inline bool has_banker_time() const;
  inline void clear_banker_time();
  static const int kBankerTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 banker_time() const;
  inline void set_banker_time(::google::protobuf::uint32 value);

  // optional uint32 win_count = 2;
  inline bool has_win_count() const;
  inline void clear_win_count();
  static const int kWinCountFieldNumber = 2;
  inline ::google::protobuf::uint32 win_count() const;
  inline void set_win_count(::google::protobuf::uint32 value);

  // optional int64 buyin_score = 3;
  inline bool has_buyin_score() const;
  inline void clear_buyin_score();
  static const int kBuyinScoreFieldNumber = 3;
  inline ::google::protobuf::int64 buyin_score() const;
  inline void set_buyin_score(::google::protobuf::int64 value);

  // optional int64 win_score = 4;
  inline bool has_win_score() const;
  inline void clear_win_score();
  static const int kWinScoreFieldNumber = 4;
  inline ::google::protobuf::int64 win_score() const;
  inline void set_win_score(::google::protobuf::int64 value);

  // optional int64 win_max = 5;
  inline bool has_win_max() const;
  inline void clear_win_max();
  static const int kWinMaxFieldNumber = 5;
  inline ::google::protobuf::int64 win_max() const;
  inline void set_win_max(::google::protobuf::int64 value);

  // optional int64 win_min = 6;
  inline bool has_win_min() const;
  inline void clear_win_min();
  static const int kWinMinFieldNumber = 6;
  inline ::google::protobuf::int64 win_min() const;
  inline void set_win_min(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:net.msg_dice_banker_calc_rep)
 private:
  inline void set_has_banker_time();
  inline void clear_has_banker_time();
  inline void set_has_win_count();
  inline void clear_has_win_count();
  inline void set_has_buyin_score();
  inline void clear_has_buyin_score();
  inline void set_has_win_score();
  inline void clear_has_win_score();
  inline void set_has_win_max();
  inline void clear_has_win_max();
  inline void set_has_win_min();
  inline void clear_has_win_min();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 banker_time_;
  ::google::protobuf::uint32 win_count_;
  ::google::protobuf::int64 buyin_score_;
  ::google::protobuf::int64 win_score_;
  ::google::protobuf::int64 win_max_;
  ::google::protobuf::int64 win_min_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_dice_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_dice_banker_calc_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_dice_add_bankerscore_rep : public ::google::protobuf::Message {
 public:
  msg_dice_add_bankerscore_rep();
  virtual ~msg_dice_add_bankerscore_rep();

  msg_dice_add_bankerscore_rep(const msg_dice_add_bankerscore_rep& from);

  inline msg_dice_add_bankerscore_rep& operator=(const msg_dice_add_bankerscore_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_dice_add_bankerscore_rep& default_instance();

  void Swap(msg_dice_add_bankerscore_rep* other);

  // implements Message ----------------------------------------------

  msg_dice_add_bankerscore_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_dice_add_bankerscore_rep& from);
  void MergeFrom(const msg_dice_add_bankerscore_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 buyin_score = 1;
  inline bool has_buyin_score() const;
  inline void clear_buyin_score();
  static const int kBuyinScoreFieldNumber = 1;
  inline ::google::protobuf::int64 buyin_score() const;
  inline void set_buyin_score(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:net.msg_dice_add_bankerscore_rep)
 private:
  inline void set_has_buyin_score();
  inline void clear_has_buyin_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 buyin_score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_dice_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_dice_add_bankerscore_rep* default_instance_;
};
// -------------------------------------------------------------------

class dice_play_log : public ::google::protobuf::Message {
 public:
  dice_play_log();
  virtual ~dice_play_log();

  dice_play_log(const dice_play_log& from);

  inline dice_play_log& operator=(const dice_play_log& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dice_play_log& default_instance();

  void Swap(dice_play_log* other);

  // implements Message ----------------------------------------------

  dice_play_log* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const dice_play_log& from);
  void MergeFrom(const dice_play_log& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 big_small = 1;
  inline bool has_big_small() const;
  inline void clear_big_small();
  static const int kBigSmallFieldNumber = 1;
  inline ::google::protobuf::uint32 big_small() const;
  inline void set_big_small(::google::protobuf::uint32 value);

  // optional uint32 sum_point = 2;
  inline bool has_sum_point() const;
  inline void clear_sum_point();
  static const int kSumPointFieldNumber = 2;
  inline ::google::protobuf::uint32 sum_point() const;
  inline void set_sum_point(::google::protobuf::uint32 value);

  // repeated uint32 cards = 3;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 3;
  inline ::google::protobuf::uint32 cards(int index) const;
  inline void set_cards(int index, ::google::protobuf::uint32 value);
  inline void add_cards(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cards();

  // optional uint32 is_waidice = 4;
  inline bool has_is_waidice() const;
  inline void clear_is_waidice();
  static const int kIsWaidiceFieldNumber = 4;
  inline ::google::protobuf::uint32 is_waidice() const;
  inline void set_is_waidice(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.dice_play_log)
 private:
  inline void set_has_big_small();
  inline void clear_has_big_small();
  inline void set_has_sum_point();
  inline void clear_has_sum_point();
  inline void set_has_is_waidice();
  inline void clear_has_is_waidice();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 big_small_;
  ::google::protobuf::uint32 sum_point_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cards_;
  ::google::protobuf::uint32 is_waidice_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_dice_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static dice_play_log* default_instance_;
};
// -------------------------------------------------------------------

class msg_dice_play_log_rep : public ::google::protobuf::Message {
 public:
  msg_dice_play_log_rep();
  virtual ~msg_dice_play_log_rep();

  msg_dice_play_log_rep(const msg_dice_play_log_rep& from);

  inline msg_dice_play_log_rep& operator=(const msg_dice_play_log_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_dice_play_log_rep& default_instance();

  void Swap(msg_dice_play_log_rep* other);

  // implements Message ----------------------------------------------

  msg_dice_play_log_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_dice_play_log_rep& from);
  void MergeFrom(const msg_dice_play_log_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .net.dice_play_log logs = 1;
  inline int logs_size() const;
  inline void clear_logs();
  static const int kLogsFieldNumber = 1;
  inline const ::net::dice_play_log& logs(int index) const;
  inline ::net::dice_play_log* mutable_logs(int index);
  inline ::net::dice_play_log* add_logs();
  inline const ::google::protobuf::RepeatedPtrField< ::net::dice_play_log >&
      logs() const;
  inline ::google::protobuf::RepeatedPtrField< ::net::dice_play_log >*
      mutable_logs();

  // @@protoc_insertion_point(class_scope:net.msg_dice_play_log_rep)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::net::dice_play_log > logs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_dice_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_dice_play_log_rep* default_instance_;
};
// -------------------------------------------------------------------

class dice_control_req : public ::google::protobuf::Message {
 public:
  dice_control_req();
  virtual ~dice_control_req();

  dice_control_req(const dice_control_req& from);

  inline dice_control_req& operator=(const dice_control_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dice_control_req& default_instance();

  void Swap(dice_control_req* other);

  // implements Message ----------------------------------------------

  dice_control_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const dice_control_req& from);
  void MergeFrom(const dice_control_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 table_cards = 1;
  inline int table_cards_size() const;
  inline void clear_table_cards();
  static const int kTableCardsFieldNumber = 1;
  inline ::google::protobuf::uint32 table_cards(int index) const;
  inline void set_table_cards(int index, ::google::protobuf::uint32 value);
  inline void add_table_cards(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      table_cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_table_cards();

  // @@protoc_insertion_point(class_scope:net.dice_control_req)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > table_cards_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_dice_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_dice_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static dice_control_req* default_instance_;
};
// ===================================================================


// ===================================================================

// dice_area_info

// optional uint32 jetton_area = 1;
inline bool dice_area_info::has_jetton_area() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void dice_area_info::set_has_jetton_area() {
  _has_bits_[0] |= 0x00000001u;
}
inline void dice_area_info::clear_has_jetton_area() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void dice_area_info::clear_jetton_area() {
  jetton_area_ = 0u;
  clear_has_jetton_area();
}
inline ::google::protobuf::uint32 dice_area_info::jetton_area() const {
  return jetton_area_;
}
inline void dice_area_info::set_jetton_area(::google::protobuf::uint32 value) {
  set_has_jetton_area();
  jetton_area_ = value;
}

// optional uint32 jetton_multiple = 2;
inline bool dice_area_info::has_jetton_multiple() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void dice_area_info::set_has_jetton_multiple() {
  _has_bits_[0] |= 0x00000002u;
}
inline void dice_area_info::clear_has_jetton_multiple() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void dice_area_info::clear_jetton_multiple() {
  jetton_multiple_ = 0u;
  clear_has_jetton_multiple();
}
inline ::google::protobuf::uint32 dice_area_info::jetton_multiple() const {
  return jetton_multiple_;
}
inline void dice_area_info::set_jetton_multiple(::google::protobuf::uint32 value) {
  set_has_jetton_multiple();
  jetton_multiple_ = value;
}

// optional int64 jetton_score = 3;
inline bool dice_area_info::has_jetton_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void dice_area_info::set_has_jetton_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void dice_area_info::clear_has_jetton_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void dice_area_info::clear_jetton_score() {
  jetton_score_ = GOOGLE_LONGLONG(0);
  clear_has_jetton_score();
}
inline ::google::protobuf::int64 dice_area_info::jetton_score() const {
  return jetton_score_;
}
inline void dice_area_info::set_jetton_score(::google::protobuf::int64 value) {
  set_has_jetton_score();
  jetton_score_ = value;
}

// optional int64 final_score = 4;
inline bool dice_area_info::has_final_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void dice_area_info::set_has_final_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void dice_area_info::clear_has_final_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void dice_area_info::clear_final_score() {
  final_score_ = GOOGLE_LONGLONG(0);
  clear_has_final_score();
}
inline ::google::protobuf::int64 dice_area_info::final_score() const {
  return final_score_;
}
inline void dice_area_info::set_final_score(::google::protobuf::int64 value) {
  set_has_final_score();
  final_score_ = value;
}

// -------------------------------------------------------------------

// dice_game_score_rank

// optional uint32 uid = 1;
inline bool dice_game_score_rank::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void dice_game_score_rank::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void dice_game_score_rank::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void dice_game_score_rank::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 dice_game_score_rank::uid() const {
  return uid_;
}
inline void dice_game_score_rank::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional bytes nick_name = 2;
inline bool dice_game_score_rank::has_nick_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void dice_game_score_rank::set_has_nick_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void dice_game_score_rank::clear_has_nick_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void dice_game_score_rank::clear_nick_name() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    nick_name_->clear();
  }
  clear_has_nick_name();
}
inline const ::std::string& dice_game_score_rank::nick_name() const {
  return *nick_name_;
}
inline void dice_game_score_rank::set_nick_name(const ::std::string& value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
}
inline void dice_game_score_rank::set_nick_name(const char* value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
}
inline void dice_game_score_rank::set_nick_name(const void* value, size_t size) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* dice_game_score_rank::mutable_nick_name() {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  return nick_name_;
}
inline ::std::string* dice_game_score_rank::release_nick_name() {
  clear_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nick_name_;
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void dice_game_score_rank::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (nick_name) {
    set_has_nick_name();
    nick_name_ = nick_name;
  } else {
    clear_has_nick_name();
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes city = 3;
inline bool dice_game_score_rank::has_city() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void dice_game_score_rank::set_has_city() {
  _has_bits_[0] |= 0x00000004u;
}
inline void dice_game_score_rank::clear_has_city() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void dice_game_score_rank::clear_city() {
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    city_->clear();
  }
  clear_has_city();
}
inline const ::std::string& dice_game_score_rank::city() const {
  return *city_;
}
inline void dice_game_score_rank::set_city(const ::std::string& value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(value);
}
inline void dice_game_score_rank::set_city(const char* value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(value);
}
inline void dice_game_score_rank::set_city(const void* value, size_t size) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* dice_game_score_rank::mutable_city() {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  return city_;
}
inline ::std::string* dice_game_score_rank::release_city() {
  clear_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = city_;
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void dice_game_score_rank::set_allocated_city(::std::string* city) {
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (city) {
    set_has_city();
    city_ = city;
  } else {
    clear_has_city();
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 income_score = 4;
inline bool dice_game_score_rank::has_income_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void dice_game_score_rank::set_has_income_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void dice_game_score_rank::clear_has_income_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void dice_game_score_rank::clear_income_score() {
  income_score_ = GOOGLE_LONGLONG(0);
  clear_has_income_score();
}
inline ::google::protobuf::int64 dice_game_score_rank::income_score() const {
  return income_score_;
}
inline void dice_game_score_rank::set_income_score(::google::protobuf::int64 value) {
  set_has_income_score();
  income_score_ = value;
}

// -------------------------------------------------------------------

// dice_jackpot_info_req

// -------------------------------------------------------------------

// dice_jackpot_info

// repeated uint32 table_cards = 1;
inline int dice_jackpot_info::table_cards_size() const {
  return table_cards_.size();
}
inline void dice_jackpot_info::clear_table_cards() {
  table_cards_.Clear();
}
inline ::google::protobuf::uint32 dice_jackpot_info::table_cards(int index) const {
  return table_cards_.Get(index);
}
inline void dice_jackpot_info::set_table_cards(int index, ::google::protobuf::uint32 value) {
  table_cards_.Set(index, value);
}
inline void dice_jackpot_info::add_table_cards(::google::protobuf::uint32 value) {
  table_cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
dice_jackpot_info::table_cards() const {
  return table_cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
dice_jackpot_info::mutable_table_cards() {
  return &table_cards_;
}

// optional uint64 utime = 2;
inline bool dice_jackpot_info::has_utime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void dice_jackpot_info::set_has_utime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void dice_jackpot_info::clear_has_utime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void dice_jackpot_info::clear_utime() {
  utime_ = GOOGLE_ULONGLONG(0);
  clear_has_utime();
}
inline ::google::protobuf::uint64 dice_jackpot_info::utime() const {
  return utime_;
}
inline void dice_jackpot_info::set_utime(::google::protobuf::uint64 value) {
  set_has_utime();
  utime_ = value;
}

// optional int64 win_total_score = 3;
inline bool dice_jackpot_info::has_win_total_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void dice_jackpot_info::set_has_win_total_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void dice_jackpot_info::clear_has_win_total_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void dice_jackpot_info::clear_win_total_score() {
  win_total_score_ = GOOGLE_LONGLONG(0);
  clear_has_win_total_score();
}
inline ::google::protobuf::int64 dice_jackpot_info::win_total_score() const {
  return win_total_score_;
}
inline void dice_jackpot_info::set_win_total_score(::google::protobuf::int64 value) {
  set_has_win_total_score();
  win_total_score_ = value;
}

// optional int64 cur_jackpot_score = 4;
inline bool dice_jackpot_info::has_cur_jackpot_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void dice_jackpot_info::set_has_cur_jackpot_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void dice_jackpot_info::clear_has_cur_jackpot_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void dice_jackpot_info::clear_cur_jackpot_score() {
  cur_jackpot_score_ = GOOGLE_LONGLONG(0);
  clear_has_cur_jackpot_score();
}
inline ::google::protobuf::int64 dice_jackpot_info::cur_jackpot_score() const {
  return cur_jackpot_score_;
}
inline void dice_jackpot_info::set_cur_jackpot_score(::google::protobuf::int64 value) {
  set_has_cur_jackpot_score();
  cur_jackpot_score_ = value;
}

// repeated .net.dice_game_score_rank score_rank = 5;
inline int dice_jackpot_info::score_rank_size() const {
  return score_rank_.size();
}
inline void dice_jackpot_info::clear_score_rank() {
  score_rank_.Clear();
}
inline const ::net::dice_game_score_rank& dice_jackpot_info::score_rank(int index) const {
  return score_rank_.Get(index);
}
inline ::net::dice_game_score_rank* dice_jackpot_info::mutable_score_rank(int index) {
  return score_rank_.Mutable(index);
}
inline ::net::dice_game_score_rank* dice_jackpot_info::add_score_rank() {
  return score_rank_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::net::dice_game_score_rank >&
dice_jackpot_info::score_rank() const {
  return score_rank_;
}
inline ::google::protobuf::RepeatedPtrField< ::net::dice_game_score_rank >*
dice_jackpot_info::mutable_score_rank() {
  return &score_rank_;
}

// -------------------------------------------------------------------

// dice_game_end_info

// repeated uint32 table_cards = 1;
inline int dice_game_end_info::table_cards_size() const {
  return table_cards_.size();
}
inline void dice_game_end_info::clear_table_cards() {
  table_cards_.Clear();
}
inline ::google::protobuf::uint32 dice_game_end_info::table_cards(int index) const {
  return table_cards_.Get(index);
}
inline void dice_game_end_info::set_table_cards(int index, ::google::protobuf::uint32 value) {
  table_cards_.Set(index, value);
}
inline void dice_game_end_info::add_table_cards(::google::protobuf::uint32 value) {
  table_cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
dice_game_end_info::table_cards() const {
  return table_cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
dice_game_end_info::mutable_table_cards() {
  return &table_cards_;
}

// repeated uint32 hit_area = 2;
inline int dice_game_end_info::hit_area_size() const {
  return hit_area_.size();
}
inline void dice_game_end_info::clear_hit_area() {
  hit_area_.Clear();
}
inline ::google::protobuf::uint32 dice_game_end_info::hit_area(int index) const {
  return hit_area_.Get(index);
}
inline void dice_game_end_info::set_hit_area(int index, ::google::protobuf::uint32 value) {
  hit_area_.Set(index, value);
}
inline void dice_game_end_info::add_hit_area(::google::protobuf::uint32 value) {
  hit_area_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
dice_game_end_info::hit_area() const {
  return hit_area_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
dice_game_end_info::mutable_hit_area() {
  return &hit_area_;
}

// optional uint32 big_small = 3;
inline bool dice_game_end_info::has_big_small() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void dice_game_end_info::set_has_big_small() {
  _has_bits_[0] |= 0x00000004u;
}
inline void dice_game_end_info::clear_has_big_small() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void dice_game_end_info::clear_big_small() {
  big_small_ = 0u;
  clear_has_big_small();
}
inline ::google::protobuf::uint32 dice_game_end_info::big_small() const {
  return big_small_;
}
inline void dice_game_end_info::set_big_small(::google::protobuf::uint32 value) {
  set_has_big_small();
  big_small_ = value;
}

// optional uint32 sum_point = 4;
inline bool dice_game_end_info::has_sum_point() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void dice_game_end_info::set_has_sum_point() {
  _has_bits_[0] |= 0x00000008u;
}
inline void dice_game_end_info::clear_has_sum_point() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void dice_game_end_info::clear_sum_point() {
  sum_point_ = 0u;
  clear_has_sum_point();
}
inline ::google::protobuf::uint32 dice_game_end_info::sum_point() const {
  return sum_point_;
}
inline void dice_game_end_info::set_sum_point(::google::protobuf::uint32 value) {
  set_has_sum_point();
  sum_point_ = value;
}

// optional int64 user_score = 5;
inline bool dice_game_end_info::has_user_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void dice_game_end_info::set_has_user_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void dice_game_end_info::clear_has_user_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void dice_game_end_info::clear_user_score() {
  user_score_ = GOOGLE_LONGLONG(0);
  clear_has_user_score();
}
inline ::google::protobuf::int64 dice_game_end_info::user_score() const {
  return user_score_;
}
inline void dice_game_end_info::set_user_score(::google::protobuf::int64 value) {
  set_has_user_score();
  user_score_ = value;
}

// repeated int64 player_score = 6;
inline int dice_game_end_info::player_score_size() const {
  return player_score_.size();
}
inline void dice_game_end_info::clear_player_score() {
  player_score_.Clear();
}
inline ::google::protobuf::int64 dice_game_end_info::player_score(int index) const {
  return player_score_.Get(index);
}
inline void dice_game_end_info::set_player_score(int index, ::google::protobuf::int64 value) {
  player_score_.Set(index, value);
}
inline void dice_game_end_info::add_player_score(::google::protobuf::int64 value) {
  player_score_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
dice_game_end_info::player_score() const {
  return player_score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
dice_game_end_info::mutable_player_score() {
  return &player_score_;
}

// optional int64 jackpot_score = 7;
inline bool dice_game_end_info::has_jackpot_score() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void dice_game_end_info::set_has_jackpot_score() {
  _has_bits_[0] |= 0x00000040u;
}
inline void dice_game_end_info::clear_has_jackpot_score() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void dice_game_end_info::clear_jackpot_score() {
  jackpot_score_ = GOOGLE_LONGLONG(0);
  clear_has_jackpot_score();
}
inline ::google::protobuf::int64 dice_game_end_info::jackpot_score() const {
  return jackpot_score_;
}
inline void dice_game_end_info::set_jackpot_score(::google::protobuf::int64 value) {
  set_has_jackpot_score();
  jackpot_score_ = value;
}

// optional int64 total_score = 8;
inline bool dice_game_end_info::has_total_score() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void dice_game_end_info::set_has_total_score() {
  _has_bits_[0] |= 0x00000080u;
}
inline void dice_game_end_info::clear_has_total_score() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void dice_game_end_info::clear_total_score() {
  total_score_ = GOOGLE_LONGLONG(0);
  clear_has_total_score();
}
inline ::google::protobuf::int64 dice_game_end_info::total_score() const {
  return total_score_;
}
inline void dice_game_end_info::set_total_score(::google::protobuf::int64 value) {
  set_has_total_score();
  total_score_ = value;
}

// optional int64 self_cur_score = 9;
inline bool dice_game_end_info::has_self_cur_score() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void dice_game_end_info::set_has_self_cur_score() {
  _has_bits_[0] |= 0x00000100u;
}
inline void dice_game_end_info::clear_has_self_cur_score() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void dice_game_end_info::clear_self_cur_score() {
  self_cur_score_ = GOOGLE_LONGLONG(0);
  clear_has_self_cur_score();
}
inline ::google::protobuf::int64 dice_game_end_info::self_cur_score() const {
  return self_cur_score_;
}
inline void dice_game_end_info::set_self_cur_score(::google::protobuf::int64 value) {
  set_has_self_cur_score();
  self_cur_score_ = value;
}

// repeated int64 player_cur_score = 10;
inline int dice_game_end_info::player_cur_score_size() const {
  return player_cur_score_.size();
}
inline void dice_game_end_info::clear_player_cur_score() {
  player_cur_score_.Clear();
}
inline ::google::protobuf::int64 dice_game_end_info::player_cur_score(int index) const {
  return player_cur_score_.Get(index);
}
inline void dice_game_end_info::set_player_cur_score(int index, ::google::protobuf::int64 value) {
  player_cur_score_.Set(index, value);
}
inline void dice_game_end_info::add_player_cur_score(::google::protobuf::int64 value) {
  player_cur_score_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
dice_game_end_info::player_cur_score() const {
  return player_cur_score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
dice_game_end_info::mutable_player_cur_score() {
  return &player_cur_score_;
}

// repeated .net.dice_area_info self_area_info = 11;
inline int dice_game_end_info::self_area_info_size() const {
  return self_area_info_.size();
}
inline void dice_game_end_info::clear_self_area_info() {
  self_area_info_.Clear();
}
inline const ::net::dice_area_info& dice_game_end_info::self_area_info(int index) const {
  return self_area_info_.Get(index);
}
inline ::net::dice_area_info* dice_game_end_info::mutable_self_area_info(int index) {
  return self_area_info_.Mutable(index);
}
inline ::net::dice_area_info* dice_game_end_info::add_self_area_info() {
  return self_area_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::net::dice_area_info >&
dice_game_end_info::self_area_info() const {
  return self_area_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::net::dice_area_info >*
dice_game_end_info::mutable_self_area_info() {
  return &self_area_info_;
}

// repeated .net.dice_area_info total_area_info = 12;
inline int dice_game_end_info::total_area_info_size() const {
  return total_area_info_.size();
}
inline void dice_game_end_info::clear_total_area_info() {
  total_area_info_.Clear();
}
inline const ::net::dice_area_info& dice_game_end_info::total_area_info(int index) const {
  return total_area_info_.Get(index);
}
inline ::net::dice_area_info* dice_game_end_info::mutable_total_area_info(int index) {
  return total_area_info_.Mutable(index);
}
inline ::net::dice_area_info* dice_game_end_info::add_total_area_info() {
  return total_area_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::net::dice_area_info >&
dice_game_end_info::total_area_info() const {
  return total_area_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::net::dice_area_info >*
dice_game_end_info::mutable_total_area_info() {
  return &total_area_info_;
}

// optional .net.dice_jackpot_info jackpot_info = 13;
inline bool dice_game_end_info::has_jackpot_info() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void dice_game_end_info::set_has_jackpot_info() {
  _has_bits_[0] |= 0x00001000u;
}
inline void dice_game_end_info::clear_has_jackpot_info() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void dice_game_end_info::clear_jackpot_info() {
  if (jackpot_info_ != NULL) jackpot_info_->::net::dice_jackpot_info::Clear();
  clear_has_jackpot_info();
}
inline const ::net::dice_jackpot_info& dice_game_end_info::jackpot_info() const {
  return jackpot_info_ != NULL ? *jackpot_info_ : *default_instance_->jackpot_info_;
}
inline ::net::dice_jackpot_info* dice_game_end_info::mutable_jackpot_info() {
  set_has_jackpot_info();
  if (jackpot_info_ == NULL) jackpot_info_ = new ::net::dice_jackpot_info;
  return jackpot_info_;
}
inline ::net::dice_jackpot_info* dice_game_end_info::release_jackpot_info() {
  clear_has_jackpot_info();
  ::net::dice_jackpot_info* temp = jackpot_info_;
  jackpot_info_ = NULL;
  return temp;
}
inline void dice_game_end_info::set_allocated_jackpot_info(::net::dice_jackpot_info* jackpot_info) {
  delete jackpot_info_;
  jackpot_info_ = jackpot_info;
  if (jackpot_info) {
    set_has_jackpot_info();
  } else {
    clear_has_jackpot_info();
  }
}

// -------------------------------------------------------------------

// msg_dice_game_info_free_rep

// optional uint32 time_leave = 1;
inline bool msg_dice_game_info_free_rep::has_time_leave() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_dice_game_info_free_rep::set_has_time_leave() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_dice_game_info_free_rep::clear_has_time_leave() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_dice_game_info_free_rep::clear_time_leave() {
  time_leave_ = 0u;
  clear_has_time_leave();
}
inline ::google::protobuf::uint32 msg_dice_game_info_free_rep::time_leave() const {
  return time_leave_;
}
inline void msg_dice_game_info_free_rep::set_time_leave(::google::protobuf::uint32 value) {
  set_has_time_leave();
  time_leave_ = value;
}

// optional uint32 game_status = 2;
inline bool msg_dice_game_info_free_rep::has_game_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_dice_game_info_free_rep::set_has_game_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_dice_game_info_free_rep::clear_has_game_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_dice_game_info_free_rep::clear_game_status() {
  game_status_ = 0u;
  clear_has_game_status();
}
inline ::google::protobuf::uint32 msg_dice_game_info_free_rep::game_status() const {
  return game_status_;
}
inline void msg_dice_game_info_free_rep::set_game_status(::google::protobuf::uint32 value) {
  set_has_game_status();
  game_status_ = value;
}

// optional uint32 banker_id = 3;
inline bool msg_dice_game_info_free_rep::has_banker_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_dice_game_info_free_rep::set_has_banker_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_dice_game_info_free_rep::clear_has_banker_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_dice_game_info_free_rep::clear_banker_id() {
  banker_id_ = 0u;
  clear_has_banker_id();
}
inline ::google::protobuf::uint32 msg_dice_game_info_free_rep::banker_id() const {
  return banker_id_;
}
inline void msg_dice_game_info_free_rep::set_banker_id(::google::protobuf::uint32 value) {
  set_has_banker_id();
  banker_id_ = value;
}

// optional uint32 banker_time = 4;
inline bool msg_dice_game_info_free_rep::has_banker_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_dice_game_info_free_rep::set_has_banker_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_dice_game_info_free_rep::clear_has_banker_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_dice_game_info_free_rep::clear_banker_time() {
  banker_time_ = 0u;
  clear_has_banker_time();
}
inline ::google::protobuf::uint32 msg_dice_game_info_free_rep::banker_time() const {
  return banker_time_;
}
inline void msg_dice_game_info_free_rep::set_banker_time(::google::protobuf::uint32 value) {
  set_has_banker_time();
  banker_time_ = value;
}

// optional int64 banker_win_score = 5;
inline bool msg_dice_game_info_free_rep::has_banker_win_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_dice_game_info_free_rep::set_has_banker_win_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_dice_game_info_free_rep::clear_has_banker_win_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_dice_game_info_free_rep::clear_banker_win_score() {
  banker_win_score_ = GOOGLE_LONGLONG(0);
  clear_has_banker_win_score();
}
inline ::google::protobuf::int64 msg_dice_game_info_free_rep::banker_win_score() const {
  return banker_win_score_;
}
inline void msg_dice_game_info_free_rep::set_banker_win_score(::google::protobuf::int64 value) {
  set_has_banker_win_score();
  banker_win_score_ = value;
}

// optional int64 banker_score = 6;
inline bool msg_dice_game_info_free_rep::has_banker_score() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_dice_game_info_free_rep::set_has_banker_score() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_dice_game_info_free_rep::clear_has_banker_score() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_dice_game_info_free_rep::clear_banker_score() {
  banker_score_ = GOOGLE_LONGLONG(0);
  clear_has_banker_score();
}
inline ::google::protobuf::int64 msg_dice_game_info_free_rep::banker_score() const {
  return banker_score_;
}
inline void msg_dice_game_info_free_rep::set_banker_score(::google::protobuf::int64 value) {
  set_has_banker_score();
  banker_score_ = value;
}

// optional int64 banker_buyin_score = 7;
inline bool msg_dice_game_info_free_rep::has_banker_buyin_score() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_dice_game_info_free_rep::set_has_banker_buyin_score() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_dice_game_info_free_rep::clear_has_banker_buyin_score() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_dice_game_info_free_rep::clear_banker_buyin_score() {
  banker_buyin_score_ = GOOGLE_LONGLONG(0);
  clear_has_banker_buyin_score();
}
inline ::google::protobuf::int64 msg_dice_game_info_free_rep::banker_buyin_score() const {
  return banker_buyin_score_;
}
inline void msg_dice_game_info_free_rep::set_banker_buyin_score(::google::protobuf::int64 value) {
  set_has_banker_buyin_score();
  banker_buyin_score_ = value;
}

// -------------------------------------------------------------------

// msg_dice_game_info_play_rep

// optional uint32 banker_id = 1;
inline bool msg_dice_game_info_play_rep::has_banker_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_dice_game_info_play_rep::set_has_banker_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_dice_game_info_play_rep::clear_has_banker_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_dice_game_info_play_rep::clear_banker_id() {
  banker_id_ = 0u;
  clear_has_banker_id();
}
inline ::google::protobuf::uint32 msg_dice_game_info_play_rep::banker_id() const {
  return banker_id_;
}
inline void msg_dice_game_info_play_rep::set_banker_id(::google::protobuf::uint32 value) {
  set_has_banker_id();
  banker_id_ = value;
}

// optional uint32 banker_time = 2;
inline bool msg_dice_game_info_play_rep::has_banker_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_dice_game_info_play_rep::set_has_banker_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_dice_game_info_play_rep::clear_has_banker_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_dice_game_info_play_rep::clear_banker_time() {
  banker_time_ = 0u;
  clear_has_banker_time();
}
inline ::google::protobuf::uint32 msg_dice_game_info_play_rep::banker_time() const {
  return banker_time_;
}
inline void msg_dice_game_info_play_rep::set_banker_time(::google::protobuf::uint32 value) {
  set_has_banker_time();
  banker_time_ = value;
}

// optional int64 banker_win_score = 3;
inline bool msg_dice_game_info_play_rep::has_banker_win_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_dice_game_info_play_rep::set_has_banker_win_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_dice_game_info_play_rep::clear_has_banker_win_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_dice_game_info_play_rep::clear_banker_win_score() {
  banker_win_score_ = GOOGLE_LONGLONG(0);
  clear_has_banker_win_score();
}
inline ::google::protobuf::int64 msg_dice_game_info_play_rep::banker_win_score() const {
  return banker_win_score_;
}
inline void msg_dice_game_info_play_rep::set_banker_win_score(::google::protobuf::int64 value) {
  set_has_banker_win_score();
  banker_win_score_ = value;
}

// optional int64 banker_score = 4;
inline bool msg_dice_game_info_play_rep::has_banker_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_dice_game_info_play_rep::set_has_banker_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_dice_game_info_play_rep::clear_has_banker_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_dice_game_info_play_rep::clear_banker_score() {
  banker_score_ = GOOGLE_LONGLONG(0);
  clear_has_banker_score();
}
inline ::google::protobuf::int64 msg_dice_game_info_play_rep::banker_score() const {
  return banker_score_;
}
inline void msg_dice_game_info_play_rep::set_banker_score(::google::protobuf::int64 value) {
  set_has_banker_score();
  banker_score_ = value;
}

// optional int64 banker_buyin_score = 5;
inline bool msg_dice_game_info_play_rep::has_banker_buyin_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_dice_game_info_play_rep::set_has_banker_buyin_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_dice_game_info_play_rep::clear_has_banker_buyin_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_dice_game_info_play_rep::clear_banker_buyin_score() {
  banker_buyin_score_ = GOOGLE_LONGLONG(0);
  clear_has_banker_buyin_score();
}
inline ::google::protobuf::int64 msg_dice_game_info_play_rep::banker_buyin_score() const {
  return banker_buyin_score_;
}
inline void msg_dice_game_info_play_rep::set_banker_buyin_score(::google::protobuf::int64 value) {
  set_has_banker_buyin_score();
  banker_buyin_score_ = value;
}

// optional uint32 time_leave = 6;
inline bool msg_dice_game_info_play_rep::has_time_leave() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_dice_game_info_play_rep::set_has_time_leave() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_dice_game_info_play_rep::clear_has_time_leave() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_dice_game_info_play_rep::clear_time_leave() {
  time_leave_ = 0u;
  clear_has_time_leave();
}
inline ::google::protobuf::uint32 msg_dice_game_info_play_rep::time_leave() const {
  return time_leave_;
}
inline void msg_dice_game_info_play_rep::set_time_leave(::google::protobuf::uint32 value) {
  set_has_time_leave();
  time_leave_ = value;
}

// optional uint32 game_status = 7;
inline bool msg_dice_game_info_play_rep::has_game_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_dice_game_info_play_rep::set_has_game_status() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_dice_game_info_play_rep::clear_has_game_status() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_dice_game_info_play_rep::clear_game_status() {
  game_status_ = 0u;
  clear_has_game_status();
}
inline ::google::protobuf::uint32 msg_dice_game_info_play_rep::game_status() const {
  return game_status_;
}
inline void msg_dice_game_info_play_rep::set_game_status(::google::protobuf::uint32 value) {
  set_has_game_status();
  game_status_ = value;
}

// repeated int64 all_jetton_score = 8;
inline int msg_dice_game_info_play_rep::all_jetton_score_size() const {
  return all_jetton_score_.size();
}
inline void msg_dice_game_info_play_rep::clear_all_jetton_score() {
  all_jetton_score_.Clear();
}
inline ::google::protobuf::int64 msg_dice_game_info_play_rep::all_jetton_score(int index) const {
  return all_jetton_score_.Get(index);
}
inline void msg_dice_game_info_play_rep::set_all_jetton_score(int index, ::google::protobuf::int64 value) {
  all_jetton_score_.Set(index, value);
}
inline void msg_dice_game_info_play_rep::add_all_jetton_score(::google::protobuf::int64 value) {
  all_jetton_score_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
msg_dice_game_info_play_rep::all_jetton_score() const {
  return all_jetton_score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
msg_dice_game_info_play_rep::mutable_all_jetton_score() {
  return &all_jetton_score_;
}

// repeated int64 self_jetton_score = 9;
inline int msg_dice_game_info_play_rep::self_jetton_score_size() const {
  return self_jetton_score_.size();
}
inline void msg_dice_game_info_play_rep::clear_self_jetton_score() {
  self_jetton_score_.Clear();
}
inline ::google::protobuf::int64 msg_dice_game_info_play_rep::self_jetton_score(int index) const {
  return self_jetton_score_.Get(index);
}
inline void msg_dice_game_info_play_rep::set_self_jetton_score(int index, ::google::protobuf::int64 value) {
  self_jetton_score_.Set(index, value);
}
inline void msg_dice_game_info_play_rep::add_self_jetton_score(::google::protobuf::int64 value) {
  self_jetton_score_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
msg_dice_game_info_play_rep::self_jetton_score() const {
  return self_jetton_score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
msg_dice_game_info_play_rep::mutable_self_jetton_score() {
  return &self_jetton_score_;
}

// optional .net.dice_game_end_info end_info = 10;
inline bool msg_dice_game_info_play_rep::has_end_info() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void msg_dice_game_info_play_rep::set_has_end_info() {
  _has_bits_[0] |= 0x00000200u;
}
inline void msg_dice_game_info_play_rep::clear_has_end_info() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void msg_dice_game_info_play_rep::clear_end_info() {
  if (end_info_ != NULL) end_info_->::net::dice_game_end_info::Clear();
  clear_has_end_info();
}
inline const ::net::dice_game_end_info& msg_dice_game_info_play_rep::end_info() const {
  return end_info_ != NULL ? *end_info_ : *default_instance_->end_info_;
}
inline ::net::dice_game_end_info* msg_dice_game_info_play_rep::mutable_end_info() {
  set_has_end_info();
  if (end_info_ == NULL) end_info_ = new ::net::dice_game_end_info;
  return end_info_;
}
inline ::net::dice_game_end_info* msg_dice_game_info_play_rep::release_end_info() {
  clear_has_end_info();
  ::net::dice_game_end_info* temp = end_info_;
  end_info_ = NULL;
  return temp;
}
inline void msg_dice_game_info_play_rep::set_allocated_end_info(::net::dice_game_end_info* end_info) {
  delete end_info_;
  end_info_ = end_info;
  if (end_info) {
    set_has_end_info();
  } else {
    clear_has_end_info();
  }
}

// -------------------------------------------------------------------

// msg_dice_start_rep

// optional uint32 banker_id = 1;
inline bool msg_dice_start_rep::has_banker_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_dice_start_rep::set_has_banker_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_dice_start_rep::clear_has_banker_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_dice_start_rep::clear_banker_id() {
  banker_id_ = 0u;
  clear_has_banker_id();
}
inline ::google::protobuf::uint32 msg_dice_start_rep::banker_id() const {
  return banker_id_;
}
inline void msg_dice_start_rep::set_banker_id(::google::protobuf::uint32 value) {
  set_has_banker_id();
  banker_id_ = value;
}

// optional int64 banker_score = 2;
inline bool msg_dice_start_rep::has_banker_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_dice_start_rep::set_has_banker_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_dice_start_rep::clear_has_banker_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_dice_start_rep::clear_banker_score() {
  banker_score_ = GOOGLE_LONGLONG(0);
  clear_has_banker_score();
}
inline ::google::protobuf::int64 msg_dice_start_rep::banker_score() const {
  return banker_score_;
}
inline void msg_dice_start_rep::set_banker_score(::google::protobuf::int64 value) {
  set_has_banker_score();
  banker_score_ = value;
}

// optional uint32 time_leave = 3;
inline bool msg_dice_start_rep::has_time_leave() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_dice_start_rep::set_has_time_leave() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_dice_start_rep::clear_has_time_leave() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_dice_start_rep::clear_time_leave() {
  time_leave_ = 0u;
  clear_has_time_leave();
}
inline ::google::protobuf::uint32 msg_dice_start_rep::time_leave() const {
  return time_leave_;
}
inline void msg_dice_start_rep::set_time_leave(::google::protobuf::uint32 value) {
  set_has_time_leave();
  time_leave_ = value;
}

// optional int64 banker_buyin_score = 4;
inline bool msg_dice_start_rep::has_banker_buyin_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_dice_start_rep::set_has_banker_buyin_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_dice_start_rep::clear_has_banker_buyin_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_dice_start_rep::clear_banker_buyin_score() {
  banker_buyin_score_ = GOOGLE_LONGLONG(0);
  clear_has_banker_buyin_score();
}
inline ::google::protobuf::int64 msg_dice_start_rep::banker_buyin_score() const {
  return banker_buyin_score_;
}
inline void msg_dice_start_rep::set_banker_buyin_score(::google::protobuf::int64 value) {
  set_has_banker_buyin_score();
  banker_buyin_score_ = value;
}

// -------------------------------------------------------------------

// msg_dice_place_jetton_req

// optional uint32 jetton_area = 1;
inline bool msg_dice_place_jetton_req::has_jetton_area() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_dice_place_jetton_req::set_has_jetton_area() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_dice_place_jetton_req::clear_has_jetton_area() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_dice_place_jetton_req::clear_jetton_area() {
  jetton_area_ = 0u;
  clear_has_jetton_area();
}
inline ::google::protobuf::uint32 msg_dice_place_jetton_req::jetton_area() const {
  return jetton_area_;
}
inline void msg_dice_place_jetton_req::set_jetton_area(::google::protobuf::uint32 value) {
  set_has_jetton_area();
  jetton_area_ = value;
}

// optional int64 jetton_score = 2;
inline bool msg_dice_place_jetton_req::has_jetton_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_dice_place_jetton_req::set_has_jetton_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_dice_place_jetton_req::clear_has_jetton_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_dice_place_jetton_req::clear_jetton_score() {
  jetton_score_ = GOOGLE_LONGLONG(0);
  clear_has_jetton_score();
}
inline ::google::protobuf::int64 msg_dice_place_jetton_req::jetton_score() const {
  return jetton_score_;
}
inline void msg_dice_place_jetton_req::set_jetton_score(::google::protobuf::int64 value) {
  set_has_jetton_score();
  jetton_score_ = value;
}

// -------------------------------------------------------------------

// msg_dice_place_jetton_rep

// optional uint32 jetton_area = 1;
inline bool msg_dice_place_jetton_rep::has_jetton_area() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_dice_place_jetton_rep::set_has_jetton_area() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_dice_place_jetton_rep::clear_has_jetton_area() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_dice_place_jetton_rep::clear_jetton_area() {
  jetton_area_ = 0u;
  clear_has_jetton_area();
}
inline ::google::protobuf::uint32 msg_dice_place_jetton_rep::jetton_area() const {
  return jetton_area_;
}
inline void msg_dice_place_jetton_rep::set_jetton_area(::google::protobuf::uint32 value) {
  set_has_jetton_area();
  jetton_area_ = value;
}

// optional int64 jetton_score = 2;
inline bool msg_dice_place_jetton_rep::has_jetton_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_dice_place_jetton_rep::set_has_jetton_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_dice_place_jetton_rep::clear_has_jetton_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_dice_place_jetton_rep::clear_jetton_score() {
  jetton_score_ = GOOGLE_LONGLONG(0);
  clear_has_jetton_score();
}
inline ::google::protobuf::int64 msg_dice_place_jetton_rep::jetton_score() const {
  return jetton_score_;
}
inline void msg_dice_place_jetton_rep::set_jetton_score(::google::protobuf::int64 value) {
  set_has_jetton_score();
  jetton_score_ = value;
}

// optional uint32 result = 3;
inline bool msg_dice_place_jetton_rep::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_dice_place_jetton_rep::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_dice_place_jetton_rep::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_dice_place_jetton_rep::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 msg_dice_place_jetton_rep::result() const {
  return result_;
}
inline void msg_dice_place_jetton_rep::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// msg_dice_place_jetton_broadcast

// optional uint32 uid = 1;
inline bool msg_dice_place_jetton_broadcast::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_dice_place_jetton_broadcast::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_dice_place_jetton_broadcast::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_dice_place_jetton_broadcast::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 msg_dice_place_jetton_broadcast::uid() const {
  return uid_;
}
inline void msg_dice_place_jetton_broadcast::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 jetton_area = 2;
inline bool msg_dice_place_jetton_broadcast::has_jetton_area() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_dice_place_jetton_broadcast::set_has_jetton_area() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_dice_place_jetton_broadcast::clear_has_jetton_area() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_dice_place_jetton_broadcast::clear_jetton_area() {
  jetton_area_ = 0u;
  clear_has_jetton_area();
}
inline ::google::protobuf::uint32 msg_dice_place_jetton_broadcast::jetton_area() const {
  return jetton_area_;
}
inline void msg_dice_place_jetton_broadcast::set_jetton_area(::google::protobuf::uint32 value) {
  set_has_jetton_area();
  jetton_area_ = value;
}

// optional int64 jetton_score = 3;
inline bool msg_dice_place_jetton_broadcast::has_jetton_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_dice_place_jetton_broadcast::set_has_jetton_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_dice_place_jetton_broadcast::clear_has_jetton_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_dice_place_jetton_broadcast::clear_jetton_score() {
  jetton_score_ = GOOGLE_LONGLONG(0);
  clear_has_jetton_score();
}
inline ::google::protobuf::int64 msg_dice_place_jetton_broadcast::jetton_score() const {
  return jetton_score_;
}
inline void msg_dice_place_jetton_broadcast::set_jetton_score(::google::protobuf::int64 value) {
  set_has_jetton_score();
  jetton_score_ = value;
}

// optional int64 total_jetton_score = 4;
inline bool msg_dice_place_jetton_broadcast::has_total_jetton_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_dice_place_jetton_broadcast::set_has_total_jetton_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_dice_place_jetton_broadcast::clear_has_total_jetton_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_dice_place_jetton_broadcast::clear_total_jetton_score() {
  total_jetton_score_ = GOOGLE_LONGLONG(0);
  clear_has_total_jetton_score();
}
inline ::google::protobuf::int64 msg_dice_place_jetton_broadcast::total_jetton_score() const {
  return total_jetton_score_;
}
inline void msg_dice_place_jetton_broadcast::set_total_jetton_score(::google::protobuf::int64 value) {
  set_has_total_jetton_score();
  total_jetton_score_ = value;
}

// -------------------------------------------------------------------

// msg_dice_cancel_jetton_req

// -------------------------------------------------------------------

// msg_dice_cancel_jetton_rep

// optional uint32 result = 1;
inline bool msg_dice_cancel_jetton_rep::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_dice_cancel_jetton_rep::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_dice_cancel_jetton_rep::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_dice_cancel_jetton_rep::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 msg_dice_cancel_jetton_rep::result() const {
  return result_;
}
inline void msg_dice_cancel_jetton_rep::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// msg_dice_cancel_jetton_broadcast

// repeated int64 all_jetton_score = 1;
inline int msg_dice_cancel_jetton_broadcast::all_jetton_score_size() const {
  return all_jetton_score_.size();
}
inline void msg_dice_cancel_jetton_broadcast::clear_all_jetton_score() {
  all_jetton_score_.Clear();
}
inline ::google::protobuf::int64 msg_dice_cancel_jetton_broadcast::all_jetton_score(int index) const {
  return all_jetton_score_.Get(index);
}
inline void msg_dice_cancel_jetton_broadcast::set_all_jetton_score(int index, ::google::protobuf::int64 value) {
  all_jetton_score_.Set(index, value);
}
inline void msg_dice_cancel_jetton_broadcast::add_all_jetton_score(::google::protobuf::int64 value) {
  all_jetton_score_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
msg_dice_cancel_jetton_broadcast::all_jetton_score() const {
  return all_jetton_score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
msg_dice_cancel_jetton_broadcast::mutable_all_jetton_score() {
  return &all_jetton_score_;
}

// -------------------------------------------------------------------

// msg_dice_game_end

// optional uint32 time_leave = 1;
inline bool msg_dice_game_end::has_time_leave() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_dice_game_end::set_has_time_leave() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_dice_game_end::clear_has_time_leave() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_dice_game_end::clear_time_leave() {
  time_leave_ = 0u;
  clear_has_time_leave();
}
inline ::google::protobuf::uint32 msg_dice_game_end::time_leave() const {
  return time_leave_;
}
inline void msg_dice_game_end::set_time_leave(::google::protobuf::uint32 value) {
  set_has_time_leave();
  time_leave_ = value;
}

// optional uint32 banker_time = 2;
inline bool msg_dice_game_end::has_banker_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_dice_game_end::set_has_banker_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_dice_game_end::clear_has_banker_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_dice_game_end::clear_banker_time() {
  banker_time_ = 0u;
  clear_has_banker_time();
}
inline ::google::protobuf::uint32 msg_dice_game_end::banker_time() const {
  return banker_time_;
}
inline void msg_dice_game_end::set_banker_time(::google::protobuf::uint32 value) {
  set_has_banker_time();
  banker_time_ = value;
}

// optional int64 banker_win_score = 3;
inline bool msg_dice_game_end::has_banker_win_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_dice_game_end::set_has_banker_win_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_dice_game_end::clear_has_banker_win_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_dice_game_end::clear_banker_win_score() {
  banker_win_score_ = GOOGLE_LONGLONG(0);
  clear_has_banker_win_score();
}
inline ::google::protobuf::int64 msg_dice_game_end::banker_win_score() const {
  return banker_win_score_;
}
inline void msg_dice_game_end::set_banker_win_score(::google::protobuf::int64 value) {
  set_has_banker_win_score();
  banker_win_score_ = value;
}

// optional int64 banker_total_score = 4;
inline bool msg_dice_game_end::has_banker_total_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_dice_game_end::set_has_banker_total_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_dice_game_end::clear_has_banker_total_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_dice_game_end::clear_banker_total_score() {
  banker_total_score_ = GOOGLE_LONGLONG(0);
  clear_has_banker_total_score();
}
inline ::google::protobuf::int64 msg_dice_game_end::banker_total_score() const {
  return banker_total_score_;
}
inline void msg_dice_game_end::set_banker_total_score(::google::protobuf::int64 value) {
  set_has_banker_total_score();
  banker_total_score_ = value;
}

// optional .net.dice_game_end_info end_info = 5;
inline bool msg_dice_game_end::has_end_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_dice_game_end::set_has_end_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_dice_game_end::clear_has_end_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_dice_game_end::clear_end_info() {
  if (end_info_ != NULL) end_info_->::net::dice_game_end_info::Clear();
  clear_has_end_info();
}
inline const ::net::dice_game_end_info& msg_dice_game_end::end_info() const {
  return end_info_ != NULL ? *end_info_ : *default_instance_->end_info_;
}
inline ::net::dice_game_end_info* msg_dice_game_end::mutable_end_info() {
  set_has_end_info();
  if (end_info_ == NULL) end_info_ = new ::net::dice_game_end_info;
  return end_info_;
}
inline ::net::dice_game_end_info* msg_dice_game_end::release_end_info() {
  clear_has_end_info();
  ::net::dice_game_end_info* temp = end_info_;
  end_info_ = NULL;
  return temp;
}
inline void msg_dice_game_end::set_allocated_end_info(::net::dice_game_end_info* end_info) {
  delete end_info_;
  end_info_ = end_info;
  if (end_info) {
    set_has_end_info();
  } else {
    clear_has_end_info();
  }
}

// -------------------------------------------------------------------

// msg_dice_apply_banker

// optional uint32 apply_oper = 1;
inline bool msg_dice_apply_banker::has_apply_oper() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_dice_apply_banker::set_has_apply_oper() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_dice_apply_banker::clear_has_apply_oper() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_dice_apply_banker::clear_apply_oper() {
  apply_oper_ = 0u;
  clear_has_apply_oper();
}
inline ::google::protobuf::uint32 msg_dice_apply_banker::apply_oper() const {
  return apply_oper_;
}
inline void msg_dice_apply_banker::set_apply_oper(::google::protobuf::uint32 value) {
  set_has_apply_oper();
  apply_oper_ = value;
}

// optional int64 apply_score = 2;
inline bool msg_dice_apply_banker::has_apply_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_dice_apply_banker::set_has_apply_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_dice_apply_banker::clear_has_apply_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_dice_apply_banker::clear_apply_score() {
  apply_score_ = GOOGLE_LONGLONG(0);
  clear_has_apply_score();
}
inline ::google::protobuf::int64 msg_dice_apply_banker::apply_score() const {
  return apply_score_;
}
inline void msg_dice_apply_banker::set_apply_score(::google::protobuf::int64 value) {
  set_has_apply_score();
  apply_score_ = value;
}

// optional uint32 auto_addscore = 3;
inline bool msg_dice_apply_banker::has_auto_addscore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_dice_apply_banker::set_has_auto_addscore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_dice_apply_banker::clear_has_auto_addscore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_dice_apply_banker::clear_auto_addscore() {
  auto_addscore_ = 0u;
  clear_has_auto_addscore();
}
inline ::google::protobuf::uint32 msg_dice_apply_banker::auto_addscore() const {
  return auto_addscore_;
}
inline void msg_dice_apply_banker::set_auto_addscore(::google::protobuf::uint32 value) {
  set_has_auto_addscore();
  auto_addscore_ = value;
}

// -------------------------------------------------------------------

// msg_dice_apply_banker_rep

// optional uint32 apply_oper = 1;
inline bool msg_dice_apply_banker_rep::has_apply_oper() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_dice_apply_banker_rep::set_has_apply_oper() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_dice_apply_banker_rep::clear_has_apply_oper() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_dice_apply_banker_rep::clear_apply_oper() {
  apply_oper_ = 0u;
  clear_has_apply_oper();
}
inline ::google::protobuf::uint32 msg_dice_apply_banker_rep::apply_oper() const {
  return apply_oper_;
}
inline void msg_dice_apply_banker_rep::set_apply_oper(::google::protobuf::uint32 value) {
  set_has_apply_oper();
  apply_oper_ = value;
}

// optional uint32 result = 2;
inline bool msg_dice_apply_banker_rep::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_dice_apply_banker_rep::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_dice_apply_banker_rep::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_dice_apply_banker_rep::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 msg_dice_apply_banker_rep::result() const {
  return result_;
}
inline void msg_dice_apply_banker_rep::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// optional int64 buyin_score = 3;
inline bool msg_dice_apply_banker_rep::has_buyin_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_dice_apply_banker_rep::set_has_buyin_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_dice_apply_banker_rep::clear_has_buyin_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_dice_apply_banker_rep::clear_buyin_score() {
  buyin_score_ = GOOGLE_LONGLONG(0);
  clear_has_buyin_score();
}
inline ::google::protobuf::int64 msg_dice_apply_banker_rep::buyin_score() const {
  return buyin_score_;
}
inline void msg_dice_apply_banker_rep::set_buyin_score(::google::protobuf::int64 value) {
  set_has_buyin_score();
  buyin_score_ = value;
}

// -------------------------------------------------------------------

// msg_dice_change_banker

// optional uint32 banker_user = 1;
inline bool msg_dice_change_banker::has_banker_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_dice_change_banker::set_has_banker_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_dice_change_banker::clear_has_banker_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_dice_change_banker::clear_banker_user() {
  banker_user_ = 0u;
  clear_has_banker_user();
}
inline ::google::protobuf::uint32 msg_dice_change_banker::banker_user() const {
  return banker_user_;
}
inline void msg_dice_change_banker::set_banker_user(::google::protobuf::uint32 value) {
  set_has_banker_user();
  banker_user_ = value;
}

// optional int64 banker_score = 2;
inline bool msg_dice_change_banker::has_banker_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_dice_change_banker::set_has_banker_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_dice_change_banker::clear_has_banker_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_dice_change_banker::clear_banker_score() {
  banker_score_ = GOOGLE_LONGLONG(0);
  clear_has_banker_score();
}
inline ::google::protobuf::int64 msg_dice_change_banker::banker_score() const {
  return banker_score_;
}
inline void msg_dice_change_banker::set_banker_score(::google::protobuf::int64 value) {
  set_has_banker_score();
  banker_score_ = value;
}

// -------------------------------------------------------------------

// msg_dice_change_user_score

// optional uint32 chair_id = 1;
inline bool msg_dice_change_user_score::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_dice_change_user_score::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_dice_change_user_score::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_dice_change_user_score::clear_chair_id() {
  chair_id_ = 0u;
  clear_has_chair_id();
}
inline ::google::protobuf::uint32 msg_dice_change_user_score::chair_id() const {
  return chair_id_;
}
inline void msg_dice_change_user_score::set_chair_id(::google::protobuf::uint32 value) {
  set_has_chair_id();
  chair_id_ = value;
}

// optional int64 score = 2;
inline bool msg_dice_change_user_score::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_dice_change_user_score::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_dice_change_user_score::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_dice_change_user_score::clear_score() {
  score_ = GOOGLE_LONGLONG(0);
  clear_has_score();
}
inline ::google::protobuf::int64 msg_dice_change_user_score::score() const {
  return score_;
}
inline void msg_dice_change_user_score::set_score(::google::protobuf::int64 value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// msg_dice_apply_list

// repeated uint32 player_ids = 1;
inline int msg_dice_apply_list::player_ids_size() const {
  return player_ids_.size();
}
inline void msg_dice_apply_list::clear_player_ids() {
  player_ids_.Clear();
}
inline ::google::protobuf::uint32 msg_dice_apply_list::player_ids(int index) const {
  return player_ids_.Get(index);
}
inline void msg_dice_apply_list::set_player_ids(int index, ::google::protobuf::uint32 value) {
  player_ids_.Set(index, value);
}
inline void msg_dice_apply_list::add_player_ids(::google::protobuf::uint32 value) {
  player_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
msg_dice_apply_list::player_ids() const {
  return player_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
msg_dice_apply_list::mutable_player_ids() {
  return &player_ids_;
}

// repeated int64 apply_score = 2;
inline int msg_dice_apply_list::apply_score_size() const {
  return apply_score_.size();
}
inline void msg_dice_apply_list::clear_apply_score() {
  apply_score_.Clear();
}
inline ::google::protobuf::int64 msg_dice_apply_list::apply_score(int index) const {
  return apply_score_.Get(index);
}
inline void msg_dice_apply_list::set_apply_score(int index, ::google::protobuf::int64 value) {
  apply_score_.Set(index, value);
}
inline void msg_dice_apply_list::add_apply_score(::google::protobuf::int64 value) {
  apply_score_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
msg_dice_apply_list::apply_score() const {
  return apply_score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
msg_dice_apply_list::mutable_apply_score() {
  return &apply_score_;
}

// -------------------------------------------------------------------

// msg_dice_jump_apply_queue_req

// optional uint32 jump_pos = 1;
inline bool msg_dice_jump_apply_queue_req::has_jump_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_dice_jump_apply_queue_req::set_has_jump_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_dice_jump_apply_queue_req::clear_has_jump_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_dice_jump_apply_queue_req::clear_jump_pos() {
  jump_pos_ = 0u;
  clear_has_jump_pos();
}
inline ::google::protobuf::uint32 msg_dice_jump_apply_queue_req::jump_pos() const {
  return jump_pos_;
}
inline void msg_dice_jump_apply_queue_req::set_jump_pos(::google::protobuf::uint32 value) {
  set_has_jump_pos();
  jump_pos_ = value;
}

// -------------------------------------------------------------------

// msg_dice_jump_apply_queue_rep

// optional uint32 result = 1;
inline bool msg_dice_jump_apply_queue_rep::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_dice_jump_apply_queue_rep::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_dice_jump_apply_queue_rep::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_dice_jump_apply_queue_rep::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 msg_dice_jump_apply_queue_rep::result() const {
  return result_;
}
inline void msg_dice_jump_apply_queue_rep::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// msg_dice_banker_calc_rep

// optional uint32 banker_time = 1;
inline bool msg_dice_banker_calc_rep::has_banker_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_dice_banker_calc_rep::set_has_banker_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_dice_banker_calc_rep::clear_has_banker_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_dice_banker_calc_rep::clear_banker_time() {
  banker_time_ = 0u;
  clear_has_banker_time();
}
inline ::google::protobuf::uint32 msg_dice_banker_calc_rep::banker_time() const {
  return banker_time_;
}
inline void msg_dice_banker_calc_rep::set_banker_time(::google::protobuf::uint32 value) {
  set_has_banker_time();
  banker_time_ = value;
}

// optional uint32 win_count = 2;
inline bool msg_dice_banker_calc_rep::has_win_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_dice_banker_calc_rep::set_has_win_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_dice_banker_calc_rep::clear_has_win_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_dice_banker_calc_rep::clear_win_count() {
  win_count_ = 0u;
  clear_has_win_count();
}
inline ::google::protobuf::uint32 msg_dice_banker_calc_rep::win_count() const {
  return win_count_;
}
inline void msg_dice_banker_calc_rep::set_win_count(::google::protobuf::uint32 value) {
  set_has_win_count();
  win_count_ = value;
}

// optional int64 buyin_score = 3;
inline bool msg_dice_banker_calc_rep::has_buyin_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_dice_banker_calc_rep::set_has_buyin_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_dice_banker_calc_rep::clear_has_buyin_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_dice_banker_calc_rep::clear_buyin_score() {
  buyin_score_ = GOOGLE_LONGLONG(0);
  clear_has_buyin_score();
}
inline ::google::protobuf::int64 msg_dice_banker_calc_rep::buyin_score() const {
  return buyin_score_;
}
inline void msg_dice_banker_calc_rep::set_buyin_score(::google::protobuf::int64 value) {
  set_has_buyin_score();
  buyin_score_ = value;
}

// optional int64 win_score = 4;
inline bool msg_dice_banker_calc_rep::has_win_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_dice_banker_calc_rep::set_has_win_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_dice_banker_calc_rep::clear_has_win_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_dice_banker_calc_rep::clear_win_score() {
  win_score_ = GOOGLE_LONGLONG(0);
  clear_has_win_score();
}
inline ::google::protobuf::int64 msg_dice_banker_calc_rep::win_score() const {
  return win_score_;
}
inline void msg_dice_banker_calc_rep::set_win_score(::google::protobuf::int64 value) {
  set_has_win_score();
  win_score_ = value;
}

// optional int64 win_max = 5;
inline bool msg_dice_banker_calc_rep::has_win_max() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_dice_banker_calc_rep::set_has_win_max() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_dice_banker_calc_rep::clear_has_win_max() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_dice_banker_calc_rep::clear_win_max() {
  win_max_ = GOOGLE_LONGLONG(0);
  clear_has_win_max();
}
inline ::google::protobuf::int64 msg_dice_banker_calc_rep::win_max() const {
  return win_max_;
}
inline void msg_dice_banker_calc_rep::set_win_max(::google::protobuf::int64 value) {
  set_has_win_max();
  win_max_ = value;
}

// optional int64 win_min = 6;
inline bool msg_dice_banker_calc_rep::has_win_min() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_dice_banker_calc_rep::set_has_win_min() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_dice_banker_calc_rep::clear_has_win_min() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_dice_banker_calc_rep::clear_win_min() {
  win_min_ = GOOGLE_LONGLONG(0);
  clear_has_win_min();
}
inline ::google::protobuf::int64 msg_dice_banker_calc_rep::win_min() const {
  return win_min_;
}
inline void msg_dice_banker_calc_rep::set_win_min(::google::protobuf::int64 value) {
  set_has_win_min();
  win_min_ = value;
}

// -------------------------------------------------------------------

// msg_dice_add_bankerscore_rep

// optional int64 buyin_score = 1;
inline bool msg_dice_add_bankerscore_rep::has_buyin_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_dice_add_bankerscore_rep::set_has_buyin_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_dice_add_bankerscore_rep::clear_has_buyin_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_dice_add_bankerscore_rep::clear_buyin_score() {
  buyin_score_ = GOOGLE_LONGLONG(0);
  clear_has_buyin_score();
}
inline ::google::protobuf::int64 msg_dice_add_bankerscore_rep::buyin_score() const {
  return buyin_score_;
}
inline void msg_dice_add_bankerscore_rep::set_buyin_score(::google::protobuf::int64 value) {
  set_has_buyin_score();
  buyin_score_ = value;
}

// -------------------------------------------------------------------

// dice_play_log

// optional uint32 big_small = 1;
inline bool dice_play_log::has_big_small() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void dice_play_log::set_has_big_small() {
  _has_bits_[0] |= 0x00000001u;
}
inline void dice_play_log::clear_has_big_small() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void dice_play_log::clear_big_small() {
  big_small_ = 0u;
  clear_has_big_small();
}
inline ::google::protobuf::uint32 dice_play_log::big_small() const {
  return big_small_;
}
inline void dice_play_log::set_big_small(::google::protobuf::uint32 value) {
  set_has_big_small();
  big_small_ = value;
}

// optional uint32 sum_point = 2;
inline bool dice_play_log::has_sum_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void dice_play_log::set_has_sum_point() {
  _has_bits_[0] |= 0x00000002u;
}
inline void dice_play_log::clear_has_sum_point() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void dice_play_log::clear_sum_point() {
  sum_point_ = 0u;
  clear_has_sum_point();
}
inline ::google::protobuf::uint32 dice_play_log::sum_point() const {
  return sum_point_;
}
inline void dice_play_log::set_sum_point(::google::protobuf::uint32 value) {
  set_has_sum_point();
  sum_point_ = value;
}

// repeated uint32 cards = 3;
inline int dice_play_log::cards_size() const {
  return cards_.size();
}
inline void dice_play_log::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::uint32 dice_play_log::cards(int index) const {
  return cards_.Get(index);
}
inline void dice_play_log::set_cards(int index, ::google::protobuf::uint32 value) {
  cards_.Set(index, value);
}
inline void dice_play_log::add_cards(::google::protobuf::uint32 value) {
  cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
dice_play_log::cards() const {
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
dice_play_log::mutable_cards() {
  return &cards_;
}

// optional uint32 is_waidice = 4;
inline bool dice_play_log::has_is_waidice() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void dice_play_log::set_has_is_waidice() {
  _has_bits_[0] |= 0x00000008u;
}
inline void dice_play_log::clear_has_is_waidice() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void dice_play_log::clear_is_waidice() {
  is_waidice_ = 0u;
  clear_has_is_waidice();
}
inline ::google::protobuf::uint32 dice_play_log::is_waidice() const {
  return is_waidice_;
}
inline void dice_play_log::set_is_waidice(::google::protobuf::uint32 value) {
  set_has_is_waidice();
  is_waidice_ = value;
}

// -------------------------------------------------------------------

// msg_dice_play_log_rep

// repeated .net.dice_play_log logs = 1;
inline int msg_dice_play_log_rep::logs_size() const {
  return logs_.size();
}
inline void msg_dice_play_log_rep::clear_logs() {
  logs_.Clear();
}
inline const ::net::dice_play_log& msg_dice_play_log_rep::logs(int index) const {
  return logs_.Get(index);
}
inline ::net::dice_play_log* msg_dice_play_log_rep::mutable_logs(int index) {
  return logs_.Mutable(index);
}
inline ::net::dice_play_log* msg_dice_play_log_rep::add_logs() {
  return logs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::net::dice_play_log >&
msg_dice_play_log_rep::logs() const {
  return logs_;
}
inline ::google::protobuf::RepeatedPtrField< ::net::dice_play_log >*
msg_dice_play_log_rep::mutable_logs() {
  return &logs_;
}

// -------------------------------------------------------------------

// dice_control_req

// repeated uint32 table_cards = 1;
inline int dice_control_req::table_cards_size() const {
  return table_cards_.size();
}
inline void dice_control_req::clear_table_cards() {
  table_cards_.Clear();
}
inline ::google::protobuf::uint32 dice_control_req::table_cards(int index) const {
  return table_cards_.Get(index);
}
inline void dice_control_req::set_table_cards(int index, ::google::protobuf::uint32 value) {
  table_cards_.Set(index, value);
}
inline void dice_control_req::add_table_cards(::google::protobuf::uint32 value) {
  table_cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
dice_control_req::table_cards() const {
  return table_cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
dice_control_req::mutable_table_cards() {
  return &table_cards_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace net

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dice_5flogic_5fmsg_2eproto__INCLUDED
