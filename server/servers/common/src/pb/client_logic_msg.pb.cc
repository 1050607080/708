// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_logic_msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client_logic_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace net {

namespace {

const ::google::protobuf::Descriptor* msg_heart_test_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_heart_test_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_login_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_login_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_login_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_login_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_notify_leave_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_notify_leave_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_enter_game_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_enter_game_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_player_data_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_player_data_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_update_acc_value_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_update_acc_value_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_update_base_value_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_update_base_value_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_send_base_value_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_send_base_value_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_update_land_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_update_land_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_update_game_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_update_game_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_svrs_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_svrs_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_svrs_info_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_svrs_info_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_enter_gamesvr_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_enter_gamesvr_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_enter_gamesvr_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_enter_gamesvr_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_control_player_back_lobby_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_control_player_back_lobby_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_login_safebox_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_login_safebox_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_login_safebox_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_login_safebox_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_change_safebox_pwd_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_change_safebox_pwd_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_change_safebox_pwd_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_change_safebox_pwd_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_take_safebox_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_take_safebox_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_take_safebox_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_take_safebox_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_give_safebox_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_give_safebox_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_give_safebox_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_give_safebox_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_php_broadcast_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_php_broadcast_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_system_broadcast_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_system_broadcast_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_send_all_mission_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_send_all_mission_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_send_mission_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_send_mission_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_get_mission_prize_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_get_mission_prize_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_get_mission_prize_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_get_mission_prize_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_get_login_reward_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_get_login_reward_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_get_login_reward_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_get_login_reward_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_get_bankrupt_help_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_get_bankrupt_help_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_get_bankrupt_help_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_get_bankrupt_help_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_exchange_score_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_exchange_score_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_exchange_score_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_exchange_score_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_speak_broadcast_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_speak_broadcast_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_speak_broadcast_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_speak_broadcast_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_get_history_speak_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_get_history_speak_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_send_history_speak_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_send_history_speak_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_speak_oper_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_speak_oper_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_get_server_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_get_server_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* server_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  server_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_send_server_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_send_server_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_rooms_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_rooms_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_rooms_info_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_rooms_info_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_back_lobby_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_back_lobby_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_back_lobby_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_back_lobby_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_goto_gamesvr_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_goto_gamesvr_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_goto_gamesvr_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_goto_gamesvr_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_enter_room_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_enter_room_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_enter_novice_welfare_room_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_enter_novice_welfare_room_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_enter_room_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_enter_room_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_notify_leave_room_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_notify_leave_room_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_table_list_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_table_list_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_table_list_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_table_list_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_create_table_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_create_table_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_create_table_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_create_table_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_renew_table_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_renew_table_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_renew_table_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_renew_table_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_leave_table_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_leave_table_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_leave_table_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_leave_table_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_enter_table_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_enter_table_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_enter_table_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_enter_table_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_table_info_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_table_info_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_seat_info_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_seat_info_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_table_ready_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_table_ready_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_table_ready_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_table_ready_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_table_chat_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_table_chat_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_table_chat_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_table_chat_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_table_set_auto_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_table_set_auto_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_table_set_auto_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_table_set_auto_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_fast_join_room_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_fast_join_room_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_fast_join_by_room_id_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_fast_join_by_room_id_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_fast_join_room_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_fast_join_room_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_fast_join_table_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_fast_join_table_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_fast_join_table_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_fast_join_table_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_master_join_table_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_master_join_table_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_master_join_table_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_master_join_table_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_query_table_list_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_query_table_list_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_query_table_list_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_query_table_list_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_notify_player_join_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_notify_player_join_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_looker_list_info_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_looker_list_info_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_sitdown_standup_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_sitdown_standup_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_sitdown_standup_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_sitdown_standup_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_items_user_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_items_user_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_items_user_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_items_user_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_ingame_update_score_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_ingame_update_score_reflection_ = NULL;
const ::google::protobuf::Descriptor* vip_recharge_wechatinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  vip_recharge_wechatinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_notify_vip_recharge_show_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_notify_vip_recharge_show_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_notify_vip_recharge_show_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_notify_vip_recharge_show_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_notify_unionpayrecharge_show_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_notify_unionpayrecharge_show_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_notify_unionpayrecharge_show_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_notify_unionpayrecharge_show_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_notify_wechatpayrecharge_show_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_notify_wechatpayrecharge_show_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_notify_wechatpayrecharge_show_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_notify_wechatpayrecharge_show_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_notify_alipayrecharge_show_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_notify_alipayrecharge_show_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_notify_alipayrecharge_show_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_notify_alipayrecharge_show_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_notify_otherpayrecharge_show_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_notify_otherpayrecharge_show_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_notify_otherpayrecharge_show_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_notify_otherpayrecharge_show_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_notify_qqpayrecharge_show_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_notify_qqpayrecharge_show_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_notify_qqpayrecharge_show_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_notify_qqpayrecharge_show_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_notify_wechatscanpayrecharge_show_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_notify_wechatscanpayrecharge_show_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_notify_wechatscanpayrecharge_show_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_notify_wechatscanpayrecharge_show_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_notify_jdpayrecharge_show_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_notify_jdpayrecharge_show_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_notify_jdpayrecharge_show_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_notify_jdpayrecharge_show_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_notify_applepayrecharge_show_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_notify_applepayrecharge_show_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_notify_applepayrecharge_show_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_notify_applepayrecharge_show_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_notify_large_ali_payrecharge_show_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_notify_large_ali_payrecharge_show_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_notify_large_ali_payrecharge_show_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_notify_large_ali_payrecharge_show_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* exclusive_alipay_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  exclusive_alipay_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_notify_exclusive_alipay_recharge_show_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_notify_exclusive_alipay_recharge_show_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_notify_exclusive_alipay_recharge_show_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_notify_exclusive_alipay_recharge_show_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_notify_fixed_alipay_recharge_show_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_notify_fixed_alipay_recharge_show_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_notify_fixed_alipay_recharge_show_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_notify_fixed_alipay_recharge_show_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_notify_fixed_wechat_recharge_show_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_notify_fixed_wechat_recharge_show_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_notify_fixed_wechat_recharge_show_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_notify_fixed_wechat_recharge_show_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_notify_fixed_unionpay_recharge_show_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_notify_fixed_unionpay_recharge_show_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_notify_fixed_unionpay_recharge_show_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_notify_fixed_unionpay_recharge_show_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_notify_exclusive_flash_recharge_show_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_notify_exclusive_flash_recharge_show_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_notify_exclusive_flash_recharge_show_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_notify_exclusive_flash_recharge_show_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* bairen_jetton_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  bairen_jetton_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_continuous_pressure_jetton_info_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_continuous_pressure_jetton_info_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_player_continuous_pressure_jetton_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_player_continuous_pressure_jetton_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_player_continuous_pressure_jetton_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_player_continuous_pressure_jetton_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_game_play_log_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_game_play_log_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_game_play_log_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_game_play_log_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_game_play_log_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_game_play_log_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_chat_info_forward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_chat_info_forward_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_brc_control_user_enter_table_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_brc_control_user_enter_table_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_brc_control_user_enter_table_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_brc_control_user_enter_table_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_brc_control_user_leave_table_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_brc_control_user_leave_table_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_brc_control_user_leave_table_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_brc_control_user_leave_table_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_brc_control_force_leave_banker_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_brc_control_force_leave_banker_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_brc_control_force_leave_banker_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_brc_control_force_leave_banker_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_brc_control_area_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_brc_control_area_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_brc_control_area_info_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_brc_control_area_info_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_brc_control_total_robot_bet_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_brc_control_total_robot_bet_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_brc_control_total_player_bet_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_brc_control_total_player_bet_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* brc_control_player_bet_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  brc_control_player_bet_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_brc_control_single_player_bet_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_brc_control_single_player_bet_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_brc_control_all_player_bet_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_brc_control_all_player_bet_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* brc_control_player_coin_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  brc_control_player_coin_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_brc_control_apple_banker_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_brc_control_apple_banker_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_brc_control_game_end_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_brc_control_game_end_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_brc_control_game_status_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_brc_control_game_status_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_brc_control_flush_area_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_brc_control_flush_area_info_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_5flogic_5fmsg_2eproto() {
  protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client_logic_msg.proto");
  GOOGLE_CHECK(file != NULL);
  msg_heart_test_descriptor_ = file->message_type(0);
  static const int msg_heart_test_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_heart_test, svr_time_),
  };
  msg_heart_test_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_heart_test_descriptor_,
      msg_heart_test::default_instance_,
      msg_heart_test_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_heart_test, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_heart_test, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_heart_test));
  msg_login_req_descriptor_ = file->message_type(1);
  static const int msg_login_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_login_req, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_login_req, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_login_req, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_login_req, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_login_req, check_code_),
  };
  msg_login_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_login_req_descriptor_,
      msg_login_req::default_instance_,
      msg_login_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_login_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_login_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_login_req));
  msg_login_rep_descriptor_ = file->message_type(2);
  static const int msg_login_rep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_login_rep, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_login_rep, server_time_),
  };
  msg_login_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_login_rep_descriptor_,
      msg_login_rep::default_instance_,
      msg_login_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_login_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_login_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_login_rep));
  msg_notify_leave_rep_descriptor_ = file->message_type(3);
  static const int msg_notify_leave_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_leave_rep, result_),
  };
  msg_notify_leave_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_notify_leave_rep_descriptor_,
      msg_notify_leave_rep::default_instance_,
      msg_notify_leave_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_leave_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_leave_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_notify_leave_rep));
  msg_enter_game_rep_descriptor_ = file->message_type(4);
  static const int msg_enter_game_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_game_rep, result_),
  };
  msg_enter_game_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_enter_game_rep_descriptor_,
      msg_enter_game_rep::default_instance_,
      msg_enter_game_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_game_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_game_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_enter_game_rep));
  msg_player_data_rep_descriptor_ = file->message_type(5);
  static const int msg_player_data_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_data_rep, base_data_),
  };
  msg_player_data_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_player_data_rep_descriptor_,
      msg_player_data_rep::default_instance_,
      msg_player_data_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_data_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_data_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_player_data_rep));
  msg_update_acc_value_descriptor_ = file->message_type(6);
  static const int msg_update_acc_value_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_acc_value, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_acc_value, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_acc_value, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_acc_value, ingot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_acc_value, cvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_acc_value, safe_coin_),
  };
  msg_update_acc_value_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_update_acc_value_descriptor_,
      msg_update_acc_value::default_instance_,
      msg_update_acc_value_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_acc_value, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_acc_value, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_update_acc_value));
  msg_update_base_value_descriptor_ = file->message_type(7);
  static const int msg_update_base_value_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_base_value, safeboxstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_base_value, clogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_base_value, weeklogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_base_value, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_base_value, bankrupt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_base_value, day_game_count_),
  };
  msg_update_base_value_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_update_base_value_descriptor_,
      msg_update_base_value::default_instance_,
      msg_update_base_value_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_base_value, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_base_value, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_update_base_value));
  msg_send_base_value_descriptor_ = file->message_type(8);
  static const int msg_send_base_value_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_send_base_value, clogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_send_base_value, clogin_reward_),
  };
  msg_send_base_value_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_send_base_value_descriptor_,
      msg_send_base_value::default_instance_,
      msg_send_base_value_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_send_base_value, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_send_base_value, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_send_base_value));
  msg_update_land_info_descriptor_ = file->message_type(9);
  static const int msg_update_land_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_land_info, land_data_),
  };
  msg_update_land_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_update_land_info_descriptor_,
      msg_update_land_info::default_instance_,
      msg_update_land_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_land_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_land_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_update_land_info));
  msg_update_game_info_descriptor_ = file->message_type(10);
  static const int msg_update_game_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_game_info, data_),
  };
  msg_update_game_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_update_game_info_descriptor_,
      msg_update_game_info::default_instance_,
      msg_update_game_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_game_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_update_game_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_update_game_info));
  msg_svrs_info_req_descriptor_ = file->message_type(11);
  static const int msg_svrs_info_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_svrs_info_req, game_type_),
  };
  msg_svrs_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_svrs_info_req_descriptor_,
      msg_svrs_info_req::default_instance_,
      msg_svrs_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_svrs_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_svrs_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_svrs_info_req));
  msg_svrs_info_rep_descriptor_ = file->message_type(12);
  static const int msg_svrs_info_rep_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_svrs_info_rep, svrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_svrs_info_rep, cur_svrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_svrs_info_rep, num_),
  };
  msg_svrs_info_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_svrs_info_rep_descriptor_,
      msg_svrs_info_rep::default_instance_,
      msg_svrs_info_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_svrs_info_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_svrs_info_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_svrs_info_rep));
  msg_enter_gamesvr_req_descriptor_ = file->message_type(13);
  static const int msg_enter_gamesvr_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_gamesvr_req, svrid_),
  };
  msg_enter_gamesvr_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_enter_gamesvr_req_descriptor_,
      msg_enter_gamesvr_req::default_instance_,
      msg_enter_gamesvr_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_gamesvr_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_gamesvr_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_enter_gamesvr_req));
  msg_enter_gamesvr_rep_descriptor_ = file->message_type(14);
  static const int msg_enter_gamesvr_rep_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_gamesvr_rep, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_gamesvr_rep, svrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_gamesvr_rep, ctrl_flag_),
  };
  msg_enter_gamesvr_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_enter_gamesvr_rep_descriptor_,
      msg_enter_gamesvr_rep::default_instance_,
      msg_enter_gamesvr_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_gamesvr_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_gamesvr_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_enter_gamesvr_rep));
  msg_control_player_back_lobby_descriptor_ = file->message_type(15);
  static const int msg_control_player_back_lobby_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_control_player_back_lobby, uid_),
  };
  msg_control_player_back_lobby_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_control_player_back_lobby_descriptor_,
      msg_control_player_back_lobby::default_instance_,
      msg_control_player_back_lobby_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_control_player_back_lobby, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_control_player_back_lobby, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_control_player_back_lobby));
  msg_login_safebox_req_descriptor_ = file->message_type(16);
  static const int msg_login_safebox_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_login_safebox_req, passwd_),
  };
  msg_login_safebox_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_login_safebox_req_descriptor_,
      msg_login_safebox_req::default_instance_,
      msg_login_safebox_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_login_safebox_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_login_safebox_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_login_safebox_req));
  msg_login_safebox_rep_descriptor_ = file->message_type(17);
  static const int msg_login_safebox_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_login_safebox_rep, result_),
  };
  msg_login_safebox_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_login_safebox_rep_descriptor_,
      msg_login_safebox_rep::default_instance_,
      msg_login_safebox_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_login_safebox_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_login_safebox_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_login_safebox_rep));
  msg_change_safebox_pwd_req_descriptor_ = file->message_type(18);
  static const int msg_change_safebox_pwd_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_change_safebox_pwd_req, old_pwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_change_safebox_pwd_req, new_pwd_),
  };
  msg_change_safebox_pwd_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_change_safebox_pwd_req_descriptor_,
      msg_change_safebox_pwd_req::default_instance_,
      msg_change_safebox_pwd_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_change_safebox_pwd_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_change_safebox_pwd_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_change_safebox_pwd_req));
  msg_change_safebox_pwd_rep_descriptor_ = file->message_type(19);
  static const int msg_change_safebox_pwd_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_change_safebox_pwd_rep, result_),
  };
  msg_change_safebox_pwd_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_change_safebox_pwd_rep_descriptor_,
      msg_change_safebox_pwd_rep::default_instance_,
      msg_change_safebox_pwd_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_change_safebox_pwd_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_change_safebox_pwd_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_change_safebox_pwd_rep));
  msg_take_safebox_req_descriptor_ = file->message_type(20);
  static const int msg_take_safebox_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_take_safebox_req, take_coin_),
  };
  msg_take_safebox_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_take_safebox_req_descriptor_,
      msg_take_safebox_req::default_instance_,
      msg_take_safebox_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_take_safebox_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_take_safebox_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_take_safebox_req));
  msg_take_safebox_rep_descriptor_ = file->message_type(21);
  static const int msg_take_safebox_rep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_take_safebox_rep, take_coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_take_safebox_rep, result_),
  };
  msg_take_safebox_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_take_safebox_rep_descriptor_,
      msg_take_safebox_rep::default_instance_,
      msg_take_safebox_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_take_safebox_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_take_safebox_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_take_safebox_rep));
  msg_give_safebox_req_descriptor_ = file->message_type(22);
  static const int msg_give_safebox_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_give_safebox_req, give_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_give_safebox_req, give_coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_give_safebox_req, own_uid_),
  };
  msg_give_safebox_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_give_safebox_req_descriptor_,
      msg_give_safebox_req::default_instance_,
      msg_give_safebox_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_give_safebox_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_give_safebox_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_give_safebox_req));
  msg_give_safebox_rep_descriptor_ = file->message_type(23);
  static const int msg_give_safebox_rep_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_give_safebox_rep, give_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_give_safebox_rep, give_coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_give_safebox_rep, result_),
  };
  msg_give_safebox_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_give_safebox_rep_descriptor_,
      msg_give_safebox_rep::default_instance_,
      msg_give_safebox_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_give_safebox_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_give_safebox_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_give_safebox_rep));
  msg_php_broadcast_rep_descriptor_ = file->message_type(24);
  static const int msg_php_broadcast_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_php_broadcast_rep, msg_),
  };
  msg_php_broadcast_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_php_broadcast_rep_descriptor_,
      msg_php_broadcast_rep::default_instance_,
      msg_php_broadcast_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_php_broadcast_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_php_broadcast_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_php_broadcast_rep));
  msg_system_broadcast_rep_descriptor_ = file->message_type(25);
  static const int msg_system_broadcast_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_system_broadcast_rep, msg_),
  };
  msg_system_broadcast_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_system_broadcast_rep_descriptor_,
      msg_system_broadcast_rep::default_instance_,
      msg_system_broadcast_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_system_broadcast_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_system_broadcast_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_system_broadcast_rep));
  msg_send_all_mission_rep_descriptor_ = file->message_type(26);
  static const int msg_send_all_mission_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_send_all_mission_rep, missions_),
  };
  msg_send_all_mission_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_send_all_mission_rep_descriptor_,
      msg_send_all_mission_rep::default_instance_,
      msg_send_all_mission_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_send_all_mission_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_send_all_mission_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_send_all_mission_rep));
  msg_send_mission_rep_descriptor_ = file->message_type(27);
  static const int msg_send_mission_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_send_mission_rep, mission_),
  };
  msg_send_mission_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_send_mission_rep_descriptor_,
      msg_send_mission_rep::default_instance_,
      msg_send_mission_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_send_mission_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_send_mission_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_send_mission_rep));
  msg_get_mission_prize_req_descriptor_ = file->message_type(28);
  static const int msg_get_mission_prize_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_get_mission_prize_req, msid_),
  };
  msg_get_mission_prize_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_get_mission_prize_req_descriptor_,
      msg_get_mission_prize_req::default_instance_,
      msg_get_mission_prize_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_get_mission_prize_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_get_mission_prize_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_get_mission_prize_req));
  msg_get_mission_prize_rep_descriptor_ = file->message_type(29);
  static const int msg_get_mission_prize_rep_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_get_mission_prize_rep, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_get_mission_prize_rep, mission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_get_mission_prize_rep, baseinfo_),
  };
  msg_get_mission_prize_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_get_mission_prize_rep_descriptor_,
      msg_get_mission_prize_rep::default_instance_,
      msg_get_mission_prize_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_get_mission_prize_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_get_mission_prize_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_get_mission_prize_rep));
  msg_get_login_reward_req_descriptor_ = file->message_type(30);
  static const int msg_get_login_reward_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_get_login_reward_req, reward_flag_),
  };
  msg_get_login_reward_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_get_login_reward_req_descriptor_,
      msg_get_login_reward_req::default_instance_,
      msg_get_login_reward_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_get_login_reward_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_get_login_reward_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_get_login_reward_req));
  msg_get_login_reward_rep_descriptor_ = file->message_type(31);
  static const int msg_get_login_reward_rep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_get_login_reward_rep, reward_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_get_login_reward_rep, result_),
  };
  msg_get_login_reward_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_get_login_reward_rep_descriptor_,
      msg_get_login_reward_rep::default_instance_,
      msg_get_login_reward_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_get_login_reward_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_get_login_reward_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_get_login_reward_rep));
  msg_get_bankrupt_help_req_descriptor_ = file->message_type(32);
  static const int msg_get_bankrupt_help_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_get_bankrupt_help_req, help_count_),
  };
  msg_get_bankrupt_help_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_get_bankrupt_help_req_descriptor_,
      msg_get_bankrupt_help_req::default_instance_,
      msg_get_bankrupt_help_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_get_bankrupt_help_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_get_bankrupt_help_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_get_bankrupt_help_req));
  msg_get_bankrupt_help_rep_descriptor_ = file->message_type(33);
  static const int msg_get_bankrupt_help_rep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_get_bankrupt_help_rep, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_get_bankrupt_help_rep, bankrupt_count_),
  };
  msg_get_bankrupt_help_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_get_bankrupt_help_rep_descriptor_,
      msg_get_bankrupt_help_rep::default_instance_,
      msg_get_bankrupt_help_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_get_bankrupt_help_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_get_bankrupt_help_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_get_bankrupt_help_rep));
  msg_exchange_score_req_descriptor_ = file->message_type(34);
  static const int msg_exchange_score_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_exchange_score_req, exchange_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_exchange_score_req, exchange_id_),
  };
  msg_exchange_score_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_exchange_score_req_descriptor_,
      msg_exchange_score_req::default_instance_,
      msg_exchange_score_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_exchange_score_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_exchange_score_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_exchange_score_req));
  msg_exchange_score_rep_descriptor_ = file->message_type(35);
  static const int msg_exchange_score_rep_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_exchange_score_rep, exchange_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_exchange_score_rep, exchange_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_exchange_score_rep, result_),
  };
  msg_exchange_score_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_exchange_score_rep_descriptor_,
      msg_exchange_score_rep::default_instance_,
      msg_exchange_score_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_exchange_score_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_exchange_score_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_exchange_score_rep));
  msg_speak_broadcast_req_descriptor_ = file->message_type(36);
  static const int msg_speak_broadcast_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_speak_broadcast_req, msg_),
  };
  msg_speak_broadcast_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_speak_broadcast_req_descriptor_,
      msg_speak_broadcast_req::default_instance_,
      msg_speak_broadcast_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_speak_broadcast_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_speak_broadcast_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_speak_broadcast_req));
  msg_speak_broadcast_rep_descriptor_ = file->message_type(37);
  static const int msg_speak_broadcast_rep_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_speak_broadcast_rep, send_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_speak_broadcast_rep, send_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_speak_broadcast_rep, msg_),
  };
  msg_speak_broadcast_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_speak_broadcast_rep_descriptor_,
      msg_speak_broadcast_rep::default_instance_,
      msg_speak_broadcast_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_speak_broadcast_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_speak_broadcast_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_speak_broadcast_rep));
  msg_get_history_speak_descriptor_ = file->message_type(38);
  static const int msg_get_history_speak_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_get_history_speak, get_time_),
  };
  msg_get_history_speak_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_get_history_speak_descriptor_,
      msg_get_history_speak::default_instance_,
      msg_get_history_speak_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_get_history_speak, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_get_history_speak, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_get_history_speak));
  msg_send_history_speak_descriptor_ = file->message_type(39);
  static const int msg_send_history_speak_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_send_history_speak, msgs_),
  };
  msg_send_history_speak_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_send_history_speak_descriptor_,
      msg_send_history_speak::default_instance_,
      msg_send_history_speak_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_send_history_speak, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_send_history_speak, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_send_history_speak));
  msg_speak_oper_rep_descriptor_ = file->message_type(40);
  static const int msg_speak_oper_rep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_speak_oper_rep, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_speak_oper_rep, cdtime_),
  };
  msg_speak_oper_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_speak_oper_rep_descriptor_,
      msg_speak_oper_rep::default_instance_,
      msg_speak_oper_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_speak_oper_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_speak_oper_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_speak_oper_rep));
  msg_get_server_info_descriptor_ = file->message_type(41);
  static const int msg_get_server_info_offsets_[1] = {
  };
  msg_get_server_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_get_server_info_descriptor_,
      msg_get_server_info::default_instance_,
      msg_get_server_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_get_server_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_get_server_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_get_server_info));
  server_info_descriptor_ = file->message_type(42);
  static const int server_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server_info, svrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server_info, player_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server_info, robot_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server_info, game_type_),
  };
  server_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      server_info_descriptor_,
      server_info::default_instance_,
      server_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(server_info));
  msg_send_server_info_descriptor_ = file->message_type(43);
  static const int msg_send_server_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_send_server_info, servers_),
  };
  msg_send_server_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_send_server_info_descriptor_,
      msg_send_server_info::default_instance_,
      msg_send_server_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_send_server_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_send_server_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_send_server_info));
  msg_rooms_info_req_descriptor_ = file->message_type(44);
  static const int msg_rooms_info_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_rooms_info_req, game_type_),
  };
  msg_rooms_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_rooms_info_req_descriptor_,
      msg_rooms_info_req::default_instance_,
      msg_rooms_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_rooms_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_rooms_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_rooms_info_req));
  msg_rooms_info_rep_descriptor_ = file->message_type(45);
  static const int msg_rooms_info_rep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_rooms_info_rep, rooms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_rooms_info_rep, cur_roomid_),
  };
  msg_rooms_info_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_rooms_info_rep_descriptor_,
      msg_rooms_info_rep::default_instance_,
      msg_rooms_info_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_rooms_info_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_rooms_info_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_rooms_info_rep));
  msg_back_lobby_req_descriptor_ = file->message_type(46);
  static const int msg_back_lobby_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_back_lobby_req, uid_),
  };
  msg_back_lobby_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_back_lobby_req_descriptor_,
      msg_back_lobby_req::default_instance_,
      msg_back_lobby_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_back_lobby_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_back_lobby_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_back_lobby_req));
  msg_back_lobby_rep_descriptor_ = file->message_type(47);
  static const int msg_back_lobby_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_back_lobby_rep, result_),
  };
  msg_back_lobby_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_back_lobby_rep_descriptor_,
      msg_back_lobby_rep::default_instance_,
      msg_back_lobby_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_back_lobby_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_back_lobby_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_back_lobby_rep));
  msg_goto_gamesvr_req_descriptor_ = file->message_type(48);
  static const int msg_goto_gamesvr_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_goto_gamesvr_req, svrid_),
  };
  msg_goto_gamesvr_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_goto_gamesvr_req_descriptor_,
      msg_goto_gamesvr_req::default_instance_,
      msg_goto_gamesvr_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_goto_gamesvr_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_goto_gamesvr_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_goto_gamesvr_req));
  msg_goto_gamesvr_rep_descriptor_ = file->message_type(49);
  static const int msg_goto_gamesvr_rep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_goto_gamesvr_rep, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_goto_gamesvr_rep, svrid_),
  };
  msg_goto_gamesvr_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_goto_gamesvr_rep_descriptor_,
      msg_goto_gamesvr_rep::default_instance_,
      msg_goto_gamesvr_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_goto_gamesvr_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_goto_gamesvr_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_goto_gamesvr_rep));
  msg_enter_room_req_descriptor_ = file->message_type(50);
  static const int msg_enter_room_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_room_req, room_id_),
  };
  msg_enter_room_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_enter_room_req_descriptor_,
      msg_enter_room_req::default_instance_,
      msg_enter_room_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_room_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_room_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_enter_room_req));
  msg_enter_novice_welfare_room_req_descriptor_ = file->message_type(51);
  static const int msg_enter_novice_welfare_room_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_novice_welfare_room_req, maxjettonrate_),
  };
  msg_enter_novice_welfare_room_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_enter_novice_welfare_room_req_descriptor_,
      msg_enter_novice_welfare_room_req::default_instance_,
      msg_enter_novice_welfare_room_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_novice_welfare_room_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_novice_welfare_room_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_enter_novice_welfare_room_req));
  msg_enter_room_rep_descriptor_ = file->message_type(52);
  static const int msg_enter_room_rep_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_room_rep, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_room_rep, room_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_room_rep, cur_table_),
  };
  msg_enter_room_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_enter_room_rep_descriptor_,
      msg_enter_room_rep::default_instance_,
      msg_enter_room_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_room_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_room_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_enter_room_rep));
  msg_notify_leave_room_rep_descriptor_ = file->message_type(53);
  static const int msg_notify_leave_room_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_leave_room_rep, leave_type_),
  };
  msg_notify_leave_room_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_notify_leave_room_rep_descriptor_,
      msg_notify_leave_room_rep::default_instance_,
      msg_notify_leave_room_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_leave_room_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_leave_room_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_notify_leave_room_rep));
  msg_table_list_req_descriptor_ = file->message_type(54);
  static const int msg_table_list_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_table_list_req, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_table_list_req, seach_type_),
  };
  msg_table_list_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_table_list_req_descriptor_,
      msg_table_list_req::default_instance_,
      msg_table_list_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_table_list_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_table_list_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_table_list_req));
  msg_table_list_rep_descriptor_ = file->message_type(55);
  static const int msg_table_list_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_table_list_rep, tables_),
  };
  msg_table_list_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_table_list_rep_descriptor_,
      msg_table_list_rep::default_instance_,
      msg_table_list_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_table_list_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_table_list_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_table_list_rep));
  msg_create_table_req_descriptor_ = file->message_type(56);
  static const int msg_create_table_req_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_create_table_req, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_create_table_req, passwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_create_table_req, deal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_create_table_req, base_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_create_table_req, is_show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_create_table_req, fee_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_create_table_req, fee_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_create_table_req, open_days_),
  };
  msg_create_table_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_create_table_req_descriptor_,
      msg_create_table_req::default_instance_,
      msg_create_table_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_create_table_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_create_table_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_create_table_req));
  msg_create_table_rep_descriptor_ = file->message_type(57);
  static const int msg_create_table_rep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_create_table_rep, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_create_table_rep, table_id_),
  };
  msg_create_table_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_create_table_rep_descriptor_,
      msg_create_table_rep::default_instance_,
      msg_create_table_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_create_table_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_create_table_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_create_table_rep));
  msg_renew_table_req_descriptor_ = file->message_type(58);
  static const int msg_renew_table_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_renew_table_req, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_renew_table_req, renew_days_),
  };
  msg_renew_table_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_renew_table_req_descriptor_,
      msg_renew_table_req::default_instance_,
      msg_renew_table_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_renew_table_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_renew_table_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_renew_table_req));
  msg_renew_table_rep_descriptor_ = file->message_type(59);
  static const int msg_renew_table_rep_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_renew_table_rep, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_renew_table_rep, renew_days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_renew_table_rep, result_),
  };
  msg_renew_table_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_renew_table_rep_descriptor_,
      msg_renew_table_rep::default_instance_,
      msg_renew_table_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_renew_table_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_renew_table_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_renew_table_rep));
  msg_leave_table_req_descriptor_ = file->message_type(60);
  static const int msg_leave_table_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_leave_table_req, table_id_),
  };
  msg_leave_table_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_leave_table_req_descriptor_,
      msg_leave_table_req::default_instance_,
      msg_leave_table_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_leave_table_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_leave_table_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_leave_table_req));
  msg_leave_table_rep_descriptor_ = file->message_type(61);
  static const int msg_leave_table_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_leave_table_rep, result_),
  };
  msg_leave_table_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_leave_table_rep_descriptor_,
      msg_leave_table_rep::default_instance_,
      msg_leave_table_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_leave_table_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_leave_table_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_leave_table_rep));
  msg_enter_table_req_descriptor_ = file->message_type(62);
  static const int msg_enter_table_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_table_req, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_table_req, passwd_),
  };
  msg_enter_table_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_enter_table_req_descriptor_,
      msg_enter_table_req::default_instance_,
      msg_enter_table_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_table_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_table_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_enter_table_req));
  msg_enter_table_rep_descriptor_ = file->message_type(63);
  static const int msg_enter_table_rep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_table_rep, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_table_rep, result_),
  };
  msg_enter_table_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_enter_table_rep_descriptor_,
      msg_enter_table_rep::default_instance_,
      msg_enter_table_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_table_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_table_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_enter_table_rep));
  msg_table_info_rep_descriptor_ = file->message_type(64);
  static const int msg_table_info_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_table_info_rep, table_info_),
  };
  msg_table_info_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_table_info_rep_descriptor_,
      msg_table_info_rep::default_instance_,
      msg_table_info_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_table_info_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_table_info_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_table_info_rep));
  msg_seat_info_rep_descriptor_ = file->message_type(65);
  static const int msg_seat_info_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_seat_info_rep, players_),
  };
  msg_seat_info_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_seat_info_rep_descriptor_,
      msg_seat_info_rep::default_instance_,
      msg_seat_info_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_seat_info_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_seat_info_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_seat_info_rep));
  msg_table_ready_req_descriptor_ = file->message_type(66);
  static const int msg_table_ready_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_table_ready_req, ready_),
  };
  msg_table_ready_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_table_ready_req_descriptor_,
      msg_table_ready_req::default_instance_,
      msg_table_ready_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_table_ready_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_table_ready_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_table_ready_req));
  msg_table_ready_rep_descriptor_ = file->message_type(67);
  static const int msg_table_ready_rep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_table_ready_rep, readys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_table_ready_rep, auto_states_),
  };
  msg_table_ready_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_table_ready_rep_descriptor_,
      msg_table_ready_rep::default_instance_,
      msg_table_ready_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_table_ready_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_table_ready_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_table_ready_rep));
  msg_table_chat_req_descriptor_ = file->message_type(68);
  static const int msg_table_chat_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_table_chat_req, chat_msg_),
  };
  msg_table_chat_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_table_chat_req_descriptor_,
      msg_table_chat_req::default_instance_,
      msg_table_chat_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_table_chat_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_table_chat_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_table_chat_req));
  msg_table_chat_rep_descriptor_ = file->message_type(69);
  static const int msg_table_chat_rep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_table_chat_rep, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_table_chat_rep, chat_msg_),
  };
  msg_table_chat_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_table_chat_rep_descriptor_,
      msg_table_chat_rep::default_instance_,
      msg_table_chat_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_table_chat_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_table_chat_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_table_chat_rep));
  msg_table_set_auto_req_descriptor_ = file->message_type(70);
  static const int msg_table_set_auto_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_table_set_auto_req, auto_type_),
  };
  msg_table_set_auto_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_table_set_auto_req_descriptor_,
      msg_table_set_auto_req::default_instance_,
      msg_table_set_auto_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_table_set_auto_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_table_set_auto_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_table_set_auto_req));
  msg_table_set_auto_rep_descriptor_ = file->message_type(71);
  static const int msg_table_set_auto_rep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_table_set_auto_rep, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_table_set_auto_rep, auto_state_),
  };
  msg_table_set_auto_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_table_set_auto_rep_descriptor_,
      msg_table_set_auto_rep::default_instance_,
      msg_table_set_auto_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_table_set_auto_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_table_set_auto_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_table_set_auto_rep));
  msg_fast_join_room_req_descriptor_ = file->message_type(72);
  static const int msg_fast_join_room_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fast_join_room_req, deal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fast_join_room_req, consume_),
  };
  msg_fast_join_room_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_fast_join_room_req_descriptor_,
      msg_fast_join_room_req::default_instance_,
      msg_fast_join_room_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fast_join_room_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fast_join_room_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_fast_join_room_req));
  msg_fast_join_by_room_id_req_descriptor_ = file->message_type(73);
  static const int msg_fast_join_by_room_id_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fast_join_by_room_id_req, roomid_),
  };
  msg_fast_join_by_room_id_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_fast_join_by_room_id_req_descriptor_,
      msg_fast_join_by_room_id_req::default_instance_,
      msg_fast_join_by_room_id_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fast_join_by_room_id_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fast_join_by_room_id_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_fast_join_by_room_id_req));
  msg_fast_join_room_rep_descriptor_ = file->message_type(74);
  static const int msg_fast_join_room_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fast_join_room_rep, result_),
  };
  msg_fast_join_room_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_fast_join_room_rep_descriptor_,
      msg_fast_join_room_rep::default_instance_,
      msg_fast_join_room_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fast_join_room_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fast_join_room_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_fast_join_room_rep));
  msg_fast_join_table_req_descriptor_ = file->message_type(75);
  static const int msg_fast_join_table_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fast_join_table_req, table_id_),
  };
  msg_fast_join_table_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_fast_join_table_req_descriptor_,
      msg_fast_join_table_req::default_instance_,
      msg_fast_join_table_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fast_join_table_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fast_join_table_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_fast_join_table_req));
  msg_fast_join_table_rep_descriptor_ = file->message_type(76);
  static const int msg_fast_join_table_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fast_join_table_rep, result_),
  };
  msg_fast_join_table_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_fast_join_table_rep_descriptor_,
      msg_fast_join_table_rep::default_instance_,
      msg_fast_join_table_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fast_join_table_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fast_join_table_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_fast_join_table_rep));
  msg_master_join_table_req_descriptor_ = file->message_type(77);
  static const int msg_master_join_table_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_master_join_table_req, table_id_),
  };
  msg_master_join_table_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_master_join_table_req_descriptor_,
      msg_master_join_table_req::default_instance_,
      msg_master_join_table_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_master_join_table_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_master_join_table_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_master_join_table_req));
  msg_master_join_table_rep_descriptor_ = file->message_type(78);
  static const int msg_master_join_table_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_master_join_table_rep, result_),
  };
  msg_master_join_table_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_master_join_table_rep_descriptor_,
      msg_master_join_table_rep::default_instance_,
      msg_master_join_table_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_master_join_table_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_master_join_table_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_master_join_table_rep));
  msg_query_table_list_req_descriptor_ = file->message_type(79);
  static const int msg_query_table_list_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_query_table_list_req, startid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_query_table_list_req, endid_),
  };
  msg_query_table_list_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_query_table_list_req_descriptor_,
      msg_query_table_list_req::default_instance_,
      msg_query_table_list_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_query_table_list_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_query_table_list_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_query_table_list_req));
  msg_query_table_list_rep_descriptor_ = file->message_type(80);
  static const int msg_query_table_list_rep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_query_table_list_rep, tables_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_query_table_list_rep, table_num_),
  };
  msg_query_table_list_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_query_table_list_rep_descriptor_,
      msg_query_table_list_rep::default_instance_,
      msg_query_table_list_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_query_table_list_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_query_table_list_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_query_table_list_rep));
  msg_notify_player_join_rep_descriptor_ = file->message_type(81);
  static const int msg_notify_player_join_rep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_player_join_rep, join_leave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_player_join_rep, player_),
  };
  msg_notify_player_join_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_notify_player_join_rep_descriptor_,
      msg_notify_player_join_rep::default_instance_,
      msg_notify_player_join_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_player_join_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_player_join_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_notify_player_join_rep));
  msg_looker_list_info_rep_descriptor_ = file->message_type(82);
  static const int msg_looker_list_info_rep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_looker_list_info_rep, lookers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_looker_list_info_rep, is_reset_),
  };
  msg_looker_list_info_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_looker_list_info_rep_descriptor_,
      msg_looker_list_info_rep::default_instance_,
      msg_looker_list_info_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_looker_list_info_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_looker_list_info_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_looker_list_info_rep));
  msg_sitdown_standup_req_descriptor_ = file->message_type(83);
  static const int msg_sitdown_standup_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sitdown_standup_req, oper_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sitdown_standup_req, chair_id_),
  };
  msg_sitdown_standup_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_sitdown_standup_req_descriptor_,
      msg_sitdown_standup_req::default_instance_,
      msg_sitdown_standup_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sitdown_standup_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sitdown_standup_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_sitdown_standup_req));
  msg_sitdown_standup_rep_descriptor_ = file->message_type(84);
  static const int msg_sitdown_standup_rep_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sitdown_standup_rep, oper_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sitdown_standup_rep, chair_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sitdown_standup_rep, result_),
  };
  msg_sitdown_standup_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_sitdown_standup_rep_descriptor_,
      msg_sitdown_standup_rep::default_instance_,
      msg_sitdown_standup_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sitdown_standup_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sitdown_standup_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_sitdown_standup_rep));
  msg_items_user_req_descriptor_ = file->message_type(85);
  static const int msg_items_user_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_items_user_req, meuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_items_user_req, bechair_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_items_user_req, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_items_user_req, item_count_),
  };
  msg_items_user_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_items_user_req_descriptor_,
      msg_items_user_req::default_instance_,
      msg_items_user_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_items_user_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_items_user_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_items_user_req));
  msg_items_user_rep_descriptor_ = file->message_type(86);
  static const int msg_items_user_rep_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_items_user_rep, mechair_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_items_user_rep, bechair_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_items_user_rep, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_items_user_rep, item_count_),
  };
  msg_items_user_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_items_user_rep_descriptor_,
      msg_items_user_rep::default_instance_,
      msg_items_user_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_items_user_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_items_user_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_items_user_rep));
  msg_ingame_update_score_descriptor_ = file->message_type(87);
  static const int msg_ingame_update_score_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_ingame_update_score, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_ingame_update_score, game_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_ingame_update_score, diff_score_),
  };
  msg_ingame_update_score_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_ingame_update_score_descriptor_,
      msg_ingame_update_score::default_instance_,
      msg_ingame_update_score_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_ingame_update_score, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_ingame_update_score, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_ingame_update_score));
  vip_recharge_wechatinfo_descriptor_ = file->message_type(88);
  static const int vip_recharge_wechatinfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_recharge_wechatinfo, sortid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_recharge_wechatinfo, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_recharge_wechatinfo, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_recharge_wechatinfo, low_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_recharge_wechatinfo, pay_type_),
  };
  vip_recharge_wechatinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      vip_recharge_wechatinfo_descriptor_,
      vip_recharge_wechatinfo::default_instance_,
      vip_recharge_wechatinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_recharge_wechatinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vip_recharge_wechatinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(vip_recharge_wechatinfo));
  msg_notify_vip_recharge_show_req_descriptor_ = file->message_type(89);
  static const int msg_notify_vip_recharge_show_req_offsets_[1] = {
  };
  msg_notify_vip_recharge_show_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_notify_vip_recharge_show_req_descriptor_,
      msg_notify_vip_recharge_show_req::default_instance_,
      msg_notify_vip_recharge_show_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_vip_recharge_show_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_vip_recharge_show_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_notify_vip_recharge_show_req));
  msg_notify_vip_recharge_show_descriptor_ = file->message_type(90);
  static const int msg_notify_vip_recharge_show_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_vip_recharge_show, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_vip_recharge_show, info_),
  };
  msg_notify_vip_recharge_show_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_notify_vip_recharge_show_descriptor_,
      msg_notify_vip_recharge_show::default_instance_,
      msg_notify_vip_recharge_show_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_vip_recharge_show, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_vip_recharge_show, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_notify_vip_recharge_show));
  msg_notify_unionpayrecharge_show_req_descriptor_ = file->message_type(91);
  static const int msg_notify_unionpayrecharge_show_req_offsets_[1] = {
  };
  msg_notify_unionpayrecharge_show_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_notify_unionpayrecharge_show_req_descriptor_,
      msg_notify_unionpayrecharge_show_req::default_instance_,
      msg_notify_unionpayrecharge_show_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_unionpayrecharge_show_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_unionpayrecharge_show_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_notify_unionpayrecharge_show_req));
  msg_notify_unionpayrecharge_show_rep_descriptor_ = file->message_type(92);
  static const int msg_notify_unionpayrecharge_show_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_unionpayrecharge_show_rep, status_),
  };
  msg_notify_unionpayrecharge_show_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_notify_unionpayrecharge_show_rep_descriptor_,
      msg_notify_unionpayrecharge_show_rep::default_instance_,
      msg_notify_unionpayrecharge_show_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_unionpayrecharge_show_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_unionpayrecharge_show_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_notify_unionpayrecharge_show_rep));
  msg_notify_wechatpayrecharge_show_req_descriptor_ = file->message_type(93);
  static const int msg_notify_wechatpayrecharge_show_req_offsets_[1] = {
  };
  msg_notify_wechatpayrecharge_show_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_notify_wechatpayrecharge_show_req_descriptor_,
      msg_notify_wechatpayrecharge_show_req::default_instance_,
      msg_notify_wechatpayrecharge_show_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_wechatpayrecharge_show_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_wechatpayrecharge_show_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_notify_wechatpayrecharge_show_req));
  msg_notify_wechatpayrecharge_show_rep_descriptor_ = file->message_type(94);
  static const int msg_notify_wechatpayrecharge_show_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_wechatpayrecharge_show_rep, status_),
  };
  msg_notify_wechatpayrecharge_show_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_notify_wechatpayrecharge_show_rep_descriptor_,
      msg_notify_wechatpayrecharge_show_rep::default_instance_,
      msg_notify_wechatpayrecharge_show_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_wechatpayrecharge_show_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_wechatpayrecharge_show_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_notify_wechatpayrecharge_show_rep));
  msg_notify_alipayrecharge_show_req_descriptor_ = file->message_type(95);
  static const int msg_notify_alipayrecharge_show_req_offsets_[1] = {
  };
  msg_notify_alipayrecharge_show_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_notify_alipayrecharge_show_req_descriptor_,
      msg_notify_alipayrecharge_show_req::default_instance_,
      msg_notify_alipayrecharge_show_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_alipayrecharge_show_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_alipayrecharge_show_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_notify_alipayrecharge_show_req));
  msg_notify_alipayrecharge_show_rep_descriptor_ = file->message_type(96);
  static const int msg_notify_alipayrecharge_show_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_alipayrecharge_show_rep, status_),
  };
  msg_notify_alipayrecharge_show_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_notify_alipayrecharge_show_rep_descriptor_,
      msg_notify_alipayrecharge_show_rep::default_instance_,
      msg_notify_alipayrecharge_show_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_alipayrecharge_show_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_alipayrecharge_show_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_notify_alipayrecharge_show_rep));
  msg_notify_otherpayrecharge_show_req_descriptor_ = file->message_type(97);
  static const int msg_notify_otherpayrecharge_show_req_offsets_[1] = {
  };
  msg_notify_otherpayrecharge_show_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_notify_otherpayrecharge_show_req_descriptor_,
      msg_notify_otherpayrecharge_show_req::default_instance_,
      msg_notify_otherpayrecharge_show_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_otherpayrecharge_show_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_otherpayrecharge_show_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_notify_otherpayrecharge_show_req));
  msg_notify_otherpayrecharge_show_rep_descriptor_ = file->message_type(98);
  static const int msg_notify_otherpayrecharge_show_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_otherpayrecharge_show_rep, status_),
  };
  msg_notify_otherpayrecharge_show_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_notify_otherpayrecharge_show_rep_descriptor_,
      msg_notify_otherpayrecharge_show_rep::default_instance_,
      msg_notify_otherpayrecharge_show_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_otherpayrecharge_show_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_otherpayrecharge_show_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_notify_otherpayrecharge_show_rep));
  msg_notify_qqpayrecharge_show_req_descriptor_ = file->message_type(99);
  static const int msg_notify_qqpayrecharge_show_req_offsets_[1] = {
  };
  msg_notify_qqpayrecharge_show_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_notify_qqpayrecharge_show_req_descriptor_,
      msg_notify_qqpayrecharge_show_req::default_instance_,
      msg_notify_qqpayrecharge_show_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_qqpayrecharge_show_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_qqpayrecharge_show_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_notify_qqpayrecharge_show_req));
  msg_notify_qqpayrecharge_show_rep_descriptor_ = file->message_type(100);
  static const int msg_notify_qqpayrecharge_show_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_qqpayrecharge_show_rep, status_),
  };
  msg_notify_qqpayrecharge_show_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_notify_qqpayrecharge_show_rep_descriptor_,
      msg_notify_qqpayrecharge_show_rep::default_instance_,
      msg_notify_qqpayrecharge_show_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_qqpayrecharge_show_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_qqpayrecharge_show_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_notify_qqpayrecharge_show_rep));
  msg_notify_wechatscanpayrecharge_show_req_descriptor_ = file->message_type(101);
  static const int msg_notify_wechatscanpayrecharge_show_req_offsets_[1] = {
  };
  msg_notify_wechatscanpayrecharge_show_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_notify_wechatscanpayrecharge_show_req_descriptor_,
      msg_notify_wechatscanpayrecharge_show_req::default_instance_,
      msg_notify_wechatscanpayrecharge_show_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_wechatscanpayrecharge_show_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_wechatscanpayrecharge_show_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_notify_wechatscanpayrecharge_show_req));
  msg_notify_wechatscanpayrecharge_show_rep_descriptor_ = file->message_type(102);
  static const int msg_notify_wechatscanpayrecharge_show_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_wechatscanpayrecharge_show_rep, status_),
  };
  msg_notify_wechatscanpayrecharge_show_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_notify_wechatscanpayrecharge_show_rep_descriptor_,
      msg_notify_wechatscanpayrecharge_show_rep::default_instance_,
      msg_notify_wechatscanpayrecharge_show_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_wechatscanpayrecharge_show_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_wechatscanpayrecharge_show_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_notify_wechatscanpayrecharge_show_rep));
  msg_notify_jdpayrecharge_show_req_descriptor_ = file->message_type(103);
  static const int msg_notify_jdpayrecharge_show_req_offsets_[1] = {
  };
  msg_notify_jdpayrecharge_show_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_notify_jdpayrecharge_show_req_descriptor_,
      msg_notify_jdpayrecharge_show_req::default_instance_,
      msg_notify_jdpayrecharge_show_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_jdpayrecharge_show_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_jdpayrecharge_show_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_notify_jdpayrecharge_show_req));
  msg_notify_jdpayrecharge_show_rep_descriptor_ = file->message_type(104);
  static const int msg_notify_jdpayrecharge_show_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_jdpayrecharge_show_rep, status_),
  };
  msg_notify_jdpayrecharge_show_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_notify_jdpayrecharge_show_rep_descriptor_,
      msg_notify_jdpayrecharge_show_rep::default_instance_,
      msg_notify_jdpayrecharge_show_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_jdpayrecharge_show_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_jdpayrecharge_show_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_notify_jdpayrecharge_show_rep));
  msg_notify_applepayrecharge_show_req_descriptor_ = file->message_type(105);
  static const int msg_notify_applepayrecharge_show_req_offsets_[1] = {
  };
  msg_notify_applepayrecharge_show_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_notify_applepayrecharge_show_req_descriptor_,
      msg_notify_applepayrecharge_show_req::default_instance_,
      msg_notify_applepayrecharge_show_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_applepayrecharge_show_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_applepayrecharge_show_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_notify_applepayrecharge_show_req));
  msg_notify_applepayrecharge_show_rep_descriptor_ = file->message_type(106);
  static const int msg_notify_applepayrecharge_show_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_applepayrecharge_show_rep, status_),
  };
  msg_notify_applepayrecharge_show_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_notify_applepayrecharge_show_rep_descriptor_,
      msg_notify_applepayrecharge_show_rep::default_instance_,
      msg_notify_applepayrecharge_show_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_applepayrecharge_show_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_applepayrecharge_show_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_notify_applepayrecharge_show_rep));
  msg_notify_large_ali_payrecharge_show_req_descriptor_ = file->message_type(107);
  static const int msg_notify_large_ali_payrecharge_show_req_offsets_[1] = {
  };
  msg_notify_large_ali_payrecharge_show_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_notify_large_ali_payrecharge_show_req_descriptor_,
      msg_notify_large_ali_payrecharge_show_req::default_instance_,
      msg_notify_large_ali_payrecharge_show_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_large_ali_payrecharge_show_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_large_ali_payrecharge_show_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_notify_large_ali_payrecharge_show_req));
  msg_notify_large_ali_payrecharge_show_rep_descriptor_ = file->message_type(108);
  static const int msg_notify_large_ali_payrecharge_show_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_large_ali_payrecharge_show_rep, status_),
  };
  msg_notify_large_ali_payrecharge_show_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_notify_large_ali_payrecharge_show_rep_descriptor_,
      msg_notify_large_ali_payrecharge_show_rep::default_instance_,
      msg_notify_large_ali_payrecharge_show_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_large_ali_payrecharge_show_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_large_ali_payrecharge_show_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_notify_large_ali_payrecharge_show_rep));
  exclusive_alipay_info_descriptor_ = file->message_type(109);
  static const int exclusive_alipay_info_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exclusive_alipay_info, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exclusive_alipay_info, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exclusive_alipay_info, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exclusive_alipay_info, min_pay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exclusive_alipay_info, max_pay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exclusive_alipay_info, lower_float_),
  };
  exclusive_alipay_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      exclusive_alipay_info_descriptor_,
      exclusive_alipay_info::default_instance_,
      exclusive_alipay_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exclusive_alipay_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exclusive_alipay_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(exclusive_alipay_info));
  msg_notify_exclusive_alipay_recharge_show_descriptor_ = file->message_type(110);
  static const int msg_notify_exclusive_alipay_recharge_show_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_exclusive_alipay_recharge_show, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_exclusive_alipay_recharge_show, info_),
  };
  msg_notify_exclusive_alipay_recharge_show_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_notify_exclusive_alipay_recharge_show_descriptor_,
      msg_notify_exclusive_alipay_recharge_show::default_instance_,
      msg_notify_exclusive_alipay_recharge_show_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_exclusive_alipay_recharge_show, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_exclusive_alipay_recharge_show, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_notify_exclusive_alipay_recharge_show));
  msg_notify_exclusive_alipay_recharge_show_req_descriptor_ = file->message_type(111);
  static const int msg_notify_exclusive_alipay_recharge_show_req_offsets_[1] = {
  };
  msg_notify_exclusive_alipay_recharge_show_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_notify_exclusive_alipay_recharge_show_req_descriptor_,
      msg_notify_exclusive_alipay_recharge_show_req::default_instance_,
      msg_notify_exclusive_alipay_recharge_show_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_exclusive_alipay_recharge_show_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_exclusive_alipay_recharge_show_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_notify_exclusive_alipay_recharge_show_req));
  msg_notify_fixed_alipay_recharge_show_req_descriptor_ = file->message_type(112);
  static const int msg_notify_fixed_alipay_recharge_show_req_offsets_[1] = {
  };
  msg_notify_fixed_alipay_recharge_show_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_notify_fixed_alipay_recharge_show_req_descriptor_,
      msg_notify_fixed_alipay_recharge_show_req::default_instance_,
      msg_notify_fixed_alipay_recharge_show_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_fixed_alipay_recharge_show_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_fixed_alipay_recharge_show_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_notify_fixed_alipay_recharge_show_req));
  msg_notify_fixed_alipay_recharge_show_rep_descriptor_ = file->message_type(113);
  static const int msg_notify_fixed_alipay_recharge_show_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_fixed_alipay_recharge_show_rep, status_),
  };
  msg_notify_fixed_alipay_recharge_show_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_notify_fixed_alipay_recharge_show_rep_descriptor_,
      msg_notify_fixed_alipay_recharge_show_rep::default_instance_,
      msg_notify_fixed_alipay_recharge_show_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_fixed_alipay_recharge_show_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_fixed_alipay_recharge_show_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_notify_fixed_alipay_recharge_show_rep));
  msg_notify_fixed_wechat_recharge_show_req_descriptor_ = file->message_type(114);
  static const int msg_notify_fixed_wechat_recharge_show_req_offsets_[1] = {
  };
  msg_notify_fixed_wechat_recharge_show_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_notify_fixed_wechat_recharge_show_req_descriptor_,
      msg_notify_fixed_wechat_recharge_show_req::default_instance_,
      msg_notify_fixed_wechat_recharge_show_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_fixed_wechat_recharge_show_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_fixed_wechat_recharge_show_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_notify_fixed_wechat_recharge_show_req));
  msg_notify_fixed_wechat_recharge_show_rep_descriptor_ = file->message_type(115);
  static const int msg_notify_fixed_wechat_recharge_show_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_fixed_wechat_recharge_show_rep, status_),
  };
  msg_notify_fixed_wechat_recharge_show_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_notify_fixed_wechat_recharge_show_rep_descriptor_,
      msg_notify_fixed_wechat_recharge_show_rep::default_instance_,
      msg_notify_fixed_wechat_recharge_show_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_fixed_wechat_recharge_show_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_fixed_wechat_recharge_show_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_notify_fixed_wechat_recharge_show_rep));
  msg_notify_fixed_unionpay_recharge_show_req_descriptor_ = file->message_type(116);
  static const int msg_notify_fixed_unionpay_recharge_show_req_offsets_[1] = {
  };
  msg_notify_fixed_unionpay_recharge_show_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_notify_fixed_unionpay_recharge_show_req_descriptor_,
      msg_notify_fixed_unionpay_recharge_show_req::default_instance_,
      msg_notify_fixed_unionpay_recharge_show_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_fixed_unionpay_recharge_show_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_fixed_unionpay_recharge_show_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_notify_fixed_unionpay_recharge_show_req));
  msg_notify_fixed_unionpay_recharge_show_rep_descriptor_ = file->message_type(117);
  static const int msg_notify_fixed_unionpay_recharge_show_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_fixed_unionpay_recharge_show_rep, status_),
  };
  msg_notify_fixed_unionpay_recharge_show_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_notify_fixed_unionpay_recharge_show_rep_descriptor_,
      msg_notify_fixed_unionpay_recharge_show_rep::default_instance_,
      msg_notify_fixed_unionpay_recharge_show_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_fixed_unionpay_recharge_show_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_fixed_unionpay_recharge_show_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_notify_fixed_unionpay_recharge_show_rep));
  msg_notify_exclusive_flash_recharge_show_req_descriptor_ = file->message_type(118);
  static const int msg_notify_exclusive_flash_recharge_show_req_offsets_[1] = {
  };
  msg_notify_exclusive_flash_recharge_show_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_notify_exclusive_flash_recharge_show_req_descriptor_,
      msg_notify_exclusive_flash_recharge_show_req::default_instance_,
      msg_notify_exclusive_flash_recharge_show_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_exclusive_flash_recharge_show_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_exclusive_flash_recharge_show_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_notify_exclusive_flash_recharge_show_req));
  msg_notify_exclusive_flash_recharge_show_rep_descriptor_ = file->message_type(119);
  static const int msg_notify_exclusive_flash_recharge_show_rep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_exclusive_flash_recharge_show_rep, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_exclusive_flash_recharge_show_rep, info_),
  };
  msg_notify_exclusive_flash_recharge_show_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_notify_exclusive_flash_recharge_show_rep_descriptor_,
      msg_notify_exclusive_flash_recharge_show_rep::default_instance_,
      msg_notify_exclusive_flash_recharge_show_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_exclusive_flash_recharge_show_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_notify_exclusive_flash_recharge_show_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_notify_exclusive_flash_recharge_show_rep));
  bairen_jetton_info_descriptor_ = file->message_type(120);
  static const int bairen_jetton_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bairen_jetton_info, area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bairen_jetton_info, score_),
  };
  bairen_jetton_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      bairen_jetton_info_descriptor_,
      bairen_jetton_info::default_instance_,
      bairen_jetton_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bairen_jetton_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bairen_jetton_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(bairen_jetton_info));
  msg_continuous_pressure_jetton_info_rep_descriptor_ = file->message_type(121);
  static const int msg_continuous_pressure_jetton_info_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_continuous_pressure_jetton_info_rep, info_),
  };
  msg_continuous_pressure_jetton_info_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_continuous_pressure_jetton_info_rep_descriptor_,
      msg_continuous_pressure_jetton_info_rep::default_instance_,
      msg_continuous_pressure_jetton_info_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_continuous_pressure_jetton_info_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_continuous_pressure_jetton_info_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_continuous_pressure_jetton_info_rep));
  msg_player_continuous_pressure_jetton_req_descriptor_ = file->message_type(122);
  static const int msg_player_continuous_pressure_jetton_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_continuous_pressure_jetton_req, info_),
  };
  msg_player_continuous_pressure_jetton_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_player_continuous_pressure_jetton_req_descriptor_,
      msg_player_continuous_pressure_jetton_req::default_instance_,
      msg_player_continuous_pressure_jetton_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_continuous_pressure_jetton_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_continuous_pressure_jetton_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_player_continuous_pressure_jetton_req));
  msg_player_continuous_pressure_jetton_rep_descriptor_ = file->message_type(123);
  static const int msg_player_continuous_pressure_jetton_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_continuous_pressure_jetton_rep, result_),
  };
  msg_player_continuous_pressure_jetton_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_player_continuous_pressure_jetton_rep_descriptor_,
      msg_player_continuous_pressure_jetton_rep::default_instance_,
      msg_player_continuous_pressure_jetton_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_continuous_pressure_jetton_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_continuous_pressure_jetton_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_player_continuous_pressure_jetton_rep));
  msg_game_play_log_descriptor_ = file->message_type(124);
  static const int msg_game_play_log_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_game_play_log, bainiu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_game_play_log, baccarat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_game_play_log, paijiu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_game_play_log, dice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_game_play_log, war_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_game_play_log, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_game_play_log, twoeight_),
  };
  msg_game_play_log_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_game_play_log_descriptor_,
      msg_game_play_log::default_instance_,
      msg_game_play_log_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_game_play_log, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_game_play_log, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_game_play_log));
  msg_game_play_log_req_descriptor_ = file->message_type(125);
  static const int msg_game_play_log_req_offsets_[1] = {
  };
  msg_game_play_log_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_game_play_log_req_descriptor_,
      msg_game_play_log_req::default_instance_,
      msg_game_play_log_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_game_play_log_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_game_play_log_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_game_play_log_req));
  msg_game_play_log_rep_descriptor_ = file->message_type(126);
  static const int msg_game_play_log_rep_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_game_play_log_rep, gametype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_game_play_log_rep, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_game_play_log_rep, gamestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_game_play_log_rep, remain_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_game_play_log_rep, play_log_),
  };
  msg_game_play_log_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_game_play_log_rep_descriptor_,
      msg_game_play_log_rep::default_instance_,
      msg_game_play_log_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_game_play_log_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_game_play_log_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_game_play_log_rep));
  msg_chat_info_forward_descriptor_ = file->message_type(127);
  static const int msg_chat_info_forward_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_chat_info_forward, fromid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_chat_info_forward, toid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_chat_info_forward, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_chat_info_forward, messagstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_chat_info_forward, fromname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_chat_info_forward, toname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_chat_info_forward, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_chat_info_forward, mtype_),
  };
  msg_chat_info_forward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_chat_info_forward_descriptor_,
      msg_chat_info_forward::default_instance_,
      msg_chat_info_forward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_chat_info_forward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_chat_info_forward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_chat_info_forward));
  msg_brc_control_user_enter_table_req_descriptor_ = file->message_type(128);
  static const int msg_brc_control_user_enter_table_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_user_enter_table_req, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_user_enter_table_req, table_id_),
  };
  msg_brc_control_user_enter_table_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_brc_control_user_enter_table_req_descriptor_,
      msg_brc_control_user_enter_table_req::default_instance_,
      msg_brc_control_user_enter_table_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_user_enter_table_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_user_enter_table_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_brc_control_user_enter_table_req));
  msg_brc_control_user_enter_table_rep_descriptor_ = file->message_type(129);
  static const int msg_brc_control_user_enter_table_rep_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_user_enter_table_rep, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_user_enter_table_rep, area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_user_enter_table_rep, times_),
  };
  msg_brc_control_user_enter_table_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_brc_control_user_enter_table_rep_descriptor_,
      msg_brc_control_user_enter_table_rep::default_instance_,
      msg_brc_control_user_enter_table_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_user_enter_table_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_user_enter_table_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_brc_control_user_enter_table_rep));
  msg_brc_control_user_leave_table_req_descriptor_ = file->message_type(130);
  static const int msg_brc_control_user_leave_table_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_user_leave_table_req, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_user_leave_table_req, table_id_),
  };
  msg_brc_control_user_leave_table_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_brc_control_user_leave_table_req_descriptor_,
      msg_brc_control_user_leave_table_req::default_instance_,
      msg_brc_control_user_leave_table_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_user_leave_table_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_user_leave_table_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_brc_control_user_leave_table_req));
  msg_brc_control_user_leave_table_rep_descriptor_ = file->message_type(131);
  static const int msg_brc_control_user_leave_table_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_user_leave_table_rep, result_),
  };
  msg_brc_control_user_leave_table_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_brc_control_user_leave_table_rep_descriptor_,
      msg_brc_control_user_leave_table_rep::default_instance_,
      msg_brc_control_user_leave_table_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_user_leave_table_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_user_leave_table_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_brc_control_user_leave_table_rep));
  msg_brc_control_force_leave_banker_req_descriptor_ = file->message_type(132);
  static const int msg_brc_control_force_leave_banker_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_force_leave_banker_req, uid_),
  };
  msg_brc_control_force_leave_banker_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_brc_control_force_leave_banker_req_descriptor_,
      msg_brc_control_force_leave_banker_req::default_instance_,
      msg_brc_control_force_leave_banker_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_force_leave_banker_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_force_leave_banker_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_brc_control_force_leave_banker_req));
  msg_brc_control_force_leave_banker_rep_descriptor_ = file->message_type(133);
  static const int msg_brc_control_force_leave_banker_rep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_force_leave_banker_rep, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_force_leave_banker_rep, result_),
  };
  msg_brc_control_force_leave_banker_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_brc_control_force_leave_banker_rep_descriptor_,
      msg_brc_control_force_leave_banker_rep::default_instance_,
      msg_brc_control_force_leave_banker_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_force_leave_banker_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_force_leave_banker_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_brc_control_force_leave_banker_rep));
  msg_brc_control_area_info_req_descriptor_ = file->message_type(134);
  static const int msg_brc_control_area_info_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_area_info_req, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_area_info_req, area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_area_info_req, times_),
  };
  msg_brc_control_area_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_brc_control_area_info_req_descriptor_,
      msg_brc_control_area_info_req::default_instance_,
      msg_brc_control_area_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_area_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_area_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_brc_control_area_info_req));
  msg_brc_control_area_info_rep_descriptor_ = file->message_type(135);
  static const int msg_brc_control_area_info_rep_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_area_info_rep, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_area_info_rep, area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_area_info_rep, times_),
  };
  msg_brc_control_area_info_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_brc_control_area_info_rep_descriptor_,
      msg_brc_control_area_info_rep::default_instance_,
      msg_brc_control_area_info_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_area_info_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_area_info_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_brc_control_area_info_rep));
  msg_brc_control_total_robot_bet_info_descriptor_ = file->message_type(136);
  static const int msg_brc_control_total_robot_bet_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_total_robot_bet_info, area_info_),
  };
  msg_brc_control_total_robot_bet_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_brc_control_total_robot_bet_info_descriptor_,
      msg_brc_control_total_robot_bet_info::default_instance_,
      msg_brc_control_total_robot_bet_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_total_robot_bet_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_total_robot_bet_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_brc_control_total_robot_bet_info));
  msg_brc_control_total_player_bet_info_descriptor_ = file->message_type(137);
  static const int msg_brc_control_total_player_bet_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_total_player_bet_info, area_info_),
  };
  msg_brc_control_total_player_bet_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_brc_control_total_player_bet_info_descriptor_,
      msg_brc_control_total_player_bet_info::default_instance_,
      msg_brc_control_total_player_bet_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_total_player_bet_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_total_player_bet_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_brc_control_total_player_bet_info));
  brc_control_player_bet_info_descriptor_ = file->message_type(138);
  static const int brc_control_player_bet_info_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(brc_control_player_bet_info, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(brc_control_player_bet_info, area_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(brc_control_player_bet_info, total_bet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(brc_control_player_bet_info, curr_day_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(brc_control_player_bet_info, win_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(brc_control_player_bet_info, lose_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(brc_control_player_bet_info, total_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(brc_control_player_bet_info, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(brc_control_player_bet_info, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(brc_control_player_bet_info, ismaster_),
  };
  brc_control_player_bet_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      brc_control_player_bet_info_descriptor_,
      brc_control_player_bet_info::default_instance_,
      brc_control_player_bet_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(brc_control_player_bet_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(brc_control_player_bet_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(brc_control_player_bet_info));
  msg_brc_control_single_player_bet_info_descriptor_ = file->message_type(139);
  static const int msg_brc_control_single_player_bet_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_single_player_bet_info, player_bet_info_),
  };
  msg_brc_control_single_player_bet_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_brc_control_single_player_bet_info_descriptor_,
      msg_brc_control_single_player_bet_info::default_instance_,
      msg_brc_control_single_player_bet_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_single_player_bet_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_single_player_bet_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_brc_control_single_player_bet_info));
  msg_brc_control_all_player_bet_info_descriptor_ = file->message_type(140);
  static const int msg_brc_control_all_player_bet_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_all_player_bet_info, player_bet_list_),
  };
  msg_brc_control_all_player_bet_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_brc_control_all_player_bet_info_descriptor_,
      msg_brc_control_all_player_bet_info::default_instance_,
      msg_brc_control_all_player_bet_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_all_player_bet_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_all_player_bet_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_brc_control_all_player_bet_info));
  brc_control_player_coin_info_descriptor_ = file->message_type(141);
  static const int brc_control_player_coin_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(brc_control_player_coin_info, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(brc_control_player_coin_info, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(brc_control_player_coin_info, player_type_),
  };
  brc_control_player_coin_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      brc_control_player_coin_info_descriptor_,
      brc_control_player_coin_info::default_instance_,
      brc_control_player_coin_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(brc_control_player_coin_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(brc_control_player_coin_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(brc_control_player_coin_info));
  msg_brc_control_apple_banker_list_descriptor_ = file->message_type(142);
  static const int msg_brc_control_apple_banker_list_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_apple_banker_list, bank_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_apple_banker_list, user_info_),
  };
  msg_brc_control_apple_banker_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_brc_control_apple_banker_list_descriptor_,
      msg_brc_control_apple_banker_list::default_instance_,
      msg_brc_control_apple_banker_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_apple_banker_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_apple_banker_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_brc_control_apple_banker_list));
  msg_brc_control_game_end_info_descriptor_ = file->message_type(143);
  static const int msg_brc_control_game_end_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_game_end_info, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_game_end_info, area_info_),
  };
  msg_brc_control_game_end_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_brc_control_game_end_info_descriptor_,
      msg_brc_control_game_end_info::default_instance_,
      msg_brc_control_game_end_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_game_end_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_game_end_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_brc_control_game_end_info));
  msg_brc_control_game_status_info_descriptor_ = file->message_type(144);
  static const int msg_brc_control_game_status_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_game_status_info, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_game_status_info, time_),
  };
  msg_brc_control_game_status_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_brc_control_game_status_info_descriptor_,
      msg_brc_control_game_status_info::default_instance_,
      msg_brc_control_game_status_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_game_status_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_game_status_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_brc_control_game_status_info));
  msg_brc_control_flush_area_info_descriptor_ = file->message_type(145);
  static const int msg_brc_control_flush_area_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_flush_area_info, area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_flush_area_info, times_),
  };
  msg_brc_control_flush_area_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_brc_control_flush_area_info_descriptor_,
      msg_brc_control_flush_area_info::default_instance_,
      msg_brc_control_flush_area_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_flush_area_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_brc_control_flush_area_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_brc_control_flush_area_info));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_5flogic_5fmsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_heart_test_descriptor_, &msg_heart_test::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_login_req_descriptor_, &msg_login_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_login_rep_descriptor_, &msg_login_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_notify_leave_rep_descriptor_, &msg_notify_leave_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_enter_game_rep_descriptor_, &msg_enter_game_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_player_data_rep_descriptor_, &msg_player_data_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_update_acc_value_descriptor_, &msg_update_acc_value::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_update_base_value_descriptor_, &msg_update_base_value::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_send_base_value_descriptor_, &msg_send_base_value::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_update_land_info_descriptor_, &msg_update_land_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_update_game_info_descriptor_, &msg_update_game_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_svrs_info_req_descriptor_, &msg_svrs_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_svrs_info_rep_descriptor_, &msg_svrs_info_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_enter_gamesvr_req_descriptor_, &msg_enter_gamesvr_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_enter_gamesvr_rep_descriptor_, &msg_enter_gamesvr_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_control_player_back_lobby_descriptor_, &msg_control_player_back_lobby::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_login_safebox_req_descriptor_, &msg_login_safebox_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_login_safebox_rep_descriptor_, &msg_login_safebox_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_change_safebox_pwd_req_descriptor_, &msg_change_safebox_pwd_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_change_safebox_pwd_rep_descriptor_, &msg_change_safebox_pwd_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_take_safebox_req_descriptor_, &msg_take_safebox_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_take_safebox_rep_descriptor_, &msg_take_safebox_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_give_safebox_req_descriptor_, &msg_give_safebox_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_give_safebox_rep_descriptor_, &msg_give_safebox_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_php_broadcast_rep_descriptor_, &msg_php_broadcast_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_system_broadcast_rep_descriptor_, &msg_system_broadcast_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_send_all_mission_rep_descriptor_, &msg_send_all_mission_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_send_mission_rep_descriptor_, &msg_send_mission_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_get_mission_prize_req_descriptor_, &msg_get_mission_prize_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_get_mission_prize_rep_descriptor_, &msg_get_mission_prize_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_get_login_reward_req_descriptor_, &msg_get_login_reward_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_get_login_reward_rep_descriptor_, &msg_get_login_reward_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_get_bankrupt_help_req_descriptor_, &msg_get_bankrupt_help_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_get_bankrupt_help_rep_descriptor_, &msg_get_bankrupt_help_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_exchange_score_req_descriptor_, &msg_exchange_score_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_exchange_score_rep_descriptor_, &msg_exchange_score_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_speak_broadcast_req_descriptor_, &msg_speak_broadcast_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_speak_broadcast_rep_descriptor_, &msg_speak_broadcast_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_get_history_speak_descriptor_, &msg_get_history_speak::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_send_history_speak_descriptor_, &msg_send_history_speak::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_speak_oper_rep_descriptor_, &msg_speak_oper_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_get_server_info_descriptor_, &msg_get_server_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    server_info_descriptor_, &server_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_send_server_info_descriptor_, &msg_send_server_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_rooms_info_req_descriptor_, &msg_rooms_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_rooms_info_rep_descriptor_, &msg_rooms_info_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_back_lobby_req_descriptor_, &msg_back_lobby_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_back_lobby_rep_descriptor_, &msg_back_lobby_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_goto_gamesvr_req_descriptor_, &msg_goto_gamesvr_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_goto_gamesvr_rep_descriptor_, &msg_goto_gamesvr_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_enter_room_req_descriptor_, &msg_enter_room_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_enter_novice_welfare_room_req_descriptor_, &msg_enter_novice_welfare_room_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_enter_room_rep_descriptor_, &msg_enter_room_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_notify_leave_room_rep_descriptor_, &msg_notify_leave_room_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_table_list_req_descriptor_, &msg_table_list_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_table_list_rep_descriptor_, &msg_table_list_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_create_table_req_descriptor_, &msg_create_table_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_create_table_rep_descriptor_, &msg_create_table_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_renew_table_req_descriptor_, &msg_renew_table_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_renew_table_rep_descriptor_, &msg_renew_table_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_leave_table_req_descriptor_, &msg_leave_table_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_leave_table_rep_descriptor_, &msg_leave_table_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_enter_table_req_descriptor_, &msg_enter_table_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_enter_table_rep_descriptor_, &msg_enter_table_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_table_info_rep_descriptor_, &msg_table_info_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_seat_info_rep_descriptor_, &msg_seat_info_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_table_ready_req_descriptor_, &msg_table_ready_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_table_ready_rep_descriptor_, &msg_table_ready_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_table_chat_req_descriptor_, &msg_table_chat_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_table_chat_rep_descriptor_, &msg_table_chat_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_table_set_auto_req_descriptor_, &msg_table_set_auto_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_table_set_auto_rep_descriptor_, &msg_table_set_auto_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_fast_join_room_req_descriptor_, &msg_fast_join_room_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_fast_join_by_room_id_req_descriptor_, &msg_fast_join_by_room_id_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_fast_join_room_rep_descriptor_, &msg_fast_join_room_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_fast_join_table_req_descriptor_, &msg_fast_join_table_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_fast_join_table_rep_descriptor_, &msg_fast_join_table_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_master_join_table_req_descriptor_, &msg_master_join_table_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_master_join_table_rep_descriptor_, &msg_master_join_table_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_query_table_list_req_descriptor_, &msg_query_table_list_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_query_table_list_rep_descriptor_, &msg_query_table_list_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_notify_player_join_rep_descriptor_, &msg_notify_player_join_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_looker_list_info_rep_descriptor_, &msg_looker_list_info_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_sitdown_standup_req_descriptor_, &msg_sitdown_standup_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_sitdown_standup_rep_descriptor_, &msg_sitdown_standup_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_items_user_req_descriptor_, &msg_items_user_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_items_user_rep_descriptor_, &msg_items_user_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_ingame_update_score_descriptor_, &msg_ingame_update_score::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    vip_recharge_wechatinfo_descriptor_, &vip_recharge_wechatinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_notify_vip_recharge_show_req_descriptor_, &msg_notify_vip_recharge_show_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_notify_vip_recharge_show_descriptor_, &msg_notify_vip_recharge_show::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_notify_unionpayrecharge_show_req_descriptor_, &msg_notify_unionpayrecharge_show_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_notify_unionpayrecharge_show_rep_descriptor_, &msg_notify_unionpayrecharge_show_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_notify_wechatpayrecharge_show_req_descriptor_, &msg_notify_wechatpayrecharge_show_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_notify_wechatpayrecharge_show_rep_descriptor_, &msg_notify_wechatpayrecharge_show_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_notify_alipayrecharge_show_req_descriptor_, &msg_notify_alipayrecharge_show_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_notify_alipayrecharge_show_rep_descriptor_, &msg_notify_alipayrecharge_show_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_notify_otherpayrecharge_show_req_descriptor_, &msg_notify_otherpayrecharge_show_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_notify_otherpayrecharge_show_rep_descriptor_, &msg_notify_otherpayrecharge_show_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_notify_qqpayrecharge_show_req_descriptor_, &msg_notify_qqpayrecharge_show_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_notify_qqpayrecharge_show_rep_descriptor_, &msg_notify_qqpayrecharge_show_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_notify_wechatscanpayrecharge_show_req_descriptor_, &msg_notify_wechatscanpayrecharge_show_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_notify_wechatscanpayrecharge_show_rep_descriptor_, &msg_notify_wechatscanpayrecharge_show_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_notify_jdpayrecharge_show_req_descriptor_, &msg_notify_jdpayrecharge_show_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_notify_jdpayrecharge_show_rep_descriptor_, &msg_notify_jdpayrecharge_show_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_notify_applepayrecharge_show_req_descriptor_, &msg_notify_applepayrecharge_show_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_notify_applepayrecharge_show_rep_descriptor_, &msg_notify_applepayrecharge_show_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_notify_large_ali_payrecharge_show_req_descriptor_, &msg_notify_large_ali_payrecharge_show_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_notify_large_ali_payrecharge_show_rep_descriptor_, &msg_notify_large_ali_payrecharge_show_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    exclusive_alipay_info_descriptor_, &exclusive_alipay_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_notify_exclusive_alipay_recharge_show_descriptor_, &msg_notify_exclusive_alipay_recharge_show::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_notify_exclusive_alipay_recharge_show_req_descriptor_, &msg_notify_exclusive_alipay_recharge_show_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_notify_fixed_alipay_recharge_show_req_descriptor_, &msg_notify_fixed_alipay_recharge_show_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_notify_fixed_alipay_recharge_show_rep_descriptor_, &msg_notify_fixed_alipay_recharge_show_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_notify_fixed_wechat_recharge_show_req_descriptor_, &msg_notify_fixed_wechat_recharge_show_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_notify_fixed_wechat_recharge_show_rep_descriptor_, &msg_notify_fixed_wechat_recharge_show_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_notify_fixed_unionpay_recharge_show_req_descriptor_, &msg_notify_fixed_unionpay_recharge_show_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_notify_fixed_unionpay_recharge_show_rep_descriptor_, &msg_notify_fixed_unionpay_recharge_show_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_notify_exclusive_flash_recharge_show_req_descriptor_, &msg_notify_exclusive_flash_recharge_show_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_notify_exclusive_flash_recharge_show_rep_descriptor_, &msg_notify_exclusive_flash_recharge_show_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    bairen_jetton_info_descriptor_, &bairen_jetton_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_continuous_pressure_jetton_info_rep_descriptor_, &msg_continuous_pressure_jetton_info_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_player_continuous_pressure_jetton_req_descriptor_, &msg_player_continuous_pressure_jetton_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_player_continuous_pressure_jetton_rep_descriptor_, &msg_player_continuous_pressure_jetton_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_game_play_log_descriptor_, &msg_game_play_log::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_game_play_log_req_descriptor_, &msg_game_play_log_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_game_play_log_rep_descriptor_, &msg_game_play_log_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_chat_info_forward_descriptor_, &msg_chat_info_forward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_brc_control_user_enter_table_req_descriptor_, &msg_brc_control_user_enter_table_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_brc_control_user_enter_table_rep_descriptor_, &msg_brc_control_user_enter_table_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_brc_control_user_leave_table_req_descriptor_, &msg_brc_control_user_leave_table_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_brc_control_user_leave_table_rep_descriptor_, &msg_brc_control_user_leave_table_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_brc_control_force_leave_banker_req_descriptor_, &msg_brc_control_force_leave_banker_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_brc_control_force_leave_banker_rep_descriptor_, &msg_brc_control_force_leave_banker_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_brc_control_area_info_req_descriptor_, &msg_brc_control_area_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_brc_control_area_info_rep_descriptor_, &msg_brc_control_area_info_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_brc_control_total_robot_bet_info_descriptor_, &msg_brc_control_total_robot_bet_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_brc_control_total_player_bet_info_descriptor_, &msg_brc_control_total_player_bet_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    brc_control_player_bet_info_descriptor_, &brc_control_player_bet_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_brc_control_single_player_bet_info_descriptor_, &msg_brc_control_single_player_bet_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_brc_control_all_player_bet_info_descriptor_, &msg_brc_control_all_player_bet_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    brc_control_player_coin_info_descriptor_, &brc_control_player_coin_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_brc_control_apple_banker_list_descriptor_, &msg_brc_control_apple_banker_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_brc_control_game_end_info_descriptor_, &msg_brc_control_game_end_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_brc_control_game_status_info_descriptor_, &msg_brc_control_game_status_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_brc_control_flush_area_info_descriptor_, &msg_brc_control_flush_area_info::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_5flogic_5fmsg_2eproto() {
  delete msg_heart_test::default_instance_;
  delete msg_heart_test_reflection_;
  delete msg_login_req::default_instance_;
  delete msg_login_req_reflection_;
  delete msg_login_rep::default_instance_;
  delete msg_login_rep_reflection_;
  delete msg_notify_leave_rep::default_instance_;
  delete msg_notify_leave_rep_reflection_;
  delete msg_enter_game_rep::default_instance_;
  delete msg_enter_game_rep_reflection_;
  delete msg_player_data_rep::default_instance_;
  delete msg_player_data_rep_reflection_;
  delete msg_update_acc_value::default_instance_;
  delete msg_update_acc_value_reflection_;
  delete msg_update_base_value::default_instance_;
  delete msg_update_base_value_reflection_;
  delete msg_send_base_value::default_instance_;
  delete msg_send_base_value_reflection_;
  delete msg_update_land_info::default_instance_;
  delete msg_update_land_info_reflection_;
  delete msg_update_game_info::default_instance_;
  delete msg_update_game_info_reflection_;
  delete msg_svrs_info_req::default_instance_;
  delete msg_svrs_info_req_reflection_;
  delete msg_svrs_info_rep::default_instance_;
  delete msg_svrs_info_rep_reflection_;
  delete msg_enter_gamesvr_req::default_instance_;
  delete msg_enter_gamesvr_req_reflection_;
  delete msg_enter_gamesvr_rep::default_instance_;
  delete msg_enter_gamesvr_rep_reflection_;
  delete msg_control_player_back_lobby::default_instance_;
  delete msg_control_player_back_lobby_reflection_;
  delete msg_login_safebox_req::default_instance_;
  delete msg_login_safebox_req_reflection_;
  delete msg_login_safebox_rep::default_instance_;
  delete msg_login_safebox_rep_reflection_;
  delete msg_change_safebox_pwd_req::default_instance_;
  delete msg_change_safebox_pwd_req_reflection_;
  delete msg_change_safebox_pwd_rep::default_instance_;
  delete msg_change_safebox_pwd_rep_reflection_;
  delete msg_take_safebox_req::default_instance_;
  delete msg_take_safebox_req_reflection_;
  delete msg_take_safebox_rep::default_instance_;
  delete msg_take_safebox_rep_reflection_;
  delete msg_give_safebox_req::default_instance_;
  delete msg_give_safebox_req_reflection_;
  delete msg_give_safebox_rep::default_instance_;
  delete msg_give_safebox_rep_reflection_;
  delete msg_php_broadcast_rep::default_instance_;
  delete msg_php_broadcast_rep_reflection_;
  delete msg_system_broadcast_rep::default_instance_;
  delete msg_system_broadcast_rep_reflection_;
  delete msg_send_all_mission_rep::default_instance_;
  delete msg_send_all_mission_rep_reflection_;
  delete msg_send_mission_rep::default_instance_;
  delete msg_send_mission_rep_reflection_;
  delete msg_get_mission_prize_req::default_instance_;
  delete msg_get_mission_prize_req_reflection_;
  delete msg_get_mission_prize_rep::default_instance_;
  delete msg_get_mission_prize_rep_reflection_;
  delete msg_get_login_reward_req::default_instance_;
  delete msg_get_login_reward_req_reflection_;
  delete msg_get_login_reward_rep::default_instance_;
  delete msg_get_login_reward_rep_reflection_;
  delete msg_get_bankrupt_help_req::default_instance_;
  delete msg_get_bankrupt_help_req_reflection_;
  delete msg_get_bankrupt_help_rep::default_instance_;
  delete msg_get_bankrupt_help_rep_reflection_;
  delete msg_exchange_score_req::default_instance_;
  delete msg_exchange_score_req_reflection_;
  delete msg_exchange_score_rep::default_instance_;
  delete msg_exchange_score_rep_reflection_;
  delete msg_speak_broadcast_req::default_instance_;
  delete msg_speak_broadcast_req_reflection_;
  delete msg_speak_broadcast_rep::default_instance_;
  delete msg_speak_broadcast_rep_reflection_;
  delete msg_get_history_speak::default_instance_;
  delete msg_get_history_speak_reflection_;
  delete msg_send_history_speak::default_instance_;
  delete msg_send_history_speak_reflection_;
  delete msg_speak_oper_rep::default_instance_;
  delete msg_speak_oper_rep_reflection_;
  delete msg_get_server_info::default_instance_;
  delete msg_get_server_info_reflection_;
  delete server_info::default_instance_;
  delete server_info_reflection_;
  delete msg_send_server_info::default_instance_;
  delete msg_send_server_info_reflection_;
  delete msg_rooms_info_req::default_instance_;
  delete msg_rooms_info_req_reflection_;
  delete msg_rooms_info_rep::default_instance_;
  delete msg_rooms_info_rep_reflection_;
  delete msg_back_lobby_req::default_instance_;
  delete msg_back_lobby_req_reflection_;
  delete msg_back_lobby_rep::default_instance_;
  delete msg_back_lobby_rep_reflection_;
  delete msg_goto_gamesvr_req::default_instance_;
  delete msg_goto_gamesvr_req_reflection_;
  delete msg_goto_gamesvr_rep::default_instance_;
  delete msg_goto_gamesvr_rep_reflection_;
  delete msg_enter_room_req::default_instance_;
  delete msg_enter_room_req_reflection_;
  delete msg_enter_novice_welfare_room_req::default_instance_;
  delete msg_enter_novice_welfare_room_req_reflection_;
  delete msg_enter_room_rep::default_instance_;
  delete msg_enter_room_rep_reflection_;
  delete msg_notify_leave_room_rep::default_instance_;
  delete msg_notify_leave_room_rep_reflection_;
  delete msg_table_list_req::default_instance_;
  delete msg_table_list_req_reflection_;
  delete msg_table_list_rep::default_instance_;
  delete msg_table_list_rep_reflection_;
  delete msg_create_table_req::default_instance_;
  delete msg_create_table_req_reflection_;
  delete msg_create_table_rep::default_instance_;
  delete msg_create_table_rep_reflection_;
  delete msg_renew_table_req::default_instance_;
  delete msg_renew_table_req_reflection_;
  delete msg_renew_table_rep::default_instance_;
  delete msg_renew_table_rep_reflection_;
  delete msg_leave_table_req::default_instance_;
  delete msg_leave_table_req_reflection_;
  delete msg_leave_table_rep::default_instance_;
  delete msg_leave_table_rep_reflection_;
  delete msg_enter_table_req::default_instance_;
  delete msg_enter_table_req_reflection_;
  delete msg_enter_table_rep::default_instance_;
  delete msg_enter_table_rep_reflection_;
  delete msg_table_info_rep::default_instance_;
  delete msg_table_info_rep_reflection_;
  delete msg_seat_info_rep::default_instance_;
  delete msg_seat_info_rep_reflection_;
  delete msg_table_ready_req::default_instance_;
  delete msg_table_ready_req_reflection_;
  delete msg_table_ready_rep::default_instance_;
  delete msg_table_ready_rep_reflection_;
  delete msg_table_chat_req::default_instance_;
  delete msg_table_chat_req_reflection_;
  delete msg_table_chat_rep::default_instance_;
  delete msg_table_chat_rep_reflection_;
  delete msg_table_set_auto_req::default_instance_;
  delete msg_table_set_auto_req_reflection_;
  delete msg_table_set_auto_rep::default_instance_;
  delete msg_table_set_auto_rep_reflection_;
  delete msg_fast_join_room_req::default_instance_;
  delete msg_fast_join_room_req_reflection_;
  delete msg_fast_join_by_room_id_req::default_instance_;
  delete msg_fast_join_by_room_id_req_reflection_;
  delete msg_fast_join_room_rep::default_instance_;
  delete msg_fast_join_room_rep_reflection_;
  delete msg_fast_join_table_req::default_instance_;
  delete msg_fast_join_table_req_reflection_;
  delete msg_fast_join_table_rep::default_instance_;
  delete msg_fast_join_table_rep_reflection_;
  delete msg_master_join_table_req::default_instance_;
  delete msg_master_join_table_req_reflection_;
  delete msg_master_join_table_rep::default_instance_;
  delete msg_master_join_table_rep_reflection_;
  delete msg_query_table_list_req::default_instance_;
  delete msg_query_table_list_req_reflection_;
  delete msg_query_table_list_rep::default_instance_;
  delete msg_query_table_list_rep_reflection_;
  delete msg_notify_player_join_rep::default_instance_;
  delete msg_notify_player_join_rep_reflection_;
  delete msg_looker_list_info_rep::default_instance_;
  delete msg_looker_list_info_rep_reflection_;
  delete msg_sitdown_standup_req::default_instance_;
  delete msg_sitdown_standup_req_reflection_;
  delete msg_sitdown_standup_rep::default_instance_;
  delete msg_sitdown_standup_rep_reflection_;
  delete msg_items_user_req::default_instance_;
  delete msg_items_user_req_reflection_;
  delete msg_items_user_rep::default_instance_;
  delete msg_items_user_rep_reflection_;
  delete msg_ingame_update_score::default_instance_;
  delete msg_ingame_update_score_reflection_;
  delete vip_recharge_wechatinfo::default_instance_;
  delete vip_recharge_wechatinfo_reflection_;
  delete msg_notify_vip_recharge_show_req::default_instance_;
  delete msg_notify_vip_recharge_show_req_reflection_;
  delete msg_notify_vip_recharge_show::default_instance_;
  delete msg_notify_vip_recharge_show_reflection_;
  delete msg_notify_unionpayrecharge_show_req::default_instance_;
  delete msg_notify_unionpayrecharge_show_req_reflection_;
  delete msg_notify_unionpayrecharge_show_rep::default_instance_;
  delete msg_notify_unionpayrecharge_show_rep_reflection_;
  delete msg_notify_wechatpayrecharge_show_req::default_instance_;
  delete msg_notify_wechatpayrecharge_show_req_reflection_;
  delete msg_notify_wechatpayrecharge_show_rep::default_instance_;
  delete msg_notify_wechatpayrecharge_show_rep_reflection_;
  delete msg_notify_alipayrecharge_show_req::default_instance_;
  delete msg_notify_alipayrecharge_show_req_reflection_;
  delete msg_notify_alipayrecharge_show_rep::default_instance_;
  delete msg_notify_alipayrecharge_show_rep_reflection_;
  delete msg_notify_otherpayrecharge_show_req::default_instance_;
  delete msg_notify_otherpayrecharge_show_req_reflection_;
  delete msg_notify_otherpayrecharge_show_rep::default_instance_;
  delete msg_notify_otherpayrecharge_show_rep_reflection_;
  delete msg_notify_qqpayrecharge_show_req::default_instance_;
  delete msg_notify_qqpayrecharge_show_req_reflection_;
  delete msg_notify_qqpayrecharge_show_rep::default_instance_;
  delete msg_notify_qqpayrecharge_show_rep_reflection_;
  delete msg_notify_wechatscanpayrecharge_show_req::default_instance_;
  delete msg_notify_wechatscanpayrecharge_show_req_reflection_;
  delete msg_notify_wechatscanpayrecharge_show_rep::default_instance_;
  delete msg_notify_wechatscanpayrecharge_show_rep_reflection_;
  delete msg_notify_jdpayrecharge_show_req::default_instance_;
  delete msg_notify_jdpayrecharge_show_req_reflection_;
  delete msg_notify_jdpayrecharge_show_rep::default_instance_;
  delete msg_notify_jdpayrecharge_show_rep_reflection_;
  delete msg_notify_applepayrecharge_show_req::default_instance_;
  delete msg_notify_applepayrecharge_show_req_reflection_;
  delete msg_notify_applepayrecharge_show_rep::default_instance_;
  delete msg_notify_applepayrecharge_show_rep_reflection_;
  delete msg_notify_large_ali_payrecharge_show_req::default_instance_;
  delete msg_notify_large_ali_payrecharge_show_req_reflection_;
  delete msg_notify_large_ali_payrecharge_show_rep::default_instance_;
  delete msg_notify_large_ali_payrecharge_show_rep_reflection_;
  delete exclusive_alipay_info::default_instance_;
  delete exclusive_alipay_info_reflection_;
  delete msg_notify_exclusive_alipay_recharge_show::default_instance_;
  delete msg_notify_exclusive_alipay_recharge_show_reflection_;
  delete msg_notify_exclusive_alipay_recharge_show_req::default_instance_;
  delete msg_notify_exclusive_alipay_recharge_show_req_reflection_;
  delete msg_notify_fixed_alipay_recharge_show_req::default_instance_;
  delete msg_notify_fixed_alipay_recharge_show_req_reflection_;
  delete msg_notify_fixed_alipay_recharge_show_rep::default_instance_;
  delete msg_notify_fixed_alipay_recharge_show_rep_reflection_;
  delete msg_notify_fixed_wechat_recharge_show_req::default_instance_;
  delete msg_notify_fixed_wechat_recharge_show_req_reflection_;
  delete msg_notify_fixed_wechat_recharge_show_rep::default_instance_;
  delete msg_notify_fixed_wechat_recharge_show_rep_reflection_;
  delete msg_notify_fixed_unionpay_recharge_show_req::default_instance_;
  delete msg_notify_fixed_unionpay_recharge_show_req_reflection_;
  delete msg_notify_fixed_unionpay_recharge_show_rep::default_instance_;
  delete msg_notify_fixed_unionpay_recharge_show_rep_reflection_;
  delete msg_notify_exclusive_flash_recharge_show_req::default_instance_;
  delete msg_notify_exclusive_flash_recharge_show_req_reflection_;
  delete msg_notify_exclusive_flash_recharge_show_rep::default_instance_;
  delete msg_notify_exclusive_flash_recharge_show_rep_reflection_;
  delete bairen_jetton_info::default_instance_;
  delete bairen_jetton_info_reflection_;
  delete msg_continuous_pressure_jetton_info_rep::default_instance_;
  delete msg_continuous_pressure_jetton_info_rep_reflection_;
  delete msg_player_continuous_pressure_jetton_req::default_instance_;
  delete msg_player_continuous_pressure_jetton_req_reflection_;
  delete msg_player_continuous_pressure_jetton_rep::default_instance_;
  delete msg_player_continuous_pressure_jetton_rep_reflection_;
  delete msg_game_play_log::default_instance_;
  delete msg_game_play_log_reflection_;
  delete msg_game_play_log_req::default_instance_;
  delete msg_game_play_log_req_reflection_;
  delete msg_game_play_log_rep::default_instance_;
  delete msg_game_play_log_rep_reflection_;
  delete msg_chat_info_forward::default_instance_;
  delete msg_chat_info_forward_reflection_;
  delete msg_brc_control_user_enter_table_req::default_instance_;
  delete msg_brc_control_user_enter_table_req_reflection_;
  delete msg_brc_control_user_enter_table_rep::default_instance_;
  delete msg_brc_control_user_enter_table_rep_reflection_;
  delete msg_brc_control_user_leave_table_req::default_instance_;
  delete msg_brc_control_user_leave_table_req_reflection_;
  delete msg_brc_control_user_leave_table_rep::default_instance_;
  delete msg_brc_control_user_leave_table_rep_reflection_;
  delete msg_brc_control_force_leave_banker_req::default_instance_;
  delete msg_brc_control_force_leave_banker_req_reflection_;
  delete msg_brc_control_force_leave_banker_rep::default_instance_;
  delete msg_brc_control_force_leave_banker_rep_reflection_;
  delete msg_brc_control_area_info_req::default_instance_;
  delete msg_brc_control_area_info_req_reflection_;
  delete msg_brc_control_area_info_rep::default_instance_;
  delete msg_brc_control_area_info_rep_reflection_;
  delete msg_brc_control_total_robot_bet_info::default_instance_;
  delete msg_brc_control_total_robot_bet_info_reflection_;
  delete msg_brc_control_total_player_bet_info::default_instance_;
  delete msg_brc_control_total_player_bet_info_reflection_;
  delete brc_control_player_bet_info::default_instance_;
  delete brc_control_player_bet_info_reflection_;
  delete msg_brc_control_single_player_bet_info::default_instance_;
  delete msg_brc_control_single_player_bet_info_reflection_;
  delete msg_brc_control_all_player_bet_info::default_instance_;
  delete msg_brc_control_all_player_bet_info_reflection_;
  delete brc_control_player_coin_info::default_instance_;
  delete brc_control_player_coin_info_reflection_;
  delete msg_brc_control_apple_banker_list::default_instance_;
  delete msg_brc_control_apple_banker_list_reflection_;
  delete msg_brc_control_game_end_info::default_instance_;
  delete msg_brc_control_game_end_info_reflection_;
  delete msg_brc_control_game_status_info::default_instance_;
  delete msg_brc_control_game_status_info_reflection_;
  delete msg_brc_control_flush_area_info::default_instance_;
  delete msg_brc_control_flush_area_info_reflection_;
}

void protobuf_AddDesc_client_5flogic_5fmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::net::protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  ::net::protobuf_AddDesc_error_5fcode_2eproto();
  ::net::protobuf_AddDesc_bainiu_5flogic_5fmsg_2eproto();
  ::net::protobuf_AddDesc_baccarat_5flogic_5fmsg_2eproto();
  ::net::protobuf_AddDesc_paijiu_5flogic_5fmsg_2eproto();
  ::net::protobuf_AddDesc_dice_5flogic_5fmsg_2eproto();
  ::net::protobuf_AddDesc_war_5flogic_5fmsg_2eproto();
  ::net::protobuf_AddDesc_fight_5flogic_5fmsg_2eproto();
  ::net::protobuf_AddDesc_twoeight_5flogic_5fmsg_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026client_logic_msg.proto\022\003net\032\025base_msg_"
    "struct.proto\032\020error_code.proto\032\026bainiu_l"
    "ogic_msg.proto\032\030baccarat_logic_msg.proto"
    "\032\026paijiu_logic_msg.proto\032\024dice_logic_msg"
    ".proto\032\023war_logic_msg.proto\032\025fight_logic"
    "_msg.proto\032\030twoeight_logic_msg.proto\"\"\n\016"
    "msg_heart_test\022\020\n\010svr_time\030\001 \001(\r\"]\n\rmsg_"
    "login_req\022\013\n\003uid\030\001 \001(\r\022\013\n\003key\030\002 \001(\014\022\020\n\010d"
    "eviceid\030\003 \001(\014\022\014\n\004city\030\004 \001(\014\022\022\n\ncheck_cod"
    "e\030\005 \001(\014\"4\n\rmsg_login_rep\022\016\n\006result\030\001 \001(\r"
    "\022\023\n\013server_time\030\002 \001(\r\"&\n\024msg_notify_leav"
    "e_rep\022\016\n\006result\030\001 \001(\r\"$\n\022msg_enter_game_"
    "rep\022\016\n\006result\030\001 \001(\r\"8\n\023msg_player_data_r"
    "ep\022!\n\tbase_data\030\001 \001(\0132\016.net.base_info\"v\n"
    "\024msg_update_acc_value\022\017\n\007diamond\030\001 \001(\003\022\014"
    "\n\004coin\030\002 \001(\003\022\r\n\005score\030\003 \001(\003\022\r\n\005ingot\030\004 \001"
    "(\003\022\016\n\006cvalue\030\005 \001(\003\022\021\n\tsafe_coin\030\006 \001(\003\"\212\001"
    "\n\025msg_update_base_value\022\024\n\014safeboxstate\030"
    "\001 \001(\r\022\016\n\006clogin\030\002 \001(\r\022\021\n\tweeklogin\030\003 \001(\r"
    "\022\016\n\006reward\030\004 \001(\r\022\020\n\010bankrupt\030\005 \001(\r\022\026\n\016da"
    "y_game_count\030\006 \001(\r\"<\n\023msg_send_base_valu"
    "e\022\016\n\006clogin\030\001 \001(\r\022\025\n\rclogin_reward\030\002 \003(\r"
    "\"9\n\024msg_update_land_info\022!\n\tland_data\030\001 "
    "\001(\0132\016.net.land_info\"9\n\024msg_update_game_i"
    "nfo\022!\n\004data\030\001 \001(\0132\023.net.game_data_info\"&"
    "\n\021msg_svrs_info_req\022\021\n\tgame_type\030\001 \001(\r\"a"
    "\n\021msg_svrs_info_rep\022\033\n\004svrs\030\001 \003(\0132\r.net."
    "svr_info\022\021\n\tcur_svrid\030\002 \001(\r\022\034\n\003num\030\003 \003(\013"
    "2\017.net.player_num\"&\n\025msg_enter_gamesvr_r"
    "eq\022\r\n\005svrid\030\001 \001(\r\"I\n\025msg_enter_gamesvr_r"
    "ep\022\016\n\006result\030\001 \001(\r\022\r\n\005svrid\030\002 \001(\r\022\021\n\tctr"
    "l_flag\030\003 \001(\r\",\n\035msg_control_player_back_"
    "lobby\022\013\n\003uid\030\001 \001(\r\"\'\n\025msg_login_safebox_"
    "req\022\016\n\006passwd\030\001 \001(\014\"\'\n\025msg_login_safebox"
    "_rep\022\016\n\006result\030\001 \001(\r\">\n\032msg_change_safeb"
    "ox_pwd_req\022\017\n\007old_pwd\030\001 \001(\014\022\017\n\007new_pwd\030\002"
    " \001(\014\",\n\032msg_change_safebox_pwd_rep\022\016\n\006re"
    "sult\030\001 \001(\r\")\n\024msg_take_safebox_req\022\021\n\tta"
    "ke_coin\030\001 \001(\003\"9\n\024msg_take_safebox_rep\022\021\n"
    "\ttake_coin\030\001 \001(\003\022\016\n\006result\030\002 \001(\r\"L\n\024msg_"
    "give_safebox_req\022\020\n\010give_uid\030\001 \001(\r\022\021\n\tgi"
    "ve_coin\030\002 \001(\003\022\017\n\007own_uid\030\003 \001(\r\"K\n\024msg_gi"
    "ve_safebox_rep\022\020\n\010give_uid\030\001 \001(\r\022\021\n\tgive"
    "_coin\030\002 \001(\003\022\016\n\006result\030\003 \001(\r\"$\n\025msg_php_b"
    "roadcast_rep\022\013\n\003msg\030\001 \001(\014\"\'\n\030msg_system_"
    "broadcast_rep\022\013\n\003msg\030\001 \001(\014\"\?\n\030msg_send_a"
    "ll_mission_rep\022#\n\010missions\030\001 \003(\0132\021.net.m"
    "ission_data\":\n\024msg_send_mission_rep\022\"\n\007m"
    "ission\030\001 \001(\0132\021.net.mission_data\")\n\031msg_g"
    "et_mission_prize_req\022\014\n\004msid\030\001 \001(\r\"q\n\031ms"
    "g_get_mission_prize_rep\022\016\n\006result\030\001 \001(\r\022"
    "\"\n\007mission\030\002 \001(\0132\021.net.mission_data\022 \n\010b"
    "aseinfo\030\003 \001(\0132\016.net.base_info\"/\n\030msg_get"
    "_login_reward_req\022\023\n\013reward_flag\030\001 \001(\r\"\?"
    "\n\030msg_get_login_reward_rep\022\023\n\013reward_fla"
    "g\030\001 \001(\r\022\016\n\006result\030\002 \001(\r\"/\n\031msg_get_bankr"
    "upt_help_req\022\022\n\nhelp_count\030\001 \001(\r\"C\n\031msg_"
    "get_bankrupt_help_rep\022\016\n\006result\030\001 \001(\r\022\026\n"
    "\016bankrupt_count\030\002 \001(\r\"D\n\026msg_exchange_sc"
    "ore_req\022\025\n\rexchange_type\030\001 \001(\r\022\023\n\013exchan"
    "ge_id\030\002 \001(\r\"T\n\026msg_exchange_score_rep\022\025\n"
    "\rexchange_type\030\001 \001(\r\022\023\n\013exchange_id\030\002 \001("
    "\r\022\016\n\006result\030\003 \001(\r\"&\n\027msg_speak_broadcast"
    "_req\022\013\n\003msg\030\001 \001(\014\"J\n\027msg_speak_broadcast"
    "_rep\022\017\n\007send_id\030\001 \001(\r\022\021\n\tsend_name\030\002 \001(\014"
    "\022\013\n\003msg\030\003 \001(\014\")\n\025msg_get_history_speak\022\020"
    "\n\010get_time\030\001 \001(\r\"D\n\026msg_send_history_spe"
    "ak\022*\n\004msgs\030\001 \003(\0132\034.net.msg_speak_broadca"
    "st_rep\"4\n\022msg_speak_oper_rep\022\016\n\006result\030\001"
    " \001(\r\022\016\n\006cdtime\030\002 \001(\r\"\025\n\023msg_get_server_i"
    "nfo\"V\n\013server_info\022\r\n\005svrid\030\001 \001(\r\022\022\n\npla"
    "yer_num\030\002 \001(\r\022\021\n\trobot_num\030\003 \001(\r\022\021\n\tgame"
    "_type\030\004 \001(\r\"9\n\024msg_send_server_info\022!\n\007s"
    "ervers\030\001 \003(\0132\020.net.server_info\"\'\n\022msg_ro"
    "oms_info_req\022\021\n\tgame_type\030\001 \001(\r\"G\n\022msg_r"
    "ooms_info_rep\022\035\n\005rooms\030\001 \003(\0132\016.net.room_"
    "info\022\022\n\ncur_roomid\030\002 \001(\r\"!\n\022msg_back_lob"
    "by_req\022\013\n\003uid\030\001 \001(\r\"$\n\022msg_back_lobby_re"
    "p\022\016\n\006result\030\001 \001(\r\"%\n\024msg_goto_gamesvr_re"
    "q\022\r\n\005svrid\030\001 \001(\r\"5\n\024msg_goto_gamesvr_rep"
    "\022\016\n\006result\030\001 \001(\r\022\r\n\005svrid\030\002 \001(\r\"%\n\022msg_e"
    "nter_room_req\022\017\n\007room_id\030\001 \001(\r\":\n!msg_en"
    "ter_novice_welfare_room_req\022\025\n\rmaxjetton"
    "rate\030\001 \001(\005\"U\n\022msg_enter_room_rep\022\016\n\006resu"
    "lt\030\001 \001(\r\022\034\n\004room\030\002 \001(\0132\016.net.room_info\022\021"
    "\n\tcur_table\030\003 \001(\r\"/\n\031msg_notify_leave_ro"
    "om_rep\022\022\n\nleave_type\030\001 \001(\r\":\n\022msg_table_"
    "list_req\022\020\n\010table_id\030\001 \001(\r\022\022\n\nseach_type"
    "\030\002 \001(\r\":\n\022msg_table_list_rep\022$\n\006tables\030\001"
    " \003(\0132\024.net.table_face_info\"\245\001\n\024msg_creat"
    "e_table_req\022\022\n\ntable_name\030\001 \001(\014\022\016\n\006passw"
    "d\030\002 \001(\014\022\014\n\004deal\030\003 \001(\r\022\022\n\nbase_score\030\004 \001("
    "\003\022\017\n\007is_show\030\005 \001(\r\022\020\n\010fee_type\030\006 \001(\r\022\021\n\t"
    "fee_value\030\007 \001(\003\022\021\n\topen_days\030\010 \001(\r\"8\n\024ms"
    "g_create_table_rep\022\016\n\006result\030\001 \001(\r\022\020\n\010ta"
    "ble_id\030\002 \001(\r\";\n\023msg_renew_table_req\022\020\n\010t"
    "able_id\030\001 \001(\r\022\022\n\nrenew_days\030\002 \001(\r\"K\n\023msg"
    "_renew_table_rep\022\020\n\010table_id\030\001 \001(\r\022\022\n\nre"
    "new_days\030\002 \001(\r\022\016\n\006result\030\003 \001(\r\"\'\n\023msg_le"
    "ave_table_req\022\020\n\010table_id\030\001 \001(\r\"%\n\023msg_l"
    "eave_table_rep\022\016\n\006result\030\001 \001(\r\"7\n\023msg_en"
    "ter_table_req\022\020\n\010table_id\030\001 \001(\r\022\016\n\006passw"
    "d\030\002 \001(\014\"7\n\023msg_enter_table_rep\022\020\n\010table_"
    "id\030\001 \001(\r\022\016\n\006result\030\002 \001(\r\">\n\022msg_table_in"
    "fo_rep\022(\n\ntable_info\030\001 \001(\0132\024.net.table_f"
    "ace_info\"4\n\021msg_seat_info_rep\022\037\n\007players"
    "\030\001 \003(\0132\016.net.seat_info\"$\n\023msg_table_read"
    "y_req\022\r\n\005ready\030\001 \001(\r\":\n\023msg_table_ready_"
    "rep\022\016\n\006readys\030\001 \003(\r\022\023\n\013auto_states\030\002 \003(\r"
    "\"&\n\022msg_table_chat_req\022\020\n\010chat_msg\030\001 \001(\014"
    "\"3\n\022msg_table_chat_rep\022\013\n\003uid\030\001 \001(\r\022\020\n\010c"
    "hat_msg\030\002 \001(\014\"+\n\026msg_table_set_auto_req\022"
    "\021\n\tauto_type\030\001 \001(\r\"<\n\026msg_table_set_auto"
    "_rep\022\016\n\006result\030\001 \001(\r\022\022\n\nauto_state\030\002 \001(\r"
    "\"7\n\026msg_fast_join_room_req\022\014\n\004deal\030\001 \001(\r"
    "\022\017\n\007consume\030\002 \001(\r\".\n\034msg_fast_join_by_ro"
    "om_id_req\022\016\n\006roomid\030\001 \001(\r\"(\n\026msg_fast_jo"
    "in_room_rep\022\016\n\006result\030\001 \001(\r\"+\n\027msg_fast_"
    "join_table_req\022\020\n\010table_id\030\001 \001(\r\")\n\027msg_"
    "fast_join_table_rep\022\016\n\006result\030\001 \001(\r\"-\n\031m"
    "sg_master_join_table_req\022\020\n\010table_id\030\001 \001"
    "(\r\"+\n\031msg_master_join_table_rep\022\016\n\006resul"
    "t\030\001 \001(\r\":\n\030msg_query_table_list_req\022\017\n\007s"
    "tartid\030\001 \001(\r\022\r\n\005endid\030\002 \001(\r\"S\n\030msg_query"
    "_table_list_rep\022$\n\006tables\030\001 \003(\0132\024.net.ta"
    "ble_face_info\022\021\n\ttable_num\030\002 \001(\r\"R\n\032msg_"
    "notify_player_join_rep\022\022\n\njoin_leave\030\001 \001"
    "(\r\022 \n\006player\030\002 \001(\0132\020.net.looker_info\"O\n\030"
    "msg_looker_list_info_rep\022!\n\007lookers\030\001 \003("
    "\0132\020.net.looker_info\022\020\n\010is_reset\030\002 \001(\r\"<\n"
    "\027msg_sitdown_standup_req\022\017\n\007oper_id\030\001 \001("
    "\r\022\020\n\010chair_id\030\002 \001(\r\"L\n\027msg_sitdown_stand"
    "up_rep\022\017\n\007oper_id\030\001 \001(\r\022\020\n\010chair_id\030\002 \001("
    "\r\022\016\n\006result\030\003 \001(\r\"\\\n\022msg_items_user_req\022"
    "\r\n\005meuid\030\001 \001(\r\022\022\n\nbechair_id\030\002 \001(\r\022\017\n\007it"
    "em_id\030\003 \001(\r\022\022\n\nitem_count\030\004 \001(\r\"a\n\022msg_i"
    "tems_user_rep\022\022\n\nmechair_id\030\001 \001(\r\022\022\n\nbec"
    "hair_id\030\002 \001(\r\022\017\n\007item_id\030\003 \001(\r\022\022\n\nitem_c"
    "ount\030\004 \001(\r\"M\n\027msg_ingame_update_score\022\013\n"
    "\003uid\030\001 \001(\r\022\021\n\tgame_type\030\002 \001(\r\022\022\n\ndiff_sc"
    "ore\030\003 \001(\003\"o\n\027vip_recharge_wechatinfo\022\016\n\006"
    "sortid\030\001 \001(\r\022\r\n\005title\030\002 \001(\014\022\017\n\007account\030\003"
    " \001(\014\022\022\n\nlow_amount\030\004 \001(\r\022\020\n\010pay_type\030\005 \003"
    "(\005\"\"\n msg_notify_vip_recharge_show_req\"Z"
    "\n\034msg_notify_vip_recharge_show\022\016\n\006status"
    "\030\001 \001(\r\022*\n\004info\030\002 \003(\0132\034.net.vip_recharge_"
    "wechatinfo\"&\n$msg_notify_unionpayrecharg"
    "e_show_req\"6\n$msg_notify_unionpayrecharg"
    "e_show_rep\022\016\n\006status\030\001 \001(\r\"\'\n%msg_notify"
    "_wechatpayrecharge_show_req\"7\n%msg_notif"
    "y_wechatpayrecharge_show_rep\022\016\n\006status\030\001"
    " \001(\r\"$\n\"msg_notify_alipayrecharge_show_r"
    "eq\"4\n\"msg_notify_alipayrecharge_show_rep"
    "\022\016\n\006status\030\001 \001(\r\"&\n$msg_notify_otherpayr"
    "echarge_show_req\"6\n$msg_notify_otherpayr"
    "echarge_show_rep\022\016\n\006status\030\001 \001(\r\"#\n!msg_"
    "notify_qqpayrecharge_show_req\"3\n!msg_not"
    "ify_qqpayrecharge_show_rep\022\016\n\006status\030\001 \001"
    "(\r\"+\n)msg_notify_wechatscanpayrecharge_s"
    "how_req\";\n)msg_notify_wechatscanpayrecha"
    "rge_show_rep\022\016\n\006status\030\001 \001(\r\"#\n!msg_noti"
    "fy_jdpayrecharge_show_req\"3\n!msg_notify_"
    "jdpayrecharge_show_rep\022\016\n\006status\030\001 \001(\r\"&"
    "\n$msg_notify_applepayrecharge_show_req\"6"
    "\n$msg_notify_applepayrecharge_show_rep\022\016"
    "\n\006status\030\001 \001(\r\"+\n)msg_notify_large_ali_p"
    "ayrecharge_show_req\";\n)msg_notify_large_"
    "ali_payrecharge_show_rep\022\016\n\006status\030\001 \001(\r"
    "\"|\n\025exclusive_alipay_info\022\017\n\007account\030\001 \001"
    "(\014\022\014\n\004name\030\002 \001(\014\022\r\n\005title\030\003 \001(\014\022\017\n\007min_p"
    "ay\030\004 \001(\005\022\017\n\007max_pay\030\005 \001(\005\022\023\n\013lower_float"
    "\030\006 \001(\005\"e\n)msg_notify_exclusive_alipay_re"
    "charge_show\022\016\n\006status\030\001 \001(\r\022(\n\004info\030\002 \003("
    "\0132\032.net.exclusive_alipay_info\"/\n-msg_not"
    "ify_exclusive_alipay_recharge_show_req\"+"
    "\n)msg_notify_fixed_alipay_recharge_show_"
    "req\";\n)msg_notify_fixed_alipay_recharge_"
    "show_rep\022\016\n\006status\030\001 \001(\r\"+\n)msg_notify_f"
    "ixed_wechat_recharge_show_req\";\n)msg_not"
    "ify_fixed_wechat_recharge_show_rep\022\016\n\006st"
    "atus\030\001 \001(\r\"-\n+msg_notify_fixed_unionpay_"
    "recharge_show_req\"=\n+msg_notify_fixed_un"
    "ionpay_recharge_show_rep\022\016\n\006status\030\001 \001(\r"
    "\".\n,msg_notify_exclusive_flash_recharge_"
    "show_req\"j\n,msg_notify_exclusive_flash_r"
    "echarge_show_rep\022\016\n\006status\030\001 \001(\r\022*\n\004info"
    "\030\002 \003(\0132\034.net.vip_recharge_wechatinfo\"1\n\022"
    "bairen_jetton_info\022\014\n\004area\030\001 \001(\r\022\r\n\005scor"
    "e\030\002 \001(\003\"P\n\'msg_continuous_pressure_jetto"
    "n_info_rep\022%\n\004info\030\001 \003(\0132\027.net.bairen_je"
    "tton_info\"R\n)msg_player_continuous_press"
    "ure_jetton_req\022%\n\004info\030\001 \003(\0132\027.net.baire"
    "n_jetton_info\";\n)msg_player_continuous_p"
    "ressure_jetton_rep\022\016\n\006result\030\001 \001(\r\"\321\002\n\021m"
    "sg_game_play_log\022,\n\006bainiu\030\001 \001(\0132\034.net.m"
    "sg_bainiu_play_log_rep\0220\n\010baccarat\030\002 \001(\013"
    "2\036.net.msg_baccarat_play_log_rep\022,\n\006paij"
    "iu\030\003 \001(\0132\034.net.msg_paijiu_play_log_rep\022("
    "\n\004dice\030\004 \001(\0132\032.net.msg_dice_play_log_rep"
    "\022&\n\003war\030\005 \001(\0132\031.net.msg_war_play_log_rep"
    "\022*\n\005fight\030\006 \001(\0132\033.net.msg_fight_play_log"
    "_rep\0220\n\010twoeight\030\007 \001(\0132\036.net.msg_twoeigh"
    "t_play_log_rep\"\027\n\025msg_game_play_log_req\""
    "\213\001\n\025msg_game_play_log_rep\022\020\n\010gametype\030\001 "
    "\001(\r\022\016\n\006roomid\030\002 \001(\r\022\021\n\tgamestate\030\003 \001(\r\022\023"
    "\n\013remain_time\030\004 \001(\r\022(\n\010play_log\030\005 \001(\0132\026."
    "net.msg_game_play_log\"\227\001\n\025msg_chat_info_"
    "forward\022\016\n\006fromid\030\001 \001(\r\022\014\n\004toid\030\002 \003(\r\022\016\n"
    "\006online\030\003 \003(\005\022\021\n\tmessagStr\030\004 \001(\014\022\020\n\010from"
    "name\030\005 \001(\014\022\016\n\006toname\030\006 \003(\014\022\014\n\004time\030\007 \001(\004"
    "\022\r\n\005mtype\030\010 \001(\005\"I\n$msg_brc_control_user_"
    "enter_table_req\022\017\n\007game_id\030\001 \001(\r\022\020\n\010tabl"
    "e_id\030\002 \001(\r\"S\n$msg_brc_control_user_enter"
    "_table_rep\022\016\n\006result\030\001 \001(\r\022\014\n\004area\030\002 \003(\r"
    "\022\r\n\005times\030\003 \001(\r\"I\n$msg_brc_control_user_"
    "leave_table_req\022\017\n\007game_id\030\001 \001(\r\022\020\n\010tabl"
    "e_id\030\002 \001(\r\"6\n$msg_brc_control_user_leave"
    "_table_rep\022\016\n\006result\030\001 \001(\r\"5\n&msg_brc_co"
    "ntrol_force_leave_banker_req\022\013\n\003uid\030\001 \001("
    "\r\"E\n&msg_brc_control_force_leave_banker_"
    "rep\022\013\n\003uid\030\001 \001(\r\022\016\n\006result\030\002 \001(\r\"I\n\035msg_"
    "brc_control_area_info_req\022\013\n\003uid\030\001 \001(\r\022\014"
    "\n\004area\030\002 \003(\r\022\r\n\005times\030\003 \001(\r\"L\n\035msg_brc_c"
    "ontrol_area_info_rep\022\016\n\006result\030\001 \001(\r\022\014\n\004"
    "area\030\002 \003(\r\022\r\n\005times\030\003 \001(\r\"9\n$msg_brc_con"
    "trol_total_robot_bet_info\022\021\n\tarea_info\030\001"
    " \003(\003\":\n%msg_brc_control_total_player_bet"
    "_info\022\021\n\tarea_info\030\001 \003(\003\"\320\001\n\033brc_control"
    "_player_bet_info\022\013\n\003uid\030\001 \001(\r\022\021\n\tarea_in"
    "fo\030\002 \003(\003\022\021\n\ttotal_bet\030\003 \001(\003\022\024\n\014curr_day_"
    "win\030\004 \001(\003\022\022\n\nwin_number\030\005 \001(\r\022\023\n\013lose_nu"
    "mber\030\006 \001(\r\022\021\n\ttotal_win\030\007 \001(\003\022\014\n\004coin\030\010 "
    "\001(\003\022\014\n\004name\030\t \001(\014\022\020\n\010ismaster\030\n \001(\r\"c\n&m"
    "sg_brc_control_single_player_bet_info\0229\n"
    "\017player_bet_info\030\001 \001(\0132 .net.brc_control"
    "_player_bet_info\"`\n#msg_brc_control_all_"
    "player_bet_info\0229\n\017player_bet_list\030\001 \003(\013"
    "2 .net.brc_control_player_bet_info\"N\n\034br"
    "c_control_player_coin_info\022\013\n\003uid\030\001 \001(\r\022"
    "\014\n\004coin\030\002 \001(\003\022\023\n\013player_type\030\003 \001(\r\"\217\001\n!m"
    "sg_brc_control_apple_banker_list\0224\n\tbank"
    "_info\030\001 \001(\0132!.net.brc_control_player_coi"
    "n_info\0224\n\tuser_info\030\002 \003(\0132!.net.brc_cont"
    "rol_player_coin_info\"\?\n\035msg_brc_control_"
    "game_end_info\022\013\n\003uid\030\001 \001(\r\022\021\n\tarea_info\030"
    "\002 \003(\r\"@\n msg_brc_control_game_status_inf"
    "o\022\016\n\006status\030\001 \001(\r\022\014\n\004time\030\002 \001(\r\">\n\037msg_b"
    "rc_control_flush_area_info\022\014\n\004area\030\001 \003(\r"
    "\022\r\n\005times\030\002 \001(\r", 9935);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client_logic_msg.proto", &protobuf_RegisterTypes);
  msg_heart_test::default_instance_ = new msg_heart_test();
  msg_login_req::default_instance_ = new msg_login_req();
  msg_login_rep::default_instance_ = new msg_login_rep();
  msg_notify_leave_rep::default_instance_ = new msg_notify_leave_rep();
  msg_enter_game_rep::default_instance_ = new msg_enter_game_rep();
  msg_player_data_rep::default_instance_ = new msg_player_data_rep();
  msg_update_acc_value::default_instance_ = new msg_update_acc_value();
  msg_update_base_value::default_instance_ = new msg_update_base_value();
  msg_send_base_value::default_instance_ = new msg_send_base_value();
  msg_update_land_info::default_instance_ = new msg_update_land_info();
  msg_update_game_info::default_instance_ = new msg_update_game_info();
  msg_svrs_info_req::default_instance_ = new msg_svrs_info_req();
  msg_svrs_info_rep::default_instance_ = new msg_svrs_info_rep();
  msg_enter_gamesvr_req::default_instance_ = new msg_enter_gamesvr_req();
  msg_enter_gamesvr_rep::default_instance_ = new msg_enter_gamesvr_rep();
  msg_control_player_back_lobby::default_instance_ = new msg_control_player_back_lobby();
  msg_login_safebox_req::default_instance_ = new msg_login_safebox_req();
  msg_login_safebox_rep::default_instance_ = new msg_login_safebox_rep();
  msg_change_safebox_pwd_req::default_instance_ = new msg_change_safebox_pwd_req();
  msg_change_safebox_pwd_rep::default_instance_ = new msg_change_safebox_pwd_rep();
  msg_take_safebox_req::default_instance_ = new msg_take_safebox_req();
  msg_take_safebox_rep::default_instance_ = new msg_take_safebox_rep();
  msg_give_safebox_req::default_instance_ = new msg_give_safebox_req();
  msg_give_safebox_rep::default_instance_ = new msg_give_safebox_rep();
  msg_php_broadcast_rep::default_instance_ = new msg_php_broadcast_rep();
  msg_system_broadcast_rep::default_instance_ = new msg_system_broadcast_rep();
  msg_send_all_mission_rep::default_instance_ = new msg_send_all_mission_rep();
  msg_send_mission_rep::default_instance_ = new msg_send_mission_rep();
  msg_get_mission_prize_req::default_instance_ = new msg_get_mission_prize_req();
  msg_get_mission_prize_rep::default_instance_ = new msg_get_mission_prize_rep();
  msg_get_login_reward_req::default_instance_ = new msg_get_login_reward_req();
  msg_get_login_reward_rep::default_instance_ = new msg_get_login_reward_rep();
  msg_get_bankrupt_help_req::default_instance_ = new msg_get_bankrupt_help_req();
  msg_get_bankrupt_help_rep::default_instance_ = new msg_get_bankrupt_help_rep();
  msg_exchange_score_req::default_instance_ = new msg_exchange_score_req();
  msg_exchange_score_rep::default_instance_ = new msg_exchange_score_rep();
  msg_speak_broadcast_req::default_instance_ = new msg_speak_broadcast_req();
  msg_speak_broadcast_rep::default_instance_ = new msg_speak_broadcast_rep();
  msg_get_history_speak::default_instance_ = new msg_get_history_speak();
  msg_send_history_speak::default_instance_ = new msg_send_history_speak();
  msg_speak_oper_rep::default_instance_ = new msg_speak_oper_rep();
  msg_get_server_info::default_instance_ = new msg_get_server_info();
  server_info::default_instance_ = new server_info();
  msg_send_server_info::default_instance_ = new msg_send_server_info();
  msg_rooms_info_req::default_instance_ = new msg_rooms_info_req();
  msg_rooms_info_rep::default_instance_ = new msg_rooms_info_rep();
  msg_back_lobby_req::default_instance_ = new msg_back_lobby_req();
  msg_back_lobby_rep::default_instance_ = new msg_back_lobby_rep();
  msg_goto_gamesvr_req::default_instance_ = new msg_goto_gamesvr_req();
  msg_goto_gamesvr_rep::default_instance_ = new msg_goto_gamesvr_rep();
  msg_enter_room_req::default_instance_ = new msg_enter_room_req();
  msg_enter_novice_welfare_room_req::default_instance_ = new msg_enter_novice_welfare_room_req();
  msg_enter_room_rep::default_instance_ = new msg_enter_room_rep();
  msg_notify_leave_room_rep::default_instance_ = new msg_notify_leave_room_rep();
  msg_table_list_req::default_instance_ = new msg_table_list_req();
  msg_table_list_rep::default_instance_ = new msg_table_list_rep();
  msg_create_table_req::default_instance_ = new msg_create_table_req();
  msg_create_table_rep::default_instance_ = new msg_create_table_rep();
  msg_renew_table_req::default_instance_ = new msg_renew_table_req();
  msg_renew_table_rep::default_instance_ = new msg_renew_table_rep();
  msg_leave_table_req::default_instance_ = new msg_leave_table_req();
  msg_leave_table_rep::default_instance_ = new msg_leave_table_rep();
  msg_enter_table_req::default_instance_ = new msg_enter_table_req();
  msg_enter_table_rep::default_instance_ = new msg_enter_table_rep();
  msg_table_info_rep::default_instance_ = new msg_table_info_rep();
  msg_seat_info_rep::default_instance_ = new msg_seat_info_rep();
  msg_table_ready_req::default_instance_ = new msg_table_ready_req();
  msg_table_ready_rep::default_instance_ = new msg_table_ready_rep();
  msg_table_chat_req::default_instance_ = new msg_table_chat_req();
  msg_table_chat_rep::default_instance_ = new msg_table_chat_rep();
  msg_table_set_auto_req::default_instance_ = new msg_table_set_auto_req();
  msg_table_set_auto_rep::default_instance_ = new msg_table_set_auto_rep();
  msg_fast_join_room_req::default_instance_ = new msg_fast_join_room_req();
  msg_fast_join_by_room_id_req::default_instance_ = new msg_fast_join_by_room_id_req();
  msg_fast_join_room_rep::default_instance_ = new msg_fast_join_room_rep();
  msg_fast_join_table_req::default_instance_ = new msg_fast_join_table_req();
  msg_fast_join_table_rep::default_instance_ = new msg_fast_join_table_rep();
  msg_master_join_table_req::default_instance_ = new msg_master_join_table_req();
  msg_master_join_table_rep::default_instance_ = new msg_master_join_table_rep();
  msg_query_table_list_req::default_instance_ = new msg_query_table_list_req();
  msg_query_table_list_rep::default_instance_ = new msg_query_table_list_rep();
  msg_notify_player_join_rep::default_instance_ = new msg_notify_player_join_rep();
  msg_looker_list_info_rep::default_instance_ = new msg_looker_list_info_rep();
  msg_sitdown_standup_req::default_instance_ = new msg_sitdown_standup_req();
  msg_sitdown_standup_rep::default_instance_ = new msg_sitdown_standup_rep();
  msg_items_user_req::default_instance_ = new msg_items_user_req();
  msg_items_user_rep::default_instance_ = new msg_items_user_rep();
  msg_ingame_update_score::default_instance_ = new msg_ingame_update_score();
  vip_recharge_wechatinfo::default_instance_ = new vip_recharge_wechatinfo();
  msg_notify_vip_recharge_show_req::default_instance_ = new msg_notify_vip_recharge_show_req();
  msg_notify_vip_recharge_show::default_instance_ = new msg_notify_vip_recharge_show();
  msg_notify_unionpayrecharge_show_req::default_instance_ = new msg_notify_unionpayrecharge_show_req();
  msg_notify_unionpayrecharge_show_rep::default_instance_ = new msg_notify_unionpayrecharge_show_rep();
  msg_notify_wechatpayrecharge_show_req::default_instance_ = new msg_notify_wechatpayrecharge_show_req();
  msg_notify_wechatpayrecharge_show_rep::default_instance_ = new msg_notify_wechatpayrecharge_show_rep();
  msg_notify_alipayrecharge_show_req::default_instance_ = new msg_notify_alipayrecharge_show_req();
  msg_notify_alipayrecharge_show_rep::default_instance_ = new msg_notify_alipayrecharge_show_rep();
  msg_notify_otherpayrecharge_show_req::default_instance_ = new msg_notify_otherpayrecharge_show_req();
  msg_notify_otherpayrecharge_show_rep::default_instance_ = new msg_notify_otherpayrecharge_show_rep();
  msg_notify_qqpayrecharge_show_req::default_instance_ = new msg_notify_qqpayrecharge_show_req();
  msg_notify_qqpayrecharge_show_rep::default_instance_ = new msg_notify_qqpayrecharge_show_rep();
  msg_notify_wechatscanpayrecharge_show_req::default_instance_ = new msg_notify_wechatscanpayrecharge_show_req();
  msg_notify_wechatscanpayrecharge_show_rep::default_instance_ = new msg_notify_wechatscanpayrecharge_show_rep();
  msg_notify_jdpayrecharge_show_req::default_instance_ = new msg_notify_jdpayrecharge_show_req();
  msg_notify_jdpayrecharge_show_rep::default_instance_ = new msg_notify_jdpayrecharge_show_rep();
  msg_notify_applepayrecharge_show_req::default_instance_ = new msg_notify_applepayrecharge_show_req();
  msg_notify_applepayrecharge_show_rep::default_instance_ = new msg_notify_applepayrecharge_show_rep();
  msg_notify_large_ali_payrecharge_show_req::default_instance_ = new msg_notify_large_ali_payrecharge_show_req();
  msg_notify_large_ali_payrecharge_show_rep::default_instance_ = new msg_notify_large_ali_payrecharge_show_rep();
  exclusive_alipay_info::default_instance_ = new exclusive_alipay_info();
  msg_notify_exclusive_alipay_recharge_show::default_instance_ = new msg_notify_exclusive_alipay_recharge_show();
  msg_notify_exclusive_alipay_recharge_show_req::default_instance_ = new msg_notify_exclusive_alipay_recharge_show_req();
  msg_notify_fixed_alipay_recharge_show_req::default_instance_ = new msg_notify_fixed_alipay_recharge_show_req();
  msg_notify_fixed_alipay_recharge_show_rep::default_instance_ = new msg_notify_fixed_alipay_recharge_show_rep();
  msg_notify_fixed_wechat_recharge_show_req::default_instance_ = new msg_notify_fixed_wechat_recharge_show_req();
  msg_notify_fixed_wechat_recharge_show_rep::default_instance_ = new msg_notify_fixed_wechat_recharge_show_rep();
  msg_notify_fixed_unionpay_recharge_show_req::default_instance_ = new msg_notify_fixed_unionpay_recharge_show_req();
  msg_notify_fixed_unionpay_recharge_show_rep::default_instance_ = new msg_notify_fixed_unionpay_recharge_show_rep();
  msg_notify_exclusive_flash_recharge_show_req::default_instance_ = new msg_notify_exclusive_flash_recharge_show_req();
  msg_notify_exclusive_flash_recharge_show_rep::default_instance_ = new msg_notify_exclusive_flash_recharge_show_rep();
  bairen_jetton_info::default_instance_ = new bairen_jetton_info();
  msg_continuous_pressure_jetton_info_rep::default_instance_ = new msg_continuous_pressure_jetton_info_rep();
  msg_player_continuous_pressure_jetton_req::default_instance_ = new msg_player_continuous_pressure_jetton_req();
  msg_player_continuous_pressure_jetton_rep::default_instance_ = new msg_player_continuous_pressure_jetton_rep();
  msg_game_play_log::default_instance_ = new msg_game_play_log();
  msg_game_play_log_req::default_instance_ = new msg_game_play_log_req();
  msg_game_play_log_rep::default_instance_ = new msg_game_play_log_rep();
  msg_chat_info_forward::default_instance_ = new msg_chat_info_forward();
  msg_brc_control_user_enter_table_req::default_instance_ = new msg_brc_control_user_enter_table_req();
  msg_brc_control_user_enter_table_rep::default_instance_ = new msg_brc_control_user_enter_table_rep();
  msg_brc_control_user_leave_table_req::default_instance_ = new msg_brc_control_user_leave_table_req();
  msg_brc_control_user_leave_table_rep::default_instance_ = new msg_brc_control_user_leave_table_rep();
  msg_brc_control_force_leave_banker_req::default_instance_ = new msg_brc_control_force_leave_banker_req();
  msg_brc_control_force_leave_banker_rep::default_instance_ = new msg_brc_control_force_leave_banker_rep();
  msg_brc_control_area_info_req::default_instance_ = new msg_brc_control_area_info_req();
  msg_brc_control_area_info_rep::default_instance_ = new msg_brc_control_area_info_rep();
  msg_brc_control_total_robot_bet_info::default_instance_ = new msg_brc_control_total_robot_bet_info();
  msg_brc_control_total_player_bet_info::default_instance_ = new msg_brc_control_total_player_bet_info();
  brc_control_player_bet_info::default_instance_ = new brc_control_player_bet_info();
  msg_brc_control_single_player_bet_info::default_instance_ = new msg_brc_control_single_player_bet_info();
  msg_brc_control_all_player_bet_info::default_instance_ = new msg_brc_control_all_player_bet_info();
  brc_control_player_coin_info::default_instance_ = new brc_control_player_coin_info();
  msg_brc_control_apple_banker_list::default_instance_ = new msg_brc_control_apple_banker_list();
  msg_brc_control_game_end_info::default_instance_ = new msg_brc_control_game_end_info();
  msg_brc_control_game_status_info::default_instance_ = new msg_brc_control_game_status_info();
  msg_brc_control_flush_area_info::default_instance_ = new msg_brc_control_flush_area_info();
  msg_heart_test::default_instance_->InitAsDefaultInstance();
  msg_login_req::default_instance_->InitAsDefaultInstance();
  msg_login_rep::default_instance_->InitAsDefaultInstance();
  msg_notify_leave_rep::default_instance_->InitAsDefaultInstance();
  msg_enter_game_rep::default_instance_->InitAsDefaultInstance();
  msg_player_data_rep::default_instance_->InitAsDefaultInstance();
  msg_update_acc_value::default_instance_->InitAsDefaultInstance();
  msg_update_base_value::default_instance_->InitAsDefaultInstance();
  msg_send_base_value::default_instance_->InitAsDefaultInstance();
  msg_update_land_info::default_instance_->InitAsDefaultInstance();
  msg_update_game_info::default_instance_->InitAsDefaultInstance();
  msg_svrs_info_req::default_instance_->InitAsDefaultInstance();
  msg_svrs_info_rep::default_instance_->InitAsDefaultInstance();
  msg_enter_gamesvr_req::default_instance_->InitAsDefaultInstance();
  msg_enter_gamesvr_rep::default_instance_->InitAsDefaultInstance();
  msg_control_player_back_lobby::default_instance_->InitAsDefaultInstance();
  msg_login_safebox_req::default_instance_->InitAsDefaultInstance();
  msg_login_safebox_rep::default_instance_->InitAsDefaultInstance();
  msg_change_safebox_pwd_req::default_instance_->InitAsDefaultInstance();
  msg_change_safebox_pwd_rep::default_instance_->InitAsDefaultInstance();
  msg_take_safebox_req::default_instance_->InitAsDefaultInstance();
  msg_take_safebox_rep::default_instance_->InitAsDefaultInstance();
  msg_give_safebox_req::default_instance_->InitAsDefaultInstance();
  msg_give_safebox_rep::default_instance_->InitAsDefaultInstance();
  msg_php_broadcast_rep::default_instance_->InitAsDefaultInstance();
  msg_system_broadcast_rep::default_instance_->InitAsDefaultInstance();
  msg_send_all_mission_rep::default_instance_->InitAsDefaultInstance();
  msg_send_mission_rep::default_instance_->InitAsDefaultInstance();
  msg_get_mission_prize_req::default_instance_->InitAsDefaultInstance();
  msg_get_mission_prize_rep::default_instance_->InitAsDefaultInstance();
  msg_get_login_reward_req::default_instance_->InitAsDefaultInstance();
  msg_get_login_reward_rep::default_instance_->InitAsDefaultInstance();
  msg_get_bankrupt_help_req::default_instance_->InitAsDefaultInstance();
  msg_get_bankrupt_help_rep::default_instance_->InitAsDefaultInstance();
  msg_exchange_score_req::default_instance_->InitAsDefaultInstance();
  msg_exchange_score_rep::default_instance_->InitAsDefaultInstance();
  msg_speak_broadcast_req::default_instance_->InitAsDefaultInstance();
  msg_speak_broadcast_rep::default_instance_->InitAsDefaultInstance();
  msg_get_history_speak::default_instance_->InitAsDefaultInstance();
  msg_send_history_speak::default_instance_->InitAsDefaultInstance();
  msg_speak_oper_rep::default_instance_->InitAsDefaultInstance();
  msg_get_server_info::default_instance_->InitAsDefaultInstance();
  server_info::default_instance_->InitAsDefaultInstance();
  msg_send_server_info::default_instance_->InitAsDefaultInstance();
  msg_rooms_info_req::default_instance_->InitAsDefaultInstance();
  msg_rooms_info_rep::default_instance_->InitAsDefaultInstance();
  msg_back_lobby_req::default_instance_->InitAsDefaultInstance();
  msg_back_lobby_rep::default_instance_->InitAsDefaultInstance();
  msg_goto_gamesvr_req::default_instance_->InitAsDefaultInstance();
  msg_goto_gamesvr_rep::default_instance_->InitAsDefaultInstance();
  msg_enter_room_req::default_instance_->InitAsDefaultInstance();
  msg_enter_novice_welfare_room_req::default_instance_->InitAsDefaultInstance();
  msg_enter_room_rep::default_instance_->InitAsDefaultInstance();
  msg_notify_leave_room_rep::default_instance_->InitAsDefaultInstance();
  msg_table_list_req::default_instance_->InitAsDefaultInstance();
  msg_table_list_rep::default_instance_->InitAsDefaultInstance();
  msg_create_table_req::default_instance_->InitAsDefaultInstance();
  msg_create_table_rep::default_instance_->InitAsDefaultInstance();
  msg_renew_table_req::default_instance_->InitAsDefaultInstance();
  msg_renew_table_rep::default_instance_->InitAsDefaultInstance();
  msg_leave_table_req::default_instance_->InitAsDefaultInstance();
  msg_leave_table_rep::default_instance_->InitAsDefaultInstance();
  msg_enter_table_req::default_instance_->InitAsDefaultInstance();
  msg_enter_table_rep::default_instance_->InitAsDefaultInstance();
  msg_table_info_rep::default_instance_->InitAsDefaultInstance();
  msg_seat_info_rep::default_instance_->InitAsDefaultInstance();
  msg_table_ready_req::default_instance_->InitAsDefaultInstance();
  msg_table_ready_rep::default_instance_->InitAsDefaultInstance();
  msg_table_chat_req::default_instance_->InitAsDefaultInstance();
  msg_table_chat_rep::default_instance_->InitAsDefaultInstance();
  msg_table_set_auto_req::default_instance_->InitAsDefaultInstance();
  msg_table_set_auto_rep::default_instance_->InitAsDefaultInstance();
  msg_fast_join_room_req::default_instance_->InitAsDefaultInstance();
  msg_fast_join_by_room_id_req::default_instance_->InitAsDefaultInstance();
  msg_fast_join_room_rep::default_instance_->InitAsDefaultInstance();
  msg_fast_join_table_req::default_instance_->InitAsDefaultInstance();
  msg_fast_join_table_rep::default_instance_->InitAsDefaultInstance();
  msg_master_join_table_req::default_instance_->InitAsDefaultInstance();
  msg_master_join_table_rep::default_instance_->InitAsDefaultInstance();
  msg_query_table_list_req::default_instance_->InitAsDefaultInstance();
  msg_query_table_list_rep::default_instance_->InitAsDefaultInstance();
  msg_notify_player_join_rep::default_instance_->InitAsDefaultInstance();
  msg_looker_list_info_rep::default_instance_->InitAsDefaultInstance();
  msg_sitdown_standup_req::default_instance_->InitAsDefaultInstance();
  msg_sitdown_standup_rep::default_instance_->InitAsDefaultInstance();
  msg_items_user_req::default_instance_->InitAsDefaultInstance();
  msg_items_user_rep::default_instance_->InitAsDefaultInstance();
  msg_ingame_update_score::default_instance_->InitAsDefaultInstance();
  vip_recharge_wechatinfo::default_instance_->InitAsDefaultInstance();
  msg_notify_vip_recharge_show_req::default_instance_->InitAsDefaultInstance();
  msg_notify_vip_recharge_show::default_instance_->InitAsDefaultInstance();
  msg_notify_unionpayrecharge_show_req::default_instance_->InitAsDefaultInstance();
  msg_notify_unionpayrecharge_show_rep::default_instance_->InitAsDefaultInstance();
  msg_notify_wechatpayrecharge_show_req::default_instance_->InitAsDefaultInstance();
  msg_notify_wechatpayrecharge_show_rep::default_instance_->InitAsDefaultInstance();
  msg_notify_alipayrecharge_show_req::default_instance_->InitAsDefaultInstance();
  msg_notify_alipayrecharge_show_rep::default_instance_->InitAsDefaultInstance();
  msg_notify_otherpayrecharge_show_req::default_instance_->InitAsDefaultInstance();
  msg_notify_otherpayrecharge_show_rep::default_instance_->InitAsDefaultInstance();
  msg_notify_qqpayrecharge_show_req::default_instance_->InitAsDefaultInstance();
  msg_notify_qqpayrecharge_show_rep::default_instance_->InitAsDefaultInstance();
  msg_notify_wechatscanpayrecharge_show_req::default_instance_->InitAsDefaultInstance();
  msg_notify_wechatscanpayrecharge_show_rep::default_instance_->InitAsDefaultInstance();
  msg_notify_jdpayrecharge_show_req::default_instance_->InitAsDefaultInstance();
  msg_notify_jdpayrecharge_show_rep::default_instance_->InitAsDefaultInstance();
  msg_notify_applepayrecharge_show_req::default_instance_->InitAsDefaultInstance();
  msg_notify_applepayrecharge_show_rep::default_instance_->InitAsDefaultInstance();
  msg_notify_large_ali_payrecharge_show_req::default_instance_->InitAsDefaultInstance();
  msg_notify_large_ali_payrecharge_show_rep::default_instance_->InitAsDefaultInstance();
  exclusive_alipay_info::default_instance_->InitAsDefaultInstance();
  msg_notify_exclusive_alipay_recharge_show::default_instance_->InitAsDefaultInstance();
  msg_notify_exclusive_alipay_recharge_show_req::default_instance_->InitAsDefaultInstance();
  msg_notify_fixed_alipay_recharge_show_req::default_instance_->InitAsDefaultInstance();
  msg_notify_fixed_alipay_recharge_show_rep::default_instance_->InitAsDefaultInstance();
  msg_notify_fixed_wechat_recharge_show_req::default_instance_->InitAsDefaultInstance();
  msg_notify_fixed_wechat_recharge_show_rep::default_instance_->InitAsDefaultInstance();
  msg_notify_fixed_unionpay_recharge_show_req::default_instance_->InitAsDefaultInstance();
  msg_notify_fixed_unionpay_recharge_show_rep::default_instance_->InitAsDefaultInstance();
  msg_notify_exclusive_flash_recharge_show_req::default_instance_->InitAsDefaultInstance();
  msg_notify_exclusive_flash_recharge_show_rep::default_instance_->InitAsDefaultInstance();
  bairen_jetton_info::default_instance_->InitAsDefaultInstance();
  msg_continuous_pressure_jetton_info_rep::default_instance_->InitAsDefaultInstance();
  msg_player_continuous_pressure_jetton_req::default_instance_->InitAsDefaultInstance();
  msg_player_continuous_pressure_jetton_rep::default_instance_->InitAsDefaultInstance();
  msg_game_play_log::default_instance_->InitAsDefaultInstance();
  msg_game_play_log_req::default_instance_->InitAsDefaultInstance();
  msg_game_play_log_rep::default_instance_->InitAsDefaultInstance();
  msg_chat_info_forward::default_instance_->InitAsDefaultInstance();
  msg_brc_control_user_enter_table_req::default_instance_->InitAsDefaultInstance();
  msg_brc_control_user_enter_table_rep::default_instance_->InitAsDefaultInstance();
  msg_brc_control_user_leave_table_req::default_instance_->InitAsDefaultInstance();
  msg_brc_control_user_leave_table_rep::default_instance_->InitAsDefaultInstance();
  msg_brc_control_force_leave_banker_req::default_instance_->InitAsDefaultInstance();
  msg_brc_control_force_leave_banker_rep::default_instance_->InitAsDefaultInstance();
  msg_brc_control_area_info_req::default_instance_->InitAsDefaultInstance();
  msg_brc_control_area_info_rep::default_instance_->InitAsDefaultInstance();
  msg_brc_control_total_robot_bet_info::default_instance_->InitAsDefaultInstance();
  msg_brc_control_total_player_bet_info::default_instance_->InitAsDefaultInstance();
  brc_control_player_bet_info::default_instance_->InitAsDefaultInstance();
  msg_brc_control_single_player_bet_info::default_instance_->InitAsDefaultInstance();
  msg_brc_control_all_player_bet_info::default_instance_->InitAsDefaultInstance();
  brc_control_player_coin_info::default_instance_->InitAsDefaultInstance();
  msg_brc_control_apple_banker_list::default_instance_->InitAsDefaultInstance();
  msg_brc_control_game_end_info::default_instance_->InitAsDefaultInstance();
  msg_brc_control_game_status_info::default_instance_->InitAsDefaultInstance();
  msg_brc_control_flush_area_info::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_5flogic_5fmsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_5flogic_5fmsg_2eproto {
  StaticDescriptorInitializer_client_5flogic_5fmsg_2eproto() {
    protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  }
} static_descriptor_initializer_client_5flogic_5fmsg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int msg_heart_test::kSvrTimeFieldNumber;
#endif  // !_MSC_VER

msg_heart_test::msg_heart_test()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_heart_test::InitAsDefaultInstance() {
}

msg_heart_test::msg_heart_test(const msg_heart_test& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_heart_test::SharedCtor() {
  _cached_size_ = 0;
  svr_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_heart_test::~msg_heart_test() {
  SharedDtor();
}

void msg_heart_test::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_heart_test::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_heart_test::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_heart_test_descriptor_;
}

const msg_heart_test& msg_heart_test::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_heart_test* msg_heart_test::default_instance_ = NULL;

msg_heart_test* msg_heart_test::New() const {
  return new msg_heart_test;
}

void msg_heart_test::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    svr_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_heart_test::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 svr_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svr_time_)));
          set_has_svr_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_heart_test::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 svr_time = 1;
  if (has_svr_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->svr_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_heart_test::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 svr_time = 1;
  if (has_svr_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->svr_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_heart_test::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 svr_time = 1;
    if (has_svr_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svr_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_heart_test::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_heart_test* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_heart_test*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_heart_test::MergeFrom(const msg_heart_test& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svr_time()) {
      set_svr_time(from.svr_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_heart_test::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_heart_test::CopyFrom(const msg_heart_test& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_heart_test::IsInitialized() const {

  return true;
}

void msg_heart_test::Swap(msg_heart_test* other) {
  if (other != this) {
    std::swap(svr_time_, other->svr_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_heart_test::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_heart_test_descriptor_;
  metadata.reflection = msg_heart_test_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_login_req::kUidFieldNumber;
const int msg_login_req::kKeyFieldNumber;
const int msg_login_req::kDeviceidFieldNumber;
const int msg_login_req::kCityFieldNumber;
const int msg_login_req::kCheckCodeFieldNumber;
#endif  // !_MSC_VER

msg_login_req::msg_login_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_login_req::InitAsDefaultInstance() {
}

msg_login_req::msg_login_req(const msg_login_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_login_req::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  check_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_login_req::~msg_login_req() {
  SharedDtor();
}

void msg_login_req::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (check_code_ != &::google::protobuf::internal::kEmptyString) {
    delete check_code_;
  }
  if (this != default_instance_) {
  }
}

void msg_login_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_login_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_login_req_descriptor_;
}

const msg_login_req& msg_login_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_login_req* msg_login_req::default_instance_ = NULL;

msg_login_req* msg_login_req::New() const {
  return new msg_login_req;
}

void msg_login_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_deviceid()) {
      if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
        deviceid_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::kEmptyString) {
        city_->clear();
      }
    }
    if (has_check_code()) {
      if (check_code_ != &::google::protobuf::internal::kEmptyString) {
        check_code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_login_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional bytes key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_deviceid;
        break;
      }

      // optional bytes deviceid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_deviceid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_city;
        break;
      }

      // optional bytes city = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_city()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_check_code;
        break;
      }

      // optional bytes check_code = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_check_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_check_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_login_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional bytes key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->key(), output);
  }

  // optional bytes deviceid = 3;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->deviceid(), output);
  }

  // optional bytes city = 4;
  if (has_city()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->city(), output);
  }

  // optional bytes check_code = 5;
  if (has_check_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->check_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_login_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional bytes key = 2;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // optional bytes deviceid = 3;
  if (has_deviceid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->deviceid(), target);
  }

  // optional bytes city = 4;
  if (has_city()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->city(), target);
  }

  // optional bytes check_code = 5;
  if (has_check_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->check_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_login_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional bytes key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes deviceid = 3;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->deviceid());
    }

    // optional bytes city = 4;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->city());
    }

    // optional bytes check_code = 5;
    if (has_check_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->check_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_login_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_login_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_login_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_login_req::MergeFrom(const msg_login_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_check_code()) {
      set_check_code(from.check_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_login_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_login_req::CopyFrom(const msg_login_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_login_req::IsInitialized() const {

  return true;
}

void msg_login_req::Swap(msg_login_req* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(key_, other->key_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(city_, other->city_);
    std::swap(check_code_, other->check_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_login_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_login_req_descriptor_;
  metadata.reflection = msg_login_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_login_rep::kResultFieldNumber;
const int msg_login_rep::kServerTimeFieldNumber;
#endif  // !_MSC_VER

msg_login_rep::msg_login_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_login_rep::InitAsDefaultInstance() {
}

msg_login_rep::msg_login_rep(const msg_login_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_login_rep::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  server_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_login_rep::~msg_login_rep() {
  SharedDtor();
}

void msg_login_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_login_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_login_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_login_rep_descriptor_;
}

const msg_login_rep& msg_login_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_login_rep* msg_login_rep::default_instance_ = NULL;

msg_login_rep* msg_login_rep::New() const {
  return new msg_login_rep;
}

void msg_login_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    server_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_login_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_time;
        break;
      }

      // optional uint32 server_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_time_)));
          set_has_server_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_login_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional uint32 server_time = 2;
  if (has_server_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_login_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional uint32 server_time = 2;
  if (has_server_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_login_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 server_time = 2;
    if (has_server_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_login_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_login_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_login_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_login_rep::MergeFrom(const msg_login_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_server_time()) {
      set_server_time(from.server_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_login_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_login_rep::CopyFrom(const msg_login_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_login_rep::IsInitialized() const {

  return true;
}

void msg_login_rep::Swap(msg_login_rep* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(server_time_, other->server_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_login_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_login_rep_descriptor_;
  metadata.reflection = msg_login_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_notify_leave_rep::kResultFieldNumber;
#endif  // !_MSC_VER

msg_notify_leave_rep::msg_notify_leave_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_notify_leave_rep::InitAsDefaultInstance() {
}

msg_notify_leave_rep::msg_notify_leave_rep(const msg_notify_leave_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_notify_leave_rep::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_notify_leave_rep::~msg_notify_leave_rep() {
  SharedDtor();
}

void msg_notify_leave_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_notify_leave_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_notify_leave_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_notify_leave_rep_descriptor_;
}

const msg_notify_leave_rep& msg_notify_leave_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_notify_leave_rep* msg_notify_leave_rep::default_instance_ = NULL;

msg_notify_leave_rep* msg_notify_leave_rep::New() const {
  return new msg_notify_leave_rep;
}

void msg_notify_leave_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_notify_leave_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_notify_leave_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_notify_leave_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_notify_leave_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_notify_leave_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_notify_leave_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_notify_leave_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_notify_leave_rep::MergeFrom(const msg_notify_leave_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_notify_leave_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_notify_leave_rep::CopyFrom(const msg_notify_leave_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_notify_leave_rep::IsInitialized() const {

  return true;
}

void msg_notify_leave_rep::Swap(msg_notify_leave_rep* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_notify_leave_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_notify_leave_rep_descriptor_;
  metadata.reflection = msg_notify_leave_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_enter_game_rep::kResultFieldNumber;
#endif  // !_MSC_VER

msg_enter_game_rep::msg_enter_game_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_enter_game_rep::InitAsDefaultInstance() {
}

msg_enter_game_rep::msg_enter_game_rep(const msg_enter_game_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_enter_game_rep::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_enter_game_rep::~msg_enter_game_rep() {
  SharedDtor();
}

void msg_enter_game_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_enter_game_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_enter_game_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_enter_game_rep_descriptor_;
}

const msg_enter_game_rep& msg_enter_game_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_enter_game_rep* msg_enter_game_rep::default_instance_ = NULL;

msg_enter_game_rep* msg_enter_game_rep::New() const {
  return new msg_enter_game_rep;
}

void msg_enter_game_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_enter_game_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_enter_game_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_enter_game_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_enter_game_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_enter_game_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_enter_game_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_enter_game_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_enter_game_rep::MergeFrom(const msg_enter_game_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_enter_game_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_enter_game_rep::CopyFrom(const msg_enter_game_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_enter_game_rep::IsInitialized() const {

  return true;
}

void msg_enter_game_rep::Swap(msg_enter_game_rep* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_enter_game_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_enter_game_rep_descriptor_;
  metadata.reflection = msg_enter_game_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_player_data_rep::kBaseDataFieldNumber;
#endif  // !_MSC_VER

msg_player_data_rep::msg_player_data_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_player_data_rep::InitAsDefaultInstance() {
  base_data_ = const_cast< ::net::base_info*>(&::net::base_info::default_instance());
}

msg_player_data_rep::msg_player_data_rep(const msg_player_data_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_player_data_rep::SharedCtor() {
  _cached_size_ = 0;
  base_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_player_data_rep::~msg_player_data_rep() {
  SharedDtor();
}

void msg_player_data_rep::SharedDtor() {
  if (this != default_instance_) {
    delete base_data_;
  }
}

void msg_player_data_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_player_data_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_player_data_rep_descriptor_;
}

const msg_player_data_rep& msg_player_data_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_player_data_rep* msg_player_data_rep::default_instance_ = NULL;

msg_player_data_rep* msg_player_data_rep::New() const {
  return new msg_player_data_rep;
}

void msg_player_data_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_data()) {
      if (base_data_ != NULL) base_data_->::net::base_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_player_data_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .net.base_info base_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_player_data_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .net.base_info base_data = 1;
  if (has_base_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_player_data_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .net.base_info base_data = 1;
  if (has_base_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_player_data_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .net.base_info base_data = 1;
    if (has_base_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_player_data_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_player_data_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_player_data_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_player_data_rep::MergeFrom(const msg_player_data_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_data()) {
      mutable_base_data()->::net::base_info::MergeFrom(from.base_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_player_data_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_player_data_rep::CopyFrom(const msg_player_data_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_player_data_rep::IsInitialized() const {

  return true;
}

void msg_player_data_rep::Swap(msg_player_data_rep* other) {
  if (other != this) {
    std::swap(base_data_, other->base_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_player_data_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_player_data_rep_descriptor_;
  metadata.reflection = msg_player_data_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_update_acc_value::kDiamondFieldNumber;
const int msg_update_acc_value::kCoinFieldNumber;
const int msg_update_acc_value::kScoreFieldNumber;
const int msg_update_acc_value::kIngotFieldNumber;
const int msg_update_acc_value::kCvalueFieldNumber;
const int msg_update_acc_value::kSafeCoinFieldNumber;
#endif  // !_MSC_VER

msg_update_acc_value::msg_update_acc_value()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_update_acc_value::InitAsDefaultInstance() {
}

msg_update_acc_value::msg_update_acc_value(const msg_update_acc_value& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_update_acc_value::SharedCtor() {
  _cached_size_ = 0;
  diamond_ = GOOGLE_LONGLONG(0);
  coin_ = GOOGLE_LONGLONG(0);
  score_ = GOOGLE_LONGLONG(0);
  ingot_ = GOOGLE_LONGLONG(0);
  cvalue_ = GOOGLE_LONGLONG(0);
  safe_coin_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_update_acc_value::~msg_update_acc_value() {
  SharedDtor();
}

void msg_update_acc_value::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_update_acc_value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_update_acc_value::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_update_acc_value_descriptor_;
}

const msg_update_acc_value& msg_update_acc_value::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_update_acc_value* msg_update_acc_value::default_instance_ = NULL;

msg_update_acc_value* msg_update_acc_value::New() const {
  return new msg_update_acc_value;
}

void msg_update_acc_value::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    diamond_ = GOOGLE_LONGLONG(0);
    coin_ = GOOGLE_LONGLONG(0);
    score_ = GOOGLE_LONGLONG(0);
    ingot_ = GOOGLE_LONGLONG(0);
    cvalue_ = GOOGLE_LONGLONG(0);
    safe_coin_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_update_acc_value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 diamond = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_coin;
        break;
      }

      // optional int64 coin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // optional int64 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ingot;
        break;
      }

      // optional int64 ingot = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ingot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ingot_)));
          set_has_ingot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cvalue;
        break;
      }

      // optional int64 cvalue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cvalue_)));
          set_has_cvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_safe_coin;
        break;
      }

      // optional int64 safe_coin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_safe_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &safe_coin_)));
          set_has_safe_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_update_acc_value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 diamond = 1;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->diamond(), output);
  }

  // optional int64 coin = 2;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->coin(), output);
  }

  // optional int64 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->score(), output);
  }

  // optional int64 ingot = 4;
  if (has_ingot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->ingot(), output);
  }

  // optional int64 cvalue = 5;
  if (has_cvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->cvalue(), output);
  }

  // optional int64 safe_coin = 6;
  if (has_safe_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->safe_coin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_update_acc_value::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 diamond = 1;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->diamond(), target);
  }

  // optional int64 coin = 2;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->coin(), target);
  }

  // optional int64 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->score(), target);
  }

  // optional int64 ingot = 4;
  if (has_ingot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->ingot(), target);
  }

  // optional int64 cvalue = 5;
  if (has_cvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->cvalue(), target);
  }

  // optional int64 safe_coin = 6;
  if (has_safe_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->safe_coin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_update_acc_value::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 diamond = 1;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->diamond());
    }

    // optional int64 coin = 2;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->coin());
    }

    // optional int64 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->score());
    }

    // optional int64 ingot = 4;
    if (has_ingot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ingot());
    }

    // optional int64 cvalue = 5;
    if (has_cvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cvalue());
    }

    // optional int64 safe_coin = 6;
    if (has_safe_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->safe_coin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_update_acc_value::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_update_acc_value* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_update_acc_value*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_update_acc_value::MergeFrom(const msg_update_acc_value& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_ingot()) {
      set_ingot(from.ingot());
    }
    if (from.has_cvalue()) {
      set_cvalue(from.cvalue());
    }
    if (from.has_safe_coin()) {
      set_safe_coin(from.safe_coin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_update_acc_value::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_update_acc_value::CopyFrom(const msg_update_acc_value& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_update_acc_value::IsInitialized() const {

  return true;
}

void msg_update_acc_value::Swap(msg_update_acc_value* other) {
  if (other != this) {
    std::swap(diamond_, other->diamond_);
    std::swap(coin_, other->coin_);
    std::swap(score_, other->score_);
    std::swap(ingot_, other->ingot_);
    std::swap(cvalue_, other->cvalue_);
    std::swap(safe_coin_, other->safe_coin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_update_acc_value::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_update_acc_value_descriptor_;
  metadata.reflection = msg_update_acc_value_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_update_base_value::kSafeboxstateFieldNumber;
const int msg_update_base_value::kCloginFieldNumber;
const int msg_update_base_value::kWeekloginFieldNumber;
const int msg_update_base_value::kRewardFieldNumber;
const int msg_update_base_value::kBankruptFieldNumber;
const int msg_update_base_value::kDayGameCountFieldNumber;
#endif  // !_MSC_VER

msg_update_base_value::msg_update_base_value()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_update_base_value::InitAsDefaultInstance() {
}

msg_update_base_value::msg_update_base_value(const msg_update_base_value& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_update_base_value::SharedCtor() {
  _cached_size_ = 0;
  safeboxstate_ = 0u;
  clogin_ = 0u;
  weeklogin_ = 0u;
  reward_ = 0u;
  bankrupt_ = 0u;
  day_game_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_update_base_value::~msg_update_base_value() {
  SharedDtor();
}

void msg_update_base_value::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_update_base_value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_update_base_value::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_update_base_value_descriptor_;
}

const msg_update_base_value& msg_update_base_value::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_update_base_value* msg_update_base_value::default_instance_ = NULL;

msg_update_base_value* msg_update_base_value::New() const {
  return new msg_update_base_value;
}

void msg_update_base_value::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    safeboxstate_ = 0u;
    clogin_ = 0u;
    weeklogin_ = 0u;
    reward_ = 0u;
    bankrupt_ = 0u;
    day_game_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_update_base_value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 safeboxstate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &safeboxstate_)));
          set_has_safeboxstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_clogin;
        break;
      }

      // optional uint32 clogin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clogin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clogin_)));
          set_has_clogin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_weeklogin;
        break;
      }

      // optional uint32 weeklogin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weeklogin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weeklogin_)));
          set_has_weeklogin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reward;
        break;
      }

      // optional uint32 reward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_)));
          set_has_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bankrupt;
        break;
      }

      // optional uint32 bankrupt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bankrupt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bankrupt_)));
          set_has_bankrupt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_day_game_count;
        break;
      }

      // optional uint32 day_game_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day_game_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_game_count_)));
          set_has_day_game_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_update_base_value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 safeboxstate = 1;
  if (has_safeboxstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->safeboxstate(), output);
  }

  // optional uint32 clogin = 2;
  if (has_clogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->clogin(), output);
  }

  // optional uint32 weeklogin = 3;
  if (has_weeklogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->weeklogin(), output);
  }

  // optional uint32 reward = 4;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->reward(), output);
  }

  // optional uint32 bankrupt = 5;
  if (has_bankrupt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->bankrupt(), output);
  }

  // optional uint32 day_game_count = 6;
  if (has_day_game_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->day_game_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_update_base_value::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 safeboxstate = 1;
  if (has_safeboxstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->safeboxstate(), target);
  }

  // optional uint32 clogin = 2;
  if (has_clogin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->clogin(), target);
  }

  // optional uint32 weeklogin = 3;
  if (has_weeklogin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->weeklogin(), target);
  }

  // optional uint32 reward = 4;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->reward(), target);
  }

  // optional uint32 bankrupt = 5;
  if (has_bankrupt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->bankrupt(), target);
  }

  // optional uint32 day_game_count = 6;
  if (has_day_game_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->day_game_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_update_base_value::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 safeboxstate = 1;
    if (has_safeboxstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->safeboxstate());
    }

    // optional uint32 clogin = 2;
    if (has_clogin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clogin());
    }

    // optional uint32 weeklogin = 3;
    if (has_weeklogin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weeklogin());
    }

    // optional uint32 reward = 4;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward());
    }

    // optional uint32 bankrupt = 5;
    if (has_bankrupt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bankrupt());
    }

    // optional uint32 day_game_count = 6;
    if (has_day_game_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day_game_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_update_base_value::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_update_base_value* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_update_base_value*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_update_base_value::MergeFrom(const msg_update_base_value& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_safeboxstate()) {
      set_safeboxstate(from.safeboxstate());
    }
    if (from.has_clogin()) {
      set_clogin(from.clogin());
    }
    if (from.has_weeklogin()) {
      set_weeklogin(from.weeklogin());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
    if (from.has_bankrupt()) {
      set_bankrupt(from.bankrupt());
    }
    if (from.has_day_game_count()) {
      set_day_game_count(from.day_game_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_update_base_value::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_update_base_value::CopyFrom(const msg_update_base_value& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_update_base_value::IsInitialized() const {

  return true;
}

void msg_update_base_value::Swap(msg_update_base_value* other) {
  if (other != this) {
    std::swap(safeboxstate_, other->safeboxstate_);
    std::swap(clogin_, other->clogin_);
    std::swap(weeklogin_, other->weeklogin_);
    std::swap(reward_, other->reward_);
    std::swap(bankrupt_, other->bankrupt_);
    std::swap(day_game_count_, other->day_game_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_update_base_value::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_update_base_value_descriptor_;
  metadata.reflection = msg_update_base_value_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_send_base_value::kCloginFieldNumber;
const int msg_send_base_value::kCloginRewardFieldNumber;
#endif  // !_MSC_VER

msg_send_base_value::msg_send_base_value()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_send_base_value::InitAsDefaultInstance() {
}

msg_send_base_value::msg_send_base_value(const msg_send_base_value& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_send_base_value::SharedCtor() {
  _cached_size_ = 0;
  clogin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_send_base_value::~msg_send_base_value() {
  SharedDtor();
}

void msg_send_base_value::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_send_base_value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_send_base_value::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_send_base_value_descriptor_;
}

const msg_send_base_value& msg_send_base_value::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_send_base_value* msg_send_base_value::default_instance_ = NULL;

msg_send_base_value* msg_send_base_value::New() const {
  return new msg_send_base_value;
}

void msg_send_base_value::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clogin_ = 0u;
  }
  clogin_reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_send_base_value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 clogin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clogin_)));
          set_has_clogin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_clogin_reward;
        break;
      }

      // repeated uint32 clogin_reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clogin_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_clogin_reward())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_clogin_reward())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_clogin_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_send_base_value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 clogin = 1;
  if (has_clogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->clogin(), output);
  }

  // repeated uint32 clogin_reward = 2;
  for (int i = 0; i < this->clogin_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->clogin_reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_send_base_value::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 clogin = 1;
  if (has_clogin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->clogin(), target);
  }

  // repeated uint32 clogin_reward = 2;
  for (int i = 0; i < this->clogin_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->clogin_reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_send_base_value::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 clogin = 1;
    if (has_clogin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clogin());
    }

  }
  // repeated uint32 clogin_reward = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->clogin_reward_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->clogin_reward(i));
    }
    total_size += 1 * this->clogin_reward_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_send_base_value::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_send_base_value* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_send_base_value*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_send_base_value::MergeFrom(const msg_send_base_value& from) {
  GOOGLE_CHECK_NE(&from, this);
  clogin_reward_.MergeFrom(from.clogin_reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clogin()) {
      set_clogin(from.clogin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_send_base_value::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_send_base_value::CopyFrom(const msg_send_base_value& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_send_base_value::IsInitialized() const {

  return true;
}

void msg_send_base_value::Swap(msg_send_base_value* other) {
  if (other != this) {
    std::swap(clogin_, other->clogin_);
    clogin_reward_.Swap(&other->clogin_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_send_base_value::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_send_base_value_descriptor_;
  metadata.reflection = msg_send_base_value_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_update_land_info::kLandDataFieldNumber;
#endif  // !_MSC_VER

msg_update_land_info::msg_update_land_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_update_land_info::InitAsDefaultInstance() {
  land_data_ = const_cast< ::net::land_info*>(&::net::land_info::default_instance());
}

msg_update_land_info::msg_update_land_info(const msg_update_land_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_update_land_info::SharedCtor() {
  _cached_size_ = 0;
  land_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_update_land_info::~msg_update_land_info() {
  SharedDtor();
}

void msg_update_land_info::SharedDtor() {
  if (this != default_instance_) {
    delete land_data_;
  }
}

void msg_update_land_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_update_land_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_update_land_info_descriptor_;
}

const msg_update_land_info& msg_update_land_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_update_land_info* msg_update_land_info::default_instance_ = NULL;

msg_update_land_info* msg_update_land_info::New() const {
  return new msg_update_land_info;
}

void msg_update_land_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_land_data()) {
      if (land_data_ != NULL) land_data_->::net::land_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_update_land_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .net.land_info land_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_land_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_update_land_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .net.land_info land_data = 1;
  if (has_land_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->land_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_update_land_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .net.land_info land_data = 1;
  if (has_land_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->land_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_update_land_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .net.land_info land_data = 1;
    if (has_land_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->land_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_update_land_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_update_land_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_update_land_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_update_land_info::MergeFrom(const msg_update_land_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_land_data()) {
      mutable_land_data()->::net::land_info::MergeFrom(from.land_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_update_land_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_update_land_info::CopyFrom(const msg_update_land_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_update_land_info::IsInitialized() const {

  return true;
}

void msg_update_land_info::Swap(msg_update_land_info* other) {
  if (other != this) {
    std::swap(land_data_, other->land_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_update_land_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_update_land_info_descriptor_;
  metadata.reflection = msg_update_land_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_update_game_info::kDataFieldNumber;
#endif  // !_MSC_VER

msg_update_game_info::msg_update_game_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_update_game_info::InitAsDefaultInstance() {
  data_ = const_cast< ::net::game_data_info*>(&::net::game_data_info::default_instance());
}

msg_update_game_info::msg_update_game_info(const msg_update_game_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_update_game_info::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_update_game_info::~msg_update_game_info() {
  SharedDtor();
}

void msg_update_game_info::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void msg_update_game_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_update_game_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_update_game_info_descriptor_;
}

const msg_update_game_info& msg_update_game_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_update_game_info* msg_update_game_info::default_instance_ = NULL;

msg_update_game_info* msg_update_game_info::New() const {
  return new msg_update_game_info;
}

void msg_update_game_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::net::game_data_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_update_game_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .net.game_data_info data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_update_game_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .net.game_data_info data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_update_game_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .net.game_data_info data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_update_game_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .net.game_data_info data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_update_game_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_update_game_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_update_game_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_update_game_info::MergeFrom(const msg_update_game_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::net::game_data_info::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_update_game_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_update_game_info::CopyFrom(const msg_update_game_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_update_game_info::IsInitialized() const {

  return true;
}

void msg_update_game_info::Swap(msg_update_game_info* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_update_game_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_update_game_info_descriptor_;
  metadata.reflection = msg_update_game_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_svrs_info_req::kGameTypeFieldNumber;
#endif  // !_MSC_VER

msg_svrs_info_req::msg_svrs_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_svrs_info_req::InitAsDefaultInstance() {
}

msg_svrs_info_req::msg_svrs_info_req(const msg_svrs_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_svrs_info_req::SharedCtor() {
  _cached_size_ = 0;
  game_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_svrs_info_req::~msg_svrs_info_req() {
  SharedDtor();
}

void msg_svrs_info_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_svrs_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_svrs_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_svrs_info_req_descriptor_;
}

const msg_svrs_info_req& msg_svrs_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_svrs_info_req* msg_svrs_info_req::default_instance_ = NULL;

msg_svrs_info_req* msg_svrs_info_req::New() const {
  return new msg_svrs_info_req;
}

void msg_svrs_info_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_svrs_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 game_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
          set_has_game_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_svrs_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 game_type = 1;
  if (has_game_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_svrs_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 game_type = 1;
  if (has_game_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_svrs_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 game_type = 1;
    if (has_game_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_svrs_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_svrs_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_svrs_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_svrs_info_req::MergeFrom(const msg_svrs_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_type()) {
      set_game_type(from.game_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_svrs_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_svrs_info_req::CopyFrom(const msg_svrs_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_svrs_info_req::IsInitialized() const {

  return true;
}

void msg_svrs_info_req::Swap(msg_svrs_info_req* other) {
  if (other != this) {
    std::swap(game_type_, other->game_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_svrs_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_svrs_info_req_descriptor_;
  metadata.reflection = msg_svrs_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_svrs_info_rep::kSvrsFieldNumber;
const int msg_svrs_info_rep::kCurSvridFieldNumber;
const int msg_svrs_info_rep::kNumFieldNumber;
#endif  // !_MSC_VER

msg_svrs_info_rep::msg_svrs_info_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_svrs_info_rep::InitAsDefaultInstance() {
}

msg_svrs_info_rep::msg_svrs_info_rep(const msg_svrs_info_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_svrs_info_rep::SharedCtor() {
  _cached_size_ = 0;
  cur_svrid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_svrs_info_rep::~msg_svrs_info_rep() {
  SharedDtor();
}

void msg_svrs_info_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_svrs_info_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_svrs_info_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_svrs_info_rep_descriptor_;
}

const msg_svrs_info_rep& msg_svrs_info_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_svrs_info_rep* msg_svrs_info_rep::default_instance_ = NULL;

msg_svrs_info_rep* msg_svrs_info_rep::New() const {
  return new msg_svrs_info_rep;
}

void msg_svrs_info_rep::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    cur_svrid_ = 0u;
  }
  svrs_.Clear();
  num_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_svrs_info_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .net.svr_info svrs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_svrs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_svrs;
        if (input->ExpectTag(16)) goto parse_cur_svrid;
        break;
      }

      // optional uint32 cur_svrid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_svrid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_svrid_)));
          set_has_cur_svrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_num;
        break;
      }

      // repeated .net.player_num num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_num:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_num()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_num;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_svrs_info_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .net.svr_info svrs = 1;
  for (int i = 0; i < this->svrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->svrs(i), output);
  }

  // optional uint32 cur_svrid = 2;
  if (has_cur_svrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cur_svrid(), output);
  }

  // repeated .net.player_num num = 3;
  for (int i = 0; i < this->num_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->num(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_svrs_info_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .net.svr_info svrs = 1;
  for (int i = 0; i < this->svrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->svrs(i), target);
  }

  // optional uint32 cur_svrid = 2;
  if (has_cur_svrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cur_svrid(), target);
  }

  // repeated .net.player_num num = 3;
  for (int i = 0; i < this->num_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->num(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_svrs_info_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 cur_svrid = 2;
    if (has_cur_svrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_svrid());
    }

  }
  // repeated .net.svr_info svrs = 1;
  total_size += 1 * this->svrs_size();
  for (int i = 0; i < this->svrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->svrs(i));
  }

  // repeated .net.player_num num = 3;
  total_size += 1 * this->num_size();
  for (int i = 0; i < this->num_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->num(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_svrs_info_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_svrs_info_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_svrs_info_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_svrs_info_rep::MergeFrom(const msg_svrs_info_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  svrs_.MergeFrom(from.svrs_);
  num_.MergeFrom(from.num_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_cur_svrid()) {
      set_cur_svrid(from.cur_svrid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_svrs_info_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_svrs_info_rep::CopyFrom(const msg_svrs_info_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_svrs_info_rep::IsInitialized() const {

  return true;
}

void msg_svrs_info_rep::Swap(msg_svrs_info_rep* other) {
  if (other != this) {
    svrs_.Swap(&other->svrs_);
    std::swap(cur_svrid_, other->cur_svrid_);
    num_.Swap(&other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_svrs_info_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_svrs_info_rep_descriptor_;
  metadata.reflection = msg_svrs_info_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_enter_gamesvr_req::kSvridFieldNumber;
#endif  // !_MSC_VER

msg_enter_gamesvr_req::msg_enter_gamesvr_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_enter_gamesvr_req::InitAsDefaultInstance() {
}

msg_enter_gamesvr_req::msg_enter_gamesvr_req(const msg_enter_gamesvr_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_enter_gamesvr_req::SharedCtor() {
  _cached_size_ = 0;
  svrid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_enter_gamesvr_req::~msg_enter_gamesvr_req() {
  SharedDtor();
}

void msg_enter_gamesvr_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_enter_gamesvr_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_enter_gamesvr_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_enter_gamesvr_req_descriptor_;
}

const msg_enter_gamesvr_req& msg_enter_gamesvr_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_enter_gamesvr_req* msg_enter_gamesvr_req::default_instance_ = NULL;

msg_enter_gamesvr_req* msg_enter_gamesvr_req::New() const {
  return new msg_enter_gamesvr_req;
}

void msg_enter_gamesvr_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    svrid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_enter_gamesvr_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 svrid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svrid_)));
          set_has_svrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_enter_gamesvr_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 svrid = 1;
  if (has_svrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->svrid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_enter_gamesvr_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 svrid = 1;
  if (has_svrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->svrid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_enter_gamesvr_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 svrid = 1;
    if (has_svrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svrid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_enter_gamesvr_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_enter_gamesvr_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_enter_gamesvr_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_enter_gamesvr_req::MergeFrom(const msg_enter_gamesvr_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svrid()) {
      set_svrid(from.svrid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_enter_gamesvr_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_enter_gamesvr_req::CopyFrom(const msg_enter_gamesvr_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_enter_gamesvr_req::IsInitialized() const {

  return true;
}

void msg_enter_gamesvr_req::Swap(msg_enter_gamesvr_req* other) {
  if (other != this) {
    std::swap(svrid_, other->svrid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_enter_gamesvr_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_enter_gamesvr_req_descriptor_;
  metadata.reflection = msg_enter_gamesvr_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_enter_gamesvr_rep::kResultFieldNumber;
const int msg_enter_gamesvr_rep::kSvridFieldNumber;
const int msg_enter_gamesvr_rep::kCtrlFlagFieldNumber;
#endif  // !_MSC_VER

msg_enter_gamesvr_rep::msg_enter_gamesvr_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_enter_gamesvr_rep::InitAsDefaultInstance() {
}

msg_enter_gamesvr_rep::msg_enter_gamesvr_rep(const msg_enter_gamesvr_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_enter_gamesvr_rep::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  svrid_ = 0u;
  ctrl_flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_enter_gamesvr_rep::~msg_enter_gamesvr_rep() {
  SharedDtor();
}

void msg_enter_gamesvr_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_enter_gamesvr_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_enter_gamesvr_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_enter_gamesvr_rep_descriptor_;
}

const msg_enter_gamesvr_rep& msg_enter_gamesvr_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_enter_gamesvr_rep* msg_enter_gamesvr_rep::default_instance_ = NULL;

msg_enter_gamesvr_rep* msg_enter_gamesvr_rep::New() const {
  return new msg_enter_gamesvr_rep;
}

void msg_enter_gamesvr_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    svrid_ = 0u;
    ctrl_flag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_enter_gamesvr_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_svrid;
        break;
      }

      // optional uint32 svrid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_svrid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svrid_)));
          set_has_svrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ctrl_flag;
        break;
      }

      // optional uint32 ctrl_flag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ctrl_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ctrl_flag_)));
          set_has_ctrl_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_enter_gamesvr_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional uint32 svrid = 2;
  if (has_svrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->svrid(), output);
  }

  // optional uint32 ctrl_flag = 3;
  if (has_ctrl_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ctrl_flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_enter_gamesvr_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional uint32 svrid = 2;
  if (has_svrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->svrid(), target);
  }

  // optional uint32 ctrl_flag = 3;
  if (has_ctrl_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ctrl_flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_enter_gamesvr_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 svrid = 2;
    if (has_svrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svrid());
    }

    // optional uint32 ctrl_flag = 3;
    if (has_ctrl_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ctrl_flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_enter_gamesvr_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_enter_gamesvr_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_enter_gamesvr_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_enter_gamesvr_rep::MergeFrom(const msg_enter_gamesvr_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_svrid()) {
      set_svrid(from.svrid());
    }
    if (from.has_ctrl_flag()) {
      set_ctrl_flag(from.ctrl_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_enter_gamesvr_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_enter_gamesvr_rep::CopyFrom(const msg_enter_gamesvr_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_enter_gamesvr_rep::IsInitialized() const {

  return true;
}

void msg_enter_gamesvr_rep::Swap(msg_enter_gamesvr_rep* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(svrid_, other->svrid_);
    std::swap(ctrl_flag_, other->ctrl_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_enter_gamesvr_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_enter_gamesvr_rep_descriptor_;
  metadata.reflection = msg_enter_gamesvr_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_control_player_back_lobby::kUidFieldNumber;
#endif  // !_MSC_VER

msg_control_player_back_lobby::msg_control_player_back_lobby()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_control_player_back_lobby::InitAsDefaultInstance() {
}

msg_control_player_back_lobby::msg_control_player_back_lobby(const msg_control_player_back_lobby& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_control_player_back_lobby::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_control_player_back_lobby::~msg_control_player_back_lobby() {
  SharedDtor();
}

void msg_control_player_back_lobby::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_control_player_back_lobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_control_player_back_lobby::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_control_player_back_lobby_descriptor_;
}

const msg_control_player_back_lobby& msg_control_player_back_lobby::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_control_player_back_lobby* msg_control_player_back_lobby::default_instance_ = NULL;

msg_control_player_back_lobby* msg_control_player_back_lobby::New() const {
  return new msg_control_player_back_lobby;
}

void msg_control_player_back_lobby::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_control_player_back_lobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_control_player_back_lobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_control_player_back_lobby::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_control_player_back_lobby::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_control_player_back_lobby::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_control_player_back_lobby* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_control_player_back_lobby*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_control_player_back_lobby::MergeFrom(const msg_control_player_back_lobby& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_control_player_back_lobby::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_control_player_back_lobby::CopyFrom(const msg_control_player_back_lobby& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_control_player_back_lobby::IsInitialized() const {

  return true;
}

void msg_control_player_back_lobby::Swap(msg_control_player_back_lobby* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_control_player_back_lobby::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_control_player_back_lobby_descriptor_;
  metadata.reflection = msg_control_player_back_lobby_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_login_safebox_req::kPasswdFieldNumber;
#endif  // !_MSC_VER

msg_login_safebox_req::msg_login_safebox_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_login_safebox_req::InitAsDefaultInstance() {
}

msg_login_safebox_req::msg_login_safebox_req(const msg_login_safebox_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_login_safebox_req::SharedCtor() {
  _cached_size_ = 0;
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_login_safebox_req::~msg_login_safebox_req() {
  SharedDtor();
}

void msg_login_safebox_req::SharedDtor() {
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (this != default_instance_) {
  }
}

void msg_login_safebox_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_login_safebox_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_login_safebox_req_descriptor_;
}

const msg_login_safebox_req& msg_login_safebox_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_login_safebox_req* msg_login_safebox_req::default_instance_ = NULL;

msg_login_safebox_req* msg_login_safebox_req::New() const {
  return new msg_login_safebox_req;
}

void msg_login_safebox_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_login_safebox_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes passwd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_passwd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_login_safebox_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes passwd = 1;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->passwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_login_safebox_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes passwd = 1;
  if (has_passwd()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->passwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_login_safebox_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes passwd = 1;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->passwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_login_safebox_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_login_safebox_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_login_safebox_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_login_safebox_req::MergeFrom(const msg_login_safebox_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_login_safebox_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_login_safebox_req::CopyFrom(const msg_login_safebox_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_login_safebox_req::IsInitialized() const {

  return true;
}

void msg_login_safebox_req::Swap(msg_login_safebox_req* other) {
  if (other != this) {
    std::swap(passwd_, other->passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_login_safebox_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_login_safebox_req_descriptor_;
  metadata.reflection = msg_login_safebox_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_login_safebox_rep::kResultFieldNumber;
#endif  // !_MSC_VER

msg_login_safebox_rep::msg_login_safebox_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_login_safebox_rep::InitAsDefaultInstance() {
}

msg_login_safebox_rep::msg_login_safebox_rep(const msg_login_safebox_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_login_safebox_rep::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_login_safebox_rep::~msg_login_safebox_rep() {
  SharedDtor();
}

void msg_login_safebox_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_login_safebox_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_login_safebox_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_login_safebox_rep_descriptor_;
}

const msg_login_safebox_rep& msg_login_safebox_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_login_safebox_rep* msg_login_safebox_rep::default_instance_ = NULL;

msg_login_safebox_rep* msg_login_safebox_rep::New() const {
  return new msg_login_safebox_rep;
}

void msg_login_safebox_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_login_safebox_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_login_safebox_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_login_safebox_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_login_safebox_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_login_safebox_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_login_safebox_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_login_safebox_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_login_safebox_rep::MergeFrom(const msg_login_safebox_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_login_safebox_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_login_safebox_rep::CopyFrom(const msg_login_safebox_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_login_safebox_rep::IsInitialized() const {

  return true;
}

void msg_login_safebox_rep::Swap(msg_login_safebox_rep* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_login_safebox_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_login_safebox_rep_descriptor_;
  metadata.reflection = msg_login_safebox_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_change_safebox_pwd_req::kOldPwdFieldNumber;
const int msg_change_safebox_pwd_req::kNewPwdFieldNumber;
#endif  // !_MSC_VER

msg_change_safebox_pwd_req::msg_change_safebox_pwd_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_change_safebox_pwd_req::InitAsDefaultInstance() {
}

msg_change_safebox_pwd_req::msg_change_safebox_pwd_req(const msg_change_safebox_pwd_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_change_safebox_pwd_req::SharedCtor() {
  _cached_size_ = 0;
  old_pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  new_pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_change_safebox_pwd_req::~msg_change_safebox_pwd_req() {
  SharedDtor();
}

void msg_change_safebox_pwd_req::SharedDtor() {
  if (old_pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete old_pwd_;
  }
  if (new_pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete new_pwd_;
  }
  if (this != default_instance_) {
  }
}

void msg_change_safebox_pwd_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_change_safebox_pwd_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_change_safebox_pwd_req_descriptor_;
}

const msg_change_safebox_pwd_req& msg_change_safebox_pwd_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_change_safebox_pwd_req* msg_change_safebox_pwd_req::default_instance_ = NULL;

msg_change_safebox_pwd_req* msg_change_safebox_pwd_req::New() const {
  return new msg_change_safebox_pwd_req;
}

void msg_change_safebox_pwd_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_old_pwd()) {
      if (old_pwd_ != &::google::protobuf::internal::kEmptyString) {
        old_pwd_->clear();
      }
    }
    if (has_new_pwd()) {
      if (new_pwd_ != &::google::protobuf::internal::kEmptyString) {
        new_pwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_change_safebox_pwd_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes old_pwd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_old_pwd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_new_pwd;
        break;
      }

      // optional bytes new_pwd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_new_pwd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_change_safebox_pwd_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes old_pwd = 1;
  if (has_old_pwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->old_pwd(), output);
  }

  // optional bytes new_pwd = 2;
  if (has_new_pwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->new_pwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_change_safebox_pwd_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes old_pwd = 1;
  if (has_old_pwd()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->old_pwd(), target);
  }

  // optional bytes new_pwd = 2;
  if (has_new_pwd()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->new_pwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_change_safebox_pwd_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes old_pwd = 1;
    if (has_old_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->old_pwd());
    }

    // optional bytes new_pwd = 2;
    if (has_new_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->new_pwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_change_safebox_pwd_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_change_safebox_pwd_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_change_safebox_pwd_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_change_safebox_pwd_req::MergeFrom(const msg_change_safebox_pwd_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_old_pwd()) {
      set_old_pwd(from.old_pwd());
    }
    if (from.has_new_pwd()) {
      set_new_pwd(from.new_pwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_change_safebox_pwd_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_change_safebox_pwd_req::CopyFrom(const msg_change_safebox_pwd_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_change_safebox_pwd_req::IsInitialized() const {

  return true;
}

void msg_change_safebox_pwd_req::Swap(msg_change_safebox_pwd_req* other) {
  if (other != this) {
    std::swap(old_pwd_, other->old_pwd_);
    std::swap(new_pwd_, other->new_pwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_change_safebox_pwd_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_change_safebox_pwd_req_descriptor_;
  metadata.reflection = msg_change_safebox_pwd_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_change_safebox_pwd_rep::kResultFieldNumber;
#endif  // !_MSC_VER

msg_change_safebox_pwd_rep::msg_change_safebox_pwd_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_change_safebox_pwd_rep::InitAsDefaultInstance() {
}

msg_change_safebox_pwd_rep::msg_change_safebox_pwd_rep(const msg_change_safebox_pwd_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_change_safebox_pwd_rep::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_change_safebox_pwd_rep::~msg_change_safebox_pwd_rep() {
  SharedDtor();
}

void msg_change_safebox_pwd_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_change_safebox_pwd_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_change_safebox_pwd_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_change_safebox_pwd_rep_descriptor_;
}

const msg_change_safebox_pwd_rep& msg_change_safebox_pwd_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_change_safebox_pwd_rep* msg_change_safebox_pwd_rep::default_instance_ = NULL;

msg_change_safebox_pwd_rep* msg_change_safebox_pwd_rep::New() const {
  return new msg_change_safebox_pwd_rep;
}

void msg_change_safebox_pwd_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_change_safebox_pwd_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_change_safebox_pwd_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_change_safebox_pwd_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_change_safebox_pwd_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_change_safebox_pwd_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_change_safebox_pwd_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_change_safebox_pwd_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_change_safebox_pwd_rep::MergeFrom(const msg_change_safebox_pwd_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_change_safebox_pwd_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_change_safebox_pwd_rep::CopyFrom(const msg_change_safebox_pwd_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_change_safebox_pwd_rep::IsInitialized() const {

  return true;
}

void msg_change_safebox_pwd_rep::Swap(msg_change_safebox_pwd_rep* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_change_safebox_pwd_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_change_safebox_pwd_rep_descriptor_;
  metadata.reflection = msg_change_safebox_pwd_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_take_safebox_req::kTakeCoinFieldNumber;
#endif  // !_MSC_VER

msg_take_safebox_req::msg_take_safebox_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_take_safebox_req::InitAsDefaultInstance() {
}

msg_take_safebox_req::msg_take_safebox_req(const msg_take_safebox_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_take_safebox_req::SharedCtor() {
  _cached_size_ = 0;
  take_coin_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_take_safebox_req::~msg_take_safebox_req() {
  SharedDtor();
}

void msg_take_safebox_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_take_safebox_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_take_safebox_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_take_safebox_req_descriptor_;
}

const msg_take_safebox_req& msg_take_safebox_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_take_safebox_req* msg_take_safebox_req::default_instance_ = NULL;

msg_take_safebox_req* msg_take_safebox_req::New() const {
  return new msg_take_safebox_req;
}

void msg_take_safebox_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    take_coin_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_take_safebox_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 take_coin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &take_coin_)));
          set_has_take_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_take_safebox_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 take_coin = 1;
  if (has_take_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->take_coin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_take_safebox_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 take_coin = 1;
  if (has_take_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->take_coin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_take_safebox_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 take_coin = 1;
    if (has_take_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->take_coin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_take_safebox_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_take_safebox_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_take_safebox_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_take_safebox_req::MergeFrom(const msg_take_safebox_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_take_coin()) {
      set_take_coin(from.take_coin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_take_safebox_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_take_safebox_req::CopyFrom(const msg_take_safebox_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_take_safebox_req::IsInitialized() const {

  return true;
}

void msg_take_safebox_req::Swap(msg_take_safebox_req* other) {
  if (other != this) {
    std::swap(take_coin_, other->take_coin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_take_safebox_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_take_safebox_req_descriptor_;
  metadata.reflection = msg_take_safebox_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_take_safebox_rep::kTakeCoinFieldNumber;
const int msg_take_safebox_rep::kResultFieldNumber;
#endif  // !_MSC_VER

msg_take_safebox_rep::msg_take_safebox_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_take_safebox_rep::InitAsDefaultInstance() {
}

msg_take_safebox_rep::msg_take_safebox_rep(const msg_take_safebox_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_take_safebox_rep::SharedCtor() {
  _cached_size_ = 0;
  take_coin_ = GOOGLE_LONGLONG(0);
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_take_safebox_rep::~msg_take_safebox_rep() {
  SharedDtor();
}

void msg_take_safebox_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_take_safebox_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_take_safebox_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_take_safebox_rep_descriptor_;
}

const msg_take_safebox_rep& msg_take_safebox_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_take_safebox_rep* msg_take_safebox_rep::default_instance_ = NULL;

msg_take_safebox_rep* msg_take_safebox_rep::New() const {
  return new msg_take_safebox_rep;
}

void msg_take_safebox_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    take_coin_ = GOOGLE_LONGLONG(0);
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_take_safebox_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 take_coin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &take_coin_)));
          set_has_take_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional uint32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_take_safebox_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 take_coin = 1;
  if (has_take_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->take_coin(), output);
  }

  // optional uint32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_take_safebox_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 take_coin = 1;
  if (has_take_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->take_coin(), target);
  }

  // optional uint32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_take_safebox_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 take_coin = 1;
    if (has_take_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->take_coin());
    }

    // optional uint32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_take_safebox_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_take_safebox_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_take_safebox_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_take_safebox_rep::MergeFrom(const msg_take_safebox_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_take_coin()) {
      set_take_coin(from.take_coin());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_take_safebox_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_take_safebox_rep::CopyFrom(const msg_take_safebox_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_take_safebox_rep::IsInitialized() const {

  return true;
}

void msg_take_safebox_rep::Swap(msg_take_safebox_rep* other) {
  if (other != this) {
    std::swap(take_coin_, other->take_coin_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_take_safebox_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_take_safebox_rep_descriptor_;
  metadata.reflection = msg_take_safebox_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_give_safebox_req::kGiveUidFieldNumber;
const int msg_give_safebox_req::kGiveCoinFieldNumber;
const int msg_give_safebox_req::kOwnUidFieldNumber;
#endif  // !_MSC_VER

msg_give_safebox_req::msg_give_safebox_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_give_safebox_req::InitAsDefaultInstance() {
}

msg_give_safebox_req::msg_give_safebox_req(const msg_give_safebox_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_give_safebox_req::SharedCtor() {
  _cached_size_ = 0;
  give_uid_ = 0u;
  give_coin_ = GOOGLE_LONGLONG(0);
  own_uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_give_safebox_req::~msg_give_safebox_req() {
  SharedDtor();
}

void msg_give_safebox_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_give_safebox_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_give_safebox_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_give_safebox_req_descriptor_;
}

const msg_give_safebox_req& msg_give_safebox_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_give_safebox_req* msg_give_safebox_req::default_instance_ = NULL;

msg_give_safebox_req* msg_give_safebox_req::New() const {
  return new msg_give_safebox_req;
}

void msg_give_safebox_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    give_uid_ = 0u;
    give_coin_ = GOOGLE_LONGLONG(0);
    own_uid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_give_safebox_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 give_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &give_uid_)));
          set_has_give_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_give_coin;
        break;
      }

      // optional int64 give_coin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_give_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &give_coin_)));
          set_has_give_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_own_uid;
        break;
      }

      // optional uint32 own_uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_own_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &own_uid_)));
          set_has_own_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_give_safebox_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 give_uid = 1;
  if (has_give_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->give_uid(), output);
  }

  // optional int64 give_coin = 2;
  if (has_give_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->give_coin(), output);
  }

  // optional uint32 own_uid = 3;
  if (has_own_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->own_uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_give_safebox_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 give_uid = 1;
  if (has_give_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->give_uid(), target);
  }

  // optional int64 give_coin = 2;
  if (has_give_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->give_coin(), target);
  }

  // optional uint32 own_uid = 3;
  if (has_own_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->own_uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_give_safebox_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 give_uid = 1;
    if (has_give_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->give_uid());
    }

    // optional int64 give_coin = 2;
    if (has_give_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->give_coin());
    }

    // optional uint32 own_uid = 3;
    if (has_own_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->own_uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_give_safebox_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_give_safebox_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_give_safebox_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_give_safebox_req::MergeFrom(const msg_give_safebox_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_give_uid()) {
      set_give_uid(from.give_uid());
    }
    if (from.has_give_coin()) {
      set_give_coin(from.give_coin());
    }
    if (from.has_own_uid()) {
      set_own_uid(from.own_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_give_safebox_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_give_safebox_req::CopyFrom(const msg_give_safebox_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_give_safebox_req::IsInitialized() const {

  return true;
}

void msg_give_safebox_req::Swap(msg_give_safebox_req* other) {
  if (other != this) {
    std::swap(give_uid_, other->give_uid_);
    std::swap(give_coin_, other->give_coin_);
    std::swap(own_uid_, other->own_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_give_safebox_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_give_safebox_req_descriptor_;
  metadata.reflection = msg_give_safebox_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_give_safebox_rep::kGiveUidFieldNumber;
const int msg_give_safebox_rep::kGiveCoinFieldNumber;
const int msg_give_safebox_rep::kResultFieldNumber;
#endif  // !_MSC_VER

msg_give_safebox_rep::msg_give_safebox_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_give_safebox_rep::InitAsDefaultInstance() {
}

msg_give_safebox_rep::msg_give_safebox_rep(const msg_give_safebox_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_give_safebox_rep::SharedCtor() {
  _cached_size_ = 0;
  give_uid_ = 0u;
  give_coin_ = GOOGLE_LONGLONG(0);
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_give_safebox_rep::~msg_give_safebox_rep() {
  SharedDtor();
}

void msg_give_safebox_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_give_safebox_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_give_safebox_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_give_safebox_rep_descriptor_;
}

const msg_give_safebox_rep& msg_give_safebox_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_give_safebox_rep* msg_give_safebox_rep::default_instance_ = NULL;

msg_give_safebox_rep* msg_give_safebox_rep::New() const {
  return new msg_give_safebox_rep;
}

void msg_give_safebox_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    give_uid_ = 0u;
    give_coin_ = GOOGLE_LONGLONG(0);
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_give_safebox_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 give_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &give_uid_)));
          set_has_give_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_give_coin;
        break;
      }

      // optional int64 give_coin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_give_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &give_coin_)));
          set_has_give_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional uint32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_give_safebox_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 give_uid = 1;
  if (has_give_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->give_uid(), output);
  }

  // optional int64 give_coin = 2;
  if (has_give_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->give_coin(), output);
  }

  // optional uint32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_give_safebox_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 give_uid = 1;
  if (has_give_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->give_uid(), target);
  }

  // optional int64 give_coin = 2;
  if (has_give_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->give_coin(), target);
  }

  // optional uint32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_give_safebox_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 give_uid = 1;
    if (has_give_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->give_uid());
    }

    // optional int64 give_coin = 2;
    if (has_give_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->give_coin());
    }

    // optional uint32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_give_safebox_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_give_safebox_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_give_safebox_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_give_safebox_rep::MergeFrom(const msg_give_safebox_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_give_uid()) {
      set_give_uid(from.give_uid());
    }
    if (from.has_give_coin()) {
      set_give_coin(from.give_coin());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_give_safebox_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_give_safebox_rep::CopyFrom(const msg_give_safebox_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_give_safebox_rep::IsInitialized() const {

  return true;
}

void msg_give_safebox_rep::Swap(msg_give_safebox_rep* other) {
  if (other != this) {
    std::swap(give_uid_, other->give_uid_);
    std::swap(give_coin_, other->give_coin_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_give_safebox_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_give_safebox_rep_descriptor_;
  metadata.reflection = msg_give_safebox_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_php_broadcast_rep::kMsgFieldNumber;
#endif  // !_MSC_VER

msg_php_broadcast_rep::msg_php_broadcast_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_php_broadcast_rep::InitAsDefaultInstance() {
}

msg_php_broadcast_rep::msg_php_broadcast_rep(const msg_php_broadcast_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_php_broadcast_rep::SharedCtor() {
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_php_broadcast_rep::~msg_php_broadcast_rep() {
  SharedDtor();
}

void msg_php_broadcast_rep::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void msg_php_broadcast_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_php_broadcast_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_php_broadcast_rep_descriptor_;
}

const msg_php_broadcast_rep& msg_php_broadcast_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_php_broadcast_rep* msg_php_broadcast_rep::default_instance_ = NULL;

msg_php_broadcast_rep* msg_php_broadcast_rep::New() const {
  return new msg_php_broadcast_rep;
}

void msg_php_broadcast_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_php_broadcast_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_php_broadcast_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_php_broadcast_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes msg = 1;
  if (has_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_php_broadcast_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_php_broadcast_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_php_broadcast_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_php_broadcast_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_php_broadcast_rep::MergeFrom(const msg_php_broadcast_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_php_broadcast_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_php_broadcast_rep::CopyFrom(const msg_php_broadcast_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_php_broadcast_rep::IsInitialized() const {

  return true;
}

void msg_php_broadcast_rep::Swap(msg_php_broadcast_rep* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_php_broadcast_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_php_broadcast_rep_descriptor_;
  metadata.reflection = msg_php_broadcast_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_system_broadcast_rep::kMsgFieldNumber;
#endif  // !_MSC_VER

msg_system_broadcast_rep::msg_system_broadcast_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_system_broadcast_rep::InitAsDefaultInstance() {
}

msg_system_broadcast_rep::msg_system_broadcast_rep(const msg_system_broadcast_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_system_broadcast_rep::SharedCtor() {
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_system_broadcast_rep::~msg_system_broadcast_rep() {
  SharedDtor();
}

void msg_system_broadcast_rep::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void msg_system_broadcast_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_system_broadcast_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_system_broadcast_rep_descriptor_;
}

const msg_system_broadcast_rep& msg_system_broadcast_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_system_broadcast_rep* msg_system_broadcast_rep::default_instance_ = NULL;

msg_system_broadcast_rep* msg_system_broadcast_rep::New() const {
  return new msg_system_broadcast_rep;
}

void msg_system_broadcast_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_system_broadcast_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_system_broadcast_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_system_broadcast_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes msg = 1;
  if (has_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_system_broadcast_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_system_broadcast_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_system_broadcast_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_system_broadcast_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_system_broadcast_rep::MergeFrom(const msg_system_broadcast_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_system_broadcast_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_system_broadcast_rep::CopyFrom(const msg_system_broadcast_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_system_broadcast_rep::IsInitialized() const {

  return true;
}

void msg_system_broadcast_rep::Swap(msg_system_broadcast_rep* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_system_broadcast_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_system_broadcast_rep_descriptor_;
  metadata.reflection = msg_system_broadcast_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_send_all_mission_rep::kMissionsFieldNumber;
#endif  // !_MSC_VER

msg_send_all_mission_rep::msg_send_all_mission_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_send_all_mission_rep::InitAsDefaultInstance() {
}

msg_send_all_mission_rep::msg_send_all_mission_rep(const msg_send_all_mission_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_send_all_mission_rep::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_send_all_mission_rep::~msg_send_all_mission_rep() {
  SharedDtor();
}

void msg_send_all_mission_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_send_all_mission_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_send_all_mission_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_send_all_mission_rep_descriptor_;
}

const msg_send_all_mission_rep& msg_send_all_mission_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_send_all_mission_rep* msg_send_all_mission_rep::default_instance_ = NULL;

msg_send_all_mission_rep* msg_send_all_mission_rep::New() const {
  return new msg_send_all_mission_rep;
}

void msg_send_all_mission_rep::Clear() {
  missions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_send_all_mission_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .net.mission_data missions = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_missions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_missions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_missions;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_send_all_mission_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .net.mission_data missions = 1;
  for (int i = 0; i < this->missions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->missions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_send_all_mission_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .net.mission_data missions = 1;
  for (int i = 0; i < this->missions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->missions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_send_all_mission_rep::ByteSize() const {
  int total_size = 0;

  // repeated .net.mission_data missions = 1;
  total_size += 1 * this->missions_size();
  for (int i = 0; i < this->missions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->missions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_send_all_mission_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_send_all_mission_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_send_all_mission_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_send_all_mission_rep::MergeFrom(const msg_send_all_mission_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  missions_.MergeFrom(from.missions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_send_all_mission_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_send_all_mission_rep::CopyFrom(const msg_send_all_mission_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_send_all_mission_rep::IsInitialized() const {

  return true;
}

void msg_send_all_mission_rep::Swap(msg_send_all_mission_rep* other) {
  if (other != this) {
    missions_.Swap(&other->missions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_send_all_mission_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_send_all_mission_rep_descriptor_;
  metadata.reflection = msg_send_all_mission_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_send_mission_rep::kMissionFieldNumber;
#endif  // !_MSC_VER

msg_send_mission_rep::msg_send_mission_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_send_mission_rep::InitAsDefaultInstance() {
  mission_ = const_cast< ::net::mission_data*>(&::net::mission_data::default_instance());
}

msg_send_mission_rep::msg_send_mission_rep(const msg_send_mission_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_send_mission_rep::SharedCtor() {
  _cached_size_ = 0;
  mission_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_send_mission_rep::~msg_send_mission_rep() {
  SharedDtor();
}

void msg_send_mission_rep::SharedDtor() {
  if (this != default_instance_) {
    delete mission_;
  }
}

void msg_send_mission_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_send_mission_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_send_mission_rep_descriptor_;
}

const msg_send_mission_rep& msg_send_mission_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_send_mission_rep* msg_send_mission_rep::default_instance_ = NULL;

msg_send_mission_rep* msg_send_mission_rep::New() const {
  return new msg_send_mission_rep;
}

void msg_send_mission_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mission()) {
      if (mission_ != NULL) mission_->::net::mission_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_send_mission_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .net.mission_data mission = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mission()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_send_mission_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .net.mission_data mission = 1;
  if (has_mission()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mission(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_send_mission_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .net.mission_data mission = 1;
  if (has_mission()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mission(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_send_mission_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .net.mission_data mission = 1;
    if (has_mission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mission());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_send_mission_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_send_mission_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_send_mission_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_send_mission_rep::MergeFrom(const msg_send_mission_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mission()) {
      mutable_mission()->::net::mission_data::MergeFrom(from.mission());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_send_mission_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_send_mission_rep::CopyFrom(const msg_send_mission_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_send_mission_rep::IsInitialized() const {

  return true;
}

void msg_send_mission_rep::Swap(msg_send_mission_rep* other) {
  if (other != this) {
    std::swap(mission_, other->mission_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_send_mission_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_send_mission_rep_descriptor_;
  metadata.reflection = msg_send_mission_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_get_mission_prize_req::kMsidFieldNumber;
#endif  // !_MSC_VER

msg_get_mission_prize_req::msg_get_mission_prize_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_get_mission_prize_req::InitAsDefaultInstance() {
}

msg_get_mission_prize_req::msg_get_mission_prize_req(const msg_get_mission_prize_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_get_mission_prize_req::SharedCtor() {
  _cached_size_ = 0;
  msid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_get_mission_prize_req::~msg_get_mission_prize_req() {
  SharedDtor();
}

void msg_get_mission_prize_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_get_mission_prize_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_get_mission_prize_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_get_mission_prize_req_descriptor_;
}

const msg_get_mission_prize_req& msg_get_mission_prize_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_get_mission_prize_req* msg_get_mission_prize_req::default_instance_ = NULL;

msg_get_mission_prize_req* msg_get_mission_prize_req::New() const {
  return new msg_get_mission_prize_req;
}

void msg_get_mission_prize_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_get_mission_prize_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 msid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msid_)));
          set_has_msid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_get_mission_prize_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 msid = 1;
  if (has_msid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_get_mission_prize_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 msid = 1;
  if (has_msid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_get_mission_prize_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 msid = 1;
    if (has_msid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_get_mission_prize_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_get_mission_prize_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_get_mission_prize_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_get_mission_prize_req::MergeFrom(const msg_get_mission_prize_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msid()) {
      set_msid(from.msid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_get_mission_prize_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_get_mission_prize_req::CopyFrom(const msg_get_mission_prize_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_get_mission_prize_req::IsInitialized() const {

  return true;
}

void msg_get_mission_prize_req::Swap(msg_get_mission_prize_req* other) {
  if (other != this) {
    std::swap(msid_, other->msid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_get_mission_prize_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_get_mission_prize_req_descriptor_;
  metadata.reflection = msg_get_mission_prize_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_get_mission_prize_rep::kResultFieldNumber;
const int msg_get_mission_prize_rep::kMissionFieldNumber;
const int msg_get_mission_prize_rep::kBaseinfoFieldNumber;
#endif  // !_MSC_VER

msg_get_mission_prize_rep::msg_get_mission_prize_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_get_mission_prize_rep::InitAsDefaultInstance() {
  mission_ = const_cast< ::net::mission_data*>(&::net::mission_data::default_instance());
  baseinfo_ = const_cast< ::net::base_info*>(&::net::base_info::default_instance());
}

msg_get_mission_prize_rep::msg_get_mission_prize_rep(const msg_get_mission_prize_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_get_mission_prize_rep::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  mission_ = NULL;
  baseinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_get_mission_prize_rep::~msg_get_mission_prize_rep() {
  SharedDtor();
}

void msg_get_mission_prize_rep::SharedDtor() {
  if (this != default_instance_) {
    delete mission_;
    delete baseinfo_;
  }
}

void msg_get_mission_prize_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_get_mission_prize_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_get_mission_prize_rep_descriptor_;
}

const msg_get_mission_prize_rep& msg_get_mission_prize_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_get_mission_prize_rep* msg_get_mission_prize_rep::default_instance_ = NULL;

msg_get_mission_prize_rep* msg_get_mission_prize_rep::New() const {
  return new msg_get_mission_prize_rep;
}

void msg_get_mission_prize_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (has_mission()) {
      if (mission_ != NULL) mission_->::net::mission_data::Clear();
    }
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::net::base_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_get_mission_prize_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mission;
        break;
      }

      // optional .net.mission_data mission = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mission:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mission()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_baseinfo;
        break;
      }

      // optional .net.base_info baseinfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_baseinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_get_mission_prize_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional .net.mission_data mission = 2;
  if (has_mission()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mission(), output);
  }

  // optional .net.base_info baseinfo = 3;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->baseinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_get_mission_prize_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional .net.mission_data mission = 2;
  if (has_mission()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mission(), target);
  }

  // optional .net.base_info baseinfo = 3;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->baseinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_get_mission_prize_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional .net.mission_data mission = 2;
    if (has_mission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mission());
    }

    // optional .net.base_info baseinfo = 3;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_get_mission_prize_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_get_mission_prize_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_get_mission_prize_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_get_mission_prize_rep::MergeFrom(const msg_get_mission_prize_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_mission()) {
      mutable_mission()->::net::mission_data::MergeFrom(from.mission());
    }
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::net::base_info::MergeFrom(from.baseinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_get_mission_prize_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_get_mission_prize_rep::CopyFrom(const msg_get_mission_prize_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_get_mission_prize_rep::IsInitialized() const {

  return true;
}

void msg_get_mission_prize_rep::Swap(msg_get_mission_prize_rep* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(mission_, other->mission_);
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_get_mission_prize_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_get_mission_prize_rep_descriptor_;
  metadata.reflection = msg_get_mission_prize_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_get_login_reward_req::kRewardFlagFieldNumber;
#endif  // !_MSC_VER

msg_get_login_reward_req::msg_get_login_reward_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_get_login_reward_req::InitAsDefaultInstance() {
}

msg_get_login_reward_req::msg_get_login_reward_req(const msg_get_login_reward_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_get_login_reward_req::SharedCtor() {
  _cached_size_ = 0;
  reward_flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_get_login_reward_req::~msg_get_login_reward_req() {
  SharedDtor();
}

void msg_get_login_reward_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_get_login_reward_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_get_login_reward_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_get_login_reward_req_descriptor_;
}

const msg_get_login_reward_req& msg_get_login_reward_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_get_login_reward_req* msg_get_login_reward_req::default_instance_ = NULL;

msg_get_login_reward_req* msg_get_login_reward_req::New() const {
  return new msg_get_login_reward_req;
}

void msg_get_login_reward_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reward_flag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_get_login_reward_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reward_flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_flag_)));
          set_has_reward_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_get_login_reward_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reward_flag = 1;
  if (has_reward_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reward_flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_get_login_reward_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reward_flag = 1;
  if (has_reward_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reward_flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_get_login_reward_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reward_flag = 1;
    if (has_reward_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_get_login_reward_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_get_login_reward_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_get_login_reward_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_get_login_reward_req::MergeFrom(const msg_get_login_reward_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reward_flag()) {
      set_reward_flag(from.reward_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_get_login_reward_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_get_login_reward_req::CopyFrom(const msg_get_login_reward_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_get_login_reward_req::IsInitialized() const {

  return true;
}

void msg_get_login_reward_req::Swap(msg_get_login_reward_req* other) {
  if (other != this) {
    std::swap(reward_flag_, other->reward_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_get_login_reward_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_get_login_reward_req_descriptor_;
  metadata.reflection = msg_get_login_reward_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_get_login_reward_rep::kRewardFlagFieldNumber;
const int msg_get_login_reward_rep::kResultFieldNumber;
#endif  // !_MSC_VER

msg_get_login_reward_rep::msg_get_login_reward_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_get_login_reward_rep::InitAsDefaultInstance() {
}

msg_get_login_reward_rep::msg_get_login_reward_rep(const msg_get_login_reward_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_get_login_reward_rep::SharedCtor() {
  _cached_size_ = 0;
  reward_flag_ = 0u;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_get_login_reward_rep::~msg_get_login_reward_rep() {
  SharedDtor();
}

void msg_get_login_reward_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_get_login_reward_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_get_login_reward_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_get_login_reward_rep_descriptor_;
}

const msg_get_login_reward_rep& msg_get_login_reward_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_get_login_reward_rep* msg_get_login_reward_rep::default_instance_ = NULL;

msg_get_login_reward_rep* msg_get_login_reward_rep::New() const {
  return new msg_get_login_reward_rep;
}

void msg_get_login_reward_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reward_flag_ = 0u;
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_get_login_reward_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reward_flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_flag_)));
          set_has_reward_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional uint32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_get_login_reward_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reward_flag = 1;
  if (has_reward_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reward_flag(), output);
  }

  // optional uint32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_get_login_reward_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reward_flag = 1;
  if (has_reward_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reward_flag(), target);
  }

  // optional uint32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_get_login_reward_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reward_flag = 1;
    if (has_reward_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_flag());
    }

    // optional uint32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_get_login_reward_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_get_login_reward_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_get_login_reward_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_get_login_reward_rep::MergeFrom(const msg_get_login_reward_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reward_flag()) {
      set_reward_flag(from.reward_flag());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_get_login_reward_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_get_login_reward_rep::CopyFrom(const msg_get_login_reward_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_get_login_reward_rep::IsInitialized() const {

  return true;
}

void msg_get_login_reward_rep::Swap(msg_get_login_reward_rep* other) {
  if (other != this) {
    std::swap(reward_flag_, other->reward_flag_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_get_login_reward_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_get_login_reward_rep_descriptor_;
  metadata.reflection = msg_get_login_reward_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_get_bankrupt_help_req::kHelpCountFieldNumber;
#endif  // !_MSC_VER

msg_get_bankrupt_help_req::msg_get_bankrupt_help_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_get_bankrupt_help_req::InitAsDefaultInstance() {
}

msg_get_bankrupt_help_req::msg_get_bankrupt_help_req(const msg_get_bankrupt_help_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_get_bankrupt_help_req::SharedCtor() {
  _cached_size_ = 0;
  help_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_get_bankrupt_help_req::~msg_get_bankrupt_help_req() {
  SharedDtor();
}

void msg_get_bankrupt_help_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_get_bankrupt_help_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_get_bankrupt_help_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_get_bankrupt_help_req_descriptor_;
}

const msg_get_bankrupt_help_req& msg_get_bankrupt_help_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_get_bankrupt_help_req* msg_get_bankrupt_help_req::default_instance_ = NULL;

msg_get_bankrupt_help_req* msg_get_bankrupt_help_req::New() const {
  return new msg_get_bankrupt_help_req;
}

void msg_get_bankrupt_help_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    help_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_get_bankrupt_help_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 help_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &help_count_)));
          set_has_help_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_get_bankrupt_help_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 help_count = 1;
  if (has_help_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->help_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_get_bankrupt_help_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 help_count = 1;
  if (has_help_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->help_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_get_bankrupt_help_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 help_count = 1;
    if (has_help_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->help_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_get_bankrupt_help_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_get_bankrupt_help_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_get_bankrupt_help_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_get_bankrupt_help_req::MergeFrom(const msg_get_bankrupt_help_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_help_count()) {
      set_help_count(from.help_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_get_bankrupt_help_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_get_bankrupt_help_req::CopyFrom(const msg_get_bankrupt_help_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_get_bankrupt_help_req::IsInitialized() const {

  return true;
}

void msg_get_bankrupt_help_req::Swap(msg_get_bankrupt_help_req* other) {
  if (other != this) {
    std::swap(help_count_, other->help_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_get_bankrupt_help_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_get_bankrupt_help_req_descriptor_;
  metadata.reflection = msg_get_bankrupt_help_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_get_bankrupt_help_rep::kResultFieldNumber;
const int msg_get_bankrupt_help_rep::kBankruptCountFieldNumber;
#endif  // !_MSC_VER

msg_get_bankrupt_help_rep::msg_get_bankrupt_help_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_get_bankrupt_help_rep::InitAsDefaultInstance() {
}

msg_get_bankrupt_help_rep::msg_get_bankrupt_help_rep(const msg_get_bankrupt_help_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_get_bankrupt_help_rep::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  bankrupt_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_get_bankrupt_help_rep::~msg_get_bankrupt_help_rep() {
  SharedDtor();
}

void msg_get_bankrupt_help_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_get_bankrupt_help_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_get_bankrupt_help_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_get_bankrupt_help_rep_descriptor_;
}

const msg_get_bankrupt_help_rep& msg_get_bankrupt_help_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_get_bankrupt_help_rep* msg_get_bankrupt_help_rep::default_instance_ = NULL;

msg_get_bankrupt_help_rep* msg_get_bankrupt_help_rep::New() const {
  return new msg_get_bankrupt_help_rep;
}

void msg_get_bankrupt_help_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    bankrupt_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_get_bankrupt_help_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bankrupt_count;
        break;
      }

      // optional uint32 bankrupt_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bankrupt_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bankrupt_count_)));
          set_has_bankrupt_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_get_bankrupt_help_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional uint32 bankrupt_count = 2;
  if (has_bankrupt_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bankrupt_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_get_bankrupt_help_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional uint32 bankrupt_count = 2;
  if (has_bankrupt_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bankrupt_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_get_bankrupt_help_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 bankrupt_count = 2;
    if (has_bankrupt_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bankrupt_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_get_bankrupt_help_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_get_bankrupt_help_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_get_bankrupt_help_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_get_bankrupt_help_rep::MergeFrom(const msg_get_bankrupt_help_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_bankrupt_count()) {
      set_bankrupt_count(from.bankrupt_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_get_bankrupt_help_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_get_bankrupt_help_rep::CopyFrom(const msg_get_bankrupt_help_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_get_bankrupt_help_rep::IsInitialized() const {

  return true;
}

void msg_get_bankrupt_help_rep::Swap(msg_get_bankrupt_help_rep* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(bankrupt_count_, other->bankrupt_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_get_bankrupt_help_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_get_bankrupt_help_rep_descriptor_;
  metadata.reflection = msg_get_bankrupt_help_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_exchange_score_req::kExchangeTypeFieldNumber;
const int msg_exchange_score_req::kExchangeIdFieldNumber;
#endif  // !_MSC_VER

msg_exchange_score_req::msg_exchange_score_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_exchange_score_req::InitAsDefaultInstance() {
}

msg_exchange_score_req::msg_exchange_score_req(const msg_exchange_score_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_exchange_score_req::SharedCtor() {
  _cached_size_ = 0;
  exchange_type_ = 0u;
  exchange_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_exchange_score_req::~msg_exchange_score_req() {
  SharedDtor();
}

void msg_exchange_score_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_exchange_score_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_exchange_score_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_exchange_score_req_descriptor_;
}

const msg_exchange_score_req& msg_exchange_score_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_exchange_score_req* msg_exchange_score_req::default_instance_ = NULL;

msg_exchange_score_req* msg_exchange_score_req::New() const {
  return new msg_exchange_score_req;
}

void msg_exchange_score_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exchange_type_ = 0u;
    exchange_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_exchange_score_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 exchange_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exchange_type_)));
          set_has_exchange_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exchange_id;
        break;
      }

      // optional uint32 exchange_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exchange_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exchange_id_)));
          set_has_exchange_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_exchange_score_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 exchange_type = 1;
  if (has_exchange_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->exchange_type(), output);
  }

  // optional uint32 exchange_id = 2;
  if (has_exchange_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->exchange_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_exchange_score_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 exchange_type = 1;
  if (has_exchange_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->exchange_type(), target);
  }

  // optional uint32 exchange_id = 2;
  if (has_exchange_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->exchange_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_exchange_score_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 exchange_type = 1;
    if (has_exchange_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exchange_type());
    }

    // optional uint32 exchange_id = 2;
    if (has_exchange_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exchange_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_exchange_score_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_exchange_score_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_exchange_score_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_exchange_score_req::MergeFrom(const msg_exchange_score_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exchange_type()) {
      set_exchange_type(from.exchange_type());
    }
    if (from.has_exchange_id()) {
      set_exchange_id(from.exchange_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_exchange_score_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_exchange_score_req::CopyFrom(const msg_exchange_score_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_exchange_score_req::IsInitialized() const {

  return true;
}

void msg_exchange_score_req::Swap(msg_exchange_score_req* other) {
  if (other != this) {
    std::swap(exchange_type_, other->exchange_type_);
    std::swap(exchange_id_, other->exchange_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_exchange_score_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_exchange_score_req_descriptor_;
  metadata.reflection = msg_exchange_score_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_exchange_score_rep::kExchangeTypeFieldNumber;
const int msg_exchange_score_rep::kExchangeIdFieldNumber;
const int msg_exchange_score_rep::kResultFieldNumber;
#endif  // !_MSC_VER

msg_exchange_score_rep::msg_exchange_score_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_exchange_score_rep::InitAsDefaultInstance() {
}

msg_exchange_score_rep::msg_exchange_score_rep(const msg_exchange_score_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_exchange_score_rep::SharedCtor() {
  _cached_size_ = 0;
  exchange_type_ = 0u;
  exchange_id_ = 0u;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_exchange_score_rep::~msg_exchange_score_rep() {
  SharedDtor();
}

void msg_exchange_score_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_exchange_score_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_exchange_score_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_exchange_score_rep_descriptor_;
}

const msg_exchange_score_rep& msg_exchange_score_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_exchange_score_rep* msg_exchange_score_rep::default_instance_ = NULL;

msg_exchange_score_rep* msg_exchange_score_rep::New() const {
  return new msg_exchange_score_rep;
}

void msg_exchange_score_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exchange_type_ = 0u;
    exchange_id_ = 0u;
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_exchange_score_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 exchange_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exchange_type_)));
          set_has_exchange_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exchange_id;
        break;
      }

      // optional uint32 exchange_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exchange_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exchange_id_)));
          set_has_exchange_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional uint32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_exchange_score_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 exchange_type = 1;
  if (has_exchange_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->exchange_type(), output);
  }

  // optional uint32 exchange_id = 2;
  if (has_exchange_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->exchange_id(), output);
  }

  // optional uint32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_exchange_score_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 exchange_type = 1;
  if (has_exchange_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->exchange_type(), target);
  }

  // optional uint32 exchange_id = 2;
  if (has_exchange_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->exchange_id(), target);
  }

  // optional uint32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_exchange_score_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 exchange_type = 1;
    if (has_exchange_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exchange_type());
    }

    // optional uint32 exchange_id = 2;
    if (has_exchange_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exchange_id());
    }

    // optional uint32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_exchange_score_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_exchange_score_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_exchange_score_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_exchange_score_rep::MergeFrom(const msg_exchange_score_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exchange_type()) {
      set_exchange_type(from.exchange_type());
    }
    if (from.has_exchange_id()) {
      set_exchange_id(from.exchange_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_exchange_score_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_exchange_score_rep::CopyFrom(const msg_exchange_score_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_exchange_score_rep::IsInitialized() const {

  return true;
}

void msg_exchange_score_rep::Swap(msg_exchange_score_rep* other) {
  if (other != this) {
    std::swap(exchange_type_, other->exchange_type_);
    std::swap(exchange_id_, other->exchange_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_exchange_score_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_exchange_score_rep_descriptor_;
  metadata.reflection = msg_exchange_score_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_speak_broadcast_req::kMsgFieldNumber;
#endif  // !_MSC_VER

msg_speak_broadcast_req::msg_speak_broadcast_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_speak_broadcast_req::InitAsDefaultInstance() {
}

msg_speak_broadcast_req::msg_speak_broadcast_req(const msg_speak_broadcast_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_speak_broadcast_req::SharedCtor() {
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_speak_broadcast_req::~msg_speak_broadcast_req() {
  SharedDtor();
}

void msg_speak_broadcast_req::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void msg_speak_broadcast_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_speak_broadcast_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_speak_broadcast_req_descriptor_;
}

const msg_speak_broadcast_req& msg_speak_broadcast_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_speak_broadcast_req* msg_speak_broadcast_req::default_instance_ = NULL;

msg_speak_broadcast_req* msg_speak_broadcast_req::New() const {
  return new msg_speak_broadcast_req;
}

void msg_speak_broadcast_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_speak_broadcast_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_speak_broadcast_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_speak_broadcast_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes msg = 1;
  if (has_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_speak_broadcast_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_speak_broadcast_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_speak_broadcast_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_speak_broadcast_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_speak_broadcast_req::MergeFrom(const msg_speak_broadcast_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_speak_broadcast_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_speak_broadcast_req::CopyFrom(const msg_speak_broadcast_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_speak_broadcast_req::IsInitialized() const {

  return true;
}

void msg_speak_broadcast_req::Swap(msg_speak_broadcast_req* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_speak_broadcast_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_speak_broadcast_req_descriptor_;
  metadata.reflection = msg_speak_broadcast_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_speak_broadcast_rep::kSendIdFieldNumber;
const int msg_speak_broadcast_rep::kSendNameFieldNumber;
const int msg_speak_broadcast_rep::kMsgFieldNumber;
#endif  // !_MSC_VER

msg_speak_broadcast_rep::msg_speak_broadcast_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_speak_broadcast_rep::InitAsDefaultInstance() {
}

msg_speak_broadcast_rep::msg_speak_broadcast_rep(const msg_speak_broadcast_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_speak_broadcast_rep::SharedCtor() {
  _cached_size_ = 0;
  send_id_ = 0u;
  send_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_speak_broadcast_rep::~msg_speak_broadcast_rep() {
  SharedDtor();
}

void msg_speak_broadcast_rep::SharedDtor() {
  if (send_name_ != &::google::protobuf::internal::kEmptyString) {
    delete send_name_;
  }
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void msg_speak_broadcast_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_speak_broadcast_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_speak_broadcast_rep_descriptor_;
}

const msg_speak_broadcast_rep& msg_speak_broadcast_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_speak_broadcast_rep* msg_speak_broadcast_rep::default_instance_ = NULL;

msg_speak_broadcast_rep* msg_speak_broadcast_rep::New() const {
  return new msg_speak_broadcast_rep;
}

void msg_speak_broadcast_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    send_id_ = 0u;
    if (has_send_name()) {
      if (send_name_ != &::google::protobuf::internal::kEmptyString) {
        send_name_->clear();
      }
    }
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_speak_broadcast_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 send_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_id_)));
          set_has_send_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_send_name;
        break;
      }

      // optional bytes send_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_send_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_send_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }

      // optional bytes msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_speak_broadcast_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 send_id = 1;
  if (has_send_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->send_id(), output);
  }

  // optional bytes send_name = 2;
  if (has_send_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->send_name(), output);
  }

  // optional bytes msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_speak_broadcast_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 send_id = 1;
  if (has_send_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->send_id(), target);
  }

  // optional bytes send_name = 2;
  if (has_send_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->send_name(), target);
  }

  // optional bytes msg = 3;
  if (has_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_speak_broadcast_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 send_id = 1;
    if (has_send_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->send_id());
    }

    // optional bytes send_name = 2;
    if (has_send_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->send_name());
    }

    // optional bytes msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_speak_broadcast_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_speak_broadcast_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_speak_broadcast_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_speak_broadcast_rep::MergeFrom(const msg_speak_broadcast_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_send_id()) {
      set_send_id(from.send_id());
    }
    if (from.has_send_name()) {
      set_send_name(from.send_name());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_speak_broadcast_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_speak_broadcast_rep::CopyFrom(const msg_speak_broadcast_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_speak_broadcast_rep::IsInitialized() const {

  return true;
}

void msg_speak_broadcast_rep::Swap(msg_speak_broadcast_rep* other) {
  if (other != this) {
    std::swap(send_id_, other->send_id_);
    std::swap(send_name_, other->send_name_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_speak_broadcast_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_speak_broadcast_rep_descriptor_;
  metadata.reflection = msg_speak_broadcast_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_get_history_speak::kGetTimeFieldNumber;
#endif  // !_MSC_VER

msg_get_history_speak::msg_get_history_speak()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_get_history_speak::InitAsDefaultInstance() {
}

msg_get_history_speak::msg_get_history_speak(const msg_get_history_speak& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_get_history_speak::SharedCtor() {
  _cached_size_ = 0;
  get_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_get_history_speak::~msg_get_history_speak() {
  SharedDtor();
}

void msg_get_history_speak::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_get_history_speak::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_get_history_speak::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_get_history_speak_descriptor_;
}

const msg_get_history_speak& msg_get_history_speak::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_get_history_speak* msg_get_history_speak::default_instance_ = NULL;

msg_get_history_speak* msg_get_history_speak::New() const {
  return new msg_get_history_speak;
}

void msg_get_history_speak::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    get_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_get_history_speak::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 get_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &get_time_)));
          set_has_get_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_get_history_speak::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 get_time = 1;
  if (has_get_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->get_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_get_history_speak::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 get_time = 1;
  if (has_get_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->get_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_get_history_speak::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 get_time = 1;
    if (has_get_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->get_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_get_history_speak::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_get_history_speak* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_get_history_speak*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_get_history_speak::MergeFrom(const msg_get_history_speak& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_get_time()) {
      set_get_time(from.get_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_get_history_speak::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_get_history_speak::CopyFrom(const msg_get_history_speak& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_get_history_speak::IsInitialized() const {

  return true;
}

void msg_get_history_speak::Swap(msg_get_history_speak* other) {
  if (other != this) {
    std::swap(get_time_, other->get_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_get_history_speak::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_get_history_speak_descriptor_;
  metadata.reflection = msg_get_history_speak_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_send_history_speak::kMsgsFieldNumber;
#endif  // !_MSC_VER

msg_send_history_speak::msg_send_history_speak()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_send_history_speak::InitAsDefaultInstance() {
}

msg_send_history_speak::msg_send_history_speak(const msg_send_history_speak& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_send_history_speak::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_send_history_speak::~msg_send_history_speak() {
  SharedDtor();
}

void msg_send_history_speak::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_send_history_speak::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_send_history_speak::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_send_history_speak_descriptor_;
}

const msg_send_history_speak& msg_send_history_speak::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_send_history_speak* msg_send_history_speak::default_instance_ = NULL;

msg_send_history_speak* msg_send_history_speak::New() const {
  return new msg_send_history_speak;
}

void msg_send_history_speak::Clear() {
  msgs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_send_history_speak::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .net.msg_speak_broadcast_rep msgs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msgs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_msgs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_send_history_speak::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .net.msg_speak_broadcast_rep msgs = 1;
  for (int i = 0; i < this->msgs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msgs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_send_history_speak::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .net.msg_speak_broadcast_rep msgs = 1;
  for (int i = 0; i < this->msgs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msgs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_send_history_speak::ByteSize() const {
  int total_size = 0;

  // repeated .net.msg_speak_broadcast_rep msgs = 1;
  total_size += 1 * this->msgs_size();
  for (int i = 0; i < this->msgs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msgs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_send_history_speak::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_send_history_speak* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_send_history_speak*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_send_history_speak::MergeFrom(const msg_send_history_speak& from) {
  GOOGLE_CHECK_NE(&from, this);
  msgs_.MergeFrom(from.msgs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_send_history_speak::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_send_history_speak::CopyFrom(const msg_send_history_speak& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_send_history_speak::IsInitialized() const {

  return true;
}

void msg_send_history_speak::Swap(msg_send_history_speak* other) {
  if (other != this) {
    msgs_.Swap(&other->msgs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_send_history_speak::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_send_history_speak_descriptor_;
  metadata.reflection = msg_send_history_speak_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_speak_oper_rep::kResultFieldNumber;
const int msg_speak_oper_rep::kCdtimeFieldNumber;
#endif  // !_MSC_VER

msg_speak_oper_rep::msg_speak_oper_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_speak_oper_rep::InitAsDefaultInstance() {
}

msg_speak_oper_rep::msg_speak_oper_rep(const msg_speak_oper_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_speak_oper_rep::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  cdtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_speak_oper_rep::~msg_speak_oper_rep() {
  SharedDtor();
}

void msg_speak_oper_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_speak_oper_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_speak_oper_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_speak_oper_rep_descriptor_;
}

const msg_speak_oper_rep& msg_speak_oper_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_speak_oper_rep* msg_speak_oper_rep::default_instance_ = NULL;

msg_speak_oper_rep* msg_speak_oper_rep::New() const {
  return new msg_speak_oper_rep;
}

void msg_speak_oper_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    cdtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_speak_oper_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cdtime;
        break;
      }

      // optional uint32 cdtime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cdtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cdtime_)));
          set_has_cdtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_speak_oper_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional uint32 cdtime = 2;
  if (has_cdtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cdtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_speak_oper_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional uint32 cdtime = 2;
  if (has_cdtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cdtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_speak_oper_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 cdtime = 2;
    if (has_cdtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cdtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_speak_oper_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_speak_oper_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_speak_oper_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_speak_oper_rep::MergeFrom(const msg_speak_oper_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_cdtime()) {
      set_cdtime(from.cdtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_speak_oper_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_speak_oper_rep::CopyFrom(const msg_speak_oper_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_speak_oper_rep::IsInitialized() const {

  return true;
}

void msg_speak_oper_rep::Swap(msg_speak_oper_rep* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(cdtime_, other->cdtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_speak_oper_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_speak_oper_rep_descriptor_;
  metadata.reflection = msg_speak_oper_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

msg_get_server_info::msg_get_server_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_get_server_info::InitAsDefaultInstance() {
}

msg_get_server_info::msg_get_server_info(const msg_get_server_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_get_server_info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_get_server_info::~msg_get_server_info() {
  SharedDtor();
}

void msg_get_server_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_get_server_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_get_server_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_get_server_info_descriptor_;
}

const msg_get_server_info& msg_get_server_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_get_server_info* msg_get_server_info::default_instance_ = NULL;

msg_get_server_info* msg_get_server_info::New() const {
  return new msg_get_server_info;
}

void msg_get_server_info::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_get_server_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void msg_get_server_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_get_server_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_get_server_info::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_get_server_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_get_server_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_get_server_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_get_server_info::MergeFrom(const msg_get_server_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_get_server_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_get_server_info::CopyFrom(const msg_get_server_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_get_server_info::IsInitialized() const {

  return true;
}

void msg_get_server_info::Swap(msg_get_server_info* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_get_server_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_get_server_info_descriptor_;
  metadata.reflection = msg_get_server_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int server_info::kSvridFieldNumber;
const int server_info::kPlayerNumFieldNumber;
const int server_info::kRobotNumFieldNumber;
const int server_info::kGameTypeFieldNumber;
#endif  // !_MSC_VER

server_info::server_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void server_info::InitAsDefaultInstance() {
}

server_info::server_info(const server_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void server_info::SharedCtor() {
  _cached_size_ = 0;
  svrid_ = 0u;
  player_num_ = 0u;
  robot_num_ = 0u;
  game_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

server_info::~server_info() {
  SharedDtor();
}

void server_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void server_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* server_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return server_info_descriptor_;
}

const server_info& server_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

server_info* server_info::default_instance_ = NULL;

server_info* server_info::New() const {
  return new server_info;
}

void server_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    svrid_ = 0u;
    player_num_ = 0u;
    robot_num_ = 0u;
    game_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool server_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 svrid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svrid_)));
          set_has_svrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_num;
        break;
      }

      // optional uint32 player_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_num_)));
          set_has_player_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_robot_num;
        break;
      }

      // optional uint32 robot_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robot_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &robot_num_)));
          set_has_robot_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game_type;
        break;
      }

      // optional uint32 game_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
          set_has_game_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void server_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 svrid = 1;
  if (has_svrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->svrid(), output);
  }

  // optional uint32 player_num = 2;
  if (has_player_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->player_num(), output);
  }

  // optional uint32 robot_num = 3;
  if (has_robot_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->robot_num(), output);
  }

  // optional uint32 game_type = 4;
  if (has_game_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* server_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 svrid = 1;
  if (has_svrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->svrid(), target);
  }

  // optional uint32 player_num = 2;
  if (has_player_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->player_num(), target);
  }

  // optional uint32 robot_num = 3;
  if (has_robot_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->robot_num(), target);
  }

  // optional uint32 game_type = 4;
  if (has_game_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int server_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 svrid = 1;
    if (has_svrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svrid());
    }

    // optional uint32 player_num = 2;
    if (has_player_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_num());
    }

    // optional uint32 robot_num = 3;
    if (has_robot_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->robot_num());
    }

    // optional uint32 game_type = 4;
    if (has_game_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void server_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const server_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const server_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void server_info::MergeFrom(const server_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svrid()) {
      set_svrid(from.svrid());
    }
    if (from.has_player_num()) {
      set_player_num(from.player_num());
    }
    if (from.has_robot_num()) {
      set_robot_num(from.robot_num());
    }
    if (from.has_game_type()) {
      set_game_type(from.game_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void server_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void server_info::CopyFrom(const server_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool server_info::IsInitialized() const {

  return true;
}

void server_info::Swap(server_info* other) {
  if (other != this) {
    std::swap(svrid_, other->svrid_);
    std::swap(player_num_, other->player_num_);
    std::swap(robot_num_, other->robot_num_);
    std::swap(game_type_, other->game_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata server_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = server_info_descriptor_;
  metadata.reflection = server_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_send_server_info::kServersFieldNumber;
#endif  // !_MSC_VER

msg_send_server_info::msg_send_server_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_send_server_info::InitAsDefaultInstance() {
}

msg_send_server_info::msg_send_server_info(const msg_send_server_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_send_server_info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_send_server_info::~msg_send_server_info() {
  SharedDtor();
}

void msg_send_server_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_send_server_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_send_server_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_send_server_info_descriptor_;
}

const msg_send_server_info& msg_send_server_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_send_server_info* msg_send_server_info::default_instance_ = NULL;

msg_send_server_info* msg_send_server_info::New() const {
  return new msg_send_server_info;
}

void msg_send_server_info::Clear() {
  servers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_send_server_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .net.server_info servers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_servers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_servers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_servers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_send_server_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .net.server_info servers = 1;
  for (int i = 0; i < this->servers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->servers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_send_server_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .net.server_info servers = 1;
  for (int i = 0; i < this->servers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->servers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_send_server_info::ByteSize() const {
  int total_size = 0;

  // repeated .net.server_info servers = 1;
  total_size += 1 * this->servers_size();
  for (int i = 0; i < this->servers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->servers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_send_server_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_send_server_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_send_server_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_send_server_info::MergeFrom(const msg_send_server_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  servers_.MergeFrom(from.servers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_send_server_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_send_server_info::CopyFrom(const msg_send_server_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_send_server_info::IsInitialized() const {

  return true;
}

void msg_send_server_info::Swap(msg_send_server_info* other) {
  if (other != this) {
    servers_.Swap(&other->servers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_send_server_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_send_server_info_descriptor_;
  metadata.reflection = msg_send_server_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_rooms_info_req::kGameTypeFieldNumber;
#endif  // !_MSC_VER

msg_rooms_info_req::msg_rooms_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_rooms_info_req::InitAsDefaultInstance() {
}

msg_rooms_info_req::msg_rooms_info_req(const msg_rooms_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_rooms_info_req::SharedCtor() {
  _cached_size_ = 0;
  game_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_rooms_info_req::~msg_rooms_info_req() {
  SharedDtor();
}

void msg_rooms_info_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_rooms_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_rooms_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_rooms_info_req_descriptor_;
}

const msg_rooms_info_req& msg_rooms_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_rooms_info_req* msg_rooms_info_req::default_instance_ = NULL;

msg_rooms_info_req* msg_rooms_info_req::New() const {
  return new msg_rooms_info_req;
}

void msg_rooms_info_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_rooms_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 game_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
          set_has_game_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_rooms_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 game_type = 1;
  if (has_game_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_rooms_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 game_type = 1;
  if (has_game_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_rooms_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 game_type = 1;
    if (has_game_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_rooms_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_rooms_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_rooms_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_rooms_info_req::MergeFrom(const msg_rooms_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_type()) {
      set_game_type(from.game_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_rooms_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_rooms_info_req::CopyFrom(const msg_rooms_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_rooms_info_req::IsInitialized() const {

  return true;
}

void msg_rooms_info_req::Swap(msg_rooms_info_req* other) {
  if (other != this) {
    std::swap(game_type_, other->game_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_rooms_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_rooms_info_req_descriptor_;
  metadata.reflection = msg_rooms_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_rooms_info_rep::kRoomsFieldNumber;
const int msg_rooms_info_rep::kCurRoomidFieldNumber;
#endif  // !_MSC_VER

msg_rooms_info_rep::msg_rooms_info_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_rooms_info_rep::InitAsDefaultInstance() {
}

msg_rooms_info_rep::msg_rooms_info_rep(const msg_rooms_info_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_rooms_info_rep::SharedCtor() {
  _cached_size_ = 0;
  cur_roomid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_rooms_info_rep::~msg_rooms_info_rep() {
  SharedDtor();
}

void msg_rooms_info_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_rooms_info_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_rooms_info_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_rooms_info_rep_descriptor_;
}

const msg_rooms_info_rep& msg_rooms_info_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_rooms_info_rep* msg_rooms_info_rep::default_instance_ = NULL;

msg_rooms_info_rep* msg_rooms_info_rep::New() const {
  return new msg_rooms_info_rep;
}

void msg_rooms_info_rep::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    cur_roomid_ = 0u;
  }
  rooms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_rooms_info_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .net.room_info rooms = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rooms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rooms()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rooms;
        if (input->ExpectTag(16)) goto parse_cur_roomid;
        break;
      }

      // optional uint32 cur_roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_roomid_)));
          set_has_cur_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_rooms_info_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .net.room_info rooms = 1;
  for (int i = 0; i < this->rooms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rooms(i), output);
  }

  // optional uint32 cur_roomid = 2;
  if (has_cur_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cur_roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_rooms_info_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .net.room_info rooms = 1;
  for (int i = 0; i < this->rooms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rooms(i), target);
  }

  // optional uint32 cur_roomid = 2;
  if (has_cur_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cur_roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_rooms_info_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 cur_roomid = 2;
    if (has_cur_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_roomid());
    }

  }
  // repeated .net.room_info rooms = 1;
  total_size += 1 * this->rooms_size();
  for (int i = 0; i < this->rooms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rooms(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_rooms_info_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_rooms_info_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_rooms_info_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_rooms_info_rep::MergeFrom(const msg_rooms_info_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  rooms_.MergeFrom(from.rooms_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_cur_roomid()) {
      set_cur_roomid(from.cur_roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_rooms_info_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_rooms_info_rep::CopyFrom(const msg_rooms_info_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_rooms_info_rep::IsInitialized() const {

  return true;
}

void msg_rooms_info_rep::Swap(msg_rooms_info_rep* other) {
  if (other != this) {
    rooms_.Swap(&other->rooms_);
    std::swap(cur_roomid_, other->cur_roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_rooms_info_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_rooms_info_rep_descriptor_;
  metadata.reflection = msg_rooms_info_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_back_lobby_req::kUidFieldNumber;
#endif  // !_MSC_VER

msg_back_lobby_req::msg_back_lobby_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_back_lobby_req::InitAsDefaultInstance() {
}

msg_back_lobby_req::msg_back_lobby_req(const msg_back_lobby_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_back_lobby_req::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_back_lobby_req::~msg_back_lobby_req() {
  SharedDtor();
}

void msg_back_lobby_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_back_lobby_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_back_lobby_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_back_lobby_req_descriptor_;
}

const msg_back_lobby_req& msg_back_lobby_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_back_lobby_req* msg_back_lobby_req::default_instance_ = NULL;

msg_back_lobby_req* msg_back_lobby_req::New() const {
  return new msg_back_lobby_req;
}

void msg_back_lobby_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_back_lobby_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_back_lobby_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_back_lobby_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_back_lobby_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_back_lobby_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_back_lobby_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_back_lobby_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_back_lobby_req::MergeFrom(const msg_back_lobby_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_back_lobby_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_back_lobby_req::CopyFrom(const msg_back_lobby_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_back_lobby_req::IsInitialized() const {

  return true;
}

void msg_back_lobby_req::Swap(msg_back_lobby_req* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_back_lobby_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_back_lobby_req_descriptor_;
  metadata.reflection = msg_back_lobby_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_back_lobby_rep::kResultFieldNumber;
#endif  // !_MSC_VER

msg_back_lobby_rep::msg_back_lobby_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_back_lobby_rep::InitAsDefaultInstance() {
}

msg_back_lobby_rep::msg_back_lobby_rep(const msg_back_lobby_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_back_lobby_rep::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_back_lobby_rep::~msg_back_lobby_rep() {
  SharedDtor();
}

void msg_back_lobby_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_back_lobby_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_back_lobby_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_back_lobby_rep_descriptor_;
}

const msg_back_lobby_rep& msg_back_lobby_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_back_lobby_rep* msg_back_lobby_rep::default_instance_ = NULL;

msg_back_lobby_rep* msg_back_lobby_rep::New() const {
  return new msg_back_lobby_rep;
}

void msg_back_lobby_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_back_lobby_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_back_lobby_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_back_lobby_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_back_lobby_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_back_lobby_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_back_lobby_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_back_lobby_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_back_lobby_rep::MergeFrom(const msg_back_lobby_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_back_lobby_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_back_lobby_rep::CopyFrom(const msg_back_lobby_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_back_lobby_rep::IsInitialized() const {

  return true;
}

void msg_back_lobby_rep::Swap(msg_back_lobby_rep* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_back_lobby_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_back_lobby_rep_descriptor_;
  metadata.reflection = msg_back_lobby_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_goto_gamesvr_req::kSvridFieldNumber;
#endif  // !_MSC_VER

msg_goto_gamesvr_req::msg_goto_gamesvr_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_goto_gamesvr_req::InitAsDefaultInstance() {
}

msg_goto_gamesvr_req::msg_goto_gamesvr_req(const msg_goto_gamesvr_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_goto_gamesvr_req::SharedCtor() {
  _cached_size_ = 0;
  svrid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_goto_gamesvr_req::~msg_goto_gamesvr_req() {
  SharedDtor();
}

void msg_goto_gamesvr_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_goto_gamesvr_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_goto_gamesvr_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_goto_gamesvr_req_descriptor_;
}

const msg_goto_gamesvr_req& msg_goto_gamesvr_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_goto_gamesvr_req* msg_goto_gamesvr_req::default_instance_ = NULL;

msg_goto_gamesvr_req* msg_goto_gamesvr_req::New() const {
  return new msg_goto_gamesvr_req;
}

void msg_goto_gamesvr_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    svrid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_goto_gamesvr_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 svrid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svrid_)));
          set_has_svrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_goto_gamesvr_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 svrid = 1;
  if (has_svrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->svrid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_goto_gamesvr_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 svrid = 1;
  if (has_svrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->svrid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_goto_gamesvr_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 svrid = 1;
    if (has_svrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svrid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_goto_gamesvr_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_goto_gamesvr_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_goto_gamesvr_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_goto_gamesvr_req::MergeFrom(const msg_goto_gamesvr_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svrid()) {
      set_svrid(from.svrid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_goto_gamesvr_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_goto_gamesvr_req::CopyFrom(const msg_goto_gamesvr_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_goto_gamesvr_req::IsInitialized() const {

  return true;
}

void msg_goto_gamesvr_req::Swap(msg_goto_gamesvr_req* other) {
  if (other != this) {
    std::swap(svrid_, other->svrid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_goto_gamesvr_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_goto_gamesvr_req_descriptor_;
  metadata.reflection = msg_goto_gamesvr_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_goto_gamesvr_rep::kResultFieldNumber;
const int msg_goto_gamesvr_rep::kSvridFieldNumber;
#endif  // !_MSC_VER

msg_goto_gamesvr_rep::msg_goto_gamesvr_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_goto_gamesvr_rep::InitAsDefaultInstance() {
}

msg_goto_gamesvr_rep::msg_goto_gamesvr_rep(const msg_goto_gamesvr_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_goto_gamesvr_rep::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  svrid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_goto_gamesvr_rep::~msg_goto_gamesvr_rep() {
  SharedDtor();
}

void msg_goto_gamesvr_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_goto_gamesvr_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_goto_gamesvr_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_goto_gamesvr_rep_descriptor_;
}

const msg_goto_gamesvr_rep& msg_goto_gamesvr_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_goto_gamesvr_rep* msg_goto_gamesvr_rep::default_instance_ = NULL;

msg_goto_gamesvr_rep* msg_goto_gamesvr_rep::New() const {
  return new msg_goto_gamesvr_rep;
}

void msg_goto_gamesvr_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    svrid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_goto_gamesvr_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_svrid;
        break;
      }

      // optional uint32 svrid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_svrid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svrid_)));
          set_has_svrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_goto_gamesvr_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional uint32 svrid = 2;
  if (has_svrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->svrid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_goto_gamesvr_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional uint32 svrid = 2;
  if (has_svrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->svrid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_goto_gamesvr_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 svrid = 2;
    if (has_svrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svrid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_goto_gamesvr_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_goto_gamesvr_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_goto_gamesvr_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_goto_gamesvr_rep::MergeFrom(const msg_goto_gamesvr_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_svrid()) {
      set_svrid(from.svrid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_goto_gamesvr_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_goto_gamesvr_rep::CopyFrom(const msg_goto_gamesvr_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_goto_gamesvr_rep::IsInitialized() const {

  return true;
}

void msg_goto_gamesvr_rep::Swap(msg_goto_gamesvr_rep* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(svrid_, other->svrid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_goto_gamesvr_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_goto_gamesvr_rep_descriptor_;
  metadata.reflection = msg_goto_gamesvr_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_enter_room_req::kRoomIdFieldNumber;
#endif  // !_MSC_VER

msg_enter_room_req::msg_enter_room_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_enter_room_req::InitAsDefaultInstance() {
}

msg_enter_room_req::msg_enter_room_req(const msg_enter_room_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_enter_room_req::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_enter_room_req::~msg_enter_room_req() {
  SharedDtor();
}

void msg_enter_room_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_enter_room_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_enter_room_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_enter_room_req_descriptor_;
}

const msg_enter_room_req& msg_enter_room_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_enter_room_req* msg_enter_room_req::default_instance_ = NULL;

msg_enter_room_req* msg_enter_room_req::New() const {
  return new msg_enter_room_req;
}

void msg_enter_room_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_enter_room_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 room_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_enter_room_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->room_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_enter_room_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->room_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_enter_room_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_enter_room_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_enter_room_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_enter_room_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_enter_room_req::MergeFrom(const msg_enter_room_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_enter_room_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_enter_room_req::CopyFrom(const msg_enter_room_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_enter_room_req::IsInitialized() const {

  return true;
}

void msg_enter_room_req::Swap(msg_enter_room_req* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_enter_room_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_enter_room_req_descriptor_;
  metadata.reflection = msg_enter_room_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_enter_novice_welfare_room_req::kMaxjettonrateFieldNumber;
#endif  // !_MSC_VER

msg_enter_novice_welfare_room_req::msg_enter_novice_welfare_room_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_enter_novice_welfare_room_req::InitAsDefaultInstance() {
}

msg_enter_novice_welfare_room_req::msg_enter_novice_welfare_room_req(const msg_enter_novice_welfare_room_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_enter_novice_welfare_room_req::SharedCtor() {
  _cached_size_ = 0;
  maxjettonrate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_enter_novice_welfare_room_req::~msg_enter_novice_welfare_room_req() {
  SharedDtor();
}

void msg_enter_novice_welfare_room_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_enter_novice_welfare_room_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_enter_novice_welfare_room_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_enter_novice_welfare_room_req_descriptor_;
}

const msg_enter_novice_welfare_room_req& msg_enter_novice_welfare_room_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_enter_novice_welfare_room_req* msg_enter_novice_welfare_room_req::default_instance_ = NULL;

msg_enter_novice_welfare_room_req* msg_enter_novice_welfare_room_req::New() const {
  return new msg_enter_novice_welfare_room_req;
}

void msg_enter_novice_welfare_room_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    maxjettonrate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_enter_novice_welfare_room_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 maxjettonrate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxjettonrate_)));
          set_has_maxjettonrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_enter_novice_welfare_room_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 maxjettonrate = 1;
  if (has_maxjettonrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->maxjettonrate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_enter_novice_welfare_room_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 maxjettonrate = 1;
  if (has_maxjettonrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->maxjettonrate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_enter_novice_welfare_room_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 maxjettonrate = 1;
    if (has_maxjettonrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxjettonrate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_enter_novice_welfare_room_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_enter_novice_welfare_room_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_enter_novice_welfare_room_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_enter_novice_welfare_room_req::MergeFrom(const msg_enter_novice_welfare_room_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maxjettonrate()) {
      set_maxjettonrate(from.maxjettonrate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_enter_novice_welfare_room_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_enter_novice_welfare_room_req::CopyFrom(const msg_enter_novice_welfare_room_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_enter_novice_welfare_room_req::IsInitialized() const {

  return true;
}

void msg_enter_novice_welfare_room_req::Swap(msg_enter_novice_welfare_room_req* other) {
  if (other != this) {
    std::swap(maxjettonrate_, other->maxjettonrate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_enter_novice_welfare_room_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_enter_novice_welfare_room_req_descriptor_;
  metadata.reflection = msg_enter_novice_welfare_room_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_enter_room_rep::kResultFieldNumber;
const int msg_enter_room_rep::kRoomFieldNumber;
const int msg_enter_room_rep::kCurTableFieldNumber;
#endif  // !_MSC_VER

msg_enter_room_rep::msg_enter_room_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_enter_room_rep::InitAsDefaultInstance() {
  room_ = const_cast< ::net::room_info*>(&::net::room_info::default_instance());
}

msg_enter_room_rep::msg_enter_room_rep(const msg_enter_room_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_enter_room_rep::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  room_ = NULL;
  cur_table_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_enter_room_rep::~msg_enter_room_rep() {
  SharedDtor();
}

void msg_enter_room_rep::SharedDtor() {
  if (this != default_instance_) {
    delete room_;
  }
}

void msg_enter_room_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_enter_room_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_enter_room_rep_descriptor_;
}

const msg_enter_room_rep& msg_enter_room_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_enter_room_rep* msg_enter_room_rep::default_instance_ = NULL;

msg_enter_room_rep* msg_enter_room_rep::New() const {
  return new msg_enter_room_rep;
}

void msg_enter_room_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (has_room()) {
      if (room_ != NULL) room_->::net::room_info::Clear();
    }
    cur_table_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_enter_room_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room;
        break;
      }

      // optional .net.room_info room = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_table;
        break;
      }

      // optional uint32 cur_table = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_table:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_table_)));
          set_has_cur_table();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_enter_room_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional .net.room_info room = 2;
  if (has_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->room(), output);
  }

  // optional uint32 cur_table = 3;
  if (has_cur_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cur_table(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_enter_room_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional .net.room_info room = 2;
  if (has_room()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->room(), target);
  }

  // optional uint32 cur_table = 3;
  if (has_cur_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cur_table(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_enter_room_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional .net.room_info room = 2;
    if (has_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->room());
    }

    // optional uint32 cur_table = 3;
    if (has_cur_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_table());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_enter_room_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_enter_room_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_enter_room_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_enter_room_rep::MergeFrom(const msg_enter_room_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_room()) {
      mutable_room()->::net::room_info::MergeFrom(from.room());
    }
    if (from.has_cur_table()) {
      set_cur_table(from.cur_table());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_enter_room_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_enter_room_rep::CopyFrom(const msg_enter_room_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_enter_room_rep::IsInitialized() const {

  return true;
}

void msg_enter_room_rep::Swap(msg_enter_room_rep* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(room_, other->room_);
    std::swap(cur_table_, other->cur_table_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_enter_room_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_enter_room_rep_descriptor_;
  metadata.reflection = msg_enter_room_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_notify_leave_room_rep::kLeaveTypeFieldNumber;
#endif  // !_MSC_VER

msg_notify_leave_room_rep::msg_notify_leave_room_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_notify_leave_room_rep::InitAsDefaultInstance() {
}

msg_notify_leave_room_rep::msg_notify_leave_room_rep(const msg_notify_leave_room_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_notify_leave_room_rep::SharedCtor() {
  _cached_size_ = 0;
  leave_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_notify_leave_room_rep::~msg_notify_leave_room_rep() {
  SharedDtor();
}

void msg_notify_leave_room_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_notify_leave_room_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_notify_leave_room_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_notify_leave_room_rep_descriptor_;
}

const msg_notify_leave_room_rep& msg_notify_leave_room_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_notify_leave_room_rep* msg_notify_leave_room_rep::default_instance_ = NULL;

msg_notify_leave_room_rep* msg_notify_leave_room_rep::New() const {
  return new msg_notify_leave_room_rep;
}

void msg_notify_leave_room_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    leave_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_notify_leave_room_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 leave_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leave_type_)));
          set_has_leave_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_notify_leave_room_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 leave_type = 1;
  if (has_leave_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->leave_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_notify_leave_room_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 leave_type = 1;
  if (has_leave_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->leave_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_notify_leave_room_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 leave_type = 1;
    if (has_leave_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leave_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_notify_leave_room_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_notify_leave_room_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_notify_leave_room_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_notify_leave_room_rep::MergeFrom(const msg_notify_leave_room_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leave_type()) {
      set_leave_type(from.leave_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_notify_leave_room_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_notify_leave_room_rep::CopyFrom(const msg_notify_leave_room_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_notify_leave_room_rep::IsInitialized() const {

  return true;
}

void msg_notify_leave_room_rep::Swap(msg_notify_leave_room_rep* other) {
  if (other != this) {
    std::swap(leave_type_, other->leave_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_notify_leave_room_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_notify_leave_room_rep_descriptor_;
  metadata.reflection = msg_notify_leave_room_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_table_list_req::kTableIdFieldNumber;
const int msg_table_list_req::kSeachTypeFieldNumber;
#endif  // !_MSC_VER

msg_table_list_req::msg_table_list_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_table_list_req::InitAsDefaultInstance() {
}

msg_table_list_req::msg_table_list_req(const msg_table_list_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_table_list_req::SharedCtor() {
  _cached_size_ = 0;
  table_id_ = 0u;
  seach_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_table_list_req::~msg_table_list_req() {
  SharedDtor();
}

void msg_table_list_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_table_list_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_table_list_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_table_list_req_descriptor_;
}

const msg_table_list_req& msg_table_list_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_table_list_req* msg_table_list_req::default_instance_ = NULL;

msg_table_list_req* msg_table_list_req::New() const {
  return new msg_table_list_req;
}

void msg_table_list_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    table_id_ = 0u;
    seach_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_table_list_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 table_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seach_type;
        break;
      }

      // optional uint32 seach_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seach_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seach_type_)));
          set_has_seach_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_table_list_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 table_id = 1;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->table_id(), output);
  }

  // optional uint32 seach_type = 2;
  if (has_seach_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->seach_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_table_list_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 table_id = 1;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->table_id(), target);
  }

  // optional uint32 seach_type = 2;
  if (has_seach_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->seach_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_table_list_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 table_id = 1;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_id());
    }

    // optional uint32 seach_type = 2;
    if (has_seach_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seach_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_table_list_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_table_list_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_table_list_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_table_list_req::MergeFrom(const msg_table_list_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_seach_type()) {
      set_seach_type(from.seach_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_table_list_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_table_list_req::CopyFrom(const msg_table_list_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_table_list_req::IsInitialized() const {

  return true;
}

void msg_table_list_req::Swap(msg_table_list_req* other) {
  if (other != this) {
    std::swap(table_id_, other->table_id_);
    std::swap(seach_type_, other->seach_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_table_list_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_table_list_req_descriptor_;
  metadata.reflection = msg_table_list_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_table_list_rep::kTablesFieldNumber;
#endif  // !_MSC_VER

msg_table_list_rep::msg_table_list_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_table_list_rep::InitAsDefaultInstance() {
}

msg_table_list_rep::msg_table_list_rep(const msg_table_list_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_table_list_rep::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_table_list_rep::~msg_table_list_rep() {
  SharedDtor();
}

void msg_table_list_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_table_list_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_table_list_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_table_list_rep_descriptor_;
}

const msg_table_list_rep& msg_table_list_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_table_list_rep* msg_table_list_rep::default_instance_ = NULL;

msg_table_list_rep* msg_table_list_rep::New() const {
  return new msg_table_list_rep;
}

void msg_table_list_rep::Clear() {
  tables_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_table_list_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .net.table_face_info tables = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tables;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_table_list_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .net.table_face_info tables = 1;
  for (int i = 0; i < this->tables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tables(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_table_list_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .net.table_face_info tables = 1;
  for (int i = 0; i < this->tables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tables(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_table_list_rep::ByteSize() const {
  int total_size = 0;

  // repeated .net.table_face_info tables = 1;
  total_size += 1 * this->tables_size();
  for (int i = 0; i < this->tables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tables(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_table_list_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_table_list_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_table_list_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_table_list_rep::MergeFrom(const msg_table_list_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  tables_.MergeFrom(from.tables_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_table_list_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_table_list_rep::CopyFrom(const msg_table_list_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_table_list_rep::IsInitialized() const {

  return true;
}

void msg_table_list_rep::Swap(msg_table_list_rep* other) {
  if (other != this) {
    tables_.Swap(&other->tables_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_table_list_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_table_list_rep_descriptor_;
  metadata.reflection = msg_table_list_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_create_table_req::kTableNameFieldNumber;
const int msg_create_table_req::kPasswdFieldNumber;
const int msg_create_table_req::kDealFieldNumber;
const int msg_create_table_req::kBaseScoreFieldNumber;
const int msg_create_table_req::kIsShowFieldNumber;
const int msg_create_table_req::kFeeTypeFieldNumber;
const int msg_create_table_req::kFeeValueFieldNumber;
const int msg_create_table_req::kOpenDaysFieldNumber;
#endif  // !_MSC_VER

msg_create_table_req::msg_create_table_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_create_table_req::InitAsDefaultInstance() {
}

msg_create_table_req::msg_create_table_req(const msg_create_table_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_create_table_req::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deal_ = 0u;
  base_score_ = GOOGLE_LONGLONG(0);
  is_show_ = 0u;
  fee_type_ = 0u;
  fee_value_ = GOOGLE_LONGLONG(0);
  open_days_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_create_table_req::~msg_create_table_req() {
  SharedDtor();
}

void msg_create_table_req::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (this != default_instance_) {
  }
}

void msg_create_table_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_create_table_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_create_table_req_descriptor_;
}

const msg_create_table_req& msg_create_table_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_create_table_req* msg_create_table_req::default_instance_ = NULL;

msg_create_table_req* msg_create_table_req::New() const {
  return new msg_create_table_req;
}

void msg_create_table_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
    deal_ = 0u;
    base_score_ = GOOGLE_LONGLONG(0);
    is_show_ = 0u;
    fee_type_ = 0u;
    fee_value_ = GOOGLE_LONGLONG(0);
    open_days_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_create_table_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_passwd;
        break;
      }

      // optional bytes passwd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_passwd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_deal;
        break;
      }

      // optional uint32 deal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deal_)));
          set_has_deal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_base_score;
        break;
      }

      // optional int64 base_score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &base_score_)));
          set_has_base_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_show;
        break;
      }

      // optional uint32 is_show = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_show:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_show_)));
          set_has_is_show();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fee_type;
        break;
      }

      // optional uint32 fee_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fee_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fee_type_)));
          set_has_fee_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_fee_value;
        break;
      }

      // optional int64 fee_value = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fee_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fee_value_)));
          set_has_fee_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_open_days;
        break;
      }

      // optional uint32 open_days = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &open_days_)));
          set_has_open_days();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_create_table_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->table_name(), output);
  }

  // optional bytes passwd = 2;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->passwd(), output);
  }

  // optional uint32 deal = 3;
  if (has_deal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->deal(), output);
  }

  // optional int64 base_score = 4;
  if (has_base_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->base_score(), output);
  }

  // optional uint32 is_show = 5;
  if (has_is_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->is_show(), output);
  }

  // optional uint32 fee_type = 6;
  if (has_fee_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->fee_type(), output);
  }

  // optional int64 fee_value = 7;
  if (has_fee_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->fee_value(), output);
  }

  // optional uint32 open_days = 8;
  if (has_open_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->open_days(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_create_table_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes table_name = 1;
  if (has_table_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->table_name(), target);
  }

  // optional bytes passwd = 2;
  if (has_passwd()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->passwd(), target);
  }

  // optional uint32 deal = 3;
  if (has_deal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->deal(), target);
  }

  // optional int64 base_score = 4;
  if (has_base_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->base_score(), target);
  }

  // optional uint32 is_show = 5;
  if (has_is_show()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->is_show(), target);
  }

  // optional uint32 fee_type = 6;
  if (has_fee_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->fee_type(), target);
  }

  // optional int64 fee_value = 7;
  if (has_fee_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->fee_value(), target);
  }

  // optional uint32 open_days = 8;
  if (has_open_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->open_days(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_create_table_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table_name());
    }

    // optional bytes passwd = 2;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->passwd());
    }

    // optional uint32 deal = 3;
    if (has_deal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deal());
    }

    // optional int64 base_score = 4;
    if (has_base_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->base_score());
    }

    // optional uint32 is_show = 5;
    if (has_is_show()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_show());
    }

    // optional uint32 fee_type = 6;
    if (has_fee_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fee_type());
    }

    // optional int64 fee_value = 7;
    if (has_fee_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fee_value());
    }

    // optional uint32 open_days = 8;
    if (has_open_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->open_days());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_create_table_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_create_table_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_create_table_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_create_table_req::MergeFrom(const msg_create_table_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
    if (from.has_deal()) {
      set_deal(from.deal());
    }
    if (from.has_base_score()) {
      set_base_score(from.base_score());
    }
    if (from.has_is_show()) {
      set_is_show(from.is_show());
    }
    if (from.has_fee_type()) {
      set_fee_type(from.fee_type());
    }
    if (from.has_fee_value()) {
      set_fee_value(from.fee_value());
    }
    if (from.has_open_days()) {
      set_open_days(from.open_days());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_create_table_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_create_table_req::CopyFrom(const msg_create_table_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_create_table_req::IsInitialized() const {

  return true;
}

void msg_create_table_req::Swap(msg_create_table_req* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(passwd_, other->passwd_);
    std::swap(deal_, other->deal_);
    std::swap(base_score_, other->base_score_);
    std::swap(is_show_, other->is_show_);
    std::swap(fee_type_, other->fee_type_);
    std::swap(fee_value_, other->fee_value_);
    std::swap(open_days_, other->open_days_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_create_table_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_create_table_req_descriptor_;
  metadata.reflection = msg_create_table_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_create_table_rep::kResultFieldNumber;
const int msg_create_table_rep::kTableIdFieldNumber;
#endif  // !_MSC_VER

msg_create_table_rep::msg_create_table_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_create_table_rep::InitAsDefaultInstance() {
}

msg_create_table_rep::msg_create_table_rep(const msg_create_table_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_create_table_rep::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  table_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_create_table_rep::~msg_create_table_rep() {
  SharedDtor();
}

void msg_create_table_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_create_table_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_create_table_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_create_table_rep_descriptor_;
}

const msg_create_table_rep& msg_create_table_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_create_table_rep* msg_create_table_rep::default_instance_ = NULL;

msg_create_table_rep* msg_create_table_rep::New() const {
  return new msg_create_table_rep;
}

void msg_create_table_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    table_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_create_table_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_table_id;
        break;
      }

      // optional uint32 table_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_create_table_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional uint32 table_id = 2;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->table_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_create_table_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional uint32 table_id = 2;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->table_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_create_table_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 table_id = 2;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_create_table_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_create_table_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_create_table_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_create_table_rep::MergeFrom(const msg_create_table_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_create_table_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_create_table_rep::CopyFrom(const msg_create_table_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_create_table_rep::IsInitialized() const {

  return true;
}

void msg_create_table_rep::Swap(msg_create_table_rep* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(table_id_, other->table_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_create_table_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_create_table_rep_descriptor_;
  metadata.reflection = msg_create_table_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_renew_table_req::kTableIdFieldNumber;
const int msg_renew_table_req::kRenewDaysFieldNumber;
#endif  // !_MSC_VER

msg_renew_table_req::msg_renew_table_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_renew_table_req::InitAsDefaultInstance() {
}

msg_renew_table_req::msg_renew_table_req(const msg_renew_table_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_renew_table_req::SharedCtor() {
  _cached_size_ = 0;
  table_id_ = 0u;
  renew_days_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_renew_table_req::~msg_renew_table_req() {
  SharedDtor();
}

void msg_renew_table_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_renew_table_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_renew_table_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_renew_table_req_descriptor_;
}

const msg_renew_table_req& msg_renew_table_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_renew_table_req* msg_renew_table_req::default_instance_ = NULL;

msg_renew_table_req* msg_renew_table_req::New() const {
  return new msg_renew_table_req;
}

void msg_renew_table_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    table_id_ = 0u;
    renew_days_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_renew_table_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 table_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_renew_days;
        break;
      }

      // optional uint32 renew_days = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_renew_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &renew_days_)));
          set_has_renew_days();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_renew_table_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 table_id = 1;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->table_id(), output);
  }

  // optional uint32 renew_days = 2;
  if (has_renew_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->renew_days(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_renew_table_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 table_id = 1;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->table_id(), target);
  }

  // optional uint32 renew_days = 2;
  if (has_renew_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->renew_days(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_renew_table_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 table_id = 1;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_id());
    }

    // optional uint32 renew_days = 2;
    if (has_renew_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->renew_days());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_renew_table_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_renew_table_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_renew_table_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_renew_table_req::MergeFrom(const msg_renew_table_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_renew_days()) {
      set_renew_days(from.renew_days());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_renew_table_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_renew_table_req::CopyFrom(const msg_renew_table_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_renew_table_req::IsInitialized() const {

  return true;
}

void msg_renew_table_req::Swap(msg_renew_table_req* other) {
  if (other != this) {
    std::swap(table_id_, other->table_id_);
    std::swap(renew_days_, other->renew_days_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_renew_table_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_renew_table_req_descriptor_;
  metadata.reflection = msg_renew_table_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_renew_table_rep::kTableIdFieldNumber;
const int msg_renew_table_rep::kRenewDaysFieldNumber;
const int msg_renew_table_rep::kResultFieldNumber;
#endif  // !_MSC_VER

msg_renew_table_rep::msg_renew_table_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_renew_table_rep::InitAsDefaultInstance() {
}

msg_renew_table_rep::msg_renew_table_rep(const msg_renew_table_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_renew_table_rep::SharedCtor() {
  _cached_size_ = 0;
  table_id_ = 0u;
  renew_days_ = 0u;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_renew_table_rep::~msg_renew_table_rep() {
  SharedDtor();
}

void msg_renew_table_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_renew_table_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_renew_table_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_renew_table_rep_descriptor_;
}

const msg_renew_table_rep& msg_renew_table_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_renew_table_rep* msg_renew_table_rep::default_instance_ = NULL;

msg_renew_table_rep* msg_renew_table_rep::New() const {
  return new msg_renew_table_rep;
}

void msg_renew_table_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    table_id_ = 0u;
    renew_days_ = 0u;
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_renew_table_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 table_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_renew_days;
        break;
      }

      // optional uint32 renew_days = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_renew_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &renew_days_)));
          set_has_renew_days();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional uint32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_renew_table_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 table_id = 1;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->table_id(), output);
  }

  // optional uint32 renew_days = 2;
  if (has_renew_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->renew_days(), output);
  }

  // optional uint32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_renew_table_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 table_id = 1;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->table_id(), target);
  }

  // optional uint32 renew_days = 2;
  if (has_renew_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->renew_days(), target);
  }

  // optional uint32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_renew_table_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 table_id = 1;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_id());
    }

    // optional uint32 renew_days = 2;
    if (has_renew_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->renew_days());
    }

    // optional uint32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_renew_table_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_renew_table_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_renew_table_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_renew_table_rep::MergeFrom(const msg_renew_table_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_renew_days()) {
      set_renew_days(from.renew_days());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_renew_table_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_renew_table_rep::CopyFrom(const msg_renew_table_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_renew_table_rep::IsInitialized() const {

  return true;
}

void msg_renew_table_rep::Swap(msg_renew_table_rep* other) {
  if (other != this) {
    std::swap(table_id_, other->table_id_);
    std::swap(renew_days_, other->renew_days_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_renew_table_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_renew_table_rep_descriptor_;
  metadata.reflection = msg_renew_table_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_leave_table_req::kTableIdFieldNumber;
#endif  // !_MSC_VER

msg_leave_table_req::msg_leave_table_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_leave_table_req::InitAsDefaultInstance() {
}

msg_leave_table_req::msg_leave_table_req(const msg_leave_table_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_leave_table_req::SharedCtor() {
  _cached_size_ = 0;
  table_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_leave_table_req::~msg_leave_table_req() {
  SharedDtor();
}

void msg_leave_table_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_leave_table_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_leave_table_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_leave_table_req_descriptor_;
}

const msg_leave_table_req& msg_leave_table_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_leave_table_req* msg_leave_table_req::default_instance_ = NULL;

msg_leave_table_req* msg_leave_table_req::New() const {
  return new msg_leave_table_req;
}

void msg_leave_table_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    table_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_leave_table_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 table_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_leave_table_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 table_id = 1;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->table_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_leave_table_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 table_id = 1;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->table_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_leave_table_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 table_id = 1;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_leave_table_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_leave_table_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_leave_table_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_leave_table_req::MergeFrom(const msg_leave_table_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_leave_table_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_leave_table_req::CopyFrom(const msg_leave_table_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_leave_table_req::IsInitialized() const {

  return true;
}

void msg_leave_table_req::Swap(msg_leave_table_req* other) {
  if (other != this) {
    std::swap(table_id_, other->table_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_leave_table_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_leave_table_req_descriptor_;
  metadata.reflection = msg_leave_table_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_leave_table_rep::kResultFieldNumber;
#endif  // !_MSC_VER

msg_leave_table_rep::msg_leave_table_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_leave_table_rep::InitAsDefaultInstance() {
}

msg_leave_table_rep::msg_leave_table_rep(const msg_leave_table_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_leave_table_rep::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_leave_table_rep::~msg_leave_table_rep() {
  SharedDtor();
}

void msg_leave_table_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_leave_table_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_leave_table_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_leave_table_rep_descriptor_;
}

const msg_leave_table_rep& msg_leave_table_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_leave_table_rep* msg_leave_table_rep::default_instance_ = NULL;

msg_leave_table_rep* msg_leave_table_rep::New() const {
  return new msg_leave_table_rep;
}

void msg_leave_table_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_leave_table_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_leave_table_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_leave_table_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_leave_table_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_leave_table_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_leave_table_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_leave_table_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_leave_table_rep::MergeFrom(const msg_leave_table_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_leave_table_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_leave_table_rep::CopyFrom(const msg_leave_table_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_leave_table_rep::IsInitialized() const {

  return true;
}

void msg_leave_table_rep::Swap(msg_leave_table_rep* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_leave_table_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_leave_table_rep_descriptor_;
  metadata.reflection = msg_leave_table_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_enter_table_req::kTableIdFieldNumber;
const int msg_enter_table_req::kPasswdFieldNumber;
#endif  // !_MSC_VER

msg_enter_table_req::msg_enter_table_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_enter_table_req::InitAsDefaultInstance() {
}

msg_enter_table_req::msg_enter_table_req(const msg_enter_table_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_enter_table_req::SharedCtor() {
  _cached_size_ = 0;
  table_id_ = 0u;
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_enter_table_req::~msg_enter_table_req() {
  SharedDtor();
}

void msg_enter_table_req::SharedDtor() {
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (this != default_instance_) {
  }
}

void msg_enter_table_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_enter_table_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_enter_table_req_descriptor_;
}

const msg_enter_table_req& msg_enter_table_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_enter_table_req* msg_enter_table_req::default_instance_ = NULL;

msg_enter_table_req* msg_enter_table_req::New() const {
  return new msg_enter_table_req;
}

void msg_enter_table_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    table_id_ = 0u;
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_enter_table_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 table_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_passwd;
        break;
      }

      // optional bytes passwd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_passwd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_enter_table_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 table_id = 1;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->table_id(), output);
  }

  // optional bytes passwd = 2;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->passwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_enter_table_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 table_id = 1;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->table_id(), target);
  }

  // optional bytes passwd = 2;
  if (has_passwd()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->passwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_enter_table_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 table_id = 1;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_id());
    }

    // optional bytes passwd = 2;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->passwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_enter_table_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_enter_table_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_enter_table_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_enter_table_req::MergeFrom(const msg_enter_table_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_enter_table_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_enter_table_req::CopyFrom(const msg_enter_table_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_enter_table_req::IsInitialized() const {

  return true;
}

void msg_enter_table_req::Swap(msg_enter_table_req* other) {
  if (other != this) {
    std::swap(table_id_, other->table_id_);
    std::swap(passwd_, other->passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_enter_table_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_enter_table_req_descriptor_;
  metadata.reflection = msg_enter_table_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_enter_table_rep::kTableIdFieldNumber;
const int msg_enter_table_rep::kResultFieldNumber;
#endif  // !_MSC_VER

msg_enter_table_rep::msg_enter_table_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_enter_table_rep::InitAsDefaultInstance() {
}

msg_enter_table_rep::msg_enter_table_rep(const msg_enter_table_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_enter_table_rep::SharedCtor() {
  _cached_size_ = 0;
  table_id_ = 0u;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_enter_table_rep::~msg_enter_table_rep() {
  SharedDtor();
}

void msg_enter_table_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_enter_table_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_enter_table_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_enter_table_rep_descriptor_;
}

const msg_enter_table_rep& msg_enter_table_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_enter_table_rep* msg_enter_table_rep::default_instance_ = NULL;

msg_enter_table_rep* msg_enter_table_rep::New() const {
  return new msg_enter_table_rep;
}

void msg_enter_table_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    table_id_ = 0u;
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_enter_table_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 table_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional uint32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_enter_table_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 table_id = 1;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->table_id(), output);
  }

  // optional uint32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_enter_table_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 table_id = 1;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->table_id(), target);
  }

  // optional uint32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_enter_table_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 table_id = 1;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_id());
    }

    // optional uint32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_enter_table_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_enter_table_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_enter_table_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_enter_table_rep::MergeFrom(const msg_enter_table_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_enter_table_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_enter_table_rep::CopyFrom(const msg_enter_table_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_enter_table_rep::IsInitialized() const {

  return true;
}

void msg_enter_table_rep::Swap(msg_enter_table_rep* other) {
  if (other != this) {
    std::swap(table_id_, other->table_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_enter_table_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_enter_table_rep_descriptor_;
  metadata.reflection = msg_enter_table_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_table_info_rep::kTableInfoFieldNumber;
#endif  // !_MSC_VER

msg_table_info_rep::msg_table_info_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_table_info_rep::InitAsDefaultInstance() {
  table_info_ = const_cast< ::net::table_face_info*>(&::net::table_face_info::default_instance());
}

msg_table_info_rep::msg_table_info_rep(const msg_table_info_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_table_info_rep::SharedCtor() {
  _cached_size_ = 0;
  table_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_table_info_rep::~msg_table_info_rep() {
  SharedDtor();
}

void msg_table_info_rep::SharedDtor() {
  if (this != default_instance_) {
    delete table_info_;
  }
}

void msg_table_info_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_table_info_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_table_info_rep_descriptor_;
}

const msg_table_info_rep& msg_table_info_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_table_info_rep* msg_table_info_rep::default_instance_ = NULL;

msg_table_info_rep* msg_table_info_rep::New() const {
  return new msg_table_info_rep;
}

void msg_table_info_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_info()) {
      if (table_info_ != NULL) table_info_->::net::table_face_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_table_info_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .net.table_face_info table_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_table_info_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .net.table_face_info table_info = 1;
  if (has_table_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_table_info_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .net.table_face_info table_info = 1;
  if (has_table_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->table_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_table_info_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .net.table_face_info table_info = 1;
    if (has_table_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_table_info_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_table_info_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_table_info_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_table_info_rep::MergeFrom(const msg_table_info_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_info()) {
      mutable_table_info()->::net::table_face_info::MergeFrom(from.table_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_table_info_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_table_info_rep::CopyFrom(const msg_table_info_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_table_info_rep::IsInitialized() const {

  return true;
}

void msg_table_info_rep::Swap(msg_table_info_rep* other) {
  if (other != this) {
    std::swap(table_info_, other->table_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_table_info_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_table_info_rep_descriptor_;
  metadata.reflection = msg_table_info_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_seat_info_rep::kPlayersFieldNumber;
#endif  // !_MSC_VER

msg_seat_info_rep::msg_seat_info_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_seat_info_rep::InitAsDefaultInstance() {
}

msg_seat_info_rep::msg_seat_info_rep(const msg_seat_info_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_seat_info_rep::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_seat_info_rep::~msg_seat_info_rep() {
  SharedDtor();
}

void msg_seat_info_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_seat_info_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_seat_info_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_seat_info_rep_descriptor_;
}

const msg_seat_info_rep& msg_seat_info_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_seat_info_rep* msg_seat_info_rep::default_instance_ = NULL;

msg_seat_info_rep* msg_seat_info_rep::New() const {
  return new msg_seat_info_rep;
}

void msg_seat_info_rep::Clear() {
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_seat_info_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .net.seat_info players = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_seat_info_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .net.seat_info players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_seat_info_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .net.seat_info players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_seat_info_rep::ByteSize() const {
  int total_size = 0;

  // repeated .net.seat_info players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_seat_info_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_seat_info_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_seat_info_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_seat_info_rep::MergeFrom(const msg_seat_info_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_seat_info_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_seat_info_rep::CopyFrom(const msg_seat_info_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_seat_info_rep::IsInitialized() const {

  return true;
}

void msg_seat_info_rep::Swap(msg_seat_info_rep* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_seat_info_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_seat_info_rep_descriptor_;
  metadata.reflection = msg_seat_info_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_table_ready_req::kReadyFieldNumber;
#endif  // !_MSC_VER

msg_table_ready_req::msg_table_ready_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_table_ready_req::InitAsDefaultInstance() {
}

msg_table_ready_req::msg_table_ready_req(const msg_table_ready_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_table_ready_req::SharedCtor() {
  _cached_size_ = 0;
  ready_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_table_ready_req::~msg_table_ready_req() {
  SharedDtor();
}

void msg_table_ready_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_table_ready_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_table_ready_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_table_ready_req_descriptor_;
}

const msg_table_ready_req& msg_table_ready_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_table_ready_req* msg_table_ready_req::default_instance_ = NULL;

msg_table_ready_req* msg_table_ready_req::New() const {
  return new msg_table_ready_req;
}

void msg_table_ready_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ready_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_table_ready_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ready = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ready_)));
          set_has_ready();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_table_ready_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ready = 1;
  if (has_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ready(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_table_ready_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ready = 1;
  if (has_ready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ready(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_table_ready_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ready = 1;
    if (has_ready()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ready());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_table_ready_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_table_ready_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_table_ready_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_table_ready_req::MergeFrom(const msg_table_ready_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ready()) {
      set_ready(from.ready());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_table_ready_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_table_ready_req::CopyFrom(const msg_table_ready_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_table_ready_req::IsInitialized() const {

  return true;
}

void msg_table_ready_req::Swap(msg_table_ready_req* other) {
  if (other != this) {
    std::swap(ready_, other->ready_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_table_ready_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_table_ready_req_descriptor_;
  metadata.reflection = msg_table_ready_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_table_ready_rep::kReadysFieldNumber;
const int msg_table_ready_rep::kAutoStatesFieldNumber;
#endif  // !_MSC_VER

msg_table_ready_rep::msg_table_ready_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_table_ready_rep::InitAsDefaultInstance() {
}

msg_table_ready_rep::msg_table_ready_rep(const msg_table_ready_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_table_ready_rep::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_table_ready_rep::~msg_table_ready_rep() {
  SharedDtor();
}

void msg_table_ready_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_table_ready_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_table_ready_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_table_ready_rep_descriptor_;
}

const msg_table_ready_rep& msg_table_ready_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_table_ready_rep* msg_table_ready_rep::default_instance_ = NULL;

msg_table_ready_rep* msg_table_ready_rep::New() const {
  return new msg_table_ready_rep;
}

void msg_table_ready_rep::Clear() {
  readys_.Clear();
  auto_states_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_table_ready_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 readys = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_readys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_readys())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_readys())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_readys;
        if (input->ExpectTag(16)) goto parse_auto_states;
        break;
      }

      // repeated uint32 auto_states = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_states:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_auto_states())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_auto_states())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_auto_states;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_table_ready_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 readys = 1;
  for (int i = 0; i < this->readys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->readys(i), output);
  }

  // repeated uint32 auto_states = 2;
  for (int i = 0; i < this->auto_states_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->auto_states(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_table_ready_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 readys = 1;
  for (int i = 0; i < this->readys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->readys(i), target);
  }

  // repeated uint32 auto_states = 2;
  for (int i = 0; i < this->auto_states_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->auto_states(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_table_ready_rep::ByteSize() const {
  int total_size = 0;

  // repeated uint32 readys = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->readys_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->readys(i));
    }
    total_size += 1 * this->readys_size() + data_size;
  }

  // repeated uint32 auto_states = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->auto_states_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->auto_states(i));
    }
    total_size += 1 * this->auto_states_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_table_ready_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_table_ready_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_table_ready_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_table_ready_rep::MergeFrom(const msg_table_ready_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  readys_.MergeFrom(from.readys_);
  auto_states_.MergeFrom(from.auto_states_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_table_ready_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_table_ready_rep::CopyFrom(const msg_table_ready_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_table_ready_rep::IsInitialized() const {

  return true;
}

void msg_table_ready_rep::Swap(msg_table_ready_rep* other) {
  if (other != this) {
    readys_.Swap(&other->readys_);
    auto_states_.Swap(&other->auto_states_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_table_ready_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_table_ready_rep_descriptor_;
  metadata.reflection = msg_table_ready_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_table_chat_req::kChatMsgFieldNumber;
#endif  // !_MSC_VER

msg_table_chat_req::msg_table_chat_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_table_chat_req::InitAsDefaultInstance() {
}

msg_table_chat_req::msg_table_chat_req(const msg_table_chat_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_table_chat_req::SharedCtor() {
  _cached_size_ = 0;
  chat_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_table_chat_req::~msg_table_chat_req() {
  SharedDtor();
}

void msg_table_chat_req::SharedDtor() {
  if (chat_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete chat_msg_;
  }
  if (this != default_instance_) {
  }
}

void msg_table_chat_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_table_chat_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_table_chat_req_descriptor_;
}

const msg_table_chat_req& msg_table_chat_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_table_chat_req* msg_table_chat_req::default_instance_ = NULL;

msg_table_chat_req* msg_table_chat_req::New() const {
  return new msg_table_chat_req;
}

void msg_table_chat_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_chat_msg()) {
      if (chat_msg_ != &::google::protobuf::internal::kEmptyString) {
        chat_msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_table_chat_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes chat_msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chat_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_table_chat_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes chat_msg = 1;
  if (has_chat_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->chat_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_table_chat_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes chat_msg = 1;
  if (has_chat_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->chat_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_table_chat_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes chat_msg = 1;
    if (has_chat_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->chat_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_table_chat_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_table_chat_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_table_chat_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_table_chat_req::MergeFrom(const msg_table_chat_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chat_msg()) {
      set_chat_msg(from.chat_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_table_chat_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_table_chat_req::CopyFrom(const msg_table_chat_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_table_chat_req::IsInitialized() const {

  return true;
}

void msg_table_chat_req::Swap(msg_table_chat_req* other) {
  if (other != this) {
    std::swap(chat_msg_, other->chat_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_table_chat_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_table_chat_req_descriptor_;
  metadata.reflection = msg_table_chat_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_table_chat_rep::kUidFieldNumber;
const int msg_table_chat_rep::kChatMsgFieldNumber;
#endif  // !_MSC_VER

msg_table_chat_rep::msg_table_chat_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_table_chat_rep::InitAsDefaultInstance() {
}

msg_table_chat_rep::msg_table_chat_rep(const msg_table_chat_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_table_chat_rep::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  chat_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_table_chat_rep::~msg_table_chat_rep() {
  SharedDtor();
}

void msg_table_chat_rep::SharedDtor() {
  if (chat_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete chat_msg_;
  }
  if (this != default_instance_) {
  }
}

void msg_table_chat_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_table_chat_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_table_chat_rep_descriptor_;
}

const msg_table_chat_rep& msg_table_chat_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_table_chat_rep* msg_table_chat_rep::default_instance_ = NULL;

msg_table_chat_rep* msg_table_chat_rep::New() const {
  return new msg_table_chat_rep;
}

void msg_table_chat_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    if (has_chat_msg()) {
      if (chat_msg_ != &::google::protobuf::internal::kEmptyString) {
        chat_msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_table_chat_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chat_msg;
        break;
      }

      // optional bytes chat_msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chat_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chat_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_table_chat_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional bytes chat_msg = 2;
  if (has_chat_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->chat_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_table_chat_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional bytes chat_msg = 2;
  if (has_chat_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->chat_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_table_chat_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional bytes chat_msg = 2;
    if (has_chat_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->chat_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_table_chat_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_table_chat_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_table_chat_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_table_chat_rep::MergeFrom(const msg_table_chat_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_chat_msg()) {
      set_chat_msg(from.chat_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_table_chat_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_table_chat_rep::CopyFrom(const msg_table_chat_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_table_chat_rep::IsInitialized() const {

  return true;
}

void msg_table_chat_rep::Swap(msg_table_chat_rep* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(chat_msg_, other->chat_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_table_chat_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_table_chat_rep_descriptor_;
  metadata.reflection = msg_table_chat_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_table_set_auto_req::kAutoTypeFieldNumber;
#endif  // !_MSC_VER

msg_table_set_auto_req::msg_table_set_auto_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_table_set_auto_req::InitAsDefaultInstance() {
}

msg_table_set_auto_req::msg_table_set_auto_req(const msg_table_set_auto_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_table_set_auto_req::SharedCtor() {
  _cached_size_ = 0;
  auto_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_table_set_auto_req::~msg_table_set_auto_req() {
  SharedDtor();
}

void msg_table_set_auto_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_table_set_auto_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_table_set_auto_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_table_set_auto_req_descriptor_;
}

const msg_table_set_auto_req& msg_table_set_auto_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_table_set_auto_req* msg_table_set_auto_req::default_instance_ = NULL;

msg_table_set_auto_req* msg_table_set_auto_req::New() const {
  return new msg_table_set_auto_req;
}

void msg_table_set_auto_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    auto_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_table_set_auto_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 auto_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auto_type_)));
          set_has_auto_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_table_set_auto_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 auto_type = 1;
  if (has_auto_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->auto_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_table_set_auto_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 auto_type = 1;
  if (has_auto_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->auto_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_table_set_auto_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 auto_type = 1;
    if (has_auto_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auto_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_table_set_auto_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_table_set_auto_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_table_set_auto_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_table_set_auto_req::MergeFrom(const msg_table_set_auto_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_auto_type()) {
      set_auto_type(from.auto_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_table_set_auto_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_table_set_auto_req::CopyFrom(const msg_table_set_auto_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_table_set_auto_req::IsInitialized() const {

  return true;
}

void msg_table_set_auto_req::Swap(msg_table_set_auto_req* other) {
  if (other != this) {
    std::swap(auto_type_, other->auto_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_table_set_auto_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_table_set_auto_req_descriptor_;
  metadata.reflection = msg_table_set_auto_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_table_set_auto_rep::kResultFieldNumber;
const int msg_table_set_auto_rep::kAutoStateFieldNumber;
#endif  // !_MSC_VER

msg_table_set_auto_rep::msg_table_set_auto_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_table_set_auto_rep::InitAsDefaultInstance() {
}

msg_table_set_auto_rep::msg_table_set_auto_rep(const msg_table_set_auto_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_table_set_auto_rep::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  auto_state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_table_set_auto_rep::~msg_table_set_auto_rep() {
  SharedDtor();
}

void msg_table_set_auto_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_table_set_auto_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_table_set_auto_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_table_set_auto_rep_descriptor_;
}

const msg_table_set_auto_rep& msg_table_set_auto_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_table_set_auto_rep* msg_table_set_auto_rep::default_instance_ = NULL;

msg_table_set_auto_rep* msg_table_set_auto_rep::New() const {
  return new msg_table_set_auto_rep;
}

void msg_table_set_auto_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    auto_state_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_table_set_auto_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_auto_state;
        break;
      }

      // optional uint32 auto_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auto_state_)));
          set_has_auto_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_table_set_auto_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional uint32 auto_state = 2;
  if (has_auto_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->auto_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_table_set_auto_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional uint32 auto_state = 2;
  if (has_auto_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->auto_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_table_set_auto_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 auto_state = 2;
    if (has_auto_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auto_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_table_set_auto_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_table_set_auto_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_table_set_auto_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_table_set_auto_rep::MergeFrom(const msg_table_set_auto_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_auto_state()) {
      set_auto_state(from.auto_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_table_set_auto_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_table_set_auto_rep::CopyFrom(const msg_table_set_auto_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_table_set_auto_rep::IsInitialized() const {

  return true;
}

void msg_table_set_auto_rep::Swap(msg_table_set_auto_rep* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(auto_state_, other->auto_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_table_set_auto_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_table_set_auto_rep_descriptor_;
  metadata.reflection = msg_table_set_auto_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_fast_join_room_req::kDealFieldNumber;
const int msg_fast_join_room_req::kConsumeFieldNumber;
#endif  // !_MSC_VER

msg_fast_join_room_req::msg_fast_join_room_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_fast_join_room_req::InitAsDefaultInstance() {
}

msg_fast_join_room_req::msg_fast_join_room_req(const msg_fast_join_room_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_fast_join_room_req::SharedCtor() {
  _cached_size_ = 0;
  deal_ = 0u;
  consume_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_fast_join_room_req::~msg_fast_join_room_req() {
  SharedDtor();
}

void msg_fast_join_room_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_fast_join_room_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_fast_join_room_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_fast_join_room_req_descriptor_;
}

const msg_fast_join_room_req& msg_fast_join_room_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_fast_join_room_req* msg_fast_join_room_req::default_instance_ = NULL;

msg_fast_join_room_req* msg_fast_join_room_req::New() const {
  return new msg_fast_join_room_req;
}

void msg_fast_join_room_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    deal_ = 0u;
    consume_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_fast_join_room_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 deal = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deal_)));
          set_has_deal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_consume;
        break;
      }

      // optional uint32 consume = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consume_)));
          set_has_consume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_fast_join_room_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 deal = 1;
  if (has_deal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deal(), output);
  }

  // optional uint32 consume = 2;
  if (has_consume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->consume(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_fast_join_room_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 deal = 1;
  if (has_deal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deal(), target);
  }

  // optional uint32 consume = 2;
  if (has_consume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->consume(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_fast_join_room_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 deal = 1;
    if (has_deal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deal());
    }

    // optional uint32 consume = 2;
    if (has_consume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consume());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_fast_join_room_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_fast_join_room_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_fast_join_room_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_fast_join_room_req::MergeFrom(const msg_fast_join_room_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deal()) {
      set_deal(from.deal());
    }
    if (from.has_consume()) {
      set_consume(from.consume());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_fast_join_room_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_fast_join_room_req::CopyFrom(const msg_fast_join_room_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_fast_join_room_req::IsInitialized() const {

  return true;
}

void msg_fast_join_room_req::Swap(msg_fast_join_room_req* other) {
  if (other != this) {
    std::swap(deal_, other->deal_);
    std::swap(consume_, other->consume_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_fast_join_room_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_fast_join_room_req_descriptor_;
  metadata.reflection = msg_fast_join_room_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_fast_join_by_room_id_req::kRoomidFieldNumber;
#endif  // !_MSC_VER

msg_fast_join_by_room_id_req::msg_fast_join_by_room_id_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_fast_join_by_room_id_req::InitAsDefaultInstance() {
}

msg_fast_join_by_room_id_req::msg_fast_join_by_room_id_req(const msg_fast_join_by_room_id_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_fast_join_by_room_id_req::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_fast_join_by_room_id_req::~msg_fast_join_by_room_id_req() {
  SharedDtor();
}

void msg_fast_join_by_room_id_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_fast_join_by_room_id_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_fast_join_by_room_id_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_fast_join_by_room_id_req_descriptor_;
}

const msg_fast_join_by_room_id_req& msg_fast_join_by_room_id_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_fast_join_by_room_id_req* msg_fast_join_by_room_id_req::default_instance_ = NULL;

msg_fast_join_by_room_id_req* msg_fast_join_by_room_id_req::New() const {
  return new msg_fast_join_by_room_id_req;
}

void msg_fast_join_by_room_id_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_fast_join_by_room_id_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 roomid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_fast_join_by_room_id_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_fast_join_by_room_id_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 roomid = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_fast_join_by_room_id_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_fast_join_by_room_id_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_fast_join_by_room_id_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_fast_join_by_room_id_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_fast_join_by_room_id_req::MergeFrom(const msg_fast_join_by_room_id_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_fast_join_by_room_id_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_fast_join_by_room_id_req::CopyFrom(const msg_fast_join_by_room_id_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_fast_join_by_room_id_req::IsInitialized() const {

  return true;
}

void msg_fast_join_by_room_id_req::Swap(msg_fast_join_by_room_id_req* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_fast_join_by_room_id_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_fast_join_by_room_id_req_descriptor_;
  metadata.reflection = msg_fast_join_by_room_id_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_fast_join_room_rep::kResultFieldNumber;
#endif  // !_MSC_VER

msg_fast_join_room_rep::msg_fast_join_room_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_fast_join_room_rep::InitAsDefaultInstance() {
}

msg_fast_join_room_rep::msg_fast_join_room_rep(const msg_fast_join_room_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_fast_join_room_rep::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_fast_join_room_rep::~msg_fast_join_room_rep() {
  SharedDtor();
}

void msg_fast_join_room_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_fast_join_room_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_fast_join_room_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_fast_join_room_rep_descriptor_;
}

const msg_fast_join_room_rep& msg_fast_join_room_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_fast_join_room_rep* msg_fast_join_room_rep::default_instance_ = NULL;

msg_fast_join_room_rep* msg_fast_join_room_rep::New() const {
  return new msg_fast_join_room_rep;
}

void msg_fast_join_room_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_fast_join_room_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_fast_join_room_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_fast_join_room_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_fast_join_room_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_fast_join_room_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_fast_join_room_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_fast_join_room_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_fast_join_room_rep::MergeFrom(const msg_fast_join_room_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_fast_join_room_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_fast_join_room_rep::CopyFrom(const msg_fast_join_room_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_fast_join_room_rep::IsInitialized() const {

  return true;
}

void msg_fast_join_room_rep::Swap(msg_fast_join_room_rep* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_fast_join_room_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_fast_join_room_rep_descriptor_;
  metadata.reflection = msg_fast_join_room_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_fast_join_table_req::kTableIdFieldNumber;
#endif  // !_MSC_VER

msg_fast_join_table_req::msg_fast_join_table_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_fast_join_table_req::InitAsDefaultInstance() {
}

msg_fast_join_table_req::msg_fast_join_table_req(const msg_fast_join_table_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_fast_join_table_req::SharedCtor() {
  _cached_size_ = 0;
  table_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_fast_join_table_req::~msg_fast_join_table_req() {
  SharedDtor();
}

void msg_fast_join_table_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_fast_join_table_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_fast_join_table_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_fast_join_table_req_descriptor_;
}

const msg_fast_join_table_req& msg_fast_join_table_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_fast_join_table_req* msg_fast_join_table_req::default_instance_ = NULL;

msg_fast_join_table_req* msg_fast_join_table_req::New() const {
  return new msg_fast_join_table_req;
}

void msg_fast_join_table_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    table_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_fast_join_table_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 table_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_fast_join_table_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 table_id = 1;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->table_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_fast_join_table_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 table_id = 1;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->table_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_fast_join_table_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 table_id = 1;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_fast_join_table_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_fast_join_table_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_fast_join_table_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_fast_join_table_req::MergeFrom(const msg_fast_join_table_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_fast_join_table_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_fast_join_table_req::CopyFrom(const msg_fast_join_table_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_fast_join_table_req::IsInitialized() const {

  return true;
}

void msg_fast_join_table_req::Swap(msg_fast_join_table_req* other) {
  if (other != this) {
    std::swap(table_id_, other->table_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_fast_join_table_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_fast_join_table_req_descriptor_;
  metadata.reflection = msg_fast_join_table_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_fast_join_table_rep::kResultFieldNumber;
#endif  // !_MSC_VER

msg_fast_join_table_rep::msg_fast_join_table_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_fast_join_table_rep::InitAsDefaultInstance() {
}

msg_fast_join_table_rep::msg_fast_join_table_rep(const msg_fast_join_table_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_fast_join_table_rep::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_fast_join_table_rep::~msg_fast_join_table_rep() {
  SharedDtor();
}

void msg_fast_join_table_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_fast_join_table_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_fast_join_table_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_fast_join_table_rep_descriptor_;
}

const msg_fast_join_table_rep& msg_fast_join_table_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_fast_join_table_rep* msg_fast_join_table_rep::default_instance_ = NULL;

msg_fast_join_table_rep* msg_fast_join_table_rep::New() const {
  return new msg_fast_join_table_rep;
}

void msg_fast_join_table_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_fast_join_table_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_fast_join_table_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_fast_join_table_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_fast_join_table_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_fast_join_table_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_fast_join_table_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_fast_join_table_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_fast_join_table_rep::MergeFrom(const msg_fast_join_table_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_fast_join_table_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_fast_join_table_rep::CopyFrom(const msg_fast_join_table_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_fast_join_table_rep::IsInitialized() const {

  return true;
}

void msg_fast_join_table_rep::Swap(msg_fast_join_table_rep* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_fast_join_table_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_fast_join_table_rep_descriptor_;
  metadata.reflection = msg_fast_join_table_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_master_join_table_req::kTableIdFieldNumber;
#endif  // !_MSC_VER

msg_master_join_table_req::msg_master_join_table_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_master_join_table_req::InitAsDefaultInstance() {
}

msg_master_join_table_req::msg_master_join_table_req(const msg_master_join_table_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_master_join_table_req::SharedCtor() {
  _cached_size_ = 0;
  table_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_master_join_table_req::~msg_master_join_table_req() {
  SharedDtor();
}

void msg_master_join_table_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_master_join_table_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_master_join_table_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_master_join_table_req_descriptor_;
}

const msg_master_join_table_req& msg_master_join_table_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_master_join_table_req* msg_master_join_table_req::default_instance_ = NULL;

msg_master_join_table_req* msg_master_join_table_req::New() const {
  return new msg_master_join_table_req;
}

void msg_master_join_table_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    table_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_master_join_table_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 table_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_master_join_table_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 table_id = 1;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->table_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_master_join_table_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 table_id = 1;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->table_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_master_join_table_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 table_id = 1;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_master_join_table_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_master_join_table_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_master_join_table_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_master_join_table_req::MergeFrom(const msg_master_join_table_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_master_join_table_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_master_join_table_req::CopyFrom(const msg_master_join_table_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_master_join_table_req::IsInitialized() const {

  return true;
}

void msg_master_join_table_req::Swap(msg_master_join_table_req* other) {
  if (other != this) {
    std::swap(table_id_, other->table_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_master_join_table_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_master_join_table_req_descriptor_;
  metadata.reflection = msg_master_join_table_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_master_join_table_rep::kResultFieldNumber;
#endif  // !_MSC_VER

msg_master_join_table_rep::msg_master_join_table_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_master_join_table_rep::InitAsDefaultInstance() {
}

msg_master_join_table_rep::msg_master_join_table_rep(const msg_master_join_table_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_master_join_table_rep::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_master_join_table_rep::~msg_master_join_table_rep() {
  SharedDtor();
}

void msg_master_join_table_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_master_join_table_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_master_join_table_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_master_join_table_rep_descriptor_;
}

const msg_master_join_table_rep& msg_master_join_table_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_master_join_table_rep* msg_master_join_table_rep::default_instance_ = NULL;

msg_master_join_table_rep* msg_master_join_table_rep::New() const {
  return new msg_master_join_table_rep;
}

void msg_master_join_table_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_master_join_table_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_master_join_table_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_master_join_table_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_master_join_table_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_master_join_table_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_master_join_table_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_master_join_table_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_master_join_table_rep::MergeFrom(const msg_master_join_table_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_master_join_table_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_master_join_table_rep::CopyFrom(const msg_master_join_table_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_master_join_table_rep::IsInitialized() const {

  return true;
}

void msg_master_join_table_rep::Swap(msg_master_join_table_rep* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_master_join_table_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_master_join_table_rep_descriptor_;
  metadata.reflection = msg_master_join_table_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_query_table_list_req::kStartidFieldNumber;
const int msg_query_table_list_req::kEndidFieldNumber;
#endif  // !_MSC_VER

msg_query_table_list_req::msg_query_table_list_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_query_table_list_req::InitAsDefaultInstance() {
}

msg_query_table_list_req::msg_query_table_list_req(const msg_query_table_list_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_query_table_list_req::SharedCtor() {
  _cached_size_ = 0;
  startid_ = 0u;
  endid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_query_table_list_req::~msg_query_table_list_req() {
  SharedDtor();
}

void msg_query_table_list_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_query_table_list_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_query_table_list_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_query_table_list_req_descriptor_;
}

const msg_query_table_list_req& msg_query_table_list_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_query_table_list_req* msg_query_table_list_req::default_instance_ = NULL;

msg_query_table_list_req* msg_query_table_list_req::New() const {
  return new msg_query_table_list_req;
}

void msg_query_table_list_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    startid_ = 0u;
    endid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_query_table_list_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 startid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startid_)));
          set_has_startid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_endid;
        break;
      }

      // optional uint32 endid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endid_)));
          set_has_endid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_query_table_list_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 startid = 1;
  if (has_startid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->startid(), output);
  }

  // optional uint32 endid = 2;
  if (has_endid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->endid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_query_table_list_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 startid = 1;
  if (has_startid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->startid(), target);
  }

  // optional uint32 endid = 2;
  if (has_endid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->endid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_query_table_list_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 startid = 1;
    if (has_startid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->startid());
    }

    // optional uint32 endid = 2;
    if (has_endid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_query_table_list_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_query_table_list_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_query_table_list_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_query_table_list_req::MergeFrom(const msg_query_table_list_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_startid()) {
      set_startid(from.startid());
    }
    if (from.has_endid()) {
      set_endid(from.endid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_query_table_list_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_query_table_list_req::CopyFrom(const msg_query_table_list_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_query_table_list_req::IsInitialized() const {

  return true;
}

void msg_query_table_list_req::Swap(msg_query_table_list_req* other) {
  if (other != this) {
    std::swap(startid_, other->startid_);
    std::swap(endid_, other->endid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_query_table_list_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_query_table_list_req_descriptor_;
  metadata.reflection = msg_query_table_list_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_query_table_list_rep::kTablesFieldNumber;
const int msg_query_table_list_rep::kTableNumFieldNumber;
#endif  // !_MSC_VER

msg_query_table_list_rep::msg_query_table_list_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_query_table_list_rep::InitAsDefaultInstance() {
}

msg_query_table_list_rep::msg_query_table_list_rep(const msg_query_table_list_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_query_table_list_rep::SharedCtor() {
  _cached_size_ = 0;
  table_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_query_table_list_rep::~msg_query_table_list_rep() {
  SharedDtor();
}

void msg_query_table_list_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_query_table_list_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_query_table_list_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_query_table_list_rep_descriptor_;
}

const msg_query_table_list_rep& msg_query_table_list_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_query_table_list_rep* msg_query_table_list_rep::default_instance_ = NULL;

msg_query_table_list_rep* msg_query_table_list_rep::New() const {
  return new msg_query_table_list_rep;
}

void msg_query_table_list_rep::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    table_num_ = 0u;
  }
  tables_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_query_table_list_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .net.table_face_info tables = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tables;
        if (input->ExpectTag(16)) goto parse_table_num;
        break;
      }

      // optional uint32 table_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_num_)));
          set_has_table_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_query_table_list_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .net.table_face_info tables = 1;
  for (int i = 0; i < this->tables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tables(i), output);
  }

  // optional uint32 table_num = 2;
  if (has_table_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->table_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_query_table_list_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .net.table_face_info tables = 1;
  for (int i = 0; i < this->tables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tables(i), target);
  }

  // optional uint32 table_num = 2;
  if (has_table_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->table_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_query_table_list_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 table_num = 2;
    if (has_table_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_num());
    }

  }
  // repeated .net.table_face_info tables = 1;
  total_size += 1 * this->tables_size();
  for (int i = 0; i < this->tables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tables(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_query_table_list_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_query_table_list_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_query_table_list_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_query_table_list_rep::MergeFrom(const msg_query_table_list_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  tables_.MergeFrom(from.tables_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_table_num()) {
      set_table_num(from.table_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_query_table_list_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_query_table_list_rep::CopyFrom(const msg_query_table_list_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_query_table_list_rep::IsInitialized() const {

  return true;
}

void msg_query_table_list_rep::Swap(msg_query_table_list_rep* other) {
  if (other != this) {
    tables_.Swap(&other->tables_);
    std::swap(table_num_, other->table_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_query_table_list_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_query_table_list_rep_descriptor_;
  metadata.reflection = msg_query_table_list_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_notify_player_join_rep::kJoinLeaveFieldNumber;
const int msg_notify_player_join_rep::kPlayerFieldNumber;
#endif  // !_MSC_VER

msg_notify_player_join_rep::msg_notify_player_join_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_notify_player_join_rep::InitAsDefaultInstance() {
  player_ = const_cast< ::net::looker_info*>(&::net::looker_info::default_instance());
}

msg_notify_player_join_rep::msg_notify_player_join_rep(const msg_notify_player_join_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_notify_player_join_rep::SharedCtor() {
  _cached_size_ = 0;
  join_leave_ = 0u;
  player_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_notify_player_join_rep::~msg_notify_player_join_rep() {
  SharedDtor();
}

void msg_notify_player_join_rep::SharedDtor() {
  if (this != default_instance_) {
    delete player_;
  }
}

void msg_notify_player_join_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_notify_player_join_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_notify_player_join_rep_descriptor_;
}

const msg_notify_player_join_rep& msg_notify_player_join_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_notify_player_join_rep* msg_notify_player_join_rep::default_instance_ = NULL;

msg_notify_player_join_rep* msg_notify_player_join_rep::New() const {
  return new msg_notify_player_join_rep;
}

void msg_notify_player_join_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    join_leave_ = 0u;
    if (has_player()) {
      if (player_ != NULL) player_->::net::looker_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_notify_player_join_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 join_leave = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &join_leave_)));
          set_has_join_leave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player;
        break;
      }

      // optional .net.looker_info player = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_notify_player_join_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 join_leave = 1;
  if (has_join_leave()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->join_leave(), output);
  }

  // optional .net.looker_info player = 2;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_notify_player_join_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 join_leave = 1;
  if (has_join_leave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->join_leave(), target);
  }

  // optional .net.looker_info player = 2;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_notify_player_join_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 join_leave = 1;
    if (has_join_leave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->join_leave());
    }

    // optional .net.looker_info player = 2;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_notify_player_join_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_notify_player_join_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_notify_player_join_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_notify_player_join_rep::MergeFrom(const msg_notify_player_join_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_join_leave()) {
      set_join_leave(from.join_leave());
    }
    if (from.has_player()) {
      mutable_player()->::net::looker_info::MergeFrom(from.player());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_notify_player_join_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_notify_player_join_rep::CopyFrom(const msg_notify_player_join_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_notify_player_join_rep::IsInitialized() const {

  return true;
}

void msg_notify_player_join_rep::Swap(msg_notify_player_join_rep* other) {
  if (other != this) {
    std::swap(join_leave_, other->join_leave_);
    std::swap(player_, other->player_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_notify_player_join_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_notify_player_join_rep_descriptor_;
  metadata.reflection = msg_notify_player_join_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_looker_list_info_rep::kLookersFieldNumber;
const int msg_looker_list_info_rep::kIsResetFieldNumber;
#endif  // !_MSC_VER

msg_looker_list_info_rep::msg_looker_list_info_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_looker_list_info_rep::InitAsDefaultInstance() {
}

msg_looker_list_info_rep::msg_looker_list_info_rep(const msg_looker_list_info_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_looker_list_info_rep::SharedCtor() {
  _cached_size_ = 0;
  is_reset_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_looker_list_info_rep::~msg_looker_list_info_rep() {
  SharedDtor();
}

void msg_looker_list_info_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_looker_list_info_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_looker_list_info_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_looker_list_info_rep_descriptor_;
}

const msg_looker_list_info_rep& msg_looker_list_info_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_looker_list_info_rep* msg_looker_list_info_rep::default_instance_ = NULL;

msg_looker_list_info_rep* msg_looker_list_info_rep::New() const {
  return new msg_looker_list_info_rep;
}

void msg_looker_list_info_rep::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    is_reset_ = 0u;
  }
  lookers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_looker_list_info_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .net.looker_info lookers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lookers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lookers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_lookers;
        if (input->ExpectTag(16)) goto parse_is_reset;
        break;
      }

      // optional uint32 is_reset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_reset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_reset_)));
          set_has_is_reset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_looker_list_info_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .net.looker_info lookers = 1;
  for (int i = 0; i < this->lookers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lookers(i), output);
  }

  // optional uint32 is_reset = 2;
  if (has_is_reset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->is_reset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_looker_list_info_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .net.looker_info lookers = 1;
  for (int i = 0; i < this->lookers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lookers(i), target);
  }

  // optional uint32 is_reset = 2;
  if (has_is_reset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->is_reset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_looker_list_info_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 is_reset = 2;
    if (has_is_reset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_reset());
    }

  }
  // repeated .net.looker_info lookers = 1;
  total_size += 1 * this->lookers_size();
  for (int i = 0; i < this->lookers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lookers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_looker_list_info_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_looker_list_info_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_looker_list_info_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_looker_list_info_rep::MergeFrom(const msg_looker_list_info_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  lookers_.MergeFrom(from.lookers_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_is_reset()) {
      set_is_reset(from.is_reset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_looker_list_info_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_looker_list_info_rep::CopyFrom(const msg_looker_list_info_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_looker_list_info_rep::IsInitialized() const {

  return true;
}

void msg_looker_list_info_rep::Swap(msg_looker_list_info_rep* other) {
  if (other != this) {
    lookers_.Swap(&other->lookers_);
    std::swap(is_reset_, other->is_reset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_looker_list_info_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_looker_list_info_rep_descriptor_;
  metadata.reflection = msg_looker_list_info_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_sitdown_standup_req::kOperIdFieldNumber;
const int msg_sitdown_standup_req::kChairIdFieldNumber;
#endif  // !_MSC_VER

msg_sitdown_standup_req::msg_sitdown_standup_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_sitdown_standup_req::InitAsDefaultInstance() {
}

msg_sitdown_standup_req::msg_sitdown_standup_req(const msg_sitdown_standup_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_sitdown_standup_req::SharedCtor() {
  _cached_size_ = 0;
  oper_id_ = 0u;
  chair_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_sitdown_standup_req::~msg_sitdown_standup_req() {
  SharedDtor();
}

void msg_sitdown_standup_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_sitdown_standup_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_sitdown_standup_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_sitdown_standup_req_descriptor_;
}

const msg_sitdown_standup_req& msg_sitdown_standup_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_sitdown_standup_req* msg_sitdown_standup_req::default_instance_ = NULL;

msg_sitdown_standup_req* msg_sitdown_standup_req::New() const {
  return new msg_sitdown_standup_req;
}

void msg_sitdown_standup_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oper_id_ = 0u;
    chair_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_sitdown_standup_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 oper_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oper_id_)));
          set_has_oper_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chair_id;
        break;
      }

      // optional uint32 chair_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chair_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chair_id_)));
          set_has_chair_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_sitdown_standup_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 oper_id = 1;
  if (has_oper_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->oper_id(), output);
  }

  // optional uint32 chair_id = 2;
  if (has_chair_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->chair_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_sitdown_standup_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 oper_id = 1;
  if (has_oper_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->oper_id(), target);
  }

  // optional uint32 chair_id = 2;
  if (has_chair_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->chair_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_sitdown_standup_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 oper_id = 1;
    if (has_oper_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oper_id());
    }

    // optional uint32 chair_id = 2;
    if (has_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chair_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_sitdown_standup_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_sitdown_standup_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_sitdown_standup_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_sitdown_standup_req::MergeFrom(const msg_sitdown_standup_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_oper_id()) {
      set_oper_id(from.oper_id());
    }
    if (from.has_chair_id()) {
      set_chair_id(from.chair_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_sitdown_standup_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_sitdown_standup_req::CopyFrom(const msg_sitdown_standup_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_sitdown_standup_req::IsInitialized() const {

  return true;
}

void msg_sitdown_standup_req::Swap(msg_sitdown_standup_req* other) {
  if (other != this) {
    std::swap(oper_id_, other->oper_id_);
    std::swap(chair_id_, other->chair_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_sitdown_standup_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_sitdown_standup_req_descriptor_;
  metadata.reflection = msg_sitdown_standup_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_sitdown_standup_rep::kOperIdFieldNumber;
const int msg_sitdown_standup_rep::kChairIdFieldNumber;
const int msg_sitdown_standup_rep::kResultFieldNumber;
#endif  // !_MSC_VER

msg_sitdown_standup_rep::msg_sitdown_standup_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_sitdown_standup_rep::InitAsDefaultInstance() {
}

msg_sitdown_standup_rep::msg_sitdown_standup_rep(const msg_sitdown_standup_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_sitdown_standup_rep::SharedCtor() {
  _cached_size_ = 0;
  oper_id_ = 0u;
  chair_id_ = 0u;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_sitdown_standup_rep::~msg_sitdown_standup_rep() {
  SharedDtor();
}

void msg_sitdown_standup_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_sitdown_standup_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_sitdown_standup_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_sitdown_standup_rep_descriptor_;
}

const msg_sitdown_standup_rep& msg_sitdown_standup_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_sitdown_standup_rep* msg_sitdown_standup_rep::default_instance_ = NULL;

msg_sitdown_standup_rep* msg_sitdown_standup_rep::New() const {
  return new msg_sitdown_standup_rep;
}

void msg_sitdown_standup_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oper_id_ = 0u;
    chair_id_ = 0u;
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_sitdown_standup_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 oper_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oper_id_)));
          set_has_oper_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chair_id;
        break;
      }

      // optional uint32 chair_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chair_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chair_id_)));
          set_has_chair_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional uint32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_sitdown_standup_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 oper_id = 1;
  if (has_oper_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->oper_id(), output);
  }

  // optional uint32 chair_id = 2;
  if (has_chair_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->chair_id(), output);
  }

  // optional uint32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_sitdown_standup_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 oper_id = 1;
  if (has_oper_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->oper_id(), target);
  }

  // optional uint32 chair_id = 2;
  if (has_chair_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->chair_id(), target);
  }

  // optional uint32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_sitdown_standup_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 oper_id = 1;
    if (has_oper_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oper_id());
    }

    // optional uint32 chair_id = 2;
    if (has_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chair_id());
    }

    // optional uint32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_sitdown_standup_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_sitdown_standup_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_sitdown_standup_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_sitdown_standup_rep::MergeFrom(const msg_sitdown_standup_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_oper_id()) {
      set_oper_id(from.oper_id());
    }
    if (from.has_chair_id()) {
      set_chair_id(from.chair_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_sitdown_standup_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_sitdown_standup_rep::CopyFrom(const msg_sitdown_standup_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_sitdown_standup_rep::IsInitialized() const {

  return true;
}

void msg_sitdown_standup_rep::Swap(msg_sitdown_standup_rep* other) {
  if (other != this) {
    std::swap(oper_id_, other->oper_id_);
    std::swap(chair_id_, other->chair_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_sitdown_standup_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_sitdown_standup_rep_descriptor_;
  metadata.reflection = msg_sitdown_standup_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_items_user_req::kMeuidFieldNumber;
const int msg_items_user_req::kBechairIdFieldNumber;
const int msg_items_user_req::kItemIdFieldNumber;
const int msg_items_user_req::kItemCountFieldNumber;
#endif  // !_MSC_VER

msg_items_user_req::msg_items_user_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_items_user_req::InitAsDefaultInstance() {
}

msg_items_user_req::msg_items_user_req(const msg_items_user_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_items_user_req::SharedCtor() {
  _cached_size_ = 0;
  meuid_ = 0u;
  bechair_id_ = 0u;
  item_id_ = 0u;
  item_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_items_user_req::~msg_items_user_req() {
  SharedDtor();
}

void msg_items_user_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_items_user_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_items_user_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_items_user_req_descriptor_;
}

const msg_items_user_req& msg_items_user_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_items_user_req* msg_items_user_req::default_instance_ = NULL;

msg_items_user_req* msg_items_user_req::New() const {
  return new msg_items_user_req;
}

void msg_items_user_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    meuid_ = 0u;
    bechair_id_ = 0u;
    item_id_ = 0u;
    item_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_items_user_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 meuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &meuid_)));
          set_has_meuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bechair_id;
        break;
      }

      // optional uint32 bechair_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bechair_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bechair_id_)));
          set_has_bechair_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_id;
        break;
      }

      // optional uint32 item_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_count;
        break;
      }

      // optional uint32 item_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_items_user_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 meuid = 1;
  if (has_meuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->meuid(), output);
  }

  // optional uint32 bechair_id = 2;
  if (has_bechair_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bechair_id(), output);
  }

  // optional uint32 item_id = 3;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_id(), output);
  }

  // optional uint32 item_count = 4;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->item_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_items_user_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 meuid = 1;
  if (has_meuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->meuid(), target);
  }

  // optional uint32 bechair_id = 2;
  if (has_bechair_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bechair_id(), target);
  }

  // optional uint32 item_id = 3;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_id(), target);
  }

  // optional uint32 item_count = 4;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->item_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_items_user_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 meuid = 1;
    if (has_meuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->meuid());
    }

    // optional uint32 bechair_id = 2;
    if (has_bechair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bechair_id());
    }

    // optional uint32 item_id = 3;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // optional uint32 item_count = 4;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_items_user_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_items_user_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_items_user_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_items_user_req::MergeFrom(const msg_items_user_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_meuid()) {
      set_meuid(from.meuid());
    }
    if (from.has_bechair_id()) {
      set_bechair_id(from.bechair_id());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_items_user_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_items_user_req::CopyFrom(const msg_items_user_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_items_user_req::IsInitialized() const {

  return true;
}

void msg_items_user_req::Swap(msg_items_user_req* other) {
  if (other != this) {
    std::swap(meuid_, other->meuid_);
    std::swap(bechair_id_, other->bechair_id_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_count_, other->item_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_items_user_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_items_user_req_descriptor_;
  metadata.reflection = msg_items_user_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_items_user_rep::kMechairIdFieldNumber;
const int msg_items_user_rep::kBechairIdFieldNumber;
const int msg_items_user_rep::kItemIdFieldNumber;
const int msg_items_user_rep::kItemCountFieldNumber;
#endif  // !_MSC_VER

msg_items_user_rep::msg_items_user_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_items_user_rep::InitAsDefaultInstance() {
}

msg_items_user_rep::msg_items_user_rep(const msg_items_user_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_items_user_rep::SharedCtor() {
  _cached_size_ = 0;
  mechair_id_ = 0u;
  bechair_id_ = 0u;
  item_id_ = 0u;
  item_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_items_user_rep::~msg_items_user_rep() {
  SharedDtor();
}

void msg_items_user_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_items_user_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_items_user_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_items_user_rep_descriptor_;
}

const msg_items_user_rep& msg_items_user_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_items_user_rep* msg_items_user_rep::default_instance_ = NULL;

msg_items_user_rep* msg_items_user_rep::New() const {
  return new msg_items_user_rep;
}

void msg_items_user_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mechair_id_ = 0u;
    bechair_id_ = 0u;
    item_id_ = 0u;
    item_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_items_user_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mechair_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mechair_id_)));
          set_has_mechair_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bechair_id;
        break;
      }

      // optional uint32 bechair_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bechair_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bechair_id_)));
          set_has_bechair_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_id;
        break;
      }

      // optional uint32 item_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_count;
        break;
      }

      // optional uint32 item_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_items_user_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 mechair_id = 1;
  if (has_mechair_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mechair_id(), output);
  }

  // optional uint32 bechair_id = 2;
  if (has_bechair_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bechair_id(), output);
  }

  // optional uint32 item_id = 3;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_id(), output);
  }

  // optional uint32 item_count = 4;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->item_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_items_user_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 mechair_id = 1;
  if (has_mechair_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mechair_id(), target);
  }

  // optional uint32 bechair_id = 2;
  if (has_bechair_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bechair_id(), target);
  }

  // optional uint32 item_id = 3;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_id(), target);
  }

  // optional uint32 item_count = 4;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->item_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_items_user_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mechair_id = 1;
    if (has_mechair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mechair_id());
    }

    // optional uint32 bechair_id = 2;
    if (has_bechair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bechair_id());
    }

    // optional uint32 item_id = 3;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // optional uint32 item_count = 4;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_items_user_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_items_user_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_items_user_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_items_user_rep::MergeFrom(const msg_items_user_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mechair_id()) {
      set_mechair_id(from.mechair_id());
    }
    if (from.has_bechair_id()) {
      set_bechair_id(from.bechair_id());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_items_user_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_items_user_rep::CopyFrom(const msg_items_user_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_items_user_rep::IsInitialized() const {

  return true;
}

void msg_items_user_rep::Swap(msg_items_user_rep* other) {
  if (other != this) {
    std::swap(mechair_id_, other->mechair_id_);
    std::swap(bechair_id_, other->bechair_id_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_count_, other->item_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_items_user_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_items_user_rep_descriptor_;
  metadata.reflection = msg_items_user_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_ingame_update_score::kUidFieldNumber;
const int msg_ingame_update_score::kGameTypeFieldNumber;
const int msg_ingame_update_score::kDiffScoreFieldNumber;
#endif  // !_MSC_VER

msg_ingame_update_score::msg_ingame_update_score()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_ingame_update_score::InitAsDefaultInstance() {
}

msg_ingame_update_score::msg_ingame_update_score(const msg_ingame_update_score& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_ingame_update_score::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  game_type_ = 0u;
  diff_score_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_ingame_update_score::~msg_ingame_update_score() {
  SharedDtor();
}

void msg_ingame_update_score::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_ingame_update_score::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_ingame_update_score::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_ingame_update_score_descriptor_;
}

const msg_ingame_update_score& msg_ingame_update_score::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_ingame_update_score* msg_ingame_update_score::default_instance_ = NULL;

msg_ingame_update_score* msg_ingame_update_score::New() const {
  return new msg_ingame_update_score;
}

void msg_ingame_update_score::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    game_type_ = 0u;
    diff_score_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_ingame_update_score::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_type;
        break;
      }

      // optional uint32 game_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
          set_has_game_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_diff_score;
        break;
      }

      // optional int64 diff_score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diff_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &diff_score_)));
          set_has_diff_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_ingame_update_score::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 game_type = 2;
  if (has_game_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_type(), output);
  }

  // optional int64 diff_score = 3;
  if (has_diff_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->diff_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_ingame_update_score::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional uint32 game_type = 2;
  if (has_game_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_type(), target);
  }

  // optional int64 diff_score = 3;
  if (has_diff_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->diff_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_ingame_update_score::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 game_type = 2;
    if (has_game_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_type());
    }

    // optional int64 diff_score = 3;
    if (has_diff_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->diff_score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_ingame_update_score::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_ingame_update_score* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_ingame_update_score*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_ingame_update_score::MergeFrom(const msg_ingame_update_score& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_game_type()) {
      set_game_type(from.game_type());
    }
    if (from.has_diff_score()) {
      set_diff_score(from.diff_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_ingame_update_score::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_ingame_update_score::CopyFrom(const msg_ingame_update_score& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_ingame_update_score::IsInitialized() const {

  return true;
}

void msg_ingame_update_score::Swap(msg_ingame_update_score* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(game_type_, other->game_type_);
    std::swap(diff_score_, other->diff_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_ingame_update_score::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_ingame_update_score_descriptor_;
  metadata.reflection = msg_ingame_update_score_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int vip_recharge_wechatinfo::kSortidFieldNumber;
const int vip_recharge_wechatinfo::kTitleFieldNumber;
const int vip_recharge_wechatinfo::kAccountFieldNumber;
const int vip_recharge_wechatinfo::kLowAmountFieldNumber;
const int vip_recharge_wechatinfo::kPayTypeFieldNumber;
#endif  // !_MSC_VER

vip_recharge_wechatinfo::vip_recharge_wechatinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void vip_recharge_wechatinfo::InitAsDefaultInstance() {
}

vip_recharge_wechatinfo::vip_recharge_wechatinfo(const vip_recharge_wechatinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void vip_recharge_wechatinfo::SharedCtor() {
  _cached_size_ = 0;
  sortid_ = 0u;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  low_amount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

vip_recharge_wechatinfo::~vip_recharge_wechatinfo() {
  SharedDtor();
}

void vip_recharge_wechatinfo::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void vip_recharge_wechatinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* vip_recharge_wechatinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return vip_recharge_wechatinfo_descriptor_;
}

const vip_recharge_wechatinfo& vip_recharge_wechatinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

vip_recharge_wechatinfo* vip_recharge_wechatinfo::default_instance_ = NULL;

vip_recharge_wechatinfo* vip_recharge_wechatinfo::New() const {
  return new vip_recharge_wechatinfo;
}

void vip_recharge_wechatinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sortid_ = 0u;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    low_amount_ = 0u;
  }
  pay_type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool vip_recharge_wechatinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sortid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sortid_)));
          set_has_sortid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // optional bytes title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }

      // optional bytes account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_low_amount;
        break;
      }

      // optional uint32 low_amount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_low_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &low_amount_)));
          set_has_low_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pay_type;
        break;
      }

      // repeated int32 pay_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pay_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_pay_type())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pay_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pay_type;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void vip_recharge_wechatinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 sortid = 1;
  if (has_sortid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sortid(), output);
  }

  // optional bytes title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->title(), output);
  }

  // optional bytes account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->account(), output);
  }

  // optional uint32 low_amount = 4;
  if (has_low_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->low_amount(), output);
  }

  // repeated int32 pay_type = 5;
  for (int i = 0; i < this->pay_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->pay_type(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* vip_recharge_wechatinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sortid = 1;
  if (has_sortid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sortid(), target);
  }

  // optional bytes title = 2;
  if (has_title()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->title(), target);
  }

  // optional bytes account = 3;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->account(), target);
  }

  // optional uint32 low_amount = 4;
  if (has_low_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->low_amount(), target);
  }

  // repeated int32 pay_type = 5;
  for (int i = 0; i < this->pay_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->pay_type(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int vip_recharge_wechatinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sortid = 1;
    if (has_sortid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sortid());
    }

    // optional bytes title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->title());
    }

    // optional bytes account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // optional uint32 low_amount = 4;
    if (has_low_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->low_amount());
    }

  }
  // repeated int32 pay_type = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->pay_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pay_type(i));
    }
    total_size += 1 * this->pay_type_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void vip_recharge_wechatinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const vip_recharge_wechatinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const vip_recharge_wechatinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void vip_recharge_wechatinfo::MergeFrom(const vip_recharge_wechatinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  pay_type_.MergeFrom(from.pay_type_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sortid()) {
      set_sortid(from.sortid());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_low_amount()) {
      set_low_amount(from.low_amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void vip_recharge_wechatinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vip_recharge_wechatinfo::CopyFrom(const vip_recharge_wechatinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vip_recharge_wechatinfo::IsInitialized() const {

  return true;
}

void vip_recharge_wechatinfo::Swap(vip_recharge_wechatinfo* other) {
  if (other != this) {
    std::swap(sortid_, other->sortid_);
    std::swap(title_, other->title_);
    std::swap(account_, other->account_);
    std::swap(low_amount_, other->low_amount_);
    pay_type_.Swap(&other->pay_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata vip_recharge_wechatinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = vip_recharge_wechatinfo_descriptor_;
  metadata.reflection = vip_recharge_wechatinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

msg_notify_vip_recharge_show_req::msg_notify_vip_recharge_show_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_notify_vip_recharge_show_req::InitAsDefaultInstance() {
}

msg_notify_vip_recharge_show_req::msg_notify_vip_recharge_show_req(const msg_notify_vip_recharge_show_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_notify_vip_recharge_show_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_notify_vip_recharge_show_req::~msg_notify_vip_recharge_show_req() {
  SharedDtor();
}

void msg_notify_vip_recharge_show_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_notify_vip_recharge_show_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_notify_vip_recharge_show_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_notify_vip_recharge_show_req_descriptor_;
}

const msg_notify_vip_recharge_show_req& msg_notify_vip_recharge_show_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_notify_vip_recharge_show_req* msg_notify_vip_recharge_show_req::default_instance_ = NULL;

msg_notify_vip_recharge_show_req* msg_notify_vip_recharge_show_req::New() const {
  return new msg_notify_vip_recharge_show_req;
}

void msg_notify_vip_recharge_show_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_notify_vip_recharge_show_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void msg_notify_vip_recharge_show_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_notify_vip_recharge_show_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_notify_vip_recharge_show_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_notify_vip_recharge_show_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_notify_vip_recharge_show_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_notify_vip_recharge_show_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_notify_vip_recharge_show_req::MergeFrom(const msg_notify_vip_recharge_show_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_notify_vip_recharge_show_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_notify_vip_recharge_show_req::CopyFrom(const msg_notify_vip_recharge_show_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_notify_vip_recharge_show_req::IsInitialized() const {

  return true;
}

void msg_notify_vip_recharge_show_req::Swap(msg_notify_vip_recharge_show_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_notify_vip_recharge_show_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_notify_vip_recharge_show_req_descriptor_;
  metadata.reflection = msg_notify_vip_recharge_show_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_notify_vip_recharge_show::kStatusFieldNumber;
const int msg_notify_vip_recharge_show::kInfoFieldNumber;
#endif  // !_MSC_VER

msg_notify_vip_recharge_show::msg_notify_vip_recharge_show()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_notify_vip_recharge_show::InitAsDefaultInstance() {
}

msg_notify_vip_recharge_show::msg_notify_vip_recharge_show(const msg_notify_vip_recharge_show& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_notify_vip_recharge_show::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_notify_vip_recharge_show::~msg_notify_vip_recharge_show() {
  SharedDtor();
}

void msg_notify_vip_recharge_show::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_notify_vip_recharge_show::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_notify_vip_recharge_show::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_notify_vip_recharge_show_descriptor_;
}

const msg_notify_vip_recharge_show& msg_notify_vip_recharge_show::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_notify_vip_recharge_show* msg_notify_vip_recharge_show::default_instance_ = NULL;

msg_notify_vip_recharge_show* msg_notify_vip_recharge_show::New() const {
  return new msg_notify_vip_recharge_show;
}

void msg_notify_vip_recharge_show::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_notify_vip_recharge_show::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .net.vip_recharge_wechatinfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_notify_vip_recharge_show::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  // repeated .net.vip_recharge_wechatinfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_notify_vip_recharge_show::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  // repeated .net.vip_recharge_wechatinfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_notify_vip_recharge_show::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  // repeated .net.vip_recharge_wechatinfo info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_notify_vip_recharge_show::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_notify_vip_recharge_show* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_notify_vip_recharge_show*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_notify_vip_recharge_show::MergeFrom(const msg_notify_vip_recharge_show& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_notify_vip_recharge_show::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_notify_vip_recharge_show::CopyFrom(const msg_notify_vip_recharge_show& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_notify_vip_recharge_show::IsInitialized() const {

  return true;
}

void msg_notify_vip_recharge_show::Swap(msg_notify_vip_recharge_show* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_notify_vip_recharge_show::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_notify_vip_recharge_show_descriptor_;
  metadata.reflection = msg_notify_vip_recharge_show_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

msg_notify_unionpayrecharge_show_req::msg_notify_unionpayrecharge_show_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_notify_unionpayrecharge_show_req::InitAsDefaultInstance() {
}

msg_notify_unionpayrecharge_show_req::msg_notify_unionpayrecharge_show_req(const msg_notify_unionpayrecharge_show_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_notify_unionpayrecharge_show_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_notify_unionpayrecharge_show_req::~msg_notify_unionpayrecharge_show_req() {
  SharedDtor();
}

void msg_notify_unionpayrecharge_show_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_notify_unionpayrecharge_show_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_notify_unionpayrecharge_show_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_notify_unionpayrecharge_show_req_descriptor_;
}

const msg_notify_unionpayrecharge_show_req& msg_notify_unionpayrecharge_show_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_notify_unionpayrecharge_show_req* msg_notify_unionpayrecharge_show_req::default_instance_ = NULL;

msg_notify_unionpayrecharge_show_req* msg_notify_unionpayrecharge_show_req::New() const {
  return new msg_notify_unionpayrecharge_show_req;
}

void msg_notify_unionpayrecharge_show_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_notify_unionpayrecharge_show_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void msg_notify_unionpayrecharge_show_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_notify_unionpayrecharge_show_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_notify_unionpayrecharge_show_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_notify_unionpayrecharge_show_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_notify_unionpayrecharge_show_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_notify_unionpayrecharge_show_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_notify_unionpayrecharge_show_req::MergeFrom(const msg_notify_unionpayrecharge_show_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_notify_unionpayrecharge_show_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_notify_unionpayrecharge_show_req::CopyFrom(const msg_notify_unionpayrecharge_show_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_notify_unionpayrecharge_show_req::IsInitialized() const {

  return true;
}

void msg_notify_unionpayrecharge_show_req::Swap(msg_notify_unionpayrecharge_show_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_notify_unionpayrecharge_show_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_notify_unionpayrecharge_show_req_descriptor_;
  metadata.reflection = msg_notify_unionpayrecharge_show_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_notify_unionpayrecharge_show_rep::kStatusFieldNumber;
#endif  // !_MSC_VER

msg_notify_unionpayrecharge_show_rep::msg_notify_unionpayrecharge_show_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_notify_unionpayrecharge_show_rep::InitAsDefaultInstance() {
}

msg_notify_unionpayrecharge_show_rep::msg_notify_unionpayrecharge_show_rep(const msg_notify_unionpayrecharge_show_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_notify_unionpayrecharge_show_rep::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_notify_unionpayrecharge_show_rep::~msg_notify_unionpayrecharge_show_rep() {
  SharedDtor();
}

void msg_notify_unionpayrecharge_show_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_notify_unionpayrecharge_show_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_notify_unionpayrecharge_show_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_notify_unionpayrecharge_show_rep_descriptor_;
}

const msg_notify_unionpayrecharge_show_rep& msg_notify_unionpayrecharge_show_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_notify_unionpayrecharge_show_rep* msg_notify_unionpayrecharge_show_rep::default_instance_ = NULL;

msg_notify_unionpayrecharge_show_rep* msg_notify_unionpayrecharge_show_rep::New() const {
  return new msg_notify_unionpayrecharge_show_rep;
}

void msg_notify_unionpayrecharge_show_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_notify_unionpayrecharge_show_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_notify_unionpayrecharge_show_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_notify_unionpayrecharge_show_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_notify_unionpayrecharge_show_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_notify_unionpayrecharge_show_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_notify_unionpayrecharge_show_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_notify_unionpayrecharge_show_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_notify_unionpayrecharge_show_rep::MergeFrom(const msg_notify_unionpayrecharge_show_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_notify_unionpayrecharge_show_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_notify_unionpayrecharge_show_rep::CopyFrom(const msg_notify_unionpayrecharge_show_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_notify_unionpayrecharge_show_rep::IsInitialized() const {

  return true;
}

void msg_notify_unionpayrecharge_show_rep::Swap(msg_notify_unionpayrecharge_show_rep* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_notify_unionpayrecharge_show_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_notify_unionpayrecharge_show_rep_descriptor_;
  metadata.reflection = msg_notify_unionpayrecharge_show_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

msg_notify_wechatpayrecharge_show_req::msg_notify_wechatpayrecharge_show_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_notify_wechatpayrecharge_show_req::InitAsDefaultInstance() {
}

msg_notify_wechatpayrecharge_show_req::msg_notify_wechatpayrecharge_show_req(const msg_notify_wechatpayrecharge_show_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_notify_wechatpayrecharge_show_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_notify_wechatpayrecharge_show_req::~msg_notify_wechatpayrecharge_show_req() {
  SharedDtor();
}

void msg_notify_wechatpayrecharge_show_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_notify_wechatpayrecharge_show_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_notify_wechatpayrecharge_show_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_notify_wechatpayrecharge_show_req_descriptor_;
}

const msg_notify_wechatpayrecharge_show_req& msg_notify_wechatpayrecharge_show_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_notify_wechatpayrecharge_show_req* msg_notify_wechatpayrecharge_show_req::default_instance_ = NULL;

msg_notify_wechatpayrecharge_show_req* msg_notify_wechatpayrecharge_show_req::New() const {
  return new msg_notify_wechatpayrecharge_show_req;
}

void msg_notify_wechatpayrecharge_show_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_notify_wechatpayrecharge_show_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void msg_notify_wechatpayrecharge_show_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_notify_wechatpayrecharge_show_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_notify_wechatpayrecharge_show_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_notify_wechatpayrecharge_show_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_notify_wechatpayrecharge_show_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_notify_wechatpayrecharge_show_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_notify_wechatpayrecharge_show_req::MergeFrom(const msg_notify_wechatpayrecharge_show_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_notify_wechatpayrecharge_show_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_notify_wechatpayrecharge_show_req::CopyFrom(const msg_notify_wechatpayrecharge_show_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_notify_wechatpayrecharge_show_req::IsInitialized() const {

  return true;
}

void msg_notify_wechatpayrecharge_show_req::Swap(msg_notify_wechatpayrecharge_show_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_notify_wechatpayrecharge_show_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_notify_wechatpayrecharge_show_req_descriptor_;
  metadata.reflection = msg_notify_wechatpayrecharge_show_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_notify_wechatpayrecharge_show_rep::kStatusFieldNumber;
#endif  // !_MSC_VER

msg_notify_wechatpayrecharge_show_rep::msg_notify_wechatpayrecharge_show_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_notify_wechatpayrecharge_show_rep::InitAsDefaultInstance() {
}

msg_notify_wechatpayrecharge_show_rep::msg_notify_wechatpayrecharge_show_rep(const msg_notify_wechatpayrecharge_show_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_notify_wechatpayrecharge_show_rep::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_notify_wechatpayrecharge_show_rep::~msg_notify_wechatpayrecharge_show_rep() {
  SharedDtor();
}

void msg_notify_wechatpayrecharge_show_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_notify_wechatpayrecharge_show_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_notify_wechatpayrecharge_show_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_notify_wechatpayrecharge_show_rep_descriptor_;
}

const msg_notify_wechatpayrecharge_show_rep& msg_notify_wechatpayrecharge_show_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_notify_wechatpayrecharge_show_rep* msg_notify_wechatpayrecharge_show_rep::default_instance_ = NULL;

msg_notify_wechatpayrecharge_show_rep* msg_notify_wechatpayrecharge_show_rep::New() const {
  return new msg_notify_wechatpayrecharge_show_rep;
}

void msg_notify_wechatpayrecharge_show_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_notify_wechatpayrecharge_show_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_notify_wechatpayrecharge_show_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_notify_wechatpayrecharge_show_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_notify_wechatpayrecharge_show_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_notify_wechatpayrecharge_show_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_notify_wechatpayrecharge_show_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_notify_wechatpayrecharge_show_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_notify_wechatpayrecharge_show_rep::MergeFrom(const msg_notify_wechatpayrecharge_show_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_notify_wechatpayrecharge_show_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_notify_wechatpayrecharge_show_rep::CopyFrom(const msg_notify_wechatpayrecharge_show_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_notify_wechatpayrecharge_show_rep::IsInitialized() const {

  return true;
}

void msg_notify_wechatpayrecharge_show_rep::Swap(msg_notify_wechatpayrecharge_show_rep* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_notify_wechatpayrecharge_show_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_notify_wechatpayrecharge_show_rep_descriptor_;
  metadata.reflection = msg_notify_wechatpayrecharge_show_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

msg_notify_alipayrecharge_show_req::msg_notify_alipayrecharge_show_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_notify_alipayrecharge_show_req::InitAsDefaultInstance() {
}

msg_notify_alipayrecharge_show_req::msg_notify_alipayrecharge_show_req(const msg_notify_alipayrecharge_show_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_notify_alipayrecharge_show_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_notify_alipayrecharge_show_req::~msg_notify_alipayrecharge_show_req() {
  SharedDtor();
}

void msg_notify_alipayrecharge_show_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_notify_alipayrecharge_show_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_notify_alipayrecharge_show_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_notify_alipayrecharge_show_req_descriptor_;
}

const msg_notify_alipayrecharge_show_req& msg_notify_alipayrecharge_show_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_notify_alipayrecharge_show_req* msg_notify_alipayrecharge_show_req::default_instance_ = NULL;

msg_notify_alipayrecharge_show_req* msg_notify_alipayrecharge_show_req::New() const {
  return new msg_notify_alipayrecharge_show_req;
}

void msg_notify_alipayrecharge_show_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_notify_alipayrecharge_show_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void msg_notify_alipayrecharge_show_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_notify_alipayrecharge_show_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_notify_alipayrecharge_show_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_notify_alipayrecharge_show_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_notify_alipayrecharge_show_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_notify_alipayrecharge_show_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_notify_alipayrecharge_show_req::MergeFrom(const msg_notify_alipayrecharge_show_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_notify_alipayrecharge_show_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_notify_alipayrecharge_show_req::CopyFrom(const msg_notify_alipayrecharge_show_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_notify_alipayrecharge_show_req::IsInitialized() const {

  return true;
}

void msg_notify_alipayrecharge_show_req::Swap(msg_notify_alipayrecharge_show_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_notify_alipayrecharge_show_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_notify_alipayrecharge_show_req_descriptor_;
  metadata.reflection = msg_notify_alipayrecharge_show_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_notify_alipayrecharge_show_rep::kStatusFieldNumber;
#endif  // !_MSC_VER

msg_notify_alipayrecharge_show_rep::msg_notify_alipayrecharge_show_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_notify_alipayrecharge_show_rep::InitAsDefaultInstance() {
}

msg_notify_alipayrecharge_show_rep::msg_notify_alipayrecharge_show_rep(const msg_notify_alipayrecharge_show_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_notify_alipayrecharge_show_rep::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_notify_alipayrecharge_show_rep::~msg_notify_alipayrecharge_show_rep() {
  SharedDtor();
}

void msg_notify_alipayrecharge_show_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_notify_alipayrecharge_show_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_notify_alipayrecharge_show_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_notify_alipayrecharge_show_rep_descriptor_;
}

const msg_notify_alipayrecharge_show_rep& msg_notify_alipayrecharge_show_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_notify_alipayrecharge_show_rep* msg_notify_alipayrecharge_show_rep::default_instance_ = NULL;

msg_notify_alipayrecharge_show_rep* msg_notify_alipayrecharge_show_rep::New() const {
  return new msg_notify_alipayrecharge_show_rep;
}

void msg_notify_alipayrecharge_show_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_notify_alipayrecharge_show_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_notify_alipayrecharge_show_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_notify_alipayrecharge_show_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_notify_alipayrecharge_show_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_notify_alipayrecharge_show_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_notify_alipayrecharge_show_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_notify_alipayrecharge_show_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_notify_alipayrecharge_show_rep::MergeFrom(const msg_notify_alipayrecharge_show_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_notify_alipayrecharge_show_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_notify_alipayrecharge_show_rep::CopyFrom(const msg_notify_alipayrecharge_show_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_notify_alipayrecharge_show_rep::IsInitialized() const {

  return true;
}

void msg_notify_alipayrecharge_show_rep::Swap(msg_notify_alipayrecharge_show_rep* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_notify_alipayrecharge_show_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_notify_alipayrecharge_show_rep_descriptor_;
  metadata.reflection = msg_notify_alipayrecharge_show_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

msg_notify_otherpayrecharge_show_req::msg_notify_otherpayrecharge_show_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_notify_otherpayrecharge_show_req::InitAsDefaultInstance() {
}

msg_notify_otherpayrecharge_show_req::msg_notify_otherpayrecharge_show_req(const msg_notify_otherpayrecharge_show_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_notify_otherpayrecharge_show_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_notify_otherpayrecharge_show_req::~msg_notify_otherpayrecharge_show_req() {
  SharedDtor();
}

void msg_notify_otherpayrecharge_show_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_notify_otherpayrecharge_show_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_notify_otherpayrecharge_show_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_notify_otherpayrecharge_show_req_descriptor_;
}

const msg_notify_otherpayrecharge_show_req& msg_notify_otherpayrecharge_show_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_notify_otherpayrecharge_show_req* msg_notify_otherpayrecharge_show_req::default_instance_ = NULL;

msg_notify_otherpayrecharge_show_req* msg_notify_otherpayrecharge_show_req::New() const {
  return new msg_notify_otherpayrecharge_show_req;
}

void msg_notify_otherpayrecharge_show_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_notify_otherpayrecharge_show_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void msg_notify_otherpayrecharge_show_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_notify_otherpayrecharge_show_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_notify_otherpayrecharge_show_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_notify_otherpayrecharge_show_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_notify_otherpayrecharge_show_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_notify_otherpayrecharge_show_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_notify_otherpayrecharge_show_req::MergeFrom(const msg_notify_otherpayrecharge_show_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_notify_otherpayrecharge_show_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_notify_otherpayrecharge_show_req::CopyFrom(const msg_notify_otherpayrecharge_show_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_notify_otherpayrecharge_show_req::IsInitialized() const {

  return true;
}

void msg_notify_otherpayrecharge_show_req::Swap(msg_notify_otherpayrecharge_show_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_notify_otherpayrecharge_show_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_notify_otherpayrecharge_show_req_descriptor_;
  metadata.reflection = msg_notify_otherpayrecharge_show_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_notify_otherpayrecharge_show_rep::kStatusFieldNumber;
#endif  // !_MSC_VER

msg_notify_otherpayrecharge_show_rep::msg_notify_otherpayrecharge_show_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_notify_otherpayrecharge_show_rep::InitAsDefaultInstance() {
}

msg_notify_otherpayrecharge_show_rep::msg_notify_otherpayrecharge_show_rep(const msg_notify_otherpayrecharge_show_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_notify_otherpayrecharge_show_rep::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_notify_otherpayrecharge_show_rep::~msg_notify_otherpayrecharge_show_rep() {
  SharedDtor();
}

void msg_notify_otherpayrecharge_show_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_notify_otherpayrecharge_show_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_notify_otherpayrecharge_show_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_notify_otherpayrecharge_show_rep_descriptor_;
}

const msg_notify_otherpayrecharge_show_rep& msg_notify_otherpayrecharge_show_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_notify_otherpayrecharge_show_rep* msg_notify_otherpayrecharge_show_rep::default_instance_ = NULL;

msg_notify_otherpayrecharge_show_rep* msg_notify_otherpayrecharge_show_rep::New() const {
  return new msg_notify_otherpayrecharge_show_rep;
}

void msg_notify_otherpayrecharge_show_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_notify_otherpayrecharge_show_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_notify_otherpayrecharge_show_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_notify_otherpayrecharge_show_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_notify_otherpayrecharge_show_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_notify_otherpayrecharge_show_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_notify_otherpayrecharge_show_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_notify_otherpayrecharge_show_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_notify_otherpayrecharge_show_rep::MergeFrom(const msg_notify_otherpayrecharge_show_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_notify_otherpayrecharge_show_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_notify_otherpayrecharge_show_rep::CopyFrom(const msg_notify_otherpayrecharge_show_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_notify_otherpayrecharge_show_rep::IsInitialized() const {

  return true;
}

void msg_notify_otherpayrecharge_show_rep::Swap(msg_notify_otherpayrecharge_show_rep* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_notify_otherpayrecharge_show_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_notify_otherpayrecharge_show_rep_descriptor_;
  metadata.reflection = msg_notify_otherpayrecharge_show_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

msg_notify_qqpayrecharge_show_req::msg_notify_qqpayrecharge_show_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_notify_qqpayrecharge_show_req::InitAsDefaultInstance() {
}

msg_notify_qqpayrecharge_show_req::msg_notify_qqpayrecharge_show_req(const msg_notify_qqpayrecharge_show_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_notify_qqpayrecharge_show_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_notify_qqpayrecharge_show_req::~msg_notify_qqpayrecharge_show_req() {
  SharedDtor();
}

void msg_notify_qqpayrecharge_show_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_notify_qqpayrecharge_show_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_notify_qqpayrecharge_show_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_notify_qqpayrecharge_show_req_descriptor_;
}

const msg_notify_qqpayrecharge_show_req& msg_notify_qqpayrecharge_show_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_notify_qqpayrecharge_show_req* msg_notify_qqpayrecharge_show_req::default_instance_ = NULL;

msg_notify_qqpayrecharge_show_req* msg_notify_qqpayrecharge_show_req::New() const {
  return new msg_notify_qqpayrecharge_show_req;
}

void msg_notify_qqpayrecharge_show_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_notify_qqpayrecharge_show_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void msg_notify_qqpayrecharge_show_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_notify_qqpayrecharge_show_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_notify_qqpayrecharge_show_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_notify_qqpayrecharge_show_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_notify_qqpayrecharge_show_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_notify_qqpayrecharge_show_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_notify_qqpayrecharge_show_req::MergeFrom(const msg_notify_qqpayrecharge_show_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_notify_qqpayrecharge_show_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_notify_qqpayrecharge_show_req::CopyFrom(const msg_notify_qqpayrecharge_show_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_notify_qqpayrecharge_show_req::IsInitialized() const {

  return true;
}

void msg_notify_qqpayrecharge_show_req::Swap(msg_notify_qqpayrecharge_show_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_notify_qqpayrecharge_show_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_notify_qqpayrecharge_show_req_descriptor_;
  metadata.reflection = msg_notify_qqpayrecharge_show_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_notify_qqpayrecharge_show_rep::kStatusFieldNumber;
#endif  // !_MSC_VER

msg_notify_qqpayrecharge_show_rep::msg_notify_qqpayrecharge_show_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_notify_qqpayrecharge_show_rep::InitAsDefaultInstance() {
}

msg_notify_qqpayrecharge_show_rep::msg_notify_qqpayrecharge_show_rep(const msg_notify_qqpayrecharge_show_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_notify_qqpayrecharge_show_rep::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_notify_qqpayrecharge_show_rep::~msg_notify_qqpayrecharge_show_rep() {
  SharedDtor();
}

void msg_notify_qqpayrecharge_show_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_notify_qqpayrecharge_show_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_notify_qqpayrecharge_show_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_notify_qqpayrecharge_show_rep_descriptor_;
}

const msg_notify_qqpayrecharge_show_rep& msg_notify_qqpayrecharge_show_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_notify_qqpayrecharge_show_rep* msg_notify_qqpayrecharge_show_rep::default_instance_ = NULL;

msg_notify_qqpayrecharge_show_rep* msg_notify_qqpayrecharge_show_rep::New() const {
  return new msg_notify_qqpayrecharge_show_rep;
}

void msg_notify_qqpayrecharge_show_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_notify_qqpayrecharge_show_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_notify_qqpayrecharge_show_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_notify_qqpayrecharge_show_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_notify_qqpayrecharge_show_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_notify_qqpayrecharge_show_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_notify_qqpayrecharge_show_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_notify_qqpayrecharge_show_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_notify_qqpayrecharge_show_rep::MergeFrom(const msg_notify_qqpayrecharge_show_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_notify_qqpayrecharge_show_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_notify_qqpayrecharge_show_rep::CopyFrom(const msg_notify_qqpayrecharge_show_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_notify_qqpayrecharge_show_rep::IsInitialized() const {

  return true;
}

void msg_notify_qqpayrecharge_show_rep::Swap(msg_notify_qqpayrecharge_show_rep* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_notify_qqpayrecharge_show_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_notify_qqpayrecharge_show_rep_descriptor_;
  metadata.reflection = msg_notify_qqpayrecharge_show_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

msg_notify_wechatscanpayrecharge_show_req::msg_notify_wechatscanpayrecharge_show_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_notify_wechatscanpayrecharge_show_req::InitAsDefaultInstance() {
}

msg_notify_wechatscanpayrecharge_show_req::msg_notify_wechatscanpayrecharge_show_req(const msg_notify_wechatscanpayrecharge_show_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_notify_wechatscanpayrecharge_show_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_notify_wechatscanpayrecharge_show_req::~msg_notify_wechatscanpayrecharge_show_req() {
  SharedDtor();
}

void msg_notify_wechatscanpayrecharge_show_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_notify_wechatscanpayrecharge_show_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_notify_wechatscanpayrecharge_show_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_notify_wechatscanpayrecharge_show_req_descriptor_;
}

const msg_notify_wechatscanpayrecharge_show_req& msg_notify_wechatscanpayrecharge_show_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_notify_wechatscanpayrecharge_show_req* msg_notify_wechatscanpayrecharge_show_req::default_instance_ = NULL;

msg_notify_wechatscanpayrecharge_show_req* msg_notify_wechatscanpayrecharge_show_req::New() const {
  return new msg_notify_wechatscanpayrecharge_show_req;
}

void msg_notify_wechatscanpayrecharge_show_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_notify_wechatscanpayrecharge_show_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void msg_notify_wechatscanpayrecharge_show_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_notify_wechatscanpayrecharge_show_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_notify_wechatscanpayrecharge_show_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_notify_wechatscanpayrecharge_show_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_notify_wechatscanpayrecharge_show_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_notify_wechatscanpayrecharge_show_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_notify_wechatscanpayrecharge_show_req::MergeFrom(const msg_notify_wechatscanpayrecharge_show_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_notify_wechatscanpayrecharge_show_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_notify_wechatscanpayrecharge_show_req::CopyFrom(const msg_notify_wechatscanpayrecharge_show_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_notify_wechatscanpayrecharge_show_req::IsInitialized() const {

  return true;
}

void msg_notify_wechatscanpayrecharge_show_req::Swap(msg_notify_wechatscanpayrecharge_show_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_notify_wechatscanpayrecharge_show_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_notify_wechatscanpayrecharge_show_req_descriptor_;
  metadata.reflection = msg_notify_wechatscanpayrecharge_show_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_notify_wechatscanpayrecharge_show_rep::kStatusFieldNumber;
#endif  // !_MSC_VER

msg_notify_wechatscanpayrecharge_show_rep::msg_notify_wechatscanpayrecharge_show_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_notify_wechatscanpayrecharge_show_rep::InitAsDefaultInstance() {
}

msg_notify_wechatscanpayrecharge_show_rep::msg_notify_wechatscanpayrecharge_show_rep(const msg_notify_wechatscanpayrecharge_show_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_notify_wechatscanpayrecharge_show_rep::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_notify_wechatscanpayrecharge_show_rep::~msg_notify_wechatscanpayrecharge_show_rep() {
  SharedDtor();
}

void msg_notify_wechatscanpayrecharge_show_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_notify_wechatscanpayrecharge_show_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_notify_wechatscanpayrecharge_show_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_notify_wechatscanpayrecharge_show_rep_descriptor_;
}

const msg_notify_wechatscanpayrecharge_show_rep& msg_notify_wechatscanpayrecharge_show_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_notify_wechatscanpayrecharge_show_rep* msg_notify_wechatscanpayrecharge_show_rep::default_instance_ = NULL;

msg_notify_wechatscanpayrecharge_show_rep* msg_notify_wechatscanpayrecharge_show_rep::New() const {
  return new msg_notify_wechatscanpayrecharge_show_rep;
}

void msg_notify_wechatscanpayrecharge_show_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_notify_wechatscanpayrecharge_show_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_notify_wechatscanpayrecharge_show_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_notify_wechatscanpayrecharge_show_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_notify_wechatscanpayrecharge_show_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_notify_wechatscanpayrecharge_show_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_notify_wechatscanpayrecharge_show_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_notify_wechatscanpayrecharge_show_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_notify_wechatscanpayrecharge_show_rep::MergeFrom(const msg_notify_wechatscanpayrecharge_show_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_notify_wechatscanpayrecharge_show_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_notify_wechatscanpayrecharge_show_rep::CopyFrom(const msg_notify_wechatscanpayrecharge_show_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_notify_wechatscanpayrecharge_show_rep::IsInitialized() const {

  return true;
}

void msg_notify_wechatscanpayrecharge_show_rep::Swap(msg_notify_wechatscanpayrecharge_show_rep* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_notify_wechatscanpayrecharge_show_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_notify_wechatscanpayrecharge_show_rep_descriptor_;
  metadata.reflection = msg_notify_wechatscanpayrecharge_show_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

msg_notify_jdpayrecharge_show_req::msg_notify_jdpayrecharge_show_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_notify_jdpayrecharge_show_req::InitAsDefaultInstance() {
}

msg_notify_jdpayrecharge_show_req::msg_notify_jdpayrecharge_show_req(const msg_notify_jdpayrecharge_show_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_notify_jdpayrecharge_show_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_notify_jdpayrecharge_show_req::~msg_notify_jdpayrecharge_show_req() {
  SharedDtor();
}

void msg_notify_jdpayrecharge_show_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_notify_jdpayrecharge_show_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_notify_jdpayrecharge_show_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_notify_jdpayrecharge_show_req_descriptor_;
}

const msg_notify_jdpayrecharge_show_req& msg_notify_jdpayrecharge_show_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_notify_jdpayrecharge_show_req* msg_notify_jdpayrecharge_show_req::default_instance_ = NULL;

msg_notify_jdpayrecharge_show_req* msg_notify_jdpayrecharge_show_req::New() const {
  return new msg_notify_jdpayrecharge_show_req;
}

void msg_notify_jdpayrecharge_show_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_notify_jdpayrecharge_show_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void msg_notify_jdpayrecharge_show_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_notify_jdpayrecharge_show_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_notify_jdpayrecharge_show_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_notify_jdpayrecharge_show_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_notify_jdpayrecharge_show_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_notify_jdpayrecharge_show_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_notify_jdpayrecharge_show_req::MergeFrom(const msg_notify_jdpayrecharge_show_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_notify_jdpayrecharge_show_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_notify_jdpayrecharge_show_req::CopyFrom(const msg_notify_jdpayrecharge_show_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_notify_jdpayrecharge_show_req::IsInitialized() const {

  return true;
}

void msg_notify_jdpayrecharge_show_req::Swap(msg_notify_jdpayrecharge_show_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_notify_jdpayrecharge_show_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_notify_jdpayrecharge_show_req_descriptor_;
  metadata.reflection = msg_notify_jdpayrecharge_show_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_notify_jdpayrecharge_show_rep::kStatusFieldNumber;
#endif  // !_MSC_VER

msg_notify_jdpayrecharge_show_rep::msg_notify_jdpayrecharge_show_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_notify_jdpayrecharge_show_rep::InitAsDefaultInstance() {
}

msg_notify_jdpayrecharge_show_rep::msg_notify_jdpayrecharge_show_rep(const msg_notify_jdpayrecharge_show_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_notify_jdpayrecharge_show_rep::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_notify_jdpayrecharge_show_rep::~msg_notify_jdpayrecharge_show_rep() {
  SharedDtor();
}

void msg_notify_jdpayrecharge_show_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_notify_jdpayrecharge_show_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_notify_jdpayrecharge_show_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_notify_jdpayrecharge_show_rep_descriptor_;
}

const msg_notify_jdpayrecharge_show_rep& msg_notify_jdpayrecharge_show_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_notify_jdpayrecharge_show_rep* msg_notify_jdpayrecharge_show_rep::default_instance_ = NULL;

msg_notify_jdpayrecharge_show_rep* msg_notify_jdpayrecharge_show_rep::New() const {
  return new msg_notify_jdpayrecharge_show_rep;
}

void msg_notify_jdpayrecharge_show_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_notify_jdpayrecharge_show_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_notify_jdpayrecharge_show_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_notify_jdpayrecharge_show_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_notify_jdpayrecharge_show_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_notify_jdpayrecharge_show_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_notify_jdpayrecharge_show_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_notify_jdpayrecharge_show_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_notify_jdpayrecharge_show_rep::MergeFrom(const msg_notify_jdpayrecharge_show_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_notify_jdpayrecharge_show_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_notify_jdpayrecharge_show_rep::CopyFrom(const msg_notify_jdpayrecharge_show_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_notify_jdpayrecharge_show_rep::IsInitialized() const {

  return true;
}

void msg_notify_jdpayrecharge_show_rep::Swap(msg_notify_jdpayrecharge_show_rep* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_notify_jdpayrecharge_show_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_notify_jdpayrecharge_show_rep_descriptor_;
  metadata.reflection = msg_notify_jdpayrecharge_show_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

msg_notify_applepayrecharge_show_req::msg_notify_applepayrecharge_show_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_notify_applepayrecharge_show_req::InitAsDefaultInstance() {
}

msg_notify_applepayrecharge_show_req::msg_notify_applepayrecharge_show_req(const msg_notify_applepayrecharge_show_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_notify_applepayrecharge_show_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_notify_applepayrecharge_show_req::~msg_notify_applepayrecharge_show_req() {
  SharedDtor();
}

void msg_notify_applepayrecharge_show_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_notify_applepayrecharge_show_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_notify_applepayrecharge_show_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_notify_applepayrecharge_show_req_descriptor_;
}

const msg_notify_applepayrecharge_show_req& msg_notify_applepayrecharge_show_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_notify_applepayrecharge_show_req* msg_notify_applepayrecharge_show_req::default_instance_ = NULL;

msg_notify_applepayrecharge_show_req* msg_notify_applepayrecharge_show_req::New() const {
  return new msg_notify_applepayrecharge_show_req;
}

void msg_notify_applepayrecharge_show_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_notify_applepayrecharge_show_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void msg_notify_applepayrecharge_show_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_notify_applepayrecharge_show_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_notify_applepayrecharge_show_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_notify_applepayrecharge_show_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_notify_applepayrecharge_show_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_notify_applepayrecharge_show_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_notify_applepayrecharge_show_req::MergeFrom(const msg_notify_applepayrecharge_show_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_notify_applepayrecharge_show_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_notify_applepayrecharge_show_req::CopyFrom(const msg_notify_applepayrecharge_show_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_notify_applepayrecharge_show_req::IsInitialized() const {

  return true;
}

void msg_notify_applepayrecharge_show_req::Swap(msg_notify_applepayrecharge_show_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_notify_applepayrecharge_show_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_notify_applepayrecharge_show_req_descriptor_;
  metadata.reflection = msg_notify_applepayrecharge_show_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_notify_applepayrecharge_show_rep::kStatusFieldNumber;
#endif  // !_MSC_VER

msg_notify_applepayrecharge_show_rep::msg_notify_applepayrecharge_show_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_notify_applepayrecharge_show_rep::InitAsDefaultInstance() {
}

msg_notify_applepayrecharge_show_rep::msg_notify_applepayrecharge_show_rep(const msg_notify_applepayrecharge_show_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_notify_applepayrecharge_show_rep::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_notify_applepayrecharge_show_rep::~msg_notify_applepayrecharge_show_rep() {
  SharedDtor();
}

void msg_notify_applepayrecharge_show_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_notify_applepayrecharge_show_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_notify_applepayrecharge_show_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_notify_applepayrecharge_show_rep_descriptor_;
}

const msg_notify_applepayrecharge_show_rep& msg_notify_applepayrecharge_show_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_notify_applepayrecharge_show_rep* msg_notify_applepayrecharge_show_rep::default_instance_ = NULL;

msg_notify_applepayrecharge_show_rep* msg_notify_applepayrecharge_show_rep::New() const {
  return new msg_notify_applepayrecharge_show_rep;
}

void msg_notify_applepayrecharge_show_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_notify_applepayrecharge_show_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_notify_applepayrecharge_show_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_notify_applepayrecharge_show_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_notify_applepayrecharge_show_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_notify_applepayrecharge_show_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_notify_applepayrecharge_show_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_notify_applepayrecharge_show_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_notify_applepayrecharge_show_rep::MergeFrom(const msg_notify_applepayrecharge_show_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_notify_applepayrecharge_show_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_notify_applepayrecharge_show_rep::CopyFrom(const msg_notify_applepayrecharge_show_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_notify_applepayrecharge_show_rep::IsInitialized() const {

  return true;
}

void msg_notify_applepayrecharge_show_rep::Swap(msg_notify_applepayrecharge_show_rep* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_notify_applepayrecharge_show_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_notify_applepayrecharge_show_rep_descriptor_;
  metadata.reflection = msg_notify_applepayrecharge_show_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

msg_notify_large_ali_payrecharge_show_req::msg_notify_large_ali_payrecharge_show_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_notify_large_ali_payrecharge_show_req::InitAsDefaultInstance() {
}

msg_notify_large_ali_payrecharge_show_req::msg_notify_large_ali_payrecharge_show_req(const msg_notify_large_ali_payrecharge_show_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_notify_large_ali_payrecharge_show_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_notify_large_ali_payrecharge_show_req::~msg_notify_large_ali_payrecharge_show_req() {
  SharedDtor();
}

void msg_notify_large_ali_payrecharge_show_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_notify_large_ali_payrecharge_show_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_notify_large_ali_payrecharge_show_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_notify_large_ali_payrecharge_show_req_descriptor_;
}

const msg_notify_large_ali_payrecharge_show_req& msg_notify_large_ali_payrecharge_show_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_notify_large_ali_payrecharge_show_req* msg_notify_large_ali_payrecharge_show_req::default_instance_ = NULL;

msg_notify_large_ali_payrecharge_show_req* msg_notify_large_ali_payrecharge_show_req::New() const {
  return new msg_notify_large_ali_payrecharge_show_req;
}

void msg_notify_large_ali_payrecharge_show_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_notify_large_ali_payrecharge_show_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void msg_notify_large_ali_payrecharge_show_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_notify_large_ali_payrecharge_show_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_notify_large_ali_payrecharge_show_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_notify_large_ali_payrecharge_show_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_notify_large_ali_payrecharge_show_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_notify_large_ali_payrecharge_show_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_notify_large_ali_payrecharge_show_req::MergeFrom(const msg_notify_large_ali_payrecharge_show_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_notify_large_ali_payrecharge_show_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_notify_large_ali_payrecharge_show_req::CopyFrom(const msg_notify_large_ali_payrecharge_show_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_notify_large_ali_payrecharge_show_req::IsInitialized() const {

  return true;
}

void msg_notify_large_ali_payrecharge_show_req::Swap(msg_notify_large_ali_payrecharge_show_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_notify_large_ali_payrecharge_show_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_notify_large_ali_payrecharge_show_req_descriptor_;
  metadata.reflection = msg_notify_large_ali_payrecharge_show_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_notify_large_ali_payrecharge_show_rep::kStatusFieldNumber;
#endif  // !_MSC_VER

msg_notify_large_ali_payrecharge_show_rep::msg_notify_large_ali_payrecharge_show_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_notify_large_ali_payrecharge_show_rep::InitAsDefaultInstance() {
}

msg_notify_large_ali_payrecharge_show_rep::msg_notify_large_ali_payrecharge_show_rep(const msg_notify_large_ali_payrecharge_show_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_notify_large_ali_payrecharge_show_rep::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_notify_large_ali_payrecharge_show_rep::~msg_notify_large_ali_payrecharge_show_rep() {
  SharedDtor();
}

void msg_notify_large_ali_payrecharge_show_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_notify_large_ali_payrecharge_show_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_notify_large_ali_payrecharge_show_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_notify_large_ali_payrecharge_show_rep_descriptor_;
}

const msg_notify_large_ali_payrecharge_show_rep& msg_notify_large_ali_payrecharge_show_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_notify_large_ali_payrecharge_show_rep* msg_notify_large_ali_payrecharge_show_rep::default_instance_ = NULL;

msg_notify_large_ali_payrecharge_show_rep* msg_notify_large_ali_payrecharge_show_rep::New() const {
  return new msg_notify_large_ali_payrecharge_show_rep;
}

void msg_notify_large_ali_payrecharge_show_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_notify_large_ali_payrecharge_show_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_notify_large_ali_payrecharge_show_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_notify_large_ali_payrecharge_show_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_notify_large_ali_payrecharge_show_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_notify_large_ali_payrecharge_show_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_notify_large_ali_payrecharge_show_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_notify_large_ali_payrecharge_show_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_notify_large_ali_payrecharge_show_rep::MergeFrom(const msg_notify_large_ali_payrecharge_show_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_notify_large_ali_payrecharge_show_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_notify_large_ali_payrecharge_show_rep::CopyFrom(const msg_notify_large_ali_payrecharge_show_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_notify_large_ali_payrecharge_show_rep::IsInitialized() const {

  return true;
}

void msg_notify_large_ali_payrecharge_show_rep::Swap(msg_notify_large_ali_payrecharge_show_rep* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_notify_large_ali_payrecharge_show_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_notify_large_ali_payrecharge_show_rep_descriptor_;
  metadata.reflection = msg_notify_large_ali_payrecharge_show_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int exclusive_alipay_info::kAccountFieldNumber;
const int exclusive_alipay_info::kNameFieldNumber;
const int exclusive_alipay_info::kTitleFieldNumber;
const int exclusive_alipay_info::kMinPayFieldNumber;
const int exclusive_alipay_info::kMaxPayFieldNumber;
const int exclusive_alipay_info::kLowerFloatFieldNumber;
#endif  // !_MSC_VER

exclusive_alipay_info::exclusive_alipay_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void exclusive_alipay_info::InitAsDefaultInstance() {
}

exclusive_alipay_info::exclusive_alipay_info(const exclusive_alipay_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void exclusive_alipay_info::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  min_pay_ = 0;
  max_pay_ = 0;
  lower_float_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

exclusive_alipay_info::~exclusive_alipay_info() {
  SharedDtor();
}

void exclusive_alipay_info::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (this != default_instance_) {
  }
}

void exclusive_alipay_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* exclusive_alipay_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return exclusive_alipay_info_descriptor_;
}

const exclusive_alipay_info& exclusive_alipay_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

exclusive_alipay_info* exclusive_alipay_info::default_instance_ = NULL;

exclusive_alipay_info* exclusive_alipay_info::New() const {
  return new exclusive_alipay_info;
}

void exclusive_alipay_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    min_pay_ = 0;
    max_pay_ = 0;
    lower_float_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool exclusive_alipay_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }

      // optional bytes title = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_min_pay;
        break;
      }

      // optional int32 min_pay = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_pay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_pay_)));
          set_has_min_pay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_max_pay;
        break;
      }

      // optional int32 max_pay = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_pay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_pay_)));
          set_has_max_pay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lower_float;
        break;
      }

      // optional int32 lower_float = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lower_float:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lower_float_)));
          set_has_lower_float();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void exclusive_alipay_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->account(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional bytes title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->title(), output);
  }

  // optional int32 min_pay = 4;
  if (has_min_pay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->min_pay(), output);
  }

  // optional int32 max_pay = 5;
  if (has_max_pay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->max_pay(), output);
  }

  // optional int32 lower_float = 6;
  if (has_lower_float()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lower_float(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* exclusive_alipay_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes account = 1;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->account(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional bytes title = 3;
  if (has_title()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->title(), target);
  }

  // optional int32 min_pay = 4;
  if (has_min_pay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->min_pay(), target);
  }

  // optional int32 max_pay = 5;
  if (has_max_pay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->max_pay(), target);
  }

  // optional int32 lower_float = 6;
  if (has_lower_float()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lower_float(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int exclusive_alipay_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->title());
    }

    // optional int32 min_pay = 4;
    if (has_min_pay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_pay());
    }

    // optional int32 max_pay = 5;
    if (has_max_pay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_pay());
    }

    // optional int32 lower_float = 6;
    if (has_lower_float()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lower_float());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void exclusive_alipay_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const exclusive_alipay_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const exclusive_alipay_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void exclusive_alipay_info::MergeFrom(const exclusive_alipay_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_min_pay()) {
      set_min_pay(from.min_pay());
    }
    if (from.has_max_pay()) {
      set_max_pay(from.max_pay());
    }
    if (from.has_lower_float()) {
      set_lower_float(from.lower_float());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void exclusive_alipay_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void exclusive_alipay_info::CopyFrom(const exclusive_alipay_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool exclusive_alipay_info::IsInitialized() const {

  return true;
}

void exclusive_alipay_info::Swap(exclusive_alipay_info* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(name_, other->name_);
    std::swap(title_, other->title_);
    std::swap(min_pay_, other->min_pay_);
    std::swap(max_pay_, other->max_pay_);
    std::swap(lower_float_, other->lower_float_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata exclusive_alipay_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = exclusive_alipay_info_descriptor_;
  metadata.reflection = exclusive_alipay_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_notify_exclusive_alipay_recharge_show::kStatusFieldNumber;
const int msg_notify_exclusive_alipay_recharge_show::kInfoFieldNumber;
#endif  // !_MSC_VER

msg_notify_exclusive_alipay_recharge_show::msg_notify_exclusive_alipay_recharge_show()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_notify_exclusive_alipay_recharge_show::InitAsDefaultInstance() {
}

msg_notify_exclusive_alipay_recharge_show::msg_notify_exclusive_alipay_recharge_show(const msg_notify_exclusive_alipay_recharge_show& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_notify_exclusive_alipay_recharge_show::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_notify_exclusive_alipay_recharge_show::~msg_notify_exclusive_alipay_recharge_show() {
  SharedDtor();
}

void msg_notify_exclusive_alipay_recharge_show::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_notify_exclusive_alipay_recharge_show::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_notify_exclusive_alipay_recharge_show::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_notify_exclusive_alipay_recharge_show_descriptor_;
}

const msg_notify_exclusive_alipay_recharge_show& msg_notify_exclusive_alipay_recharge_show::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_notify_exclusive_alipay_recharge_show* msg_notify_exclusive_alipay_recharge_show::default_instance_ = NULL;

msg_notify_exclusive_alipay_recharge_show* msg_notify_exclusive_alipay_recharge_show::New() const {
  return new msg_notify_exclusive_alipay_recharge_show;
}

void msg_notify_exclusive_alipay_recharge_show::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_notify_exclusive_alipay_recharge_show::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .net.exclusive_alipay_info info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_notify_exclusive_alipay_recharge_show::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  // repeated .net.exclusive_alipay_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_notify_exclusive_alipay_recharge_show::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  // repeated .net.exclusive_alipay_info info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_notify_exclusive_alipay_recharge_show::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  // repeated .net.exclusive_alipay_info info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_notify_exclusive_alipay_recharge_show::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_notify_exclusive_alipay_recharge_show* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_notify_exclusive_alipay_recharge_show*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_notify_exclusive_alipay_recharge_show::MergeFrom(const msg_notify_exclusive_alipay_recharge_show& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_notify_exclusive_alipay_recharge_show::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_notify_exclusive_alipay_recharge_show::CopyFrom(const msg_notify_exclusive_alipay_recharge_show& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_notify_exclusive_alipay_recharge_show::IsInitialized() const {

  return true;
}

void msg_notify_exclusive_alipay_recharge_show::Swap(msg_notify_exclusive_alipay_recharge_show* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_notify_exclusive_alipay_recharge_show::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_notify_exclusive_alipay_recharge_show_descriptor_;
  metadata.reflection = msg_notify_exclusive_alipay_recharge_show_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

msg_notify_exclusive_alipay_recharge_show_req::msg_notify_exclusive_alipay_recharge_show_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_notify_exclusive_alipay_recharge_show_req::InitAsDefaultInstance() {
}

msg_notify_exclusive_alipay_recharge_show_req::msg_notify_exclusive_alipay_recharge_show_req(const msg_notify_exclusive_alipay_recharge_show_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_notify_exclusive_alipay_recharge_show_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_notify_exclusive_alipay_recharge_show_req::~msg_notify_exclusive_alipay_recharge_show_req() {
  SharedDtor();
}

void msg_notify_exclusive_alipay_recharge_show_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_notify_exclusive_alipay_recharge_show_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_notify_exclusive_alipay_recharge_show_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_notify_exclusive_alipay_recharge_show_req_descriptor_;
}

const msg_notify_exclusive_alipay_recharge_show_req& msg_notify_exclusive_alipay_recharge_show_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_notify_exclusive_alipay_recharge_show_req* msg_notify_exclusive_alipay_recharge_show_req::default_instance_ = NULL;

msg_notify_exclusive_alipay_recharge_show_req* msg_notify_exclusive_alipay_recharge_show_req::New() const {
  return new msg_notify_exclusive_alipay_recharge_show_req;
}

void msg_notify_exclusive_alipay_recharge_show_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_notify_exclusive_alipay_recharge_show_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void msg_notify_exclusive_alipay_recharge_show_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_notify_exclusive_alipay_recharge_show_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_notify_exclusive_alipay_recharge_show_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_notify_exclusive_alipay_recharge_show_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_notify_exclusive_alipay_recharge_show_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_notify_exclusive_alipay_recharge_show_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_notify_exclusive_alipay_recharge_show_req::MergeFrom(const msg_notify_exclusive_alipay_recharge_show_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_notify_exclusive_alipay_recharge_show_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_notify_exclusive_alipay_recharge_show_req::CopyFrom(const msg_notify_exclusive_alipay_recharge_show_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_notify_exclusive_alipay_recharge_show_req::IsInitialized() const {

  return true;
}

void msg_notify_exclusive_alipay_recharge_show_req::Swap(msg_notify_exclusive_alipay_recharge_show_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_notify_exclusive_alipay_recharge_show_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_notify_exclusive_alipay_recharge_show_req_descriptor_;
  metadata.reflection = msg_notify_exclusive_alipay_recharge_show_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

msg_notify_fixed_alipay_recharge_show_req::msg_notify_fixed_alipay_recharge_show_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_notify_fixed_alipay_recharge_show_req::InitAsDefaultInstance() {
}

msg_notify_fixed_alipay_recharge_show_req::msg_notify_fixed_alipay_recharge_show_req(const msg_notify_fixed_alipay_recharge_show_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_notify_fixed_alipay_recharge_show_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_notify_fixed_alipay_recharge_show_req::~msg_notify_fixed_alipay_recharge_show_req() {
  SharedDtor();
}

void msg_notify_fixed_alipay_recharge_show_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_notify_fixed_alipay_recharge_show_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_notify_fixed_alipay_recharge_show_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_notify_fixed_alipay_recharge_show_req_descriptor_;
}

const msg_notify_fixed_alipay_recharge_show_req& msg_notify_fixed_alipay_recharge_show_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_notify_fixed_alipay_recharge_show_req* msg_notify_fixed_alipay_recharge_show_req::default_instance_ = NULL;

msg_notify_fixed_alipay_recharge_show_req* msg_notify_fixed_alipay_recharge_show_req::New() const {
  return new msg_notify_fixed_alipay_recharge_show_req;
}

void msg_notify_fixed_alipay_recharge_show_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_notify_fixed_alipay_recharge_show_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void msg_notify_fixed_alipay_recharge_show_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_notify_fixed_alipay_recharge_show_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_notify_fixed_alipay_recharge_show_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_notify_fixed_alipay_recharge_show_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_notify_fixed_alipay_recharge_show_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_notify_fixed_alipay_recharge_show_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_notify_fixed_alipay_recharge_show_req::MergeFrom(const msg_notify_fixed_alipay_recharge_show_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_notify_fixed_alipay_recharge_show_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_notify_fixed_alipay_recharge_show_req::CopyFrom(const msg_notify_fixed_alipay_recharge_show_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_notify_fixed_alipay_recharge_show_req::IsInitialized() const {

  return true;
}

void msg_notify_fixed_alipay_recharge_show_req::Swap(msg_notify_fixed_alipay_recharge_show_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_notify_fixed_alipay_recharge_show_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_notify_fixed_alipay_recharge_show_req_descriptor_;
  metadata.reflection = msg_notify_fixed_alipay_recharge_show_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_notify_fixed_alipay_recharge_show_rep::kStatusFieldNumber;
#endif  // !_MSC_VER

msg_notify_fixed_alipay_recharge_show_rep::msg_notify_fixed_alipay_recharge_show_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_notify_fixed_alipay_recharge_show_rep::InitAsDefaultInstance() {
}

msg_notify_fixed_alipay_recharge_show_rep::msg_notify_fixed_alipay_recharge_show_rep(const msg_notify_fixed_alipay_recharge_show_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_notify_fixed_alipay_recharge_show_rep::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_notify_fixed_alipay_recharge_show_rep::~msg_notify_fixed_alipay_recharge_show_rep() {
  SharedDtor();
}

void msg_notify_fixed_alipay_recharge_show_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_notify_fixed_alipay_recharge_show_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_notify_fixed_alipay_recharge_show_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_notify_fixed_alipay_recharge_show_rep_descriptor_;
}

const msg_notify_fixed_alipay_recharge_show_rep& msg_notify_fixed_alipay_recharge_show_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_notify_fixed_alipay_recharge_show_rep* msg_notify_fixed_alipay_recharge_show_rep::default_instance_ = NULL;

msg_notify_fixed_alipay_recharge_show_rep* msg_notify_fixed_alipay_recharge_show_rep::New() const {
  return new msg_notify_fixed_alipay_recharge_show_rep;
}

void msg_notify_fixed_alipay_recharge_show_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_notify_fixed_alipay_recharge_show_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_notify_fixed_alipay_recharge_show_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_notify_fixed_alipay_recharge_show_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_notify_fixed_alipay_recharge_show_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_notify_fixed_alipay_recharge_show_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_notify_fixed_alipay_recharge_show_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_notify_fixed_alipay_recharge_show_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_notify_fixed_alipay_recharge_show_rep::MergeFrom(const msg_notify_fixed_alipay_recharge_show_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_notify_fixed_alipay_recharge_show_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_notify_fixed_alipay_recharge_show_rep::CopyFrom(const msg_notify_fixed_alipay_recharge_show_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_notify_fixed_alipay_recharge_show_rep::IsInitialized() const {

  return true;
}

void msg_notify_fixed_alipay_recharge_show_rep::Swap(msg_notify_fixed_alipay_recharge_show_rep* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_notify_fixed_alipay_recharge_show_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_notify_fixed_alipay_recharge_show_rep_descriptor_;
  metadata.reflection = msg_notify_fixed_alipay_recharge_show_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

msg_notify_fixed_wechat_recharge_show_req::msg_notify_fixed_wechat_recharge_show_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_notify_fixed_wechat_recharge_show_req::InitAsDefaultInstance() {
}

msg_notify_fixed_wechat_recharge_show_req::msg_notify_fixed_wechat_recharge_show_req(const msg_notify_fixed_wechat_recharge_show_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_notify_fixed_wechat_recharge_show_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_notify_fixed_wechat_recharge_show_req::~msg_notify_fixed_wechat_recharge_show_req() {
  SharedDtor();
}

void msg_notify_fixed_wechat_recharge_show_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_notify_fixed_wechat_recharge_show_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_notify_fixed_wechat_recharge_show_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_notify_fixed_wechat_recharge_show_req_descriptor_;
}

const msg_notify_fixed_wechat_recharge_show_req& msg_notify_fixed_wechat_recharge_show_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_notify_fixed_wechat_recharge_show_req* msg_notify_fixed_wechat_recharge_show_req::default_instance_ = NULL;

msg_notify_fixed_wechat_recharge_show_req* msg_notify_fixed_wechat_recharge_show_req::New() const {
  return new msg_notify_fixed_wechat_recharge_show_req;
}

void msg_notify_fixed_wechat_recharge_show_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_notify_fixed_wechat_recharge_show_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void msg_notify_fixed_wechat_recharge_show_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_notify_fixed_wechat_recharge_show_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_notify_fixed_wechat_recharge_show_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_notify_fixed_wechat_recharge_show_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_notify_fixed_wechat_recharge_show_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_notify_fixed_wechat_recharge_show_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_notify_fixed_wechat_recharge_show_req::MergeFrom(const msg_notify_fixed_wechat_recharge_show_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_notify_fixed_wechat_recharge_show_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_notify_fixed_wechat_recharge_show_req::CopyFrom(const msg_notify_fixed_wechat_recharge_show_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_notify_fixed_wechat_recharge_show_req::IsInitialized() const {

  return true;
}

void msg_notify_fixed_wechat_recharge_show_req::Swap(msg_notify_fixed_wechat_recharge_show_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_notify_fixed_wechat_recharge_show_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_notify_fixed_wechat_recharge_show_req_descriptor_;
  metadata.reflection = msg_notify_fixed_wechat_recharge_show_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_notify_fixed_wechat_recharge_show_rep::kStatusFieldNumber;
#endif  // !_MSC_VER

msg_notify_fixed_wechat_recharge_show_rep::msg_notify_fixed_wechat_recharge_show_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_notify_fixed_wechat_recharge_show_rep::InitAsDefaultInstance() {
}

msg_notify_fixed_wechat_recharge_show_rep::msg_notify_fixed_wechat_recharge_show_rep(const msg_notify_fixed_wechat_recharge_show_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_notify_fixed_wechat_recharge_show_rep::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_notify_fixed_wechat_recharge_show_rep::~msg_notify_fixed_wechat_recharge_show_rep() {
  SharedDtor();
}

void msg_notify_fixed_wechat_recharge_show_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_notify_fixed_wechat_recharge_show_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_notify_fixed_wechat_recharge_show_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_notify_fixed_wechat_recharge_show_rep_descriptor_;
}

const msg_notify_fixed_wechat_recharge_show_rep& msg_notify_fixed_wechat_recharge_show_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_notify_fixed_wechat_recharge_show_rep* msg_notify_fixed_wechat_recharge_show_rep::default_instance_ = NULL;

msg_notify_fixed_wechat_recharge_show_rep* msg_notify_fixed_wechat_recharge_show_rep::New() const {
  return new msg_notify_fixed_wechat_recharge_show_rep;
}

void msg_notify_fixed_wechat_recharge_show_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_notify_fixed_wechat_recharge_show_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_notify_fixed_wechat_recharge_show_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_notify_fixed_wechat_recharge_show_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_notify_fixed_wechat_recharge_show_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_notify_fixed_wechat_recharge_show_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_notify_fixed_wechat_recharge_show_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_notify_fixed_wechat_recharge_show_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_notify_fixed_wechat_recharge_show_rep::MergeFrom(const msg_notify_fixed_wechat_recharge_show_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_notify_fixed_wechat_recharge_show_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_notify_fixed_wechat_recharge_show_rep::CopyFrom(const msg_notify_fixed_wechat_recharge_show_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_notify_fixed_wechat_recharge_show_rep::IsInitialized() const {

  return true;
}

void msg_notify_fixed_wechat_recharge_show_rep::Swap(msg_notify_fixed_wechat_recharge_show_rep* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_notify_fixed_wechat_recharge_show_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_notify_fixed_wechat_recharge_show_rep_descriptor_;
  metadata.reflection = msg_notify_fixed_wechat_recharge_show_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

msg_notify_fixed_unionpay_recharge_show_req::msg_notify_fixed_unionpay_recharge_show_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_notify_fixed_unionpay_recharge_show_req::InitAsDefaultInstance() {
}

msg_notify_fixed_unionpay_recharge_show_req::msg_notify_fixed_unionpay_recharge_show_req(const msg_notify_fixed_unionpay_recharge_show_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_notify_fixed_unionpay_recharge_show_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_notify_fixed_unionpay_recharge_show_req::~msg_notify_fixed_unionpay_recharge_show_req() {
  SharedDtor();
}

void msg_notify_fixed_unionpay_recharge_show_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_notify_fixed_unionpay_recharge_show_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_notify_fixed_unionpay_recharge_show_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_notify_fixed_unionpay_recharge_show_req_descriptor_;
}

const msg_notify_fixed_unionpay_recharge_show_req& msg_notify_fixed_unionpay_recharge_show_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_notify_fixed_unionpay_recharge_show_req* msg_notify_fixed_unionpay_recharge_show_req::default_instance_ = NULL;

msg_notify_fixed_unionpay_recharge_show_req* msg_notify_fixed_unionpay_recharge_show_req::New() const {
  return new msg_notify_fixed_unionpay_recharge_show_req;
}

void msg_notify_fixed_unionpay_recharge_show_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_notify_fixed_unionpay_recharge_show_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void msg_notify_fixed_unionpay_recharge_show_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_notify_fixed_unionpay_recharge_show_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_notify_fixed_unionpay_recharge_show_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_notify_fixed_unionpay_recharge_show_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_notify_fixed_unionpay_recharge_show_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_notify_fixed_unionpay_recharge_show_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_notify_fixed_unionpay_recharge_show_req::MergeFrom(const msg_notify_fixed_unionpay_recharge_show_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_notify_fixed_unionpay_recharge_show_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_notify_fixed_unionpay_recharge_show_req::CopyFrom(const msg_notify_fixed_unionpay_recharge_show_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_notify_fixed_unionpay_recharge_show_req::IsInitialized() const {

  return true;
}

void msg_notify_fixed_unionpay_recharge_show_req::Swap(msg_notify_fixed_unionpay_recharge_show_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_notify_fixed_unionpay_recharge_show_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_notify_fixed_unionpay_recharge_show_req_descriptor_;
  metadata.reflection = msg_notify_fixed_unionpay_recharge_show_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_notify_fixed_unionpay_recharge_show_rep::kStatusFieldNumber;
#endif  // !_MSC_VER

msg_notify_fixed_unionpay_recharge_show_rep::msg_notify_fixed_unionpay_recharge_show_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_notify_fixed_unionpay_recharge_show_rep::InitAsDefaultInstance() {
}

msg_notify_fixed_unionpay_recharge_show_rep::msg_notify_fixed_unionpay_recharge_show_rep(const msg_notify_fixed_unionpay_recharge_show_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_notify_fixed_unionpay_recharge_show_rep::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_notify_fixed_unionpay_recharge_show_rep::~msg_notify_fixed_unionpay_recharge_show_rep() {
  SharedDtor();
}

void msg_notify_fixed_unionpay_recharge_show_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_notify_fixed_unionpay_recharge_show_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_notify_fixed_unionpay_recharge_show_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_notify_fixed_unionpay_recharge_show_rep_descriptor_;
}

const msg_notify_fixed_unionpay_recharge_show_rep& msg_notify_fixed_unionpay_recharge_show_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_notify_fixed_unionpay_recharge_show_rep* msg_notify_fixed_unionpay_recharge_show_rep::default_instance_ = NULL;

msg_notify_fixed_unionpay_recharge_show_rep* msg_notify_fixed_unionpay_recharge_show_rep::New() const {
  return new msg_notify_fixed_unionpay_recharge_show_rep;
}

void msg_notify_fixed_unionpay_recharge_show_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_notify_fixed_unionpay_recharge_show_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_notify_fixed_unionpay_recharge_show_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_notify_fixed_unionpay_recharge_show_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_notify_fixed_unionpay_recharge_show_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_notify_fixed_unionpay_recharge_show_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_notify_fixed_unionpay_recharge_show_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_notify_fixed_unionpay_recharge_show_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_notify_fixed_unionpay_recharge_show_rep::MergeFrom(const msg_notify_fixed_unionpay_recharge_show_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_notify_fixed_unionpay_recharge_show_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_notify_fixed_unionpay_recharge_show_rep::CopyFrom(const msg_notify_fixed_unionpay_recharge_show_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_notify_fixed_unionpay_recharge_show_rep::IsInitialized() const {

  return true;
}

void msg_notify_fixed_unionpay_recharge_show_rep::Swap(msg_notify_fixed_unionpay_recharge_show_rep* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_notify_fixed_unionpay_recharge_show_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_notify_fixed_unionpay_recharge_show_rep_descriptor_;
  metadata.reflection = msg_notify_fixed_unionpay_recharge_show_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

msg_notify_exclusive_flash_recharge_show_req::msg_notify_exclusive_flash_recharge_show_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_notify_exclusive_flash_recharge_show_req::InitAsDefaultInstance() {
}

msg_notify_exclusive_flash_recharge_show_req::msg_notify_exclusive_flash_recharge_show_req(const msg_notify_exclusive_flash_recharge_show_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_notify_exclusive_flash_recharge_show_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_notify_exclusive_flash_recharge_show_req::~msg_notify_exclusive_flash_recharge_show_req() {
  SharedDtor();
}

void msg_notify_exclusive_flash_recharge_show_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_notify_exclusive_flash_recharge_show_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_notify_exclusive_flash_recharge_show_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_notify_exclusive_flash_recharge_show_req_descriptor_;
}

const msg_notify_exclusive_flash_recharge_show_req& msg_notify_exclusive_flash_recharge_show_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_notify_exclusive_flash_recharge_show_req* msg_notify_exclusive_flash_recharge_show_req::default_instance_ = NULL;

msg_notify_exclusive_flash_recharge_show_req* msg_notify_exclusive_flash_recharge_show_req::New() const {
  return new msg_notify_exclusive_flash_recharge_show_req;
}

void msg_notify_exclusive_flash_recharge_show_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_notify_exclusive_flash_recharge_show_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void msg_notify_exclusive_flash_recharge_show_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_notify_exclusive_flash_recharge_show_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_notify_exclusive_flash_recharge_show_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_notify_exclusive_flash_recharge_show_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_notify_exclusive_flash_recharge_show_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_notify_exclusive_flash_recharge_show_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_notify_exclusive_flash_recharge_show_req::MergeFrom(const msg_notify_exclusive_flash_recharge_show_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_notify_exclusive_flash_recharge_show_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_notify_exclusive_flash_recharge_show_req::CopyFrom(const msg_notify_exclusive_flash_recharge_show_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_notify_exclusive_flash_recharge_show_req::IsInitialized() const {

  return true;
}

void msg_notify_exclusive_flash_recharge_show_req::Swap(msg_notify_exclusive_flash_recharge_show_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_notify_exclusive_flash_recharge_show_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_notify_exclusive_flash_recharge_show_req_descriptor_;
  metadata.reflection = msg_notify_exclusive_flash_recharge_show_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_notify_exclusive_flash_recharge_show_rep::kStatusFieldNumber;
const int msg_notify_exclusive_flash_recharge_show_rep::kInfoFieldNumber;
#endif  // !_MSC_VER

msg_notify_exclusive_flash_recharge_show_rep::msg_notify_exclusive_flash_recharge_show_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_notify_exclusive_flash_recharge_show_rep::InitAsDefaultInstance() {
}

msg_notify_exclusive_flash_recharge_show_rep::msg_notify_exclusive_flash_recharge_show_rep(const msg_notify_exclusive_flash_recharge_show_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_notify_exclusive_flash_recharge_show_rep::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_notify_exclusive_flash_recharge_show_rep::~msg_notify_exclusive_flash_recharge_show_rep() {
  SharedDtor();
}

void msg_notify_exclusive_flash_recharge_show_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_notify_exclusive_flash_recharge_show_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_notify_exclusive_flash_recharge_show_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_notify_exclusive_flash_recharge_show_rep_descriptor_;
}

const msg_notify_exclusive_flash_recharge_show_rep& msg_notify_exclusive_flash_recharge_show_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_notify_exclusive_flash_recharge_show_rep* msg_notify_exclusive_flash_recharge_show_rep::default_instance_ = NULL;

msg_notify_exclusive_flash_recharge_show_rep* msg_notify_exclusive_flash_recharge_show_rep::New() const {
  return new msg_notify_exclusive_flash_recharge_show_rep;
}

void msg_notify_exclusive_flash_recharge_show_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_notify_exclusive_flash_recharge_show_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .net.vip_recharge_wechatinfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_notify_exclusive_flash_recharge_show_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  // repeated .net.vip_recharge_wechatinfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_notify_exclusive_flash_recharge_show_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  // repeated .net.vip_recharge_wechatinfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_notify_exclusive_flash_recharge_show_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  // repeated .net.vip_recharge_wechatinfo info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_notify_exclusive_flash_recharge_show_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_notify_exclusive_flash_recharge_show_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_notify_exclusive_flash_recharge_show_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_notify_exclusive_flash_recharge_show_rep::MergeFrom(const msg_notify_exclusive_flash_recharge_show_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_notify_exclusive_flash_recharge_show_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_notify_exclusive_flash_recharge_show_rep::CopyFrom(const msg_notify_exclusive_flash_recharge_show_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_notify_exclusive_flash_recharge_show_rep::IsInitialized() const {

  return true;
}

void msg_notify_exclusive_flash_recharge_show_rep::Swap(msg_notify_exclusive_flash_recharge_show_rep* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_notify_exclusive_flash_recharge_show_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_notify_exclusive_flash_recharge_show_rep_descriptor_;
  metadata.reflection = msg_notify_exclusive_flash_recharge_show_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int bairen_jetton_info::kAreaFieldNumber;
const int bairen_jetton_info::kScoreFieldNumber;
#endif  // !_MSC_VER

bairen_jetton_info::bairen_jetton_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void bairen_jetton_info::InitAsDefaultInstance() {
}

bairen_jetton_info::bairen_jetton_info(const bairen_jetton_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void bairen_jetton_info::SharedCtor() {
  _cached_size_ = 0;
  area_ = 0u;
  score_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bairen_jetton_info::~bairen_jetton_info() {
  SharedDtor();
}

void bairen_jetton_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void bairen_jetton_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bairen_jetton_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return bairen_jetton_info_descriptor_;
}

const bairen_jetton_info& bairen_jetton_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

bairen_jetton_info* bairen_jetton_info::default_instance_ = NULL;

bairen_jetton_info* bairen_jetton_info::New() const {
  return new bairen_jetton_info;
}

void bairen_jetton_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    area_ = 0u;
    score_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool bairen_jetton_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 area = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_)));
          set_has_area();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional int64 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void bairen_jetton_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 area = 1;
  if (has_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->area(), output);
  }

  // optional int64 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* bairen_jetton_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 area = 1;
  if (has_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->area(), target);
  }

  // optional int64 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int bairen_jetton_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 area = 1;
    if (has_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area());
    }

    // optional int64 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bairen_jetton_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const bairen_jetton_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const bairen_jetton_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void bairen_jetton_info::MergeFrom(const bairen_jetton_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_area()) {
      set_area(from.area());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void bairen_jetton_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bairen_jetton_info::CopyFrom(const bairen_jetton_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bairen_jetton_info::IsInitialized() const {

  return true;
}

void bairen_jetton_info::Swap(bairen_jetton_info* other) {
  if (other != this) {
    std::swap(area_, other->area_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata bairen_jetton_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = bairen_jetton_info_descriptor_;
  metadata.reflection = bairen_jetton_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_continuous_pressure_jetton_info_rep::kInfoFieldNumber;
#endif  // !_MSC_VER

msg_continuous_pressure_jetton_info_rep::msg_continuous_pressure_jetton_info_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_continuous_pressure_jetton_info_rep::InitAsDefaultInstance() {
}

msg_continuous_pressure_jetton_info_rep::msg_continuous_pressure_jetton_info_rep(const msg_continuous_pressure_jetton_info_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_continuous_pressure_jetton_info_rep::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_continuous_pressure_jetton_info_rep::~msg_continuous_pressure_jetton_info_rep() {
  SharedDtor();
}

void msg_continuous_pressure_jetton_info_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_continuous_pressure_jetton_info_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_continuous_pressure_jetton_info_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_continuous_pressure_jetton_info_rep_descriptor_;
}

const msg_continuous_pressure_jetton_info_rep& msg_continuous_pressure_jetton_info_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_continuous_pressure_jetton_info_rep* msg_continuous_pressure_jetton_info_rep::default_instance_ = NULL;

msg_continuous_pressure_jetton_info_rep* msg_continuous_pressure_jetton_info_rep::New() const {
  return new msg_continuous_pressure_jetton_info_rep;
}

void msg_continuous_pressure_jetton_info_rep::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_continuous_pressure_jetton_info_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .net.bairen_jetton_info info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_continuous_pressure_jetton_info_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .net.bairen_jetton_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_continuous_pressure_jetton_info_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .net.bairen_jetton_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_continuous_pressure_jetton_info_rep::ByteSize() const {
  int total_size = 0;

  // repeated .net.bairen_jetton_info info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_continuous_pressure_jetton_info_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_continuous_pressure_jetton_info_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_continuous_pressure_jetton_info_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_continuous_pressure_jetton_info_rep::MergeFrom(const msg_continuous_pressure_jetton_info_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_continuous_pressure_jetton_info_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_continuous_pressure_jetton_info_rep::CopyFrom(const msg_continuous_pressure_jetton_info_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_continuous_pressure_jetton_info_rep::IsInitialized() const {

  return true;
}

void msg_continuous_pressure_jetton_info_rep::Swap(msg_continuous_pressure_jetton_info_rep* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_continuous_pressure_jetton_info_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_continuous_pressure_jetton_info_rep_descriptor_;
  metadata.reflection = msg_continuous_pressure_jetton_info_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_player_continuous_pressure_jetton_req::kInfoFieldNumber;
#endif  // !_MSC_VER

msg_player_continuous_pressure_jetton_req::msg_player_continuous_pressure_jetton_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_player_continuous_pressure_jetton_req::InitAsDefaultInstance() {
}

msg_player_continuous_pressure_jetton_req::msg_player_continuous_pressure_jetton_req(const msg_player_continuous_pressure_jetton_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_player_continuous_pressure_jetton_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_player_continuous_pressure_jetton_req::~msg_player_continuous_pressure_jetton_req() {
  SharedDtor();
}

void msg_player_continuous_pressure_jetton_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_player_continuous_pressure_jetton_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_player_continuous_pressure_jetton_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_player_continuous_pressure_jetton_req_descriptor_;
}

const msg_player_continuous_pressure_jetton_req& msg_player_continuous_pressure_jetton_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_player_continuous_pressure_jetton_req* msg_player_continuous_pressure_jetton_req::default_instance_ = NULL;

msg_player_continuous_pressure_jetton_req* msg_player_continuous_pressure_jetton_req::New() const {
  return new msg_player_continuous_pressure_jetton_req;
}

void msg_player_continuous_pressure_jetton_req::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_player_continuous_pressure_jetton_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .net.bairen_jetton_info info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_player_continuous_pressure_jetton_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .net.bairen_jetton_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_player_continuous_pressure_jetton_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .net.bairen_jetton_info info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_player_continuous_pressure_jetton_req::ByteSize() const {
  int total_size = 0;

  // repeated .net.bairen_jetton_info info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_player_continuous_pressure_jetton_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_player_continuous_pressure_jetton_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_player_continuous_pressure_jetton_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_player_continuous_pressure_jetton_req::MergeFrom(const msg_player_continuous_pressure_jetton_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_player_continuous_pressure_jetton_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_player_continuous_pressure_jetton_req::CopyFrom(const msg_player_continuous_pressure_jetton_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_player_continuous_pressure_jetton_req::IsInitialized() const {

  return true;
}

void msg_player_continuous_pressure_jetton_req::Swap(msg_player_continuous_pressure_jetton_req* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_player_continuous_pressure_jetton_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_player_continuous_pressure_jetton_req_descriptor_;
  metadata.reflection = msg_player_continuous_pressure_jetton_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_player_continuous_pressure_jetton_rep::kResultFieldNumber;
#endif  // !_MSC_VER

msg_player_continuous_pressure_jetton_rep::msg_player_continuous_pressure_jetton_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_player_continuous_pressure_jetton_rep::InitAsDefaultInstance() {
}

msg_player_continuous_pressure_jetton_rep::msg_player_continuous_pressure_jetton_rep(const msg_player_continuous_pressure_jetton_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_player_continuous_pressure_jetton_rep::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_player_continuous_pressure_jetton_rep::~msg_player_continuous_pressure_jetton_rep() {
  SharedDtor();
}

void msg_player_continuous_pressure_jetton_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_player_continuous_pressure_jetton_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_player_continuous_pressure_jetton_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_player_continuous_pressure_jetton_rep_descriptor_;
}

const msg_player_continuous_pressure_jetton_rep& msg_player_continuous_pressure_jetton_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_player_continuous_pressure_jetton_rep* msg_player_continuous_pressure_jetton_rep::default_instance_ = NULL;

msg_player_continuous_pressure_jetton_rep* msg_player_continuous_pressure_jetton_rep::New() const {
  return new msg_player_continuous_pressure_jetton_rep;
}

void msg_player_continuous_pressure_jetton_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_player_continuous_pressure_jetton_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_player_continuous_pressure_jetton_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_player_continuous_pressure_jetton_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_player_continuous_pressure_jetton_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_player_continuous_pressure_jetton_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_player_continuous_pressure_jetton_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_player_continuous_pressure_jetton_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_player_continuous_pressure_jetton_rep::MergeFrom(const msg_player_continuous_pressure_jetton_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_player_continuous_pressure_jetton_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_player_continuous_pressure_jetton_rep::CopyFrom(const msg_player_continuous_pressure_jetton_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_player_continuous_pressure_jetton_rep::IsInitialized() const {

  return true;
}

void msg_player_continuous_pressure_jetton_rep::Swap(msg_player_continuous_pressure_jetton_rep* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_player_continuous_pressure_jetton_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_player_continuous_pressure_jetton_rep_descriptor_;
  metadata.reflection = msg_player_continuous_pressure_jetton_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_game_play_log::kBainiuFieldNumber;
const int msg_game_play_log::kBaccaratFieldNumber;
const int msg_game_play_log::kPaijiuFieldNumber;
const int msg_game_play_log::kDiceFieldNumber;
const int msg_game_play_log::kWarFieldNumber;
const int msg_game_play_log::kFightFieldNumber;
const int msg_game_play_log::kTwoeightFieldNumber;
#endif  // !_MSC_VER

msg_game_play_log::msg_game_play_log()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_game_play_log::InitAsDefaultInstance() {
  bainiu_ = const_cast< ::net::msg_bainiu_play_log_rep*>(&::net::msg_bainiu_play_log_rep::default_instance());
  baccarat_ = const_cast< ::net::msg_baccarat_play_log_rep*>(&::net::msg_baccarat_play_log_rep::default_instance());
  paijiu_ = const_cast< ::net::msg_paijiu_play_log_rep*>(&::net::msg_paijiu_play_log_rep::default_instance());
  dice_ = const_cast< ::net::msg_dice_play_log_rep*>(&::net::msg_dice_play_log_rep::default_instance());
  war_ = const_cast< ::net::msg_war_play_log_rep*>(&::net::msg_war_play_log_rep::default_instance());
  fight_ = const_cast< ::net::msg_fight_play_log_rep*>(&::net::msg_fight_play_log_rep::default_instance());
  twoeight_ = const_cast< ::net::msg_twoeight_play_log_rep*>(&::net::msg_twoeight_play_log_rep::default_instance());
}

msg_game_play_log::msg_game_play_log(const msg_game_play_log& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_game_play_log::SharedCtor() {
  _cached_size_ = 0;
  bainiu_ = NULL;
  baccarat_ = NULL;
  paijiu_ = NULL;
  dice_ = NULL;
  war_ = NULL;
  fight_ = NULL;
  twoeight_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_game_play_log::~msg_game_play_log() {
  SharedDtor();
}

void msg_game_play_log::SharedDtor() {
  if (this != default_instance_) {
    delete bainiu_;
    delete baccarat_;
    delete paijiu_;
    delete dice_;
    delete war_;
    delete fight_;
    delete twoeight_;
  }
}

void msg_game_play_log::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_game_play_log::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_game_play_log_descriptor_;
}

const msg_game_play_log& msg_game_play_log::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_game_play_log* msg_game_play_log::default_instance_ = NULL;

msg_game_play_log* msg_game_play_log::New() const {
  return new msg_game_play_log;
}

void msg_game_play_log::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bainiu()) {
      if (bainiu_ != NULL) bainiu_->::net::msg_bainiu_play_log_rep::Clear();
    }
    if (has_baccarat()) {
      if (baccarat_ != NULL) baccarat_->::net::msg_baccarat_play_log_rep::Clear();
    }
    if (has_paijiu()) {
      if (paijiu_ != NULL) paijiu_->::net::msg_paijiu_play_log_rep::Clear();
    }
    if (has_dice()) {
      if (dice_ != NULL) dice_->::net::msg_dice_play_log_rep::Clear();
    }
    if (has_war()) {
      if (war_ != NULL) war_->::net::msg_war_play_log_rep::Clear();
    }
    if (has_fight()) {
      if (fight_ != NULL) fight_->::net::msg_fight_play_log_rep::Clear();
    }
    if (has_twoeight()) {
      if (twoeight_ != NULL) twoeight_->::net::msg_twoeight_play_log_rep::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_game_play_log::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .net.msg_bainiu_play_log_rep bainiu = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bainiu()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_baccarat;
        break;
      }

      // optional .net.msg_baccarat_play_log_rep baccarat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_baccarat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baccarat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_paijiu;
        break;
      }

      // optional .net.msg_paijiu_play_log_rep paijiu = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_paijiu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_paijiu()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dice;
        break;
      }

      // optional .net.msg_dice_play_log_rep dice = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_war;
        break;
      }

      // optional .net.msg_war_play_log_rep war = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_war:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_war()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_fight;
        break;
      }

      // optional .net.msg_fight_play_log_rep fight = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fight:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fight()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_twoeight;
        break;
      }

      // optional .net.msg_twoeight_play_log_rep twoeight = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_twoeight:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_twoeight()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_game_play_log::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .net.msg_bainiu_play_log_rep bainiu = 1;
  if (has_bainiu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bainiu(), output);
  }

  // optional .net.msg_baccarat_play_log_rep baccarat = 2;
  if (has_baccarat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->baccarat(), output);
  }

  // optional .net.msg_paijiu_play_log_rep paijiu = 3;
  if (has_paijiu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->paijiu(), output);
  }

  // optional .net.msg_dice_play_log_rep dice = 4;
  if (has_dice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dice(), output);
  }

  // optional .net.msg_war_play_log_rep war = 5;
  if (has_war()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->war(), output);
  }

  // optional .net.msg_fight_play_log_rep fight = 6;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->fight(), output);
  }

  // optional .net.msg_twoeight_play_log_rep twoeight = 7;
  if (has_twoeight()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->twoeight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_game_play_log::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .net.msg_bainiu_play_log_rep bainiu = 1;
  if (has_bainiu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bainiu(), target);
  }

  // optional .net.msg_baccarat_play_log_rep baccarat = 2;
  if (has_baccarat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->baccarat(), target);
  }

  // optional .net.msg_paijiu_play_log_rep paijiu = 3;
  if (has_paijiu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->paijiu(), target);
  }

  // optional .net.msg_dice_play_log_rep dice = 4;
  if (has_dice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dice(), target);
  }

  // optional .net.msg_war_play_log_rep war = 5;
  if (has_war()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->war(), target);
  }

  // optional .net.msg_fight_play_log_rep fight = 6;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->fight(), target);
  }

  // optional .net.msg_twoeight_play_log_rep twoeight = 7;
  if (has_twoeight()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->twoeight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_game_play_log::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .net.msg_bainiu_play_log_rep bainiu = 1;
    if (has_bainiu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bainiu());
    }

    // optional .net.msg_baccarat_play_log_rep baccarat = 2;
    if (has_baccarat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baccarat());
    }

    // optional .net.msg_paijiu_play_log_rep paijiu = 3;
    if (has_paijiu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->paijiu());
    }

    // optional .net.msg_dice_play_log_rep dice = 4;
    if (has_dice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dice());
    }

    // optional .net.msg_war_play_log_rep war = 5;
    if (has_war()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->war());
    }

    // optional .net.msg_fight_play_log_rep fight = 6;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fight());
    }

    // optional .net.msg_twoeight_play_log_rep twoeight = 7;
    if (has_twoeight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->twoeight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_game_play_log::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_game_play_log* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_game_play_log*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_game_play_log::MergeFrom(const msg_game_play_log& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bainiu()) {
      mutable_bainiu()->::net::msg_bainiu_play_log_rep::MergeFrom(from.bainiu());
    }
    if (from.has_baccarat()) {
      mutable_baccarat()->::net::msg_baccarat_play_log_rep::MergeFrom(from.baccarat());
    }
    if (from.has_paijiu()) {
      mutable_paijiu()->::net::msg_paijiu_play_log_rep::MergeFrom(from.paijiu());
    }
    if (from.has_dice()) {
      mutable_dice()->::net::msg_dice_play_log_rep::MergeFrom(from.dice());
    }
    if (from.has_war()) {
      mutable_war()->::net::msg_war_play_log_rep::MergeFrom(from.war());
    }
    if (from.has_fight()) {
      mutable_fight()->::net::msg_fight_play_log_rep::MergeFrom(from.fight());
    }
    if (from.has_twoeight()) {
      mutable_twoeight()->::net::msg_twoeight_play_log_rep::MergeFrom(from.twoeight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_game_play_log::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_game_play_log::CopyFrom(const msg_game_play_log& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_game_play_log::IsInitialized() const {

  return true;
}

void msg_game_play_log::Swap(msg_game_play_log* other) {
  if (other != this) {
    std::swap(bainiu_, other->bainiu_);
    std::swap(baccarat_, other->baccarat_);
    std::swap(paijiu_, other->paijiu_);
    std::swap(dice_, other->dice_);
    std::swap(war_, other->war_);
    std::swap(fight_, other->fight_);
    std::swap(twoeight_, other->twoeight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_game_play_log::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_game_play_log_descriptor_;
  metadata.reflection = msg_game_play_log_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

msg_game_play_log_req::msg_game_play_log_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_game_play_log_req::InitAsDefaultInstance() {
}

msg_game_play_log_req::msg_game_play_log_req(const msg_game_play_log_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_game_play_log_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_game_play_log_req::~msg_game_play_log_req() {
  SharedDtor();
}

void msg_game_play_log_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_game_play_log_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_game_play_log_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_game_play_log_req_descriptor_;
}

const msg_game_play_log_req& msg_game_play_log_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_game_play_log_req* msg_game_play_log_req::default_instance_ = NULL;

msg_game_play_log_req* msg_game_play_log_req::New() const {
  return new msg_game_play_log_req;
}

void msg_game_play_log_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_game_play_log_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void msg_game_play_log_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_game_play_log_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_game_play_log_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_game_play_log_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_game_play_log_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_game_play_log_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_game_play_log_req::MergeFrom(const msg_game_play_log_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_game_play_log_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_game_play_log_req::CopyFrom(const msg_game_play_log_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_game_play_log_req::IsInitialized() const {

  return true;
}

void msg_game_play_log_req::Swap(msg_game_play_log_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_game_play_log_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_game_play_log_req_descriptor_;
  metadata.reflection = msg_game_play_log_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_game_play_log_rep::kGametypeFieldNumber;
const int msg_game_play_log_rep::kRoomidFieldNumber;
const int msg_game_play_log_rep::kGamestateFieldNumber;
const int msg_game_play_log_rep::kRemainTimeFieldNumber;
const int msg_game_play_log_rep::kPlayLogFieldNumber;
#endif  // !_MSC_VER

msg_game_play_log_rep::msg_game_play_log_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_game_play_log_rep::InitAsDefaultInstance() {
  play_log_ = const_cast< ::net::msg_game_play_log*>(&::net::msg_game_play_log::default_instance());
}

msg_game_play_log_rep::msg_game_play_log_rep(const msg_game_play_log_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_game_play_log_rep::SharedCtor() {
  _cached_size_ = 0;
  gametype_ = 0u;
  roomid_ = 0u;
  gamestate_ = 0u;
  remain_time_ = 0u;
  play_log_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_game_play_log_rep::~msg_game_play_log_rep() {
  SharedDtor();
}

void msg_game_play_log_rep::SharedDtor() {
  if (this != default_instance_) {
    delete play_log_;
  }
}

void msg_game_play_log_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_game_play_log_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_game_play_log_rep_descriptor_;
}

const msg_game_play_log_rep& msg_game_play_log_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_game_play_log_rep* msg_game_play_log_rep::default_instance_ = NULL;

msg_game_play_log_rep* msg_game_play_log_rep::New() const {
  return new msg_game_play_log_rep;
}

void msg_game_play_log_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gametype_ = 0u;
    roomid_ = 0u;
    gamestate_ = 0u;
    remain_time_ = 0u;
    if (has_play_log()) {
      if (play_log_ != NULL) play_log_->::net::msg_game_play_log::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_game_play_log_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gametype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gametype_)));
          set_has_gametype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // optional uint32 roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gamestate;
        break;
      }

      // optional uint32 gamestate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gamestate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gamestate_)));
          set_has_gamestate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_remain_time;
        break;
      }

      // optional uint32 remain_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remain_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remain_time_)));
          set_has_remain_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_play_log;
        break;
      }

      // optional .net.msg_game_play_log play_log = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_play_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_play_log()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_game_play_log_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 gametype = 1;
  if (has_gametype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gametype(), output);
  }

  // optional uint32 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->roomid(), output);
  }

  // optional uint32 gamestate = 3;
  if (has_gamestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gamestate(), output);
  }

  // optional uint32 remain_time = 4;
  if (has_remain_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->remain_time(), output);
  }

  // optional .net.msg_game_play_log play_log = 5;
  if (has_play_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->play_log(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_game_play_log_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 gametype = 1;
  if (has_gametype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gametype(), target);
  }

  // optional uint32 roomid = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->roomid(), target);
  }

  // optional uint32 gamestate = 3;
  if (has_gamestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gamestate(), target);
  }

  // optional uint32 remain_time = 4;
  if (has_remain_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->remain_time(), target);
  }

  // optional .net.msg_game_play_log play_log = 5;
  if (has_play_log()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->play_log(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_game_play_log_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gametype = 1;
    if (has_gametype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gametype());
    }

    // optional uint32 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roomid());
    }

    // optional uint32 gamestate = 3;
    if (has_gamestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gamestate());
    }

    // optional uint32 remain_time = 4;
    if (has_remain_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remain_time());
    }

    // optional .net.msg_game_play_log play_log = 5;
    if (has_play_log()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->play_log());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_game_play_log_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_game_play_log_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_game_play_log_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_game_play_log_rep::MergeFrom(const msg_game_play_log_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gametype()) {
      set_gametype(from.gametype());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_gamestate()) {
      set_gamestate(from.gamestate());
    }
    if (from.has_remain_time()) {
      set_remain_time(from.remain_time());
    }
    if (from.has_play_log()) {
      mutable_play_log()->::net::msg_game_play_log::MergeFrom(from.play_log());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_game_play_log_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_game_play_log_rep::CopyFrom(const msg_game_play_log_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_game_play_log_rep::IsInitialized() const {

  return true;
}

void msg_game_play_log_rep::Swap(msg_game_play_log_rep* other) {
  if (other != this) {
    std::swap(gametype_, other->gametype_);
    std::swap(roomid_, other->roomid_);
    std::swap(gamestate_, other->gamestate_);
    std::swap(remain_time_, other->remain_time_);
    std::swap(play_log_, other->play_log_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_game_play_log_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_game_play_log_rep_descriptor_;
  metadata.reflection = msg_game_play_log_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_chat_info_forward::kFromidFieldNumber;
const int msg_chat_info_forward::kToidFieldNumber;
const int msg_chat_info_forward::kOnlineFieldNumber;
const int msg_chat_info_forward::kMessagStrFieldNumber;
const int msg_chat_info_forward::kFromnameFieldNumber;
const int msg_chat_info_forward::kTonameFieldNumber;
const int msg_chat_info_forward::kTimeFieldNumber;
const int msg_chat_info_forward::kMtypeFieldNumber;
#endif  // !_MSC_VER

msg_chat_info_forward::msg_chat_info_forward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_chat_info_forward::InitAsDefaultInstance() {
}

msg_chat_info_forward::msg_chat_info_forward(const msg_chat_info_forward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_chat_info_forward::SharedCtor() {
  _cached_size_ = 0;
  fromid_ = 0u;
  messagstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fromname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_ULONGLONG(0);
  mtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_chat_info_forward::~msg_chat_info_forward() {
  SharedDtor();
}

void msg_chat_info_forward::SharedDtor() {
  if (messagstr_ != &::google::protobuf::internal::kEmptyString) {
    delete messagstr_;
  }
  if (fromname_ != &::google::protobuf::internal::kEmptyString) {
    delete fromname_;
  }
  if (this != default_instance_) {
  }
}

void msg_chat_info_forward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_chat_info_forward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_chat_info_forward_descriptor_;
}

const msg_chat_info_forward& msg_chat_info_forward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_chat_info_forward* msg_chat_info_forward::default_instance_ = NULL;

msg_chat_info_forward* msg_chat_info_forward::New() const {
  return new msg_chat_info_forward;
}

void msg_chat_info_forward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fromid_ = 0u;
    if (has_messagstr()) {
      if (messagstr_ != &::google::protobuf::internal::kEmptyString) {
        messagstr_->clear();
      }
    }
    if (has_fromname()) {
      if (fromname_ != &::google::protobuf::internal::kEmptyString) {
        fromname_->clear();
      }
    }
    time_ = GOOGLE_ULONGLONG(0);
    mtype_ = 0;
  }
  toid_.Clear();
  online_.Clear();
  toname_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_chat_info_forward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fromid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fromid_)));
          set_has_fromid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_toid;
        break;
      }

      // repeated uint32 toid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_toid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_toid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_toid;
        if (input->ExpectTag(24)) goto parse_online;
        break;
      }

      // repeated int32 online = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_online())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_online())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_online;
        if (input->ExpectTag(34)) goto parse_messagStr;
        break;
      }

      // optional bytes messagStr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_messagStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_messagstr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_fromname;
        break;
      }

      // optional bytes fromname = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fromname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fromname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_toname;
        break;
      }

      // repeated bytes toname = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_toname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_toname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_toname;
        if (input->ExpectTag(56)) goto parse_time;
        break;
      }

      // optional uint64 time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_mtype;
        break;
      }

      // optional int32 mtype = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mtype_)));
          set_has_mtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_chat_info_forward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 fromid = 1;
  if (has_fromid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fromid(), output);
  }

  // repeated uint32 toid = 2;
  for (int i = 0; i < this->toid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->toid(i), output);
  }

  // repeated int32 online = 3;
  for (int i = 0; i < this->online_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->online(i), output);
  }

  // optional bytes messagStr = 4;
  if (has_messagstr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->messagstr(), output);
  }

  // optional bytes fromname = 5;
  if (has_fromname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->fromname(), output);
  }

  // repeated bytes toname = 6;
  for (int i = 0; i < this->toname_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->toname(i), output);
  }

  // optional uint64 time = 7;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->time(), output);
  }

  // optional int32 mtype = 8;
  if (has_mtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->mtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_chat_info_forward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 fromid = 1;
  if (has_fromid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fromid(), target);
  }

  // repeated uint32 toid = 2;
  for (int i = 0; i < this->toid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->toid(i), target);
  }

  // repeated int32 online = 3;
  for (int i = 0; i < this->online_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->online(i), target);
  }

  // optional bytes messagStr = 4;
  if (has_messagstr()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->messagstr(), target);
  }

  // optional bytes fromname = 5;
  if (has_fromname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->fromname(), target);
  }

  // repeated bytes toname = 6;
  for (int i = 0; i < this->toname_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(6, this->toname(i), target);
  }

  // optional uint64 time = 7;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->time(), target);
  }

  // optional int32 mtype = 8;
  if (has_mtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->mtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_chat_info_forward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 fromid = 1;
    if (has_fromid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fromid());
    }

    // optional bytes messagStr = 4;
    if (has_messagstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->messagstr());
    }

    // optional bytes fromname = 5;
    if (has_fromname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fromname());
    }

    // optional uint64 time = 7;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional int32 mtype = 8;
    if (has_mtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mtype());
    }

  }
  // repeated uint32 toid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->toid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->toid(i));
    }
    total_size += 1 * this->toid_size() + data_size;
  }

  // repeated int32 online = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->online_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->online(i));
    }
    total_size += 1 * this->online_size() + data_size;
  }

  // repeated bytes toname = 6;
  total_size += 1 * this->toname_size();
  for (int i = 0; i < this->toname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->toname(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_chat_info_forward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_chat_info_forward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_chat_info_forward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_chat_info_forward::MergeFrom(const msg_chat_info_forward& from) {
  GOOGLE_CHECK_NE(&from, this);
  toid_.MergeFrom(from.toid_);
  online_.MergeFrom(from.online_);
  toname_.MergeFrom(from.toname_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromid()) {
      set_fromid(from.fromid());
    }
    if (from.has_messagstr()) {
      set_messagstr(from.messagstr());
    }
    if (from.has_fromname()) {
      set_fromname(from.fromname());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_mtype()) {
      set_mtype(from.mtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_chat_info_forward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_chat_info_forward::CopyFrom(const msg_chat_info_forward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_chat_info_forward::IsInitialized() const {

  return true;
}

void msg_chat_info_forward::Swap(msg_chat_info_forward* other) {
  if (other != this) {
    std::swap(fromid_, other->fromid_);
    toid_.Swap(&other->toid_);
    online_.Swap(&other->online_);
    std::swap(messagstr_, other->messagstr_);
    std::swap(fromname_, other->fromname_);
    toname_.Swap(&other->toname_);
    std::swap(time_, other->time_);
    std::swap(mtype_, other->mtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_chat_info_forward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_chat_info_forward_descriptor_;
  metadata.reflection = msg_chat_info_forward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_brc_control_user_enter_table_req::kGameIdFieldNumber;
const int msg_brc_control_user_enter_table_req::kTableIdFieldNumber;
#endif  // !_MSC_VER

msg_brc_control_user_enter_table_req::msg_brc_control_user_enter_table_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_brc_control_user_enter_table_req::InitAsDefaultInstance() {
}

msg_brc_control_user_enter_table_req::msg_brc_control_user_enter_table_req(const msg_brc_control_user_enter_table_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_brc_control_user_enter_table_req::SharedCtor() {
  _cached_size_ = 0;
  game_id_ = 0u;
  table_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_brc_control_user_enter_table_req::~msg_brc_control_user_enter_table_req() {
  SharedDtor();
}

void msg_brc_control_user_enter_table_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_brc_control_user_enter_table_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_brc_control_user_enter_table_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_brc_control_user_enter_table_req_descriptor_;
}

const msg_brc_control_user_enter_table_req& msg_brc_control_user_enter_table_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_brc_control_user_enter_table_req* msg_brc_control_user_enter_table_req::default_instance_ = NULL;

msg_brc_control_user_enter_table_req* msg_brc_control_user_enter_table_req::New() const {
  return new msg_brc_control_user_enter_table_req;
}

void msg_brc_control_user_enter_table_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_id_ = 0u;
    table_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_brc_control_user_enter_table_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 game_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_table_id;
        break;
      }

      // optional uint32 table_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_brc_control_user_enter_table_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 game_id = 1;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_id(), output);
  }

  // optional uint32 table_id = 2;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->table_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_brc_control_user_enter_table_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 game_id = 1;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_id(), target);
  }

  // optional uint32 table_id = 2;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->table_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_brc_control_user_enter_table_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 game_id = 1;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional uint32 table_id = 2;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_brc_control_user_enter_table_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_brc_control_user_enter_table_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_brc_control_user_enter_table_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_brc_control_user_enter_table_req::MergeFrom(const msg_brc_control_user_enter_table_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_brc_control_user_enter_table_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_brc_control_user_enter_table_req::CopyFrom(const msg_brc_control_user_enter_table_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_brc_control_user_enter_table_req::IsInitialized() const {

  return true;
}

void msg_brc_control_user_enter_table_req::Swap(msg_brc_control_user_enter_table_req* other) {
  if (other != this) {
    std::swap(game_id_, other->game_id_);
    std::swap(table_id_, other->table_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_brc_control_user_enter_table_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_brc_control_user_enter_table_req_descriptor_;
  metadata.reflection = msg_brc_control_user_enter_table_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_brc_control_user_enter_table_rep::kResultFieldNumber;
const int msg_brc_control_user_enter_table_rep::kAreaFieldNumber;
const int msg_brc_control_user_enter_table_rep::kTimesFieldNumber;
#endif  // !_MSC_VER

msg_brc_control_user_enter_table_rep::msg_brc_control_user_enter_table_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_brc_control_user_enter_table_rep::InitAsDefaultInstance() {
}

msg_brc_control_user_enter_table_rep::msg_brc_control_user_enter_table_rep(const msg_brc_control_user_enter_table_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_brc_control_user_enter_table_rep::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_brc_control_user_enter_table_rep::~msg_brc_control_user_enter_table_rep() {
  SharedDtor();
}

void msg_brc_control_user_enter_table_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_brc_control_user_enter_table_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_brc_control_user_enter_table_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_brc_control_user_enter_table_rep_descriptor_;
}

const msg_brc_control_user_enter_table_rep& msg_brc_control_user_enter_table_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_brc_control_user_enter_table_rep* msg_brc_control_user_enter_table_rep::default_instance_ = NULL;

msg_brc_control_user_enter_table_rep* msg_brc_control_user_enter_table_rep::New() const {
  return new msg_brc_control_user_enter_table_rep;
}

void msg_brc_control_user_enter_table_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    times_ = 0u;
  }
  area_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_brc_control_user_enter_table_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_area;
        break;
      }

      // repeated uint32 area = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_area())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_area())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_area;
        if (input->ExpectTag(24)) goto parse_times;
        break;
      }

      // optional uint32 times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_brc_control_user_enter_table_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // repeated uint32 area = 2;
  for (int i = 0; i < this->area_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->area(i), output);
  }

  // optional uint32 times = 3;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_brc_control_user_enter_table_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // repeated uint32 area = 2;
  for (int i = 0; i < this->area_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->area(i), target);
  }

  // optional uint32 times = 3;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_brc_control_user_enter_table_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 times = 3;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times());
    }

  }
  // repeated uint32 area = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->area_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->area(i));
    }
    total_size += 1 * this->area_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_brc_control_user_enter_table_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_brc_control_user_enter_table_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_brc_control_user_enter_table_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_brc_control_user_enter_table_rep::MergeFrom(const msg_brc_control_user_enter_table_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  area_.MergeFrom(from.area_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_brc_control_user_enter_table_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_brc_control_user_enter_table_rep::CopyFrom(const msg_brc_control_user_enter_table_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_brc_control_user_enter_table_rep::IsInitialized() const {

  return true;
}

void msg_brc_control_user_enter_table_rep::Swap(msg_brc_control_user_enter_table_rep* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    area_.Swap(&other->area_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_brc_control_user_enter_table_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_brc_control_user_enter_table_rep_descriptor_;
  metadata.reflection = msg_brc_control_user_enter_table_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_brc_control_user_leave_table_req::kGameIdFieldNumber;
const int msg_brc_control_user_leave_table_req::kTableIdFieldNumber;
#endif  // !_MSC_VER

msg_brc_control_user_leave_table_req::msg_brc_control_user_leave_table_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_brc_control_user_leave_table_req::InitAsDefaultInstance() {
}

msg_brc_control_user_leave_table_req::msg_brc_control_user_leave_table_req(const msg_brc_control_user_leave_table_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_brc_control_user_leave_table_req::SharedCtor() {
  _cached_size_ = 0;
  game_id_ = 0u;
  table_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_brc_control_user_leave_table_req::~msg_brc_control_user_leave_table_req() {
  SharedDtor();
}

void msg_brc_control_user_leave_table_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_brc_control_user_leave_table_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_brc_control_user_leave_table_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_brc_control_user_leave_table_req_descriptor_;
}

const msg_brc_control_user_leave_table_req& msg_brc_control_user_leave_table_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_brc_control_user_leave_table_req* msg_brc_control_user_leave_table_req::default_instance_ = NULL;

msg_brc_control_user_leave_table_req* msg_brc_control_user_leave_table_req::New() const {
  return new msg_brc_control_user_leave_table_req;
}

void msg_brc_control_user_leave_table_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_id_ = 0u;
    table_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_brc_control_user_leave_table_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 game_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_table_id;
        break;
      }

      // optional uint32 table_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_brc_control_user_leave_table_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 game_id = 1;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_id(), output);
  }

  // optional uint32 table_id = 2;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->table_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_brc_control_user_leave_table_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 game_id = 1;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_id(), target);
  }

  // optional uint32 table_id = 2;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->table_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_brc_control_user_leave_table_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 game_id = 1;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional uint32 table_id = 2;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_brc_control_user_leave_table_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_brc_control_user_leave_table_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_brc_control_user_leave_table_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_brc_control_user_leave_table_req::MergeFrom(const msg_brc_control_user_leave_table_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_brc_control_user_leave_table_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_brc_control_user_leave_table_req::CopyFrom(const msg_brc_control_user_leave_table_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_brc_control_user_leave_table_req::IsInitialized() const {

  return true;
}

void msg_brc_control_user_leave_table_req::Swap(msg_brc_control_user_leave_table_req* other) {
  if (other != this) {
    std::swap(game_id_, other->game_id_);
    std::swap(table_id_, other->table_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_brc_control_user_leave_table_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_brc_control_user_leave_table_req_descriptor_;
  metadata.reflection = msg_brc_control_user_leave_table_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_brc_control_user_leave_table_rep::kResultFieldNumber;
#endif  // !_MSC_VER

msg_brc_control_user_leave_table_rep::msg_brc_control_user_leave_table_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_brc_control_user_leave_table_rep::InitAsDefaultInstance() {
}

msg_brc_control_user_leave_table_rep::msg_brc_control_user_leave_table_rep(const msg_brc_control_user_leave_table_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_brc_control_user_leave_table_rep::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_brc_control_user_leave_table_rep::~msg_brc_control_user_leave_table_rep() {
  SharedDtor();
}

void msg_brc_control_user_leave_table_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_brc_control_user_leave_table_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_brc_control_user_leave_table_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_brc_control_user_leave_table_rep_descriptor_;
}

const msg_brc_control_user_leave_table_rep& msg_brc_control_user_leave_table_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_brc_control_user_leave_table_rep* msg_brc_control_user_leave_table_rep::default_instance_ = NULL;

msg_brc_control_user_leave_table_rep* msg_brc_control_user_leave_table_rep::New() const {
  return new msg_brc_control_user_leave_table_rep;
}

void msg_brc_control_user_leave_table_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_brc_control_user_leave_table_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_brc_control_user_leave_table_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_brc_control_user_leave_table_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_brc_control_user_leave_table_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_brc_control_user_leave_table_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_brc_control_user_leave_table_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_brc_control_user_leave_table_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_brc_control_user_leave_table_rep::MergeFrom(const msg_brc_control_user_leave_table_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_brc_control_user_leave_table_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_brc_control_user_leave_table_rep::CopyFrom(const msg_brc_control_user_leave_table_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_brc_control_user_leave_table_rep::IsInitialized() const {

  return true;
}

void msg_brc_control_user_leave_table_rep::Swap(msg_brc_control_user_leave_table_rep* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_brc_control_user_leave_table_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_brc_control_user_leave_table_rep_descriptor_;
  metadata.reflection = msg_brc_control_user_leave_table_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_brc_control_force_leave_banker_req::kUidFieldNumber;
#endif  // !_MSC_VER

msg_brc_control_force_leave_banker_req::msg_brc_control_force_leave_banker_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_brc_control_force_leave_banker_req::InitAsDefaultInstance() {
}

msg_brc_control_force_leave_banker_req::msg_brc_control_force_leave_banker_req(const msg_brc_control_force_leave_banker_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_brc_control_force_leave_banker_req::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_brc_control_force_leave_banker_req::~msg_brc_control_force_leave_banker_req() {
  SharedDtor();
}

void msg_brc_control_force_leave_banker_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_brc_control_force_leave_banker_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_brc_control_force_leave_banker_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_brc_control_force_leave_banker_req_descriptor_;
}

const msg_brc_control_force_leave_banker_req& msg_brc_control_force_leave_banker_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_brc_control_force_leave_banker_req* msg_brc_control_force_leave_banker_req::default_instance_ = NULL;

msg_brc_control_force_leave_banker_req* msg_brc_control_force_leave_banker_req::New() const {
  return new msg_brc_control_force_leave_banker_req;
}

void msg_brc_control_force_leave_banker_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_brc_control_force_leave_banker_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_brc_control_force_leave_banker_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_brc_control_force_leave_banker_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_brc_control_force_leave_banker_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_brc_control_force_leave_banker_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_brc_control_force_leave_banker_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_brc_control_force_leave_banker_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_brc_control_force_leave_banker_req::MergeFrom(const msg_brc_control_force_leave_banker_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_brc_control_force_leave_banker_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_brc_control_force_leave_banker_req::CopyFrom(const msg_brc_control_force_leave_banker_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_brc_control_force_leave_banker_req::IsInitialized() const {

  return true;
}

void msg_brc_control_force_leave_banker_req::Swap(msg_brc_control_force_leave_banker_req* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_brc_control_force_leave_banker_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_brc_control_force_leave_banker_req_descriptor_;
  metadata.reflection = msg_brc_control_force_leave_banker_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_brc_control_force_leave_banker_rep::kUidFieldNumber;
const int msg_brc_control_force_leave_banker_rep::kResultFieldNumber;
#endif  // !_MSC_VER

msg_brc_control_force_leave_banker_rep::msg_brc_control_force_leave_banker_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_brc_control_force_leave_banker_rep::InitAsDefaultInstance() {
}

msg_brc_control_force_leave_banker_rep::msg_brc_control_force_leave_banker_rep(const msg_brc_control_force_leave_banker_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_brc_control_force_leave_banker_rep::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_brc_control_force_leave_banker_rep::~msg_brc_control_force_leave_banker_rep() {
  SharedDtor();
}

void msg_brc_control_force_leave_banker_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_brc_control_force_leave_banker_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_brc_control_force_leave_banker_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_brc_control_force_leave_banker_rep_descriptor_;
}

const msg_brc_control_force_leave_banker_rep& msg_brc_control_force_leave_banker_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_brc_control_force_leave_banker_rep* msg_brc_control_force_leave_banker_rep::default_instance_ = NULL;

msg_brc_control_force_leave_banker_rep* msg_brc_control_force_leave_banker_rep::New() const {
  return new msg_brc_control_force_leave_banker_rep;
}

void msg_brc_control_force_leave_banker_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_brc_control_force_leave_banker_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional uint32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_brc_control_force_leave_banker_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_brc_control_force_leave_banker_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional uint32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_brc_control_force_leave_banker_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_brc_control_force_leave_banker_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_brc_control_force_leave_banker_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_brc_control_force_leave_banker_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_brc_control_force_leave_banker_rep::MergeFrom(const msg_brc_control_force_leave_banker_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_brc_control_force_leave_banker_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_brc_control_force_leave_banker_rep::CopyFrom(const msg_brc_control_force_leave_banker_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_brc_control_force_leave_banker_rep::IsInitialized() const {

  return true;
}

void msg_brc_control_force_leave_banker_rep::Swap(msg_brc_control_force_leave_banker_rep* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_brc_control_force_leave_banker_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_brc_control_force_leave_banker_rep_descriptor_;
  metadata.reflection = msg_brc_control_force_leave_banker_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_brc_control_area_info_req::kUidFieldNumber;
const int msg_brc_control_area_info_req::kAreaFieldNumber;
const int msg_brc_control_area_info_req::kTimesFieldNumber;
#endif  // !_MSC_VER

msg_brc_control_area_info_req::msg_brc_control_area_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_brc_control_area_info_req::InitAsDefaultInstance() {
}

msg_brc_control_area_info_req::msg_brc_control_area_info_req(const msg_brc_control_area_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_brc_control_area_info_req::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_brc_control_area_info_req::~msg_brc_control_area_info_req() {
  SharedDtor();
}

void msg_brc_control_area_info_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_brc_control_area_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_brc_control_area_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_brc_control_area_info_req_descriptor_;
}

const msg_brc_control_area_info_req& msg_brc_control_area_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_brc_control_area_info_req* msg_brc_control_area_info_req::default_instance_ = NULL;

msg_brc_control_area_info_req* msg_brc_control_area_info_req::New() const {
  return new msg_brc_control_area_info_req;
}

void msg_brc_control_area_info_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    times_ = 0u;
  }
  area_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_brc_control_area_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_area;
        break;
      }

      // repeated uint32 area = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_area())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_area())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_area;
        if (input->ExpectTag(24)) goto parse_times;
        break;
      }

      // optional uint32 times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_brc_control_area_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // repeated uint32 area = 2;
  for (int i = 0; i < this->area_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->area(i), output);
  }

  // optional uint32 times = 3;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_brc_control_area_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // repeated uint32 area = 2;
  for (int i = 0; i < this->area_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->area(i), target);
  }

  // optional uint32 times = 3;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_brc_control_area_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 times = 3;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times());
    }

  }
  // repeated uint32 area = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->area_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->area(i));
    }
    total_size += 1 * this->area_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_brc_control_area_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_brc_control_area_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_brc_control_area_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_brc_control_area_info_req::MergeFrom(const msg_brc_control_area_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  area_.MergeFrom(from.area_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_brc_control_area_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_brc_control_area_info_req::CopyFrom(const msg_brc_control_area_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_brc_control_area_info_req::IsInitialized() const {

  return true;
}

void msg_brc_control_area_info_req::Swap(msg_brc_control_area_info_req* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    area_.Swap(&other->area_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_brc_control_area_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_brc_control_area_info_req_descriptor_;
  metadata.reflection = msg_brc_control_area_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_brc_control_area_info_rep::kResultFieldNumber;
const int msg_brc_control_area_info_rep::kAreaFieldNumber;
const int msg_brc_control_area_info_rep::kTimesFieldNumber;
#endif  // !_MSC_VER

msg_brc_control_area_info_rep::msg_brc_control_area_info_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_brc_control_area_info_rep::InitAsDefaultInstance() {
}

msg_brc_control_area_info_rep::msg_brc_control_area_info_rep(const msg_brc_control_area_info_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_brc_control_area_info_rep::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_brc_control_area_info_rep::~msg_brc_control_area_info_rep() {
  SharedDtor();
}

void msg_brc_control_area_info_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_brc_control_area_info_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_brc_control_area_info_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_brc_control_area_info_rep_descriptor_;
}

const msg_brc_control_area_info_rep& msg_brc_control_area_info_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_brc_control_area_info_rep* msg_brc_control_area_info_rep::default_instance_ = NULL;

msg_brc_control_area_info_rep* msg_brc_control_area_info_rep::New() const {
  return new msg_brc_control_area_info_rep;
}

void msg_brc_control_area_info_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    times_ = 0u;
  }
  area_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_brc_control_area_info_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_area;
        break;
      }

      // repeated uint32 area = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_area())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_area())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_area;
        if (input->ExpectTag(24)) goto parse_times;
        break;
      }

      // optional uint32 times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_brc_control_area_info_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // repeated uint32 area = 2;
  for (int i = 0; i < this->area_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->area(i), output);
  }

  // optional uint32 times = 3;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_brc_control_area_info_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // repeated uint32 area = 2;
  for (int i = 0; i < this->area_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->area(i), target);
  }

  // optional uint32 times = 3;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_brc_control_area_info_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 times = 3;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times());
    }

  }
  // repeated uint32 area = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->area_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->area(i));
    }
    total_size += 1 * this->area_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_brc_control_area_info_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_brc_control_area_info_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_brc_control_area_info_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_brc_control_area_info_rep::MergeFrom(const msg_brc_control_area_info_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  area_.MergeFrom(from.area_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_brc_control_area_info_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_brc_control_area_info_rep::CopyFrom(const msg_brc_control_area_info_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_brc_control_area_info_rep::IsInitialized() const {

  return true;
}

void msg_brc_control_area_info_rep::Swap(msg_brc_control_area_info_rep* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    area_.Swap(&other->area_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_brc_control_area_info_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_brc_control_area_info_rep_descriptor_;
  metadata.reflection = msg_brc_control_area_info_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_brc_control_total_robot_bet_info::kAreaInfoFieldNumber;
#endif  // !_MSC_VER

msg_brc_control_total_robot_bet_info::msg_brc_control_total_robot_bet_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_brc_control_total_robot_bet_info::InitAsDefaultInstance() {
}

msg_brc_control_total_robot_bet_info::msg_brc_control_total_robot_bet_info(const msg_brc_control_total_robot_bet_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_brc_control_total_robot_bet_info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_brc_control_total_robot_bet_info::~msg_brc_control_total_robot_bet_info() {
  SharedDtor();
}

void msg_brc_control_total_robot_bet_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_brc_control_total_robot_bet_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_brc_control_total_robot_bet_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_brc_control_total_robot_bet_info_descriptor_;
}

const msg_brc_control_total_robot_bet_info& msg_brc_control_total_robot_bet_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_brc_control_total_robot_bet_info* msg_brc_control_total_robot_bet_info::default_instance_ = NULL;

msg_brc_control_total_robot_bet_info* msg_brc_control_total_robot_bet_info::New() const {
  return new msg_brc_control_total_robot_bet_info;
}

void msg_brc_control_total_robot_bet_info::Clear() {
  area_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_brc_control_total_robot_bet_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 area_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area_info:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_area_info())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_area_info())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_area_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_brc_control_total_robot_bet_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 area_info = 1;
  for (int i = 0; i < this->area_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->area_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_brc_control_total_robot_bet_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 area_info = 1;
  for (int i = 0; i < this->area_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->area_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_brc_control_total_robot_bet_info::ByteSize() const {
  int total_size = 0;

  // repeated int64 area_info = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->area_info_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->area_info(i));
    }
    total_size += 1 * this->area_info_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_brc_control_total_robot_bet_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_brc_control_total_robot_bet_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_brc_control_total_robot_bet_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_brc_control_total_robot_bet_info::MergeFrom(const msg_brc_control_total_robot_bet_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  area_info_.MergeFrom(from.area_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_brc_control_total_robot_bet_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_brc_control_total_robot_bet_info::CopyFrom(const msg_brc_control_total_robot_bet_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_brc_control_total_robot_bet_info::IsInitialized() const {

  return true;
}

void msg_brc_control_total_robot_bet_info::Swap(msg_brc_control_total_robot_bet_info* other) {
  if (other != this) {
    area_info_.Swap(&other->area_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_brc_control_total_robot_bet_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_brc_control_total_robot_bet_info_descriptor_;
  metadata.reflection = msg_brc_control_total_robot_bet_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_brc_control_total_player_bet_info::kAreaInfoFieldNumber;
#endif  // !_MSC_VER

msg_brc_control_total_player_bet_info::msg_brc_control_total_player_bet_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_brc_control_total_player_bet_info::InitAsDefaultInstance() {
}

msg_brc_control_total_player_bet_info::msg_brc_control_total_player_bet_info(const msg_brc_control_total_player_bet_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_brc_control_total_player_bet_info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_brc_control_total_player_bet_info::~msg_brc_control_total_player_bet_info() {
  SharedDtor();
}

void msg_brc_control_total_player_bet_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_brc_control_total_player_bet_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_brc_control_total_player_bet_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_brc_control_total_player_bet_info_descriptor_;
}

const msg_brc_control_total_player_bet_info& msg_brc_control_total_player_bet_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_brc_control_total_player_bet_info* msg_brc_control_total_player_bet_info::default_instance_ = NULL;

msg_brc_control_total_player_bet_info* msg_brc_control_total_player_bet_info::New() const {
  return new msg_brc_control_total_player_bet_info;
}

void msg_brc_control_total_player_bet_info::Clear() {
  area_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_brc_control_total_player_bet_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 area_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area_info:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_area_info())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_area_info())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_area_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_brc_control_total_player_bet_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 area_info = 1;
  for (int i = 0; i < this->area_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->area_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_brc_control_total_player_bet_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 area_info = 1;
  for (int i = 0; i < this->area_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->area_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_brc_control_total_player_bet_info::ByteSize() const {
  int total_size = 0;

  // repeated int64 area_info = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->area_info_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->area_info(i));
    }
    total_size += 1 * this->area_info_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_brc_control_total_player_bet_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_brc_control_total_player_bet_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_brc_control_total_player_bet_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_brc_control_total_player_bet_info::MergeFrom(const msg_brc_control_total_player_bet_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  area_info_.MergeFrom(from.area_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_brc_control_total_player_bet_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_brc_control_total_player_bet_info::CopyFrom(const msg_brc_control_total_player_bet_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_brc_control_total_player_bet_info::IsInitialized() const {

  return true;
}

void msg_brc_control_total_player_bet_info::Swap(msg_brc_control_total_player_bet_info* other) {
  if (other != this) {
    area_info_.Swap(&other->area_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_brc_control_total_player_bet_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_brc_control_total_player_bet_info_descriptor_;
  metadata.reflection = msg_brc_control_total_player_bet_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int brc_control_player_bet_info::kUidFieldNumber;
const int brc_control_player_bet_info::kAreaInfoFieldNumber;
const int brc_control_player_bet_info::kTotalBetFieldNumber;
const int brc_control_player_bet_info::kCurrDayWinFieldNumber;
const int brc_control_player_bet_info::kWinNumberFieldNumber;
const int brc_control_player_bet_info::kLoseNumberFieldNumber;
const int brc_control_player_bet_info::kTotalWinFieldNumber;
const int brc_control_player_bet_info::kCoinFieldNumber;
const int brc_control_player_bet_info::kNameFieldNumber;
const int brc_control_player_bet_info::kIsmasterFieldNumber;
#endif  // !_MSC_VER

brc_control_player_bet_info::brc_control_player_bet_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void brc_control_player_bet_info::InitAsDefaultInstance() {
}

brc_control_player_bet_info::brc_control_player_bet_info(const brc_control_player_bet_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void brc_control_player_bet_info::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  total_bet_ = GOOGLE_LONGLONG(0);
  curr_day_win_ = GOOGLE_LONGLONG(0);
  win_number_ = 0u;
  lose_number_ = 0u;
  total_win_ = GOOGLE_LONGLONG(0);
  coin_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ismaster_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

brc_control_player_bet_info::~brc_control_player_bet_info() {
  SharedDtor();
}

void brc_control_player_bet_info::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void brc_control_player_bet_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* brc_control_player_bet_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return brc_control_player_bet_info_descriptor_;
}

const brc_control_player_bet_info& brc_control_player_bet_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

brc_control_player_bet_info* brc_control_player_bet_info::default_instance_ = NULL;

brc_control_player_bet_info* brc_control_player_bet_info::New() const {
  return new brc_control_player_bet_info;
}

void brc_control_player_bet_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    total_bet_ = GOOGLE_LONGLONG(0);
    curr_day_win_ = GOOGLE_LONGLONG(0);
    win_number_ = 0u;
    lose_number_ = 0u;
    total_win_ = GOOGLE_LONGLONG(0);
    coin_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    ismaster_ = 0u;
  }
  area_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool brc_control_player_bet_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_area_info;
        break;
      }

      // repeated int64 area_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area_info:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_area_info())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_area_info())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_area_info;
        if (input->ExpectTag(24)) goto parse_total_bet;
        break;
      }

      // optional int64 total_bet = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_bet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_bet_)));
          set_has_total_bet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_curr_day_win;
        break;
      }

      // optional int64 curr_day_win = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curr_day_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &curr_day_win_)));
          set_has_curr_day_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_win_number;
        break;
      }

      // optional uint32 win_number = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_number_)));
          set_has_win_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lose_number;
        break;
      }

      // optional uint32 lose_number = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lose_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lose_number_)));
          set_has_lose_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_total_win;
        break;
      }

      // optional int64 total_win = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_win_)));
          set_has_total_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_coin;
        break;
      }

      // optional int64 coin = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_name;
        break;
      }

      // optional bytes name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ismaster;
        break;
      }

      // optional uint32 ismaster = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ismaster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ismaster_)));
          set_has_ismaster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void brc_control_player_bet_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // repeated int64 area_info = 2;
  for (int i = 0; i < this->area_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->area_info(i), output);
  }

  // optional int64 total_bet = 3;
  if (has_total_bet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->total_bet(), output);
  }

  // optional int64 curr_day_win = 4;
  if (has_curr_day_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->curr_day_win(), output);
  }

  // optional uint32 win_number = 5;
  if (has_win_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->win_number(), output);
  }

  // optional uint32 lose_number = 6;
  if (has_lose_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->lose_number(), output);
  }

  // optional int64 total_win = 7;
  if (has_total_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->total_win(), output);
  }

  // optional int64 coin = 8;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->coin(), output);
  }

  // optional bytes name = 9;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->name(), output);
  }

  // optional uint32 ismaster = 10;
  if (has_ismaster()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->ismaster(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* brc_control_player_bet_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // repeated int64 area_info = 2;
  for (int i = 0; i < this->area_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->area_info(i), target);
  }

  // optional int64 total_bet = 3;
  if (has_total_bet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->total_bet(), target);
  }

  // optional int64 curr_day_win = 4;
  if (has_curr_day_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->curr_day_win(), target);
  }

  // optional uint32 win_number = 5;
  if (has_win_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->win_number(), target);
  }

  // optional uint32 lose_number = 6;
  if (has_lose_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->lose_number(), target);
  }

  // optional int64 total_win = 7;
  if (has_total_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->total_win(), target);
  }

  // optional int64 coin = 8;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->coin(), target);
  }

  // optional bytes name = 9;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->name(), target);
  }

  // optional uint32 ismaster = 10;
  if (has_ismaster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->ismaster(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int brc_control_player_bet_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional int64 total_bet = 3;
    if (has_total_bet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_bet());
    }

    // optional int64 curr_day_win = 4;
    if (has_curr_day_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->curr_day_win());
    }

    // optional uint32 win_number = 5;
    if (has_win_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win_number());
    }

    // optional uint32 lose_number = 6;
    if (has_lose_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lose_number());
    }

    // optional int64 total_win = 7;
    if (has_total_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_win());
    }

    // optional int64 coin = 8;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->coin());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes name = 9;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint32 ismaster = 10;
    if (has_ismaster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ismaster());
    }

  }
  // repeated int64 area_info = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->area_info_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->area_info(i));
    }
    total_size += 1 * this->area_info_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void brc_control_player_bet_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const brc_control_player_bet_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const brc_control_player_bet_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void brc_control_player_bet_info::MergeFrom(const brc_control_player_bet_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  area_info_.MergeFrom(from.area_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_total_bet()) {
      set_total_bet(from.total_bet());
    }
    if (from.has_curr_day_win()) {
      set_curr_day_win(from.curr_day_win());
    }
    if (from.has_win_number()) {
      set_win_number(from.win_number());
    }
    if (from.has_lose_number()) {
      set_lose_number(from.lose_number());
    }
    if (from.has_total_win()) {
      set_total_win(from.total_win());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ismaster()) {
      set_ismaster(from.ismaster());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void brc_control_player_bet_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void brc_control_player_bet_info::CopyFrom(const brc_control_player_bet_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool brc_control_player_bet_info::IsInitialized() const {

  return true;
}

void brc_control_player_bet_info::Swap(brc_control_player_bet_info* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    area_info_.Swap(&other->area_info_);
    std::swap(total_bet_, other->total_bet_);
    std::swap(curr_day_win_, other->curr_day_win_);
    std::swap(win_number_, other->win_number_);
    std::swap(lose_number_, other->lose_number_);
    std::swap(total_win_, other->total_win_);
    std::swap(coin_, other->coin_);
    std::swap(name_, other->name_);
    std::swap(ismaster_, other->ismaster_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata brc_control_player_bet_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = brc_control_player_bet_info_descriptor_;
  metadata.reflection = brc_control_player_bet_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_brc_control_single_player_bet_info::kPlayerBetInfoFieldNumber;
#endif  // !_MSC_VER

msg_brc_control_single_player_bet_info::msg_brc_control_single_player_bet_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_brc_control_single_player_bet_info::InitAsDefaultInstance() {
  player_bet_info_ = const_cast< ::net::brc_control_player_bet_info*>(&::net::brc_control_player_bet_info::default_instance());
}

msg_brc_control_single_player_bet_info::msg_brc_control_single_player_bet_info(const msg_brc_control_single_player_bet_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_brc_control_single_player_bet_info::SharedCtor() {
  _cached_size_ = 0;
  player_bet_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_brc_control_single_player_bet_info::~msg_brc_control_single_player_bet_info() {
  SharedDtor();
}

void msg_brc_control_single_player_bet_info::SharedDtor() {
  if (this != default_instance_) {
    delete player_bet_info_;
  }
}

void msg_brc_control_single_player_bet_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_brc_control_single_player_bet_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_brc_control_single_player_bet_info_descriptor_;
}

const msg_brc_control_single_player_bet_info& msg_brc_control_single_player_bet_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_brc_control_single_player_bet_info* msg_brc_control_single_player_bet_info::default_instance_ = NULL;

msg_brc_control_single_player_bet_info* msg_brc_control_single_player_bet_info::New() const {
  return new msg_brc_control_single_player_bet_info;
}

void msg_brc_control_single_player_bet_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player_bet_info()) {
      if (player_bet_info_ != NULL) player_bet_info_->::net::brc_control_player_bet_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_brc_control_single_player_bet_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .net.brc_control_player_bet_info player_bet_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_bet_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_brc_control_single_player_bet_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .net.brc_control_player_bet_info player_bet_info = 1;
  if (has_player_bet_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_bet_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_brc_control_single_player_bet_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .net.brc_control_player_bet_info player_bet_info = 1;
  if (has_player_bet_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_bet_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_brc_control_single_player_bet_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .net.brc_control_player_bet_info player_bet_info = 1;
    if (has_player_bet_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_bet_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_brc_control_single_player_bet_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_brc_control_single_player_bet_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_brc_control_single_player_bet_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_brc_control_single_player_bet_info::MergeFrom(const msg_brc_control_single_player_bet_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_bet_info()) {
      mutable_player_bet_info()->::net::brc_control_player_bet_info::MergeFrom(from.player_bet_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_brc_control_single_player_bet_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_brc_control_single_player_bet_info::CopyFrom(const msg_brc_control_single_player_bet_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_brc_control_single_player_bet_info::IsInitialized() const {

  return true;
}

void msg_brc_control_single_player_bet_info::Swap(msg_brc_control_single_player_bet_info* other) {
  if (other != this) {
    std::swap(player_bet_info_, other->player_bet_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_brc_control_single_player_bet_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_brc_control_single_player_bet_info_descriptor_;
  metadata.reflection = msg_brc_control_single_player_bet_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_brc_control_all_player_bet_info::kPlayerBetListFieldNumber;
#endif  // !_MSC_VER

msg_brc_control_all_player_bet_info::msg_brc_control_all_player_bet_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_brc_control_all_player_bet_info::InitAsDefaultInstance() {
}

msg_brc_control_all_player_bet_info::msg_brc_control_all_player_bet_info(const msg_brc_control_all_player_bet_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_brc_control_all_player_bet_info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_brc_control_all_player_bet_info::~msg_brc_control_all_player_bet_info() {
  SharedDtor();
}

void msg_brc_control_all_player_bet_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_brc_control_all_player_bet_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_brc_control_all_player_bet_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_brc_control_all_player_bet_info_descriptor_;
}

const msg_brc_control_all_player_bet_info& msg_brc_control_all_player_bet_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_brc_control_all_player_bet_info* msg_brc_control_all_player_bet_info::default_instance_ = NULL;

msg_brc_control_all_player_bet_info* msg_brc_control_all_player_bet_info::New() const {
  return new msg_brc_control_all_player_bet_info;
}

void msg_brc_control_all_player_bet_info::Clear() {
  player_bet_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_brc_control_all_player_bet_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .net.brc_control_player_bet_info player_bet_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_bet_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_bet_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_player_bet_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_brc_control_all_player_bet_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .net.brc_control_player_bet_info player_bet_list = 1;
  for (int i = 0; i < this->player_bet_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_bet_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_brc_control_all_player_bet_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .net.brc_control_player_bet_info player_bet_list = 1;
  for (int i = 0; i < this->player_bet_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_bet_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_brc_control_all_player_bet_info::ByteSize() const {
  int total_size = 0;

  // repeated .net.brc_control_player_bet_info player_bet_list = 1;
  total_size += 1 * this->player_bet_list_size();
  for (int i = 0; i < this->player_bet_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_bet_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_brc_control_all_player_bet_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_brc_control_all_player_bet_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_brc_control_all_player_bet_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_brc_control_all_player_bet_info::MergeFrom(const msg_brc_control_all_player_bet_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_bet_list_.MergeFrom(from.player_bet_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_brc_control_all_player_bet_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_brc_control_all_player_bet_info::CopyFrom(const msg_brc_control_all_player_bet_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_brc_control_all_player_bet_info::IsInitialized() const {

  return true;
}

void msg_brc_control_all_player_bet_info::Swap(msg_brc_control_all_player_bet_info* other) {
  if (other != this) {
    player_bet_list_.Swap(&other->player_bet_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_brc_control_all_player_bet_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_brc_control_all_player_bet_info_descriptor_;
  metadata.reflection = msg_brc_control_all_player_bet_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int brc_control_player_coin_info::kUidFieldNumber;
const int brc_control_player_coin_info::kCoinFieldNumber;
const int brc_control_player_coin_info::kPlayerTypeFieldNumber;
#endif  // !_MSC_VER

brc_control_player_coin_info::brc_control_player_coin_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void brc_control_player_coin_info::InitAsDefaultInstance() {
}

brc_control_player_coin_info::brc_control_player_coin_info(const brc_control_player_coin_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void brc_control_player_coin_info::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  coin_ = GOOGLE_LONGLONG(0);
  player_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

brc_control_player_coin_info::~brc_control_player_coin_info() {
  SharedDtor();
}

void brc_control_player_coin_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void brc_control_player_coin_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* brc_control_player_coin_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return brc_control_player_coin_info_descriptor_;
}

const brc_control_player_coin_info& brc_control_player_coin_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

brc_control_player_coin_info* brc_control_player_coin_info::default_instance_ = NULL;

brc_control_player_coin_info* brc_control_player_coin_info::New() const {
  return new brc_control_player_coin_info;
}

void brc_control_player_coin_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    coin_ = GOOGLE_LONGLONG(0);
    player_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool brc_control_player_coin_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_coin;
        break;
      }

      // optional int64 coin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_type;
        break;
      }

      // optional uint32 player_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_type_)));
          set_has_player_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void brc_control_player_coin_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional int64 coin = 2;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->coin(), output);
  }

  // optional uint32 player_type = 3;
  if (has_player_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->player_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* brc_control_player_coin_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional int64 coin = 2;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->coin(), target);
  }

  // optional uint32 player_type = 3;
  if (has_player_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->player_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int brc_control_player_coin_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional int64 coin = 2;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->coin());
    }

    // optional uint32 player_type = 3;
    if (has_player_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void brc_control_player_coin_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const brc_control_player_coin_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const brc_control_player_coin_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void brc_control_player_coin_info::MergeFrom(const brc_control_player_coin_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_player_type()) {
      set_player_type(from.player_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void brc_control_player_coin_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void brc_control_player_coin_info::CopyFrom(const brc_control_player_coin_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool brc_control_player_coin_info::IsInitialized() const {

  return true;
}

void brc_control_player_coin_info::Swap(brc_control_player_coin_info* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(coin_, other->coin_);
    std::swap(player_type_, other->player_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata brc_control_player_coin_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = brc_control_player_coin_info_descriptor_;
  metadata.reflection = brc_control_player_coin_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_brc_control_apple_banker_list::kBankInfoFieldNumber;
const int msg_brc_control_apple_banker_list::kUserInfoFieldNumber;
#endif  // !_MSC_VER

msg_brc_control_apple_banker_list::msg_brc_control_apple_banker_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_brc_control_apple_banker_list::InitAsDefaultInstance() {
  bank_info_ = const_cast< ::net::brc_control_player_coin_info*>(&::net::brc_control_player_coin_info::default_instance());
}

msg_brc_control_apple_banker_list::msg_brc_control_apple_banker_list(const msg_brc_control_apple_banker_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_brc_control_apple_banker_list::SharedCtor() {
  _cached_size_ = 0;
  bank_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_brc_control_apple_banker_list::~msg_brc_control_apple_banker_list() {
  SharedDtor();
}

void msg_brc_control_apple_banker_list::SharedDtor() {
  if (this != default_instance_) {
    delete bank_info_;
  }
}

void msg_brc_control_apple_banker_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_brc_control_apple_banker_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_brc_control_apple_banker_list_descriptor_;
}

const msg_brc_control_apple_banker_list& msg_brc_control_apple_banker_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_brc_control_apple_banker_list* msg_brc_control_apple_banker_list::default_instance_ = NULL;

msg_brc_control_apple_banker_list* msg_brc_control_apple_banker_list::New() const {
  return new msg_brc_control_apple_banker_list;
}

void msg_brc_control_apple_banker_list::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bank_info()) {
      if (bank_info_ != NULL) bank_info_->::net::brc_control_player_coin_info::Clear();
    }
  }
  user_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_brc_control_apple_banker_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .net.brc_control_player_coin_info bank_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bank_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_info;
        break;
      }

      // repeated .net.brc_control_player_coin_info user_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_brc_control_apple_banker_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .net.brc_control_player_coin_info bank_info = 1;
  if (has_bank_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bank_info(), output);
  }

  // repeated .net.brc_control_player_coin_info user_info = 2;
  for (int i = 0; i < this->user_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_brc_control_apple_banker_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .net.brc_control_player_coin_info bank_info = 1;
  if (has_bank_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bank_info(), target);
  }

  // repeated .net.brc_control_player_coin_info user_info = 2;
  for (int i = 0; i < this->user_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_brc_control_apple_banker_list::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .net.brc_control_player_coin_info bank_info = 1;
    if (has_bank_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bank_info());
    }

  }
  // repeated .net.brc_control_player_coin_info user_info = 2;
  total_size += 1 * this->user_info_size();
  for (int i = 0; i < this->user_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_brc_control_apple_banker_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_brc_control_apple_banker_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_brc_control_apple_banker_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_brc_control_apple_banker_list::MergeFrom(const msg_brc_control_apple_banker_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_info_.MergeFrom(from.user_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bank_info()) {
      mutable_bank_info()->::net::brc_control_player_coin_info::MergeFrom(from.bank_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_brc_control_apple_banker_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_brc_control_apple_banker_list::CopyFrom(const msg_brc_control_apple_banker_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_brc_control_apple_banker_list::IsInitialized() const {

  return true;
}

void msg_brc_control_apple_banker_list::Swap(msg_brc_control_apple_banker_list* other) {
  if (other != this) {
    std::swap(bank_info_, other->bank_info_);
    user_info_.Swap(&other->user_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_brc_control_apple_banker_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_brc_control_apple_banker_list_descriptor_;
  metadata.reflection = msg_brc_control_apple_banker_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_brc_control_game_end_info::kUidFieldNumber;
const int msg_brc_control_game_end_info::kAreaInfoFieldNumber;
#endif  // !_MSC_VER

msg_brc_control_game_end_info::msg_brc_control_game_end_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_brc_control_game_end_info::InitAsDefaultInstance() {
}

msg_brc_control_game_end_info::msg_brc_control_game_end_info(const msg_brc_control_game_end_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_brc_control_game_end_info::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_brc_control_game_end_info::~msg_brc_control_game_end_info() {
  SharedDtor();
}

void msg_brc_control_game_end_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_brc_control_game_end_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_brc_control_game_end_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_brc_control_game_end_info_descriptor_;
}

const msg_brc_control_game_end_info& msg_brc_control_game_end_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_brc_control_game_end_info* msg_brc_control_game_end_info::default_instance_ = NULL;

msg_brc_control_game_end_info* msg_brc_control_game_end_info::New() const {
  return new msg_brc_control_game_end_info;
}

void msg_brc_control_game_end_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
  }
  area_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_brc_control_game_end_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_area_info;
        break;
      }

      // repeated uint32 area_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area_info:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_area_info())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_area_info())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_area_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_brc_control_game_end_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // repeated uint32 area_info = 2;
  for (int i = 0; i < this->area_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->area_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_brc_control_game_end_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // repeated uint32 area_info = 2;
  for (int i = 0; i < this->area_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->area_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_brc_control_game_end_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  // repeated uint32 area_info = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->area_info_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->area_info(i));
    }
    total_size += 1 * this->area_info_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_brc_control_game_end_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_brc_control_game_end_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_brc_control_game_end_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_brc_control_game_end_info::MergeFrom(const msg_brc_control_game_end_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  area_info_.MergeFrom(from.area_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_brc_control_game_end_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_brc_control_game_end_info::CopyFrom(const msg_brc_control_game_end_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_brc_control_game_end_info::IsInitialized() const {

  return true;
}

void msg_brc_control_game_end_info::Swap(msg_brc_control_game_end_info* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    area_info_.Swap(&other->area_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_brc_control_game_end_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_brc_control_game_end_info_descriptor_;
  metadata.reflection = msg_brc_control_game_end_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_brc_control_game_status_info::kStatusFieldNumber;
const int msg_brc_control_game_status_info::kTimeFieldNumber;
#endif  // !_MSC_VER

msg_brc_control_game_status_info::msg_brc_control_game_status_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_brc_control_game_status_info::InitAsDefaultInstance() {
}

msg_brc_control_game_status_info::msg_brc_control_game_status_info(const msg_brc_control_game_status_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_brc_control_game_status_info::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_brc_control_game_status_info::~msg_brc_control_game_status_info() {
  SharedDtor();
}

void msg_brc_control_game_status_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_brc_control_game_status_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_brc_control_game_status_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_brc_control_game_status_info_descriptor_;
}

const msg_brc_control_game_status_info& msg_brc_control_game_status_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_brc_control_game_status_info* msg_brc_control_game_status_info::default_instance_ = NULL;

msg_brc_control_game_status_info* msg_brc_control_game_status_info::New() const {
  return new msg_brc_control_game_status_info;
}

void msg_brc_control_game_status_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0u;
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_brc_control_game_status_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_brc_control_game_status_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  // optional uint32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_brc_control_game_status_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  // optional uint32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_brc_control_game_status_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_brc_control_game_status_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_brc_control_game_status_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_brc_control_game_status_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_brc_control_game_status_info::MergeFrom(const msg_brc_control_game_status_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_brc_control_game_status_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_brc_control_game_status_info::CopyFrom(const msg_brc_control_game_status_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_brc_control_game_status_info::IsInitialized() const {

  return true;
}

void msg_brc_control_game_status_info::Swap(msg_brc_control_game_status_info* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_brc_control_game_status_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_brc_control_game_status_info_descriptor_;
  metadata.reflection = msg_brc_control_game_status_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_brc_control_flush_area_info::kAreaFieldNumber;
const int msg_brc_control_flush_area_info::kTimesFieldNumber;
#endif  // !_MSC_VER

msg_brc_control_flush_area_info::msg_brc_control_flush_area_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_brc_control_flush_area_info::InitAsDefaultInstance() {
}

msg_brc_control_flush_area_info::msg_brc_control_flush_area_info(const msg_brc_control_flush_area_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_brc_control_flush_area_info::SharedCtor() {
  _cached_size_ = 0;
  times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_brc_control_flush_area_info::~msg_brc_control_flush_area_info() {
  SharedDtor();
}

void msg_brc_control_flush_area_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_brc_control_flush_area_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_brc_control_flush_area_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_brc_control_flush_area_info_descriptor_;
}

const msg_brc_control_flush_area_info& msg_brc_control_flush_area_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_brc_control_flush_area_info* msg_brc_control_flush_area_info::default_instance_ = NULL;

msg_brc_control_flush_area_info* msg_brc_control_flush_area_info::New() const {
  return new msg_brc_control_flush_area_info;
}

void msg_brc_control_flush_area_info::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    times_ = 0u;
  }
  area_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_brc_control_flush_area_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 area = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_area())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_area())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_area;
        if (input->ExpectTag(16)) goto parse_times;
        break;
      }

      // optional uint32 times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_brc_control_flush_area_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 area = 1;
  for (int i = 0; i < this->area_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->area(i), output);
  }

  // optional uint32 times = 2;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_brc_control_flush_area_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 area = 1;
  for (int i = 0; i < this->area_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->area(i), target);
  }

  // optional uint32 times = 2;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_brc_control_flush_area_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 times = 2;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times());
    }

  }
  // repeated uint32 area = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->area_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->area(i));
    }
    total_size += 1 * this->area_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_brc_control_flush_area_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_brc_control_flush_area_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_brc_control_flush_area_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_brc_control_flush_area_info::MergeFrom(const msg_brc_control_flush_area_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  area_.MergeFrom(from.area_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_brc_control_flush_area_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_brc_control_flush_area_info::CopyFrom(const msg_brc_control_flush_area_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_brc_control_flush_area_info::IsInitialized() const {

  return true;
}

void msg_brc_control_flush_area_info::Swap(msg_brc_control_flush_area_info* other) {
  if (other != this) {
    area_.Swap(&other->area_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_brc_control_flush_area_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_brc_control_flush_area_info_descriptor_;
  metadata.reflection = msg_brc_control_flush_area_info_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace net

// @@protoc_insertion_point(global_scope)
