// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: baccarat_logic_msg.proto

#ifndef PROTOBUF_baccarat_5flogic_5fmsg_2eproto__INCLUDED
#define PROTOBUF_baccarat_5flogic_5fmsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "base_msg_struct.pb.h"
#include "error_code.pb.h"
// @@protoc_insertion_point(includes)

namespace net {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_baccarat_5flogic_5fmsg_2eproto();
void protobuf_AssignDesc_baccarat_5flogic_5fmsg_2eproto();
void protobuf_ShutdownFile_baccarat_5flogic_5fmsg_2eproto();

class msg_baccarat_game_info_free_rep;
class msg_baccarat_game_info_play_rep;
class msg_baccarat_start_rep;
class msg_baccarat_place_jetton_req;
class msg_baccarat_place_jetton_rep;
class msg_baccarat_place_jetton_broadcast;
class msg_baccarat_game_end;
class msg_baccarat_apply_banker;
class msg_baccarat_apply_banker_rep;
class msg_baccarat_change_banker;
class msg_baccarat_change_user_score;
class msg_baccarat_apply_list;
class msg_baccarat_jump_apply_queue_req;
class msg_baccarat_jump_apply_queue_rep;
class msg_baccarat_banker_calc_rep;
class msg_baccarat_add_bankerscore_rep;
class baccarat_play_log;
class msg_baccarat_play_log_rep;

// ===================================================================

class msg_baccarat_game_info_free_rep : public ::google::protobuf::Message {
 public:
  msg_baccarat_game_info_free_rep();
  virtual ~msg_baccarat_game_info_free_rep();

  msg_baccarat_game_info_free_rep(const msg_baccarat_game_info_free_rep& from);

  inline msg_baccarat_game_info_free_rep& operator=(const msg_baccarat_game_info_free_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_baccarat_game_info_free_rep& default_instance();

  void Swap(msg_baccarat_game_info_free_rep* other);

  // implements Message ----------------------------------------------

  msg_baccarat_game_info_free_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_baccarat_game_info_free_rep& from);
  void MergeFrom(const msg_baccarat_game_info_free_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 time_leave = 1;
  inline bool has_time_leave() const;
  inline void clear_time_leave();
  static const int kTimeLeaveFieldNumber = 1;
  inline ::google::protobuf::uint32 time_leave() const;
  inline void set_time_leave(::google::protobuf::uint32 value);

  // optional uint32 banker_id = 2;
  inline bool has_banker_id() const;
  inline void clear_banker_id();
  static const int kBankerIdFieldNumber = 2;
  inline ::google::protobuf::uint32 banker_id() const;
  inline void set_banker_id(::google::protobuf::uint32 value);

  // optional uint32 banker_time = 3;
  inline bool has_banker_time() const;
  inline void clear_banker_time();
  static const int kBankerTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 banker_time() const;
  inline void set_banker_time(::google::protobuf::uint32 value);

  // optional int64 banker_win_score = 4;
  inline bool has_banker_win_score() const;
  inline void clear_banker_win_score();
  static const int kBankerWinScoreFieldNumber = 4;
  inline ::google::protobuf::int64 banker_win_score() const;
  inline void set_banker_win_score(::google::protobuf::int64 value);

  // optional int64 banker_score = 5;
  inline bool has_banker_score() const;
  inline void clear_banker_score();
  static const int kBankerScoreFieldNumber = 5;
  inline ::google::protobuf::int64 banker_score() const;
  inline void set_banker_score(::google::protobuf::int64 value);

  // optional int64 banker_buyin_score = 6;
  inline bool has_banker_buyin_score() const;
  inline void clear_banker_buyin_score();
  static const int kBankerBuyinScoreFieldNumber = 6;
  inline ::google::protobuf::int64 banker_buyin_score() const;
  inline void set_banker_buyin_score(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:net.msg_baccarat_game_info_free_rep)
 private:
  inline void set_has_time_leave();
  inline void clear_has_time_leave();
  inline void set_has_banker_id();
  inline void clear_has_banker_id();
  inline void set_has_banker_time();
  inline void clear_has_banker_time();
  inline void set_has_banker_win_score();
  inline void clear_has_banker_win_score();
  inline void set_has_banker_score();
  inline void clear_has_banker_score();
  inline void set_has_banker_buyin_score();
  inline void clear_has_banker_buyin_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 time_leave_;
  ::google::protobuf::uint32 banker_id_;
  ::google::protobuf::int64 banker_win_score_;
  ::google::protobuf::int64 banker_score_;
  ::google::protobuf::int64 banker_buyin_score_;
  ::google::protobuf::uint32 banker_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_baccarat_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_baccarat_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_baccarat_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_baccarat_game_info_free_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_baccarat_game_info_play_rep : public ::google::protobuf::Message {
 public:
  msg_baccarat_game_info_play_rep();
  virtual ~msg_baccarat_game_info_play_rep();

  msg_baccarat_game_info_play_rep(const msg_baccarat_game_info_play_rep& from);

  inline msg_baccarat_game_info_play_rep& operator=(const msg_baccarat_game_info_play_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_baccarat_game_info_play_rep& default_instance();

  void Swap(msg_baccarat_game_info_play_rep* other);

  // implements Message ----------------------------------------------

  msg_baccarat_game_info_play_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_baccarat_game_info_play_rep& from);
  void MergeFrom(const msg_baccarat_game_info_play_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 all_jetton_score = 1;
  inline int all_jetton_score_size() const;
  inline void clear_all_jetton_score();
  static const int kAllJettonScoreFieldNumber = 1;
  inline ::google::protobuf::int64 all_jetton_score(int index) const;
  inline void set_all_jetton_score(int index, ::google::protobuf::int64 value);
  inline void add_all_jetton_score(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      all_jetton_score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_all_jetton_score();

  // repeated .net.msg_cards table_cards = 2;
  inline int table_cards_size() const;
  inline void clear_table_cards();
  static const int kTableCardsFieldNumber = 2;
  inline const ::net::msg_cards& table_cards(int index) const;
  inline ::net::msg_cards* mutable_table_cards(int index);
  inline ::net::msg_cards* add_table_cards();
  inline const ::google::protobuf::RepeatedPtrField< ::net::msg_cards >&
      table_cards() const;
  inline ::google::protobuf::RepeatedPtrField< ::net::msg_cards >*
      mutable_table_cards();

  // optional uint32 banker_id = 3;
  inline bool has_banker_id() const;
  inline void clear_banker_id();
  static const int kBankerIdFieldNumber = 3;
  inline ::google::protobuf::uint32 banker_id() const;
  inline void set_banker_id(::google::protobuf::uint32 value);

  // optional uint32 banker_time = 4;
  inline bool has_banker_time() const;
  inline void clear_banker_time();
  static const int kBankerTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 banker_time() const;
  inline void set_banker_time(::google::protobuf::uint32 value);

  // optional int64 banker_win_score = 5;
  inline bool has_banker_win_score() const;
  inline void clear_banker_win_score();
  static const int kBankerWinScoreFieldNumber = 5;
  inline ::google::protobuf::int64 banker_win_score() const;
  inline void set_banker_win_score(::google::protobuf::int64 value);

  // optional int64 banker_score = 6;
  inline bool has_banker_score() const;
  inline void clear_banker_score();
  static const int kBankerScoreFieldNumber = 6;
  inline ::google::protobuf::int64 banker_score() const;
  inline void set_banker_score(::google::protobuf::int64 value);

  // optional uint32 time_leave = 7;
  inline bool has_time_leave() const;
  inline void clear_time_leave();
  static const int kTimeLeaveFieldNumber = 7;
  inline ::google::protobuf::uint32 time_leave() const;
  inline void set_time_leave(::google::protobuf::uint32 value);

  // optional uint32 game_status = 8;
  inline bool has_game_status() const;
  inline void clear_game_status();
  static const int kGameStatusFieldNumber = 8;
  inline ::google::protobuf::uint32 game_status() const;
  inline void set_game_status(::google::protobuf::uint32 value);

  // repeated int64 self_jetton_score = 9;
  inline int self_jetton_score_size() const;
  inline void clear_self_jetton_score();
  static const int kSelfJettonScoreFieldNumber = 9;
  inline ::google::protobuf::int64 self_jetton_score(int index) const;
  inline void set_self_jetton_score(int index, ::google::protobuf::int64 value);
  inline void add_self_jetton_score(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      self_jetton_score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_self_jetton_score();

  // optional int64 banker_buyin_score = 10;
  inline bool has_banker_buyin_score() const;
  inline void clear_banker_buyin_score();
  static const int kBankerBuyinScoreFieldNumber = 10;
  inline ::google::protobuf::int64 banker_buyin_score() const;
  inline void set_banker_buyin_score(::google::protobuf::int64 value);

  // optional uint32 need_leave_banker = 11;
  inline bool has_need_leave_banker() const;
  inline void clear_need_leave_banker();
  static const int kNeedLeaveBankerFieldNumber = 11;
  inline ::google::protobuf::uint32 need_leave_banker() const;
  inline void set_need_leave_banker(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_baccarat_game_info_play_rep)
 private:
  inline void set_has_banker_id();
  inline void clear_has_banker_id();
  inline void set_has_banker_time();
  inline void clear_has_banker_time();
  inline void set_has_banker_win_score();
  inline void clear_has_banker_win_score();
  inline void set_has_banker_score();
  inline void clear_has_banker_score();
  inline void set_has_time_leave();
  inline void clear_has_time_leave();
  inline void set_has_game_status();
  inline void clear_has_game_status();
  inline void set_has_banker_buyin_score();
  inline void clear_has_banker_buyin_score();
  inline void set_has_need_leave_banker();
  inline void clear_has_need_leave_banker();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > all_jetton_score_;
  ::google::protobuf::RepeatedPtrField< ::net::msg_cards > table_cards_;
  ::google::protobuf::uint32 banker_id_;
  ::google::protobuf::uint32 banker_time_;
  ::google::protobuf::int64 banker_win_score_;
  ::google::protobuf::int64 banker_score_;
  ::google::protobuf::uint32 time_leave_;
  ::google::protobuf::uint32 game_status_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > self_jetton_score_;
  ::google::protobuf::int64 banker_buyin_score_;
  ::google::protobuf::uint32 need_leave_banker_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_baccarat_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_baccarat_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_baccarat_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_baccarat_game_info_play_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_baccarat_start_rep : public ::google::protobuf::Message {
 public:
  msg_baccarat_start_rep();
  virtual ~msg_baccarat_start_rep();

  msg_baccarat_start_rep(const msg_baccarat_start_rep& from);

  inline msg_baccarat_start_rep& operator=(const msg_baccarat_start_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_baccarat_start_rep& default_instance();

  void Swap(msg_baccarat_start_rep* other);

  // implements Message ----------------------------------------------

  msg_baccarat_start_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_baccarat_start_rep& from);
  void MergeFrom(const msg_baccarat_start_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 banker_id = 1;
  inline bool has_banker_id() const;
  inline void clear_banker_id();
  static const int kBankerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 banker_id() const;
  inline void set_banker_id(::google::protobuf::uint32 value);

  // optional int64 banker_score = 2;
  inline bool has_banker_score() const;
  inline void clear_banker_score();
  static const int kBankerScoreFieldNumber = 2;
  inline ::google::protobuf::int64 banker_score() const;
  inline void set_banker_score(::google::protobuf::int64 value);

  // optional uint32 time_leave = 3;
  inline bool has_time_leave() const;
  inline void clear_time_leave();
  static const int kTimeLeaveFieldNumber = 3;
  inline ::google::protobuf::uint32 time_leave() const;
  inline void set_time_leave(::google::protobuf::uint32 value);

  // optional int64 banker_buyin_score = 4;
  inline bool has_banker_buyin_score() const;
  inline void clear_banker_buyin_score();
  static const int kBankerBuyinScoreFieldNumber = 4;
  inline ::google::protobuf::int64 banker_buyin_score() const;
  inline void set_banker_buyin_score(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:net.msg_baccarat_start_rep)
 private:
  inline void set_has_banker_id();
  inline void clear_has_banker_id();
  inline void set_has_banker_score();
  inline void clear_has_banker_score();
  inline void set_has_time_leave();
  inline void clear_has_time_leave();
  inline void set_has_banker_buyin_score();
  inline void clear_has_banker_buyin_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 banker_score_;
  ::google::protobuf::uint32 banker_id_;
  ::google::protobuf::uint32 time_leave_;
  ::google::protobuf::int64 banker_buyin_score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_baccarat_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_baccarat_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_baccarat_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_baccarat_start_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_baccarat_place_jetton_req : public ::google::protobuf::Message {
 public:
  msg_baccarat_place_jetton_req();
  virtual ~msg_baccarat_place_jetton_req();

  msg_baccarat_place_jetton_req(const msg_baccarat_place_jetton_req& from);

  inline msg_baccarat_place_jetton_req& operator=(const msg_baccarat_place_jetton_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_baccarat_place_jetton_req& default_instance();

  void Swap(msg_baccarat_place_jetton_req* other);

  // implements Message ----------------------------------------------

  msg_baccarat_place_jetton_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_baccarat_place_jetton_req& from);
  void MergeFrom(const msg_baccarat_place_jetton_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 jetton_area = 1;
  inline bool has_jetton_area() const;
  inline void clear_jetton_area();
  static const int kJettonAreaFieldNumber = 1;
  inline ::google::protobuf::uint32 jetton_area() const;
  inline void set_jetton_area(::google::protobuf::uint32 value);

  // optional int64 jetton_score = 2;
  inline bool has_jetton_score() const;
  inline void clear_jetton_score();
  static const int kJettonScoreFieldNumber = 2;
  inline ::google::protobuf::int64 jetton_score() const;
  inline void set_jetton_score(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:net.msg_baccarat_place_jetton_req)
 private:
  inline void set_has_jetton_area();
  inline void clear_has_jetton_area();
  inline void set_has_jetton_score();
  inline void clear_has_jetton_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 jetton_score_;
  ::google::protobuf::uint32 jetton_area_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_baccarat_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_baccarat_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_baccarat_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_baccarat_place_jetton_req* default_instance_;
};
// -------------------------------------------------------------------

class msg_baccarat_place_jetton_rep : public ::google::protobuf::Message {
 public:
  msg_baccarat_place_jetton_rep();
  virtual ~msg_baccarat_place_jetton_rep();

  msg_baccarat_place_jetton_rep(const msg_baccarat_place_jetton_rep& from);

  inline msg_baccarat_place_jetton_rep& operator=(const msg_baccarat_place_jetton_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_baccarat_place_jetton_rep& default_instance();

  void Swap(msg_baccarat_place_jetton_rep* other);

  // implements Message ----------------------------------------------

  msg_baccarat_place_jetton_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_baccarat_place_jetton_rep& from);
  void MergeFrom(const msg_baccarat_place_jetton_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 jetton_area = 1;
  inline bool has_jetton_area() const;
  inline void clear_jetton_area();
  static const int kJettonAreaFieldNumber = 1;
  inline ::google::protobuf::uint32 jetton_area() const;
  inline void set_jetton_area(::google::protobuf::uint32 value);

  // optional int64 jetton_score = 2;
  inline bool has_jetton_score() const;
  inline void clear_jetton_score();
  static const int kJettonScoreFieldNumber = 2;
  inline ::google::protobuf::int64 jetton_score() const;
  inline void set_jetton_score(::google::protobuf::int64 value);

  // optional uint32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_baccarat_place_jetton_rep)
 private:
  inline void set_has_jetton_area();
  inline void clear_has_jetton_area();
  inline void set_has_jetton_score();
  inline void clear_has_jetton_score();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 jetton_score_;
  ::google::protobuf::uint32 jetton_area_;
  ::google::protobuf::uint32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_baccarat_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_baccarat_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_baccarat_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_baccarat_place_jetton_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_baccarat_place_jetton_broadcast : public ::google::protobuf::Message {
 public:
  msg_baccarat_place_jetton_broadcast();
  virtual ~msg_baccarat_place_jetton_broadcast();

  msg_baccarat_place_jetton_broadcast(const msg_baccarat_place_jetton_broadcast& from);

  inline msg_baccarat_place_jetton_broadcast& operator=(const msg_baccarat_place_jetton_broadcast& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_baccarat_place_jetton_broadcast& default_instance();

  void Swap(msg_baccarat_place_jetton_broadcast* other);

  // implements Message ----------------------------------------------

  msg_baccarat_place_jetton_broadcast* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_baccarat_place_jetton_broadcast& from);
  void MergeFrom(const msg_baccarat_place_jetton_broadcast& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 jetton_area = 2;
  inline bool has_jetton_area() const;
  inline void clear_jetton_area();
  static const int kJettonAreaFieldNumber = 2;
  inline ::google::protobuf::uint32 jetton_area() const;
  inline void set_jetton_area(::google::protobuf::uint32 value);

  // optional int64 jetton_score = 3;
  inline bool has_jetton_score() const;
  inline void clear_jetton_score();
  static const int kJettonScoreFieldNumber = 3;
  inline ::google::protobuf::int64 jetton_score() const;
  inline void set_jetton_score(::google::protobuf::int64 value);

  // optional int64 total_jetton_score = 4;
  inline bool has_total_jetton_score() const;
  inline void clear_total_jetton_score();
  static const int kTotalJettonScoreFieldNumber = 4;
  inline ::google::protobuf::int64 total_jetton_score() const;
  inline void set_total_jetton_score(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:net.msg_baccarat_place_jetton_broadcast)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_jetton_area();
  inline void clear_has_jetton_area();
  inline void set_has_jetton_score();
  inline void clear_has_jetton_score();
  inline void set_has_total_jetton_score();
  inline void clear_has_total_jetton_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 jetton_area_;
  ::google::protobuf::int64 jetton_score_;
  ::google::protobuf::int64 total_jetton_score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_baccarat_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_baccarat_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_baccarat_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_baccarat_place_jetton_broadcast* default_instance_;
};
// -------------------------------------------------------------------

class msg_baccarat_game_end : public ::google::protobuf::Message {
 public:
  msg_baccarat_game_end();
  virtual ~msg_baccarat_game_end();

  msg_baccarat_game_end(const msg_baccarat_game_end& from);

  inline msg_baccarat_game_end& operator=(const msg_baccarat_game_end& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_baccarat_game_end& default_instance();

  void Swap(msg_baccarat_game_end* other);

  // implements Message ----------------------------------------------

  msg_baccarat_game_end* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_baccarat_game_end& from);
  void MergeFrom(const msg_baccarat_game_end& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 time_leave = 1;
  inline bool has_time_leave() const;
  inline void clear_time_leave();
  static const int kTimeLeaveFieldNumber = 1;
  inline ::google::protobuf::uint32 time_leave() const;
  inline void set_time_leave(::google::protobuf::uint32 value);

  // repeated .net.msg_cards table_cards = 2;
  inline int table_cards_size() const;
  inline void clear_table_cards();
  static const int kTableCardsFieldNumber = 2;
  inline const ::net::msg_cards& table_cards(int index) const;
  inline ::net::msg_cards* mutable_table_cards(int index);
  inline ::net::msg_cards* add_table_cards();
  inline const ::google::protobuf::RepeatedPtrField< ::net::msg_cards >&
      table_cards() const;
  inline ::google::protobuf::RepeatedPtrField< ::net::msg_cards >*
      mutable_table_cards();

  // repeated uint32 card_types = 3;
  inline int card_types_size() const;
  inline void clear_card_types();
  static const int kCardTypesFieldNumber = 3;
  inline ::google::protobuf::uint32 card_types(int index) const;
  inline void set_card_types(int index, ::google::protobuf::uint32 value);
  inline void add_card_types(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      card_types() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_card_types();

  // optional int64 banker_win_score = 4;
  inline bool has_banker_win_score() const;
  inline void clear_banker_win_score();
  static const int kBankerWinScoreFieldNumber = 4;
  inline ::google::protobuf::int64 banker_win_score() const;
  inline void set_banker_win_score(::google::protobuf::int64 value);

  // optional int64 banker_total_score = 5;
  inline bool has_banker_total_score() const;
  inline void clear_banker_total_score();
  static const int kBankerTotalScoreFieldNumber = 5;
  inline ::google::protobuf::int64 banker_total_score() const;
  inline void set_banker_total_score(::google::protobuf::int64 value);

  // optional uint32 banker_time = 6;
  inline bool has_banker_time() const;
  inline void clear_banker_time();
  static const int kBankerTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 banker_time() const;
  inline void set_banker_time(::google::protobuf::uint32 value);

  // optional int64 user_score = 7;
  inline bool has_user_score() const;
  inline void clear_user_score();
  static const int kUserScoreFieldNumber = 7;
  inline ::google::protobuf::int64 user_score() const;
  inline void set_user_score(::google::protobuf::int64 value);

  // repeated int64 player_score = 8;
  inline int player_score_size() const;
  inline void clear_player_score();
  static const int kPlayerScoreFieldNumber = 8;
  inline ::google::protobuf::int64 player_score(int index) const;
  inline void set_player_score(int index, ::google::protobuf::int64 value);
  inline void add_player_score(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      player_score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_player_score();

  // repeated uint32 win_types = 9;
  inline int win_types_size() const;
  inline void clear_win_types();
  static const int kWinTypesFieldNumber = 9;
  inline ::google::protobuf::uint32 win_types(int index) const;
  inline void set_win_types(int index, ::google::protobuf::uint32 value);
  inline void add_win_types(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      win_types() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_win_types();

  // optional uint32 remain_card = 10;
  inline bool has_remain_card() const;
  inline void clear_remain_card();
  static const int kRemainCardFieldNumber = 10;
  inline ::google::protobuf::uint32 remain_card() const;
  inline void set_remain_card(::google::protobuf::uint32 value);

  // optional uint32 settle_accounts_type = 11;
  inline bool has_settle_accounts_type() const;
  inline void clear_settle_accounts_type();
  static const int kSettleAccountsTypeFieldNumber = 11;
  inline ::google::protobuf::uint32 settle_accounts_type() const;
  inline void set_settle_accounts_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_baccarat_game_end)
 private:
  inline void set_has_time_leave();
  inline void clear_has_time_leave();
  inline void set_has_banker_win_score();
  inline void clear_has_banker_win_score();
  inline void set_has_banker_total_score();
  inline void clear_has_banker_total_score();
  inline void set_has_banker_time();
  inline void clear_has_banker_time();
  inline void set_has_user_score();
  inline void clear_has_user_score();
  inline void set_has_remain_card();
  inline void clear_has_remain_card();
  inline void set_has_settle_accounts_type();
  inline void clear_has_settle_accounts_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::net::msg_cards > table_cards_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > card_types_;
  ::google::protobuf::uint32 time_leave_;
  ::google::protobuf::uint32 banker_time_;
  ::google::protobuf::int64 banker_win_score_;
  ::google::protobuf::int64 banker_total_score_;
  ::google::protobuf::int64 user_score_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > player_score_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > win_types_;
  ::google::protobuf::uint32 remain_card_;
  ::google::protobuf::uint32 settle_accounts_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_baccarat_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_baccarat_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_baccarat_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_baccarat_game_end* default_instance_;
};
// -------------------------------------------------------------------

class msg_baccarat_apply_banker : public ::google::protobuf::Message {
 public:
  msg_baccarat_apply_banker();
  virtual ~msg_baccarat_apply_banker();

  msg_baccarat_apply_banker(const msg_baccarat_apply_banker& from);

  inline msg_baccarat_apply_banker& operator=(const msg_baccarat_apply_banker& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_baccarat_apply_banker& default_instance();

  void Swap(msg_baccarat_apply_banker* other);

  // implements Message ----------------------------------------------

  msg_baccarat_apply_banker* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_baccarat_apply_banker& from);
  void MergeFrom(const msg_baccarat_apply_banker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 apply_oper = 1;
  inline bool has_apply_oper() const;
  inline void clear_apply_oper();
  static const int kApplyOperFieldNumber = 1;
  inline ::google::protobuf::uint32 apply_oper() const;
  inline void set_apply_oper(::google::protobuf::uint32 value);

  // optional int64 apply_score = 2;
  inline bool has_apply_score() const;
  inline void clear_apply_score();
  static const int kApplyScoreFieldNumber = 2;
  inline ::google::protobuf::int64 apply_score() const;
  inline void set_apply_score(::google::protobuf::int64 value);

  // optional uint32 auto_addscore = 3;
  inline bool has_auto_addscore() const;
  inline void clear_auto_addscore();
  static const int kAutoAddscoreFieldNumber = 3;
  inline ::google::protobuf::uint32 auto_addscore() const;
  inline void set_auto_addscore(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_baccarat_apply_banker)
 private:
  inline void set_has_apply_oper();
  inline void clear_has_apply_oper();
  inline void set_has_apply_score();
  inline void clear_has_apply_score();
  inline void set_has_auto_addscore();
  inline void clear_has_auto_addscore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 apply_score_;
  ::google::protobuf::uint32 apply_oper_;
  ::google::protobuf::uint32 auto_addscore_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_baccarat_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_baccarat_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_baccarat_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_baccarat_apply_banker* default_instance_;
};
// -------------------------------------------------------------------

class msg_baccarat_apply_banker_rep : public ::google::protobuf::Message {
 public:
  msg_baccarat_apply_banker_rep();
  virtual ~msg_baccarat_apply_banker_rep();

  msg_baccarat_apply_banker_rep(const msg_baccarat_apply_banker_rep& from);

  inline msg_baccarat_apply_banker_rep& operator=(const msg_baccarat_apply_banker_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_baccarat_apply_banker_rep& default_instance();

  void Swap(msg_baccarat_apply_banker_rep* other);

  // implements Message ----------------------------------------------

  msg_baccarat_apply_banker_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_baccarat_apply_banker_rep& from);
  void MergeFrom(const msg_baccarat_apply_banker_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 apply_oper = 1;
  inline bool has_apply_oper() const;
  inline void clear_apply_oper();
  static const int kApplyOperFieldNumber = 1;
  inline ::google::protobuf::uint32 apply_oper() const;
  inline void set_apply_oper(::google::protobuf::uint32 value);

  // optional uint32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // optional int64 buyin_score = 3;
  inline bool has_buyin_score() const;
  inline void clear_buyin_score();
  static const int kBuyinScoreFieldNumber = 3;
  inline ::google::protobuf::int64 buyin_score() const;
  inline void set_buyin_score(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:net.msg_baccarat_apply_banker_rep)
 private:
  inline void set_has_apply_oper();
  inline void clear_has_apply_oper();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_buyin_score();
  inline void clear_has_buyin_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 apply_oper_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::int64 buyin_score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_baccarat_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_baccarat_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_baccarat_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_baccarat_apply_banker_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_baccarat_change_banker : public ::google::protobuf::Message {
 public:
  msg_baccarat_change_banker();
  virtual ~msg_baccarat_change_banker();

  msg_baccarat_change_banker(const msg_baccarat_change_banker& from);

  inline msg_baccarat_change_banker& operator=(const msg_baccarat_change_banker& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_baccarat_change_banker& default_instance();

  void Swap(msg_baccarat_change_banker* other);

  // implements Message ----------------------------------------------

  msg_baccarat_change_banker* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_baccarat_change_banker& from);
  void MergeFrom(const msg_baccarat_change_banker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 banker_user = 1;
  inline bool has_banker_user() const;
  inline void clear_banker_user();
  static const int kBankerUserFieldNumber = 1;
  inline ::google::protobuf::uint32 banker_user() const;
  inline void set_banker_user(::google::protobuf::uint32 value);

  // optional int64 banker_score = 2;
  inline bool has_banker_score() const;
  inline void clear_banker_score();
  static const int kBankerScoreFieldNumber = 2;
  inline ::google::protobuf::int64 banker_score() const;
  inline void set_banker_score(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:net.msg_baccarat_change_banker)
 private:
  inline void set_has_banker_user();
  inline void clear_has_banker_user();
  inline void set_has_banker_score();
  inline void clear_has_banker_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 banker_score_;
  ::google::protobuf::uint32 banker_user_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_baccarat_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_baccarat_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_baccarat_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_baccarat_change_banker* default_instance_;
};
// -------------------------------------------------------------------

class msg_baccarat_change_user_score : public ::google::protobuf::Message {
 public:
  msg_baccarat_change_user_score();
  virtual ~msg_baccarat_change_user_score();

  msg_baccarat_change_user_score(const msg_baccarat_change_user_score& from);

  inline msg_baccarat_change_user_score& operator=(const msg_baccarat_change_user_score& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_baccarat_change_user_score& default_instance();

  void Swap(msg_baccarat_change_user_score* other);

  // implements Message ----------------------------------------------

  msg_baccarat_change_user_score* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_baccarat_change_user_score& from);
  void MergeFrom(const msg_baccarat_change_user_score& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 chair_id = 1;
  inline bool has_chair_id() const;
  inline void clear_chair_id();
  static const int kChairIdFieldNumber = 1;
  inline ::google::protobuf::uint32 chair_id() const;
  inline void set_chair_id(::google::protobuf::uint32 value);

  // optional int64 score = 2;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  inline ::google::protobuf::int64 score() const;
  inline void set_score(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:net.msg_baccarat_change_user_score)
 private:
  inline void set_has_chair_id();
  inline void clear_has_chair_id();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 score_;
  ::google::protobuf::uint32 chair_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_baccarat_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_baccarat_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_baccarat_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_baccarat_change_user_score* default_instance_;
};
// -------------------------------------------------------------------

class msg_baccarat_apply_list : public ::google::protobuf::Message {
 public:
  msg_baccarat_apply_list();
  virtual ~msg_baccarat_apply_list();

  msg_baccarat_apply_list(const msg_baccarat_apply_list& from);

  inline msg_baccarat_apply_list& operator=(const msg_baccarat_apply_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_baccarat_apply_list& default_instance();

  void Swap(msg_baccarat_apply_list* other);

  // implements Message ----------------------------------------------

  msg_baccarat_apply_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_baccarat_apply_list& from);
  void MergeFrom(const msg_baccarat_apply_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 player_ids = 1;
  inline int player_ids_size() const;
  inline void clear_player_ids();
  static const int kPlayerIdsFieldNumber = 1;
  inline ::google::protobuf::uint32 player_ids(int index) const;
  inline void set_player_ids(int index, ::google::protobuf::uint32 value);
  inline void add_player_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      player_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_player_ids();

  // repeated int64 apply_score = 2;
  inline int apply_score_size() const;
  inline void clear_apply_score();
  static const int kApplyScoreFieldNumber = 2;
  inline ::google::protobuf::int64 apply_score(int index) const;
  inline void set_apply_score(int index, ::google::protobuf::int64 value);
  inline void add_apply_score(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      apply_score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_apply_score();

  // @@protoc_insertion_point(class_scope:net.msg_baccarat_apply_list)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > player_ids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > apply_score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_baccarat_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_baccarat_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_baccarat_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_baccarat_apply_list* default_instance_;
};
// -------------------------------------------------------------------

class msg_baccarat_jump_apply_queue_req : public ::google::protobuf::Message {
 public:
  msg_baccarat_jump_apply_queue_req();
  virtual ~msg_baccarat_jump_apply_queue_req();

  msg_baccarat_jump_apply_queue_req(const msg_baccarat_jump_apply_queue_req& from);

  inline msg_baccarat_jump_apply_queue_req& operator=(const msg_baccarat_jump_apply_queue_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_baccarat_jump_apply_queue_req& default_instance();

  void Swap(msg_baccarat_jump_apply_queue_req* other);

  // implements Message ----------------------------------------------

  msg_baccarat_jump_apply_queue_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_baccarat_jump_apply_queue_req& from);
  void MergeFrom(const msg_baccarat_jump_apply_queue_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 jump_pos = 1;
  inline bool has_jump_pos() const;
  inline void clear_jump_pos();
  static const int kJumpPosFieldNumber = 1;
  inline ::google::protobuf::uint32 jump_pos() const;
  inline void set_jump_pos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_baccarat_jump_apply_queue_req)
 private:
  inline void set_has_jump_pos();
  inline void clear_has_jump_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 jump_pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_baccarat_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_baccarat_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_baccarat_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_baccarat_jump_apply_queue_req* default_instance_;
};
// -------------------------------------------------------------------

class msg_baccarat_jump_apply_queue_rep : public ::google::protobuf::Message {
 public:
  msg_baccarat_jump_apply_queue_rep();
  virtual ~msg_baccarat_jump_apply_queue_rep();

  msg_baccarat_jump_apply_queue_rep(const msg_baccarat_jump_apply_queue_rep& from);

  inline msg_baccarat_jump_apply_queue_rep& operator=(const msg_baccarat_jump_apply_queue_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_baccarat_jump_apply_queue_rep& default_instance();

  void Swap(msg_baccarat_jump_apply_queue_rep* other);

  // implements Message ----------------------------------------------

  msg_baccarat_jump_apply_queue_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_baccarat_jump_apply_queue_rep& from);
  void MergeFrom(const msg_baccarat_jump_apply_queue_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_baccarat_jump_apply_queue_rep)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_baccarat_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_baccarat_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_baccarat_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_baccarat_jump_apply_queue_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_baccarat_banker_calc_rep : public ::google::protobuf::Message {
 public:
  msg_baccarat_banker_calc_rep();
  virtual ~msg_baccarat_banker_calc_rep();

  msg_baccarat_banker_calc_rep(const msg_baccarat_banker_calc_rep& from);

  inline msg_baccarat_banker_calc_rep& operator=(const msg_baccarat_banker_calc_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_baccarat_banker_calc_rep& default_instance();

  void Swap(msg_baccarat_banker_calc_rep* other);

  // implements Message ----------------------------------------------

  msg_baccarat_banker_calc_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_baccarat_banker_calc_rep& from);
  void MergeFrom(const msg_baccarat_banker_calc_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 banker_time = 1;
  inline bool has_banker_time() const;
  inline void clear_banker_time();
  static const int kBankerTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 banker_time() const;
  inline void set_banker_time(::google::protobuf::uint32 value);

  // optional uint32 win_count = 2;
  inline bool has_win_count() const;
  inline void clear_win_count();
  static const int kWinCountFieldNumber = 2;
  inline ::google::protobuf::uint32 win_count() const;
  inline void set_win_count(::google::protobuf::uint32 value);

  // optional int64 buyin_score = 3;
  inline bool has_buyin_score() const;
  inline void clear_buyin_score();
  static const int kBuyinScoreFieldNumber = 3;
  inline ::google::protobuf::int64 buyin_score() const;
  inline void set_buyin_score(::google::protobuf::int64 value);

  // optional int64 win_score = 4;
  inline bool has_win_score() const;
  inline void clear_win_score();
  static const int kWinScoreFieldNumber = 4;
  inline ::google::protobuf::int64 win_score() const;
  inline void set_win_score(::google::protobuf::int64 value);

  // optional int64 win_max = 5;
  inline bool has_win_max() const;
  inline void clear_win_max();
  static const int kWinMaxFieldNumber = 5;
  inline ::google::protobuf::int64 win_max() const;
  inline void set_win_max(::google::protobuf::int64 value);

  // optional int64 win_min = 6;
  inline bool has_win_min() const;
  inline void clear_win_min();
  static const int kWinMinFieldNumber = 6;
  inline ::google::protobuf::int64 win_min() const;
  inline void set_win_min(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:net.msg_baccarat_banker_calc_rep)
 private:
  inline void set_has_banker_time();
  inline void clear_has_banker_time();
  inline void set_has_win_count();
  inline void clear_has_win_count();
  inline void set_has_buyin_score();
  inline void clear_has_buyin_score();
  inline void set_has_win_score();
  inline void clear_has_win_score();
  inline void set_has_win_max();
  inline void clear_has_win_max();
  inline void set_has_win_min();
  inline void clear_has_win_min();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 banker_time_;
  ::google::protobuf::uint32 win_count_;
  ::google::protobuf::int64 buyin_score_;
  ::google::protobuf::int64 win_score_;
  ::google::protobuf::int64 win_max_;
  ::google::protobuf::int64 win_min_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_baccarat_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_baccarat_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_baccarat_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_baccarat_banker_calc_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_baccarat_add_bankerscore_rep : public ::google::protobuf::Message {
 public:
  msg_baccarat_add_bankerscore_rep();
  virtual ~msg_baccarat_add_bankerscore_rep();

  msg_baccarat_add_bankerscore_rep(const msg_baccarat_add_bankerscore_rep& from);

  inline msg_baccarat_add_bankerscore_rep& operator=(const msg_baccarat_add_bankerscore_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_baccarat_add_bankerscore_rep& default_instance();

  void Swap(msg_baccarat_add_bankerscore_rep* other);

  // implements Message ----------------------------------------------

  msg_baccarat_add_bankerscore_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_baccarat_add_bankerscore_rep& from);
  void MergeFrom(const msg_baccarat_add_bankerscore_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 buyin_score = 1;
  inline bool has_buyin_score() const;
  inline void clear_buyin_score();
  static const int kBuyinScoreFieldNumber = 1;
  inline ::google::protobuf::int64 buyin_score() const;
  inline void set_buyin_score(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:net.msg_baccarat_add_bankerscore_rep)
 private:
  inline void set_has_buyin_score();
  inline void clear_has_buyin_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 buyin_score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_baccarat_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_baccarat_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_baccarat_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_baccarat_add_bankerscore_rep* default_instance_;
};
// -------------------------------------------------------------------

class baccarat_play_log : public ::google::protobuf::Message {
 public:
  baccarat_play_log();
  virtual ~baccarat_play_log();

  baccarat_play_log(const baccarat_play_log& from);

  inline baccarat_play_log& operator=(const baccarat_play_log& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const baccarat_play_log& default_instance();

  void Swap(baccarat_play_log* other);

  // implements Message ----------------------------------------------

  baccarat_play_log* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const baccarat_play_log& from);
  void MergeFrom(const baccarat_play_log& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 player_pair = 1;
  inline bool has_player_pair() const;
  inline void clear_player_pair();
  static const int kPlayerPairFieldNumber = 1;
  inline ::google::protobuf::uint32 player_pair() const;
  inline void set_player_pair(::google::protobuf::uint32 value);

  // optional uint32 banker_pair = 2;
  inline bool has_banker_pair() const;
  inline void clear_banker_pair();
  static const int kBankerPairFieldNumber = 2;
  inline ::google::protobuf::uint32 banker_pair() const;
  inline void set_banker_pair(::google::protobuf::uint32 value);

  // optional uint32 player_count = 3;
  inline bool has_player_count() const;
  inline void clear_player_count();
  static const int kPlayerCountFieldNumber = 3;
  inline ::google::protobuf::uint32 player_count() const;
  inline void set_player_count(::google::protobuf::uint32 value);

  // optional uint32 banker_count = 4;
  inline bool has_banker_count() const;
  inline void clear_banker_count();
  static const int kBankerCountFieldNumber = 4;
  inline ::google::protobuf::uint32 banker_count() const;
  inline void set_banker_count(::google::protobuf::uint32 value);

  // optional uint32 is_small = 5;
  inline bool has_is_small() const;
  inline void clear_is_small();
  static const int kIsSmallFieldNumber = 5;
  inline ::google::protobuf::uint32 is_small() const;
  inline void set_is_small(::google::protobuf::uint32 value);

  // optional uint32 is_super_six = 6;
  inline bool has_is_super_six() const;
  inline void clear_is_super_six();
  static const int kIsSuperSixFieldNumber = 6;
  inline ::google::protobuf::uint32 is_super_six() const;
  inline void set_is_super_six(::google::protobuf::uint32 value);

  // optional uint32 index = 7;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 7;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.baccarat_play_log)
 private:
  inline void set_has_player_pair();
  inline void clear_has_player_pair();
  inline void set_has_banker_pair();
  inline void clear_has_banker_pair();
  inline void set_has_player_count();
  inline void clear_has_player_count();
  inline void set_has_banker_count();
  inline void clear_has_banker_count();
  inline void set_has_is_small();
  inline void clear_has_is_small();
  inline void set_has_is_super_six();
  inline void clear_has_is_super_six();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 player_pair_;
  ::google::protobuf::uint32 banker_pair_;
  ::google::protobuf::uint32 player_count_;
  ::google::protobuf::uint32 banker_count_;
  ::google::protobuf::uint32 is_small_;
  ::google::protobuf::uint32 is_super_six_;
  ::google::protobuf::uint32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_baccarat_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_baccarat_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_baccarat_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static baccarat_play_log* default_instance_;
};
// -------------------------------------------------------------------

class msg_baccarat_play_log_rep : public ::google::protobuf::Message {
 public:
  msg_baccarat_play_log_rep();
  virtual ~msg_baccarat_play_log_rep();

  msg_baccarat_play_log_rep(const msg_baccarat_play_log_rep& from);

  inline msg_baccarat_play_log_rep& operator=(const msg_baccarat_play_log_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_baccarat_play_log_rep& default_instance();

  void Swap(msg_baccarat_play_log_rep* other);

  // implements Message ----------------------------------------------

  msg_baccarat_play_log_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_baccarat_play_log_rep& from);
  void MergeFrom(const msg_baccarat_play_log_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .net.baccarat_play_log logs = 1;
  inline int logs_size() const;
  inline void clear_logs();
  static const int kLogsFieldNumber = 1;
  inline const ::net::baccarat_play_log& logs(int index) const;
  inline ::net::baccarat_play_log* mutable_logs(int index);
  inline ::net::baccarat_play_log* add_logs();
  inline const ::google::protobuf::RepeatedPtrField< ::net::baccarat_play_log >&
      logs() const;
  inline ::google::protobuf::RepeatedPtrField< ::net::baccarat_play_log >*
      mutable_logs();

  // @@protoc_insertion_point(class_scope:net.msg_baccarat_play_log_rep)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::net::baccarat_play_log > logs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_baccarat_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_baccarat_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_baccarat_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_baccarat_play_log_rep* default_instance_;
};
// ===================================================================


// ===================================================================

// msg_baccarat_game_info_free_rep

// optional uint32 time_leave = 1;
inline bool msg_baccarat_game_info_free_rep::has_time_leave() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_baccarat_game_info_free_rep::set_has_time_leave() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_baccarat_game_info_free_rep::clear_has_time_leave() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_baccarat_game_info_free_rep::clear_time_leave() {
  time_leave_ = 0u;
  clear_has_time_leave();
}
inline ::google::protobuf::uint32 msg_baccarat_game_info_free_rep::time_leave() const {
  return time_leave_;
}
inline void msg_baccarat_game_info_free_rep::set_time_leave(::google::protobuf::uint32 value) {
  set_has_time_leave();
  time_leave_ = value;
}

// optional uint32 banker_id = 2;
inline bool msg_baccarat_game_info_free_rep::has_banker_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_baccarat_game_info_free_rep::set_has_banker_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_baccarat_game_info_free_rep::clear_has_banker_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_baccarat_game_info_free_rep::clear_banker_id() {
  banker_id_ = 0u;
  clear_has_banker_id();
}
inline ::google::protobuf::uint32 msg_baccarat_game_info_free_rep::banker_id() const {
  return banker_id_;
}
inline void msg_baccarat_game_info_free_rep::set_banker_id(::google::protobuf::uint32 value) {
  set_has_banker_id();
  banker_id_ = value;
}

// optional uint32 banker_time = 3;
inline bool msg_baccarat_game_info_free_rep::has_banker_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_baccarat_game_info_free_rep::set_has_banker_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_baccarat_game_info_free_rep::clear_has_banker_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_baccarat_game_info_free_rep::clear_banker_time() {
  banker_time_ = 0u;
  clear_has_banker_time();
}
inline ::google::protobuf::uint32 msg_baccarat_game_info_free_rep::banker_time() const {
  return banker_time_;
}
inline void msg_baccarat_game_info_free_rep::set_banker_time(::google::protobuf::uint32 value) {
  set_has_banker_time();
  banker_time_ = value;
}

// optional int64 banker_win_score = 4;
inline bool msg_baccarat_game_info_free_rep::has_banker_win_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_baccarat_game_info_free_rep::set_has_banker_win_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_baccarat_game_info_free_rep::clear_has_banker_win_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_baccarat_game_info_free_rep::clear_banker_win_score() {
  banker_win_score_ = GOOGLE_LONGLONG(0);
  clear_has_banker_win_score();
}
inline ::google::protobuf::int64 msg_baccarat_game_info_free_rep::banker_win_score() const {
  return banker_win_score_;
}
inline void msg_baccarat_game_info_free_rep::set_banker_win_score(::google::protobuf::int64 value) {
  set_has_banker_win_score();
  banker_win_score_ = value;
}

// optional int64 banker_score = 5;
inline bool msg_baccarat_game_info_free_rep::has_banker_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_baccarat_game_info_free_rep::set_has_banker_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_baccarat_game_info_free_rep::clear_has_banker_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_baccarat_game_info_free_rep::clear_banker_score() {
  banker_score_ = GOOGLE_LONGLONG(0);
  clear_has_banker_score();
}
inline ::google::protobuf::int64 msg_baccarat_game_info_free_rep::banker_score() const {
  return banker_score_;
}
inline void msg_baccarat_game_info_free_rep::set_banker_score(::google::protobuf::int64 value) {
  set_has_banker_score();
  banker_score_ = value;
}

// optional int64 banker_buyin_score = 6;
inline bool msg_baccarat_game_info_free_rep::has_banker_buyin_score() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_baccarat_game_info_free_rep::set_has_banker_buyin_score() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_baccarat_game_info_free_rep::clear_has_banker_buyin_score() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_baccarat_game_info_free_rep::clear_banker_buyin_score() {
  banker_buyin_score_ = GOOGLE_LONGLONG(0);
  clear_has_banker_buyin_score();
}
inline ::google::protobuf::int64 msg_baccarat_game_info_free_rep::banker_buyin_score() const {
  return banker_buyin_score_;
}
inline void msg_baccarat_game_info_free_rep::set_banker_buyin_score(::google::protobuf::int64 value) {
  set_has_banker_buyin_score();
  banker_buyin_score_ = value;
}

// -------------------------------------------------------------------

// msg_baccarat_game_info_play_rep

// repeated int64 all_jetton_score = 1;
inline int msg_baccarat_game_info_play_rep::all_jetton_score_size() const {
  return all_jetton_score_.size();
}
inline void msg_baccarat_game_info_play_rep::clear_all_jetton_score() {
  all_jetton_score_.Clear();
}
inline ::google::protobuf::int64 msg_baccarat_game_info_play_rep::all_jetton_score(int index) const {
  return all_jetton_score_.Get(index);
}
inline void msg_baccarat_game_info_play_rep::set_all_jetton_score(int index, ::google::protobuf::int64 value) {
  all_jetton_score_.Set(index, value);
}
inline void msg_baccarat_game_info_play_rep::add_all_jetton_score(::google::protobuf::int64 value) {
  all_jetton_score_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
msg_baccarat_game_info_play_rep::all_jetton_score() const {
  return all_jetton_score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
msg_baccarat_game_info_play_rep::mutable_all_jetton_score() {
  return &all_jetton_score_;
}

// repeated .net.msg_cards table_cards = 2;
inline int msg_baccarat_game_info_play_rep::table_cards_size() const {
  return table_cards_.size();
}
inline void msg_baccarat_game_info_play_rep::clear_table_cards() {
  table_cards_.Clear();
}
inline const ::net::msg_cards& msg_baccarat_game_info_play_rep::table_cards(int index) const {
  return table_cards_.Get(index);
}
inline ::net::msg_cards* msg_baccarat_game_info_play_rep::mutable_table_cards(int index) {
  return table_cards_.Mutable(index);
}
inline ::net::msg_cards* msg_baccarat_game_info_play_rep::add_table_cards() {
  return table_cards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::net::msg_cards >&
msg_baccarat_game_info_play_rep::table_cards() const {
  return table_cards_;
}
inline ::google::protobuf::RepeatedPtrField< ::net::msg_cards >*
msg_baccarat_game_info_play_rep::mutable_table_cards() {
  return &table_cards_;
}

// optional uint32 banker_id = 3;
inline bool msg_baccarat_game_info_play_rep::has_banker_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_baccarat_game_info_play_rep::set_has_banker_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_baccarat_game_info_play_rep::clear_has_banker_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_baccarat_game_info_play_rep::clear_banker_id() {
  banker_id_ = 0u;
  clear_has_banker_id();
}
inline ::google::protobuf::uint32 msg_baccarat_game_info_play_rep::banker_id() const {
  return banker_id_;
}
inline void msg_baccarat_game_info_play_rep::set_banker_id(::google::protobuf::uint32 value) {
  set_has_banker_id();
  banker_id_ = value;
}

// optional uint32 banker_time = 4;
inline bool msg_baccarat_game_info_play_rep::has_banker_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_baccarat_game_info_play_rep::set_has_banker_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_baccarat_game_info_play_rep::clear_has_banker_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_baccarat_game_info_play_rep::clear_banker_time() {
  banker_time_ = 0u;
  clear_has_banker_time();
}
inline ::google::protobuf::uint32 msg_baccarat_game_info_play_rep::banker_time() const {
  return banker_time_;
}
inline void msg_baccarat_game_info_play_rep::set_banker_time(::google::protobuf::uint32 value) {
  set_has_banker_time();
  banker_time_ = value;
}

// optional int64 banker_win_score = 5;
inline bool msg_baccarat_game_info_play_rep::has_banker_win_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_baccarat_game_info_play_rep::set_has_banker_win_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_baccarat_game_info_play_rep::clear_has_banker_win_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_baccarat_game_info_play_rep::clear_banker_win_score() {
  banker_win_score_ = GOOGLE_LONGLONG(0);
  clear_has_banker_win_score();
}
inline ::google::protobuf::int64 msg_baccarat_game_info_play_rep::banker_win_score() const {
  return banker_win_score_;
}
inline void msg_baccarat_game_info_play_rep::set_banker_win_score(::google::protobuf::int64 value) {
  set_has_banker_win_score();
  banker_win_score_ = value;
}

// optional int64 banker_score = 6;
inline bool msg_baccarat_game_info_play_rep::has_banker_score() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_baccarat_game_info_play_rep::set_has_banker_score() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_baccarat_game_info_play_rep::clear_has_banker_score() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_baccarat_game_info_play_rep::clear_banker_score() {
  banker_score_ = GOOGLE_LONGLONG(0);
  clear_has_banker_score();
}
inline ::google::protobuf::int64 msg_baccarat_game_info_play_rep::banker_score() const {
  return banker_score_;
}
inline void msg_baccarat_game_info_play_rep::set_banker_score(::google::protobuf::int64 value) {
  set_has_banker_score();
  banker_score_ = value;
}

// optional uint32 time_leave = 7;
inline bool msg_baccarat_game_info_play_rep::has_time_leave() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_baccarat_game_info_play_rep::set_has_time_leave() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_baccarat_game_info_play_rep::clear_has_time_leave() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_baccarat_game_info_play_rep::clear_time_leave() {
  time_leave_ = 0u;
  clear_has_time_leave();
}
inline ::google::protobuf::uint32 msg_baccarat_game_info_play_rep::time_leave() const {
  return time_leave_;
}
inline void msg_baccarat_game_info_play_rep::set_time_leave(::google::protobuf::uint32 value) {
  set_has_time_leave();
  time_leave_ = value;
}

// optional uint32 game_status = 8;
inline bool msg_baccarat_game_info_play_rep::has_game_status() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void msg_baccarat_game_info_play_rep::set_has_game_status() {
  _has_bits_[0] |= 0x00000080u;
}
inline void msg_baccarat_game_info_play_rep::clear_has_game_status() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void msg_baccarat_game_info_play_rep::clear_game_status() {
  game_status_ = 0u;
  clear_has_game_status();
}
inline ::google::protobuf::uint32 msg_baccarat_game_info_play_rep::game_status() const {
  return game_status_;
}
inline void msg_baccarat_game_info_play_rep::set_game_status(::google::protobuf::uint32 value) {
  set_has_game_status();
  game_status_ = value;
}

// repeated int64 self_jetton_score = 9;
inline int msg_baccarat_game_info_play_rep::self_jetton_score_size() const {
  return self_jetton_score_.size();
}
inline void msg_baccarat_game_info_play_rep::clear_self_jetton_score() {
  self_jetton_score_.Clear();
}
inline ::google::protobuf::int64 msg_baccarat_game_info_play_rep::self_jetton_score(int index) const {
  return self_jetton_score_.Get(index);
}
inline void msg_baccarat_game_info_play_rep::set_self_jetton_score(int index, ::google::protobuf::int64 value) {
  self_jetton_score_.Set(index, value);
}
inline void msg_baccarat_game_info_play_rep::add_self_jetton_score(::google::protobuf::int64 value) {
  self_jetton_score_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
msg_baccarat_game_info_play_rep::self_jetton_score() const {
  return self_jetton_score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
msg_baccarat_game_info_play_rep::mutable_self_jetton_score() {
  return &self_jetton_score_;
}

// optional int64 banker_buyin_score = 10;
inline bool msg_baccarat_game_info_play_rep::has_banker_buyin_score() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void msg_baccarat_game_info_play_rep::set_has_banker_buyin_score() {
  _has_bits_[0] |= 0x00000200u;
}
inline void msg_baccarat_game_info_play_rep::clear_has_banker_buyin_score() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void msg_baccarat_game_info_play_rep::clear_banker_buyin_score() {
  banker_buyin_score_ = GOOGLE_LONGLONG(0);
  clear_has_banker_buyin_score();
}
inline ::google::protobuf::int64 msg_baccarat_game_info_play_rep::banker_buyin_score() const {
  return banker_buyin_score_;
}
inline void msg_baccarat_game_info_play_rep::set_banker_buyin_score(::google::protobuf::int64 value) {
  set_has_banker_buyin_score();
  banker_buyin_score_ = value;
}

// optional uint32 need_leave_banker = 11;
inline bool msg_baccarat_game_info_play_rep::has_need_leave_banker() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void msg_baccarat_game_info_play_rep::set_has_need_leave_banker() {
  _has_bits_[0] |= 0x00000400u;
}
inline void msg_baccarat_game_info_play_rep::clear_has_need_leave_banker() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void msg_baccarat_game_info_play_rep::clear_need_leave_banker() {
  need_leave_banker_ = 0u;
  clear_has_need_leave_banker();
}
inline ::google::protobuf::uint32 msg_baccarat_game_info_play_rep::need_leave_banker() const {
  return need_leave_banker_;
}
inline void msg_baccarat_game_info_play_rep::set_need_leave_banker(::google::protobuf::uint32 value) {
  set_has_need_leave_banker();
  need_leave_banker_ = value;
}

// -------------------------------------------------------------------

// msg_baccarat_start_rep

// optional uint32 banker_id = 1;
inline bool msg_baccarat_start_rep::has_banker_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_baccarat_start_rep::set_has_banker_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_baccarat_start_rep::clear_has_banker_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_baccarat_start_rep::clear_banker_id() {
  banker_id_ = 0u;
  clear_has_banker_id();
}
inline ::google::protobuf::uint32 msg_baccarat_start_rep::banker_id() const {
  return banker_id_;
}
inline void msg_baccarat_start_rep::set_banker_id(::google::protobuf::uint32 value) {
  set_has_banker_id();
  banker_id_ = value;
}

// optional int64 banker_score = 2;
inline bool msg_baccarat_start_rep::has_banker_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_baccarat_start_rep::set_has_banker_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_baccarat_start_rep::clear_has_banker_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_baccarat_start_rep::clear_banker_score() {
  banker_score_ = GOOGLE_LONGLONG(0);
  clear_has_banker_score();
}
inline ::google::protobuf::int64 msg_baccarat_start_rep::banker_score() const {
  return banker_score_;
}
inline void msg_baccarat_start_rep::set_banker_score(::google::protobuf::int64 value) {
  set_has_banker_score();
  banker_score_ = value;
}

// optional uint32 time_leave = 3;
inline bool msg_baccarat_start_rep::has_time_leave() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_baccarat_start_rep::set_has_time_leave() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_baccarat_start_rep::clear_has_time_leave() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_baccarat_start_rep::clear_time_leave() {
  time_leave_ = 0u;
  clear_has_time_leave();
}
inline ::google::protobuf::uint32 msg_baccarat_start_rep::time_leave() const {
  return time_leave_;
}
inline void msg_baccarat_start_rep::set_time_leave(::google::protobuf::uint32 value) {
  set_has_time_leave();
  time_leave_ = value;
}

// optional int64 banker_buyin_score = 4;
inline bool msg_baccarat_start_rep::has_banker_buyin_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_baccarat_start_rep::set_has_banker_buyin_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_baccarat_start_rep::clear_has_banker_buyin_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_baccarat_start_rep::clear_banker_buyin_score() {
  banker_buyin_score_ = GOOGLE_LONGLONG(0);
  clear_has_banker_buyin_score();
}
inline ::google::protobuf::int64 msg_baccarat_start_rep::banker_buyin_score() const {
  return banker_buyin_score_;
}
inline void msg_baccarat_start_rep::set_banker_buyin_score(::google::protobuf::int64 value) {
  set_has_banker_buyin_score();
  banker_buyin_score_ = value;
}

// -------------------------------------------------------------------

// msg_baccarat_place_jetton_req

// optional uint32 jetton_area = 1;
inline bool msg_baccarat_place_jetton_req::has_jetton_area() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_baccarat_place_jetton_req::set_has_jetton_area() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_baccarat_place_jetton_req::clear_has_jetton_area() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_baccarat_place_jetton_req::clear_jetton_area() {
  jetton_area_ = 0u;
  clear_has_jetton_area();
}
inline ::google::protobuf::uint32 msg_baccarat_place_jetton_req::jetton_area() const {
  return jetton_area_;
}
inline void msg_baccarat_place_jetton_req::set_jetton_area(::google::protobuf::uint32 value) {
  set_has_jetton_area();
  jetton_area_ = value;
}

// optional int64 jetton_score = 2;
inline bool msg_baccarat_place_jetton_req::has_jetton_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_baccarat_place_jetton_req::set_has_jetton_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_baccarat_place_jetton_req::clear_has_jetton_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_baccarat_place_jetton_req::clear_jetton_score() {
  jetton_score_ = GOOGLE_LONGLONG(0);
  clear_has_jetton_score();
}
inline ::google::protobuf::int64 msg_baccarat_place_jetton_req::jetton_score() const {
  return jetton_score_;
}
inline void msg_baccarat_place_jetton_req::set_jetton_score(::google::protobuf::int64 value) {
  set_has_jetton_score();
  jetton_score_ = value;
}

// -------------------------------------------------------------------

// msg_baccarat_place_jetton_rep

// optional uint32 jetton_area = 1;
inline bool msg_baccarat_place_jetton_rep::has_jetton_area() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_baccarat_place_jetton_rep::set_has_jetton_area() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_baccarat_place_jetton_rep::clear_has_jetton_area() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_baccarat_place_jetton_rep::clear_jetton_area() {
  jetton_area_ = 0u;
  clear_has_jetton_area();
}
inline ::google::protobuf::uint32 msg_baccarat_place_jetton_rep::jetton_area() const {
  return jetton_area_;
}
inline void msg_baccarat_place_jetton_rep::set_jetton_area(::google::protobuf::uint32 value) {
  set_has_jetton_area();
  jetton_area_ = value;
}

// optional int64 jetton_score = 2;
inline bool msg_baccarat_place_jetton_rep::has_jetton_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_baccarat_place_jetton_rep::set_has_jetton_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_baccarat_place_jetton_rep::clear_has_jetton_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_baccarat_place_jetton_rep::clear_jetton_score() {
  jetton_score_ = GOOGLE_LONGLONG(0);
  clear_has_jetton_score();
}
inline ::google::protobuf::int64 msg_baccarat_place_jetton_rep::jetton_score() const {
  return jetton_score_;
}
inline void msg_baccarat_place_jetton_rep::set_jetton_score(::google::protobuf::int64 value) {
  set_has_jetton_score();
  jetton_score_ = value;
}

// optional uint32 result = 3;
inline bool msg_baccarat_place_jetton_rep::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_baccarat_place_jetton_rep::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_baccarat_place_jetton_rep::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_baccarat_place_jetton_rep::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 msg_baccarat_place_jetton_rep::result() const {
  return result_;
}
inline void msg_baccarat_place_jetton_rep::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// msg_baccarat_place_jetton_broadcast

// optional uint32 uid = 1;
inline bool msg_baccarat_place_jetton_broadcast::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_baccarat_place_jetton_broadcast::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_baccarat_place_jetton_broadcast::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_baccarat_place_jetton_broadcast::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 msg_baccarat_place_jetton_broadcast::uid() const {
  return uid_;
}
inline void msg_baccarat_place_jetton_broadcast::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 jetton_area = 2;
inline bool msg_baccarat_place_jetton_broadcast::has_jetton_area() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_baccarat_place_jetton_broadcast::set_has_jetton_area() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_baccarat_place_jetton_broadcast::clear_has_jetton_area() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_baccarat_place_jetton_broadcast::clear_jetton_area() {
  jetton_area_ = 0u;
  clear_has_jetton_area();
}
inline ::google::protobuf::uint32 msg_baccarat_place_jetton_broadcast::jetton_area() const {
  return jetton_area_;
}
inline void msg_baccarat_place_jetton_broadcast::set_jetton_area(::google::protobuf::uint32 value) {
  set_has_jetton_area();
  jetton_area_ = value;
}

// optional int64 jetton_score = 3;
inline bool msg_baccarat_place_jetton_broadcast::has_jetton_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_baccarat_place_jetton_broadcast::set_has_jetton_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_baccarat_place_jetton_broadcast::clear_has_jetton_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_baccarat_place_jetton_broadcast::clear_jetton_score() {
  jetton_score_ = GOOGLE_LONGLONG(0);
  clear_has_jetton_score();
}
inline ::google::protobuf::int64 msg_baccarat_place_jetton_broadcast::jetton_score() const {
  return jetton_score_;
}
inline void msg_baccarat_place_jetton_broadcast::set_jetton_score(::google::protobuf::int64 value) {
  set_has_jetton_score();
  jetton_score_ = value;
}

// optional int64 total_jetton_score = 4;
inline bool msg_baccarat_place_jetton_broadcast::has_total_jetton_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_baccarat_place_jetton_broadcast::set_has_total_jetton_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_baccarat_place_jetton_broadcast::clear_has_total_jetton_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_baccarat_place_jetton_broadcast::clear_total_jetton_score() {
  total_jetton_score_ = GOOGLE_LONGLONG(0);
  clear_has_total_jetton_score();
}
inline ::google::protobuf::int64 msg_baccarat_place_jetton_broadcast::total_jetton_score() const {
  return total_jetton_score_;
}
inline void msg_baccarat_place_jetton_broadcast::set_total_jetton_score(::google::protobuf::int64 value) {
  set_has_total_jetton_score();
  total_jetton_score_ = value;
}

// -------------------------------------------------------------------

// msg_baccarat_game_end

// optional uint32 time_leave = 1;
inline bool msg_baccarat_game_end::has_time_leave() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_baccarat_game_end::set_has_time_leave() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_baccarat_game_end::clear_has_time_leave() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_baccarat_game_end::clear_time_leave() {
  time_leave_ = 0u;
  clear_has_time_leave();
}
inline ::google::protobuf::uint32 msg_baccarat_game_end::time_leave() const {
  return time_leave_;
}
inline void msg_baccarat_game_end::set_time_leave(::google::protobuf::uint32 value) {
  set_has_time_leave();
  time_leave_ = value;
}

// repeated .net.msg_cards table_cards = 2;
inline int msg_baccarat_game_end::table_cards_size() const {
  return table_cards_.size();
}
inline void msg_baccarat_game_end::clear_table_cards() {
  table_cards_.Clear();
}
inline const ::net::msg_cards& msg_baccarat_game_end::table_cards(int index) const {
  return table_cards_.Get(index);
}
inline ::net::msg_cards* msg_baccarat_game_end::mutable_table_cards(int index) {
  return table_cards_.Mutable(index);
}
inline ::net::msg_cards* msg_baccarat_game_end::add_table_cards() {
  return table_cards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::net::msg_cards >&
msg_baccarat_game_end::table_cards() const {
  return table_cards_;
}
inline ::google::protobuf::RepeatedPtrField< ::net::msg_cards >*
msg_baccarat_game_end::mutable_table_cards() {
  return &table_cards_;
}

// repeated uint32 card_types = 3;
inline int msg_baccarat_game_end::card_types_size() const {
  return card_types_.size();
}
inline void msg_baccarat_game_end::clear_card_types() {
  card_types_.Clear();
}
inline ::google::protobuf::uint32 msg_baccarat_game_end::card_types(int index) const {
  return card_types_.Get(index);
}
inline void msg_baccarat_game_end::set_card_types(int index, ::google::protobuf::uint32 value) {
  card_types_.Set(index, value);
}
inline void msg_baccarat_game_end::add_card_types(::google::protobuf::uint32 value) {
  card_types_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
msg_baccarat_game_end::card_types() const {
  return card_types_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
msg_baccarat_game_end::mutable_card_types() {
  return &card_types_;
}

// optional int64 banker_win_score = 4;
inline bool msg_baccarat_game_end::has_banker_win_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_baccarat_game_end::set_has_banker_win_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_baccarat_game_end::clear_has_banker_win_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_baccarat_game_end::clear_banker_win_score() {
  banker_win_score_ = GOOGLE_LONGLONG(0);
  clear_has_banker_win_score();
}
inline ::google::protobuf::int64 msg_baccarat_game_end::banker_win_score() const {
  return banker_win_score_;
}
inline void msg_baccarat_game_end::set_banker_win_score(::google::protobuf::int64 value) {
  set_has_banker_win_score();
  banker_win_score_ = value;
}

// optional int64 banker_total_score = 5;
inline bool msg_baccarat_game_end::has_banker_total_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_baccarat_game_end::set_has_banker_total_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_baccarat_game_end::clear_has_banker_total_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_baccarat_game_end::clear_banker_total_score() {
  banker_total_score_ = GOOGLE_LONGLONG(0);
  clear_has_banker_total_score();
}
inline ::google::protobuf::int64 msg_baccarat_game_end::banker_total_score() const {
  return banker_total_score_;
}
inline void msg_baccarat_game_end::set_banker_total_score(::google::protobuf::int64 value) {
  set_has_banker_total_score();
  banker_total_score_ = value;
}

// optional uint32 banker_time = 6;
inline bool msg_baccarat_game_end::has_banker_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_baccarat_game_end::set_has_banker_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_baccarat_game_end::clear_has_banker_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_baccarat_game_end::clear_banker_time() {
  banker_time_ = 0u;
  clear_has_banker_time();
}
inline ::google::protobuf::uint32 msg_baccarat_game_end::banker_time() const {
  return banker_time_;
}
inline void msg_baccarat_game_end::set_banker_time(::google::protobuf::uint32 value) {
  set_has_banker_time();
  banker_time_ = value;
}

// optional int64 user_score = 7;
inline bool msg_baccarat_game_end::has_user_score() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_baccarat_game_end::set_has_user_score() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_baccarat_game_end::clear_has_user_score() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_baccarat_game_end::clear_user_score() {
  user_score_ = GOOGLE_LONGLONG(0);
  clear_has_user_score();
}
inline ::google::protobuf::int64 msg_baccarat_game_end::user_score() const {
  return user_score_;
}
inline void msg_baccarat_game_end::set_user_score(::google::protobuf::int64 value) {
  set_has_user_score();
  user_score_ = value;
}

// repeated int64 player_score = 8;
inline int msg_baccarat_game_end::player_score_size() const {
  return player_score_.size();
}
inline void msg_baccarat_game_end::clear_player_score() {
  player_score_.Clear();
}
inline ::google::protobuf::int64 msg_baccarat_game_end::player_score(int index) const {
  return player_score_.Get(index);
}
inline void msg_baccarat_game_end::set_player_score(int index, ::google::protobuf::int64 value) {
  player_score_.Set(index, value);
}
inline void msg_baccarat_game_end::add_player_score(::google::protobuf::int64 value) {
  player_score_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
msg_baccarat_game_end::player_score() const {
  return player_score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
msg_baccarat_game_end::mutable_player_score() {
  return &player_score_;
}

// repeated uint32 win_types = 9;
inline int msg_baccarat_game_end::win_types_size() const {
  return win_types_.size();
}
inline void msg_baccarat_game_end::clear_win_types() {
  win_types_.Clear();
}
inline ::google::protobuf::uint32 msg_baccarat_game_end::win_types(int index) const {
  return win_types_.Get(index);
}
inline void msg_baccarat_game_end::set_win_types(int index, ::google::protobuf::uint32 value) {
  win_types_.Set(index, value);
}
inline void msg_baccarat_game_end::add_win_types(::google::protobuf::uint32 value) {
  win_types_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
msg_baccarat_game_end::win_types() const {
  return win_types_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
msg_baccarat_game_end::mutable_win_types() {
  return &win_types_;
}

// optional uint32 remain_card = 10;
inline bool msg_baccarat_game_end::has_remain_card() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void msg_baccarat_game_end::set_has_remain_card() {
  _has_bits_[0] |= 0x00000200u;
}
inline void msg_baccarat_game_end::clear_has_remain_card() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void msg_baccarat_game_end::clear_remain_card() {
  remain_card_ = 0u;
  clear_has_remain_card();
}
inline ::google::protobuf::uint32 msg_baccarat_game_end::remain_card() const {
  return remain_card_;
}
inline void msg_baccarat_game_end::set_remain_card(::google::protobuf::uint32 value) {
  set_has_remain_card();
  remain_card_ = value;
}

// optional uint32 settle_accounts_type = 11;
inline bool msg_baccarat_game_end::has_settle_accounts_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void msg_baccarat_game_end::set_has_settle_accounts_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void msg_baccarat_game_end::clear_has_settle_accounts_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void msg_baccarat_game_end::clear_settle_accounts_type() {
  settle_accounts_type_ = 0u;
  clear_has_settle_accounts_type();
}
inline ::google::protobuf::uint32 msg_baccarat_game_end::settle_accounts_type() const {
  return settle_accounts_type_;
}
inline void msg_baccarat_game_end::set_settle_accounts_type(::google::protobuf::uint32 value) {
  set_has_settle_accounts_type();
  settle_accounts_type_ = value;
}

// -------------------------------------------------------------------

// msg_baccarat_apply_banker

// optional uint32 apply_oper = 1;
inline bool msg_baccarat_apply_banker::has_apply_oper() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_baccarat_apply_banker::set_has_apply_oper() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_baccarat_apply_banker::clear_has_apply_oper() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_baccarat_apply_banker::clear_apply_oper() {
  apply_oper_ = 0u;
  clear_has_apply_oper();
}
inline ::google::protobuf::uint32 msg_baccarat_apply_banker::apply_oper() const {
  return apply_oper_;
}
inline void msg_baccarat_apply_banker::set_apply_oper(::google::protobuf::uint32 value) {
  set_has_apply_oper();
  apply_oper_ = value;
}

// optional int64 apply_score = 2;
inline bool msg_baccarat_apply_banker::has_apply_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_baccarat_apply_banker::set_has_apply_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_baccarat_apply_banker::clear_has_apply_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_baccarat_apply_banker::clear_apply_score() {
  apply_score_ = GOOGLE_LONGLONG(0);
  clear_has_apply_score();
}
inline ::google::protobuf::int64 msg_baccarat_apply_banker::apply_score() const {
  return apply_score_;
}
inline void msg_baccarat_apply_banker::set_apply_score(::google::protobuf::int64 value) {
  set_has_apply_score();
  apply_score_ = value;
}

// optional uint32 auto_addscore = 3;
inline bool msg_baccarat_apply_banker::has_auto_addscore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_baccarat_apply_banker::set_has_auto_addscore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_baccarat_apply_banker::clear_has_auto_addscore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_baccarat_apply_banker::clear_auto_addscore() {
  auto_addscore_ = 0u;
  clear_has_auto_addscore();
}
inline ::google::protobuf::uint32 msg_baccarat_apply_banker::auto_addscore() const {
  return auto_addscore_;
}
inline void msg_baccarat_apply_banker::set_auto_addscore(::google::protobuf::uint32 value) {
  set_has_auto_addscore();
  auto_addscore_ = value;
}

// -------------------------------------------------------------------

// msg_baccarat_apply_banker_rep

// optional uint32 apply_oper = 1;
inline bool msg_baccarat_apply_banker_rep::has_apply_oper() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_baccarat_apply_banker_rep::set_has_apply_oper() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_baccarat_apply_banker_rep::clear_has_apply_oper() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_baccarat_apply_banker_rep::clear_apply_oper() {
  apply_oper_ = 0u;
  clear_has_apply_oper();
}
inline ::google::protobuf::uint32 msg_baccarat_apply_banker_rep::apply_oper() const {
  return apply_oper_;
}
inline void msg_baccarat_apply_banker_rep::set_apply_oper(::google::protobuf::uint32 value) {
  set_has_apply_oper();
  apply_oper_ = value;
}

// optional uint32 result = 2;
inline bool msg_baccarat_apply_banker_rep::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_baccarat_apply_banker_rep::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_baccarat_apply_banker_rep::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_baccarat_apply_banker_rep::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 msg_baccarat_apply_banker_rep::result() const {
  return result_;
}
inline void msg_baccarat_apply_banker_rep::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// optional int64 buyin_score = 3;
inline bool msg_baccarat_apply_banker_rep::has_buyin_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_baccarat_apply_banker_rep::set_has_buyin_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_baccarat_apply_banker_rep::clear_has_buyin_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_baccarat_apply_banker_rep::clear_buyin_score() {
  buyin_score_ = GOOGLE_LONGLONG(0);
  clear_has_buyin_score();
}
inline ::google::protobuf::int64 msg_baccarat_apply_banker_rep::buyin_score() const {
  return buyin_score_;
}
inline void msg_baccarat_apply_banker_rep::set_buyin_score(::google::protobuf::int64 value) {
  set_has_buyin_score();
  buyin_score_ = value;
}

// -------------------------------------------------------------------

// msg_baccarat_change_banker

// optional uint32 banker_user = 1;
inline bool msg_baccarat_change_banker::has_banker_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_baccarat_change_banker::set_has_banker_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_baccarat_change_banker::clear_has_banker_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_baccarat_change_banker::clear_banker_user() {
  banker_user_ = 0u;
  clear_has_banker_user();
}
inline ::google::protobuf::uint32 msg_baccarat_change_banker::banker_user() const {
  return banker_user_;
}
inline void msg_baccarat_change_banker::set_banker_user(::google::protobuf::uint32 value) {
  set_has_banker_user();
  banker_user_ = value;
}

// optional int64 banker_score = 2;
inline bool msg_baccarat_change_banker::has_banker_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_baccarat_change_banker::set_has_banker_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_baccarat_change_banker::clear_has_banker_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_baccarat_change_banker::clear_banker_score() {
  banker_score_ = GOOGLE_LONGLONG(0);
  clear_has_banker_score();
}
inline ::google::protobuf::int64 msg_baccarat_change_banker::banker_score() const {
  return banker_score_;
}
inline void msg_baccarat_change_banker::set_banker_score(::google::protobuf::int64 value) {
  set_has_banker_score();
  banker_score_ = value;
}

// -------------------------------------------------------------------

// msg_baccarat_change_user_score

// optional uint32 chair_id = 1;
inline bool msg_baccarat_change_user_score::has_chair_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_baccarat_change_user_score::set_has_chair_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_baccarat_change_user_score::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_baccarat_change_user_score::clear_chair_id() {
  chair_id_ = 0u;
  clear_has_chair_id();
}
inline ::google::protobuf::uint32 msg_baccarat_change_user_score::chair_id() const {
  return chair_id_;
}
inline void msg_baccarat_change_user_score::set_chair_id(::google::protobuf::uint32 value) {
  set_has_chair_id();
  chair_id_ = value;
}

// optional int64 score = 2;
inline bool msg_baccarat_change_user_score::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_baccarat_change_user_score::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_baccarat_change_user_score::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_baccarat_change_user_score::clear_score() {
  score_ = GOOGLE_LONGLONG(0);
  clear_has_score();
}
inline ::google::protobuf::int64 msg_baccarat_change_user_score::score() const {
  return score_;
}
inline void msg_baccarat_change_user_score::set_score(::google::protobuf::int64 value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// msg_baccarat_apply_list

// repeated uint32 player_ids = 1;
inline int msg_baccarat_apply_list::player_ids_size() const {
  return player_ids_.size();
}
inline void msg_baccarat_apply_list::clear_player_ids() {
  player_ids_.Clear();
}
inline ::google::protobuf::uint32 msg_baccarat_apply_list::player_ids(int index) const {
  return player_ids_.Get(index);
}
inline void msg_baccarat_apply_list::set_player_ids(int index, ::google::protobuf::uint32 value) {
  player_ids_.Set(index, value);
}
inline void msg_baccarat_apply_list::add_player_ids(::google::protobuf::uint32 value) {
  player_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
msg_baccarat_apply_list::player_ids() const {
  return player_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
msg_baccarat_apply_list::mutable_player_ids() {
  return &player_ids_;
}

// repeated int64 apply_score = 2;
inline int msg_baccarat_apply_list::apply_score_size() const {
  return apply_score_.size();
}
inline void msg_baccarat_apply_list::clear_apply_score() {
  apply_score_.Clear();
}
inline ::google::protobuf::int64 msg_baccarat_apply_list::apply_score(int index) const {
  return apply_score_.Get(index);
}
inline void msg_baccarat_apply_list::set_apply_score(int index, ::google::protobuf::int64 value) {
  apply_score_.Set(index, value);
}
inline void msg_baccarat_apply_list::add_apply_score(::google::protobuf::int64 value) {
  apply_score_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
msg_baccarat_apply_list::apply_score() const {
  return apply_score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
msg_baccarat_apply_list::mutable_apply_score() {
  return &apply_score_;
}

// -------------------------------------------------------------------

// msg_baccarat_jump_apply_queue_req

// optional uint32 jump_pos = 1;
inline bool msg_baccarat_jump_apply_queue_req::has_jump_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_baccarat_jump_apply_queue_req::set_has_jump_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_baccarat_jump_apply_queue_req::clear_has_jump_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_baccarat_jump_apply_queue_req::clear_jump_pos() {
  jump_pos_ = 0u;
  clear_has_jump_pos();
}
inline ::google::protobuf::uint32 msg_baccarat_jump_apply_queue_req::jump_pos() const {
  return jump_pos_;
}
inline void msg_baccarat_jump_apply_queue_req::set_jump_pos(::google::protobuf::uint32 value) {
  set_has_jump_pos();
  jump_pos_ = value;
}

// -------------------------------------------------------------------

// msg_baccarat_jump_apply_queue_rep

// optional uint32 result = 1;
inline bool msg_baccarat_jump_apply_queue_rep::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_baccarat_jump_apply_queue_rep::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_baccarat_jump_apply_queue_rep::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_baccarat_jump_apply_queue_rep::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 msg_baccarat_jump_apply_queue_rep::result() const {
  return result_;
}
inline void msg_baccarat_jump_apply_queue_rep::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// msg_baccarat_banker_calc_rep

// optional uint32 banker_time = 1;
inline bool msg_baccarat_banker_calc_rep::has_banker_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_baccarat_banker_calc_rep::set_has_banker_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_baccarat_banker_calc_rep::clear_has_banker_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_baccarat_banker_calc_rep::clear_banker_time() {
  banker_time_ = 0u;
  clear_has_banker_time();
}
inline ::google::protobuf::uint32 msg_baccarat_banker_calc_rep::banker_time() const {
  return banker_time_;
}
inline void msg_baccarat_banker_calc_rep::set_banker_time(::google::protobuf::uint32 value) {
  set_has_banker_time();
  banker_time_ = value;
}

// optional uint32 win_count = 2;
inline bool msg_baccarat_banker_calc_rep::has_win_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_baccarat_banker_calc_rep::set_has_win_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_baccarat_banker_calc_rep::clear_has_win_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_baccarat_banker_calc_rep::clear_win_count() {
  win_count_ = 0u;
  clear_has_win_count();
}
inline ::google::protobuf::uint32 msg_baccarat_banker_calc_rep::win_count() const {
  return win_count_;
}
inline void msg_baccarat_banker_calc_rep::set_win_count(::google::protobuf::uint32 value) {
  set_has_win_count();
  win_count_ = value;
}

// optional int64 buyin_score = 3;
inline bool msg_baccarat_banker_calc_rep::has_buyin_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_baccarat_banker_calc_rep::set_has_buyin_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_baccarat_banker_calc_rep::clear_has_buyin_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_baccarat_banker_calc_rep::clear_buyin_score() {
  buyin_score_ = GOOGLE_LONGLONG(0);
  clear_has_buyin_score();
}
inline ::google::protobuf::int64 msg_baccarat_banker_calc_rep::buyin_score() const {
  return buyin_score_;
}
inline void msg_baccarat_banker_calc_rep::set_buyin_score(::google::protobuf::int64 value) {
  set_has_buyin_score();
  buyin_score_ = value;
}

// optional int64 win_score = 4;
inline bool msg_baccarat_banker_calc_rep::has_win_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_baccarat_banker_calc_rep::set_has_win_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_baccarat_banker_calc_rep::clear_has_win_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_baccarat_banker_calc_rep::clear_win_score() {
  win_score_ = GOOGLE_LONGLONG(0);
  clear_has_win_score();
}
inline ::google::protobuf::int64 msg_baccarat_banker_calc_rep::win_score() const {
  return win_score_;
}
inline void msg_baccarat_banker_calc_rep::set_win_score(::google::protobuf::int64 value) {
  set_has_win_score();
  win_score_ = value;
}

// optional int64 win_max = 5;
inline bool msg_baccarat_banker_calc_rep::has_win_max() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_baccarat_banker_calc_rep::set_has_win_max() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_baccarat_banker_calc_rep::clear_has_win_max() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_baccarat_banker_calc_rep::clear_win_max() {
  win_max_ = GOOGLE_LONGLONG(0);
  clear_has_win_max();
}
inline ::google::protobuf::int64 msg_baccarat_banker_calc_rep::win_max() const {
  return win_max_;
}
inline void msg_baccarat_banker_calc_rep::set_win_max(::google::protobuf::int64 value) {
  set_has_win_max();
  win_max_ = value;
}

// optional int64 win_min = 6;
inline bool msg_baccarat_banker_calc_rep::has_win_min() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_baccarat_banker_calc_rep::set_has_win_min() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_baccarat_banker_calc_rep::clear_has_win_min() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_baccarat_banker_calc_rep::clear_win_min() {
  win_min_ = GOOGLE_LONGLONG(0);
  clear_has_win_min();
}
inline ::google::protobuf::int64 msg_baccarat_banker_calc_rep::win_min() const {
  return win_min_;
}
inline void msg_baccarat_banker_calc_rep::set_win_min(::google::protobuf::int64 value) {
  set_has_win_min();
  win_min_ = value;
}

// -------------------------------------------------------------------

// msg_baccarat_add_bankerscore_rep

// optional int64 buyin_score = 1;
inline bool msg_baccarat_add_bankerscore_rep::has_buyin_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_baccarat_add_bankerscore_rep::set_has_buyin_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_baccarat_add_bankerscore_rep::clear_has_buyin_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_baccarat_add_bankerscore_rep::clear_buyin_score() {
  buyin_score_ = GOOGLE_LONGLONG(0);
  clear_has_buyin_score();
}
inline ::google::protobuf::int64 msg_baccarat_add_bankerscore_rep::buyin_score() const {
  return buyin_score_;
}
inline void msg_baccarat_add_bankerscore_rep::set_buyin_score(::google::protobuf::int64 value) {
  set_has_buyin_score();
  buyin_score_ = value;
}

// -------------------------------------------------------------------

// baccarat_play_log

// optional uint32 player_pair = 1;
inline bool baccarat_play_log::has_player_pair() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void baccarat_play_log::set_has_player_pair() {
  _has_bits_[0] |= 0x00000001u;
}
inline void baccarat_play_log::clear_has_player_pair() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void baccarat_play_log::clear_player_pair() {
  player_pair_ = 0u;
  clear_has_player_pair();
}
inline ::google::protobuf::uint32 baccarat_play_log::player_pair() const {
  return player_pair_;
}
inline void baccarat_play_log::set_player_pair(::google::protobuf::uint32 value) {
  set_has_player_pair();
  player_pair_ = value;
}

// optional uint32 banker_pair = 2;
inline bool baccarat_play_log::has_banker_pair() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void baccarat_play_log::set_has_banker_pair() {
  _has_bits_[0] |= 0x00000002u;
}
inline void baccarat_play_log::clear_has_banker_pair() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void baccarat_play_log::clear_banker_pair() {
  banker_pair_ = 0u;
  clear_has_banker_pair();
}
inline ::google::protobuf::uint32 baccarat_play_log::banker_pair() const {
  return banker_pair_;
}
inline void baccarat_play_log::set_banker_pair(::google::protobuf::uint32 value) {
  set_has_banker_pair();
  banker_pair_ = value;
}

// optional uint32 player_count = 3;
inline bool baccarat_play_log::has_player_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void baccarat_play_log::set_has_player_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void baccarat_play_log::clear_has_player_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void baccarat_play_log::clear_player_count() {
  player_count_ = 0u;
  clear_has_player_count();
}
inline ::google::protobuf::uint32 baccarat_play_log::player_count() const {
  return player_count_;
}
inline void baccarat_play_log::set_player_count(::google::protobuf::uint32 value) {
  set_has_player_count();
  player_count_ = value;
}

// optional uint32 banker_count = 4;
inline bool baccarat_play_log::has_banker_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void baccarat_play_log::set_has_banker_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void baccarat_play_log::clear_has_banker_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void baccarat_play_log::clear_banker_count() {
  banker_count_ = 0u;
  clear_has_banker_count();
}
inline ::google::protobuf::uint32 baccarat_play_log::banker_count() const {
  return banker_count_;
}
inline void baccarat_play_log::set_banker_count(::google::protobuf::uint32 value) {
  set_has_banker_count();
  banker_count_ = value;
}

// optional uint32 is_small = 5;
inline bool baccarat_play_log::has_is_small() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void baccarat_play_log::set_has_is_small() {
  _has_bits_[0] |= 0x00000010u;
}
inline void baccarat_play_log::clear_has_is_small() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void baccarat_play_log::clear_is_small() {
  is_small_ = 0u;
  clear_has_is_small();
}
inline ::google::protobuf::uint32 baccarat_play_log::is_small() const {
  return is_small_;
}
inline void baccarat_play_log::set_is_small(::google::protobuf::uint32 value) {
  set_has_is_small();
  is_small_ = value;
}

// optional uint32 is_super_six = 6;
inline bool baccarat_play_log::has_is_super_six() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void baccarat_play_log::set_has_is_super_six() {
  _has_bits_[0] |= 0x00000020u;
}
inline void baccarat_play_log::clear_has_is_super_six() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void baccarat_play_log::clear_is_super_six() {
  is_super_six_ = 0u;
  clear_has_is_super_six();
}
inline ::google::protobuf::uint32 baccarat_play_log::is_super_six() const {
  return is_super_six_;
}
inline void baccarat_play_log::set_is_super_six(::google::protobuf::uint32 value) {
  set_has_is_super_six();
  is_super_six_ = value;
}

// optional uint32 index = 7;
inline bool baccarat_play_log::has_index() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void baccarat_play_log::set_has_index() {
  _has_bits_[0] |= 0x00000040u;
}
inline void baccarat_play_log::clear_has_index() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void baccarat_play_log::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 baccarat_play_log::index() const {
  return index_;
}
inline void baccarat_play_log::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// msg_baccarat_play_log_rep

// repeated .net.baccarat_play_log logs = 1;
inline int msg_baccarat_play_log_rep::logs_size() const {
  return logs_.size();
}
inline void msg_baccarat_play_log_rep::clear_logs() {
  logs_.Clear();
}
inline const ::net::baccarat_play_log& msg_baccarat_play_log_rep::logs(int index) const {
  return logs_.Get(index);
}
inline ::net::baccarat_play_log* msg_baccarat_play_log_rep::mutable_logs(int index) {
  return logs_.Mutable(index);
}
inline ::net::baccarat_play_log* msg_baccarat_play_log_rep::add_logs() {
  return logs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::net::baccarat_play_log >&
msg_baccarat_play_log_rep::logs() const {
  return logs_;
}
inline ::google::protobuf::RepeatedPtrField< ::net::baccarat_play_log >*
msg_baccarat_play_log_rep::mutable_logs() {
  return &logs_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace net

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_baccarat_5flogic_5fmsg_2eproto__INCLUDED
