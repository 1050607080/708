// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: showhand_logic_msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "showhand_logic_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace net {

namespace {

const ::google::protobuf::Descriptor* msg_showhand_game_info_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_showhand_game_info_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_showhand_start_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_showhand_start_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_showhand_giveup_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_showhand_giveup_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_showhand_giveup_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_showhand_giveup_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_showhand_addscore_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_showhand_addscore_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_showhand_addscore_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_showhand_addscore_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_showhand_sendcard_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_showhand_sendcard_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_showhand_game_over_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_showhand_game_over_rep_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_showhand_5flogic_5fmsg_2eproto() {
  protobuf_AddDesc_showhand_5flogic_5fmsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "showhand_logic_msg.proto");
  GOOGLE_CHECK(file != NULL);
  msg_showhand_game_info_rep_descriptor_ = file->message_type(0);
  static const int msg_showhand_game_info_rep_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_game_info_rep, cell_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_game_info_rep, draw_max_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_game_info_rep, turn_max_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_game_info_rep, turn_less_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_game_info_rep, user_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_game_info_rep, table_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_game_info_rep, show_hand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_game_info_rep, cur_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_game_info_rep, play_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_game_info_rep, hand_card_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_game_info_rep, wait_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_game_info_rep, history_score_),
  };
  msg_showhand_game_info_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_showhand_game_info_rep_descriptor_,
      msg_showhand_game_info_rep::default_instance_,
      msg_showhand_game_info_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_game_info_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_game_info_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_showhand_game_info_rep));
  msg_showhand_start_rep_descriptor_ = file->message_type(1);
  static const int msg_showhand_start_rep_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_start_rep, cell_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_start_rep, draw_max_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_start_rep, turn_max_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_start_rep, turn_less_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_start_rep, cur_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_start_rep, table_card_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_start_rep, history_score_),
  };
  msg_showhand_start_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_showhand_start_rep_descriptor_,
      msg_showhand_start_rep::default_instance_,
      msg_showhand_start_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_start_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_start_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_showhand_start_rep));
  msg_showhand_giveup_req_descriptor_ = file->message_type(2);
  static const int msg_showhand_giveup_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_giveup_req, give_up_),
  };
  msg_showhand_giveup_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_showhand_giveup_req_descriptor_,
      msg_showhand_giveup_req::default_instance_,
      msg_showhand_giveup_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_giveup_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_giveup_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_showhand_giveup_req));
  msg_showhand_giveup_rep_descriptor_ = file->message_type(3);
  static const int msg_showhand_giveup_rep_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_giveup_rep, giveup_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_giveup_rep, cur_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_giveup_rep, draw_max_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_giveup_rep, turn_max_score_),
  };
  msg_showhand_giveup_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_showhand_giveup_rep_descriptor_,
      msg_showhand_giveup_rep::default_instance_,
      msg_showhand_giveup_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_giveup_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_giveup_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_showhand_giveup_rep));
  msg_showhand_addscore_req_descriptor_ = file->message_type(4);
  static const int msg_showhand_addscore_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_addscore_req, score_),
  };
  msg_showhand_addscore_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_showhand_addscore_req_descriptor_,
      msg_showhand_addscore_req::default_instance_,
      msg_showhand_addscore_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_addscore_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_addscore_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_showhand_addscore_req));
  msg_showhand_addscore_rep_descriptor_ = file->message_type(5);
  static const int msg_showhand_addscore_rep_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_addscore_rep, cur_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_addscore_rep, add_score_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_addscore_rep, turn_less_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_addscore_rep, user_score_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_addscore_rep, show_hand_),
  };
  msg_showhand_addscore_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_showhand_addscore_rep_descriptor_,
      msg_showhand_addscore_rep::default_instance_,
      msg_showhand_addscore_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_addscore_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_addscore_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_showhand_addscore_rep));
  msg_showhand_sendcard_rep_descriptor_ = file->message_type(6);
  static const int msg_showhand_sendcard_rep_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_sendcard_rep, cur_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_sendcard_rep, start_chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_sendcard_rep, turn_max_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_sendcard_rep, card_data_),
  };
  msg_showhand_sendcard_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_showhand_sendcard_rep_descriptor_,
      msg_showhand_sendcard_rep::default_instance_,
      msg_showhand_sendcard_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_sendcard_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_sendcard_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_showhand_sendcard_rep));
  msg_showhand_game_over_rep_descriptor_ = file->message_type(7);
  static const int msg_showhand_game_over_rep_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_game_over_rep, card_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_game_over_rep, game_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_game_over_rep, history_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_game_over_rep, hand_card_data_),
  };
  msg_showhand_game_over_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_showhand_game_over_rep_descriptor_,
      msg_showhand_game_over_rep::default_instance_,
      msg_showhand_game_over_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_game_over_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_showhand_game_over_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_showhand_game_over_rep));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_showhand_5flogic_5fmsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_showhand_game_info_rep_descriptor_, &msg_showhand_game_info_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_showhand_start_rep_descriptor_, &msg_showhand_start_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_showhand_giveup_req_descriptor_, &msg_showhand_giveup_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_showhand_giveup_rep_descriptor_, &msg_showhand_giveup_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_showhand_addscore_req_descriptor_, &msg_showhand_addscore_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_showhand_addscore_rep_descriptor_, &msg_showhand_addscore_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_showhand_sendcard_rep_descriptor_, &msg_showhand_sendcard_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_showhand_game_over_rep_descriptor_, &msg_showhand_game_over_rep::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_showhand_5flogic_5fmsg_2eproto() {
  delete msg_showhand_game_info_rep::default_instance_;
  delete msg_showhand_game_info_rep_reflection_;
  delete msg_showhand_start_rep::default_instance_;
  delete msg_showhand_start_rep_reflection_;
  delete msg_showhand_giveup_req::default_instance_;
  delete msg_showhand_giveup_req_reflection_;
  delete msg_showhand_giveup_rep::default_instance_;
  delete msg_showhand_giveup_rep_reflection_;
  delete msg_showhand_addscore_req::default_instance_;
  delete msg_showhand_addscore_req_reflection_;
  delete msg_showhand_addscore_rep::default_instance_;
  delete msg_showhand_addscore_rep_reflection_;
  delete msg_showhand_sendcard_rep::default_instance_;
  delete msg_showhand_sendcard_rep_reflection_;
  delete msg_showhand_game_over_rep::default_instance_;
  delete msg_showhand_game_over_rep_reflection_;
}

void protobuf_AddDesc_showhand_5flogic_5fmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::net::protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  ::net::protobuf_AddDesc_error_5fcode_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030showhand_logic_msg.proto\022\003net\032\025base_ms"
    "g_struct.proto\032\020error_code.proto\"\256\002\n\032msg"
    "_showhand_game_info_rep\022\022\n\ncell_score\030\001 "
    "\001(\003\022\026\n\016draw_max_score\030\002 \001(\003\022\026\n\016turn_max_"
    "score\030\003 \001(\003\022\027\n\017turn_less_score\030\004 \001(\003\022\022\n\n"
    "user_score\030\005 \003(\003\022\023\n\013table_score\030\006 \003(\003\022\021\n"
    "\tshow_hand\030\007 \001(\r\022\020\n\010cur_user\030\010 \001(\r\022\023\n\013pl"
    "ay_status\030\t \003(\r\022&\n\016hand_card_data\030\n \003(\0132"
    "\016.net.msg_cards\022\021\n\twait_time\030\013 \001(\r\022\025\n\rhi"
    "story_score\030\014 \003(\003\"\307\001\n\026msg_showhand_start"
    "_rep\022\022\n\ncell_score\030\001 \001(\003\022\026\n\016draw_max_sco"
    "re\030\002 \001(\003\022\026\n\016turn_max_score\030\003 \001(\003\022\027\n\017turn"
    "_less_score\030\004 \001(\003\022\020\n\010cur_user\030\005 \001(\r\022\'\n\017t"
    "able_card_data\030\006 \003(\0132\016.net.msg_cards\022\025\n\r"
    "history_score\030\007 \003(\003\"*\n\027msg_showhand_give"
    "up_req\022\017\n\007give_up\030\001 \001(\r\"p\n\027msg_showhand_"
    "giveup_rep\022\023\n\013giveup_user\030\001 \001(\r\022\020\n\010cur_u"
    "ser\030\002 \001(\r\022\026\n\016draw_max_score\030\003 \001(\003\022\026\n\016tur"
    "n_max_score\030\004 \001(\003\"*\n\031msg_showhand_addsco"
    "re_req\022\r\n\005score\030\001 \001(\003\"\213\001\n\031msg_showhand_a"
    "ddscore_rep\022\020\n\010cur_user\030\001 \001(\r\022\026\n\016add_sco"
    "re_user\030\002 \001(\r\022\027\n\017turn_less_score\030\003 \001(\003\022\030"
    "\n\020user_score_count\030\004 \001(\003\022\021\n\tshow_hand\030\005 "
    "\001(\r\"\177\n\031msg_showhand_sendcard_rep\022\020\n\010cur_"
    "user\030\001 \001(\r\022\025\n\rstart_chairid\030\002 \001(\r\022\026\n\016tur"
    "n_max_score\030\003 \001(\003\022!\n\tcard_data\030\004 \003(\0132\016.n"
    "et.msg_cards\"\222\001\n\032msg_showhand_game_over_"
    "rep\022!\n\tcard_data\030\001 \003(\0132\016.net.msg_cards\022\022"
    "\n\ngame_score\030\002 \003(\003\022\025\n\rhistory_score\030\003 \003("
    "\003\022&\n\016hand_card_data\030\004 \003(\0132\016.net.msg_card"
    "s", 1201);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "showhand_logic_msg.proto", &protobuf_RegisterTypes);
  msg_showhand_game_info_rep::default_instance_ = new msg_showhand_game_info_rep();
  msg_showhand_start_rep::default_instance_ = new msg_showhand_start_rep();
  msg_showhand_giveup_req::default_instance_ = new msg_showhand_giveup_req();
  msg_showhand_giveup_rep::default_instance_ = new msg_showhand_giveup_rep();
  msg_showhand_addscore_req::default_instance_ = new msg_showhand_addscore_req();
  msg_showhand_addscore_rep::default_instance_ = new msg_showhand_addscore_rep();
  msg_showhand_sendcard_rep::default_instance_ = new msg_showhand_sendcard_rep();
  msg_showhand_game_over_rep::default_instance_ = new msg_showhand_game_over_rep();
  msg_showhand_game_info_rep::default_instance_->InitAsDefaultInstance();
  msg_showhand_start_rep::default_instance_->InitAsDefaultInstance();
  msg_showhand_giveup_req::default_instance_->InitAsDefaultInstance();
  msg_showhand_giveup_rep::default_instance_->InitAsDefaultInstance();
  msg_showhand_addscore_req::default_instance_->InitAsDefaultInstance();
  msg_showhand_addscore_rep::default_instance_->InitAsDefaultInstance();
  msg_showhand_sendcard_rep::default_instance_->InitAsDefaultInstance();
  msg_showhand_game_over_rep::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_showhand_5flogic_5fmsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_showhand_5flogic_5fmsg_2eproto {
  StaticDescriptorInitializer_showhand_5flogic_5fmsg_2eproto() {
    protobuf_AddDesc_showhand_5flogic_5fmsg_2eproto();
  }
} static_descriptor_initializer_showhand_5flogic_5fmsg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int msg_showhand_game_info_rep::kCellScoreFieldNumber;
const int msg_showhand_game_info_rep::kDrawMaxScoreFieldNumber;
const int msg_showhand_game_info_rep::kTurnMaxScoreFieldNumber;
const int msg_showhand_game_info_rep::kTurnLessScoreFieldNumber;
const int msg_showhand_game_info_rep::kUserScoreFieldNumber;
const int msg_showhand_game_info_rep::kTableScoreFieldNumber;
const int msg_showhand_game_info_rep::kShowHandFieldNumber;
const int msg_showhand_game_info_rep::kCurUserFieldNumber;
const int msg_showhand_game_info_rep::kPlayStatusFieldNumber;
const int msg_showhand_game_info_rep::kHandCardDataFieldNumber;
const int msg_showhand_game_info_rep::kWaitTimeFieldNumber;
const int msg_showhand_game_info_rep::kHistoryScoreFieldNumber;
#endif  // !_MSC_VER

msg_showhand_game_info_rep::msg_showhand_game_info_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_showhand_game_info_rep::InitAsDefaultInstance() {
}

msg_showhand_game_info_rep::msg_showhand_game_info_rep(const msg_showhand_game_info_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_showhand_game_info_rep::SharedCtor() {
  _cached_size_ = 0;
  cell_score_ = GOOGLE_LONGLONG(0);
  draw_max_score_ = GOOGLE_LONGLONG(0);
  turn_max_score_ = GOOGLE_LONGLONG(0);
  turn_less_score_ = GOOGLE_LONGLONG(0);
  show_hand_ = 0u;
  cur_user_ = 0u;
  wait_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_showhand_game_info_rep::~msg_showhand_game_info_rep() {
  SharedDtor();
}

void msg_showhand_game_info_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_showhand_game_info_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_showhand_game_info_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_showhand_game_info_rep_descriptor_;
}

const msg_showhand_game_info_rep& msg_showhand_game_info_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_showhand_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_showhand_game_info_rep* msg_showhand_game_info_rep::default_instance_ = NULL;

msg_showhand_game_info_rep* msg_showhand_game_info_rep::New() const {
  return new msg_showhand_game_info_rep;
}

void msg_showhand_game_info_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cell_score_ = GOOGLE_LONGLONG(0);
    draw_max_score_ = GOOGLE_LONGLONG(0);
    turn_max_score_ = GOOGLE_LONGLONG(0);
    turn_less_score_ = GOOGLE_LONGLONG(0);
    show_hand_ = 0u;
    cur_user_ = 0u;
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    wait_time_ = 0u;
  }
  user_score_.Clear();
  table_score_.Clear();
  play_status_.Clear();
  hand_card_data_.Clear();
  history_score_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_showhand_game_info_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 cell_score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cell_score_)));
          set_has_cell_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_draw_max_score;
        break;
      }

      // optional int64 draw_max_score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_draw_max_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &draw_max_score_)));
          set_has_draw_max_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_turn_max_score;
        break;
      }

      // optional int64 turn_max_score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turn_max_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &turn_max_score_)));
          set_has_turn_max_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_turn_less_score;
        break;
      }

      // optional int64 turn_less_score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turn_less_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &turn_less_score_)));
          set_has_turn_less_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_user_score;
        break;
      }

      // repeated int64 user_score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 40, input, this->mutable_user_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_user_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_user_score;
        if (input->ExpectTag(48)) goto parse_table_score;
        break;
      }

      // repeated int64 table_score = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 48, input, this->mutable_table_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_table_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_table_score;
        if (input->ExpectTag(56)) goto parse_show_hand;
        break;
      }

      // optional uint32 show_hand = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_hand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &show_hand_)));
          set_has_show_hand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_cur_user;
        break;
      }

      // optional uint32 cur_user = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_user_)));
          set_has_cur_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_play_status;
        break;
      }

      // repeated uint32 play_status = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_play_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72, input, this->mutable_play_status())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_play_status())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_play_status;
        if (input->ExpectTag(82)) goto parse_hand_card_data;
        break;
      }

      // repeated .net.msg_cards hand_card_data = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hand_card_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hand_card_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_hand_card_data;
        if (input->ExpectTag(88)) goto parse_wait_time;
        break;
      }

      // optional uint32 wait_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wait_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wait_time_)));
          set_has_wait_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_history_score;
        break;
      }

      // repeated int64 history_score = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_history_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 96, input, this->mutable_history_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_history_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_history_score;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_showhand_game_info_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 cell_score = 1;
  if (has_cell_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->cell_score(), output);
  }

  // optional int64 draw_max_score = 2;
  if (has_draw_max_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->draw_max_score(), output);
  }

  // optional int64 turn_max_score = 3;
  if (has_turn_max_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->turn_max_score(), output);
  }

  // optional int64 turn_less_score = 4;
  if (has_turn_less_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->turn_less_score(), output);
  }

  // repeated int64 user_score = 5;
  for (int i = 0; i < this->user_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      5, this->user_score(i), output);
  }

  // repeated int64 table_score = 6;
  for (int i = 0; i < this->table_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      6, this->table_score(i), output);
  }

  // optional uint32 show_hand = 7;
  if (has_show_hand()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->show_hand(), output);
  }

  // optional uint32 cur_user = 8;
  if (has_cur_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->cur_user(), output);
  }

  // repeated uint32 play_status = 9;
  for (int i = 0; i < this->play_status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->play_status(i), output);
  }

  // repeated .net.msg_cards hand_card_data = 10;
  for (int i = 0; i < this->hand_card_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->hand_card_data(i), output);
  }

  // optional uint32 wait_time = 11;
  if (has_wait_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->wait_time(), output);
  }

  // repeated int64 history_score = 12;
  for (int i = 0; i < this->history_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      12, this->history_score(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_showhand_game_info_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 cell_score = 1;
  if (has_cell_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->cell_score(), target);
  }

  // optional int64 draw_max_score = 2;
  if (has_draw_max_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->draw_max_score(), target);
  }

  // optional int64 turn_max_score = 3;
  if (has_turn_max_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->turn_max_score(), target);
  }

  // optional int64 turn_less_score = 4;
  if (has_turn_less_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->turn_less_score(), target);
  }

  // repeated int64 user_score = 5;
  for (int i = 0; i < this->user_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(5, this->user_score(i), target);
  }

  // repeated int64 table_score = 6;
  for (int i = 0; i < this->table_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(6, this->table_score(i), target);
  }

  // optional uint32 show_hand = 7;
  if (has_show_hand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->show_hand(), target);
  }

  // optional uint32 cur_user = 8;
  if (has_cur_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->cur_user(), target);
  }

  // repeated uint32 play_status = 9;
  for (int i = 0; i < this->play_status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(9, this->play_status(i), target);
  }

  // repeated .net.msg_cards hand_card_data = 10;
  for (int i = 0; i < this->hand_card_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->hand_card_data(i), target);
  }

  // optional uint32 wait_time = 11;
  if (has_wait_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->wait_time(), target);
  }

  // repeated int64 history_score = 12;
  for (int i = 0; i < this->history_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(12, this->history_score(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_showhand_game_info_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 cell_score = 1;
    if (has_cell_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cell_score());
    }

    // optional int64 draw_max_score = 2;
    if (has_draw_max_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->draw_max_score());
    }

    // optional int64 turn_max_score = 3;
    if (has_turn_max_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->turn_max_score());
    }

    // optional int64 turn_less_score = 4;
    if (has_turn_less_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->turn_less_score());
    }

    // optional uint32 show_hand = 7;
    if (has_show_hand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->show_hand());
    }

    // optional uint32 cur_user = 8;
    if (has_cur_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_user());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional uint32 wait_time = 11;
    if (has_wait_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wait_time());
    }

  }
  // repeated int64 user_score = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->user_score(i));
    }
    total_size += 1 * this->user_score_size() + data_size;
  }

  // repeated int64 table_score = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->table_score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->table_score(i));
    }
    total_size += 1 * this->table_score_size() + data_size;
  }

  // repeated uint32 play_status = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->play_status_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->play_status(i));
    }
    total_size += 1 * this->play_status_size() + data_size;
  }

  // repeated .net.msg_cards hand_card_data = 10;
  total_size += 1 * this->hand_card_data_size();
  for (int i = 0; i < this->hand_card_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hand_card_data(i));
  }

  // repeated int64 history_score = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->history_score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->history_score(i));
    }
    total_size += 1 * this->history_score_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_showhand_game_info_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_showhand_game_info_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_showhand_game_info_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_showhand_game_info_rep::MergeFrom(const msg_showhand_game_info_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_score_.MergeFrom(from.user_score_);
  table_score_.MergeFrom(from.table_score_);
  play_status_.MergeFrom(from.play_status_);
  hand_card_data_.MergeFrom(from.hand_card_data_);
  history_score_.MergeFrom(from.history_score_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cell_score()) {
      set_cell_score(from.cell_score());
    }
    if (from.has_draw_max_score()) {
      set_draw_max_score(from.draw_max_score());
    }
    if (from.has_turn_max_score()) {
      set_turn_max_score(from.turn_max_score());
    }
    if (from.has_turn_less_score()) {
      set_turn_less_score(from.turn_less_score());
    }
    if (from.has_show_hand()) {
      set_show_hand(from.show_hand());
    }
    if (from.has_cur_user()) {
      set_cur_user(from.cur_user());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_wait_time()) {
      set_wait_time(from.wait_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_showhand_game_info_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_showhand_game_info_rep::CopyFrom(const msg_showhand_game_info_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_showhand_game_info_rep::IsInitialized() const {

  return true;
}

void msg_showhand_game_info_rep::Swap(msg_showhand_game_info_rep* other) {
  if (other != this) {
    std::swap(cell_score_, other->cell_score_);
    std::swap(draw_max_score_, other->draw_max_score_);
    std::swap(turn_max_score_, other->turn_max_score_);
    std::swap(turn_less_score_, other->turn_less_score_);
    user_score_.Swap(&other->user_score_);
    table_score_.Swap(&other->table_score_);
    std::swap(show_hand_, other->show_hand_);
    std::swap(cur_user_, other->cur_user_);
    play_status_.Swap(&other->play_status_);
    hand_card_data_.Swap(&other->hand_card_data_);
    std::swap(wait_time_, other->wait_time_);
    history_score_.Swap(&other->history_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_showhand_game_info_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_showhand_game_info_rep_descriptor_;
  metadata.reflection = msg_showhand_game_info_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_showhand_start_rep::kCellScoreFieldNumber;
const int msg_showhand_start_rep::kDrawMaxScoreFieldNumber;
const int msg_showhand_start_rep::kTurnMaxScoreFieldNumber;
const int msg_showhand_start_rep::kTurnLessScoreFieldNumber;
const int msg_showhand_start_rep::kCurUserFieldNumber;
const int msg_showhand_start_rep::kTableCardDataFieldNumber;
const int msg_showhand_start_rep::kHistoryScoreFieldNumber;
#endif  // !_MSC_VER

msg_showhand_start_rep::msg_showhand_start_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_showhand_start_rep::InitAsDefaultInstance() {
}

msg_showhand_start_rep::msg_showhand_start_rep(const msg_showhand_start_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_showhand_start_rep::SharedCtor() {
  _cached_size_ = 0;
  cell_score_ = GOOGLE_LONGLONG(0);
  draw_max_score_ = GOOGLE_LONGLONG(0);
  turn_max_score_ = GOOGLE_LONGLONG(0);
  turn_less_score_ = GOOGLE_LONGLONG(0);
  cur_user_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_showhand_start_rep::~msg_showhand_start_rep() {
  SharedDtor();
}

void msg_showhand_start_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_showhand_start_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_showhand_start_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_showhand_start_rep_descriptor_;
}

const msg_showhand_start_rep& msg_showhand_start_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_showhand_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_showhand_start_rep* msg_showhand_start_rep::default_instance_ = NULL;

msg_showhand_start_rep* msg_showhand_start_rep::New() const {
  return new msg_showhand_start_rep;
}

void msg_showhand_start_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cell_score_ = GOOGLE_LONGLONG(0);
    draw_max_score_ = GOOGLE_LONGLONG(0);
    turn_max_score_ = GOOGLE_LONGLONG(0);
    turn_less_score_ = GOOGLE_LONGLONG(0);
    cur_user_ = 0u;
  }
  table_card_data_.Clear();
  history_score_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_showhand_start_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 cell_score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cell_score_)));
          set_has_cell_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_draw_max_score;
        break;
      }

      // optional int64 draw_max_score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_draw_max_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &draw_max_score_)));
          set_has_draw_max_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_turn_max_score;
        break;
      }

      // optional int64 turn_max_score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turn_max_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &turn_max_score_)));
          set_has_turn_max_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_turn_less_score;
        break;
      }

      // optional int64 turn_less_score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turn_less_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &turn_less_score_)));
          set_has_turn_less_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cur_user;
        break;
      }

      // optional uint32 cur_user = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_user_)));
          set_has_cur_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_table_card_data;
        break;
      }

      // repeated .net.msg_cards table_card_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_card_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_table_card_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_table_card_data;
        if (input->ExpectTag(56)) goto parse_history_score;
        break;
      }

      // repeated int64 history_score = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_history_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 56, input, this->mutable_history_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_history_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_history_score;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_showhand_start_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 cell_score = 1;
  if (has_cell_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->cell_score(), output);
  }

  // optional int64 draw_max_score = 2;
  if (has_draw_max_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->draw_max_score(), output);
  }

  // optional int64 turn_max_score = 3;
  if (has_turn_max_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->turn_max_score(), output);
  }

  // optional int64 turn_less_score = 4;
  if (has_turn_less_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->turn_less_score(), output);
  }

  // optional uint32 cur_user = 5;
  if (has_cur_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cur_user(), output);
  }

  // repeated .net.msg_cards table_card_data = 6;
  for (int i = 0; i < this->table_card_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->table_card_data(i), output);
  }

  // repeated int64 history_score = 7;
  for (int i = 0; i < this->history_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      7, this->history_score(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_showhand_start_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 cell_score = 1;
  if (has_cell_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->cell_score(), target);
  }

  // optional int64 draw_max_score = 2;
  if (has_draw_max_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->draw_max_score(), target);
  }

  // optional int64 turn_max_score = 3;
  if (has_turn_max_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->turn_max_score(), target);
  }

  // optional int64 turn_less_score = 4;
  if (has_turn_less_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->turn_less_score(), target);
  }

  // optional uint32 cur_user = 5;
  if (has_cur_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cur_user(), target);
  }

  // repeated .net.msg_cards table_card_data = 6;
  for (int i = 0; i < this->table_card_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->table_card_data(i), target);
  }

  // repeated int64 history_score = 7;
  for (int i = 0; i < this->history_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(7, this->history_score(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_showhand_start_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 cell_score = 1;
    if (has_cell_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cell_score());
    }

    // optional int64 draw_max_score = 2;
    if (has_draw_max_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->draw_max_score());
    }

    // optional int64 turn_max_score = 3;
    if (has_turn_max_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->turn_max_score());
    }

    // optional int64 turn_less_score = 4;
    if (has_turn_less_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->turn_less_score());
    }

    // optional uint32 cur_user = 5;
    if (has_cur_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_user());
    }

  }
  // repeated .net.msg_cards table_card_data = 6;
  total_size += 1 * this->table_card_data_size();
  for (int i = 0; i < this->table_card_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->table_card_data(i));
  }

  // repeated int64 history_score = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->history_score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->history_score(i));
    }
    total_size += 1 * this->history_score_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_showhand_start_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_showhand_start_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_showhand_start_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_showhand_start_rep::MergeFrom(const msg_showhand_start_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  table_card_data_.MergeFrom(from.table_card_data_);
  history_score_.MergeFrom(from.history_score_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cell_score()) {
      set_cell_score(from.cell_score());
    }
    if (from.has_draw_max_score()) {
      set_draw_max_score(from.draw_max_score());
    }
    if (from.has_turn_max_score()) {
      set_turn_max_score(from.turn_max_score());
    }
    if (from.has_turn_less_score()) {
      set_turn_less_score(from.turn_less_score());
    }
    if (from.has_cur_user()) {
      set_cur_user(from.cur_user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_showhand_start_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_showhand_start_rep::CopyFrom(const msg_showhand_start_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_showhand_start_rep::IsInitialized() const {

  return true;
}

void msg_showhand_start_rep::Swap(msg_showhand_start_rep* other) {
  if (other != this) {
    std::swap(cell_score_, other->cell_score_);
    std::swap(draw_max_score_, other->draw_max_score_);
    std::swap(turn_max_score_, other->turn_max_score_);
    std::swap(turn_less_score_, other->turn_less_score_);
    std::swap(cur_user_, other->cur_user_);
    table_card_data_.Swap(&other->table_card_data_);
    history_score_.Swap(&other->history_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_showhand_start_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_showhand_start_rep_descriptor_;
  metadata.reflection = msg_showhand_start_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_showhand_giveup_req::kGiveUpFieldNumber;
#endif  // !_MSC_VER

msg_showhand_giveup_req::msg_showhand_giveup_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_showhand_giveup_req::InitAsDefaultInstance() {
}

msg_showhand_giveup_req::msg_showhand_giveup_req(const msg_showhand_giveup_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_showhand_giveup_req::SharedCtor() {
  _cached_size_ = 0;
  give_up_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_showhand_giveup_req::~msg_showhand_giveup_req() {
  SharedDtor();
}

void msg_showhand_giveup_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_showhand_giveup_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_showhand_giveup_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_showhand_giveup_req_descriptor_;
}

const msg_showhand_giveup_req& msg_showhand_giveup_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_showhand_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_showhand_giveup_req* msg_showhand_giveup_req::default_instance_ = NULL;

msg_showhand_giveup_req* msg_showhand_giveup_req::New() const {
  return new msg_showhand_giveup_req;
}

void msg_showhand_giveup_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    give_up_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_showhand_giveup_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 give_up = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &give_up_)));
          set_has_give_up();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_showhand_giveup_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 give_up = 1;
  if (has_give_up()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->give_up(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_showhand_giveup_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 give_up = 1;
  if (has_give_up()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->give_up(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_showhand_giveup_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 give_up = 1;
    if (has_give_up()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->give_up());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_showhand_giveup_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_showhand_giveup_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_showhand_giveup_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_showhand_giveup_req::MergeFrom(const msg_showhand_giveup_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_give_up()) {
      set_give_up(from.give_up());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_showhand_giveup_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_showhand_giveup_req::CopyFrom(const msg_showhand_giveup_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_showhand_giveup_req::IsInitialized() const {

  return true;
}

void msg_showhand_giveup_req::Swap(msg_showhand_giveup_req* other) {
  if (other != this) {
    std::swap(give_up_, other->give_up_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_showhand_giveup_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_showhand_giveup_req_descriptor_;
  metadata.reflection = msg_showhand_giveup_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_showhand_giveup_rep::kGiveupUserFieldNumber;
const int msg_showhand_giveup_rep::kCurUserFieldNumber;
const int msg_showhand_giveup_rep::kDrawMaxScoreFieldNumber;
const int msg_showhand_giveup_rep::kTurnMaxScoreFieldNumber;
#endif  // !_MSC_VER

msg_showhand_giveup_rep::msg_showhand_giveup_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_showhand_giveup_rep::InitAsDefaultInstance() {
}

msg_showhand_giveup_rep::msg_showhand_giveup_rep(const msg_showhand_giveup_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_showhand_giveup_rep::SharedCtor() {
  _cached_size_ = 0;
  giveup_user_ = 0u;
  cur_user_ = 0u;
  draw_max_score_ = GOOGLE_LONGLONG(0);
  turn_max_score_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_showhand_giveup_rep::~msg_showhand_giveup_rep() {
  SharedDtor();
}

void msg_showhand_giveup_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_showhand_giveup_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_showhand_giveup_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_showhand_giveup_rep_descriptor_;
}

const msg_showhand_giveup_rep& msg_showhand_giveup_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_showhand_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_showhand_giveup_rep* msg_showhand_giveup_rep::default_instance_ = NULL;

msg_showhand_giveup_rep* msg_showhand_giveup_rep::New() const {
  return new msg_showhand_giveup_rep;
}

void msg_showhand_giveup_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    giveup_user_ = 0u;
    cur_user_ = 0u;
    draw_max_score_ = GOOGLE_LONGLONG(0);
    turn_max_score_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_showhand_giveup_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 giveup_user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &giveup_user_)));
          set_has_giveup_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_user;
        break;
      }

      // optional uint32 cur_user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_user_)));
          set_has_cur_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_draw_max_score;
        break;
      }

      // optional int64 draw_max_score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_draw_max_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &draw_max_score_)));
          set_has_draw_max_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_turn_max_score;
        break;
      }

      // optional int64 turn_max_score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turn_max_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &turn_max_score_)));
          set_has_turn_max_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_showhand_giveup_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 giveup_user = 1;
  if (has_giveup_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->giveup_user(), output);
  }

  // optional uint32 cur_user = 2;
  if (has_cur_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cur_user(), output);
  }

  // optional int64 draw_max_score = 3;
  if (has_draw_max_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->draw_max_score(), output);
  }

  // optional int64 turn_max_score = 4;
  if (has_turn_max_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->turn_max_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_showhand_giveup_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 giveup_user = 1;
  if (has_giveup_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->giveup_user(), target);
  }

  // optional uint32 cur_user = 2;
  if (has_cur_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cur_user(), target);
  }

  // optional int64 draw_max_score = 3;
  if (has_draw_max_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->draw_max_score(), target);
  }

  // optional int64 turn_max_score = 4;
  if (has_turn_max_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->turn_max_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_showhand_giveup_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 giveup_user = 1;
    if (has_giveup_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->giveup_user());
    }

    // optional uint32 cur_user = 2;
    if (has_cur_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_user());
    }

    // optional int64 draw_max_score = 3;
    if (has_draw_max_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->draw_max_score());
    }

    // optional int64 turn_max_score = 4;
    if (has_turn_max_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->turn_max_score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_showhand_giveup_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_showhand_giveup_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_showhand_giveup_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_showhand_giveup_rep::MergeFrom(const msg_showhand_giveup_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_giveup_user()) {
      set_giveup_user(from.giveup_user());
    }
    if (from.has_cur_user()) {
      set_cur_user(from.cur_user());
    }
    if (from.has_draw_max_score()) {
      set_draw_max_score(from.draw_max_score());
    }
    if (from.has_turn_max_score()) {
      set_turn_max_score(from.turn_max_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_showhand_giveup_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_showhand_giveup_rep::CopyFrom(const msg_showhand_giveup_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_showhand_giveup_rep::IsInitialized() const {

  return true;
}

void msg_showhand_giveup_rep::Swap(msg_showhand_giveup_rep* other) {
  if (other != this) {
    std::swap(giveup_user_, other->giveup_user_);
    std::swap(cur_user_, other->cur_user_);
    std::swap(draw_max_score_, other->draw_max_score_);
    std::swap(turn_max_score_, other->turn_max_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_showhand_giveup_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_showhand_giveup_rep_descriptor_;
  metadata.reflection = msg_showhand_giveup_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_showhand_addscore_req::kScoreFieldNumber;
#endif  // !_MSC_VER

msg_showhand_addscore_req::msg_showhand_addscore_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_showhand_addscore_req::InitAsDefaultInstance() {
}

msg_showhand_addscore_req::msg_showhand_addscore_req(const msg_showhand_addscore_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_showhand_addscore_req::SharedCtor() {
  _cached_size_ = 0;
  score_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_showhand_addscore_req::~msg_showhand_addscore_req() {
  SharedDtor();
}

void msg_showhand_addscore_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_showhand_addscore_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_showhand_addscore_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_showhand_addscore_req_descriptor_;
}

const msg_showhand_addscore_req& msg_showhand_addscore_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_showhand_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_showhand_addscore_req* msg_showhand_addscore_req::default_instance_ = NULL;

msg_showhand_addscore_req* msg_showhand_addscore_req::New() const {
  return new msg_showhand_addscore_req;
}

void msg_showhand_addscore_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    score_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_showhand_addscore_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_showhand_addscore_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_showhand_addscore_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 score = 1;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_showhand_addscore_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_showhand_addscore_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_showhand_addscore_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_showhand_addscore_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_showhand_addscore_req::MergeFrom(const msg_showhand_addscore_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_showhand_addscore_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_showhand_addscore_req::CopyFrom(const msg_showhand_addscore_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_showhand_addscore_req::IsInitialized() const {

  return true;
}

void msg_showhand_addscore_req::Swap(msg_showhand_addscore_req* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_showhand_addscore_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_showhand_addscore_req_descriptor_;
  metadata.reflection = msg_showhand_addscore_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_showhand_addscore_rep::kCurUserFieldNumber;
const int msg_showhand_addscore_rep::kAddScoreUserFieldNumber;
const int msg_showhand_addscore_rep::kTurnLessScoreFieldNumber;
const int msg_showhand_addscore_rep::kUserScoreCountFieldNumber;
const int msg_showhand_addscore_rep::kShowHandFieldNumber;
#endif  // !_MSC_VER

msg_showhand_addscore_rep::msg_showhand_addscore_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_showhand_addscore_rep::InitAsDefaultInstance() {
}

msg_showhand_addscore_rep::msg_showhand_addscore_rep(const msg_showhand_addscore_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_showhand_addscore_rep::SharedCtor() {
  _cached_size_ = 0;
  cur_user_ = 0u;
  add_score_user_ = 0u;
  turn_less_score_ = GOOGLE_LONGLONG(0);
  user_score_count_ = GOOGLE_LONGLONG(0);
  show_hand_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_showhand_addscore_rep::~msg_showhand_addscore_rep() {
  SharedDtor();
}

void msg_showhand_addscore_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_showhand_addscore_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_showhand_addscore_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_showhand_addscore_rep_descriptor_;
}

const msg_showhand_addscore_rep& msg_showhand_addscore_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_showhand_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_showhand_addscore_rep* msg_showhand_addscore_rep::default_instance_ = NULL;

msg_showhand_addscore_rep* msg_showhand_addscore_rep::New() const {
  return new msg_showhand_addscore_rep;
}

void msg_showhand_addscore_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cur_user_ = 0u;
    add_score_user_ = 0u;
    turn_less_score_ = GOOGLE_LONGLONG(0);
    user_score_count_ = GOOGLE_LONGLONG(0);
    show_hand_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_showhand_addscore_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cur_user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_user_)));
          set_has_cur_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_add_score_user;
        break;
      }

      // optional uint32 add_score_user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_score_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_score_user_)));
          set_has_add_score_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_turn_less_score;
        break;
      }

      // optional int64 turn_less_score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turn_less_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &turn_less_score_)));
          set_has_turn_less_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_user_score_count;
        break;
      }

      // optional int64 user_score_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_score_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_score_count_)));
          set_has_user_score_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_show_hand;
        break;
      }

      // optional uint32 show_hand = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_hand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &show_hand_)));
          set_has_show_hand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_showhand_addscore_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cur_user = 1;
  if (has_cur_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cur_user(), output);
  }

  // optional uint32 add_score_user = 2;
  if (has_add_score_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->add_score_user(), output);
  }

  // optional int64 turn_less_score = 3;
  if (has_turn_less_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->turn_less_score(), output);
  }

  // optional int64 user_score_count = 4;
  if (has_user_score_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->user_score_count(), output);
  }

  // optional uint32 show_hand = 5;
  if (has_show_hand()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->show_hand(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_showhand_addscore_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cur_user = 1;
  if (has_cur_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cur_user(), target);
  }

  // optional uint32 add_score_user = 2;
  if (has_add_score_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->add_score_user(), target);
  }

  // optional int64 turn_less_score = 3;
  if (has_turn_less_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->turn_less_score(), target);
  }

  // optional int64 user_score_count = 4;
  if (has_user_score_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->user_score_count(), target);
  }

  // optional uint32 show_hand = 5;
  if (has_show_hand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->show_hand(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_showhand_addscore_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cur_user = 1;
    if (has_cur_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_user());
    }

    // optional uint32 add_score_user = 2;
    if (has_add_score_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->add_score_user());
    }

    // optional int64 turn_less_score = 3;
    if (has_turn_less_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->turn_less_score());
    }

    // optional int64 user_score_count = 4;
    if (has_user_score_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_score_count());
    }

    // optional uint32 show_hand = 5;
    if (has_show_hand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->show_hand());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_showhand_addscore_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_showhand_addscore_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_showhand_addscore_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_showhand_addscore_rep::MergeFrom(const msg_showhand_addscore_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur_user()) {
      set_cur_user(from.cur_user());
    }
    if (from.has_add_score_user()) {
      set_add_score_user(from.add_score_user());
    }
    if (from.has_turn_less_score()) {
      set_turn_less_score(from.turn_less_score());
    }
    if (from.has_user_score_count()) {
      set_user_score_count(from.user_score_count());
    }
    if (from.has_show_hand()) {
      set_show_hand(from.show_hand());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_showhand_addscore_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_showhand_addscore_rep::CopyFrom(const msg_showhand_addscore_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_showhand_addscore_rep::IsInitialized() const {

  return true;
}

void msg_showhand_addscore_rep::Swap(msg_showhand_addscore_rep* other) {
  if (other != this) {
    std::swap(cur_user_, other->cur_user_);
    std::swap(add_score_user_, other->add_score_user_);
    std::swap(turn_less_score_, other->turn_less_score_);
    std::swap(user_score_count_, other->user_score_count_);
    std::swap(show_hand_, other->show_hand_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_showhand_addscore_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_showhand_addscore_rep_descriptor_;
  metadata.reflection = msg_showhand_addscore_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_showhand_sendcard_rep::kCurUserFieldNumber;
const int msg_showhand_sendcard_rep::kStartChairidFieldNumber;
const int msg_showhand_sendcard_rep::kTurnMaxScoreFieldNumber;
const int msg_showhand_sendcard_rep::kCardDataFieldNumber;
#endif  // !_MSC_VER

msg_showhand_sendcard_rep::msg_showhand_sendcard_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_showhand_sendcard_rep::InitAsDefaultInstance() {
}

msg_showhand_sendcard_rep::msg_showhand_sendcard_rep(const msg_showhand_sendcard_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_showhand_sendcard_rep::SharedCtor() {
  _cached_size_ = 0;
  cur_user_ = 0u;
  start_chairid_ = 0u;
  turn_max_score_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_showhand_sendcard_rep::~msg_showhand_sendcard_rep() {
  SharedDtor();
}

void msg_showhand_sendcard_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_showhand_sendcard_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_showhand_sendcard_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_showhand_sendcard_rep_descriptor_;
}

const msg_showhand_sendcard_rep& msg_showhand_sendcard_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_showhand_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_showhand_sendcard_rep* msg_showhand_sendcard_rep::default_instance_ = NULL;

msg_showhand_sendcard_rep* msg_showhand_sendcard_rep::New() const {
  return new msg_showhand_sendcard_rep;
}

void msg_showhand_sendcard_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cur_user_ = 0u;
    start_chairid_ = 0u;
    turn_max_score_ = GOOGLE_LONGLONG(0);
  }
  card_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_showhand_sendcard_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cur_user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_user_)));
          set_has_cur_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start_chairid;
        break;
      }

      // optional uint32 start_chairid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_chairid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_chairid_)));
          set_has_start_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_turn_max_score;
        break;
      }

      // optional int64 turn_max_score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turn_max_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &turn_max_score_)));
          set_has_turn_max_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_card_data;
        break;
      }

      // repeated .net.msg_cards card_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_card_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_showhand_sendcard_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cur_user = 1;
  if (has_cur_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cur_user(), output);
  }

  // optional uint32 start_chairid = 2;
  if (has_start_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->start_chairid(), output);
  }

  // optional int64 turn_max_score = 3;
  if (has_turn_max_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->turn_max_score(), output);
  }

  // repeated .net.msg_cards card_data = 4;
  for (int i = 0; i < this->card_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->card_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_showhand_sendcard_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cur_user = 1;
  if (has_cur_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cur_user(), target);
  }

  // optional uint32 start_chairid = 2;
  if (has_start_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->start_chairid(), target);
  }

  // optional int64 turn_max_score = 3;
  if (has_turn_max_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->turn_max_score(), target);
  }

  // repeated .net.msg_cards card_data = 4;
  for (int i = 0; i < this->card_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->card_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_showhand_sendcard_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cur_user = 1;
    if (has_cur_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_user());
    }

    // optional uint32 start_chairid = 2;
    if (has_start_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_chairid());
    }

    // optional int64 turn_max_score = 3;
    if (has_turn_max_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->turn_max_score());
    }

  }
  // repeated .net.msg_cards card_data = 4;
  total_size += 1 * this->card_data_size();
  for (int i = 0; i < this->card_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->card_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_showhand_sendcard_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_showhand_sendcard_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_showhand_sendcard_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_showhand_sendcard_rep::MergeFrom(const msg_showhand_sendcard_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_data_.MergeFrom(from.card_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur_user()) {
      set_cur_user(from.cur_user());
    }
    if (from.has_start_chairid()) {
      set_start_chairid(from.start_chairid());
    }
    if (from.has_turn_max_score()) {
      set_turn_max_score(from.turn_max_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_showhand_sendcard_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_showhand_sendcard_rep::CopyFrom(const msg_showhand_sendcard_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_showhand_sendcard_rep::IsInitialized() const {

  return true;
}

void msg_showhand_sendcard_rep::Swap(msg_showhand_sendcard_rep* other) {
  if (other != this) {
    std::swap(cur_user_, other->cur_user_);
    std::swap(start_chairid_, other->start_chairid_);
    std::swap(turn_max_score_, other->turn_max_score_);
    card_data_.Swap(&other->card_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_showhand_sendcard_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_showhand_sendcard_rep_descriptor_;
  metadata.reflection = msg_showhand_sendcard_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_showhand_game_over_rep::kCardDataFieldNumber;
const int msg_showhand_game_over_rep::kGameScoreFieldNumber;
const int msg_showhand_game_over_rep::kHistoryScoreFieldNumber;
const int msg_showhand_game_over_rep::kHandCardDataFieldNumber;
#endif  // !_MSC_VER

msg_showhand_game_over_rep::msg_showhand_game_over_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_showhand_game_over_rep::InitAsDefaultInstance() {
}

msg_showhand_game_over_rep::msg_showhand_game_over_rep(const msg_showhand_game_over_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_showhand_game_over_rep::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_showhand_game_over_rep::~msg_showhand_game_over_rep() {
  SharedDtor();
}

void msg_showhand_game_over_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_showhand_game_over_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_showhand_game_over_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_showhand_game_over_rep_descriptor_;
}

const msg_showhand_game_over_rep& msg_showhand_game_over_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_showhand_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_showhand_game_over_rep* msg_showhand_game_over_rep::default_instance_ = NULL;

msg_showhand_game_over_rep* msg_showhand_game_over_rep::New() const {
  return new msg_showhand_game_over_rep;
}

void msg_showhand_game_over_rep::Clear() {
  card_data_.Clear();
  game_score_.Clear();
  history_score_.Clear();
  hand_card_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_showhand_game_over_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .net.msg_cards card_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_card_data;
        if (input->ExpectTag(16)) goto parse_game_score;
        break;
      }

      // repeated int64 game_score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_game_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_game_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_score;
        if (input->ExpectTag(24)) goto parse_history_score;
        break;
      }

      // repeated int64 history_score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_history_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_history_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_history_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_history_score;
        if (input->ExpectTag(34)) goto parse_hand_card_data;
        break;
      }

      // repeated .net.msg_cards hand_card_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hand_card_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hand_card_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_hand_card_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_showhand_game_over_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .net.msg_cards card_data = 1;
  for (int i = 0; i < this->card_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->card_data(i), output);
  }

  // repeated int64 game_score = 2;
  for (int i = 0; i < this->game_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->game_score(i), output);
  }

  // repeated int64 history_score = 3;
  for (int i = 0; i < this->history_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->history_score(i), output);
  }

  // repeated .net.msg_cards hand_card_data = 4;
  for (int i = 0; i < this->hand_card_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->hand_card_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_showhand_game_over_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .net.msg_cards card_data = 1;
  for (int i = 0; i < this->card_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->card_data(i), target);
  }

  // repeated int64 game_score = 2;
  for (int i = 0; i < this->game_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->game_score(i), target);
  }

  // repeated int64 history_score = 3;
  for (int i = 0; i < this->history_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->history_score(i), target);
  }

  // repeated .net.msg_cards hand_card_data = 4;
  for (int i = 0; i < this->hand_card_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->hand_card_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_showhand_game_over_rep::ByteSize() const {
  int total_size = 0;

  // repeated .net.msg_cards card_data = 1;
  total_size += 1 * this->card_data_size();
  for (int i = 0; i < this->card_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->card_data(i));
  }

  // repeated int64 game_score = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->game_score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->game_score(i));
    }
    total_size += 1 * this->game_score_size() + data_size;
  }

  // repeated int64 history_score = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->history_score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->history_score(i));
    }
    total_size += 1 * this->history_score_size() + data_size;
  }

  // repeated .net.msg_cards hand_card_data = 4;
  total_size += 1 * this->hand_card_data_size();
  for (int i = 0; i < this->hand_card_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hand_card_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_showhand_game_over_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_showhand_game_over_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_showhand_game_over_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_showhand_game_over_rep::MergeFrom(const msg_showhand_game_over_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_data_.MergeFrom(from.card_data_);
  game_score_.MergeFrom(from.game_score_);
  history_score_.MergeFrom(from.history_score_);
  hand_card_data_.MergeFrom(from.hand_card_data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_showhand_game_over_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_showhand_game_over_rep::CopyFrom(const msg_showhand_game_over_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_showhand_game_over_rep::IsInitialized() const {

  return true;
}

void msg_showhand_game_over_rep::Swap(msg_showhand_game_over_rep* other) {
  if (other != this) {
    card_data_.Swap(&other->card_data_);
    game_score_.Swap(&other->game_score_);
    history_score_.Swap(&other->history_score_);
    hand_card_data_.Swap(&other->hand_card_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_showhand_game_over_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_showhand_game_over_rep_descriptor_;
  metadata.reflection = msg_showhand_game_over_rep_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace net

// @@protoc_insertion_point(global_scope)
