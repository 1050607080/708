// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: everycolor_logic_msg.proto

#ifndef PROTOBUF_everycolor_5flogic_5fmsg_2eproto__INCLUDED
#define PROTOBUF_everycolor_5flogic_5fmsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "base_msg_struct.pb.h"
#include "error_code.pb.h"
// @@protoc_insertion_point(includes)

namespace net {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_everycolor_5flogic_5fmsg_2eproto();
void protobuf_AssignDesc_everycolor_5flogic_5fmsg_2eproto();
void protobuf_ShutdownFile_everycolor_5flogic_5fmsg_2eproto();

class msg_enter_every_color_gamesvr_req;
class msg_enter_every_color_gamesvr_rep;
class msg_leave_every_color_gamesvr_req;
class msg_leave_every_color_gamesvr_rep;
class msg_everycolor_game_info_play_rep;
class msg_everycolor_game_info_snatch_coin_enter_req;
class msg_everycolor_game_info_snatch_coin_enter_rep;
class msg_everycolor_start_rep;
class msg_everycolor_snatch_coin_start_rep;
class msg_everycolor_place_jetton_req;
class msg_everycolor_place_jetton_rep;
class msg_everycolor_place_jetton_broadcast;
class msg_everycolor_snatch_coin_req;
class msg_everycolor_snatch_coin_rep;
class msg_everycolor_snatch_coin_broadcast;
class msg_everycolor_send_card_rep;
class msg_everycolor_game_end;
class msg_everycolor_snatch_coin_game_status_rep;
class msg_everycolor_snatch_coin_game_end;
class msg_everycolor_snatch_coin_state;

// ===================================================================

class msg_enter_every_color_gamesvr_req : public ::google::protobuf::Message {
 public:
  msg_enter_every_color_gamesvr_req();
  virtual ~msg_enter_every_color_gamesvr_req();

  msg_enter_every_color_gamesvr_req(const msg_enter_every_color_gamesvr_req& from);

  inline msg_enter_every_color_gamesvr_req& operator=(const msg_enter_every_color_gamesvr_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_enter_every_color_gamesvr_req& default_instance();

  void Swap(msg_enter_every_color_gamesvr_req* other);

  // implements Message ----------------------------------------------

  msg_enter_every_color_gamesvr_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_enter_every_color_gamesvr_req& from);
  void MergeFrom(const msg_enter_every_color_gamesvr_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:net.msg_enter_every_color_gamesvr_req)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_everycolor_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_everycolor_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_everycolor_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_enter_every_color_gamesvr_req* default_instance_;
};
// -------------------------------------------------------------------

class msg_enter_every_color_gamesvr_rep : public ::google::protobuf::Message {
 public:
  msg_enter_every_color_gamesvr_rep();
  virtual ~msg_enter_every_color_gamesvr_rep();

  msg_enter_every_color_gamesvr_rep(const msg_enter_every_color_gamesvr_rep& from);

  inline msg_enter_every_color_gamesvr_rep& operator=(const msg_enter_every_color_gamesvr_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_enter_every_color_gamesvr_rep& default_instance();

  void Swap(msg_enter_every_color_gamesvr_rep* other);

  // implements Message ----------------------------------------------

  msg_enter_every_color_gamesvr_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_enter_every_color_gamesvr_rep& from);
  void MergeFrom(const msg_enter_every_color_gamesvr_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // optional uint32 svrid = 2;
  inline bool has_svrid() const;
  inline void clear_svrid();
  static const int kSvridFieldNumber = 2;
  inline ::google::protobuf::uint32 svrid() const;
  inline void set_svrid(::google::protobuf::uint32 value);

  // optional uint32 min_score = 3;
  inline bool has_min_score() const;
  inline void clear_min_score();
  static const int kMinScoreFieldNumber = 3;
  inline ::google::protobuf::uint32 min_score() const;
  inline void set_min_score(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_enter_every_color_gamesvr_rep)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_svrid();
  inline void clear_has_svrid();
  inline void set_has_min_score();
  inline void clear_has_min_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 result_;
  ::google::protobuf::uint32 svrid_;
  ::google::protobuf::uint32 min_score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_everycolor_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_everycolor_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_everycolor_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_enter_every_color_gamesvr_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_leave_every_color_gamesvr_req : public ::google::protobuf::Message {
 public:
  msg_leave_every_color_gamesvr_req();
  virtual ~msg_leave_every_color_gamesvr_req();

  msg_leave_every_color_gamesvr_req(const msg_leave_every_color_gamesvr_req& from);

  inline msg_leave_every_color_gamesvr_req& operator=(const msg_leave_every_color_gamesvr_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_leave_every_color_gamesvr_req& default_instance();

  void Swap(msg_leave_every_color_gamesvr_req* other);

  // implements Message ----------------------------------------------

  msg_leave_every_color_gamesvr_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_leave_every_color_gamesvr_req& from);
  void MergeFrom(const msg_leave_every_color_gamesvr_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrid = 1;
  inline bool has_svrid() const;
  inline void clear_svrid();
  static const int kSvridFieldNumber = 1;
  inline ::google::protobuf::uint32 svrid() const;
  inline void set_svrid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_leave_every_color_gamesvr_req)
 private:
  inline void set_has_svrid();
  inline void clear_has_svrid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 svrid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_everycolor_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_everycolor_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_everycolor_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_leave_every_color_gamesvr_req* default_instance_;
};
// -------------------------------------------------------------------

class msg_leave_every_color_gamesvr_rep : public ::google::protobuf::Message {
 public:
  msg_leave_every_color_gamesvr_rep();
  virtual ~msg_leave_every_color_gamesvr_rep();

  msg_leave_every_color_gamesvr_rep(const msg_leave_every_color_gamesvr_rep& from);

  inline msg_leave_every_color_gamesvr_rep& operator=(const msg_leave_every_color_gamesvr_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_leave_every_color_gamesvr_rep& default_instance();

  void Swap(msg_leave_every_color_gamesvr_rep* other);

  // implements Message ----------------------------------------------

  msg_leave_every_color_gamesvr_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_leave_every_color_gamesvr_rep& from);
  void MergeFrom(const msg_leave_every_color_gamesvr_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // optional uint32 svrid = 2;
  inline bool has_svrid() const;
  inline void clear_svrid();
  static const int kSvridFieldNumber = 2;
  inline ::google::protobuf::uint32 svrid() const;
  inline void set_svrid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_leave_every_color_gamesvr_rep)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_svrid();
  inline void clear_has_svrid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 result_;
  ::google::protobuf::uint32 svrid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_everycolor_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_everycolor_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_everycolor_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_leave_every_color_gamesvr_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_everycolor_game_info_play_rep : public ::google::protobuf::Message {
 public:
  msg_everycolor_game_info_play_rep();
  virtual ~msg_everycolor_game_info_play_rep();

  msg_everycolor_game_info_play_rep(const msg_everycolor_game_info_play_rep& from);

  inline msg_everycolor_game_info_play_rep& operator=(const msg_everycolor_game_info_play_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_everycolor_game_info_play_rep& default_instance();

  void Swap(msg_everycolor_game_info_play_rep* other);

  // implements Message ----------------------------------------------

  msg_everycolor_game_info_play_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_everycolor_game_info_play_rep& from);
  void MergeFrom(const msg_everycolor_game_info_play_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes periods_num = 1;
  inline bool has_periods_num() const;
  inline void clear_periods_num();
  static const int kPeriodsNumFieldNumber = 1;
  inline const ::std::string& periods_num() const;
  inline void set_periods_num(const ::std::string& value);
  inline void set_periods_num(const char* value);
  inline void set_periods_num(const void* value, size_t size);
  inline ::std::string* mutable_periods_num();
  inline ::std::string* release_periods_num();
  inline void set_allocated_periods_num(::std::string* periods_num);

  // optional uint32 time_leave = 2;
  inline bool has_time_leave() const;
  inline void clear_time_leave();
  static const int kTimeLeaveFieldNumber = 2;
  inline ::google::protobuf::uint32 time_leave() const;
  inline void set_time_leave(::google::protobuf::uint32 value);

  // optional uint32 table_cards = 3;
  inline bool has_table_cards() const;
  inline void clear_table_cards();
  static const int kTableCardsFieldNumber = 3;
  inline ::google::protobuf::uint32 table_cards() const;
  inline void set_table_cards(::google::protobuf::uint32 value);

  // optional uint32 game_status = 4;
  inline bool has_game_status() const;
  inline void clear_game_status();
  static const int kGameStatusFieldNumber = 4;
  inline ::google::protobuf::uint32 game_status() const;
  inline void set_game_status(::google::protobuf::uint32 value);

  // repeated int64 self_jetton_score = 5;
  inline int self_jetton_score_size() const;
  inline void clear_self_jetton_score();
  static const int kSelfJettonScoreFieldNumber = 5;
  inline ::google::protobuf::int64 self_jetton_score(int index) const;
  inline void set_self_jetton_score(int index, ::google::protobuf::int64 value);
  inline void add_self_jetton_score(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      self_jetton_score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_self_jetton_score();

  // repeated int64 total_jetton_score = 6;
  inline int total_jetton_score_size() const;
  inline void clear_total_jetton_score();
  static const int kTotalJettonScoreFieldNumber = 6;
  inline ::google::protobuf::int64 total_jetton_score(int index) const;
  inline void set_total_jetton_score(int index, ::google::protobuf::int64 value);
  inline void add_total_jetton_score(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      total_jetton_score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_total_jetton_score();

  // optional int64 win_score_flower = 7;
  inline bool has_win_score_flower() const;
  inline void clear_win_score_flower();
  static const int kWinScoreFlowerFieldNumber = 7;
  inline ::google::protobuf::int64 win_score_flower() const;
  inline void set_win_score_flower(::google::protobuf::int64 value);

  // optional int64 win_score_bigsmall = 8;
  inline bool has_win_score_bigsmall() const;
  inline void clear_win_score_bigsmall();
  static const int kWinScoreBigsmallFieldNumber = 8;
  inline ::google::protobuf::int64 win_score_bigsmall() const;
  inline void set_win_score_bigsmall(::google::protobuf::int64 value);

  // repeated uint32 area_multiple = 9;
  inline int area_multiple_size() const;
  inline void clear_area_multiple();
  static const int kAreaMultipleFieldNumber = 9;
  inline ::google::protobuf::uint32 area_multiple(int index) const;
  inline void set_area_multiple(int index, ::google::protobuf::uint32 value);
  inline void add_area_multiple(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      area_multiple() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_area_multiple();

  // optional int64 basescore = 10;
  inline bool has_basescore() const;
  inline void clear_basescore();
  static const int kBasescoreFieldNumber = 10;
  inline ::google::protobuf::int64 basescore() const;
  inline void set_basescore(::google::protobuf::int64 value);

  // optional uint32 snatch_coin_stop = 11;
  inline bool has_snatch_coin_stop() const;
  inline void clear_snatch_coin_stop();
  static const int kSnatchCoinStopFieldNumber = 11;
  inline ::google::protobuf::uint32 snatch_coin_stop() const;
  inline void set_snatch_coin_stop(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_everycolor_game_info_play_rep)
 private:
  inline void set_has_periods_num();
  inline void clear_has_periods_num();
  inline void set_has_time_leave();
  inline void clear_has_time_leave();
  inline void set_has_table_cards();
  inline void clear_has_table_cards();
  inline void set_has_game_status();
  inline void clear_has_game_status();
  inline void set_has_win_score_flower();
  inline void clear_has_win_score_flower();
  inline void set_has_win_score_bigsmall();
  inline void clear_has_win_score_bigsmall();
  inline void set_has_basescore();
  inline void clear_has_basescore();
  inline void set_has_snatch_coin_stop();
  inline void clear_has_snatch_coin_stop();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* periods_num_;
  ::google::protobuf::uint32 time_leave_;
  ::google::protobuf::uint32 table_cards_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > self_jetton_score_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > total_jetton_score_;
  ::google::protobuf::int64 win_score_flower_;
  ::google::protobuf::uint32 game_status_;
  ::google::protobuf::uint32 snatch_coin_stop_;
  ::google::protobuf::int64 win_score_bigsmall_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > area_multiple_;
  ::google::protobuf::int64 basescore_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_everycolor_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_everycolor_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_everycolor_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_everycolor_game_info_play_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_everycolor_game_info_snatch_coin_enter_req : public ::google::protobuf::Message {
 public:
  msg_everycolor_game_info_snatch_coin_enter_req();
  virtual ~msg_everycolor_game_info_snatch_coin_enter_req();

  msg_everycolor_game_info_snatch_coin_enter_req(const msg_everycolor_game_info_snatch_coin_enter_req& from);

  inline msg_everycolor_game_info_snatch_coin_enter_req& operator=(const msg_everycolor_game_info_snatch_coin_enter_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_everycolor_game_info_snatch_coin_enter_req& default_instance();

  void Swap(msg_everycolor_game_info_snatch_coin_enter_req* other);

  // implements Message ----------------------------------------------

  msg_everycolor_game_info_snatch_coin_enter_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_everycolor_game_info_snatch_coin_enter_req& from);
  void MergeFrom(const msg_everycolor_game_info_snatch_coin_enter_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 snatch_type = 1;
  inline bool has_snatch_type() const;
  inline void clear_snatch_type();
  static const int kSnatchTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 snatch_type() const;
  inline void set_snatch_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_everycolor_game_info_snatch_coin_enter_req)
 private:
  inline void set_has_snatch_type();
  inline void clear_has_snatch_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 snatch_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_everycolor_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_everycolor_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_everycolor_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_everycolor_game_info_snatch_coin_enter_req* default_instance_;
};
// -------------------------------------------------------------------

class msg_everycolor_game_info_snatch_coin_enter_rep : public ::google::protobuf::Message {
 public:
  msg_everycolor_game_info_snatch_coin_enter_rep();
  virtual ~msg_everycolor_game_info_snatch_coin_enter_rep();

  msg_everycolor_game_info_snatch_coin_enter_rep(const msg_everycolor_game_info_snatch_coin_enter_rep& from);

  inline msg_everycolor_game_info_snatch_coin_enter_rep& operator=(const msg_everycolor_game_info_snatch_coin_enter_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_everycolor_game_info_snatch_coin_enter_rep& default_instance();

  void Swap(msg_everycolor_game_info_snatch_coin_enter_rep* other);

  // implements Message ----------------------------------------------

  msg_everycolor_game_info_snatch_coin_enter_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_everycolor_game_info_snatch_coin_enter_rep& from);
  void MergeFrom(const msg_everycolor_game_info_snatch_coin_enter_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 snatch_type = 1;
  inline bool has_snatch_type() const;
  inline void clear_snatch_type();
  static const int kSnatchTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 snatch_type() const;
  inline void set_snatch_type(::google::protobuf::uint32 value);

  // optional bytes periods_num = 2;
  inline bool has_periods_num() const;
  inline void clear_periods_num();
  static const int kPeriodsNumFieldNumber = 2;
  inline const ::std::string& periods_num() const;
  inline void set_periods_num(const ::std::string& value);
  inline void set_periods_num(const char* value);
  inline void set_periods_num(const void* value, size_t size);
  inline ::std::string* mutable_periods_num();
  inline ::std::string* release_periods_num();
  inline void set_allocated_periods_num(::std::string* periods_num);

  // optional uint32 game_status = 3;
  inline bool has_game_status() const;
  inline void clear_game_status();
  static const int kGameStatusFieldNumber = 3;
  inline ::google::protobuf::uint32 game_status() const;
  inline void set_game_status(::google::protobuf::uint32 value);

  // optional uint32 residue_card_count = 4;
  inline bool has_residue_card_count() const;
  inline void clear_residue_card_count();
  static const int kResidueCardCountFieldNumber = 4;
  inline ::google::protobuf::uint32 residue_card_count() const;
  inline void set_residue_card_count(::google::protobuf::uint32 value);

  // repeated uint32 card_data = 5;
  inline int card_data_size() const;
  inline void clear_card_data();
  static const int kCardDataFieldNumber = 5;
  inline ::google::protobuf::uint32 card_data(int index) const;
  inline void set_card_data(int index, ::google::protobuf::uint32 value);
  inline void add_card_data(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      card_data() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_card_data();

  // optional uint32 time_leave = 6;
  inline bool has_time_leave() const;
  inline void clear_time_leave();
  static const int kTimeLeaveFieldNumber = 6;
  inline ::google::protobuf::uint32 time_leave() const;
  inline void set_time_leave(::google::protobuf::uint32 value);

  // optional uint32 win_uid = 7;
  inline bool has_win_uid() const;
  inline void clear_win_uid();
  static const int kWinUidFieldNumber = 7;
  inline ::google::protobuf::uint32 win_uid() const;
  inline void set_win_uid(::google::protobuf::uint32 value);

  // optional int64 win_score = 8;
  inline bool has_win_score() const;
  inline void clear_win_score();
  static const int kWinScoreFieldNumber = 8;
  inline ::google::protobuf::int64 win_score() const;
  inline void set_win_score(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:net.msg_everycolor_game_info_snatch_coin_enter_rep)
 private:
  inline void set_has_snatch_type();
  inline void clear_has_snatch_type();
  inline void set_has_periods_num();
  inline void clear_has_periods_num();
  inline void set_has_game_status();
  inline void clear_has_game_status();
  inline void set_has_residue_card_count();
  inline void clear_has_residue_card_count();
  inline void set_has_time_leave();
  inline void clear_has_time_leave();
  inline void set_has_win_uid();
  inline void clear_has_win_uid();
  inline void set_has_win_score();
  inline void clear_has_win_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* periods_num_;
  ::google::protobuf::uint32 snatch_type_;
  ::google::protobuf::uint32 game_status_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > card_data_;
  ::google::protobuf::uint32 residue_card_count_;
  ::google::protobuf::uint32 time_leave_;
  ::google::protobuf::int64 win_score_;
  ::google::protobuf::uint32 win_uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_everycolor_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_everycolor_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_everycolor_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_everycolor_game_info_snatch_coin_enter_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_everycolor_start_rep : public ::google::protobuf::Message {
 public:
  msg_everycolor_start_rep();
  virtual ~msg_everycolor_start_rep();

  msg_everycolor_start_rep(const msg_everycolor_start_rep& from);

  inline msg_everycolor_start_rep& operator=(const msg_everycolor_start_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_everycolor_start_rep& default_instance();

  void Swap(msg_everycolor_start_rep* other);

  // implements Message ----------------------------------------------

  msg_everycolor_start_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_everycolor_start_rep& from);
  void MergeFrom(const msg_everycolor_start_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes periods_num = 1;
  inline bool has_periods_num() const;
  inline void clear_periods_num();
  static const int kPeriodsNumFieldNumber = 1;
  inline const ::std::string& periods_num() const;
  inline void set_periods_num(const ::std::string& value);
  inline void set_periods_num(const char* value);
  inline void set_periods_num(const void* value, size_t size);
  inline ::std::string* mutable_periods_num();
  inline ::std::string* release_periods_num();
  inline void set_allocated_periods_num(::std::string* periods_num);

  // optional uint32 time_leave = 2;
  inline bool has_time_leave() const;
  inline void clear_time_leave();
  static const int kTimeLeaveFieldNumber = 2;
  inline ::google::protobuf::uint32 time_leave() const;
  inline void set_time_leave(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_everycolor_start_rep)
 private:
  inline void set_has_periods_num();
  inline void clear_has_periods_num();
  inline void set_has_time_leave();
  inline void clear_has_time_leave();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* periods_num_;
  ::google::protobuf::uint32 time_leave_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_everycolor_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_everycolor_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_everycolor_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_everycolor_start_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_everycolor_snatch_coin_start_rep : public ::google::protobuf::Message {
 public:
  msg_everycolor_snatch_coin_start_rep();
  virtual ~msg_everycolor_snatch_coin_start_rep();

  msg_everycolor_snatch_coin_start_rep(const msg_everycolor_snatch_coin_start_rep& from);

  inline msg_everycolor_snatch_coin_start_rep& operator=(const msg_everycolor_snatch_coin_start_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_everycolor_snatch_coin_start_rep& default_instance();

  void Swap(msg_everycolor_snatch_coin_start_rep* other);

  // implements Message ----------------------------------------------

  msg_everycolor_snatch_coin_start_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_everycolor_snatch_coin_start_rep& from);
  void MergeFrom(const msg_everycolor_snatch_coin_start_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes periods_num = 1;
  inline bool has_periods_num() const;
  inline void clear_periods_num();
  static const int kPeriodsNumFieldNumber = 1;
  inline const ::std::string& periods_num() const;
  inline void set_periods_num(const ::std::string& value);
  inline void set_periods_num(const char* value);
  inline void set_periods_num(const void* value, size_t size);
  inline ::std::string* mutable_periods_num();
  inline ::std::string* release_periods_num();
  inline void set_allocated_periods_num(::std::string* periods_num);

  // @@protoc_insertion_point(class_scope:net.msg_everycolor_snatch_coin_start_rep)
 private:
  inline void set_has_periods_num();
  inline void clear_has_periods_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* periods_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_everycolor_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_everycolor_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_everycolor_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_everycolor_snatch_coin_start_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_everycolor_place_jetton_req : public ::google::protobuf::Message {
 public:
  msg_everycolor_place_jetton_req();
  virtual ~msg_everycolor_place_jetton_req();

  msg_everycolor_place_jetton_req(const msg_everycolor_place_jetton_req& from);

  inline msg_everycolor_place_jetton_req& operator=(const msg_everycolor_place_jetton_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_everycolor_place_jetton_req& default_instance();

  void Swap(msg_everycolor_place_jetton_req* other);

  // implements Message ----------------------------------------------

  msg_everycolor_place_jetton_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_everycolor_place_jetton_req& from);
  void MergeFrom(const msg_everycolor_place_jetton_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 jetton_area = 1;
  inline bool has_jetton_area() const;
  inline void clear_jetton_area();
  static const int kJettonAreaFieldNumber = 1;
  inline ::google::protobuf::uint32 jetton_area() const;
  inline void set_jetton_area(::google::protobuf::uint32 value);

  // optional int64 jetton_score = 2;
  inline bool has_jetton_score() const;
  inline void clear_jetton_score();
  static const int kJettonScoreFieldNumber = 2;
  inline ::google::protobuf::int64 jetton_score() const;
  inline void set_jetton_score(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:net.msg_everycolor_place_jetton_req)
 private:
  inline void set_has_jetton_area();
  inline void clear_has_jetton_area();
  inline void set_has_jetton_score();
  inline void clear_has_jetton_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 jetton_score_;
  ::google::protobuf::uint32 jetton_area_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_everycolor_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_everycolor_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_everycolor_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_everycolor_place_jetton_req* default_instance_;
};
// -------------------------------------------------------------------

class msg_everycolor_place_jetton_rep : public ::google::protobuf::Message {
 public:
  msg_everycolor_place_jetton_rep();
  virtual ~msg_everycolor_place_jetton_rep();

  msg_everycolor_place_jetton_rep(const msg_everycolor_place_jetton_rep& from);

  inline msg_everycolor_place_jetton_rep& operator=(const msg_everycolor_place_jetton_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_everycolor_place_jetton_rep& default_instance();

  void Swap(msg_everycolor_place_jetton_rep* other);

  // implements Message ----------------------------------------------

  msg_everycolor_place_jetton_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_everycolor_place_jetton_rep& from);
  void MergeFrom(const msg_everycolor_place_jetton_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 jetton_area = 1;
  inline bool has_jetton_area() const;
  inline void clear_jetton_area();
  static const int kJettonAreaFieldNumber = 1;
  inline ::google::protobuf::uint32 jetton_area() const;
  inline void set_jetton_area(::google::protobuf::uint32 value);

  // optional int64 jetton_score = 2;
  inline bool has_jetton_score() const;
  inline void clear_jetton_score();
  static const int kJettonScoreFieldNumber = 2;
  inline ::google::protobuf::int64 jetton_score() const;
  inline void set_jetton_score(::google::protobuf::int64 value);

  // optional uint32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // repeated int64 self_jetton_score = 4;
  inline int self_jetton_score_size() const;
  inline void clear_self_jetton_score();
  static const int kSelfJettonScoreFieldNumber = 4;
  inline ::google::protobuf::int64 self_jetton_score(int index) const;
  inline void set_self_jetton_score(int index, ::google::protobuf::int64 value);
  inline void add_self_jetton_score(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      self_jetton_score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_self_jetton_score();

  // @@protoc_insertion_point(class_scope:net.msg_everycolor_place_jetton_rep)
 private:
  inline void set_has_jetton_area();
  inline void clear_has_jetton_area();
  inline void set_has_jetton_score();
  inline void clear_has_jetton_score();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 jetton_score_;
  ::google::protobuf::uint32 jetton_area_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > self_jetton_score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_everycolor_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_everycolor_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_everycolor_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_everycolor_place_jetton_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_everycolor_place_jetton_broadcast : public ::google::protobuf::Message {
 public:
  msg_everycolor_place_jetton_broadcast();
  virtual ~msg_everycolor_place_jetton_broadcast();

  msg_everycolor_place_jetton_broadcast(const msg_everycolor_place_jetton_broadcast& from);

  inline msg_everycolor_place_jetton_broadcast& operator=(const msg_everycolor_place_jetton_broadcast& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_everycolor_place_jetton_broadcast& default_instance();

  void Swap(msg_everycolor_place_jetton_broadcast* other);

  // implements Message ----------------------------------------------

  msg_everycolor_place_jetton_broadcast* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_everycolor_place_jetton_broadcast& from);
  void MergeFrom(const msg_everycolor_place_jetton_broadcast& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 jetton_area = 2;
  inline bool has_jetton_area() const;
  inline void clear_jetton_area();
  static const int kJettonAreaFieldNumber = 2;
  inline ::google::protobuf::uint32 jetton_area() const;
  inline void set_jetton_area(::google::protobuf::uint32 value);

  // optional int64 jetton_score = 3;
  inline bool has_jetton_score() const;
  inline void clear_jetton_score();
  static const int kJettonScoreFieldNumber = 3;
  inline ::google::protobuf::int64 jetton_score() const;
  inline void set_jetton_score(::google::protobuf::int64 value);

  // repeated int64 total_jetton_score = 4;
  inline int total_jetton_score_size() const;
  inline void clear_total_jetton_score();
  static const int kTotalJettonScoreFieldNumber = 4;
  inline ::google::protobuf::int64 total_jetton_score(int index) const;
  inline void set_total_jetton_score(int index, ::google::protobuf::int64 value);
  inline void add_total_jetton_score(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      total_jetton_score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_total_jetton_score();

  // @@protoc_insertion_point(class_scope:net.msg_everycolor_place_jetton_broadcast)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_jetton_area();
  inline void clear_has_jetton_area();
  inline void set_has_jetton_score();
  inline void clear_has_jetton_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 jetton_area_;
  ::google::protobuf::int64 jetton_score_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > total_jetton_score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_everycolor_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_everycolor_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_everycolor_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_everycolor_place_jetton_broadcast* default_instance_;
};
// -------------------------------------------------------------------

class msg_everycolor_snatch_coin_req : public ::google::protobuf::Message {
 public:
  msg_everycolor_snatch_coin_req();
  virtual ~msg_everycolor_snatch_coin_req();

  msg_everycolor_snatch_coin_req(const msg_everycolor_snatch_coin_req& from);

  inline msg_everycolor_snatch_coin_req& operator=(const msg_everycolor_snatch_coin_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_everycolor_snatch_coin_req& default_instance();

  void Swap(msg_everycolor_snatch_coin_req* other);

  // implements Message ----------------------------------------------

  msg_everycolor_snatch_coin_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_everycolor_snatch_coin_req& from);
  void MergeFrom(const msg_everycolor_snatch_coin_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 snatch_type = 1;
  inline bool has_snatch_type() const;
  inline void clear_snatch_type();
  static const int kSnatchTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 snatch_type() const;
  inline void set_snatch_type(::google::protobuf::uint32 value);

  // optional uint32 snatch_count = 2;
  inline bool has_snatch_count() const;
  inline void clear_snatch_count();
  static const int kSnatchCountFieldNumber = 2;
  inline ::google::protobuf::uint32 snatch_count() const;
  inline void set_snatch_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_everycolor_snatch_coin_req)
 private:
  inline void set_has_snatch_type();
  inline void clear_has_snatch_type();
  inline void set_has_snatch_count();
  inline void clear_has_snatch_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 snatch_type_;
  ::google::protobuf::uint32 snatch_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_everycolor_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_everycolor_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_everycolor_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_everycolor_snatch_coin_req* default_instance_;
};
// -------------------------------------------------------------------

class msg_everycolor_snatch_coin_rep : public ::google::protobuf::Message {
 public:
  msg_everycolor_snatch_coin_rep();
  virtual ~msg_everycolor_snatch_coin_rep();

  msg_everycolor_snatch_coin_rep(const msg_everycolor_snatch_coin_rep& from);

  inline msg_everycolor_snatch_coin_rep& operator=(const msg_everycolor_snatch_coin_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_everycolor_snatch_coin_rep& default_instance();

  void Swap(msg_everycolor_snatch_coin_rep* other);

  // implements Message ----------------------------------------------

  msg_everycolor_snatch_coin_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_everycolor_snatch_coin_rep& from);
  void MergeFrom(const msg_everycolor_snatch_coin_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 snatch_type = 1;
  inline bool has_snatch_type() const;
  inline void clear_snatch_type();
  static const int kSnatchTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 snatch_type() const;
  inline void set_snatch_type(::google::protobuf::uint32 value);

  // optional uint32 snatch_count = 2;
  inline bool has_snatch_count() const;
  inline void clear_snatch_count();
  static const int kSnatchCountFieldNumber = 2;
  inline ::google::protobuf::uint32 snatch_count() const;
  inline void set_snatch_count(::google::protobuf::uint32 value);

  // optional uint32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // optional uint32 self_total_count = 4;
  inline bool has_self_total_count() const;
  inline void clear_self_total_count();
  static const int kSelfTotalCountFieldNumber = 4;
  inline ::google::protobuf::uint32 self_total_count() const;
  inline void set_self_total_count(::google::protobuf::uint32 value);

  // repeated uint32 self_snatch_card = 5;
  inline int self_snatch_card_size() const;
  inline void clear_self_snatch_card();
  static const int kSelfSnatchCardFieldNumber = 5;
  inline ::google::protobuf::uint32 self_snatch_card(int index) const;
  inline void set_self_snatch_card(int index, ::google::protobuf::uint32 value);
  inline void add_self_snatch_card(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      self_snatch_card() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_self_snatch_card();

  // optional uint32 residue_card_count = 6;
  inline bool has_residue_card_count() const;
  inline void clear_residue_card_count();
  static const int kResidueCardCountFieldNumber = 6;
  inline ::google::protobuf::uint32 residue_card_count() const;
  inline void set_residue_card_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_everycolor_snatch_coin_rep)
 private:
  inline void set_has_snatch_type();
  inline void clear_has_snatch_type();
  inline void set_has_snatch_count();
  inline void clear_has_snatch_count();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_self_total_count();
  inline void clear_has_self_total_count();
  inline void set_has_residue_card_count();
  inline void clear_has_residue_card_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 snatch_type_;
  ::google::protobuf::uint32 snatch_count_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::uint32 self_total_count_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > self_snatch_card_;
  ::google::protobuf::uint32 residue_card_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_everycolor_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_everycolor_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_everycolor_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_everycolor_snatch_coin_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_everycolor_snatch_coin_broadcast : public ::google::protobuf::Message {
 public:
  msg_everycolor_snatch_coin_broadcast();
  virtual ~msg_everycolor_snatch_coin_broadcast();

  msg_everycolor_snatch_coin_broadcast(const msg_everycolor_snatch_coin_broadcast& from);

  inline msg_everycolor_snatch_coin_broadcast& operator=(const msg_everycolor_snatch_coin_broadcast& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_everycolor_snatch_coin_broadcast& default_instance();

  void Swap(msg_everycolor_snatch_coin_broadcast* other);

  // implements Message ----------------------------------------------

  msg_everycolor_snatch_coin_broadcast* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_everycolor_snatch_coin_broadcast& from);
  void MergeFrom(const msg_everycolor_snatch_coin_broadcast& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 snatch_type = 2;
  inline bool has_snatch_type() const;
  inline void clear_snatch_type();
  static const int kSnatchTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 snatch_type() const;
  inline void set_snatch_type(::google::protobuf::uint32 value);

  // optional uint32 snatch_count = 3;
  inline bool has_snatch_count() const;
  inline void clear_snatch_count();
  static const int kSnatchCountFieldNumber = 3;
  inline ::google::protobuf::uint32 snatch_count() const;
  inline void set_snatch_count(::google::protobuf::uint32 value);

  // optional uint32 total_snatch_count = 4;
  inline bool has_total_snatch_count() const;
  inline void clear_total_snatch_count();
  static const int kTotalSnatchCountFieldNumber = 4;
  inline ::google::protobuf::uint32 total_snatch_count() const;
  inline void set_total_snatch_count(::google::protobuf::uint32 value);

  // repeated uint32 total_snatch_card = 5;
  inline int total_snatch_card_size() const;
  inline void clear_total_snatch_card();
  static const int kTotalSnatchCardFieldNumber = 5;
  inline ::google::protobuf::uint32 total_snatch_card(int index) const;
  inline void set_total_snatch_card(int index, ::google::protobuf::uint32 value);
  inline void add_total_snatch_card(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      total_snatch_card() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_total_snatch_card();

  // @@protoc_insertion_point(class_scope:net.msg_everycolor_snatch_coin_broadcast)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_snatch_type();
  inline void clear_has_snatch_type();
  inline void set_has_snatch_count();
  inline void clear_has_snatch_count();
  inline void set_has_total_snatch_count();
  inline void clear_has_total_snatch_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 snatch_type_;
  ::google::protobuf::uint32 snatch_count_;
  ::google::protobuf::uint32 total_snatch_count_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > total_snatch_card_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_everycolor_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_everycolor_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_everycolor_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_everycolor_snatch_coin_broadcast* default_instance_;
};
// -------------------------------------------------------------------

class msg_everycolor_send_card_rep : public ::google::protobuf::Message {
 public:
  msg_everycolor_send_card_rep();
  virtual ~msg_everycolor_send_card_rep();

  msg_everycolor_send_card_rep(const msg_everycolor_send_card_rep& from);

  inline msg_everycolor_send_card_rep& operator=(const msg_everycolor_send_card_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_everycolor_send_card_rep& default_instance();

  void Swap(msg_everycolor_send_card_rep* other);

  // implements Message ----------------------------------------------

  msg_everycolor_send_card_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_everycolor_send_card_rep& from);
  void MergeFrom(const msg_everycolor_send_card_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 cards = 1;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 1;
  inline ::google::protobuf::uint32 cards(int index) const;
  inline void set_cards(int index, ::google::protobuf::uint32 value);
  inline void add_cards(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cards();

  // @@protoc_insertion_point(class_scope:net.msg_everycolor_send_card_rep)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cards_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_everycolor_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_everycolor_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_everycolor_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_everycolor_send_card_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_everycolor_game_end : public ::google::protobuf::Message {
 public:
  msg_everycolor_game_end();
  virtual ~msg_everycolor_game_end();

  msg_everycolor_game_end(const msg_everycolor_game_end& from);

  inline msg_everycolor_game_end& operator=(const msg_everycolor_game_end& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_everycolor_game_end& default_instance();

  void Swap(msg_everycolor_game_end* other);

  // implements Message ----------------------------------------------

  msg_everycolor_game_end* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_everycolor_game_end& from);
  void MergeFrom(const msg_everycolor_game_end& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 table_cards = 1;
  inline bool has_table_cards() const;
  inline void clear_table_cards();
  static const int kTableCardsFieldNumber = 1;
  inline ::google::protobuf::uint32 table_cards() const;
  inline void set_table_cards(::google::protobuf::uint32 value);

  // optional int64 win_score_flower = 2;
  inline bool has_win_score_flower() const;
  inline void clear_win_score_flower();
  static const int kWinScoreFlowerFieldNumber = 2;
  inline ::google::protobuf::int64 win_score_flower() const;
  inline void set_win_score_flower(::google::protobuf::int64 value);

  // optional int64 win_score_bigsmall = 3;
  inline bool has_win_score_bigsmall() const;
  inline void clear_win_score_bigsmall();
  static const int kWinScoreBigsmallFieldNumber = 3;
  inline ::google::protobuf::int64 win_score_bigsmall() const;
  inline void set_win_score_bigsmall(::google::protobuf::int64 value);

  // optional uint32 time_leave = 4;
  inline bool has_time_leave() const;
  inline void clear_time_leave();
  static const int kTimeLeaveFieldNumber = 4;
  inline ::google::protobuf::uint32 time_leave() const;
  inline void set_time_leave(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_everycolor_game_end)
 private:
  inline void set_has_table_cards();
  inline void clear_has_table_cards();
  inline void set_has_win_score_flower();
  inline void clear_has_win_score_flower();
  inline void set_has_win_score_bigsmall();
  inline void clear_has_win_score_bigsmall();
  inline void set_has_time_leave();
  inline void clear_has_time_leave();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 win_score_flower_;
  ::google::protobuf::uint32 table_cards_;
  ::google::protobuf::uint32 time_leave_;
  ::google::protobuf::int64 win_score_bigsmall_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_everycolor_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_everycolor_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_everycolor_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_everycolor_game_end* default_instance_;
};
// -------------------------------------------------------------------

class msg_everycolor_snatch_coin_game_status_rep : public ::google::protobuf::Message {
 public:
  msg_everycolor_snatch_coin_game_status_rep();
  virtual ~msg_everycolor_snatch_coin_game_status_rep();

  msg_everycolor_snatch_coin_game_status_rep(const msg_everycolor_snatch_coin_game_status_rep& from);

  inline msg_everycolor_snatch_coin_game_status_rep& operator=(const msg_everycolor_snatch_coin_game_status_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_everycolor_snatch_coin_game_status_rep& default_instance();

  void Swap(msg_everycolor_snatch_coin_game_status_rep* other);

  // implements Message ----------------------------------------------

  msg_everycolor_snatch_coin_game_status_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_everycolor_snatch_coin_game_status_rep& from);
  void MergeFrom(const msg_everycolor_snatch_coin_game_status_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 snatch_type = 1;
  inline bool has_snatch_type() const;
  inline void clear_snatch_type();
  static const int kSnatchTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 snatch_type() const;
  inline void set_snatch_type(::google::protobuf::uint32 value);

  // optional uint32 game_status = 2;
  inline bool has_game_status() const;
  inline void clear_game_status();
  static const int kGameStatusFieldNumber = 2;
  inline ::google::protobuf::uint32 game_status() const;
  inline void set_game_status(::google::protobuf::uint32 value);

  // optional uint32 time_leave = 3;
  inline bool has_time_leave() const;
  inline void clear_time_leave();
  static const int kTimeLeaveFieldNumber = 3;
  inline ::google::protobuf::uint32 time_leave() const;
  inline void set_time_leave(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_everycolor_snatch_coin_game_status_rep)
 private:
  inline void set_has_snatch_type();
  inline void clear_has_snatch_type();
  inline void set_has_game_status();
  inline void clear_has_game_status();
  inline void set_has_time_leave();
  inline void clear_has_time_leave();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 snatch_type_;
  ::google::protobuf::uint32 game_status_;
  ::google::protobuf::uint32 time_leave_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_everycolor_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_everycolor_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_everycolor_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_everycolor_snatch_coin_game_status_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_everycolor_snatch_coin_game_end : public ::google::protobuf::Message {
 public:
  msg_everycolor_snatch_coin_game_end();
  virtual ~msg_everycolor_snatch_coin_game_end();

  msg_everycolor_snatch_coin_game_end(const msg_everycolor_snatch_coin_game_end& from);

  inline msg_everycolor_snatch_coin_game_end& operator=(const msg_everycolor_snatch_coin_game_end& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_everycolor_snatch_coin_game_end& default_instance();

  void Swap(msg_everycolor_snatch_coin_game_end* other);

  // implements Message ----------------------------------------------

  msg_everycolor_snatch_coin_game_end* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_everycolor_snatch_coin_game_end& from);
  void MergeFrom(const msg_everycolor_snatch_coin_game_end& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 snatch_type = 1;
  inline bool has_snatch_type() const;
  inline void clear_snatch_type();
  static const int kSnatchTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 snatch_type() const;
  inline void set_snatch_type(::google::protobuf::uint32 value);

  // optional uint32 table_cards = 2;
  inline bool has_table_cards() const;
  inline void clear_table_cards();
  static const int kTableCardsFieldNumber = 2;
  inline ::google::protobuf::uint32 table_cards() const;
  inline void set_table_cards(::google::protobuf::uint32 value);

  // optional uint32 win_uid = 3;
  inline bool has_win_uid() const;
  inline void clear_win_uid();
  static const int kWinUidFieldNumber = 3;
  inline ::google::protobuf::uint32 win_uid() const;
  inline void set_win_uid(::google::protobuf::uint32 value);

  // optional int64 win_score = 4;
  inline bool has_win_score() const;
  inline void clear_win_score();
  static const int kWinScoreFieldNumber = 4;
  inline ::google::protobuf::int64 win_score() const;
  inline void set_win_score(::google::protobuf::int64 value);

  // optional bytes periods_num = 5;
  inline bool has_periods_num() const;
  inline void clear_periods_num();
  static const int kPeriodsNumFieldNumber = 5;
  inline const ::std::string& periods_num() const;
  inline void set_periods_num(const ::std::string& value);
  inline void set_periods_num(const char* value);
  inline void set_periods_num(const void* value, size_t size);
  inline ::std::string* mutable_periods_num();
  inline ::std::string* release_periods_num();
  inline void set_allocated_periods_num(::std::string* periods_num);

  // @@protoc_insertion_point(class_scope:net.msg_everycolor_snatch_coin_game_end)
 private:
  inline void set_has_snatch_type();
  inline void clear_has_snatch_type();
  inline void set_has_table_cards();
  inline void clear_has_table_cards();
  inline void set_has_win_uid();
  inline void clear_has_win_uid();
  inline void set_has_win_score();
  inline void clear_has_win_score();
  inline void set_has_periods_num();
  inline void clear_has_periods_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 snatch_type_;
  ::google::protobuf::uint32 table_cards_;
  ::google::protobuf::int64 win_score_;
  ::std::string* periods_num_;
  ::google::protobuf::uint32 win_uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_everycolor_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_everycolor_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_everycolor_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_everycolor_snatch_coin_game_end* default_instance_;
};
// -------------------------------------------------------------------

class msg_everycolor_snatch_coin_state : public ::google::protobuf::Message {
 public:
  msg_everycolor_snatch_coin_state();
  virtual ~msg_everycolor_snatch_coin_state();

  msg_everycolor_snatch_coin_state(const msg_everycolor_snatch_coin_state& from);

  inline msg_everycolor_snatch_coin_state& operator=(const msg_everycolor_snatch_coin_state& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_everycolor_snatch_coin_state& default_instance();

  void Swap(msg_everycolor_snatch_coin_state* other);

  // implements Message ----------------------------------------------

  msg_everycolor_snatch_coin_state* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_everycolor_snatch_coin_state& from);
  void MergeFrom(const msg_everycolor_snatch_coin_state& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 stop_state = 1;
  inline bool has_stop_state() const;
  inline void clear_stop_state();
  static const int kStopStateFieldNumber = 1;
  inline ::google::protobuf::uint32 stop_state() const;
  inline void set_stop_state(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_everycolor_snatch_coin_state)
 private:
  inline void set_has_stop_state();
  inline void clear_has_stop_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 stop_state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_everycolor_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_everycolor_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_everycolor_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_everycolor_snatch_coin_state* default_instance_;
};
// ===================================================================


// ===================================================================

// msg_enter_every_color_gamesvr_req

// -------------------------------------------------------------------

// msg_enter_every_color_gamesvr_rep

// optional uint32 result = 1;
inline bool msg_enter_every_color_gamesvr_rep::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_enter_every_color_gamesvr_rep::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_enter_every_color_gamesvr_rep::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_enter_every_color_gamesvr_rep::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 msg_enter_every_color_gamesvr_rep::result() const {
  return result_;
}
inline void msg_enter_every_color_gamesvr_rep::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// optional uint32 svrid = 2;
inline bool msg_enter_every_color_gamesvr_rep::has_svrid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_enter_every_color_gamesvr_rep::set_has_svrid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_enter_every_color_gamesvr_rep::clear_has_svrid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_enter_every_color_gamesvr_rep::clear_svrid() {
  svrid_ = 0u;
  clear_has_svrid();
}
inline ::google::protobuf::uint32 msg_enter_every_color_gamesvr_rep::svrid() const {
  return svrid_;
}
inline void msg_enter_every_color_gamesvr_rep::set_svrid(::google::protobuf::uint32 value) {
  set_has_svrid();
  svrid_ = value;
}

// optional uint32 min_score = 3;
inline bool msg_enter_every_color_gamesvr_rep::has_min_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_enter_every_color_gamesvr_rep::set_has_min_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_enter_every_color_gamesvr_rep::clear_has_min_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_enter_every_color_gamesvr_rep::clear_min_score() {
  min_score_ = 0u;
  clear_has_min_score();
}
inline ::google::protobuf::uint32 msg_enter_every_color_gamesvr_rep::min_score() const {
  return min_score_;
}
inline void msg_enter_every_color_gamesvr_rep::set_min_score(::google::protobuf::uint32 value) {
  set_has_min_score();
  min_score_ = value;
}

// -------------------------------------------------------------------

// msg_leave_every_color_gamesvr_req

// optional uint32 svrid = 1;
inline bool msg_leave_every_color_gamesvr_req::has_svrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_leave_every_color_gamesvr_req::set_has_svrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_leave_every_color_gamesvr_req::clear_has_svrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_leave_every_color_gamesvr_req::clear_svrid() {
  svrid_ = 0u;
  clear_has_svrid();
}
inline ::google::protobuf::uint32 msg_leave_every_color_gamesvr_req::svrid() const {
  return svrid_;
}
inline void msg_leave_every_color_gamesvr_req::set_svrid(::google::protobuf::uint32 value) {
  set_has_svrid();
  svrid_ = value;
}

// -------------------------------------------------------------------

// msg_leave_every_color_gamesvr_rep

// optional uint32 result = 1;
inline bool msg_leave_every_color_gamesvr_rep::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_leave_every_color_gamesvr_rep::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_leave_every_color_gamesvr_rep::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_leave_every_color_gamesvr_rep::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 msg_leave_every_color_gamesvr_rep::result() const {
  return result_;
}
inline void msg_leave_every_color_gamesvr_rep::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// optional uint32 svrid = 2;
inline bool msg_leave_every_color_gamesvr_rep::has_svrid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_leave_every_color_gamesvr_rep::set_has_svrid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_leave_every_color_gamesvr_rep::clear_has_svrid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_leave_every_color_gamesvr_rep::clear_svrid() {
  svrid_ = 0u;
  clear_has_svrid();
}
inline ::google::protobuf::uint32 msg_leave_every_color_gamesvr_rep::svrid() const {
  return svrid_;
}
inline void msg_leave_every_color_gamesvr_rep::set_svrid(::google::protobuf::uint32 value) {
  set_has_svrid();
  svrid_ = value;
}

// -------------------------------------------------------------------

// msg_everycolor_game_info_play_rep

// optional bytes periods_num = 1;
inline bool msg_everycolor_game_info_play_rep::has_periods_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_everycolor_game_info_play_rep::set_has_periods_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_everycolor_game_info_play_rep::clear_has_periods_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_everycolor_game_info_play_rep::clear_periods_num() {
  if (periods_num_ != &::google::protobuf::internal::kEmptyString) {
    periods_num_->clear();
  }
  clear_has_periods_num();
}
inline const ::std::string& msg_everycolor_game_info_play_rep::periods_num() const {
  return *periods_num_;
}
inline void msg_everycolor_game_info_play_rep::set_periods_num(const ::std::string& value) {
  set_has_periods_num();
  if (periods_num_ == &::google::protobuf::internal::kEmptyString) {
    periods_num_ = new ::std::string;
  }
  periods_num_->assign(value);
}
inline void msg_everycolor_game_info_play_rep::set_periods_num(const char* value) {
  set_has_periods_num();
  if (periods_num_ == &::google::protobuf::internal::kEmptyString) {
    periods_num_ = new ::std::string;
  }
  periods_num_->assign(value);
}
inline void msg_everycolor_game_info_play_rep::set_periods_num(const void* value, size_t size) {
  set_has_periods_num();
  if (periods_num_ == &::google::protobuf::internal::kEmptyString) {
    periods_num_ = new ::std::string;
  }
  periods_num_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_everycolor_game_info_play_rep::mutable_periods_num() {
  set_has_periods_num();
  if (periods_num_ == &::google::protobuf::internal::kEmptyString) {
    periods_num_ = new ::std::string;
  }
  return periods_num_;
}
inline ::std::string* msg_everycolor_game_info_play_rep::release_periods_num() {
  clear_has_periods_num();
  if (periods_num_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = periods_num_;
    periods_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_everycolor_game_info_play_rep::set_allocated_periods_num(::std::string* periods_num) {
  if (periods_num_ != &::google::protobuf::internal::kEmptyString) {
    delete periods_num_;
  }
  if (periods_num) {
    set_has_periods_num();
    periods_num_ = periods_num;
  } else {
    clear_has_periods_num();
    periods_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 time_leave = 2;
inline bool msg_everycolor_game_info_play_rep::has_time_leave() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_everycolor_game_info_play_rep::set_has_time_leave() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_everycolor_game_info_play_rep::clear_has_time_leave() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_everycolor_game_info_play_rep::clear_time_leave() {
  time_leave_ = 0u;
  clear_has_time_leave();
}
inline ::google::protobuf::uint32 msg_everycolor_game_info_play_rep::time_leave() const {
  return time_leave_;
}
inline void msg_everycolor_game_info_play_rep::set_time_leave(::google::protobuf::uint32 value) {
  set_has_time_leave();
  time_leave_ = value;
}

// optional uint32 table_cards = 3;
inline bool msg_everycolor_game_info_play_rep::has_table_cards() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_everycolor_game_info_play_rep::set_has_table_cards() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_everycolor_game_info_play_rep::clear_has_table_cards() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_everycolor_game_info_play_rep::clear_table_cards() {
  table_cards_ = 0u;
  clear_has_table_cards();
}
inline ::google::protobuf::uint32 msg_everycolor_game_info_play_rep::table_cards() const {
  return table_cards_;
}
inline void msg_everycolor_game_info_play_rep::set_table_cards(::google::protobuf::uint32 value) {
  set_has_table_cards();
  table_cards_ = value;
}

// optional uint32 game_status = 4;
inline bool msg_everycolor_game_info_play_rep::has_game_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_everycolor_game_info_play_rep::set_has_game_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_everycolor_game_info_play_rep::clear_has_game_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_everycolor_game_info_play_rep::clear_game_status() {
  game_status_ = 0u;
  clear_has_game_status();
}
inline ::google::protobuf::uint32 msg_everycolor_game_info_play_rep::game_status() const {
  return game_status_;
}
inline void msg_everycolor_game_info_play_rep::set_game_status(::google::protobuf::uint32 value) {
  set_has_game_status();
  game_status_ = value;
}

// repeated int64 self_jetton_score = 5;
inline int msg_everycolor_game_info_play_rep::self_jetton_score_size() const {
  return self_jetton_score_.size();
}
inline void msg_everycolor_game_info_play_rep::clear_self_jetton_score() {
  self_jetton_score_.Clear();
}
inline ::google::protobuf::int64 msg_everycolor_game_info_play_rep::self_jetton_score(int index) const {
  return self_jetton_score_.Get(index);
}
inline void msg_everycolor_game_info_play_rep::set_self_jetton_score(int index, ::google::protobuf::int64 value) {
  self_jetton_score_.Set(index, value);
}
inline void msg_everycolor_game_info_play_rep::add_self_jetton_score(::google::protobuf::int64 value) {
  self_jetton_score_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
msg_everycolor_game_info_play_rep::self_jetton_score() const {
  return self_jetton_score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
msg_everycolor_game_info_play_rep::mutable_self_jetton_score() {
  return &self_jetton_score_;
}

// repeated int64 total_jetton_score = 6;
inline int msg_everycolor_game_info_play_rep::total_jetton_score_size() const {
  return total_jetton_score_.size();
}
inline void msg_everycolor_game_info_play_rep::clear_total_jetton_score() {
  total_jetton_score_.Clear();
}
inline ::google::protobuf::int64 msg_everycolor_game_info_play_rep::total_jetton_score(int index) const {
  return total_jetton_score_.Get(index);
}
inline void msg_everycolor_game_info_play_rep::set_total_jetton_score(int index, ::google::protobuf::int64 value) {
  total_jetton_score_.Set(index, value);
}
inline void msg_everycolor_game_info_play_rep::add_total_jetton_score(::google::protobuf::int64 value) {
  total_jetton_score_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
msg_everycolor_game_info_play_rep::total_jetton_score() const {
  return total_jetton_score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
msg_everycolor_game_info_play_rep::mutable_total_jetton_score() {
  return &total_jetton_score_;
}

// optional int64 win_score_flower = 7;
inline bool msg_everycolor_game_info_play_rep::has_win_score_flower() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_everycolor_game_info_play_rep::set_has_win_score_flower() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_everycolor_game_info_play_rep::clear_has_win_score_flower() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_everycolor_game_info_play_rep::clear_win_score_flower() {
  win_score_flower_ = GOOGLE_LONGLONG(0);
  clear_has_win_score_flower();
}
inline ::google::protobuf::int64 msg_everycolor_game_info_play_rep::win_score_flower() const {
  return win_score_flower_;
}
inline void msg_everycolor_game_info_play_rep::set_win_score_flower(::google::protobuf::int64 value) {
  set_has_win_score_flower();
  win_score_flower_ = value;
}

// optional int64 win_score_bigsmall = 8;
inline bool msg_everycolor_game_info_play_rep::has_win_score_bigsmall() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void msg_everycolor_game_info_play_rep::set_has_win_score_bigsmall() {
  _has_bits_[0] |= 0x00000080u;
}
inline void msg_everycolor_game_info_play_rep::clear_has_win_score_bigsmall() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void msg_everycolor_game_info_play_rep::clear_win_score_bigsmall() {
  win_score_bigsmall_ = GOOGLE_LONGLONG(0);
  clear_has_win_score_bigsmall();
}
inline ::google::protobuf::int64 msg_everycolor_game_info_play_rep::win_score_bigsmall() const {
  return win_score_bigsmall_;
}
inline void msg_everycolor_game_info_play_rep::set_win_score_bigsmall(::google::protobuf::int64 value) {
  set_has_win_score_bigsmall();
  win_score_bigsmall_ = value;
}

// repeated uint32 area_multiple = 9;
inline int msg_everycolor_game_info_play_rep::area_multiple_size() const {
  return area_multiple_.size();
}
inline void msg_everycolor_game_info_play_rep::clear_area_multiple() {
  area_multiple_.Clear();
}
inline ::google::protobuf::uint32 msg_everycolor_game_info_play_rep::area_multiple(int index) const {
  return area_multiple_.Get(index);
}
inline void msg_everycolor_game_info_play_rep::set_area_multiple(int index, ::google::protobuf::uint32 value) {
  area_multiple_.Set(index, value);
}
inline void msg_everycolor_game_info_play_rep::add_area_multiple(::google::protobuf::uint32 value) {
  area_multiple_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
msg_everycolor_game_info_play_rep::area_multiple() const {
  return area_multiple_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
msg_everycolor_game_info_play_rep::mutable_area_multiple() {
  return &area_multiple_;
}

// optional int64 basescore = 10;
inline bool msg_everycolor_game_info_play_rep::has_basescore() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void msg_everycolor_game_info_play_rep::set_has_basescore() {
  _has_bits_[0] |= 0x00000200u;
}
inline void msg_everycolor_game_info_play_rep::clear_has_basescore() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void msg_everycolor_game_info_play_rep::clear_basescore() {
  basescore_ = GOOGLE_LONGLONG(0);
  clear_has_basescore();
}
inline ::google::protobuf::int64 msg_everycolor_game_info_play_rep::basescore() const {
  return basescore_;
}
inline void msg_everycolor_game_info_play_rep::set_basescore(::google::protobuf::int64 value) {
  set_has_basescore();
  basescore_ = value;
}

// optional uint32 snatch_coin_stop = 11;
inline bool msg_everycolor_game_info_play_rep::has_snatch_coin_stop() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void msg_everycolor_game_info_play_rep::set_has_snatch_coin_stop() {
  _has_bits_[0] |= 0x00000400u;
}
inline void msg_everycolor_game_info_play_rep::clear_has_snatch_coin_stop() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void msg_everycolor_game_info_play_rep::clear_snatch_coin_stop() {
  snatch_coin_stop_ = 0u;
  clear_has_snatch_coin_stop();
}
inline ::google::protobuf::uint32 msg_everycolor_game_info_play_rep::snatch_coin_stop() const {
  return snatch_coin_stop_;
}
inline void msg_everycolor_game_info_play_rep::set_snatch_coin_stop(::google::protobuf::uint32 value) {
  set_has_snatch_coin_stop();
  snatch_coin_stop_ = value;
}

// -------------------------------------------------------------------

// msg_everycolor_game_info_snatch_coin_enter_req

// optional uint32 snatch_type = 1;
inline bool msg_everycolor_game_info_snatch_coin_enter_req::has_snatch_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_everycolor_game_info_snatch_coin_enter_req::set_has_snatch_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_everycolor_game_info_snatch_coin_enter_req::clear_has_snatch_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_everycolor_game_info_snatch_coin_enter_req::clear_snatch_type() {
  snatch_type_ = 0u;
  clear_has_snatch_type();
}
inline ::google::protobuf::uint32 msg_everycolor_game_info_snatch_coin_enter_req::snatch_type() const {
  return snatch_type_;
}
inline void msg_everycolor_game_info_snatch_coin_enter_req::set_snatch_type(::google::protobuf::uint32 value) {
  set_has_snatch_type();
  snatch_type_ = value;
}

// -------------------------------------------------------------------

// msg_everycolor_game_info_snatch_coin_enter_rep

// optional uint32 snatch_type = 1;
inline bool msg_everycolor_game_info_snatch_coin_enter_rep::has_snatch_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_everycolor_game_info_snatch_coin_enter_rep::set_has_snatch_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_everycolor_game_info_snatch_coin_enter_rep::clear_has_snatch_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_everycolor_game_info_snatch_coin_enter_rep::clear_snatch_type() {
  snatch_type_ = 0u;
  clear_has_snatch_type();
}
inline ::google::protobuf::uint32 msg_everycolor_game_info_snatch_coin_enter_rep::snatch_type() const {
  return snatch_type_;
}
inline void msg_everycolor_game_info_snatch_coin_enter_rep::set_snatch_type(::google::protobuf::uint32 value) {
  set_has_snatch_type();
  snatch_type_ = value;
}

// optional bytes periods_num = 2;
inline bool msg_everycolor_game_info_snatch_coin_enter_rep::has_periods_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_everycolor_game_info_snatch_coin_enter_rep::set_has_periods_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_everycolor_game_info_snatch_coin_enter_rep::clear_has_periods_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_everycolor_game_info_snatch_coin_enter_rep::clear_periods_num() {
  if (periods_num_ != &::google::protobuf::internal::kEmptyString) {
    periods_num_->clear();
  }
  clear_has_periods_num();
}
inline const ::std::string& msg_everycolor_game_info_snatch_coin_enter_rep::periods_num() const {
  return *periods_num_;
}
inline void msg_everycolor_game_info_snatch_coin_enter_rep::set_periods_num(const ::std::string& value) {
  set_has_periods_num();
  if (periods_num_ == &::google::protobuf::internal::kEmptyString) {
    periods_num_ = new ::std::string;
  }
  periods_num_->assign(value);
}
inline void msg_everycolor_game_info_snatch_coin_enter_rep::set_periods_num(const char* value) {
  set_has_periods_num();
  if (periods_num_ == &::google::protobuf::internal::kEmptyString) {
    periods_num_ = new ::std::string;
  }
  periods_num_->assign(value);
}
inline void msg_everycolor_game_info_snatch_coin_enter_rep::set_periods_num(const void* value, size_t size) {
  set_has_periods_num();
  if (periods_num_ == &::google::protobuf::internal::kEmptyString) {
    periods_num_ = new ::std::string;
  }
  periods_num_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_everycolor_game_info_snatch_coin_enter_rep::mutable_periods_num() {
  set_has_periods_num();
  if (periods_num_ == &::google::protobuf::internal::kEmptyString) {
    periods_num_ = new ::std::string;
  }
  return periods_num_;
}
inline ::std::string* msg_everycolor_game_info_snatch_coin_enter_rep::release_periods_num() {
  clear_has_periods_num();
  if (periods_num_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = periods_num_;
    periods_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_everycolor_game_info_snatch_coin_enter_rep::set_allocated_periods_num(::std::string* periods_num) {
  if (periods_num_ != &::google::protobuf::internal::kEmptyString) {
    delete periods_num_;
  }
  if (periods_num) {
    set_has_periods_num();
    periods_num_ = periods_num;
  } else {
    clear_has_periods_num();
    periods_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 game_status = 3;
inline bool msg_everycolor_game_info_snatch_coin_enter_rep::has_game_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_everycolor_game_info_snatch_coin_enter_rep::set_has_game_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_everycolor_game_info_snatch_coin_enter_rep::clear_has_game_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_everycolor_game_info_snatch_coin_enter_rep::clear_game_status() {
  game_status_ = 0u;
  clear_has_game_status();
}
inline ::google::protobuf::uint32 msg_everycolor_game_info_snatch_coin_enter_rep::game_status() const {
  return game_status_;
}
inline void msg_everycolor_game_info_snatch_coin_enter_rep::set_game_status(::google::protobuf::uint32 value) {
  set_has_game_status();
  game_status_ = value;
}

// optional uint32 residue_card_count = 4;
inline bool msg_everycolor_game_info_snatch_coin_enter_rep::has_residue_card_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_everycolor_game_info_snatch_coin_enter_rep::set_has_residue_card_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_everycolor_game_info_snatch_coin_enter_rep::clear_has_residue_card_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_everycolor_game_info_snatch_coin_enter_rep::clear_residue_card_count() {
  residue_card_count_ = 0u;
  clear_has_residue_card_count();
}
inline ::google::protobuf::uint32 msg_everycolor_game_info_snatch_coin_enter_rep::residue_card_count() const {
  return residue_card_count_;
}
inline void msg_everycolor_game_info_snatch_coin_enter_rep::set_residue_card_count(::google::protobuf::uint32 value) {
  set_has_residue_card_count();
  residue_card_count_ = value;
}

// repeated uint32 card_data = 5;
inline int msg_everycolor_game_info_snatch_coin_enter_rep::card_data_size() const {
  return card_data_.size();
}
inline void msg_everycolor_game_info_snatch_coin_enter_rep::clear_card_data() {
  card_data_.Clear();
}
inline ::google::protobuf::uint32 msg_everycolor_game_info_snatch_coin_enter_rep::card_data(int index) const {
  return card_data_.Get(index);
}
inline void msg_everycolor_game_info_snatch_coin_enter_rep::set_card_data(int index, ::google::protobuf::uint32 value) {
  card_data_.Set(index, value);
}
inline void msg_everycolor_game_info_snatch_coin_enter_rep::add_card_data(::google::protobuf::uint32 value) {
  card_data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
msg_everycolor_game_info_snatch_coin_enter_rep::card_data() const {
  return card_data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
msg_everycolor_game_info_snatch_coin_enter_rep::mutable_card_data() {
  return &card_data_;
}

// optional uint32 time_leave = 6;
inline bool msg_everycolor_game_info_snatch_coin_enter_rep::has_time_leave() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_everycolor_game_info_snatch_coin_enter_rep::set_has_time_leave() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_everycolor_game_info_snatch_coin_enter_rep::clear_has_time_leave() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_everycolor_game_info_snatch_coin_enter_rep::clear_time_leave() {
  time_leave_ = 0u;
  clear_has_time_leave();
}
inline ::google::protobuf::uint32 msg_everycolor_game_info_snatch_coin_enter_rep::time_leave() const {
  return time_leave_;
}
inline void msg_everycolor_game_info_snatch_coin_enter_rep::set_time_leave(::google::protobuf::uint32 value) {
  set_has_time_leave();
  time_leave_ = value;
}

// optional uint32 win_uid = 7;
inline bool msg_everycolor_game_info_snatch_coin_enter_rep::has_win_uid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_everycolor_game_info_snatch_coin_enter_rep::set_has_win_uid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_everycolor_game_info_snatch_coin_enter_rep::clear_has_win_uid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_everycolor_game_info_snatch_coin_enter_rep::clear_win_uid() {
  win_uid_ = 0u;
  clear_has_win_uid();
}
inline ::google::protobuf::uint32 msg_everycolor_game_info_snatch_coin_enter_rep::win_uid() const {
  return win_uid_;
}
inline void msg_everycolor_game_info_snatch_coin_enter_rep::set_win_uid(::google::protobuf::uint32 value) {
  set_has_win_uid();
  win_uid_ = value;
}

// optional int64 win_score = 8;
inline bool msg_everycolor_game_info_snatch_coin_enter_rep::has_win_score() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void msg_everycolor_game_info_snatch_coin_enter_rep::set_has_win_score() {
  _has_bits_[0] |= 0x00000080u;
}
inline void msg_everycolor_game_info_snatch_coin_enter_rep::clear_has_win_score() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void msg_everycolor_game_info_snatch_coin_enter_rep::clear_win_score() {
  win_score_ = GOOGLE_LONGLONG(0);
  clear_has_win_score();
}
inline ::google::protobuf::int64 msg_everycolor_game_info_snatch_coin_enter_rep::win_score() const {
  return win_score_;
}
inline void msg_everycolor_game_info_snatch_coin_enter_rep::set_win_score(::google::protobuf::int64 value) {
  set_has_win_score();
  win_score_ = value;
}

// -------------------------------------------------------------------

// msg_everycolor_start_rep

// optional bytes periods_num = 1;
inline bool msg_everycolor_start_rep::has_periods_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_everycolor_start_rep::set_has_periods_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_everycolor_start_rep::clear_has_periods_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_everycolor_start_rep::clear_periods_num() {
  if (periods_num_ != &::google::protobuf::internal::kEmptyString) {
    periods_num_->clear();
  }
  clear_has_periods_num();
}
inline const ::std::string& msg_everycolor_start_rep::periods_num() const {
  return *periods_num_;
}
inline void msg_everycolor_start_rep::set_periods_num(const ::std::string& value) {
  set_has_periods_num();
  if (periods_num_ == &::google::protobuf::internal::kEmptyString) {
    periods_num_ = new ::std::string;
  }
  periods_num_->assign(value);
}
inline void msg_everycolor_start_rep::set_periods_num(const char* value) {
  set_has_periods_num();
  if (periods_num_ == &::google::protobuf::internal::kEmptyString) {
    periods_num_ = new ::std::string;
  }
  periods_num_->assign(value);
}
inline void msg_everycolor_start_rep::set_periods_num(const void* value, size_t size) {
  set_has_periods_num();
  if (periods_num_ == &::google::protobuf::internal::kEmptyString) {
    periods_num_ = new ::std::string;
  }
  periods_num_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_everycolor_start_rep::mutable_periods_num() {
  set_has_periods_num();
  if (periods_num_ == &::google::protobuf::internal::kEmptyString) {
    periods_num_ = new ::std::string;
  }
  return periods_num_;
}
inline ::std::string* msg_everycolor_start_rep::release_periods_num() {
  clear_has_periods_num();
  if (periods_num_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = periods_num_;
    periods_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_everycolor_start_rep::set_allocated_periods_num(::std::string* periods_num) {
  if (periods_num_ != &::google::protobuf::internal::kEmptyString) {
    delete periods_num_;
  }
  if (periods_num) {
    set_has_periods_num();
    periods_num_ = periods_num;
  } else {
    clear_has_periods_num();
    periods_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 time_leave = 2;
inline bool msg_everycolor_start_rep::has_time_leave() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_everycolor_start_rep::set_has_time_leave() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_everycolor_start_rep::clear_has_time_leave() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_everycolor_start_rep::clear_time_leave() {
  time_leave_ = 0u;
  clear_has_time_leave();
}
inline ::google::protobuf::uint32 msg_everycolor_start_rep::time_leave() const {
  return time_leave_;
}
inline void msg_everycolor_start_rep::set_time_leave(::google::protobuf::uint32 value) {
  set_has_time_leave();
  time_leave_ = value;
}

// -------------------------------------------------------------------

// msg_everycolor_snatch_coin_start_rep

// optional bytes periods_num = 1;
inline bool msg_everycolor_snatch_coin_start_rep::has_periods_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_everycolor_snatch_coin_start_rep::set_has_periods_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_everycolor_snatch_coin_start_rep::clear_has_periods_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_everycolor_snatch_coin_start_rep::clear_periods_num() {
  if (periods_num_ != &::google::protobuf::internal::kEmptyString) {
    periods_num_->clear();
  }
  clear_has_periods_num();
}
inline const ::std::string& msg_everycolor_snatch_coin_start_rep::periods_num() const {
  return *periods_num_;
}
inline void msg_everycolor_snatch_coin_start_rep::set_periods_num(const ::std::string& value) {
  set_has_periods_num();
  if (periods_num_ == &::google::protobuf::internal::kEmptyString) {
    periods_num_ = new ::std::string;
  }
  periods_num_->assign(value);
}
inline void msg_everycolor_snatch_coin_start_rep::set_periods_num(const char* value) {
  set_has_periods_num();
  if (periods_num_ == &::google::protobuf::internal::kEmptyString) {
    periods_num_ = new ::std::string;
  }
  periods_num_->assign(value);
}
inline void msg_everycolor_snatch_coin_start_rep::set_periods_num(const void* value, size_t size) {
  set_has_periods_num();
  if (periods_num_ == &::google::protobuf::internal::kEmptyString) {
    periods_num_ = new ::std::string;
  }
  periods_num_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_everycolor_snatch_coin_start_rep::mutable_periods_num() {
  set_has_periods_num();
  if (periods_num_ == &::google::protobuf::internal::kEmptyString) {
    periods_num_ = new ::std::string;
  }
  return periods_num_;
}
inline ::std::string* msg_everycolor_snatch_coin_start_rep::release_periods_num() {
  clear_has_periods_num();
  if (periods_num_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = periods_num_;
    periods_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_everycolor_snatch_coin_start_rep::set_allocated_periods_num(::std::string* periods_num) {
  if (periods_num_ != &::google::protobuf::internal::kEmptyString) {
    delete periods_num_;
  }
  if (periods_num) {
    set_has_periods_num();
    periods_num_ = periods_num;
  } else {
    clear_has_periods_num();
    periods_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// msg_everycolor_place_jetton_req

// optional uint32 jetton_area = 1;
inline bool msg_everycolor_place_jetton_req::has_jetton_area() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_everycolor_place_jetton_req::set_has_jetton_area() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_everycolor_place_jetton_req::clear_has_jetton_area() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_everycolor_place_jetton_req::clear_jetton_area() {
  jetton_area_ = 0u;
  clear_has_jetton_area();
}
inline ::google::protobuf::uint32 msg_everycolor_place_jetton_req::jetton_area() const {
  return jetton_area_;
}
inline void msg_everycolor_place_jetton_req::set_jetton_area(::google::protobuf::uint32 value) {
  set_has_jetton_area();
  jetton_area_ = value;
}

// optional int64 jetton_score = 2;
inline bool msg_everycolor_place_jetton_req::has_jetton_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_everycolor_place_jetton_req::set_has_jetton_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_everycolor_place_jetton_req::clear_has_jetton_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_everycolor_place_jetton_req::clear_jetton_score() {
  jetton_score_ = GOOGLE_LONGLONG(0);
  clear_has_jetton_score();
}
inline ::google::protobuf::int64 msg_everycolor_place_jetton_req::jetton_score() const {
  return jetton_score_;
}
inline void msg_everycolor_place_jetton_req::set_jetton_score(::google::protobuf::int64 value) {
  set_has_jetton_score();
  jetton_score_ = value;
}

// -------------------------------------------------------------------

// msg_everycolor_place_jetton_rep

// optional uint32 jetton_area = 1;
inline bool msg_everycolor_place_jetton_rep::has_jetton_area() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_everycolor_place_jetton_rep::set_has_jetton_area() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_everycolor_place_jetton_rep::clear_has_jetton_area() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_everycolor_place_jetton_rep::clear_jetton_area() {
  jetton_area_ = 0u;
  clear_has_jetton_area();
}
inline ::google::protobuf::uint32 msg_everycolor_place_jetton_rep::jetton_area() const {
  return jetton_area_;
}
inline void msg_everycolor_place_jetton_rep::set_jetton_area(::google::protobuf::uint32 value) {
  set_has_jetton_area();
  jetton_area_ = value;
}

// optional int64 jetton_score = 2;
inline bool msg_everycolor_place_jetton_rep::has_jetton_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_everycolor_place_jetton_rep::set_has_jetton_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_everycolor_place_jetton_rep::clear_has_jetton_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_everycolor_place_jetton_rep::clear_jetton_score() {
  jetton_score_ = GOOGLE_LONGLONG(0);
  clear_has_jetton_score();
}
inline ::google::protobuf::int64 msg_everycolor_place_jetton_rep::jetton_score() const {
  return jetton_score_;
}
inline void msg_everycolor_place_jetton_rep::set_jetton_score(::google::protobuf::int64 value) {
  set_has_jetton_score();
  jetton_score_ = value;
}

// optional uint32 result = 3;
inline bool msg_everycolor_place_jetton_rep::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_everycolor_place_jetton_rep::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_everycolor_place_jetton_rep::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_everycolor_place_jetton_rep::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 msg_everycolor_place_jetton_rep::result() const {
  return result_;
}
inline void msg_everycolor_place_jetton_rep::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// repeated int64 self_jetton_score = 4;
inline int msg_everycolor_place_jetton_rep::self_jetton_score_size() const {
  return self_jetton_score_.size();
}
inline void msg_everycolor_place_jetton_rep::clear_self_jetton_score() {
  self_jetton_score_.Clear();
}
inline ::google::protobuf::int64 msg_everycolor_place_jetton_rep::self_jetton_score(int index) const {
  return self_jetton_score_.Get(index);
}
inline void msg_everycolor_place_jetton_rep::set_self_jetton_score(int index, ::google::protobuf::int64 value) {
  self_jetton_score_.Set(index, value);
}
inline void msg_everycolor_place_jetton_rep::add_self_jetton_score(::google::protobuf::int64 value) {
  self_jetton_score_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
msg_everycolor_place_jetton_rep::self_jetton_score() const {
  return self_jetton_score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
msg_everycolor_place_jetton_rep::mutable_self_jetton_score() {
  return &self_jetton_score_;
}

// -------------------------------------------------------------------

// msg_everycolor_place_jetton_broadcast

// optional uint32 uid = 1;
inline bool msg_everycolor_place_jetton_broadcast::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_everycolor_place_jetton_broadcast::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_everycolor_place_jetton_broadcast::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_everycolor_place_jetton_broadcast::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 msg_everycolor_place_jetton_broadcast::uid() const {
  return uid_;
}
inline void msg_everycolor_place_jetton_broadcast::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 jetton_area = 2;
inline bool msg_everycolor_place_jetton_broadcast::has_jetton_area() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_everycolor_place_jetton_broadcast::set_has_jetton_area() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_everycolor_place_jetton_broadcast::clear_has_jetton_area() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_everycolor_place_jetton_broadcast::clear_jetton_area() {
  jetton_area_ = 0u;
  clear_has_jetton_area();
}
inline ::google::protobuf::uint32 msg_everycolor_place_jetton_broadcast::jetton_area() const {
  return jetton_area_;
}
inline void msg_everycolor_place_jetton_broadcast::set_jetton_area(::google::protobuf::uint32 value) {
  set_has_jetton_area();
  jetton_area_ = value;
}

// optional int64 jetton_score = 3;
inline bool msg_everycolor_place_jetton_broadcast::has_jetton_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_everycolor_place_jetton_broadcast::set_has_jetton_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_everycolor_place_jetton_broadcast::clear_has_jetton_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_everycolor_place_jetton_broadcast::clear_jetton_score() {
  jetton_score_ = GOOGLE_LONGLONG(0);
  clear_has_jetton_score();
}
inline ::google::protobuf::int64 msg_everycolor_place_jetton_broadcast::jetton_score() const {
  return jetton_score_;
}
inline void msg_everycolor_place_jetton_broadcast::set_jetton_score(::google::protobuf::int64 value) {
  set_has_jetton_score();
  jetton_score_ = value;
}

// repeated int64 total_jetton_score = 4;
inline int msg_everycolor_place_jetton_broadcast::total_jetton_score_size() const {
  return total_jetton_score_.size();
}
inline void msg_everycolor_place_jetton_broadcast::clear_total_jetton_score() {
  total_jetton_score_.Clear();
}
inline ::google::protobuf::int64 msg_everycolor_place_jetton_broadcast::total_jetton_score(int index) const {
  return total_jetton_score_.Get(index);
}
inline void msg_everycolor_place_jetton_broadcast::set_total_jetton_score(int index, ::google::protobuf::int64 value) {
  total_jetton_score_.Set(index, value);
}
inline void msg_everycolor_place_jetton_broadcast::add_total_jetton_score(::google::protobuf::int64 value) {
  total_jetton_score_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
msg_everycolor_place_jetton_broadcast::total_jetton_score() const {
  return total_jetton_score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
msg_everycolor_place_jetton_broadcast::mutable_total_jetton_score() {
  return &total_jetton_score_;
}

// -------------------------------------------------------------------

// msg_everycolor_snatch_coin_req

// optional uint32 snatch_type = 1;
inline bool msg_everycolor_snatch_coin_req::has_snatch_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_everycolor_snatch_coin_req::set_has_snatch_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_everycolor_snatch_coin_req::clear_has_snatch_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_everycolor_snatch_coin_req::clear_snatch_type() {
  snatch_type_ = 0u;
  clear_has_snatch_type();
}
inline ::google::protobuf::uint32 msg_everycolor_snatch_coin_req::snatch_type() const {
  return snatch_type_;
}
inline void msg_everycolor_snatch_coin_req::set_snatch_type(::google::protobuf::uint32 value) {
  set_has_snatch_type();
  snatch_type_ = value;
}

// optional uint32 snatch_count = 2;
inline bool msg_everycolor_snatch_coin_req::has_snatch_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_everycolor_snatch_coin_req::set_has_snatch_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_everycolor_snatch_coin_req::clear_has_snatch_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_everycolor_snatch_coin_req::clear_snatch_count() {
  snatch_count_ = 0u;
  clear_has_snatch_count();
}
inline ::google::protobuf::uint32 msg_everycolor_snatch_coin_req::snatch_count() const {
  return snatch_count_;
}
inline void msg_everycolor_snatch_coin_req::set_snatch_count(::google::protobuf::uint32 value) {
  set_has_snatch_count();
  snatch_count_ = value;
}

// -------------------------------------------------------------------

// msg_everycolor_snatch_coin_rep

// optional uint32 snatch_type = 1;
inline bool msg_everycolor_snatch_coin_rep::has_snatch_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_everycolor_snatch_coin_rep::set_has_snatch_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_everycolor_snatch_coin_rep::clear_has_snatch_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_everycolor_snatch_coin_rep::clear_snatch_type() {
  snatch_type_ = 0u;
  clear_has_snatch_type();
}
inline ::google::protobuf::uint32 msg_everycolor_snatch_coin_rep::snatch_type() const {
  return snatch_type_;
}
inline void msg_everycolor_snatch_coin_rep::set_snatch_type(::google::protobuf::uint32 value) {
  set_has_snatch_type();
  snatch_type_ = value;
}

// optional uint32 snatch_count = 2;
inline bool msg_everycolor_snatch_coin_rep::has_snatch_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_everycolor_snatch_coin_rep::set_has_snatch_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_everycolor_snatch_coin_rep::clear_has_snatch_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_everycolor_snatch_coin_rep::clear_snatch_count() {
  snatch_count_ = 0u;
  clear_has_snatch_count();
}
inline ::google::protobuf::uint32 msg_everycolor_snatch_coin_rep::snatch_count() const {
  return snatch_count_;
}
inline void msg_everycolor_snatch_coin_rep::set_snatch_count(::google::protobuf::uint32 value) {
  set_has_snatch_count();
  snatch_count_ = value;
}

// optional uint32 result = 3;
inline bool msg_everycolor_snatch_coin_rep::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_everycolor_snatch_coin_rep::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_everycolor_snatch_coin_rep::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_everycolor_snatch_coin_rep::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 msg_everycolor_snatch_coin_rep::result() const {
  return result_;
}
inline void msg_everycolor_snatch_coin_rep::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// optional uint32 self_total_count = 4;
inline bool msg_everycolor_snatch_coin_rep::has_self_total_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_everycolor_snatch_coin_rep::set_has_self_total_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_everycolor_snatch_coin_rep::clear_has_self_total_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_everycolor_snatch_coin_rep::clear_self_total_count() {
  self_total_count_ = 0u;
  clear_has_self_total_count();
}
inline ::google::protobuf::uint32 msg_everycolor_snatch_coin_rep::self_total_count() const {
  return self_total_count_;
}
inline void msg_everycolor_snatch_coin_rep::set_self_total_count(::google::protobuf::uint32 value) {
  set_has_self_total_count();
  self_total_count_ = value;
}

// repeated uint32 self_snatch_card = 5;
inline int msg_everycolor_snatch_coin_rep::self_snatch_card_size() const {
  return self_snatch_card_.size();
}
inline void msg_everycolor_snatch_coin_rep::clear_self_snatch_card() {
  self_snatch_card_.Clear();
}
inline ::google::protobuf::uint32 msg_everycolor_snatch_coin_rep::self_snatch_card(int index) const {
  return self_snatch_card_.Get(index);
}
inline void msg_everycolor_snatch_coin_rep::set_self_snatch_card(int index, ::google::protobuf::uint32 value) {
  self_snatch_card_.Set(index, value);
}
inline void msg_everycolor_snatch_coin_rep::add_self_snatch_card(::google::protobuf::uint32 value) {
  self_snatch_card_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
msg_everycolor_snatch_coin_rep::self_snatch_card() const {
  return self_snatch_card_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
msg_everycolor_snatch_coin_rep::mutable_self_snatch_card() {
  return &self_snatch_card_;
}

// optional uint32 residue_card_count = 6;
inline bool msg_everycolor_snatch_coin_rep::has_residue_card_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_everycolor_snatch_coin_rep::set_has_residue_card_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_everycolor_snatch_coin_rep::clear_has_residue_card_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_everycolor_snatch_coin_rep::clear_residue_card_count() {
  residue_card_count_ = 0u;
  clear_has_residue_card_count();
}
inline ::google::protobuf::uint32 msg_everycolor_snatch_coin_rep::residue_card_count() const {
  return residue_card_count_;
}
inline void msg_everycolor_snatch_coin_rep::set_residue_card_count(::google::protobuf::uint32 value) {
  set_has_residue_card_count();
  residue_card_count_ = value;
}

// -------------------------------------------------------------------

// msg_everycolor_snatch_coin_broadcast

// optional uint32 uid = 1;
inline bool msg_everycolor_snatch_coin_broadcast::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_everycolor_snatch_coin_broadcast::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_everycolor_snatch_coin_broadcast::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_everycolor_snatch_coin_broadcast::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 msg_everycolor_snatch_coin_broadcast::uid() const {
  return uid_;
}
inline void msg_everycolor_snatch_coin_broadcast::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 snatch_type = 2;
inline bool msg_everycolor_snatch_coin_broadcast::has_snatch_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_everycolor_snatch_coin_broadcast::set_has_snatch_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_everycolor_snatch_coin_broadcast::clear_has_snatch_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_everycolor_snatch_coin_broadcast::clear_snatch_type() {
  snatch_type_ = 0u;
  clear_has_snatch_type();
}
inline ::google::protobuf::uint32 msg_everycolor_snatch_coin_broadcast::snatch_type() const {
  return snatch_type_;
}
inline void msg_everycolor_snatch_coin_broadcast::set_snatch_type(::google::protobuf::uint32 value) {
  set_has_snatch_type();
  snatch_type_ = value;
}

// optional uint32 snatch_count = 3;
inline bool msg_everycolor_snatch_coin_broadcast::has_snatch_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_everycolor_snatch_coin_broadcast::set_has_snatch_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_everycolor_snatch_coin_broadcast::clear_has_snatch_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_everycolor_snatch_coin_broadcast::clear_snatch_count() {
  snatch_count_ = 0u;
  clear_has_snatch_count();
}
inline ::google::protobuf::uint32 msg_everycolor_snatch_coin_broadcast::snatch_count() const {
  return snatch_count_;
}
inline void msg_everycolor_snatch_coin_broadcast::set_snatch_count(::google::protobuf::uint32 value) {
  set_has_snatch_count();
  snatch_count_ = value;
}

// optional uint32 total_snatch_count = 4;
inline bool msg_everycolor_snatch_coin_broadcast::has_total_snatch_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_everycolor_snatch_coin_broadcast::set_has_total_snatch_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_everycolor_snatch_coin_broadcast::clear_has_total_snatch_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_everycolor_snatch_coin_broadcast::clear_total_snatch_count() {
  total_snatch_count_ = 0u;
  clear_has_total_snatch_count();
}
inline ::google::protobuf::uint32 msg_everycolor_snatch_coin_broadcast::total_snatch_count() const {
  return total_snatch_count_;
}
inline void msg_everycolor_snatch_coin_broadcast::set_total_snatch_count(::google::protobuf::uint32 value) {
  set_has_total_snatch_count();
  total_snatch_count_ = value;
}

// repeated uint32 total_snatch_card = 5;
inline int msg_everycolor_snatch_coin_broadcast::total_snatch_card_size() const {
  return total_snatch_card_.size();
}
inline void msg_everycolor_snatch_coin_broadcast::clear_total_snatch_card() {
  total_snatch_card_.Clear();
}
inline ::google::protobuf::uint32 msg_everycolor_snatch_coin_broadcast::total_snatch_card(int index) const {
  return total_snatch_card_.Get(index);
}
inline void msg_everycolor_snatch_coin_broadcast::set_total_snatch_card(int index, ::google::protobuf::uint32 value) {
  total_snatch_card_.Set(index, value);
}
inline void msg_everycolor_snatch_coin_broadcast::add_total_snatch_card(::google::protobuf::uint32 value) {
  total_snatch_card_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
msg_everycolor_snatch_coin_broadcast::total_snatch_card() const {
  return total_snatch_card_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
msg_everycolor_snatch_coin_broadcast::mutable_total_snatch_card() {
  return &total_snatch_card_;
}

// -------------------------------------------------------------------

// msg_everycolor_send_card_rep

// repeated uint32 cards = 1;
inline int msg_everycolor_send_card_rep::cards_size() const {
  return cards_.size();
}
inline void msg_everycolor_send_card_rep::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::uint32 msg_everycolor_send_card_rep::cards(int index) const {
  return cards_.Get(index);
}
inline void msg_everycolor_send_card_rep::set_cards(int index, ::google::protobuf::uint32 value) {
  cards_.Set(index, value);
}
inline void msg_everycolor_send_card_rep::add_cards(::google::protobuf::uint32 value) {
  cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
msg_everycolor_send_card_rep::cards() const {
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
msg_everycolor_send_card_rep::mutable_cards() {
  return &cards_;
}

// -------------------------------------------------------------------

// msg_everycolor_game_end

// optional uint32 table_cards = 1;
inline bool msg_everycolor_game_end::has_table_cards() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_everycolor_game_end::set_has_table_cards() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_everycolor_game_end::clear_has_table_cards() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_everycolor_game_end::clear_table_cards() {
  table_cards_ = 0u;
  clear_has_table_cards();
}
inline ::google::protobuf::uint32 msg_everycolor_game_end::table_cards() const {
  return table_cards_;
}
inline void msg_everycolor_game_end::set_table_cards(::google::protobuf::uint32 value) {
  set_has_table_cards();
  table_cards_ = value;
}

// optional int64 win_score_flower = 2;
inline bool msg_everycolor_game_end::has_win_score_flower() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_everycolor_game_end::set_has_win_score_flower() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_everycolor_game_end::clear_has_win_score_flower() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_everycolor_game_end::clear_win_score_flower() {
  win_score_flower_ = GOOGLE_LONGLONG(0);
  clear_has_win_score_flower();
}
inline ::google::protobuf::int64 msg_everycolor_game_end::win_score_flower() const {
  return win_score_flower_;
}
inline void msg_everycolor_game_end::set_win_score_flower(::google::protobuf::int64 value) {
  set_has_win_score_flower();
  win_score_flower_ = value;
}

// optional int64 win_score_bigsmall = 3;
inline bool msg_everycolor_game_end::has_win_score_bigsmall() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_everycolor_game_end::set_has_win_score_bigsmall() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_everycolor_game_end::clear_has_win_score_bigsmall() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_everycolor_game_end::clear_win_score_bigsmall() {
  win_score_bigsmall_ = GOOGLE_LONGLONG(0);
  clear_has_win_score_bigsmall();
}
inline ::google::protobuf::int64 msg_everycolor_game_end::win_score_bigsmall() const {
  return win_score_bigsmall_;
}
inline void msg_everycolor_game_end::set_win_score_bigsmall(::google::protobuf::int64 value) {
  set_has_win_score_bigsmall();
  win_score_bigsmall_ = value;
}

// optional uint32 time_leave = 4;
inline bool msg_everycolor_game_end::has_time_leave() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_everycolor_game_end::set_has_time_leave() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_everycolor_game_end::clear_has_time_leave() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_everycolor_game_end::clear_time_leave() {
  time_leave_ = 0u;
  clear_has_time_leave();
}
inline ::google::protobuf::uint32 msg_everycolor_game_end::time_leave() const {
  return time_leave_;
}
inline void msg_everycolor_game_end::set_time_leave(::google::protobuf::uint32 value) {
  set_has_time_leave();
  time_leave_ = value;
}

// -------------------------------------------------------------------

// msg_everycolor_snatch_coin_game_status_rep

// optional uint32 snatch_type = 1;
inline bool msg_everycolor_snatch_coin_game_status_rep::has_snatch_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_everycolor_snatch_coin_game_status_rep::set_has_snatch_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_everycolor_snatch_coin_game_status_rep::clear_has_snatch_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_everycolor_snatch_coin_game_status_rep::clear_snatch_type() {
  snatch_type_ = 0u;
  clear_has_snatch_type();
}
inline ::google::protobuf::uint32 msg_everycolor_snatch_coin_game_status_rep::snatch_type() const {
  return snatch_type_;
}
inline void msg_everycolor_snatch_coin_game_status_rep::set_snatch_type(::google::protobuf::uint32 value) {
  set_has_snatch_type();
  snatch_type_ = value;
}

// optional uint32 game_status = 2;
inline bool msg_everycolor_snatch_coin_game_status_rep::has_game_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_everycolor_snatch_coin_game_status_rep::set_has_game_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_everycolor_snatch_coin_game_status_rep::clear_has_game_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_everycolor_snatch_coin_game_status_rep::clear_game_status() {
  game_status_ = 0u;
  clear_has_game_status();
}
inline ::google::protobuf::uint32 msg_everycolor_snatch_coin_game_status_rep::game_status() const {
  return game_status_;
}
inline void msg_everycolor_snatch_coin_game_status_rep::set_game_status(::google::protobuf::uint32 value) {
  set_has_game_status();
  game_status_ = value;
}

// optional uint32 time_leave = 3;
inline bool msg_everycolor_snatch_coin_game_status_rep::has_time_leave() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_everycolor_snatch_coin_game_status_rep::set_has_time_leave() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_everycolor_snatch_coin_game_status_rep::clear_has_time_leave() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_everycolor_snatch_coin_game_status_rep::clear_time_leave() {
  time_leave_ = 0u;
  clear_has_time_leave();
}
inline ::google::protobuf::uint32 msg_everycolor_snatch_coin_game_status_rep::time_leave() const {
  return time_leave_;
}
inline void msg_everycolor_snatch_coin_game_status_rep::set_time_leave(::google::protobuf::uint32 value) {
  set_has_time_leave();
  time_leave_ = value;
}

// -------------------------------------------------------------------

// msg_everycolor_snatch_coin_game_end

// optional uint32 snatch_type = 1;
inline bool msg_everycolor_snatch_coin_game_end::has_snatch_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_everycolor_snatch_coin_game_end::set_has_snatch_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_everycolor_snatch_coin_game_end::clear_has_snatch_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_everycolor_snatch_coin_game_end::clear_snatch_type() {
  snatch_type_ = 0u;
  clear_has_snatch_type();
}
inline ::google::protobuf::uint32 msg_everycolor_snatch_coin_game_end::snatch_type() const {
  return snatch_type_;
}
inline void msg_everycolor_snatch_coin_game_end::set_snatch_type(::google::protobuf::uint32 value) {
  set_has_snatch_type();
  snatch_type_ = value;
}

// optional uint32 table_cards = 2;
inline bool msg_everycolor_snatch_coin_game_end::has_table_cards() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_everycolor_snatch_coin_game_end::set_has_table_cards() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_everycolor_snatch_coin_game_end::clear_has_table_cards() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_everycolor_snatch_coin_game_end::clear_table_cards() {
  table_cards_ = 0u;
  clear_has_table_cards();
}
inline ::google::protobuf::uint32 msg_everycolor_snatch_coin_game_end::table_cards() const {
  return table_cards_;
}
inline void msg_everycolor_snatch_coin_game_end::set_table_cards(::google::protobuf::uint32 value) {
  set_has_table_cards();
  table_cards_ = value;
}

// optional uint32 win_uid = 3;
inline bool msg_everycolor_snatch_coin_game_end::has_win_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_everycolor_snatch_coin_game_end::set_has_win_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_everycolor_snatch_coin_game_end::clear_has_win_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_everycolor_snatch_coin_game_end::clear_win_uid() {
  win_uid_ = 0u;
  clear_has_win_uid();
}
inline ::google::protobuf::uint32 msg_everycolor_snatch_coin_game_end::win_uid() const {
  return win_uid_;
}
inline void msg_everycolor_snatch_coin_game_end::set_win_uid(::google::protobuf::uint32 value) {
  set_has_win_uid();
  win_uid_ = value;
}

// optional int64 win_score = 4;
inline bool msg_everycolor_snatch_coin_game_end::has_win_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_everycolor_snatch_coin_game_end::set_has_win_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_everycolor_snatch_coin_game_end::clear_has_win_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_everycolor_snatch_coin_game_end::clear_win_score() {
  win_score_ = GOOGLE_LONGLONG(0);
  clear_has_win_score();
}
inline ::google::protobuf::int64 msg_everycolor_snatch_coin_game_end::win_score() const {
  return win_score_;
}
inline void msg_everycolor_snatch_coin_game_end::set_win_score(::google::protobuf::int64 value) {
  set_has_win_score();
  win_score_ = value;
}

// optional bytes periods_num = 5;
inline bool msg_everycolor_snatch_coin_game_end::has_periods_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_everycolor_snatch_coin_game_end::set_has_periods_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_everycolor_snatch_coin_game_end::clear_has_periods_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_everycolor_snatch_coin_game_end::clear_periods_num() {
  if (periods_num_ != &::google::protobuf::internal::kEmptyString) {
    periods_num_->clear();
  }
  clear_has_periods_num();
}
inline const ::std::string& msg_everycolor_snatch_coin_game_end::periods_num() const {
  return *periods_num_;
}
inline void msg_everycolor_snatch_coin_game_end::set_periods_num(const ::std::string& value) {
  set_has_periods_num();
  if (periods_num_ == &::google::protobuf::internal::kEmptyString) {
    periods_num_ = new ::std::string;
  }
  periods_num_->assign(value);
}
inline void msg_everycolor_snatch_coin_game_end::set_periods_num(const char* value) {
  set_has_periods_num();
  if (periods_num_ == &::google::protobuf::internal::kEmptyString) {
    periods_num_ = new ::std::string;
  }
  periods_num_->assign(value);
}
inline void msg_everycolor_snatch_coin_game_end::set_periods_num(const void* value, size_t size) {
  set_has_periods_num();
  if (periods_num_ == &::google::protobuf::internal::kEmptyString) {
    periods_num_ = new ::std::string;
  }
  periods_num_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_everycolor_snatch_coin_game_end::mutable_periods_num() {
  set_has_periods_num();
  if (periods_num_ == &::google::protobuf::internal::kEmptyString) {
    periods_num_ = new ::std::string;
  }
  return periods_num_;
}
inline ::std::string* msg_everycolor_snatch_coin_game_end::release_periods_num() {
  clear_has_periods_num();
  if (periods_num_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = periods_num_;
    periods_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_everycolor_snatch_coin_game_end::set_allocated_periods_num(::std::string* periods_num) {
  if (periods_num_ != &::google::protobuf::internal::kEmptyString) {
    delete periods_num_;
  }
  if (periods_num) {
    set_has_periods_num();
    periods_num_ = periods_num;
  } else {
    clear_has_periods_num();
    periods_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// msg_everycolor_snatch_coin_state

// optional uint32 stop_state = 1;
inline bool msg_everycolor_snatch_coin_state::has_stop_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_everycolor_snatch_coin_state::set_has_stop_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_everycolor_snatch_coin_state::clear_has_stop_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_everycolor_snatch_coin_state::clear_stop_state() {
  stop_state_ = 0u;
  clear_has_stop_state();
}
inline ::google::protobuf::uint32 msg_everycolor_snatch_coin_state::stop_state() const {
  return stop_state_;
}
inline void msg_everycolor_snatch_coin_state::set_stop_state(::google::protobuf::uint32 value) {
  set_has_stop_state();
  stop_state_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace net

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_everycolor_5flogic_5fmsg_2eproto__INCLUDED
