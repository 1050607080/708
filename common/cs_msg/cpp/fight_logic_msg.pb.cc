// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fight_logic_msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fight_logic_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace net {

namespace {

const ::google::protobuf::Descriptor* msg_fight_game_info_free_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_fight_game_info_free_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_fight_game_info_play_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_fight_game_info_play_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_fight_start_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_fight_start_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_fight_place_jetton_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_fight_place_jetton_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_fight_place_jetton_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_fight_place_jetton_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_fight_place_jetton_broadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_fight_place_jetton_broadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_fight_game_end_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_fight_game_end_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_fight_change_user_score_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_fight_change_user_score_reflection_ = NULL;
const ::google::protobuf::Descriptor* fight_play_log_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fight_play_log_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_fight_play_log_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_fight_play_log_rep_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_fight_5flogic_5fmsg_2eproto() {
  protobuf_AddDesc_fight_5flogic_5fmsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "fight_logic_msg.proto");
  GOOGLE_CHECK(file != NULL);
  msg_fight_game_info_free_rep_descriptor_ = file->message_type(0);
  static const int msg_fight_game_info_free_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fight_game_info_free_rep, time_leave_),
  };
  msg_fight_game_info_free_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_fight_game_info_free_rep_descriptor_,
      msg_fight_game_info_free_rep::default_instance_,
      msg_fight_game_info_free_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fight_game_info_free_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fight_game_info_free_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_fight_game_info_free_rep));
  msg_fight_game_info_play_rep_descriptor_ = file->message_type(1);
  static const int msg_fight_game_info_play_rep_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fight_game_info_play_rep, all_jetton_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fight_game_info_play_rep, table_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fight_game_info_play_rep, card_types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fight_game_info_play_rep, time_leave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fight_game_info_play_rep, game_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fight_game_info_play_rep, self_jetton_score_),
  };
  msg_fight_game_info_play_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_fight_game_info_play_rep_descriptor_,
      msg_fight_game_info_play_rep::default_instance_,
      msg_fight_game_info_play_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fight_game_info_play_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fight_game_info_play_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_fight_game_info_play_rep));
  msg_fight_start_rep_descriptor_ = file->message_type(2);
  static const int msg_fight_start_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fight_start_rep, time_leave_),
  };
  msg_fight_start_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_fight_start_rep_descriptor_,
      msg_fight_start_rep::default_instance_,
      msg_fight_start_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fight_start_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fight_start_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_fight_start_rep));
  msg_fight_place_jetton_req_descriptor_ = file->message_type(3);
  static const int msg_fight_place_jetton_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fight_place_jetton_req, jetton_area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fight_place_jetton_req, jetton_score_),
  };
  msg_fight_place_jetton_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_fight_place_jetton_req_descriptor_,
      msg_fight_place_jetton_req::default_instance_,
      msg_fight_place_jetton_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fight_place_jetton_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fight_place_jetton_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_fight_place_jetton_req));
  msg_fight_place_jetton_rep_descriptor_ = file->message_type(4);
  static const int msg_fight_place_jetton_rep_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fight_place_jetton_rep, jetton_area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fight_place_jetton_rep, jetton_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fight_place_jetton_rep, result_),
  };
  msg_fight_place_jetton_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_fight_place_jetton_rep_descriptor_,
      msg_fight_place_jetton_rep::default_instance_,
      msg_fight_place_jetton_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fight_place_jetton_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fight_place_jetton_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_fight_place_jetton_rep));
  msg_fight_place_jetton_broadcast_descriptor_ = file->message_type(5);
  static const int msg_fight_place_jetton_broadcast_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fight_place_jetton_broadcast, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fight_place_jetton_broadcast, jetton_area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fight_place_jetton_broadcast, jetton_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fight_place_jetton_broadcast, total_jetton_score_),
  };
  msg_fight_place_jetton_broadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_fight_place_jetton_broadcast_descriptor_,
      msg_fight_place_jetton_broadcast::default_instance_,
      msg_fight_place_jetton_broadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fight_place_jetton_broadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fight_place_jetton_broadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_fight_place_jetton_broadcast));
  msg_fight_game_end_descriptor_ = file->message_type(6);
  static const int msg_fight_game_end_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fight_game_end, time_leave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fight_game_end, table_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fight_game_end, card_types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fight_game_end, user_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fight_game_end, player_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fight_game_end, win_multiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fight_game_end, win_index_),
  };
  msg_fight_game_end_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_fight_game_end_descriptor_,
      msg_fight_game_end::default_instance_,
      msg_fight_game_end_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fight_game_end, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fight_game_end, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_fight_game_end));
  msg_fight_change_user_score_descriptor_ = file->message_type(7);
  static const int msg_fight_change_user_score_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fight_change_user_score, chair_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fight_change_user_score, score_),
  };
  msg_fight_change_user_score_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_fight_change_user_score_descriptor_,
      msg_fight_change_user_score::default_instance_,
      msg_fight_change_user_score_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fight_change_user_score, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fight_change_user_score, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_fight_change_user_score));
  fight_play_log_descriptor_ = file->message_type(8);
  static const int fight_play_log_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fight_play_log, seats_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fight_play_log, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fight_play_log, index_),
  };
  fight_play_log_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fight_play_log_descriptor_,
      fight_play_log::default_instance_,
      fight_play_log_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fight_play_log, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fight_play_log, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fight_play_log));
  msg_fight_play_log_rep_descriptor_ = file->message_type(9);
  static const int msg_fight_play_log_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fight_play_log_rep, logs_),
  };
  msg_fight_play_log_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_fight_play_log_rep_descriptor_,
      msg_fight_play_log_rep::default_instance_,
      msg_fight_play_log_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fight_play_log_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fight_play_log_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_fight_play_log_rep));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_fight_5flogic_5fmsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_fight_game_info_free_rep_descriptor_, &msg_fight_game_info_free_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_fight_game_info_play_rep_descriptor_, &msg_fight_game_info_play_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_fight_start_rep_descriptor_, &msg_fight_start_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_fight_place_jetton_req_descriptor_, &msg_fight_place_jetton_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_fight_place_jetton_rep_descriptor_, &msg_fight_place_jetton_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_fight_place_jetton_broadcast_descriptor_, &msg_fight_place_jetton_broadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_fight_game_end_descriptor_, &msg_fight_game_end::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_fight_change_user_score_descriptor_, &msg_fight_change_user_score::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fight_play_log_descriptor_, &fight_play_log::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_fight_play_log_rep_descriptor_, &msg_fight_play_log_rep::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_fight_5flogic_5fmsg_2eproto() {
  delete msg_fight_game_info_free_rep::default_instance_;
  delete msg_fight_game_info_free_rep_reflection_;
  delete msg_fight_game_info_play_rep::default_instance_;
  delete msg_fight_game_info_play_rep_reflection_;
  delete msg_fight_start_rep::default_instance_;
  delete msg_fight_start_rep_reflection_;
  delete msg_fight_place_jetton_req::default_instance_;
  delete msg_fight_place_jetton_req_reflection_;
  delete msg_fight_place_jetton_rep::default_instance_;
  delete msg_fight_place_jetton_rep_reflection_;
  delete msg_fight_place_jetton_broadcast::default_instance_;
  delete msg_fight_place_jetton_broadcast_reflection_;
  delete msg_fight_game_end::default_instance_;
  delete msg_fight_game_end_reflection_;
  delete msg_fight_change_user_score::default_instance_;
  delete msg_fight_change_user_score_reflection_;
  delete fight_play_log::default_instance_;
  delete fight_play_log_reflection_;
  delete msg_fight_play_log_rep::default_instance_;
  delete msg_fight_play_log_rep_reflection_;
}

void protobuf_AddDesc_fight_5flogic_5fmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::net::protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  ::net::protobuf_AddDesc_error_5fcode_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025fight_logic_msg.proto\022\003net\032\025base_msg_s"
    "truct.proto\032\020error_code.proto\"2\n\034msg_fig"
    "ht_game_info_free_rep\022\022\n\ntime_leave\030\001 \001("
    "\r\"\265\001\n\034msg_fight_game_info_play_rep\022\030\n\020al"
    "l_jetton_score\030\001 \003(\003\022#\n\013table_cards\030\002 \003("
    "\0132\016.net.msg_cards\022\022\n\ncard_types\030\003 \003(\r\022\022\n"
    "\ntime_leave\030\004 \001(\r\022\023\n\013game_status\030\005 \001(\r\022\031"
    "\n\021self_jetton_score\030\006 \003(\003\")\n\023msg_fight_s"
    "tart_rep\022\022\n\ntime_leave\030\001 \001(\r\"G\n\032msg_figh"
    "t_place_jetton_req\022\023\n\013jetton_area\030\001 \001(\r\022"
    "\024\n\014jetton_score\030\002 \001(\003\"W\n\032msg_fight_place"
    "_jetton_rep\022\023\n\013jetton_area\030\001 \001(\r\022\024\n\014jett"
    "on_score\030\002 \001(\003\022\016\n\006result\030\003 \001(\r\"v\n msg_fi"
    "ght_place_jetton_broadcast\022\013\n\003uid\030\001 \001(\r\022"
    "\023\n\013jetton_area\030\002 \001(\r\022\024\n\014jetton_score\030\003 \001"
    "(\003\022\032\n\022total_jetton_score\030\004 \001(\003\"\264\001\n\022msg_f"
    "ight_game_end\022\022\n\ntime_leave\030\001 \001(\r\022#\n\013tab"
    "le_cards\030\002 \003(\0132\016.net.msg_cards\022\022\n\ncard_t"
    "ypes\030\003 \003(\r\022\022\n\nuser_score\030\004 \001(\003\022\024\n\014player"
    "_score\030\005 \003(\003\022\024\n\014win_multiple\030\006 \003(\005\022\021\n\twi"
    "n_index\030\007 \003(\005\">\n\033msg_fight_change_user_s"
    "core\022\020\n\010chair_id\030\001 \001(\r\022\r\n\005score\030\002 \001(\003\"@\n"
    "\016fight_play_log\022\021\n\tseats_win\030\001 \003(\r\022\014\n\004ca"
    "rd\030\002 \001(\r\022\r\n\005index\030\003 \001(\r\";\n\026msg_fight_pla"
    "y_log_rep\022!\n\004logs\030\001 \003(\0132\023.net.fight_play"
    "_log", 1004);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fight_logic_msg.proto", &protobuf_RegisterTypes);
  msg_fight_game_info_free_rep::default_instance_ = new msg_fight_game_info_free_rep();
  msg_fight_game_info_play_rep::default_instance_ = new msg_fight_game_info_play_rep();
  msg_fight_start_rep::default_instance_ = new msg_fight_start_rep();
  msg_fight_place_jetton_req::default_instance_ = new msg_fight_place_jetton_req();
  msg_fight_place_jetton_rep::default_instance_ = new msg_fight_place_jetton_rep();
  msg_fight_place_jetton_broadcast::default_instance_ = new msg_fight_place_jetton_broadcast();
  msg_fight_game_end::default_instance_ = new msg_fight_game_end();
  msg_fight_change_user_score::default_instance_ = new msg_fight_change_user_score();
  fight_play_log::default_instance_ = new fight_play_log();
  msg_fight_play_log_rep::default_instance_ = new msg_fight_play_log_rep();
  msg_fight_game_info_free_rep::default_instance_->InitAsDefaultInstance();
  msg_fight_game_info_play_rep::default_instance_->InitAsDefaultInstance();
  msg_fight_start_rep::default_instance_->InitAsDefaultInstance();
  msg_fight_place_jetton_req::default_instance_->InitAsDefaultInstance();
  msg_fight_place_jetton_rep::default_instance_->InitAsDefaultInstance();
  msg_fight_place_jetton_broadcast::default_instance_->InitAsDefaultInstance();
  msg_fight_game_end::default_instance_->InitAsDefaultInstance();
  msg_fight_change_user_score::default_instance_->InitAsDefaultInstance();
  fight_play_log::default_instance_->InitAsDefaultInstance();
  msg_fight_play_log_rep::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_fight_5flogic_5fmsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_fight_5flogic_5fmsg_2eproto {
  StaticDescriptorInitializer_fight_5flogic_5fmsg_2eproto() {
    protobuf_AddDesc_fight_5flogic_5fmsg_2eproto();
  }
} static_descriptor_initializer_fight_5flogic_5fmsg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int msg_fight_game_info_free_rep::kTimeLeaveFieldNumber;
#endif  // !_MSC_VER

msg_fight_game_info_free_rep::msg_fight_game_info_free_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_fight_game_info_free_rep::InitAsDefaultInstance() {
}

msg_fight_game_info_free_rep::msg_fight_game_info_free_rep(const msg_fight_game_info_free_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_fight_game_info_free_rep::SharedCtor() {
  _cached_size_ = 0;
  time_leave_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_fight_game_info_free_rep::~msg_fight_game_info_free_rep() {
  SharedDtor();
}

void msg_fight_game_info_free_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_fight_game_info_free_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_fight_game_info_free_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_fight_game_info_free_rep_descriptor_;
}

const msg_fight_game_info_free_rep& msg_fight_game_info_free_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fight_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_fight_game_info_free_rep* msg_fight_game_info_free_rep::default_instance_ = NULL;

msg_fight_game_info_free_rep* msg_fight_game_info_free_rep::New() const {
  return new msg_fight_game_info_free_rep;
}

void msg_fight_game_info_free_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_leave_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_fight_game_info_free_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 time_leave = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_leave_)));
          set_has_time_leave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_fight_game_info_free_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 time_leave = 1;
  if (has_time_leave()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time_leave(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_fight_game_info_free_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 time_leave = 1;
  if (has_time_leave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time_leave(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_fight_game_info_free_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 time_leave = 1;
    if (has_time_leave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_leave());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_fight_game_info_free_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_fight_game_info_free_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_fight_game_info_free_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_fight_game_info_free_rep::MergeFrom(const msg_fight_game_info_free_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_leave()) {
      set_time_leave(from.time_leave());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_fight_game_info_free_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_fight_game_info_free_rep::CopyFrom(const msg_fight_game_info_free_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_fight_game_info_free_rep::IsInitialized() const {

  return true;
}

void msg_fight_game_info_free_rep::Swap(msg_fight_game_info_free_rep* other) {
  if (other != this) {
    std::swap(time_leave_, other->time_leave_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_fight_game_info_free_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_fight_game_info_free_rep_descriptor_;
  metadata.reflection = msg_fight_game_info_free_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_fight_game_info_play_rep::kAllJettonScoreFieldNumber;
const int msg_fight_game_info_play_rep::kTableCardsFieldNumber;
const int msg_fight_game_info_play_rep::kCardTypesFieldNumber;
const int msg_fight_game_info_play_rep::kTimeLeaveFieldNumber;
const int msg_fight_game_info_play_rep::kGameStatusFieldNumber;
const int msg_fight_game_info_play_rep::kSelfJettonScoreFieldNumber;
#endif  // !_MSC_VER

msg_fight_game_info_play_rep::msg_fight_game_info_play_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_fight_game_info_play_rep::InitAsDefaultInstance() {
}

msg_fight_game_info_play_rep::msg_fight_game_info_play_rep(const msg_fight_game_info_play_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_fight_game_info_play_rep::SharedCtor() {
  _cached_size_ = 0;
  time_leave_ = 0u;
  game_status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_fight_game_info_play_rep::~msg_fight_game_info_play_rep() {
  SharedDtor();
}

void msg_fight_game_info_play_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_fight_game_info_play_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_fight_game_info_play_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_fight_game_info_play_rep_descriptor_;
}

const msg_fight_game_info_play_rep& msg_fight_game_info_play_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fight_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_fight_game_info_play_rep* msg_fight_game_info_play_rep::default_instance_ = NULL;

msg_fight_game_info_play_rep* msg_fight_game_info_play_rep::New() const {
  return new msg_fight_game_info_play_rep;
}

void msg_fight_game_info_play_rep::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    time_leave_ = 0u;
    game_status_ = 0u;
  }
  all_jetton_score_.Clear();
  table_cards_.Clear();
  card_types_.Clear();
  self_jetton_score_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_fight_game_info_play_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 all_jetton_score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_jetton_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_all_jetton_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_all_jetton_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_all_jetton_score;
        if (input->ExpectTag(18)) goto parse_table_cards;
        break;
      }

      // repeated .net.msg_cards table_cards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_table_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table_cards;
        if (input->ExpectTag(24)) goto parse_card_types;
        break;
      }

      // repeated uint32 card_types = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_types:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_card_types())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_types())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_card_types;
        if (input->ExpectTag(32)) goto parse_time_leave;
        break;
      }

      // optional uint32 time_leave = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_leave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_leave_)));
          set_has_time_leave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_game_status;
        break;
      }

      // optional uint32 game_status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_status_)));
          set_has_game_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_self_jetton_score;
        break;
      }

      // repeated int64 self_jetton_score = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_jetton_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 48, input, this->mutable_self_jetton_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_self_jetton_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_self_jetton_score;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_fight_game_info_play_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 all_jetton_score = 1;
  for (int i = 0; i < this->all_jetton_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->all_jetton_score(i), output);
  }

  // repeated .net.msg_cards table_cards = 2;
  for (int i = 0; i < this->table_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->table_cards(i), output);
  }

  // repeated uint32 card_types = 3;
  for (int i = 0; i < this->card_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->card_types(i), output);
  }

  // optional uint32 time_leave = 4;
  if (has_time_leave()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time_leave(), output);
  }

  // optional uint32 game_status = 5;
  if (has_game_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->game_status(), output);
  }

  // repeated int64 self_jetton_score = 6;
  for (int i = 0; i < this->self_jetton_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      6, this->self_jetton_score(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_fight_game_info_play_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 all_jetton_score = 1;
  for (int i = 0; i < this->all_jetton_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->all_jetton_score(i), target);
  }

  // repeated .net.msg_cards table_cards = 2;
  for (int i = 0; i < this->table_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->table_cards(i), target);
  }

  // repeated uint32 card_types = 3;
  for (int i = 0; i < this->card_types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->card_types(i), target);
  }

  // optional uint32 time_leave = 4;
  if (has_time_leave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time_leave(), target);
  }

  // optional uint32 game_status = 5;
  if (has_game_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->game_status(), target);
  }

  // repeated int64 self_jetton_score = 6;
  for (int i = 0; i < this->self_jetton_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(6, this->self_jetton_score(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_fight_game_info_play_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional uint32 time_leave = 4;
    if (has_time_leave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_leave());
    }

    // optional uint32 game_status = 5;
    if (has_game_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_status());
    }

  }
  // repeated int64 all_jetton_score = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->all_jetton_score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->all_jetton_score(i));
    }
    total_size += 1 * this->all_jetton_score_size() + data_size;
  }

  // repeated .net.msg_cards table_cards = 2;
  total_size += 1 * this->table_cards_size();
  for (int i = 0; i < this->table_cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->table_cards(i));
  }

  // repeated uint32 card_types = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_types_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->card_types(i));
    }
    total_size += 1 * this->card_types_size() + data_size;
  }

  // repeated int64 self_jetton_score = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->self_jetton_score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->self_jetton_score(i));
    }
    total_size += 1 * this->self_jetton_score_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_fight_game_info_play_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_fight_game_info_play_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_fight_game_info_play_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_fight_game_info_play_rep::MergeFrom(const msg_fight_game_info_play_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  all_jetton_score_.MergeFrom(from.all_jetton_score_);
  table_cards_.MergeFrom(from.table_cards_);
  card_types_.MergeFrom(from.card_types_);
  self_jetton_score_.MergeFrom(from.self_jetton_score_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_time_leave()) {
      set_time_leave(from.time_leave());
    }
    if (from.has_game_status()) {
      set_game_status(from.game_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_fight_game_info_play_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_fight_game_info_play_rep::CopyFrom(const msg_fight_game_info_play_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_fight_game_info_play_rep::IsInitialized() const {

  return true;
}

void msg_fight_game_info_play_rep::Swap(msg_fight_game_info_play_rep* other) {
  if (other != this) {
    all_jetton_score_.Swap(&other->all_jetton_score_);
    table_cards_.Swap(&other->table_cards_);
    card_types_.Swap(&other->card_types_);
    std::swap(time_leave_, other->time_leave_);
    std::swap(game_status_, other->game_status_);
    self_jetton_score_.Swap(&other->self_jetton_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_fight_game_info_play_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_fight_game_info_play_rep_descriptor_;
  metadata.reflection = msg_fight_game_info_play_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_fight_start_rep::kTimeLeaveFieldNumber;
#endif  // !_MSC_VER

msg_fight_start_rep::msg_fight_start_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_fight_start_rep::InitAsDefaultInstance() {
}

msg_fight_start_rep::msg_fight_start_rep(const msg_fight_start_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_fight_start_rep::SharedCtor() {
  _cached_size_ = 0;
  time_leave_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_fight_start_rep::~msg_fight_start_rep() {
  SharedDtor();
}

void msg_fight_start_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_fight_start_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_fight_start_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_fight_start_rep_descriptor_;
}

const msg_fight_start_rep& msg_fight_start_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fight_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_fight_start_rep* msg_fight_start_rep::default_instance_ = NULL;

msg_fight_start_rep* msg_fight_start_rep::New() const {
  return new msg_fight_start_rep;
}

void msg_fight_start_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_leave_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_fight_start_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 time_leave = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_leave_)));
          set_has_time_leave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_fight_start_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 time_leave = 1;
  if (has_time_leave()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time_leave(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_fight_start_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 time_leave = 1;
  if (has_time_leave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time_leave(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_fight_start_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 time_leave = 1;
    if (has_time_leave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_leave());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_fight_start_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_fight_start_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_fight_start_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_fight_start_rep::MergeFrom(const msg_fight_start_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_leave()) {
      set_time_leave(from.time_leave());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_fight_start_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_fight_start_rep::CopyFrom(const msg_fight_start_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_fight_start_rep::IsInitialized() const {

  return true;
}

void msg_fight_start_rep::Swap(msg_fight_start_rep* other) {
  if (other != this) {
    std::swap(time_leave_, other->time_leave_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_fight_start_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_fight_start_rep_descriptor_;
  metadata.reflection = msg_fight_start_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_fight_place_jetton_req::kJettonAreaFieldNumber;
const int msg_fight_place_jetton_req::kJettonScoreFieldNumber;
#endif  // !_MSC_VER

msg_fight_place_jetton_req::msg_fight_place_jetton_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_fight_place_jetton_req::InitAsDefaultInstance() {
}

msg_fight_place_jetton_req::msg_fight_place_jetton_req(const msg_fight_place_jetton_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_fight_place_jetton_req::SharedCtor() {
  _cached_size_ = 0;
  jetton_area_ = 0u;
  jetton_score_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_fight_place_jetton_req::~msg_fight_place_jetton_req() {
  SharedDtor();
}

void msg_fight_place_jetton_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_fight_place_jetton_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_fight_place_jetton_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_fight_place_jetton_req_descriptor_;
}

const msg_fight_place_jetton_req& msg_fight_place_jetton_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fight_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_fight_place_jetton_req* msg_fight_place_jetton_req::default_instance_ = NULL;

msg_fight_place_jetton_req* msg_fight_place_jetton_req::New() const {
  return new msg_fight_place_jetton_req;
}

void msg_fight_place_jetton_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    jetton_area_ = 0u;
    jetton_score_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_fight_place_jetton_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 jetton_area = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jetton_area_)));
          set_has_jetton_area();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_jetton_score;
        break;
      }

      // optional int64 jetton_score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &jetton_score_)));
          set_has_jetton_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_fight_place_jetton_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 jetton_area = 1;
  if (has_jetton_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->jetton_area(), output);
  }

  // optional int64 jetton_score = 2;
  if (has_jetton_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->jetton_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_fight_place_jetton_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 jetton_area = 1;
  if (has_jetton_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->jetton_area(), target);
  }

  // optional int64 jetton_score = 2;
  if (has_jetton_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->jetton_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_fight_place_jetton_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 jetton_area = 1;
    if (has_jetton_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jetton_area());
    }

    // optional int64 jetton_score = 2;
    if (has_jetton_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->jetton_score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_fight_place_jetton_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_fight_place_jetton_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_fight_place_jetton_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_fight_place_jetton_req::MergeFrom(const msg_fight_place_jetton_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jetton_area()) {
      set_jetton_area(from.jetton_area());
    }
    if (from.has_jetton_score()) {
      set_jetton_score(from.jetton_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_fight_place_jetton_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_fight_place_jetton_req::CopyFrom(const msg_fight_place_jetton_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_fight_place_jetton_req::IsInitialized() const {

  return true;
}

void msg_fight_place_jetton_req::Swap(msg_fight_place_jetton_req* other) {
  if (other != this) {
    std::swap(jetton_area_, other->jetton_area_);
    std::swap(jetton_score_, other->jetton_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_fight_place_jetton_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_fight_place_jetton_req_descriptor_;
  metadata.reflection = msg_fight_place_jetton_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_fight_place_jetton_rep::kJettonAreaFieldNumber;
const int msg_fight_place_jetton_rep::kJettonScoreFieldNumber;
const int msg_fight_place_jetton_rep::kResultFieldNumber;
#endif  // !_MSC_VER

msg_fight_place_jetton_rep::msg_fight_place_jetton_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_fight_place_jetton_rep::InitAsDefaultInstance() {
}

msg_fight_place_jetton_rep::msg_fight_place_jetton_rep(const msg_fight_place_jetton_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_fight_place_jetton_rep::SharedCtor() {
  _cached_size_ = 0;
  jetton_area_ = 0u;
  jetton_score_ = GOOGLE_LONGLONG(0);
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_fight_place_jetton_rep::~msg_fight_place_jetton_rep() {
  SharedDtor();
}

void msg_fight_place_jetton_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_fight_place_jetton_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_fight_place_jetton_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_fight_place_jetton_rep_descriptor_;
}

const msg_fight_place_jetton_rep& msg_fight_place_jetton_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fight_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_fight_place_jetton_rep* msg_fight_place_jetton_rep::default_instance_ = NULL;

msg_fight_place_jetton_rep* msg_fight_place_jetton_rep::New() const {
  return new msg_fight_place_jetton_rep;
}

void msg_fight_place_jetton_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    jetton_area_ = 0u;
    jetton_score_ = GOOGLE_LONGLONG(0);
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_fight_place_jetton_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 jetton_area = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jetton_area_)));
          set_has_jetton_area();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_jetton_score;
        break;
      }

      // optional int64 jetton_score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &jetton_score_)));
          set_has_jetton_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional uint32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_fight_place_jetton_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 jetton_area = 1;
  if (has_jetton_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->jetton_area(), output);
  }

  // optional int64 jetton_score = 2;
  if (has_jetton_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->jetton_score(), output);
  }

  // optional uint32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_fight_place_jetton_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 jetton_area = 1;
  if (has_jetton_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->jetton_area(), target);
  }

  // optional int64 jetton_score = 2;
  if (has_jetton_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->jetton_score(), target);
  }

  // optional uint32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_fight_place_jetton_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 jetton_area = 1;
    if (has_jetton_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jetton_area());
    }

    // optional int64 jetton_score = 2;
    if (has_jetton_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->jetton_score());
    }

    // optional uint32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_fight_place_jetton_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_fight_place_jetton_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_fight_place_jetton_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_fight_place_jetton_rep::MergeFrom(const msg_fight_place_jetton_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jetton_area()) {
      set_jetton_area(from.jetton_area());
    }
    if (from.has_jetton_score()) {
      set_jetton_score(from.jetton_score());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_fight_place_jetton_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_fight_place_jetton_rep::CopyFrom(const msg_fight_place_jetton_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_fight_place_jetton_rep::IsInitialized() const {

  return true;
}

void msg_fight_place_jetton_rep::Swap(msg_fight_place_jetton_rep* other) {
  if (other != this) {
    std::swap(jetton_area_, other->jetton_area_);
    std::swap(jetton_score_, other->jetton_score_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_fight_place_jetton_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_fight_place_jetton_rep_descriptor_;
  metadata.reflection = msg_fight_place_jetton_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_fight_place_jetton_broadcast::kUidFieldNumber;
const int msg_fight_place_jetton_broadcast::kJettonAreaFieldNumber;
const int msg_fight_place_jetton_broadcast::kJettonScoreFieldNumber;
const int msg_fight_place_jetton_broadcast::kTotalJettonScoreFieldNumber;
#endif  // !_MSC_VER

msg_fight_place_jetton_broadcast::msg_fight_place_jetton_broadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_fight_place_jetton_broadcast::InitAsDefaultInstance() {
}

msg_fight_place_jetton_broadcast::msg_fight_place_jetton_broadcast(const msg_fight_place_jetton_broadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_fight_place_jetton_broadcast::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  jetton_area_ = 0u;
  jetton_score_ = GOOGLE_LONGLONG(0);
  total_jetton_score_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_fight_place_jetton_broadcast::~msg_fight_place_jetton_broadcast() {
  SharedDtor();
}

void msg_fight_place_jetton_broadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_fight_place_jetton_broadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_fight_place_jetton_broadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_fight_place_jetton_broadcast_descriptor_;
}

const msg_fight_place_jetton_broadcast& msg_fight_place_jetton_broadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fight_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_fight_place_jetton_broadcast* msg_fight_place_jetton_broadcast::default_instance_ = NULL;

msg_fight_place_jetton_broadcast* msg_fight_place_jetton_broadcast::New() const {
  return new msg_fight_place_jetton_broadcast;
}

void msg_fight_place_jetton_broadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    jetton_area_ = 0u;
    jetton_score_ = GOOGLE_LONGLONG(0);
    total_jetton_score_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_fight_place_jetton_broadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_jetton_area;
        break;
      }

      // optional uint32 jetton_area = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jetton_area_)));
          set_has_jetton_area();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_jetton_score;
        break;
      }

      // optional int64 jetton_score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &jetton_score_)));
          set_has_jetton_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_jetton_score;
        break;
      }

      // optional int64 total_jetton_score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_jetton_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_jetton_score_)));
          set_has_total_jetton_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_fight_place_jetton_broadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 jetton_area = 2;
  if (has_jetton_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->jetton_area(), output);
  }

  // optional int64 jetton_score = 3;
  if (has_jetton_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->jetton_score(), output);
  }

  // optional int64 total_jetton_score = 4;
  if (has_total_jetton_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->total_jetton_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_fight_place_jetton_broadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional uint32 jetton_area = 2;
  if (has_jetton_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->jetton_area(), target);
  }

  // optional int64 jetton_score = 3;
  if (has_jetton_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->jetton_score(), target);
  }

  // optional int64 total_jetton_score = 4;
  if (has_total_jetton_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->total_jetton_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_fight_place_jetton_broadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 jetton_area = 2;
    if (has_jetton_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jetton_area());
    }

    // optional int64 jetton_score = 3;
    if (has_jetton_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->jetton_score());
    }

    // optional int64 total_jetton_score = 4;
    if (has_total_jetton_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_jetton_score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_fight_place_jetton_broadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_fight_place_jetton_broadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_fight_place_jetton_broadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_fight_place_jetton_broadcast::MergeFrom(const msg_fight_place_jetton_broadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_jetton_area()) {
      set_jetton_area(from.jetton_area());
    }
    if (from.has_jetton_score()) {
      set_jetton_score(from.jetton_score());
    }
    if (from.has_total_jetton_score()) {
      set_total_jetton_score(from.total_jetton_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_fight_place_jetton_broadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_fight_place_jetton_broadcast::CopyFrom(const msg_fight_place_jetton_broadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_fight_place_jetton_broadcast::IsInitialized() const {

  return true;
}

void msg_fight_place_jetton_broadcast::Swap(msg_fight_place_jetton_broadcast* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(jetton_area_, other->jetton_area_);
    std::swap(jetton_score_, other->jetton_score_);
    std::swap(total_jetton_score_, other->total_jetton_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_fight_place_jetton_broadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_fight_place_jetton_broadcast_descriptor_;
  metadata.reflection = msg_fight_place_jetton_broadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_fight_game_end::kTimeLeaveFieldNumber;
const int msg_fight_game_end::kTableCardsFieldNumber;
const int msg_fight_game_end::kCardTypesFieldNumber;
const int msg_fight_game_end::kUserScoreFieldNumber;
const int msg_fight_game_end::kPlayerScoreFieldNumber;
const int msg_fight_game_end::kWinMultipleFieldNumber;
const int msg_fight_game_end::kWinIndexFieldNumber;
#endif  // !_MSC_VER

msg_fight_game_end::msg_fight_game_end()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_fight_game_end::InitAsDefaultInstance() {
}

msg_fight_game_end::msg_fight_game_end(const msg_fight_game_end& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_fight_game_end::SharedCtor() {
  _cached_size_ = 0;
  time_leave_ = 0u;
  user_score_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_fight_game_end::~msg_fight_game_end() {
  SharedDtor();
}

void msg_fight_game_end::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_fight_game_end::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_fight_game_end::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_fight_game_end_descriptor_;
}

const msg_fight_game_end& msg_fight_game_end::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fight_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_fight_game_end* msg_fight_game_end::default_instance_ = NULL;

msg_fight_game_end* msg_fight_game_end::New() const {
  return new msg_fight_game_end;
}

void msg_fight_game_end::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_leave_ = 0u;
    user_score_ = GOOGLE_LONGLONG(0);
  }
  table_cards_.Clear();
  card_types_.Clear();
  player_score_.Clear();
  win_multiple_.Clear();
  win_index_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_fight_game_end::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 time_leave = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_leave_)));
          set_has_time_leave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table_cards;
        break;
      }

      // repeated .net.msg_cards table_cards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_table_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table_cards;
        if (input->ExpectTag(24)) goto parse_card_types;
        break;
      }

      // repeated uint32 card_types = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_types:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_card_types())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_types())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_card_types;
        if (input->ExpectTag(32)) goto parse_user_score;
        break;
      }

      // optional int64 user_score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_score_)));
          set_has_user_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_player_score;
        break;
      }

      // repeated int64 player_score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 40, input, this->mutable_player_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_player_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_player_score;
        if (input->ExpectTag(48)) goto parse_win_multiple;
        break;
      }

      // repeated int32 win_multiple = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_multiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_win_multiple())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_win_multiple())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_win_multiple;
        if (input->ExpectTag(56)) goto parse_win_index;
        break;
      }

      // repeated int32 win_index = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_win_index())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_win_index())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_win_index;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_fight_game_end::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 time_leave = 1;
  if (has_time_leave()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time_leave(), output);
  }

  // repeated .net.msg_cards table_cards = 2;
  for (int i = 0; i < this->table_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->table_cards(i), output);
  }

  // repeated uint32 card_types = 3;
  for (int i = 0; i < this->card_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->card_types(i), output);
  }

  // optional int64 user_score = 4;
  if (has_user_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->user_score(), output);
  }

  // repeated int64 player_score = 5;
  for (int i = 0; i < this->player_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      5, this->player_score(i), output);
  }

  // repeated int32 win_multiple = 6;
  for (int i = 0; i < this->win_multiple_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->win_multiple(i), output);
  }

  // repeated int32 win_index = 7;
  for (int i = 0; i < this->win_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->win_index(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_fight_game_end::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 time_leave = 1;
  if (has_time_leave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time_leave(), target);
  }

  // repeated .net.msg_cards table_cards = 2;
  for (int i = 0; i < this->table_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->table_cards(i), target);
  }

  // repeated uint32 card_types = 3;
  for (int i = 0; i < this->card_types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->card_types(i), target);
  }

  // optional int64 user_score = 4;
  if (has_user_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->user_score(), target);
  }

  // repeated int64 player_score = 5;
  for (int i = 0; i < this->player_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(5, this->player_score(i), target);
  }

  // repeated int32 win_multiple = 6;
  for (int i = 0; i < this->win_multiple_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->win_multiple(i), target);
  }

  // repeated int32 win_index = 7;
  for (int i = 0; i < this->win_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->win_index(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_fight_game_end::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 time_leave = 1;
    if (has_time_leave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_leave());
    }

    // optional int64 user_score = 4;
    if (has_user_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_score());
    }

  }
  // repeated .net.msg_cards table_cards = 2;
  total_size += 1 * this->table_cards_size();
  for (int i = 0; i < this->table_cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->table_cards(i));
  }

  // repeated uint32 card_types = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_types_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->card_types(i));
    }
    total_size += 1 * this->card_types_size() + data_size;
  }

  // repeated int64 player_score = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->player_score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->player_score(i));
    }
    total_size += 1 * this->player_score_size() + data_size;
  }

  // repeated int32 win_multiple = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->win_multiple_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->win_multiple(i));
    }
    total_size += 1 * this->win_multiple_size() + data_size;
  }

  // repeated int32 win_index = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->win_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->win_index(i));
    }
    total_size += 1 * this->win_index_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_fight_game_end::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_fight_game_end* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_fight_game_end*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_fight_game_end::MergeFrom(const msg_fight_game_end& from) {
  GOOGLE_CHECK_NE(&from, this);
  table_cards_.MergeFrom(from.table_cards_);
  card_types_.MergeFrom(from.card_types_);
  player_score_.MergeFrom(from.player_score_);
  win_multiple_.MergeFrom(from.win_multiple_);
  win_index_.MergeFrom(from.win_index_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_leave()) {
      set_time_leave(from.time_leave());
    }
    if (from.has_user_score()) {
      set_user_score(from.user_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_fight_game_end::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_fight_game_end::CopyFrom(const msg_fight_game_end& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_fight_game_end::IsInitialized() const {

  return true;
}

void msg_fight_game_end::Swap(msg_fight_game_end* other) {
  if (other != this) {
    std::swap(time_leave_, other->time_leave_);
    table_cards_.Swap(&other->table_cards_);
    card_types_.Swap(&other->card_types_);
    std::swap(user_score_, other->user_score_);
    player_score_.Swap(&other->player_score_);
    win_multiple_.Swap(&other->win_multiple_);
    win_index_.Swap(&other->win_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_fight_game_end::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_fight_game_end_descriptor_;
  metadata.reflection = msg_fight_game_end_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_fight_change_user_score::kChairIdFieldNumber;
const int msg_fight_change_user_score::kScoreFieldNumber;
#endif  // !_MSC_VER

msg_fight_change_user_score::msg_fight_change_user_score()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_fight_change_user_score::InitAsDefaultInstance() {
}

msg_fight_change_user_score::msg_fight_change_user_score(const msg_fight_change_user_score& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_fight_change_user_score::SharedCtor() {
  _cached_size_ = 0;
  chair_id_ = 0u;
  score_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_fight_change_user_score::~msg_fight_change_user_score() {
  SharedDtor();
}

void msg_fight_change_user_score::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_fight_change_user_score::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_fight_change_user_score::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_fight_change_user_score_descriptor_;
}

const msg_fight_change_user_score& msg_fight_change_user_score::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fight_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_fight_change_user_score* msg_fight_change_user_score::default_instance_ = NULL;

msg_fight_change_user_score* msg_fight_change_user_score::New() const {
  return new msg_fight_change_user_score;
}

void msg_fight_change_user_score::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chair_id_ = 0u;
    score_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_fight_change_user_score::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 chair_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chair_id_)));
          set_has_chair_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional int64 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_fight_change_user_score::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 chair_id = 1;
  if (has_chair_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chair_id(), output);
  }

  // optional int64 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_fight_change_user_score::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 chair_id = 1;
  if (has_chair_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chair_id(), target);
  }

  // optional int64 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_fight_change_user_score::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 chair_id = 1;
    if (has_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chair_id());
    }

    // optional int64 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_fight_change_user_score::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_fight_change_user_score* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_fight_change_user_score*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_fight_change_user_score::MergeFrom(const msg_fight_change_user_score& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chair_id()) {
      set_chair_id(from.chair_id());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_fight_change_user_score::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_fight_change_user_score::CopyFrom(const msg_fight_change_user_score& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_fight_change_user_score::IsInitialized() const {

  return true;
}

void msg_fight_change_user_score::Swap(msg_fight_change_user_score* other) {
  if (other != this) {
    std::swap(chair_id_, other->chair_id_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_fight_change_user_score::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_fight_change_user_score_descriptor_;
  metadata.reflection = msg_fight_change_user_score_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fight_play_log::kSeatsWinFieldNumber;
const int fight_play_log::kCardFieldNumber;
const int fight_play_log::kIndexFieldNumber;
#endif  // !_MSC_VER

fight_play_log::fight_play_log()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fight_play_log::InitAsDefaultInstance() {
}

fight_play_log::fight_play_log(const fight_play_log& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fight_play_log::SharedCtor() {
  _cached_size_ = 0;
  card_ = 0u;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fight_play_log::~fight_play_log() {
  SharedDtor();
}

void fight_play_log::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fight_play_log::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fight_play_log::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fight_play_log_descriptor_;
}

const fight_play_log& fight_play_log::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fight_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

fight_play_log* fight_play_log::default_instance_ = NULL;

fight_play_log* fight_play_log::New() const {
  return new fight_play_log;
}

void fight_play_log::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    card_ = 0u;
    index_ = 0u;
  }
  seats_win_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fight_play_log::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 seats_win = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seats_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_seats_win())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_seats_win())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_seats_win;
        if (input->ExpectTag(16)) goto parse_card;
        break;
      }

      // optional uint32 card = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional uint32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fight_play_log::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 seats_win = 1;
  for (int i = 0; i < this->seats_win_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->seats_win(i), output);
  }

  // optional uint32 card = 2;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->card(), output);
  }

  // optional uint32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fight_play_log::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 seats_win = 1;
  for (int i = 0; i < this->seats_win_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->seats_win(i), target);
  }

  // optional uint32 card = 2;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->card(), target);
  }

  // optional uint32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fight_play_log::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 card = 2;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card());
    }

    // optional uint32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  // repeated uint32 seats_win = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->seats_win_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->seats_win(i));
    }
    total_size += 1 * this->seats_win_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fight_play_log::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fight_play_log* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fight_play_log*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fight_play_log::MergeFrom(const fight_play_log& from) {
  GOOGLE_CHECK_NE(&from, this);
  seats_win_.MergeFrom(from.seats_win_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fight_play_log::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fight_play_log::CopyFrom(const fight_play_log& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fight_play_log::IsInitialized() const {

  return true;
}

void fight_play_log::Swap(fight_play_log* other) {
  if (other != this) {
    seats_win_.Swap(&other->seats_win_);
    std::swap(card_, other->card_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fight_play_log::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fight_play_log_descriptor_;
  metadata.reflection = fight_play_log_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_fight_play_log_rep::kLogsFieldNumber;
#endif  // !_MSC_VER

msg_fight_play_log_rep::msg_fight_play_log_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_fight_play_log_rep::InitAsDefaultInstance() {
}

msg_fight_play_log_rep::msg_fight_play_log_rep(const msg_fight_play_log_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_fight_play_log_rep::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_fight_play_log_rep::~msg_fight_play_log_rep() {
  SharedDtor();
}

void msg_fight_play_log_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_fight_play_log_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_fight_play_log_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_fight_play_log_rep_descriptor_;
}

const msg_fight_play_log_rep& msg_fight_play_log_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fight_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_fight_play_log_rep* msg_fight_play_log_rep::default_instance_ = NULL;

msg_fight_play_log_rep* msg_fight_play_log_rep::New() const {
  return new msg_fight_play_log_rep;
}

void msg_fight_play_log_rep::Clear() {
  logs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_fight_play_log_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .net.fight_play_log logs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_logs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_logs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_fight_play_log_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .net.fight_play_log logs = 1;
  for (int i = 0; i < this->logs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->logs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_fight_play_log_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .net.fight_play_log logs = 1;
  for (int i = 0; i < this->logs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->logs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_fight_play_log_rep::ByteSize() const {
  int total_size = 0;

  // repeated .net.fight_play_log logs = 1;
  total_size += 1 * this->logs_size();
  for (int i = 0; i < this->logs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->logs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_fight_play_log_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_fight_play_log_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_fight_play_log_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_fight_play_log_rep::MergeFrom(const msg_fight_play_log_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  logs_.MergeFrom(from.logs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_fight_play_log_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_fight_play_log_rep::CopyFrom(const msg_fight_play_log_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_fight_play_log_rep::IsInitialized() const {

  return true;
}

void msg_fight_play_log_rep::Swap(msg_fight_play_log_rep* other) {
  if (other != this) {
    logs_.Swap(&other->logs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_fight_play_log_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_fight_play_log_rep_descriptor_;
  metadata.reflection = msg_fight_play_log_rep_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace net

// @@protoc_insertion_point(global_scope)
