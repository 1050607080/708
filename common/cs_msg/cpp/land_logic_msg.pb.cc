// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: land_logic_msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "land_logic_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace net {

namespace {

const ::google::protobuf::Descriptor* msg_land_game_info_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_land_game_info_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_land_start_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_land_start_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_land_call_score_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_land_call_score_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_land_call_score_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_land_call_score_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_land_req_hand_card_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_land_req_hand_card_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_land_hand_card_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_land_hand_card_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_land_banker_info_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_land_banker_info_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_land_out_card_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_land_out_card_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_land_out_card_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_land_out_card_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_land_pass_card_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_land_pass_card_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_land_pass_card_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_land_pass_card_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_land_game_over_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_land_game_over_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_land_marry_player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_land_marry_player_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_land_5flogic_5fmsg_2eproto() {
  protobuf_AddDesc_land_5flogic_5fmsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "land_logic_msg.proto");
  GOOGLE_CHECK(file != NULL);
  msg_land_game_info_rep_descriptor_ = file->message_type(0);
  static const int msg_land_game_info_rep_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_game_info_rep, bomb_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_game_info_rep, banker_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_game_info_rep, cur_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_game_info_rep, banker_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_game_info_rep, turn_winer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_game_info_rep, first_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_game_info_rep, turn_card_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_game_info_rep, banker_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_game_info_rep, hand_card_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_game_info_rep, hand_card_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_game_info_rep, game_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_game_info_rep, wait_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_game_info_rep, call_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_game_info_rep, mem_card_mac_),
  };
  msg_land_game_info_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_land_game_info_rep_descriptor_,
      msg_land_game_info_rep::default_instance_,
      msg_land_game_info_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_game_info_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_game_info_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_land_game_info_rep));
  msg_land_start_rep_descriptor_ = file->message_type(1);
  static const int msg_land_start_rep_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_start_rep, start_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_start_rep, cur_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_start_rep, valid_card_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_start_rep, valid_card_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_start_rep, card_data_),
  };
  msg_land_start_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_land_start_rep_descriptor_,
      msg_land_start_rep::default_instance_,
      msg_land_start_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_start_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_start_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_land_start_rep));
  msg_land_call_score_req_descriptor_ = file->message_type(2);
  static const int msg_land_call_score_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_call_score_req, call_score_),
  };
  msg_land_call_score_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_land_call_score_req_descriptor_,
      msg_land_call_score_req::default_instance_,
      msg_land_call_score_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_call_score_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_call_score_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_land_call_score_req));
  msg_land_call_score_rep_descriptor_ = file->message_type(3);
  static const int msg_land_call_score_rep_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_call_score_rep, cur_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_call_score_rep, call_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_call_score_rep, call_score_),
  };
  msg_land_call_score_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_land_call_score_rep_descriptor_,
      msg_land_call_score_rep::default_instance_,
      msg_land_call_score_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_call_score_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_call_score_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_land_call_score_rep));
  msg_land_req_hand_card_req_descriptor_ = file->message_type(4);
  static const int msg_land_req_hand_card_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_req_hand_card_req, chair_id_),
  };
  msg_land_req_hand_card_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_land_req_hand_card_req_descriptor_,
      msg_land_req_hand_card_req::default_instance_,
      msg_land_req_hand_card_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_req_hand_card_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_req_hand_card_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_land_req_hand_card_req));
  msg_land_hand_card_rep_descriptor_ = file->message_type(5);
  static const int msg_land_hand_card_rep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_hand_card_rep, chair_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_hand_card_rep, card_data_),
  };
  msg_land_hand_card_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_land_hand_card_rep_descriptor_,
      msg_land_hand_card_rep::default_instance_,
      msg_land_hand_card_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_hand_card_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_hand_card_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_land_hand_card_rep));
  msg_land_banker_info_rep_descriptor_ = file->message_type(6);
  static const int msg_land_banker_info_rep_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_banker_info_rep, banker_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_banker_info_rep, cur_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_banker_info_rep, call_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_banker_info_rep, banker_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_banker_info_rep, mem_card_mac_),
  };
  msg_land_banker_info_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_land_banker_info_rep_descriptor_,
      msg_land_banker_info_rep::default_instance_,
      msg_land_banker_info_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_banker_info_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_banker_info_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_land_banker_info_rep));
  msg_land_out_card_req_descriptor_ = file->message_type(7);
  static const int msg_land_out_card_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_out_card_req, card_data_),
  };
  msg_land_out_card_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_land_out_card_req_descriptor_,
      msg_land_out_card_req::default_instance_,
      msg_land_out_card_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_out_card_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_out_card_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_land_out_card_req));
  msg_land_out_card_rep_descriptor_ = file->message_type(8);
  static const int msg_land_out_card_rep_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_out_card_rep, cur_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_out_card_rep, out_card_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_out_card_rep, card_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_out_card_rep, mem_card_mac_),
  };
  msg_land_out_card_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_land_out_card_rep_descriptor_,
      msg_land_out_card_rep::default_instance_,
      msg_land_out_card_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_out_card_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_out_card_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_land_out_card_rep));
  msg_land_pass_card_req_descriptor_ = file->message_type(9);
  static const int msg_land_pass_card_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_pass_card_req, reason_),
  };
  msg_land_pass_card_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_land_pass_card_req_descriptor_,
      msg_land_pass_card_req::default_instance_,
      msg_land_pass_card_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_pass_card_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_pass_card_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_land_pass_card_req));
  msg_land_pass_card_rep_descriptor_ = file->message_type(10);
  static const int msg_land_pass_card_rep_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_pass_card_rep, turn_over_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_pass_card_rep, cur_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_pass_card_rep, pass_card_user_),
  };
  msg_land_pass_card_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_land_pass_card_rep_descriptor_,
      msg_land_pass_card_rep::default_instance_,
      msg_land_pass_card_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_pass_card_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_pass_card_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_land_pass_card_rep));
  msg_land_game_over_rep_descriptor_ = file->message_type(11);
  static const int msg_land_game_over_rep_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_game_over_rep, scores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_game_over_rep, chun_tian_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_game_over_rep, fan_chun_tian_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_game_over_rep, bomb_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_game_over_rep, each_bomb_counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_game_over_rep, blind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_game_over_rep, card_counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_game_over_rep, hand_card_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_game_over_rep, all_card_data_),
  };
  msg_land_game_over_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_land_game_over_rep_descriptor_,
      msg_land_game_over_rep::default_instance_,
      msg_land_game_over_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_game_over_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_game_over_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_land_game_over_rep));
  msg_land_marry_player_descriptor_ = file->message_type(12);
  static const int msg_land_marry_player_offsets_[1] = {
  };
  msg_land_marry_player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_land_marry_player_descriptor_,
      msg_land_marry_player::default_instance_,
      msg_land_marry_player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_marry_player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_land_marry_player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_land_marry_player));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_land_5flogic_5fmsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_land_game_info_rep_descriptor_, &msg_land_game_info_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_land_start_rep_descriptor_, &msg_land_start_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_land_call_score_req_descriptor_, &msg_land_call_score_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_land_call_score_rep_descriptor_, &msg_land_call_score_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_land_req_hand_card_req_descriptor_, &msg_land_req_hand_card_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_land_hand_card_rep_descriptor_, &msg_land_hand_card_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_land_banker_info_rep_descriptor_, &msg_land_banker_info_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_land_out_card_req_descriptor_, &msg_land_out_card_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_land_out_card_rep_descriptor_, &msg_land_out_card_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_land_pass_card_req_descriptor_, &msg_land_pass_card_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_land_pass_card_rep_descriptor_, &msg_land_pass_card_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_land_game_over_rep_descriptor_, &msg_land_game_over_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_land_marry_player_descriptor_, &msg_land_marry_player::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_land_5flogic_5fmsg_2eproto() {
  delete msg_land_game_info_rep::default_instance_;
  delete msg_land_game_info_rep_reflection_;
  delete msg_land_start_rep::default_instance_;
  delete msg_land_start_rep_reflection_;
  delete msg_land_call_score_req::default_instance_;
  delete msg_land_call_score_req_reflection_;
  delete msg_land_call_score_rep::default_instance_;
  delete msg_land_call_score_rep_reflection_;
  delete msg_land_req_hand_card_req::default_instance_;
  delete msg_land_req_hand_card_req_reflection_;
  delete msg_land_hand_card_rep::default_instance_;
  delete msg_land_hand_card_rep_reflection_;
  delete msg_land_banker_info_rep::default_instance_;
  delete msg_land_banker_info_rep_reflection_;
  delete msg_land_out_card_req::default_instance_;
  delete msg_land_out_card_req_reflection_;
  delete msg_land_out_card_rep::default_instance_;
  delete msg_land_out_card_rep_reflection_;
  delete msg_land_pass_card_req::default_instance_;
  delete msg_land_pass_card_req_reflection_;
  delete msg_land_pass_card_rep::default_instance_;
  delete msg_land_pass_card_rep_reflection_;
  delete msg_land_game_over_rep::default_instance_;
  delete msg_land_game_over_rep_reflection_;
  delete msg_land_marry_player::default_instance_;
  delete msg_land_marry_player_reflection_;
}

void protobuf_AddDesc_land_5flogic_5fmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::net::protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  ::net::protobuf_AddDesc_error_5fcode_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024land_logic_msg.proto\022\003net\032\025base_msg_st"
    "ruct.proto\032\020error_code.proto\"\300\002\n\026msg_lan"
    "d_game_info_rep\022\022\n\nbomb_count\030\001 \001(\r\022\023\n\013b"
    "anker_user\030\002 \001(\r\022\020\n\010cur_user\030\003 \001(\r\022\024\n\014ba"
    "nker_score\030\004 \001(\r\022\022\n\nturn_winer\030\005 \001(\r\022\022\n\n"
    "first_user\030\006 \001(\r\022\026\n\016turn_card_data\030\007 \003(\r"
    "\022\023\n\013banker_card\030\010 \003(\r\022\027\n\017hand_card_count"
    "\030\t \003(\r\022\026\n\016hand_card_data\030\n \003(\r\022\022\n\ngame_s"
    "tate\030\013 \001(\r\022\021\n\twait_time\030\014 \001(\r\022\022\n\ncall_sc"
    "ore\030\r \003(\r\022\024\n\014mem_card_mac\030\016 \003(\r\"\200\001\n\022msg_"
    "land_start_rep\022\022\n\nstart_user\030\001 \001(\r\022\020\n\010cu"
    "r_user\030\002 \001(\r\022\027\n\017valid_card_data\030\003 \001(\r\022\030\n"
    "\020valid_card_index\030\004 \001(\r\022\021\n\tcard_data\030\005 \003"
    "(\r\"-\n\027msg_land_call_score_req\022\022\n\ncall_sc"
    "ore\030\001 \001(\r\"R\n\027msg_land_call_score_rep\022\020\n\010"
    "cur_user\030\001 \001(\r\022\021\n\tcall_user\030\002 \001(\r\022\022\n\ncal"
    "l_score\030\003 \001(\r\".\n\032msg_land_req_hand_card_"
    "req\022\020\n\010chair_id\030\001 \001(\r\"=\n\026msg_land_hand_c"
    "ard_rep\022\020\n\010chair_id\030\001 \001(\r\022\021\n\tcard_data\030\002"
    " \003(\r\"\200\001\n\030msg_land_banker_info_rep\022\023\n\013ban"
    "ker_user\030\001 \001(\r\022\020\n\010cur_user\030\002 \001(\r\022\022\n\ncall"
    "_score\030\003 \001(\r\022\023\n\013banker_card\030\004 \003(\r\022\024\n\014mem"
    "_card_mac\030\005 \003(\r\"*\n\025msg_land_out_card_req"
    "\022\021\n\tcard_data\030\001 \003(\r\"i\n\025msg_land_out_card"
    "_rep\022\020\n\010cur_user\030\001 \001(\r\022\025\n\rout_card_user\030"
    "\002 \001(\r\022\021\n\tcard_data\030\003 \003(\r\022\024\n\014mem_card_mac"
    "\030\004 \003(\r\"(\n\026msg_land_pass_card_req\022\016\n\006reas"
    "on\030\001 \001(\r\"U\n\026msg_land_pass_card_rep\022\021\n\ttu"
    "rn_over\030\001 \001(\r\022\020\n\010cur_user\030\002 \001(\r\022\026\n\016pass_"
    "card_user\030\003 \001(\r\"\343\001\n\026msg_land_game_over_r"
    "ep\022\016\n\006scores\030\001 \003(\003\022\021\n\tchun_tian\030\002 \001(\r\022\025\n"
    "\rfan_chun_tian\030\003 \001(\r\022\022\n\nbomb_count\030\004 \001(\r"
    "\022\030\n\020each_bomb_counts\030\005 \003(\r\022\r\n\005blind\030\006 \001("
    "\r\022\023\n\013card_counts\030\007 \003(\r\022\026\n\016hand_card_data"
    "\030\010 \003(\r\022%\n\rall_card_data\030\t \003(\0132\016.net.msg_"
    "cards\"\027\n\025msg_land_marry_player", 1430);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "land_logic_msg.proto", &protobuf_RegisterTypes);
  msg_land_game_info_rep::default_instance_ = new msg_land_game_info_rep();
  msg_land_start_rep::default_instance_ = new msg_land_start_rep();
  msg_land_call_score_req::default_instance_ = new msg_land_call_score_req();
  msg_land_call_score_rep::default_instance_ = new msg_land_call_score_rep();
  msg_land_req_hand_card_req::default_instance_ = new msg_land_req_hand_card_req();
  msg_land_hand_card_rep::default_instance_ = new msg_land_hand_card_rep();
  msg_land_banker_info_rep::default_instance_ = new msg_land_banker_info_rep();
  msg_land_out_card_req::default_instance_ = new msg_land_out_card_req();
  msg_land_out_card_rep::default_instance_ = new msg_land_out_card_rep();
  msg_land_pass_card_req::default_instance_ = new msg_land_pass_card_req();
  msg_land_pass_card_rep::default_instance_ = new msg_land_pass_card_rep();
  msg_land_game_over_rep::default_instance_ = new msg_land_game_over_rep();
  msg_land_marry_player::default_instance_ = new msg_land_marry_player();
  msg_land_game_info_rep::default_instance_->InitAsDefaultInstance();
  msg_land_start_rep::default_instance_->InitAsDefaultInstance();
  msg_land_call_score_req::default_instance_->InitAsDefaultInstance();
  msg_land_call_score_rep::default_instance_->InitAsDefaultInstance();
  msg_land_req_hand_card_req::default_instance_->InitAsDefaultInstance();
  msg_land_hand_card_rep::default_instance_->InitAsDefaultInstance();
  msg_land_banker_info_rep::default_instance_->InitAsDefaultInstance();
  msg_land_out_card_req::default_instance_->InitAsDefaultInstance();
  msg_land_out_card_rep::default_instance_->InitAsDefaultInstance();
  msg_land_pass_card_req::default_instance_->InitAsDefaultInstance();
  msg_land_pass_card_rep::default_instance_->InitAsDefaultInstance();
  msg_land_game_over_rep::default_instance_->InitAsDefaultInstance();
  msg_land_marry_player::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_land_5flogic_5fmsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_land_5flogic_5fmsg_2eproto {
  StaticDescriptorInitializer_land_5flogic_5fmsg_2eproto() {
    protobuf_AddDesc_land_5flogic_5fmsg_2eproto();
  }
} static_descriptor_initializer_land_5flogic_5fmsg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int msg_land_game_info_rep::kBombCountFieldNumber;
const int msg_land_game_info_rep::kBankerUserFieldNumber;
const int msg_land_game_info_rep::kCurUserFieldNumber;
const int msg_land_game_info_rep::kBankerScoreFieldNumber;
const int msg_land_game_info_rep::kTurnWinerFieldNumber;
const int msg_land_game_info_rep::kFirstUserFieldNumber;
const int msg_land_game_info_rep::kTurnCardDataFieldNumber;
const int msg_land_game_info_rep::kBankerCardFieldNumber;
const int msg_land_game_info_rep::kHandCardCountFieldNumber;
const int msg_land_game_info_rep::kHandCardDataFieldNumber;
const int msg_land_game_info_rep::kGameStateFieldNumber;
const int msg_land_game_info_rep::kWaitTimeFieldNumber;
const int msg_land_game_info_rep::kCallScoreFieldNumber;
const int msg_land_game_info_rep::kMemCardMacFieldNumber;
#endif  // !_MSC_VER

msg_land_game_info_rep::msg_land_game_info_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_land_game_info_rep::InitAsDefaultInstance() {
}

msg_land_game_info_rep::msg_land_game_info_rep(const msg_land_game_info_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_land_game_info_rep::SharedCtor() {
  _cached_size_ = 0;
  bomb_count_ = 0u;
  banker_user_ = 0u;
  cur_user_ = 0u;
  banker_score_ = 0u;
  turn_winer_ = 0u;
  first_user_ = 0u;
  game_state_ = 0u;
  wait_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_land_game_info_rep::~msg_land_game_info_rep() {
  SharedDtor();
}

void msg_land_game_info_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_land_game_info_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_land_game_info_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_land_game_info_rep_descriptor_;
}

const msg_land_game_info_rep& msg_land_game_info_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_land_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_land_game_info_rep* msg_land_game_info_rep::default_instance_ = NULL;

msg_land_game_info_rep* msg_land_game_info_rep::New() const {
  return new msg_land_game_info_rep;
}

void msg_land_game_info_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bomb_count_ = 0u;
    banker_user_ = 0u;
    cur_user_ = 0u;
    banker_score_ = 0u;
    turn_winer_ = 0u;
    first_user_ = 0u;
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    game_state_ = 0u;
    wait_time_ = 0u;
  }
  turn_card_data_.Clear();
  banker_card_.Clear();
  hand_card_count_.Clear();
  hand_card_data_.Clear();
  call_score_.Clear();
  mem_card_mac_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_land_game_info_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bomb_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bomb_count_)));
          set_has_bomb_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_banker_user;
        break;
      }

      // optional uint32 banker_user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &banker_user_)));
          set_has_banker_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_user;
        break;
      }

      // optional uint32 cur_user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_user_)));
          set_has_cur_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_banker_score;
        break;
      }

      // optional uint32 banker_score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &banker_score_)));
          set_has_banker_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_turn_winer;
        break;
      }

      // optional uint32 turn_winer = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turn_winer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &turn_winer_)));
          set_has_turn_winer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_first_user;
        break;
      }

      // optional uint32 first_user = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_user_)));
          set_has_first_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_turn_card_data;
        break;
      }

      // repeated uint32 turn_card_data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turn_card_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_turn_card_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_turn_card_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_turn_card_data;
        if (input->ExpectTag(64)) goto parse_banker_card;
        break;
      }

      // repeated uint32 banker_card = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_banker_card())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_banker_card())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_banker_card;
        if (input->ExpectTag(72)) goto parse_hand_card_count;
        break;
      }

      // repeated uint32 hand_card_count = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hand_card_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72, input, this->mutable_hand_card_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hand_card_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_hand_card_count;
        if (input->ExpectTag(80)) goto parse_hand_card_data;
        break;
      }

      // repeated uint32 hand_card_data = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hand_card_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80, input, this->mutable_hand_card_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hand_card_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_hand_card_data;
        if (input->ExpectTag(88)) goto parse_game_state;
        break;
      }

      // optional uint32 game_state = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_state_)));
          set_has_game_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_wait_time;
        break;
      }

      // optional uint32 wait_time = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wait_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wait_time_)));
          set_has_wait_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_call_score;
        break;
      }

      // repeated uint32 call_score = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_call_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 104, input, this->mutable_call_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_call_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_call_score;
        if (input->ExpectTag(112)) goto parse_mem_card_mac;
        break;
      }

      // repeated uint32 mem_card_mac = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mem_card_mac:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 112, input, this->mutable_mem_card_mac())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mem_card_mac())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_mem_card_mac;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_land_game_info_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bomb_count = 1;
  if (has_bomb_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bomb_count(), output);
  }

  // optional uint32 banker_user = 2;
  if (has_banker_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->banker_user(), output);
  }

  // optional uint32 cur_user = 3;
  if (has_cur_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cur_user(), output);
  }

  // optional uint32 banker_score = 4;
  if (has_banker_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->banker_score(), output);
  }

  // optional uint32 turn_winer = 5;
  if (has_turn_winer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->turn_winer(), output);
  }

  // optional uint32 first_user = 6;
  if (has_first_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->first_user(), output);
  }

  // repeated uint32 turn_card_data = 7;
  for (int i = 0; i < this->turn_card_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->turn_card_data(i), output);
  }

  // repeated uint32 banker_card = 8;
  for (int i = 0; i < this->banker_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->banker_card(i), output);
  }

  // repeated uint32 hand_card_count = 9;
  for (int i = 0; i < this->hand_card_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->hand_card_count(i), output);
  }

  // repeated uint32 hand_card_data = 10;
  for (int i = 0; i < this->hand_card_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->hand_card_data(i), output);
  }

  // optional uint32 game_state = 11;
  if (has_game_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->game_state(), output);
  }

  // optional uint32 wait_time = 12;
  if (has_wait_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->wait_time(), output);
  }

  // repeated uint32 call_score = 13;
  for (int i = 0; i < this->call_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      13, this->call_score(i), output);
  }

  // repeated uint32 mem_card_mac = 14;
  for (int i = 0; i < this->mem_card_mac_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      14, this->mem_card_mac(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_land_game_info_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bomb_count = 1;
  if (has_bomb_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bomb_count(), target);
  }

  // optional uint32 banker_user = 2;
  if (has_banker_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->banker_user(), target);
  }

  // optional uint32 cur_user = 3;
  if (has_cur_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cur_user(), target);
  }

  // optional uint32 banker_score = 4;
  if (has_banker_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->banker_score(), target);
  }

  // optional uint32 turn_winer = 5;
  if (has_turn_winer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->turn_winer(), target);
  }

  // optional uint32 first_user = 6;
  if (has_first_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->first_user(), target);
  }

  // repeated uint32 turn_card_data = 7;
  for (int i = 0; i < this->turn_card_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->turn_card_data(i), target);
  }

  // repeated uint32 banker_card = 8;
  for (int i = 0; i < this->banker_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->banker_card(i), target);
  }

  // repeated uint32 hand_card_count = 9;
  for (int i = 0; i < this->hand_card_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(9, this->hand_card_count(i), target);
  }

  // repeated uint32 hand_card_data = 10;
  for (int i = 0; i < this->hand_card_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(10, this->hand_card_data(i), target);
  }

  // optional uint32 game_state = 11;
  if (has_game_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->game_state(), target);
  }

  // optional uint32 wait_time = 12;
  if (has_wait_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->wait_time(), target);
  }

  // repeated uint32 call_score = 13;
  for (int i = 0; i < this->call_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(13, this->call_score(i), target);
  }

  // repeated uint32 mem_card_mac = 14;
  for (int i = 0; i < this->mem_card_mac_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(14, this->mem_card_mac(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_land_game_info_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bomb_count = 1;
    if (has_bomb_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bomb_count());
    }

    // optional uint32 banker_user = 2;
    if (has_banker_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->banker_user());
    }

    // optional uint32 cur_user = 3;
    if (has_cur_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_user());
    }

    // optional uint32 banker_score = 4;
    if (has_banker_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->banker_score());
    }

    // optional uint32 turn_winer = 5;
    if (has_turn_winer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->turn_winer());
    }

    // optional uint32 first_user = 6;
    if (has_first_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first_user());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional uint32 game_state = 11;
    if (has_game_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_state());
    }

    // optional uint32 wait_time = 12;
    if (has_wait_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wait_time());
    }

  }
  // repeated uint32 turn_card_data = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->turn_card_data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->turn_card_data(i));
    }
    total_size += 1 * this->turn_card_data_size() + data_size;
  }

  // repeated uint32 banker_card = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->banker_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->banker_card(i));
    }
    total_size += 1 * this->banker_card_size() + data_size;
  }

  // repeated uint32 hand_card_count = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->hand_card_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hand_card_count(i));
    }
    total_size += 1 * this->hand_card_count_size() + data_size;
  }

  // repeated uint32 hand_card_data = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->hand_card_data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hand_card_data(i));
    }
    total_size += 1 * this->hand_card_data_size() + data_size;
  }

  // repeated uint32 call_score = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->call_score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->call_score(i));
    }
    total_size += 1 * this->call_score_size() + data_size;
  }

  // repeated uint32 mem_card_mac = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->mem_card_mac_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mem_card_mac(i));
    }
    total_size += 1 * this->mem_card_mac_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_land_game_info_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_land_game_info_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_land_game_info_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_land_game_info_rep::MergeFrom(const msg_land_game_info_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  turn_card_data_.MergeFrom(from.turn_card_data_);
  banker_card_.MergeFrom(from.banker_card_);
  hand_card_count_.MergeFrom(from.hand_card_count_);
  hand_card_data_.MergeFrom(from.hand_card_data_);
  call_score_.MergeFrom(from.call_score_);
  mem_card_mac_.MergeFrom(from.mem_card_mac_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bomb_count()) {
      set_bomb_count(from.bomb_count());
    }
    if (from.has_banker_user()) {
      set_banker_user(from.banker_user());
    }
    if (from.has_cur_user()) {
      set_cur_user(from.cur_user());
    }
    if (from.has_banker_score()) {
      set_banker_score(from.banker_score());
    }
    if (from.has_turn_winer()) {
      set_turn_winer(from.turn_winer());
    }
    if (from.has_first_user()) {
      set_first_user(from.first_user());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_game_state()) {
      set_game_state(from.game_state());
    }
    if (from.has_wait_time()) {
      set_wait_time(from.wait_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_land_game_info_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_land_game_info_rep::CopyFrom(const msg_land_game_info_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_land_game_info_rep::IsInitialized() const {

  return true;
}

void msg_land_game_info_rep::Swap(msg_land_game_info_rep* other) {
  if (other != this) {
    std::swap(bomb_count_, other->bomb_count_);
    std::swap(banker_user_, other->banker_user_);
    std::swap(cur_user_, other->cur_user_);
    std::swap(banker_score_, other->banker_score_);
    std::swap(turn_winer_, other->turn_winer_);
    std::swap(first_user_, other->first_user_);
    turn_card_data_.Swap(&other->turn_card_data_);
    banker_card_.Swap(&other->banker_card_);
    hand_card_count_.Swap(&other->hand_card_count_);
    hand_card_data_.Swap(&other->hand_card_data_);
    std::swap(game_state_, other->game_state_);
    std::swap(wait_time_, other->wait_time_);
    call_score_.Swap(&other->call_score_);
    mem_card_mac_.Swap(&other->mem_card_mac_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_land_game_info_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_land_game_info_rep_descriptor_;
  metadata.reflection = msg_land_game_info_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_land_start_rep::kStartUserFieldNumber;
const int msg_land_start_rep::kCurUserFieldNumber;
const int msg_land_start_rep::kValidCardDataFieldNumber;
const int msg_land_start_rep::kValidCardIndexFieldNumber;
const int msg_land_start_rep::kCardDataFieldNumber;
#endif  // !_MSC_VER

msg_land_start_rep::msg_land_start_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_land_start_rep::InitAsDefaultInstance() {
}

msg_land_start_rep::msg_land_start_rep(const msg_land_start_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_land_start_rep::SharedCtor() {
  _cached_size_ = 0;
  start_user_ = 0u;
  cur_user_ = 0u;
  valid_card_data_ = 0u;
  valid_card_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_land_start_rep::~msg_land_start_rep() {
  SharedDtor();
}

void msg_land_start_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_land_start_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_land_start_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_land_start_rep_descriptor_;
}

const msg_land_start_rep& msg_land_start_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_land_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_land_start_rep* msg_land_start_rep::default_instance_ = NULL;

msg_land_start_rep* msg_land_start_rep::New() const {
  return new msg_land_start_rep;
}

void msg_land_start_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    start_user_ = 0u;
    cur_user_ = 0u;
    valid_card_data_ = 0u;
    valid_card_index_ = 0u;
  }
  card_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_land_start_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 start_user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_user_)));
          set_has_start_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_user;
        break;
      }

      // optional uint32 cur_user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_user_)));
          set_has_cur_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valid_card_data;
        break;
      }

      // optional uint32 valid_card_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valid_card_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &valid_card_data_)));
          set_has_valid_card_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_valid_card_index;
        break;
      }

      // optional uint32 valid_card_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valid_card_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &valid_card_index_)));
          set_has_valid_card_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_card_data;
        break;
      }

      // repeated uint32 card_data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_card_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_card_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_land_start_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 start_user = 1;
  if (has_start_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->start_user(), output);
  }

  // optional uint32 cur_user = 2;
  if (has_cur_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cur_user(), output);
  }

  // optional uint32 valid_card_data = 3;
  if (has_valid_card_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->valid_card_data(), output);
  }

  // optional uint32 valid_card_index = 4;
  if (has_valid_card_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->valid_card_index(), output);
  }

  // repeated uint32 card_data = 5;
  for (int i = 0; i < this->card_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->card_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_land_start_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 start_user = 1;
  if (has_start_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->start_user(), target);
  }

  // optional uint32 cur_user = 2;
  if (has_cur_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cur_user(), target);
  }

  // optional uint32 valid_card_data = 3;
  if (has_valid_card_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->valid_card_data(), target);
  }

  // optional uint32 valid_card_index = 4;
  if (has_valid_card_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->valid_card_index(), target);
  }

  // repeated uint32 card_data = 5;
  for (int i = 0; i < this->card_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->card_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_land_start_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 start_user = 1;
    if (has_start_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_user());
    }

    // optional uint32 cur_user = 2;
    if (has_cur_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_user());
    }

    // optional uint32 valid_card_data = 3;
    if (has_valid_card_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->valid_card_data());
    }

    // optional uint32 valid_card_index = 4;
    if (has_valid_card_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->valid_card_index());
    }

  }
  // repeated uint32 card_data = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->card_data(i));
    }
    total_size += 1 * this->card_data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_land_start_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_land_start_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_land_start_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_land_start_rep::MergeFrom(const msg_land_start_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_data_.MergeFrom(from.card_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_user()) {
      set_start_user(from.start_user());
    }
    if (from.has_cur_user()) {
      set_cur_user(from.cur_user());
    }
    if (from.has_valid_card_data()) {
      set_valid_card_data(from.valid_card_data());
    }
    if (from.has_valid_card_index()) {
      set_valid_card_index(from.valid_card_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_land_start_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_land_start_rep::CopyFrom(const msg_land_start_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_land_start_rep::IsInitialized() const {

  return true;
}

void msg_land_start_rep::Swap(msg_land_start_rep* other) {
  if (other != this) {
    std::swap(start_user_, other->start_user_);
    std::swap(cur_user_, other->cur_user_);
    std::swap(valid_card_data_, other->valid_card_data_);
    std::swap(valid_card_index_, other->valid_card_index_);
    card_data_.Swap(&other->card_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_land_start_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_land_start_rep_descriptor_;
  metadata.reflection = msg_land_start_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_land_call_score_req::kCallScoreFieldNumber;
#endif  // !_MSC_VER

msg_land_call_score_req::msg_land_call_score_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_land_call_score_req::InitAsDefaultInstance() {
}

msg_land_call_score_req::msg_land_call_score_req(const msg_land_call_score_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_land_call_score_req::SharedCtor() {
  _cached_size_ = 0;
  call_score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_land_call_score_req::~msg_land_call_score_req() {
  SharedDtor();
}

void msg_land_call_score_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_land_call_score_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_land_call_score_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_land_call_score_req_descriptor_;
}

const msg_land_call_score_req& msg_land_call_score_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_land_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_land_call_score_req* msg_land_call_score_req::default_instance_ = NULL;

msg_land_call_score_req* msg_land_call_score_req::New() const {
  return new msg_land_call_score_req;
}

void msg_land_call_score_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    call_score_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_land_call_score_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 call_score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &call_score_)));
          set_has_call_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_land_call_score_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 call_score = 1;
  if (has_call_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->call_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_land_call_score_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 call_score = 1;
  if (has_call_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->call_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_land_call_score_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 call_score = 1;
    if (has_call_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->call_score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_land_call_score_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_land_call_score_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_land_call_score_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_land_call_score_req::MergeFrom(const msg_land_call_score_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_call_score()) {
      set_call_score(from.call_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_land_call_score_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_land_call_score_req::CopyFrom(const msg_land_call_score_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_land_call_score_req::IsInitialized() const {

  return true;
}

void msg_land_call_score_req::Swap(msg_land_call_score_req* other) {
  if (other != this) {
    std::swap(call_score_, other->call_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_land_call_score_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_land_call_score_req_descriptor_;
  metadata.reflection = msg_land_call_score_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_land_call_score_rep::kCurUserFieldNumber;
const int msg_land_call_score_rep::kCallUserFieldNumber;
const int msg_land_call_score_rep::kCallScoreFieldNumber;
#endif  // !_MSC_VER

msg_land_call_score_rep::msg_land_call_score_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_land_call_score_rep::InitAsDefaultInstance() {
}

msg_land_call_score_rep::msg_land_call_score_rep(const msg_land_call_score_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_land_call_score_rep::SharedCtor() {
  _cached_size_ = 0;
  cur_user_ = 0u;
  call_user_ = 0u;
  call_score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_land_call_score_rep::~msg_land_call_score_rep() {
  SharedDtor();
}

void msg_land_call_score_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_land_call_score_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_land_call_score_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_land_call_score_rep_descriptor_;
}

const msg_land_call_score_rep& msg_land_call_score_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_land_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_land_call_score_rep* msg_land_call_score_rep::default_instance_ = NULL;

msg_land_call_score_rep* msg_land_call_score_rep::New() const {
  return new msg_land_call_score_rep;
}

void msg_land_call_score_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cur_user_ = 0u;
    call_user_ = 0u;
    call_score_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_land_call_score_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cur_user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_user_)));
          set_has_cur_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_call_user;
        break;
      }

      // optional uint32 call_user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_call_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &call_user_)));
          set_has_call_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_call_score;
        break;
      }

      // optional uint32 call_score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_call_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &call_score_)));
          set_has_call_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_land_call_score_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cur_user = 1;
  if (has_cur_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cur_user(), output);
  }

  // optional uint32 call_user = 2;
  if (has_call_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->call_user(), output);
  }

  // optional uint32 call_score = 3;
  if (has_call_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->call_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_land_call_score_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cur_user = 1;
  if (has_cur_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cur_user(), target);
  }

  // optional uint32 call_user = 2;
  if (has_call_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->call_user(), target);
  }

  // optional uint32 call_score = 3;
  if (has_call_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->call_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_land_call_score_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cur_user = 1;
    if (has_cur_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_user());
    }

    // optional uint32 call_user = 2;
    if (has_call_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->call_user());
    }

    // optional uint32 call_score = 3;
    if (has_call_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->call_score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_land_call_score_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_land_call_score_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_land_call_score_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_land_call_score_rep::MergeFrom(const msg_land_call_score_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur_user()) {
      set_cur_user(from.cur_user());
    }
    if (from.has_call_user()) {
      set_call_user(from.call_user());
    }
    if (from.has_call_score()) {
      set_call_score(from.call_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_land_call_score_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_land_call_score_rep::CopyFrom(const msg_land_call_score_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_land_call_score_rep::IsInitialized() const {

  return true;
}

void msg_land_call_score_rep::Swap(msg_land_call_score_rep* other) {
  if (other != this) {
    std::swap(cur_user_, other->cur_user_);
    std::swap(call_user_, other->call_user_);
    std::swap(call_score_, other->call_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_land_call_score_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_land_call_score_rep_descriptor_;
  metadata.reflection = msg_land_call_score_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_land_req_hand_card_req::kChairIdFieldNumber;
#endif  // !_MSC_VER

msg_land_req_hand_card_req::msg_land_req_hand_card_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_land_req_hand_card_req::InitAsDefaultInstance() {
}

msg_land_req_hand_card_req::msg_land_req_hand_card_req(const msg_land_req_hand_card_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_land_req_hand_card_req::SharedCtor() {
  _cached_size_ = 0;
  chair_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_land_req_hand_card_req::~msg_land_req_hand_card_req() {
  SharedDtor();
}

void msg_land_req_hand_card_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_land_req_hand_card_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_land_req_hand_card_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_land_req_hand_card_req_descriptor_;
}

const msg_land_req_hand_card_req& msg_land_req_hand_card_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_land_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_land_req_hand_card_req* msg_land_req_hand_card_req::default_instance_ = NULL;

msg_land_req_hand_card_req* msg_land_req_hand_card_req::New() const {
  return new msg_land_req_hand_card_req;
}

void msg_land_req_hand_card_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chair_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_land_req_hand_card_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 chair_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chair_id_)));
          set_has_chair_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_land_req_hand_card_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 chair_id = 1;
  if (has_chair_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chair_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_land_req_hand_card_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 chair_id = 1;
  if (has_chair_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chair_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_land_req_hand_card_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 chair_id = 1;
    if (has_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chair_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_land_req_hand_card_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_land_req_hand_card_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_land_req_hand_card_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_land_req_hand_card_req::MergeFrom(const msg_land_req_hand_card_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chair_id()) {
      set_chair_id(from.chair_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_land_req_hand_card_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_land_req_hand_card_req::CopyFrom(const msg_land_req_hand_card_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_land_req_hand_card_req::IsInitialized() const {

  return true;
}

void msg_land_req_hand_card_req::Swap(msg_land_req_hand_card_req* other) {
  if (other != this) {
    std::swap(chair_id_, other->chair_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_land_req_hand_card_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_land_req_hand_card_req_descriptor_;
  metadata.reflection = msg_land_req_hand_card_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_land_hand_card_rep::kChairIdFieldNumber;
const int msg_land_hand_card_rep::kCardDataFieldNumber;
#endif  // !_MSC_VER

msg_land_hand_card_rep::msg_land_hand_card_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_land_hand_card_rep::InitAsDefaultInstance() {
}

msg_land_hand_card_rep::msg_land_hand_card_rep(const msg_land_hand_card_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_land_hand_card_rep::SharedCtor() {
  _cached_size_ = 0;
  chair_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_land_hand_card_rep::~msg_land_hand_card_rep() {
  SharedDtor();
}

void msg_land_hand_card_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_land_hand_card_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_land_hand_card_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_land_hand_card_rep_descriptor_;
}

const msg_land_hand_card_rep& msg_land_hand_card_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_land_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_land_hand_card_rep* msg_land_hand_card_rep::default_instance_ = NULL;

msg_land_hand_card_rep* msg_land_hand_card_rep::New() const {
  return new msg_land_hand_card_rep;
}

void msg_land_hand_card_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chair_id_ = 0u;
  }
  card_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_land_hand_card_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 chair_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chair_id_)));
          set_has_chair_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_card_data;
        break;
      }

      // repeated uint32 card_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_card_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_card_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_land_hand_card_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 chair_id = 1;
  if (has_chair_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chair_id(), output);
  }

  // repeated uint32 card_data = 2;
  for (int i = 0; i < this->card_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->card_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_land_hand_card_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 chair_id = 1;
  if (has_chair_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chair_id(), target);
  }

  // repeated uint32 card_data = 2;
  for (int i = 0; i < this->card_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->card_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_land_hand_card_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 chair_id = 1;
    if (has_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chair_id());
    }

  }
  // repeated uint32 card_data = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->card_data(i));
    }
    total_size += 1 * this->card_data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_land_hand_card_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_land_hand_card_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_land_hand_card_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_land_hand_card_rep::MergeFrom(const msg_land_hand_card_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_data_.MergeFrom(from.card_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chair_id()) {
      set_chair_id(from.chair_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_land_hand_card_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_land_hand_card_rep::CopyFrom(const msg_land_hand_card_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_land_hand_card_rep::IsInitialized() const {

  return true;
}

void msg_land_hand_card_rep::Swap(msg_land_hand_card_rep* other) {
  if (other != this) {
    std::swap(chair_id_, other->chair_id_);
    card_data_.Swap(&other->card_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_land_hand_card_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_land_hand_card_rep_descriptor_;
  metadata.reflection = msg_land_hand_card_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_land_banker_info_rep::kBankerUserFieldNumber;
const int msg_land_banker_info_rep::kCurUserFieldNumber;
const int msg_land_banker_info_rep::kCallScoreFieldNumber;
const int msg_land_banker_info_rep::kBankerCardFieldNumber;
const int msg_land_banker_info_rep::kMemCardMacFieldNumber;
#endif  // !_MSC_VER

msg_land_banker_info_rep::msg_land_banker_info_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_land_banker_info_rep::InitAsDefaultInstance() {
}

msg_land_banker_info_rep::msg_land_banker_info_rep(const msg_land_banker_info_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_land_banker_info_rep::SharedCtor() {
  _cached_size_ = 0;
  banker_user_ = 0u;
  cur_user_ = 0u;
  call_score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_land_banker_info_rep::~msg_land_banker_info_rep() {
  SharedDtor();
}

void msg_land_banker_info_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_land_banker_info_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_land_banker_info_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_land_banker_info_rep_descriptor_;
}

const msg_land_banker_info_rep& msg_land_banker_info_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_land_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_land_banker_info_rep* msg_land_banker_info_rep::default_instance_ = NULL;

msg_land_banker_info_rep* msg_land_banker_info_rep::New() const {
  return new msg_land_banker_info_rep;
}

void msg_land_banker_info_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    banker_user_ = 0u;
    cur_user_ = 0u;
    call_score_ = 0u;
  }
  banker_card_.Clear();
  mem_card_mac_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_land_banker_info_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 banker_user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &banker_user_)));
          set_has_banker_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_user;
        break;
      }

      // optional uint32 cur_user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_user_)));
          set_has_cur_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_call_score;
        break;
      }

      // optional uint32 call_score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_call_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &call_score_)));
          set_has_call_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_banker_card;
        break;
      }

      // repeated uint32 banker_card = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_banker_card())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_banker_card())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_banker_card;
        if (input->ExpectTag(40)) goto parse_mem_card_mac;
        break;
      }

      // repeated uint32 mem_card_mac = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mem_card_mac:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_mem_card_mac())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mem_card_mac())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_mem_card_mac;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_land_banker_info_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 banker_user = 1;
  if (has_banker_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->banker_user(), output);
  }

  // optional uint32 cur_user = 2;
  if (has_cur_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cur_user(), output);
  }

  // optional uint32 call_score = 3;
  if (has_call_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->call_score(), output);
  }

  // repeated uint32 banker_card = 4;
  for (int i = 0; i < this->banker_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->banker_card(i), output);
  }

  // repeated uint32 mem_card_mac = 5;
  for (int i = 0; i < this->mem_card_mac_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->mem_card_mac(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_land_banker_info_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 banker_user = 1;
  if (has_banker_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->banker_user(), target);
  }

  // optional uint32 cur_user = 2;
  if (has_cur_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cur_user(), target);
  }

  // optional uint32 call_score = 3;
  if (has_call_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->call_score(), target);
  }

  // repeated uint32 banker_card = 4;
  for (int i = 0; i < this->banker_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->banker_card(i), target);
  }

  // repeated uint32 mem_card_mac = 5;
  for (int i = 0; i < this->mem_card_mac_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->mem_card_mac(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_land_banker_info_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 banker_user = 1;
    if (has_banker_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->banker_user());
    }

    // optional uint32 cur_user = 2;
    if (has_cur_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_user());
    }

    // optional uint32 call_score = 3;
    if (has_call_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->call_score());
    }

  }
  // repeated uint32 banker_card = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->banker_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->banker_card(i));
    }
    total_size += 1 * this->banker_card_size() + data_size;
  }

  // repeated uint32 mem_card_mac = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->mem_card_mac_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mem_card_mac(i));
    }
    total_size += 1 * this->mem_card_mac_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_land_banker_info_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_land_banker_info_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_land_banker_info_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_land_banker_info_rep::MergeFrom(const msg_land_banker_info_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  banker_card_.MergeFrom(from.banker_card_);
  mem_card_mac_.MergeFrom(from.mem_card_mac_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_banker_user()) {
      set_banker_user(from.banker_user());
    }
    if (from.has_cur_user()) {
      set_cur_user(from.cur_user());
    }
    if (from.has_call_score()) {
      set_call_score(from.call_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_land_banker_info_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_land_banker_info_rep::CopyFrom(const msg_land_banker_info_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_land_banker_info_rep::IsInitialized() const {

  return true;
}

void msg_land_banker_info_rep::Swap(msg_land_banker_info_rep* other) {
  if (other != this) {
    std::swap(banker_user_, other->banker_user_);
    std::swap(cur_user_, other->cur_user_);
    std::swap(call_score_, other->call_score_);
    banker_card_.Swap(&other->banker_card_);
    mem_card_mac_.Swap(&other->mem_card_mac_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_land_banker_info_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_land_banker_info_rep_descriptor_;
  metadata.reflection = msg_land_banker_info_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_land_out_card_req::kCardDataFieldNumber;
#endif  // !_MSC_VER

msg_land_out_card_req::msg_land_out_card_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_land_out_card_req::InitAsDefaultInstance() {
}

msg_land_out_card_req::msg_land_out_card_req(const msg_land_out_card_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_land_out_card_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_land_out_card_req::~msg_land_out_card_req() {
  SharedDtor();
}

void msg_land_out_card_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_land_out_card_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_land_out_card_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_land_out_card_req_descriptor_;
}

const msg_land_out_card_req& msg_land_out_card_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_land_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_land_out_card_req* msg_land_out_card_req::default_instance_ = NULL;

msg_land_out_card_req* msg_land_out_card_req::New() const {
  return new msg_land_out_card_req;
}

void msg_land_out_card_req::Clear() {
  card_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_land_out_card_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 card_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_card_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_card_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_land_out_card_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 card_data = 1;
  for (int i = 0; i < this->card_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->card_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_land_out_card_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 card_data = 1;
  for (int i = 0; i < this->card_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->card_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_land_out_card_req::ByteSize() const {
  int total_size = 0;

  // repeated uint32 card_data = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->card_data(i));
    }
    total_size += 1 * this->card_data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_land_out_card_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_land_out_card_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_land_out_card_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_land_out_card_req::MergeFrom(const msg_land_out_card_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_data_.MergeFrom(from.card_data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_land_out_card_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_land_out_card_req::CopyFrom(const msg_land_out_card_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_land_out_card_req::IsInitialized() const {

  return true;
}

void msg_land_out_card_req::Swap(msg_land_out_card_req* other) {
  if (other != this) {
    card_data_.Swap(&other->card_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_land_out_card_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_land_out_card_req_descriptor_;
  metadata.reflection = msg_land_out_card_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_land_out_card_rep::kCurUserFieldNumber;
const int msg_land_out_card_rep::kOutCardUserFieldNumber;
const int msg_land_out_card_rep::kCardDataFieldNumber;
const int msg_land_out_card_rep::kMemCardMacFieldNumber;
#endif  // !_MSC_VER

msg_land_out_card_rep::msg_land_out_card_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_land_out_card_rep::InitAsDefaultInstance() {
}

msg_land_out_card_rep::msg_land_out_card_rep(const msg_land_out_card_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_land_out_card_rep::SharedCtor() {
  _cached_size_ = 0;
  cur_user_ = 0u;
  out_card_user_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_land_out_card_rep::~msg_land_out_card_rep() {
  SharedDtor();
}

void msg_land_out_card_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_land_out_card_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_land_out_card_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_land_out_card_rep_descriptor_;
}

const msg_land_out_card_rep& msg_land_out_card_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_land_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_land_out_card_rep* msg_land_out_card_rep::default_instance_ = NULL;

msg_land_out_card_rep* msg_land_out_card_rep::New() const {
  return new msg_land_out_card_rep;
}

void msg_land_out_card_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cur_user_ = 0u;
    out_card_user_ = 0u;
  }
  card_data_.Clear();
  mem_card_mac_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_land_out_card_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cur_user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_user_)));
          set_has_cur_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_out_card_user;
        break;
      }

      // optional uint32 out_card_user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_card_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_card_user_)));
          set_has_out_card_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_card_data;
        break;
      }

      // repeated uint32 card_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_card_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_card_data;
        if (input->ExpectTag(32)) goto parse_mem_card_mac;
        break;
      }

      // repeated uint32 mem_card_mac = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mem_card_mac:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_mem_card_mac())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mem_card_mac())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mem_card_mac;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_land_out_card_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cur_user = 1;
  if (has_cur_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cur_user(), output);
  }

  // optional uint32 out_card_user = 2;
  if (has_out_card_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->out_card_user(), output);
  }

  // repeated uint32 card_data = 3;
  for (int i = 0; i < this->card_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->card_data(i), output);
  }

  // repeated uint32 mem_card_mac = 4;
  for (int i = 0; i < this->mem_card_mac_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->mem_card_mac(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_land_out_card_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cur_user = 1;
  if (has_cur_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cur_user(), target);
  }

  // optional uint32 out_card_user = 2;
  if (has_out_card_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->out_card_user(), target);
  }

  // repeated uint32 card_data = 3;
  for (int i = 0; i < this->card_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->card_data(i), target);
  }

  // repeated uint32 mem_card_mac = 4;
  for (int i = 0; i < this->mem_card_mac_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->mem_card_mac(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_land_out_card_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cur_user = 1;
    if (has_cur_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_user());
    }

    // optional uint32 out_card_user = 2;
    if (has_out_card_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->out_card_user());
    }

  }
  // repeated uint32 card_data = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->card_data(i));
    }
    total_size += 1 * this->card_data_size() + data_size;
  }

  // repeated uint32 mem_card_mac = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->mem_card_mac_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mem_card_mac(i));
    }
    total_size += 1 * this->mem_card_mac_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_land_out_card_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_land_out_card_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_land_out_card_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_land_out_card_rep::MergeFrom(const msg_land_out_card_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_data_.MergeFrom(from.card_data_);
  mem_card_mac_.MergeFrom(from.mem_card_mac_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur_user()) {
      set_cur_user(from.cur_user());
    }
    if (from.has_out_card_user()) {
      set_out_card_user(from.out_card_user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_land_out_card_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_land_out_card_rep::CopyFrom(const msg_land_out_card_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_land_out_card_rep::IsInitialized() const {

  return true;
}

void msg_land_out_card_rep::Swap(msg_land_out_card_rep* other) {
  if (other != this) {
    std::swap(cur_user_, other->cur_user_);
    std::swap(out_card_user_, other->out_card_user_);
    card_data_.Swap(&other->card_data_);
    mem_card_mac_.Swap(&other->mem_card_mac_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_land_out_card_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_land_out_card_rep_descriptor_;
  metadata.reflection = msg_land_out_card_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_land_pass_card_req::kReasonFieldNumber;
#endif  // !_MSC_VER

msg_land_pass_card_req::msg_land_pass_card_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_land_pass_card_req::InitAsDefaultInstance() {
}

msg_land_pass_card_req::msg_land_pass_card_req(const msg_land_pass_card_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_land_pass_card_req::SharedCtor() {
  _cached_size_ = 0;
  reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_land_pass_card_req::~msg_land_pass_card_req() {
  SharedDtor();
}

void msg_land_pass_card_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_land_pass_card_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_land_pass_card_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_land_pass_card_req_descriptor_;
}

const msg_land_pass_card_req& msg_land_pass_card_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_land_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_land_pass_card_req* msg_land_pass_card_req::default_instance_ = NULL;

msg_land_pass_card_req* msg_land_pass_card_req::New() const {
  return new msg_land_pass_card_req;
}

void msg_land_pass_card_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reason_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_land_pass_card_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reason = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_land_pass_card_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_land_pass_card_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reason = 1;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_land_pass_card_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reason = 1;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_land_pass_card_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_land_pass_card_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_land_pass_card_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_land_pass_card_req::MergeFrom(const msg_land_pass_card_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_land_pass_card_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_land_pass_card_req::CopyFrom(const msg_land_pass_card_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_land_pass_card_req::IsInitialized() const {

  return true;
}

void msg_land_pass_card_req::Swap(msg_land_pass_card_req* other) {
  if (other != this) {
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_land_pass_card_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_land_pass_card_req_descriptor_;
  metadata.reflection = msg_land_pass_card_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_land_pass_card_rep::kTurnOverFieldNumber;
const int msg_land_pass_card_rep::kCurUserFieldNumber;
const int msg_land_pass_card_rep::kPassCardUserFieldNumber;
#endif  // !_MSC_VER

msg_land_pass_card_rep::msg_land_pass_card_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_land_pass_card_rep::InitAsDefaultInstance() {
}

msg_land_pass_card_rep::msg_land_pass_card_rep(const msg_land_pass_card_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_land_pass_card_rep::SharedCtor() {
  _cached_size_ = 0;
  turn_over_ = 0u;
  cur_user_ = 0u;
  pass_card_user_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_land_pass_card_rep::~msg_land_pass_card_rep() {
  SharedDtor();
}

void msg_land_pass_card_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_land_pass_card_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_land_pass_card_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_land_pass_card_rep_descriptor_;
}

const msg_land_pass_card_rep& msg_land_pass_card_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_land_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_land_pass_card_rep* msg_land_pass_card_rep::default_instance_ = NULL;

msg_land_pass_card_rep* msg_land_pass_card_rep::New() const {
  return new msg_land_pass_card_rep;
}

void msg_land_pass_card_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    turn_over_ = 0u;
    cur_user_ = 0u;
    pass_card_user_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_land_pass_card_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 turn_over = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &turn_over_)));
          set_has_turn_over();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_user;
        break;
      }

      // optional uint32 cur_user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_user_)));
          set_has_cur_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pass_card_user;
        break;
      }

      // optional uint32 pass_card_user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_card_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pass_card_user_)));
          set_has_pass_card_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_land_pass_card_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 turn_over = 1;
  if (has_turn_over()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->turn_over(), output);
  }

  // optional uint32 cur_user = 2;
  if (has_cur_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cur_user(), output);
  }

  // optional uint32 pass_card_user = 3;
  if (has_pass_card_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pass_card_user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_land_pass_card_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 turn_over = 1;
  if (has_turn_over()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->turn_over(), target);
  }

  // optional uint32 cur_user = 2;
  if (has_cur_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cur_user(), target);
  }

  // optional uint32 pass_card_user = 3;
  if (has_pass_card_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pass_card_user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_land_pass_card_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 turn_over = 1;
    if (has_turn_over()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->turn_over());
    }

    // optional uint32 cur_user = 2;
    if (has_cur_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_user());
    }

    // optional uint32 pass_card_user = 3;
    if (has_pass_card_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pass_card_user());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_land_pass_card_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_land_pass_card_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_land_pass_card_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_land_pass_card_rep::MergeFrom(const msg_land_pass_card_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_turn_over()) {
      set_turn_over(from.turn_over());
    }
    if (from.has_cur_user()) {
      set_cur_user(from.cur_user());
    }
    if (from.has_pass_card_user()) {
      set_pass_card_user(from.pass_card_user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_land_pass_card_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_land_pass_card_rep::CopyFrom(const msg_land_pass_card_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_land_pass_card_rep::IsInitialized() const {

  return true;
}

void msg_land_pass_card_rep::Swap(msg_land_pass_card_rep* other) {
  if (other != this) {
    std::swap(turn_over_, other->turn_over_);
    std::swap(cur_user_, other->cur_user_);
    std::swap(pass_card_user_, other->pass_card_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_land_pass_card_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_land_pass_card_rep_descriptor_;
  metadata.reflection = msg_land_pass_card_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_land_game_over_rep::kScoresFieldNumber;
const int msg_land_game_over_rep::kChunTianFieldNumber;
const int msg_land_game_over_rep::kFanChunTianFieldNumber;
const int msg_land_game_over_rep::kBombCountFieldNumber;
const int msg_land_game_over_rep::kEachBombCountsFieldNumber;
const int msg_land_game_over_rep::kBlindFieldNumber;
const int msg_land_game_over_rep::kCardCountsFieldNumber;
const int msg_land_game_over_rep::kHandCardDataFieldNumber;
const int msg_land_game_over_rep::kAllCardDataFieldNumber;
#endif  // !_MSC_VER

msg_land_game_over_rep::msg_land_game_over_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_land_game_over_rep::InitAsDefaultInstance() {
}

msg_land_game_over_rep::msg_land_game_over_rep(const msg_land_game_over_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_land_game_over_rep::SharedCtor() {
  _cached_size_ = 0;
  chun_tian_ = 0u;
  fan_chun_tian_ = 0u;
  bomb_count_ = 0u;
  blind_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_land_game_over_rep::~msg_land_game_over_rep() {
  SharedDtor();
}

void msg_land_game_over_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_land_game_over_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_land_game_over_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_land_game_over_rep_descriptor_;
}

const msg_land_game_over_rep& msg_land_game_over_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_land_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_land_game_over_rep* msg_land_game_over_rep::default_instance_ = NULL;

msg_land_game_over_rep* msg_land_game_over_rep::New() const {
  return new msg_land_game_over_rep;
}

void msg_land_game_over_rep::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    chun_tian_ = 0u;
    fan_chun_tian_ = 0u;
    bomb_count_ = 0u;
    blind_ = 0u;
  }
  scores_.Clear();
  each_bomb_counts_.Clear();
  card_counts_.Clear();
  hand_card_data_.Clear();
  all_card_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_land_game_over_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 scores = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_scores())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_scores())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_scores;
        if (input->ExpectTag(16)) goto parse_chun_tian;
        break;
      }

      // optional uint32 chun_tian = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chun_tian:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chun_tian_)));
          set_has_chun_tian();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fan_chun_tian;
        break;
      }

      // optional uint32 fan_chun_tian = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fan_chun_tian:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fan_chun_tian_)));
          set_has_fan_chun_tian();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bomb_count;
        break;
      }

      // optional uint32 bomb_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bomb_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bomb_count_)));
          set_has_bomb_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_each_bomb_counts;
        break;
      }

      // repeated uint32 each_bomb_counts = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_each_bomb_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_each_bomb_counts())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_each_bomb_counts())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_each_bomb_counts;
        if (input->ExpectTag(48)) goto parse_blind;
        break;
      }

      // optional uint32 blind = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blind_)));
          set_has_blind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_card_counts;
        break;
      }

      // repeated uint32 card_counts = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_card_counts())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_counts())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_card_counts;
        if (input->ExpectTag(64)) goto parse_hand_card_data;
        break;
      }

      // repeated uint32 hand_card_data = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hand_card_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_hand_card_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hand_card_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_hand_card_data;
        if (input->ExpectTag(74)) goto parse_all_card_data;
        break;
      }

      // repeated .net.msg_cards all_card_data = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_all_card_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_all_card_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_all_card_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_land_game_over_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 scores = 1;
  for (int i = 0; i < this->scores_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->scores(i), output);
  }

  // optional uint32 chun_tian = 2;
  if (has_chun_tian()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->chun_tian(), output);
  }

  // optional uint32 fan_chun_tian = 3;
  if (has_fan_chun_tian()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fan_chun_tian(), output);
  }

  // optional uint32 bomb_count = 4;
  if (has_bomb_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bomb_count(), output);
  }

  // repeated uint32 each_bomb_counts = 5;
  for (int i = 0; i < this->each_bomb_counts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->each_bomb_counts(i), output);
  }

  // optional uint32 blind = 6;
  if (has_blind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->blind(), output);
  }

  // repeated uint32 card_counts = 7;
  for (int i = 0; i < this->card_counts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->card_counts(i), output);
  }

  // repeated uint32 hand_card_data = 8;
  for (int i = 0; i < this->hand_card_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->hand_card_data(i), output);
  }

  // repeated .net.msg_cards all_card_data = 9;
  for (int i = 0; i < this->all_card_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->all_card_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_land_game_over_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 scores = 1;
  for (int i = 0; i < this->scores_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->scores(i), target);
  }

  // optional uint32 chun_tian = 2;
  if (has_chun_tian()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->chun_tian(), target);
  }

  // optional uint32 fan_chun_tian = 3;
  if (has_fan_chun_tian()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fan_chun_tian(), target);
  }

  // optional uint32 bomb_count = 4;
  if (has_bomb_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bomb_count(), target);
  }

  // repeated uint32 each_bomb_counts = 5;
  for (int i = 0; i < this->each_bomb_counts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->each_bomb_counts(i), target);
  }

  // optional uint32 blind = 6;
  if (has_blind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->blind(), target);
  }

  // repeated uint32 card_counts = 7;
  for (int i = 0; i < this->card_counts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->card_counts(i), target);
  }

  // repeated uint32 hand_card_data = 8;
  for (int i = 0; i < this->hand_card_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->hand_card_data(i), target);
  }

  // repeated .net.msg_cards all_card_data = 9;
  for (int i = 0; i < this->all_card_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->all_card_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_land_game_over_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 chun_tian = 2;
    if (has_chun_tian()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chun_tian());
    }

    // optional uint32 fan_chun_tian = 3;
    if (has_fan_chun_tian()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fan_chun_tian());
    }

    // optional uint32 bomb_count = 4;
    if (has_bomb_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bomb_count());
    }

    // optional uint32 blind = 6;
    if (has_blind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blind());
    }

  }
  // repeated int64 scores = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->scores_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->scores(i));
    }
    total_size += 1 * this->scores_size() + data_size;
  }

  // repeated uint32 each_bomb_counts = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->each_bomb_counts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->each_bomb_counts(i));
    }
    total_size += 1 * this->each_bomb_counts_size() + data_size;
  }

  // repeated uint32 card_counts = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_counts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->card_counts(i));
    }
    total_size += 1 * this->card_counts_size() + data_size;
  }

  // repeated uint32 hand_card_data = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->hand_card_data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hand_card_data(i));
    }
    total_size += 1 * this->hand_card_data_size() + data_size;
  }

  // repeated .net.msg_cards all_card_data = 9;
  total_size += 1 * this->all_card_data_size();
  for (int i = 0; i < this->all_card_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->all_card_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_land_game_over_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_land_game_over_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_land_game_over_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_land_game_over_rep::MergeFrom(const msg_land_game_over_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  scores_.MergeFrom(from.scores_);
  each_bomb_counts_.MergeFrom(from.each_bomb_counts_);
  card_counts_.MergeFrom(from.card_counts_);
  hand_card_data_.MergeFrom(from.hand_card_data_);
  all_card_data_.MergeFrom(from.all_card_data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_chun_tian()) {
      set_chun_tian(from.chun_tian());
    }
    if (from.has_fan_chun_tian()) {
      set_fan_chun_tian(from.fan_chun_tian());
    }
    if (from.has_bomb_count()) {
      set_bomb_count(from.bomb_count());
    }
    if (from.has_blind()) {
      set_blind(from.blind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_land_game_over_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_land_game_over_rep::CopyFrom(const msg_land_game_over_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_land_game_over_rep::IsInitialized() const {

  return true;
}

void msg_land_game_over_rep::Swap(msg_land_game_over_rep* other) {
  if (other != this) {
    scores_.Swap(&other->scores_);
    std::swap(chun_tian_, other->chun_tian_);
    std::swap(fan_chun_tian_, other->fan_chun_tian_);
    std::swap(bomb_count_, other->bomb_count_);
    each_bomb_counts_.Swap(&other->each_bomb_counts_);
    std::swap(blind_, other->blind_);
    card_counts_.Swap(&other->card_counts_);
    hand_card_data_.Swap(&other->hand_card_data_);
    all_card_data_.Swap(&other->all_card_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_land_game_over_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_land_game_over_rep_descriptor_;
  metadata.reflection = msg_land_game_over_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

msg_land_marry_player::msg_land_marry_player()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_land_marry_player::InitAsDefaultInstance() {
}

msg_land_marry_player::msg_land_marry_player(const msg_land_marry_player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_land_marry_player::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_land_marry_player::~msg_land_marry_player() {
  SharedDtor();
}

void msg_land_marry_player::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_land_marry_player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_land_marry_player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_land_marry_player_descriptor_;
}

const msg_land_marry_player& msg_land_marry_player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_land_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_land_marry_player* msg_land_marry_player::default_instance_ = NULL;

msg_land_marry_player* msg_land_marry_player::New() const {
  return new msg_land_marry_player;
}

void msg_land_marry_player::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_land_marry_player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void msg_land_marry_player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_land_marry_player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_land_marry_player::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_land_marry_player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_land_marry_player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_land_marry_player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_land_marry_player::MergeFrom(const msg_land_marry_player& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_land_marry_player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_land_marry_player::CopyFrom(const msg_land_marry_player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_land_marry_player::IsInitialized() const {

  return true;
}

void msg_land_marry_player::Swap(msg_land_marry_player* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_land_marry_player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_land_marry_player_descriptor_;
  metadata.reflection = msg_land_marry_player_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace net

// @@protoc_insertion_point(global_scope)
