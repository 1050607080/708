// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sangong_logic_msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sangong_logic_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace net {

namespace {

const ::google::protobuf::Descriptor* msg_sangong_game_info_free_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_sangong_game_info_free_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_sangong_game_info_play_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_sangong_game_info_play_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_sangong_start_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_sangong_start_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_sangong_apply_banker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_sangong_apply_banker_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_sangong_apply_banker_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_sangong_apply_banker_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_sangong_banker_result_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_sangong_banker_result_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_sangong_place_jetton_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_sangong_place_jetton_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_sangong_place_jetton_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_sangong_place_jetton_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_sangong_place_jetton_broadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_sangong_place_jetton_broadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_sangong_send_card_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_sangong_send_card_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_sangong_change_card_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_sangong_change_card_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_sangong_change_card_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_sangong_change_card_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_sangong_game_end_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_sangong_game_end_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_sangong_5flogic_5fmsg_2eproto() {
  protobuf_AddDesc_sangong_5flogic_5fmsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sangong_logic_msg.proto");
  GOOGLE_CHECK(file != NULL);
  msg_sangong_game_info_free_rep_descriptor_ = file->message_type(0);
  static const int msg_sangong_game_info_free_rep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_game_info_free_rep, time_leave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_game_info_free_rep, banker_id_),
  };
  msg_sangong_game_info_free_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_sangong_game_info_free_rep_descriptor_,
      msg_sangong_game_info_free_rep::default_instance_,
      msg_sangong_game_info_free_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_game_info_free_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_game_info_free_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_sangong_game_info_free_rep));
  msg_sangong_game_info_play_rep_descriptor_ = file->message_type(1);
  static const int msg_sangong_game_info_play_rep_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_game_info_play_rep, all_jetton_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_game_info_play_rep, table_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_game_info_play_rep, banker_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_game_info_play_rep, game_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_game_info_play_rep, show_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_game_info_play_rep, player_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_game_info_play_rep, time_leave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_game_info_play_rep, apply_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_game_info_play_rep, turn_max_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_game_info_play_rep, card_types_),
  };
  msg_sangong_game_info_play_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_sangong_game_info_play_rep_descriptor_,
      msg_sangong_game_info_play_rep::default_instance_,
      msg_sangong_game_info_play_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_game_info_play_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_game_info_play_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_sangong_game_info_play_rep));
  msg_sangong_start_rep_descriptor_ = file->message_type(2);
  static const int msg_sangong_start_rep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_start_rep, can_apply_banker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_start_rep, banker_id_),
  };
  msg_sangong_start_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_sangong_start_rep_descriptor_,
      msg_sangong_start_rep::default_instance_,
      msg_sangong_start_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_start_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_start_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_sangong_start_rep));
  msg_sangong_apply_banker_descriptor_ = file->message_type(3);
  static const int msg_sangong_apply_banker_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_apply_banker, score_),
  };
  msg_sangong_apply_banker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_sangong_apply_banker_descriptor_,
      msg_sangong_apply_banker::default_instance_,
      msg_sangong_apply_banker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_apply_banker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_apply_banker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_sangong_apply_banker));
  msg_sangong_apply_banker_rep_descriptor_ = file->message_type(4);
  static const int msg_sangong_apply_banker_rep_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_apply_banker_rep, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_apply_banker_rep, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_apply_banker_rep, result_),
  };
  msg_sangong_apply_banker_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_sangong_apply_banker_rep_descriptor_,
      msg_sangong_apply_banker_rep::default_instance_,
      msg_sangong_apply_banker_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_apply_banker_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_apply_banker_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_sangong_apply_banker_rep));
  msg_sangong_banker_result_rep_descriptor_ = file->message_type(5);
  static const int msg_sangong_banker_result_rep_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_banker_result_rep, banker_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_banker_result_rep, apply_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_banker_result_rep, turn_max_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_banker_result_rep, is_apply_),
  };
  msg_sangong_banker_result_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_sangong_banker_result_rep_descriptor_,
      msg_sangong_banker_result_rep::default_instance_,
      msg_sangong_banker_result_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_banker_result_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_banker_result_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_sangong_banker_result_rep));
  msg_sangong_place_jetton_req_descriptor_ = file->message_type(6);
  static const int msg_sangong_place_jetton_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_place_jetton_req, jetton_score_),
  };
  msg_sangong_place_jetton_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_sangong_place_jetton_req_descriptor_,
      msg_sangong_place_jetton_req::default_instance_,
      msg_sangong_place_jetton_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_place_jetton_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_place_jetton_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_sangong_place_jetton_req));
  msg_sangong_place_jetton_rep_descriptor_ = file->message_type(7);
  static const int msg_sangong_place_jetton_rep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_place_jetton_rep, jetton_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_place_jetton_rep, result_),
  };
  msg_sangong_place_jetton_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_sangong_place_jetton_rep_descriptor_,
      msg_sangong_place_jetton_rep::default_instance_,
      msg_sangong_place_jetton_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_place_jetton_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_place_jetton_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_sangong_place_jetton_rep));
  msg_sangong_place_jetton_broadcast_descriptor_ = file->message_type(8);
  static const int msg_sangong_place_jetton_broadcast_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_place_jetton_broadcast, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_place_jetton_broadcast, jetton_score_),
  };
  msg_sangong_place_jetton_broadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_sangong_place_jetton_broadcast_descriptor_,
      msg_sangong_place_jetton_broadcast::default_instance_,
      msg_sangong_place_jetton_broadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_place_jetton_broadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_place_jetton_broadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_sangong_place_jetton_broadcast));
  msg_sangong_send_card_rep_descriptor_ = file->message_type(9);
  static const int msg_sangong_send_card_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_send_card_rep, cards_),
  };
  msg_sangong_send_card_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_sangong_send_card_rep_descriptor_,
      msg_sangong_send_card_rep::default_instance_,
      msg_sangong_send_card_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_send_card_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_send_card_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_sangong_send_card_rep));
  msg_sangong_change_card_descriptor_ = file->message_type(10);
  static const int msg_sangong_change_card_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_change_card, cards_),
  };
  msg_sangong_change_card_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_sangong_change_card_descriptor_,
      msg_sangong_change_card::default_instance_,
      msg_sangong_change_card_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_change_card, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_change_card, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_sangong_change_card));
  msg_sangong_change_card_rep_descriptor_ = file->message_type(11);
  static const int msg_sangong_change_card_rep_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_change_card_rep, oper_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_change_card_rep, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_change_card_rep, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_change_card_rep, card_type_),
  };
  msg_sangong_change_card_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_sangong_change_card_rep_descriptor_,
      msg_sangong_change_card_rep::default_instance_,
      msg_sangong_change_card_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_change_card_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_change_card_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_sangong_change_card_rep));
  msg_sangong_game_end_descriptor_ = file->message_type(12);
  static const int msg_sangong_game_end_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_game_end, time_leave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_game_end, table_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_game_end, card_types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_game_end, player_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_game_end, win_multiple_),
  };
  msg_sangong_game_end_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_sangong_game_end_descriptor_,
      msg_sangong_game_end::default_instance_,
      msg_sangong_game_end_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_game_end, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_sangong_game_end, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_sangong_game_end));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sangong_5flogic_5fmsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_sangong_game_info_free_rep_descriptor_, &msg_sangong_game_info_free_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_sangong_game_info_play_rep_descriptor_, &msg_sangong_game_info_play_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_sangong_start_rep_descriptor_, &msg_sangong_start_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_sangong_apply_banker_descriptor_, &msg_sangong_apply_banker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_sangong_apply_banker_rep_descriptor_, &msg_sangong_apply_banker_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_sangong_banker_result_rep_descriptor_, &msg_sangong_banker_result_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_sangong_place_jetton_req_descriptor_, &msg_sangong_place_jetton_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_sangong_place_jetton_rep_descriptor_, &msg_sangong_place_jetton_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_sangong_place_jetton_broadcast_descriptor_, &msg_sangong_place_jetton_broadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_sangong_send_card_rep_descriptor_, &msg_sangong_send_card_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_sangong_change_card_descriptor_, &msg_sangong_change_card::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_sangong_change_card_rep_descriptor_, &msg_sangong_change_card_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_sangong_game_end_descriptor_, &msg_sangong_game_end::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sangong_5flogic_5fmsg_2eproto() {
  delete msg_sangong_game_info_free_rep::default_instance_;
  delete msg_sangong_game_info_free_rep_reflection_;
  delete msg_sangong_game_info_play_rep::default_instance_;
  delete msg_sangong_game_info_play_rep_reflection_;
  delete msg_sangong_start_rep::default_instance_;
  delete msg_sangong_start_rep_reflection_;
  delete msg_sangong_apply_banker::default_instance_;
  delete msg_sangong_apply_banker_reflection_;
  delete msg_sangong_apply_banker_rep::default_instance_;
  delete msg_sangong_apply_banker_rep_reflection_;
  delete msg_sangong_banker_result_rep::default_instance_;
  delete msg_sangong_banker_result_rep_reflection_;
  delete msg_sangong_place_jetton_req::default_instance_;
  delete msg_sangong_place_jetton_req_reflection_;
  delete msg_sangong_place_jetton_rep::default_instance_;
  delete msg_sangong_place_jetton_rep_reflection_;
  delete msg_sangong_place_jetton_broadcast::default_instance_;
  delete msg_sangong_place_jetton_broadcast_reflection_;
  delete msg_sangong_send_card_rep::default_instance_;
  delete msg_sangong_send_card_rep_reflection_;
  delete msg_sangong_change_card::default_instance_;
  delete msg_sangong_change_card_reflection_;
  delete msg_sangong_change_card_rep::default_instance_;
  delete msg_sangong_change_card_rep_reflection_;
  delete msg_sangong_game_end::default_instance_;
  delete msg_sangong_game_end_reflection_;
}

void protobuf_AddDesc_sangong_5flogic_5fmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::net::protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  ::net::protobuf_AddDesc_error_5fcode_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027sangong_logic_msg.proto\022\003net\032\025base_msg"
    "_struct.proto\032\020error_code.proto\"G\n\036msg_s"
    "angong_game_info_free_rep\022\022\n\ntime_leave\030"
    "\001 \001(\r\022\021\n\tbanker_id\030\002 \001(\r\"\206\002\n\036msg_sangong"
    "_game_info_play_rep\022\030\n\020all_jetton_score\030"
    "\001 \003(\003\022#\n\013table_cards\030\002 \003(\0132\016.net.msg_car"
    "ds\022\021\n\tbanker_id\030\003 \001(\r\022\023\n\013game_status\030\004 \001"
    "(\r\022\022\n\nshow_cards\030\005 \003(\r\022\025\n\rplayer_status\030"
    "\006 \003(\r\022\022\n\ntime_leave\030\007 \001(\r\022\022\n\napply_list\030"
    "\010 \003(\r\022\026\n\016turn_max_score\030\t \003(\003\022\022\n\ncard_ty"
    "pes\030\n \003(\r\"D\n\025msg_sangong_start_rep\022\030\n\020ca"
    "n_apply_banker\030\001 \001(\r\022\021\n\tbanker_id\030\002 \001(\r\""
    ")\n\030msg_sangong_apply_banker\022\r\n\005score\030\001 \001"
    "(\r\"N\n\034msg_sangong_apply_banker_rep\022\017\n\007ch"
    "airid\030\001 \001(\r\022\r\n\005score\030\002 \001(\r\022\016\n\006result\030\003 \001"
    "(\r\"p\n\035msg_sangong_banker_result_rep\022\021\n\tb"
    "anker_id\030\001 \001(\r\022\022\n\napply_list\030\002 \003(\r\022\026\n\016tu"
    "rn_max_score\030\003 \003(\003\022\020\n\010is_apply\030\004 \001(\r\"4\n\034"
    "msg_sangong_place_jetton_req\022\024\n\014jetton_s"
    "core\030\001 \001(\003\"D\n\034msg_sangong_place_jetton_r"
    "ep\022\024\n\014jetton_score\030\001 \001(\003\022\016\n\006result\030\002 \001(\r"
    "\"K\n\"msg_sangong_place_jetton_broadcast\022\017"
    "\n\007chairid\030\001 \001(\r\022\024\n\014jetton_score\030\002 \001(\003\"*\n"
    "\031msg_sangong_send_card_rep\022\r\n\005cards\030\001 \003("
    "\r\"(\n\027msg_sangong_change_card\022\r\n\005cards\030\001 "
    "\003(\r\"`\n\033msg_sangong_change_card_rep\022\017\n\007op"
    "er_id\030\001 \001(\r\022\016\n\006result\030\002 \001(\r\022\r\n\005cards\030\003 \003"
    "(\r\022\021\n\tcard_type\030\004 \001(\r\"\217\001\n\024msg_sangong_ga"
    "me_end\022\022\n\ntime_leave\030\001 \001(\r\022#\n\013table_card"
    "s\030\002 \003(\0132\016.net.msg_cards\022\022\n\ncard_types\030\003 "
    "\003(\r\022\024\n\014player_score\030\004 \003(\003\022\024\n\014win_multipl"
    "e\030\005 \003(\005", 1247);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sangong_logic_msg.proto", &protobuf_RegisterTypes);
  msg_sangong_game_info_free_rep::default_instance_ = new msg_sangong_game_info_free_rep();
  msg_sangong_game_info_play_rep::default_instance_ = new msg_sangong_game_info_play_rep();
  msg_sangong_start_rep::default_instance_ = new msg_sangong_start_rep();
  msg_sangong_apply_banker::default_instance_ = new msg_sangong_apply_banker();
  msg_sangong_apply_banker_rep::default_instance_ = new msg_sangong_apply_banker_rep();
  msg_sangong_banker_result_rep::default_instance_ = new msg_sangong_banker_result_rep();
  msg_sangong_place_jetton_req::default_instance_ = new msg_sangong_place_jetton_req();
  msg_sangong_place_jetton_rep::default_instance_ = new msg_sangong_place_jetton_rep();
  msg_sangong_place_jetton_broadcast::default_instance_ = new msg_sangong_place_jetton_broadcast();
  msg_sangong_send_card_rep::default_instance_ = new msg_sangong_send_card_rep();
  msg_sangong_change_card::default_instance_ = new msg_sangong_change_card();
  msg_sangong_change_card_rep::default_instance_ = new msg_sangong_change_card_rep();
  msg_sangong_game_end::default_instance_ = new msg_sangong_game_end();
  msg_sangong_game_info_free_rep::default_instance_->InitAsDefaultInstance();
  msg_sangong_game_info_play_rep::default_instance_->InitAsDefaultInstance();
  msg_sangong_start_rep::default_instance_->InitAsDefaultInstance();
  msg_sangong_apply_banker::default_instance_->InitAsDefaultInstance();
  msg_sangong_apply_banker_rep::default_instance_->InitAsDefaultInstance();
  msg_sangong_banker_result_rep::default_instance_->InitAsDefaultInstance();
  msg_sangong_place_jetton_req::default_instance_->InitAsDefaultInstance();
  msg_sangong_place_jetton_rep::default_instance_->InitAsDefaultInstance();
  msg_sangong_place_jetton_broadcast::default_instance_->InitAsDefaultInstance();
  msg_sangong_send_card_rep::default_instance_->InitAsDefaultInstance();
  msg_sangong_change_card::default_instance_->InitAsDefaultInstance();
  msg_sangong_change_card_rep::default_instance_->InitAsDefaultInstance();
  msg_sangong_game_end::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sangong_5flogic_5fmsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sangong_5flogic_5fmsg_2eproto {
  StaticDescriptorInitializer_sangong_5flogic_5fmsg_2eproto() {
    protobuf_AddDesc_sangong_5flogic_5fmsg_2eproto();
  }
} static_descriptor_initializer_sangong_5flogic_5fmsg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int msg_sangong_game_info_free_rep::kTimeLeaveFieldNumber;
const int msg_sangong_game_info_free_rep::kBankerIdFieldNumber;
#endif  // !_MSC_VER

msg_sangong_game_info_free_rep::msg_sangong_game_info_free_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_sangong_game_info_free_rep::InitAsDefaultInstance() {
}

msg_sangong_game_info_free_rep::msg_sangong_game_info_free_rep(const msg_sangong_game_info_free_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_sangong_game_info_free_rep::SharedCtor() {
  _cached_size_ = 0;
  time_leave_ = 0u;
  banker_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_sangong_game_info_free_rep::~msg_sangong_game_info_free_rep() {
  SharedDtor();
}

void msg_sangong_game_info_free_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_sangong_game_info_free_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_sangong_game_info_free_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_sangong_game_info_free_rep_descriptor_;
}

const msg_sangong_game_info_free_rep& msg_sangong_game_info_free_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sangong_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_sangong_game_info_free_rep* msg_sangong_game_info_free_rep::default_instance_ = NULL;

msg_sangong_game_info_free_rep* msg_sangong_game_info_free_rep::New() const {
  return new msg_sangong_game_info_free_rep;
}

void msg_sangong_game_info_free_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_leave_ = 0u;
    banker_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_sangong_game_info_free_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 time_leave = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_leave_)));
          set_has_time_leave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_banker_id;
        break;
      }

      // optional uint32 banker_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &banker_id_)));
          set_has_banker_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_sangong_game_info_free_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 time_leave = 1;
  if (has_time_leave()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time_leave(), output);
  }

  // optional uint32 banker_id = 2;
  if (has_banker_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->banker_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_sangong_game_info_free_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 time_leave = 1;
  if (has_time_leave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time_leave(), target);
  }

  // optional uint32 banker_id = 2;
  if (has_banker_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->banker_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_sangong_game_info_free_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 time_leave = 1;
    if (has_time_leave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_leave());
    }

    // optional uint32 banker_id = 2;
    if (has_banker_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->banker_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_sangong_game_info_free_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_sangong_game_info_free_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_sangong_game_info_free_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_sangong_game_info_free_rep::MergeFrom(const msg_sangong_game_info_free_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_leave()) {
      set_time_leave(from.time_leave());
    }
    if (from.has_banker_id()) {
      set_banker_id(from.banker_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_sangong_game_info_free_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_sangong_game_info_free_rep::CopyFrom(const msg_sangong_game_info_free_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_sangong_game_info_free_rep::IsInitialized() const {

  return true;
}

void msg_sangong_game_info_free_rep::Swap(msg_sangong_game_info_free_rep* other) {
  if (other != this) {
    std::swap(time_leave_, other->time_leave_);
    std::swap(banker_id_, other->banker_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_sangong_game_info_free_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_sangong_game_info_free_rep_descriptor_;
  metadata.reflection = msg_sangong_game_info_free_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_sangong_game_info_play_rep::kAllJettonScoreFieldNumber;
const int msg_sangong_game_info_play_rep::kTableCardsFieldNumber;
const int msg_sangong_game_info_play_rep::kBankerIdFieldNumber;
const int msg_sangong_game_info_play_rep::kGameStatusFieldNumber;
const int msg_sangong_game_info_play_rep::kShowCardsFieldNumber;
const int msg_sangong_game_info_play_rep::kPlayerStatusFieldNumber;
const int msg_sangong_game_info_play_rep::kTimeLeaveFieldNumber;
const int msg_sangong_game_info_play_rep::kApplyListFieldNumber;
const int msg_sangong_game_info_play_rep::kTurnMaxScoreFieldNumber;
const int msg_sangong_game_info_play_rep::kCardTypesFieldNumber;
#endif  // !_MSC_VER

msg_sangong_game_info_play_rep::msg_sangong_game_info_play_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_sangong_game_info_play_rep::InitAsDefaultInstance() {
}

msg_sangong_game_info_play_rep::msg_sangong_game_info_play_rep(const msg_sangong_game_info_play_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_sangong_game_info_play_rep::SharedCtor() {
  _cached_size_ = 0;
  banker_id_ = 0u;
  game_status_ = 0u;
  time_leave_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_sangong_game_info_play_rep::~msg_sangong_game_info_play_rep() {
  SharedDtor();
}

void msg_sangong_game_info_play_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_sangong_game_info_play_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_sangong_game_info_play_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_sangong_game_info_play_rep_descriptor_;
}

const msg_sangong_game_info_play_rep& msg_sangong_game_info_play_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sangong_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_sangong_game_info_play_rep* msg_sangong_game_info_play_rep::default_instance_ = NULL;

msg_sangong_game_info_play_rep* msg_sangong_game_info_play_rep::New() const {
  return new msg_sangong_game_info_play_rep;
}

void msg_sangong_game_info_play_rep::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    banker_id_ = 0u;
    game_status_ = 0u;
    time_leave_ = 0u;
  }
  all_jetton_score_.Clear();
  table_cards_.Clear();
  show_cards_.Clear();
  player_status_.Clear();
  apply_list_.Clear();
  turn_max_score_.Clear();
  card_types_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_sangong_game_info_play_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 all_jetton_score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_jetton_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_all_jetton_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_all_jetton_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_all_jetton_score;
        if (input->ExpectTag(18)) goto parse_table_cards;
        break;
      }

      // repeated .net.msg_cards table_cards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_table_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table_cards;
        if (input->ExpectTag(24)) goto parse_banker_id;
        break;
      }

      // optional uint32 banker_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &banker_id_)));
          set_has_banker_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game_status;
        break;
      }

      // optional uint32 game_status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_status_)));
          set_has_game_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_show_cards;
        break;
      }

      // repeated uint32 show_cards = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_show_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_show_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_show_cards;
        if (input->ExpectTag(48)) goto parse_player_status;
        break;
      }

      // repeated uint32 player_status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_player_status())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_player_status())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_player_status;
        if (input->ExpectTag(56)) goto parse_time_leave;
        break;
      }

      // optional uint32 time_leave = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_leave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_leave_)));
          set_has_time_leave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_apply_list;
        break;
      }

      // repeated uint32 apply_list = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_apply_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_apply_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_apply_list;
        if (input->ExpectTag(72)) goto parse_turn_max_score;
        break;
      }

      // repeated int64 turn_max_score = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turn_max_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 72, input, this->mutable_turn_max_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_turn_max_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_turn_max_score;
        if (input->ExpectTag(80)) goto parse_card_types;
        break;
      }

      // repeated uint32 card_types = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_types:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80, input, this->mutable_card_types())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_types())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_card_types;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_sangong_game_info_play_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 all_jetton_score = 1;
  for (int i = 0; i < this->all_jetton_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->all_jetton_score(i), output);
  }

  // repeated .net.msg_cards table_cards = 2;
  for (int i = 0; i < this->table_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->table_cards(i), output);
  }

  // optional uint32 banker_id = 3;
  if (has_banker_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->banker_id(), output);
  }

  // optional uint32 game_status = 4;
  if (has_game_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_status(), output);
  }

  // repeated uint32 show_cards = 5;
  for (int i = 0; i < this->show_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->show_cards(i), output);
  }

  // repeated uint32 player_status = 6;
  for (int i = 0; i < this->player_status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->player_status(i), output);
  }

  // optional uint32 time_leave = 7;
  if (has_time_leave()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->time_leave(), output);
  }

  // repeated uint32 apply_list = 8;
  for (int i = 0; i < this->apply_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->apply_list(i), output);
  }

  // repeated int64 turn_max_score = 9;
  for (int i = 0; i < this->turn_max_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      9, this->turn_max_score(i), output);
  }

  // repeated uint32 card_types = 10;
  for (int i = 0; i < this->card_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->card_types(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_sangong_game_info_play_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 all_jetton_score = 1;
  for (int i = 0; i < this->all_jetton_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->all_jetton_score(i), target);
  }

  // repeated .net.msg_cards table_cards = 2;
  for (int i = 0; i < this->table_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->table_cards(i), target);
  }

  // optional uint32 banker_id = 3;
  if (has_banker_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->banker_id(), target);
  }

  // optional uint32 game_status = 4;
  if (has_game_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_status(), target);
  }

  // repeated uint32 show_cards = 5;
  for (int i = 0; i < this->show_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->show_cards(i), target);
  }

  // repeated uint32 player_status = 6;
  for (int i = 0; i < this->player_status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->player_status(i), target);
  }

  // optional uint32 time_leave = 7;
  if (has_time_leave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->time_leave(), target);
  }

  // repeated uint32 apply_list = 8;
  for (int i = 0; i < this->apply_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->apply_list(i), target);
  }

  // repeated int64 turn_max_score = 9;
  for (int i = 0; i < this->turn_max_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(9, this->turn_max_score(i), target);
  }

  // repeated uint32 card_types = 10;
  for (int i = 0; i < this->card_types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(10, this->card_types(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_sangong_game_info_play_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 banker_id = 3;
    if (has_banker_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->banker_id());
    }

    // optional uint32 game_status = 4;
    if (has_game_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_status());
    }

    // optional uint32 time_leave = 7;
    if (has_time_leave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_leave());
    }

  }
  // repeated int64 all_jetton_score = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->all_jetton_score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->all_jetton_score(i));
    }
    total_size += 1 * this->all_jetton_score_size() + data_size;
  }

  // repeated .net.msg_cards table_cards = 2;
  total_size += 1 * this->table_cards_size();
  for (int i = 0; i < this->table_cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->table_cards(i));
  }

  // repeated uint32 show_cards = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->show_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->show_cards(i));
    }
    total_size += 1 * this->show_cards_size() + data_size;
  }

  // repeated uint32 player_status = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->player_status_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->player_status(i));
    }
    total_size += 1 * this->player_status_size() + data_size;
  }

  // repeated uint32 apply_list = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->apply_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->apply_list(i));
    }
    total_size += 1 * this->apply_list_size() + data_size;
  }

  // repeated int64 turn_max_score = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->turn_max_score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->turn_max_score(i));
    }
    total_size += 1 * this->turn_max_score_size() + data_size;
  }

  // repeated uint32 card_types = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_types_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->card_types(i));
    }
    total_size += 1 * this->card_types_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_sangong_game_info_play_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_sangong_game_info_play_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_sangong_game_info_play_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_sangong_game_info_play_rep::MergeFrom(const msg_sangong_game_info_play_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  all_jetton_score_.MergeFrom(from.all_jetton_score_);
  table_cards_.MergeFrom(from.table_cards_);
  show_cards_.MergeFrom(from.show_cards_);
  player_status_.MergeFrom(from.player_status_);
  apply_list_.MergeFrom(from.apply_list_);
  turn_max_score_.MergeFrom(from.turn_max_score_);
  card_types_.MergeFrom(from.card_types_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_banker_id()) {
      set_banker_id(from.banker_id());
    }
    if (from.has_game_status()) {
      set_game_status(from.game_status());
    }
    if (from.has_time_leave()) {
      set_time_leave(from.time_leave());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_sangong_game_info_play_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_sangong_game_info_play_rep::CopyFrom(const msg_sangong_game_info_play_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_sangong_game_info_play_rep::IsInitialized() const {

  return true;
}

void msg_sangong_game_info_play_rep::Swap(msg_sangong_game_info_play_rep* other) {
  if (other != this) {
    all_jetton_score_.Swap(&other->all_jetton_score_);
    table_cards_.Swap(&other->table_cards_);
    std::swap(banker_id_, other->banker_id_);
    std::swap(game_status_, other->game_status_);
    show_cards_.Swap(&other->show_cards_);
    player_status_.Swap(&other->player_status_);
    std::swap(time_leave_, other->time_leave_);
    apply_list_.Swap(&other->apply_list_);
    turn_max_score_.Swap(&other->turn_max_score_);
    card_types_.Swap(&other->card_types_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_sangong_game_info_play_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_sangong_game_info_play_rep_descriptor_;
  metadata.reflection = msg_sangong_game_info_play_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_sangong_start_rep::kCanApplyBankerFieldNumber;
const int msg_sangong_start_rep::kBankerIdFieldNumber;
#endif  // !_MSC_VER

msg_sangong_start_rep::msg_sangong_start_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_sangong_start_rep::InitAsDefaultInstance() {
}

msg_sangong_start_rep::msg_sangong_start_rep(const msg_sangong_start_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_sangong_start_rep::SharedCtor() {
  _cached_size_ = 0;
  can_apply_banker_ = 0u;
  banker_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_sangong_start_rep::~msg_sangong_start_rep() {
  SharedDtor();
}

void msg_sangong_start_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_sangong_start_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_sangong_start_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_sangong_start_rep_descriptor_;
}

const msg_sangong_start_rep& msg_sangong_start_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sangong_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_sangong_start_rep* msg_sangong_start_rep::default_instance_ = NULL;

msg_sangong_start_rep* msg_sangong_start_rep::New() const {
  return new msg_sangong_start_rep;
}

void msg_sangong_start_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    can_apply_banker_ = 0u;
    banker_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_sangong_start_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 can_apply_banker = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &can_apply_banker_)));
          set_has_can_apply_banker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_banker_id;
        break;
      }

      // optional uint32 banker_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &banker_id_)));
          set_has_banker_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_sangong_start_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 can_apply_banker = 1;
  if (has_can_apply_banker()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->can_apply_banker(), output);
  }

  // optional uint32 banker_id = 2;
  if (has_banker_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->banker_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_sangong_start_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 can_apply_banker = 1;
  if (has_can_apply_banker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->can_apply_banker(), target);
  }

  // optional uint32 banker_id = 2;
  if (has_banker_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->banker_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_sangong_start_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 can_apply_banker = 1;
    if (has_can_apply_banker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->can_apply_banker());
    }

    // optional uint32 banker_id = 2;
    if (has_banker_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->banker_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_sangong_start_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_sangong_start_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_sangong_start_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_sangong_start_rep::MergeFrom(const msg_sangong_start_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_can_apply_banker()) {
      set_can_apply_banker(from.can_apply_banker());
    }
    if (from.has_banker_id()) {
      set_banker_id(from.banker_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_sangong_start_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_sangong_start_rep::CopyFrom(const msg_sangong_start_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_sangong_start_rep::IsInitialized() const {

  return true;
}

void msg_sangong_start_rep::Swap(msg_sangong_start_rep* other) {
  if (other != this) {
    std::swap(can_apply_banker_, other->can_apply_banker_);
    std::swap(banker_id_, other->banker_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_sangong_start_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_sangong_start_rep_descriptor_;
  metadata.reflection = msg_sangong_start_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_sangong_apply_banker::kScoreFieldNumber;
#endif  // !_MSC_VER

msg_sangong_apply_banker::msg_sangong_apply_banker()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_sangong_apply_banker::InitAsDefaultInstance() {
}

msg_sangong_apply_banker::msg_sangong_apply_banker(const msg_sangong_apply_banker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_sangong_apply_banker::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_sangong_apply_banker::~msg_sangong_apply_banker() {
  SharedDtor();
}

void msg_sangong_apply_banker::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_sangong_apply_banker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_sangong_apply_banker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_sangong_apply_banker_descriptor_;
}

const msg_sangong_apply_banker& msg_sangong_apply_banker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sangong_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_sangong_apply_banker* msg_sangong_apply_banker::default_instance_ = NULL;

msg_sangong_apply_banker* msg_sangong_apply_banker::New() const {
  return new msg_sangong_apply_banker;
}

void msg_sangong_apply_banker::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    score_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_sangong_apply_banker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_sangong_apply_banker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_sangong_apply_banker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 score = 1;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_sangong_apply_banker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_sangong_apply_banker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_sangong_apply_banker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_sangong_apply_banker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_sangong_apply_banker::MergeFrom(const msg_sangong_apply_banker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_sangong_apply_banker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_sangong_apply_banker::CopyFrom(const msg_sangong_apply_banker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_sangong_apply_banker::IsInitialized() const {

  return true;
}

void msg_sangong_apply_banker::Swap(msg_sangong_apply_banker* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_sangong_apply_banker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_sangong_apply_banker_descriptor_;
  metadata.reflection = msg_sangong_apply_banker_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_sangong_apply_banker_rep::kChairidFieldNumber;
const int msg_sangong_apply_banker_rep::kScoreFieldNumber;
const int msg_sangong_apply_banker_rep::kResultFieldNumber;
#endif  // !_MSC_VER

msg_sangong_apply_banker_rep::msg_sangong_apply_banker_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_sangong_apply_banker_rep::InitAsDefaultInstance() {
}

msg_sangong_apply_banker_rep::msg_sangong_apply_banker_rep(const msg_sangong_apply_banker_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_sangong_apply_banker_rep::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0u;
  score_ = 0u;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_sangong_apply_banker_rep::~msg_sangong_apply_banker_rep() {
  SharedDtor();
}

void msg_sangong_apply_banker_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_sangong_apply_banker_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_sangong_apply_banker_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_sangong_apply_banker_rep_descriptor_;
}

const msg_sangong_apply_banker_rep& msg_sangong_apply_banker_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sangong_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_sangong_apply_banker_rep* msg_sangong_apply_banker_rep::default_instance_ = NULL;

msg_sangong_apply_banker_rep* msg_sangong_apply_banker_rep::New() const {
  return new msg_sangong_apply_banker_rep;
}

void msg_sangong_apply_banker_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0u;
    score_ = 0u;
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_sangong_apply_banker_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 chairid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional uint32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional uint32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_sangong_apply_banker_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 chairid = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chairid(), output);
  }

  // optional uint32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }

  // optional uint32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_sangong_apply_banker_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 chairid = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chairid(), target);
  }

  // optional uint32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }

  // optional uint32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_sangong_apply_banker_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 chairid = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chairid());
    }

    // optional uint32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_sangong_apply_banker_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_sangong_apply_banker_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_sangong_apply_banker_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_sangong_apply_banker_rep::MergeFrom(const msg_sangong_apply_banker_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_sangong_apply_banker_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_sangong_apply_banker_rep::CopyFrom(const msg_sangong_apply_banker_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_sangong_apply_banker_rep::IsInitialized() const {

  return true;
}

void msg_sangong_apply_banker_rep::Swap(msg_sangong_apply_banker_rep* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(score_, other->score_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_sangong_apply_banker_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_sangong_apply_banker_rep_descriptor_;
  metadata.reflection = msg_sangong_apply_banker_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_sangong_banker_result_rep::kBankerIdFieldNumber;
const int msg_sangong_banker_result_rep::kApplyListFieldNumber;
const int msg_sangong_banker_result_rep::kTurnMaxScoreFieldNumber;
const int msg_sangong_banker_result_rep::kIsApplyFieldNumber;
#endif  // !_MSC_VER

msg_sangong_banker_result_rep::msg_sangong_banker_result_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_sangong_banker_result_rep::InitAsDefaultInstance() {
}

msg_sangong_banker_result_rep::msg_sangong_banker_result_rep(const msg_sangong_banker_result_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_sangong_banker_result_rep::SharedCtor() {
  _cached_size_ = 0;
  banker_id_ = 0u;
  is_apply_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_sangong_banker_result_rep::~msg_sangong_banker_result_rep() {
  SharedDtor();
}

void msg_sangong_banker_result_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_sangong_banker_result_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_sangong_banker_result_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_sangong_banker_result_rep_descriptor_;
}

const msg_sangong_banker_result_rep& msg_sangong_banker_result_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sangong_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_sangong_banker_result_rep* msg_sangong_banker_result_rep::default_instance_ = NULL;

msg_sangong_banker_result_rep* msg_sangong_banker_result_rep::New() const {
  return new msg_sangong_banker_result_rep;
}

void msg_sangong_banker_result_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    banker_id_ = 0u;
    is_apply_ = 0u;
  }
  apply_list_.Clear();
  turn_max_score_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_sangong_banker_result_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 banker_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &banker_id_)));
          set_has_banker_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_apply_list;
        break;
      }

      // repeated uint32 apply_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_apply_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_apply_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_apply_list;
        if (input->ExpectTag(24)) goto parse_turn_max_score;
        break;
      }

      // repeated int64 turn_max_score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turn_max_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_turn_max_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_turn_max_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_turn_max_score;
        if (input->ExpectTag(32)) goto parse_is_apply;
        break;
      }

      // optional uint32 is_apply = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_apply:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_apply_)));
          set_has_is_apply();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_sangong_banker_result_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 banker_id = 1;
  if (has_banker_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->banker_id(), output);
  }

  // repeated uint32 apply_list = 2;
  for (int i = 0; i < this->apply_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->apply_list(i), output);
  }

  // repeated int64 turn_max_score = 3;
  for (int i = 0; i < this->turn_max_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->turn_max_score(i), output);
  }

  // optional uint32 is_apply = 4;
  if (has_is_apply()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->is_apply(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_sangong_banker_result_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 banker_id = 1;
  if (has_banker_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->banker_id(), target);
  }

  // repeated uint32 apply_list = 2;
  for (int i = 0; i < this->apply_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->apply_list(i), target);
  }

  // repeated int64 turn_max_score = 3;
  for (int i = 0; i < this->turn_max_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->turn_max_score(i), target);
  }

  // optional uint32 is_apply = 4;
  if (has_is_apply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->is_apply(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_sangong_banker_result_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 banker_id = 1;
    if (has_banker_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->banker_id());
    }

    // optional uint32 is_apply = 4;
    if (has_is_apply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_apply());
    }

  }
  // repeated uint32 apply_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->apply_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->apply_list(i));
    }
    total_size += 1 * this->apply_list_size() + data_size;
  }

  // repeated int64 turn_max_score = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->turn_max_score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->turn_max_score(i));
    }
    total_size += 1 * this->turn_max_score_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_sangong_banker_result_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_sangong_banker_result_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_sangong_banker_result_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_sangong_banker_result_rep::MergeFrom(const msg_sangong_banker_result_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  apply_list_.MergeFrom(from.apply_list_);
  turn_max_score_.MergeFrom(from.turn_max_score_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_banker_id()) {
      set_banker_id(from.banker_id());
    }
    if (from.has_is_apply()) {
      set_is_apply(from.is_apply());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_sangong_banker_result_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_sangong_banker_result_rep::CopyFrom(const msg_sangong_banker_result_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_sangong_banker_result_rep::IsInitialized() const {

  return true;
}

void msg_sangong_banker_result_rep::Swap(msg_sangong_banker_result_rep* other) {
  if (other != this) {
    std::swap(banker_id_, other->banker_id_);
    apply_list_.Swap(&other->apply_list_);
    turn_max_score_.Swap(&other->turn_max_score_);
    std::swap(is_apply_, other->is_apply_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_sangong_banker_result_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_sangong_banker_result_rep_descriptor_;
  metadata.reflection = msg_sangong_banker_result_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_sangong_place_jetton_req::kJettonScoreFieldNumber;
#endif  // !_MSC_VER

msg_sangong_place_jetton_req::msg_sangong_place_jetton_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_sangong_place_jetton_req::InitAsDefaultInstance() {
}

msg_sangong_place_jetton_req::msg_sangong_place_jetton_req(const msg_sangong_place_jetton_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_sangong_place_jetton_req::SharedCtor() {
  _cached_size_ = 0;
  jetton_score_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_sangong_place_jetton_req::~msg_sangong_place_jetton_req() {
  SharedDtor();
}

void msg_sangong_place_jetton_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_sangong_place_jetton_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_sangong_place_jetton_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_sangong_place_jetton_req_descriptor_;
}

const msg_sangong_place_jetton_req& msg_sangong_place_jetton_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sangong_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_sangong_place_jetton_req* msg_sangong_place_jetton_req::default_instance_ = NULL;

msg_sangong_place_jetton_req* msg_sangong_place_jetton_req::New() const {
  return new msg_sangong_place_jetton_req;
}

void msg_sangong_place_jetton_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    jetton_score_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_sangong_place_jetton_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 jetton_score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &jetton_score_)));
          set_has_jetton_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_sangong_place_jetton_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 jetton_score = 1;
  if (has_jetton_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->jetton_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_sangong_place_jetton_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 jetton_score = 1;
  if (has_jetton_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->jetton_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_sangong_place_jetton_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 jetton_score = 1;
    if (has_jetton_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->jetton_score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_sangong_place_jetton_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_sangong_place_jetton_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_sangong_place_jetton_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_sangong_place_jetton_req::MergeFrom(const msg_sangong_place_jetton_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jetton_score()) {
      set_jetton_score(from.jetton_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_sangong_place_jetton_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_sangong_place_jetton_req::CopyFrom(const msg_sangong_place_jetton_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_sangong_place_jetton_req::IsInitialized() const {

  return true;
}

void msg_sangong_place_jetton_req::Swap(msg_sangong_place_jetton_req* other) {
  if (other != this) {
    std::swap(jetton_score_, other->jetton_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_sangong_place_jetton_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_sangong_place_jetton_req_descriptor_;
  metadata.reflection = msg_sangong_place_jetton_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_sangong_place_jetton_rep::kJettonScoreFieldNumber;
const int msg_sangong_place_jetton_rep::kResultFieldNumber;
#endif  // !_MSC_VER

msg_sangong_place_jetton_rep::msg_sangong_place_jetton_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_sangong_place_jetton_rep::InitAsDefaultInstance() {
}

msg_sangong_place_jetton_rep::msg_sangong_place_jetton_rep(const msg_sangong_place_jetton_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_sangong_place_jetton_rep::SharedCtor() {
  _cached_size_ = 0;
  jetton_score_ = GOOGLE_LONGLONG(0);
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_sangong_place_jetton_rep::~msg_sangong_place_jetton_rep() {
  SharedDtor();
}

void msg_sangong_place_jetton_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_sangong_place_jetton_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_sangong_place_jetton_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_sangong_place_jetton_rep_descriptor_;
}

const msg_sangong_place_jetton_rep& msg_sangong_place_jetton_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sangong_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_sangong_place_jetton_rep* msg_sangong_place_jetton_rep::default_instance_ = NULL;

msg_sangong_place_jetton_rep* msg_sangong_place_jetton_rep::New() const {
  return new msg_sangong_place_jetton_rep;
}

void msg_sangong_place_jetton_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    jetton_score_ = GOOGLE_LONGLONG(0);
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_sangong_place_jetton_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 jetton_score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &jetton_score_)));
          set_has_jetton_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional uint32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_sangong_place_jetton_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 jetton_score = 1;
  if (has_jetton_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->jetton_score(), output);
  }

  // optional uint32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_sangong_place_jetton_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 jetton_score = 1;
  if (has_jetton_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->jetton_score(), target);
  }

  // optional uint32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_sangong_place_jetton_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 jetton_score = 1;
    if (has_jetton_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->jetton_score());
    }

    // optional uint32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_sangong_place_jetton_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_sangong_place_jetton_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_sangong_place_jetton_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_sangong_place_jetton_rep::MergeFrom(const msg_sangong_place_jetton_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jetton_score()) {
      set_jetton_score(from.jetton_score());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_sangong_place_jetton_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_sangong_place_jetton_rep::CopyFrom(const msg_sangong_place_jetton_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_sangong_place_jetton_rep::IsInitialized() const {

  return true;
}

void msg_sangong_place_jetton_rep::Swap(msg_sangong_place_jetton_rep* other) {
  if (other != this) {
    std::swap(jetton_score_, other->jetton_score_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_sangong_place_jetton_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_sangong_place_jetton_rep_descriptor_;
  metadata.reflection = msg_sangong_place_jetton_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_sangong_place_jetton_broadcast::kChairidFieldNumber;
const int msg_sangong_place_jetton_broadcast::kJettonScoreFieldNumber;
#endif  // !_MSC_VER

msg_sangong_place_jetton_broadcast::msg_sangong_place_jetton_broadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_sangong_place_jetton_broadcast::InitAsDefaultInstance() {
}

msg_sangong_place_jetton_broadcast::msg_sangong_place_jetton_broadcast(const msg_sangong_place_jetton_broadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_sangong_place_jetton_broadcast::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0u;
  jetton_score_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_sangong_place_jetton_broadcast::~msg_sangong_place_jetton_broadcast() {
  SharedDtor();
}

void msg_sangong_place_jetton_broadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_sangong_place_jetton_broadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_sangong_place_jetton_broadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_sangong_place_jetton_broadcast_descriptor_;
}

const msg_sangong_place_jetton_broadcast& msg_sangong_place_jetton_broadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sangong_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_sangong_place_jetton_broadcast* msg_sangong_place_jetton_broadcast::default_instance_ = NULL;

msg_sangong_place_jetton_broadcast* msg_sangong_place_jetton_broadcast::New() const {
  return new msg_sangong_place_jetton_broadcast;
}

void msg_sangong_place_jetton_broadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0u;
    jetton_score_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_sangong_place_jetton_broadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 chairid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_jetton_score;
        break;
      }

      // optional int64 jetton_score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &jetton_score_)));
          set_has_jetton_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_sangong_place_jetton_broadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 chairid = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chairid(), output);
  }

  // optional int64 jetton_score = 2;
  if (has_jetton_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->jetton_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_sangong_place_jetton_broadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 chairid = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chairid(), target);
  }

  // optional int64 jetton_score = 2;
  if (has_jetton_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->jetton_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_sangong_place_jetton_broadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 chairid = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chairid());
    }

    // optional int64 jetton_score = 2;
    if (has_jetton_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->jetton_score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_sangong_place_jetton_broadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_sangong_place_jetton_broadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_sangong_place_jetton_broadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_sangong_place_jetton_broadcast::MergeFrom(const msg_sangong_place_jetton_broadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_jetton_score()) {
      set_jetton_score(from.jetton_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_sangong_place_jetton_broadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_sangong_place_jetton_broadcast::CopyFrom(const msg_sangong_place_jetton_broadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_sangong_place_jetton_broadcast::IsInitialized() const {

  return true;
}

void msg_sangong_place_jetton_broadcast::Swap(msg_sangong_place_jetton_broadcast* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(jetton_score_, other->jetton_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_sangong_place_jetton_broadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_sangong_place_jetton_broadcast_descriptor_;
  metadata.reflection = msg_sangong_place_jetton_broadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_sangong_send_card_rep::kCardsFieldNumber;
#endif  // !_MSC_VER

msg_sangong_send_card_rep::msg_sangong_send_card_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_sangong_send_card_rep::InitAsDefaultInstance() {
}

msg_sangong_send_card_rep::msg_sangong_send_card_rep(const msg_sangong_send_card_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_sangong_send_card_rep::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_sangong_send_card_rep::~msg_sangong_send_card_rep() {
  SharedDtor();
}

void msg_sangong_send_card_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_sangong_send_card_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_sangong_send_card_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_sangong_send_card_rep_descriptor_;
}

const msg_sangong_send_card_rep& msg_sangong_send_card_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sangong_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_sangong_send_card_rep* msg_sangong_send_card_rep::default_instance_ = NULL;

msg_sangong_send_card_rep* msg_sangong_send_card_rep::New() const {
  return new msg_sangong_send_card_rep;
}

void msg_sangong_send_card_rep::Clear() {
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_sangong_send_card_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 cards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_cards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_sangong_send_card_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 cards = 1;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->cards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_sangong_send_card_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 cards = 1;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->cards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_sangong_send_card_rep::ByteSize() const {
  int total_size = 0;

  // repeated uint32 cards = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_sangong_send_card_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_sangong_send_card_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_sangong_send_card_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_sangong_send_card_rep::MergeFrom(const msg_sangong_send_card_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_sangong_send_card_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_sangong_send_card_rep::CopyFrom(const msg_sangong_send_card_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_sangong_send_card_rep::IsInitialized() const {

  return true;
}

void msg_sangong_send_card_rep::Swap(msg_sangong_send_card_rep* other) {
  if (other != this) {
    cards_.Swap(&other->cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_sangong_send_card_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_sangong_send_card_rep_descriptor_;
  metadata.reflection = msg_sangong_send_card_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_sangong_change_card::kCardsFieldNumber;
#endif  // !_MSC_VER

msg_sangong_change_card::msg_sangong_change_card()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_sangong_change_card::InitAsDefaultInstance() {
}

msg_sangong_change_card::msg_sangong_change_card(const msg_sangong_change_card& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_sangong_change_card::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_sangong_change_card::~msg_sangong_change_card() {
  SharedDtor();
}

void msg_sangong_change_card::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_sangong_change_card::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_sangong_change_card::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_sangong_change_card_descriptor_;
}

const msg_sangong_change_card& msg_sangong_change_card::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sangong_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_sangong_change_card* msg_sangong_change_card::default_instance_ = NULL;

msg_sangong_change_card* msg_sangong_change_card::New() const {
  return new msg_sangong_change_card;
}

void msg_sangong_change_card::Clear() {
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_sangong_change_card::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 cards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_cards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_sangong_change_card::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 cards = 1;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->cards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_sangong_change_card::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 cards = 1;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->cards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_sangong_change_card::ByteSize() const {
  int total_size = 0;

  // repeated uint32 cards = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_sangong_change_card::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_sangong_change_card* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_sangong_change_card*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_sangong_change_card::MergeFrom(const msg_sangong_change_card& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_sangong_change_card::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_sangong_change_card::CopyFrom(const msg_sangong_change_card& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_sangong_change_card::IsInitialized() const {

  return true;
}

void msg_sangong_change_card::Swap(msg_sangong_change_card* other) {
  if (other != this) {
    cards_.Swap(&other->cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_sangong_change_card::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_sangong_change_card_descriptor_;
  metadata.reflection = msg_sangong_change_card_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_sangong_change_card_rep::kOperIdFieldNumber;
const int msg_sangong_change_card_rep::kResultFieldNumber;
const int msg_sangong_change_card_rep::kCardsFieldNumber;
const int msg_sangong_change_card_rep::kCardTypeFieldNumber;
#endif  // !_MSC_VER

msg_sangong_change_card_rep::msg_sangong_change_card_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_sangong_change_card_rep::InitAsDefaultInstance() {
}

msg_sangong_change_card_rep::msg_sangong_change_card_rep(const msg_sangong_change_card_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_sangong_change_card_rep::SharedCtor() {
  _cached_size_ = 0;
  oper_id_ = 0u;
  result_ = 0u;
  card_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_sangong_change_card_rep::~msg_sangong_change_card_rep() {
  SharedDtor();
}

void msg_sangong_change_card_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_sangong_change_card_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_sangong_change_card_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_sangong_change_card_rep_descriptor_;
}

const msg_sangong_change_card_rep& msg_sangong_change_card_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sangong_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_sangong_change_card_rep* msg_sangong_change_card_rep::default_instance_ = NULL;

msg_sangong_change_card_rep* msg_sangong_change_card_rep::New() const {
  return new msg_sangong_change_card_rep;
}

void msg_sangong_change_card_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oper_id_ = 0u;
    result_ = 0u;
    card_type_ = 0u;
  }
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_sangong_change_card_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 oper_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oper_id_)));
          set_has_oper_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional uint32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cards;
        break;
      }

      // repeated uint32 cards = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cards;
        if (input->ExpectTag(32)) goto parse_card_type;
        break;
      }

      // optional uint32 card_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_type_)));
          set_has_card_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_sangong_change_card_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 oper_id = 1;
  if (has_oper_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->oper_id(), output);
  }

  // optional uint32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result(), output);
  }

  // repeated uint32 cards = 3;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->cards(i), output);
  }

  // optional uint32 card_type = 4;
  if (has_card_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->card_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_sangong_change_card_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 oper_id = 1;
  if (has_oper_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->oper_id(), target);
  }

  // optional uint32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result(), target);
  }

  // repeated uint32 cards = 3;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->cards(i), target);
  }

  // optional uint32 card_type = 4;
  if (has_card_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->card_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_sangong_change_card_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 oper_id = 1;
    if (has_oper_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oper_id());
    }

    // optional uint32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 card_type = 4;
    if (has_card_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card_type());
    }

  }
  // repeated uint32 cards = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_sangong_change_card_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_sangong_change_card_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_sangong_change_card_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_sangong_change_card_rep::MergeFrom(const msg_sangong_change_card_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_oper_id()) {
      set_oper_id(from.oper_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_card_type()) {
      set_card_type(from.card_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_sangong_change_card_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_sangong_change_card_rep::CopyFrom(const msg_sangong_change_card_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_sangong_change_card_rep::IsInitialized() const {

  return true;
}

void msg_sangong_change_card_rep::Swap(msg_sangong_change_card_rep* other) {
  if (other != this) {
    std::swap(oper_id_, other->oper_id_);
    std::swap(result_, other->result_);
    cards_.Swap(&other->cards_);
    std::swap(card_type_, other->card_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_sangong_change_card_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_sangong_change_card_rep_descriptor_;
  metadata.reflection = msg_sangong_change_card_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_sangong_game_end::kTimeLeaveFieldNumber;
const int msg_sangong_game_end::kTableCardsFieldNumber;
const int msg_sangong_game_end::kCardTypesFieldNumber;
const int msg_sangong_game_end::kPlayerScoreFieldNumber;
const int msg_sangong_game_end::kWinMultipleFieldNumber;
#endif  // !_MSC_VER

msg_sangong_game_end::msg_sangong_game_end()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_sangong_game_end::InitAsDefaultInstance() {
}

msg_sangong_game_end::msg_sangong_game_end(const msg_sangong_game_end& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_sangong_game_end::SharedCtor() {
  _cached_size_ = 0;
  time_leave_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_sangong_game_end::~msg_sangong_game_end() {
  SharedDtor();
}

void msg_sangong_game_end::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_sangong_game_end::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_sangong_game_end::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_sangong_game_end_descriptor_;
}

const msg_sangong_game_end& msg_sangong_game_end::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sangong_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_sangong_game_end* msg_sangong_game_end::default_instance_ = NULL;

msg_sangong_game_end* msg_sangong_game_end::New() const {
  return new msg_sangong_game_end;
}

void msg_sangong_game_end::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_leave_ = 0u;
  }
  table_cards_.Clear();
  card_types_.Clear();
  player_score_.Clear();
  win_multiple_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_sangong_game_end::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 time_leave = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_leave_)));
          set_has_time_leave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table_cards;
        break;
      }

      // repeated .net.msg_cards table_cards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_table_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table_cards;
        if (input->ExpectTag(24)) goto parse_card_types;
        break;
      }

      // repeated uint32 card_types = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_types:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_card_types())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_types())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_card_types;
        if (input->ExpectTag(32)) goto parse_player_score;
        break;
      }

      // repeated int64 player_score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 32, input, this->mutable_player_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_player_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_player_score;
        if (input->ExpectTag(40)) goto parse_win_multiple;
        break;
      }

      // repeated int32 win_multiple = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_multiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_win_multiple())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_win_multiple())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_win_multiple;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_sangong_game_end::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 time_leave = 1;
  if (has_time_leave()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time_leave(), output);
  }

  // repeated .net.msg_cards table_cards = 2;
  for (int i = 0; i < this->table_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->table_cards(i), output);
  }

  // repeated uint32 card_types = 3;
  for (int i = 0; i < this->card_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->card_types(i), output);
  }

  // repeated int64 player_score = 4;
  for (int i = 0; i < this->player_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      4, this->player_score(i), output);
  }

  // repeated int32 win_multiple = 5;
  for (int i = 0; i < this->win_multiple_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->win_multiple(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_sangong_game_end::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 time_leave = 1;
  if (has_time_leave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time_leave(), target);
  }

  // repeated .net.msg_cards table_cards = 2;
  for (int i = 0; i < this->table_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->table_cards(i), target);
  }

  // repeated uint32 card_types = 3;
  for (int i = 0; i < this->card_types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->card_types(i), target);
  }

  // repeated int64 player_score = 4;
  for (int i = 0; i < this->player_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(4, this->player_score(i), target);
  }

  // repeated int32 win_multiple = 5;
  for (int i = 0; i < this->win_multiple_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->win_multiple(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_sangong_game_end::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 time_leave = 1;
    if (has_time_leave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_leave());
    }

  }
  // repeated .net.msg_cards table_cards = 2;
  total_size += 1 * this->table_cards_size();
  for (int i = 0; i < this->table_cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->table_cards(i));
  }

  // repeated uint32 card_types = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_types_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->card_types(i));
    }
    total_size += 1 * this->card_types_size() + data_size;
  }

  // repeated int64 player_score = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->player_score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->player_score(i));
    }
    total_size += 1 * this->player_score_size() + data_size;
  }

  // repeated int32 win_multiple = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->win_multiple_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->win_multiple(i));
    }
    total_size += 1 * this->win_multiple_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_sangong_game_end::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_sangong_game_end* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_sangong_game_end*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_sangong_game_end::MergeFrom(const msg_sangong_game_end& from) {
  GOOGLE_CHECK_NE(&from, this);
  table_cards_.MergeFrom(from.table_cards_);
  card_types_.MergeFrom(from.card_types_);
  player_score_.MergeFrom(from.player_score_);
  win_multiple_.MergeFrom(from.win_multiple_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_leave()) {
      set_time_leave(from.time_leave());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_sangong_game_end::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_sangong_game_end::CopyFrom(const msg_sangong_game_end& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_sangong_game_end::IsInitialized() const {

  return true;
}

void msg_sangong_game_end::Swap(msg_sangong_game_end* other) {
  if (other != this) {
    std::swap(time_leave_, other->time_leave_);
    table_cards_.Swap(&other->table_cards_);
    card_types_.Swap(&other->card_types_);
    player_score_.Swap(&other->player_score_);
    win_multiple_.Swap(&other->win_multiple_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_sangong_game_end::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_sangong_game_end_descriptor_;
  metadata.reflection = msg_sangong_game_end_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace net

// @@protoc_insertion_point(global_scope)
