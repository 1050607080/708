// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: majiang_logic_msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "majiang_logic_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace net {

namespace {

const ::google::protobuf::Descriptor* weave_item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  weave_item_reflection_ = NULL;
const ::google::protobuf::Descriptor* mjaction_notify_hu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mjaction_notify_hu_reflection_ = NULL;
const ::google::protobuf::Descriptor* mjaction_out_after_notify_hu_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mjaction_out_after_notify_hu_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* mjaction_out_after_notify_hu_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mjaction_out_after_notify_hu_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* mjaction_out_front_notify_hu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mjaction_out_front_notify_hu_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_mjaction_oper_after_notify_hu_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_mjaction_oper_after_notify_hu_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_mjaction_oper_after_notify_hu_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_mjaction_oper_after_notify_hu_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* mjaction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mjaction_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_majiang_game_info_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_majiang_game_info_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_majiang_start_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_majiang_start_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_majiang_out_card_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_majiang_out_card_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_majiang_out_card_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_majiang_out_card_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_majiang_send_card_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_majiang_send_card_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_majiang_listen_card_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_majiang_listen_card_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_majiang_oper_notify_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_majiang_oper_notify_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_majiang_oper_card_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_majiang_oper_card_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_majiang_oper_result_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_majiang_oper_result_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* mjhu_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mjhu_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_majiang_game_over_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_majiang_game_over_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_majiang_opening_hu_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_majiang_opening_hu_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_majiang_flush_desk_cards_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_majiang_flush_desk_cards_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_majiang_show_public_cards_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_majiang_show_public_cards_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_majiang_change_hand_card_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_majiang_change_hand_card_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_majiang_get_hand_card_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_majiang_get_hand_card_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_majiang_get_hand_card_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_majiang_get_hand_card_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_majiang_oper_trustee_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_majiang_oper_trustee_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_majiang_oper_trustee_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_majiang_oper_trustee_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_majiang_oper_trustee_broadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_majiang_oper_trustee_broadcast_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_majiang_5flogic_5fmsg_2eproto() {
  protobuf_AddDesc_majiang_5flogic_5fmsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "majiang_logic_msg.proto");
  GOOGLE_CHECK(file != NULL);
  weave_item_descriptor_ = file->message_type(0);
  static const int weave_item_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(weave_item, weave_kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(weave_item, center_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(weave_item, public_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(weave_item, provide_user_),
  };
  weave_item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      weave_item_descriptor_,
      weave_item::default_instance_,
      weave_item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(weave_item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(weave_item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(weave_item));
  mjaction_notify_hu_descriptor_ = file->message_type(1);
  static const int mjaction_notify_hu_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mjaction_notify_hu, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mjaction_notify_hu, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mjaction_notify_hu, count_),
  };
  mjaction_notify_hu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mjaction_notify_hu_descriptor_,
      mjaction_notify_hu::default_instance_,
      mjaction_notify_hu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mjaction_notify_hu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mjaction_notify_hu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mjaction_notify_hu));
  mjaction_out_after_notify_hu_req_descriptor_ = file->message_type(2);
  static const int mjaction_out_after_notify_hu_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mjaction_out_after_notify_hu_req, chairid_),
  };
  mjaction_out_after_notify_hu_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mjaction_out_after_notify_hu_req_descriptor_,
      mjaction_out_after_notify_hu_req::default_instance_,
      mjaction_out_after_notify_hu_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mjaction_out_after_notify_hu_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mjaction_out_after_notify_hu_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mjaction_out_after_notify_hu_req));
  mjaction_out_after_notify_hu_rep_descriptor_ = file->message_type(3);
  static const int mjaction_out_after_notify_hu_rep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mjaction_out_after_notify_hu_rep, last_out_card_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mjaction_out_after_notify_hu_rep, notify_hu_),
  };
  mjaction_out_after_notify_hu_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mjaction_out_after_notify_hu_rep_descriptor_,
      mjaction_out_after_notify_hu_rep::default_instance_,
      mjaction_out_after_notify_hu_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mjaction_out_after_notify_hu_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mjaction_out_after_notify_hu_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mjaction_out_after_notify_hu_rep));
  mjaction_out_front_notify_hu_descriptor_ = file->message_type(4);
  static const int mjaction_out_front_notify_hu_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mjaction_out_front_notify_hu, out_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mjaction_out_front_notify_hu, notify_hu_),
  };
  mjaction_out_front_notify_hu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mjaction_out_front_notify_hu_descriptor_,
      mjaction_out_front_notify_hu::default_instance_,
      mjaction_out_front_notify_hu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mjaction_out_front_notify_hu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mjaction_out_front_notify_hu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mjaction_out_front_notify_hu));
  msg_mjaction_oper_after_notify_hu_req_descriptor_ = file->message_type(5);
  static const int msg_mjaction_oper_after_notify_hu_req_offsets_[1] = {
  };
  msg_mjaction_oper_after_notify_hu_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_mjaction_oper_after_notify_hu_req_descriptor_,
      msg_mjaction_oper_after_notify_hu_req::default_instance_,
      msg_mjaction_oper_after_notify_hu_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_mjaction_oper_after_notify_hu_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_mjaction_oper_after_notify_hu_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_mjaction_oper_after_notify_hu_req));
  msg_mjaction_oper_after_notify_hu_rep_descriptor_ = file->message_type(6);
  static const int msg_mjaction_oper_after_notify_hu_rep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_mjaction_oper_after_notify_hu_rep, oper_chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_mjaction_oper_after_notify_hu_rep, notify_hu_),
  };
  msg_mjaction_oper_after_notify_hu_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_mjaction_oper_after_notify_hu_rep_descriptor_,
      msg_mjaction_oper_after_notify_hu_rep::default_instance_,
      msg_mjaction_oper_after_notify_hu_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_mjaction_oper_after_notify_hu_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_mjaction_oper_after_notify_hu_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_mjaction_oper_after_notify_hu_rep));
  mjaction_descriptor_ = file->message_type(7);
  static const int mjaction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mjaction, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mjaction, card_),
  };
  mjaction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mjaction_descriptor_,
      mjaction::default_instance_,
      mjaction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mjaction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mjaction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mjaction));
  msg_majiang_game_info_rep_descriptor_ = file->message_type(8);
  static const int msg_majiang_game_info_rep_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_game_info_rep, banker_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_game_info_rep, cur_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_game_info_rep, turn_winer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_game_info_rep, turn_card_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_game_info_rep, discard_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_game_info_rep, discard_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_game_info_rep, weave_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_game_info_rep, weave_items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_game_info_rep, hand_card_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_game_info_rep, hand_card_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_game_info_rep, game_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_game_info_rep, wait_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_game_info_rep, cur_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_game_info_rep, cur_oper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_game_info_rep, left_card_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_game_info_rep, send_card_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_game_info_rep, listen_states_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_game_info_rep, resume_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_game_info_rep, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_game_info_rep, trustee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_game_info_rep, notify_hu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_game_info_rep, passhu_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_game_info_rep, send_card_user_),
  };
  msg_majiang_game_info_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_majiang_game_info_rep_descriptor_,
      msg_majiang_game_info_rep::default_instance_,
      msg_majiang_game_info_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_game_info_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_game_info_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_majiang_game_info_rep));
  msg_majiang_start_rep_descriptor_ = file->message_type(9);
  static const int msg_majiang_start_rep_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_start_rep, sice_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_start_rep, banker_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_start_rep, cur_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_start_rep, user_action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_start_rep, card_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_start_rep, cur_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_start_rep, card_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_start_rep, left_card_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_start_rep, notify_hu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_start_rep, passhu_count_),
  };
  msg_majiang_start_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_majiang_start_rep_descriptor_,
      msg_majiang_start_rep::default_instance_,
      msg_majiang_start_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_start_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_start_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_majiang_start_rep));
  msg_majiang_out_card_req_descriptor_ = file->message_type(10);
  static const int msg_majiang_out_card_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_out_card_req, card_data_),
  };
  msg_majiang_out_card_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_majiang_out_card_req_descriptor_,
      msg_majiang_out_card_req::default_instance_,
      msg_majiang_out_card_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_out_card_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_out_card_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_majiang_out_card_req));
  msg_majiang_out_card_rep_descriptor_ = file->message_type(11);
  static const int msg_majiang_out_card_rep_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_out_card_rep, out_card_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_out_card_rep, out_card_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_out_card_rep, notify_hu_),
  };
  msg_majiang_out_card_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_majiang_out_card_rep_descriptor_,
      msg_majiang_out_card_rep::default_instance_,
      msg_majiang_out_card_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_out_card_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_out_card_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_majiang_out_card_rep));
  msg_majiang_send_card_rep_descriptor_ = file->message_type(12);
  static const int msg_majiang_send_card_rep_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_send_card_rep, card_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_send_card_rep, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_send_card_rep, cur_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_send_card_rep, is_not_gang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_send_card_rep, left_card_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_send_card_rep, cur_hand_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_send_card_rep, notify_hu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_send_card_rep, passhu_count_),
  };
  msg_majiang_send_card_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_majiang_send_card_rep_descriptor_,
      msg_majiang_send_card_rep::default_instance_,
      msg_majiang_send_card_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_send_card_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_send_card_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_majiang_send_card_rep));
  msg_majiang_listen_card_rep_descriptor_ = file->message_type(13);
  static const int msg_majiang_listen_card_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_listen_card_rep, listen_user_),
  };
  msg_majiang_listen_card_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_majiang_listen_card_rep_descriptor_,
      msg_majiang_listen_card_rep::default_instance_,
      msg_majiang_listen_card_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_listen_card_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_listen_card_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_majiang_listen_card_rep));
  msg_majiang_oper_notify_rep_descriptor_ = file->message_type(14);
  static const int msg_majiang_oper_notify_rep_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_oper_notify_rep, resume_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_oper_notify_rep, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_oper_notify_rep, cur_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_oper_notify_rep, passhu_count_),
  };
  msg_majiang_oper_notify_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_majiang_oper_notify_rep_descriptor_,
      msg_majiang_oper_notify_rep::default_instance_,
      msg_majiang_oper_notify_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_oper_notify_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_oper_notify_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_majiang_oper_notify_rep));
  msg_majiang_oper_card_req_descriptor_ = file->message_type(15);
  static const int msg_majiang_oper_card_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_oper_card_req, oper_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_oper_card_req, oper_card_),
  };
  msg_majiang_oper_card_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_majiang_oper_card_req_descriptor_,
      msg_majiang_oper_card_req::default_instance_,
      msg_majiang_oper_card_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_oper_card_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_oper_card_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_majiang_oper_card_req));
  msg_majiang_oper_result_rep_descriptor_ = file->message_type(16);
  static const int msg_majiang_oper_result_rep_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_oper_result_rep, oper_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_oper_result_rep, provide_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_oper_result_rep, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_oper_result_rep, notify_hu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_oper_result_rep, passhu_count_),
  };
  msg_majiang_oper_result_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_majiang_oper_result_rep_descriptor_,
      msg_majiang_oper_result_rep::default_instance_,
      msg_majiang_oper_result_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_oper_result_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_oper_result_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_majiang_oper_result_rep));
  mjhu_info_descriptor_ = file->message_type(17);
  static const int mjhu_info_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mjhu_info, open_hu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mjhu_info, hu_kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mjhu_info, hu_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mjhu_info, hu_right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mjhu_info, hit_bird_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mjhu_info, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mjhu_info, hu_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mjhu_info, card_datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mjhu_info, weave_items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mjhu_info, bird_score_),
  };
  mjhu_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mjhu_info_descriptor_,
      mjhu_info::default_instance_,
      mjhu_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mjhu_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mjhu_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mjhu_info));
  msg_majiang_game_over_rep_descriptor_ = file->message_type(18);
  static const int msg_majiang_game_over_rep_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_game_over_rep, provide_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_game_over_rep, chi_hu_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_game_over_rep, hu_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_game_over_rep, end_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_game_over_rep, banker_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_game_over_rep, all_bird_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_game_over_rep, passhu_count_),
  };
  msg_majiang_game_over_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_majiang_game_over_rep_descriptor_,
      msg_majiang_game_over_rep::default_instance_,
      msg_majiang_game_over_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_game_over_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_game_over_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_majiang_game_over_rep));
  msg_majiang_opening_hu_rep_descriptor_ = file->message_type(19);
  static const int msg_majiang_opening_hu_rep_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_opening_hu_rep, chair_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_opening_hu_rep, min_hu_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_opening_hu_rep, card_data_),
  };
  msg_majiang_opening_hu_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_majiang_opening_hu_rep_descriptor_,
      msg_majiang_opening_hu_rep::default_instance_,
      msg_majiang_opening_hu_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_opening_hu_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_opening_hu_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_majiang_opening_hu_rep));
  msg_majiang_flush_desk_cards_rep_descriptor_ = file->message_type(20);
  static const int msg_majiang_flush_desk_cards_rep_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_flush_desk_cards_rep, turn_card_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_flush_desk_cards_rep, discard_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_flush_desk_cards_rep, discard_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_flush_desk_cards_rep, weave_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_flush_desk_cards_rep, weave_items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_flush_desk_cards_rep, hand_card_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_flush_desk_cards_rep, hand_card_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_flush_desk_cards_rep, left_card_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_flush_desk_cards_rep, send_card_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_flush_desk_cards_rep, cur_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_flush_desk_cards_rep, send_card_user_),
  };
  msg_majiang_flush_desk_cards_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_majiang_flush_desk_cards_rep_descriptor_,
      msg_majiang_flush_desk_cards_rep::default_instance_,
      msg_majiang_flush_desk_cards_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_flush_desk_cards_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_flush_desk_cards_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_majiang_flush_desk_cards_rep));
  msg_majiang_show_public_cards_rep_descriptor_ = file->message_type(21);
  static const int msg_majiang_show_public_cards_rep_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_show_public_cards_rep, show_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_show_public_cards_rep, show_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_show_public_cards_rep, show_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_show_public_cards_rep, left_card_count_),
  };
  msg_majiang_show_public_cards_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_majiang_show_public_cards_rep_descriptor_,
      msg_majiang_show_public_cards_rep::default_instance_,
      msg_majiang_show_public_cards_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_show_public_cards_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_show_public_cards_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_majiang_show_public_cards_rep));
  msg_majiang_change_hand_card_req_descriptor_ = file->message_type(22);
  static const int msg_majiang_change_hand_card_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_change_hand_card_req, change_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_change_hand_card_req, change_card_),
  };
  msg_majiang_change_hand_card_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_majiang_change_hand_card_req_descriptor_,
      msg_majiang_change_hand_card_req::default_instance_,
      msg_majiang_change_hand_card_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_change_hand_card_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_change_hand_card_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_majiang_change_hand_card_req));
  msg_majiang_get_hand_card_req_descriptor_ = file->message_type(23);
  static const int msg_majiang_get_hand_card_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_get_hand_card_req, user_),
  };
  msg_majiang_get_hand_card_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_majiang_get_hand_card_req_descriptor_,
      msg_majiang_get_hand_card_req::default_instance_,
      msg_majiang_get_hand_card_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_get_hand_card_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_get_hand_card_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_majiang_get_hand_card_req));
  msg_majiang_get_hand_card_rep_descriptor_ = file->message_type(24);
  static const int msg_majiang_get_hand_card_rep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_get_hand_card_rep, hand_card_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_get_hand_card_rep, left_card_count_),
  };
  msg_majiang_get_hand_card_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_majiang_get_hand_card_rep_descriptor_,
      msg_majiang_get_hand_card_rep::default_instance_,
      msg_majiang_get_hand_card_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_get_hand_card_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_get_hand_card_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_majiang_get_hand_card_rep));
  msg_majiang_oper_trustee_req_descriptor_ = file->message_type(25);
  static const int msg_majiang_oper_trustee_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_oper_trustee_req, trustee_),
  };
  msg_majiang_oper_trustee_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_majiang_oper_trustee_req_descriptor_,
      msg_majiang_oper_trustee_req::default_instance_,
      msg_majiang_oper_trustee_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_oper_trustee_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_oper_trustee_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_majiang_oper_trustee_req));
  msg_majiang_oper_trustee_rep_descriptor_ = file->message_type(26);
  static const int msg_majiang_oper_trustee_rep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_oper_trustee_rep, trustee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_oper_trustee_rep, result_),
  };
  msg_majiang_oper_trustee_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_majiang_oper_trustee_rep_descriptor_,
      msg_majiang_oper_trustee_rep::default_instance_,
      msg_majiang_oper_trustee_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_oper_trustee_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_oper_trustee_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_majiang_oper_trustee_rep));
  msg_majiang_oper_trustee_broadcast_descriptor_ = file->message_type(27);
  static const int msg_majiang_oper_trustee_broadcast_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_oper_trustee_broadcast, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_oper_trustee_broadcast, trustee_),
  };
  msg_majiang_oper_trustee_broadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_majiang_oper_trustee_broadcast_descriptor_,
      msg_majiang_oper_trustee_broadcast::default_instance_,
      msg_majiang_oper_trustee_broadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_oper_trustee_broadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_majiang_oper_trustee_broadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_majiang_oper_trustee_broadcast));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_majiang_5flogic_5fmsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    weave_item_descriptor_, &weave_item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mjaction_notify_hu_descriptor_, &mjaction_notify_hu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mjaction_out_after_notify_hu_req_descriptor_, &mjaction_out_after_notify_hu_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mjaction_out_after_notify_hu_rep_descriptor_, &mjaction_out_after_notify_hu_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mjaction_out_front_notify_hu_descriptor_, &mjaction_out_front_notify_hu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_mjaction_oper_after_notify_hu_req_descriptor_, &msg_mjaction_oper_after_notify_hu_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_mjaction_oper_after_notify_hu_rep_descriptor_, &msg_mjaction_oper_after_notify_hu_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mjaction_descriptor_, &mjaction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_majiang_game_info_rep_descriptor_, &msg_majiang_game_info_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_majiang_start_rep_descriptor_, &msg_majiang_start_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_majiang_out_card_req_descriptor_, &msg_majiang_out_card_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_majiang_out_card_rep_descriptor_, &msg_majiang_out_card_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_majiang_send_card_rep_descriptor_, &msg_majiang_send_card_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_majiang_listen_card_rep_descriptor_, &msg_majiang_listen_card_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_majiang_oper_notify_rep_descriptor_, &msg_majiang_oper_notify_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_majiang_oper_card_req_descriptor_, &msg_majiang_oper_card_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_majiang_oper_result_rep_descriptor_, &msg_majiang_oper_result_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mjhu_info_descriptor_, &mjhu_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_majiang_game_over_rep_descriptor_, &msg_majiang_game_over_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_majiang_opening_hu_rep_descriptor_, &msg_majiang_opening_hu_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_majiang_flush_desk_cards_rep_descriptor_, &msg_majiang_flush_desk_cards_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_majiang_show_public_cards_rep_descriptor_, &msg_majiang_show_public_cards_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_majiang_change_hand_card_req_descriptor_, &msg_majiang_change_hand_card_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_majiang_get_hand_card_req_descriptor_, &msg_majiang_get_hand_card_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_majiang_get_hand_card_rep_descriptor_, &msg_majiang_get_hand_card_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_majiang_oper_trustee_req_descriptor_, &msg_majiang_oper_trustee_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_majiang_oper_trustee_rep_descriptor_, &msg_majiang_oper_trustee_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_majiang_oper_trustee_broadcast_descriptor_, &msg_majiang_oper_trustee_broadcast::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_majiang_5flogic_5fmsg_2eproto() {
  delete weave_item::default_instance_;
  delete weave_item_reflection_;
  delete mjaction_notify_hu::default_instance_;
  delete mjaction_notify_hu_reflection_;
  delete mjaction_out_after_notify_hu_req::default_instance_;
  delete mjaction_out_after_notify_hu_req_reflection_;
  delete mjaction_out_after_notify_hu_rep::default_instance_;
  delete mjaction_out_after_notify_hu_rep_reflection_;
  delete mjaction_out_front_notify_hu::default_instance_;
  delete mjaction_out_front_notify_hu_reflection_;
  delete msg_mjaction_oper_after_notify_hu_req::default_instance_;
  delete msg_mjaction_oper_after_notify_hu_req_reflection_;
  delete msg_mjaction_oper_after_notify_hu_rep::default_instance_;
  delete msg_mjaction_oper_after_notify_hu_rep_reflection_;
  delete mjaction::default_instance_;
  delete mjaction_reflection_;
  delete msg_majiang_game_info_rep::default_instance_;
  delete msg_majiang_game_info_rep_reflection_;
  delete msg_majiang_start_rep::default_instance_;
  delete msg_majiang_start_rep_reflection_;
  delete msg_majiang_out_card_req::default_instance_;
  delete msg_majiang_out_card_req_reflection_;
  delete msg_majiang_out_card_rep::default_instance_;
  delete msg_majiang_out_card_rep_reflection_;
  delete msg_majiang_send_card_rep::default_instance_;
  delete msg_majiang_send_card_rep_reflection_;
  delete msg_majiang_listen_card_rep::default_instance_;
  delete msg_majiang_listen_card_rep_reflection_;
  delete msg_majiang_oper_notify_rep::default_instance_;
  delete msg_majiang_oper_notify_rep_reflection_;
  delete msg_majiang_oper_card_req::default_instance_;
  delete msg_majiang_oper_card_req_reflection_;
  delete msg_majiang_oper_result_rep::default_instance_;
  delete msg_majiang_oper_result_rep_reflection_;
  delete mjhu_info::default_instance_;
  delete mjhu_info_reflection_;
  delete msg_majiang_game_over_rep::default_instance_;
  delete msg_majiang_game_over_rep_reflection_;
  delete msg_majiang_opening_hu_rep::default_instance_;
  delete msg_majiang_opening_hu_rep_reflection_;
  delete msg_majiang_flush_desk_cards_rep::default_instance_;
  delete msg_majiang_flush_desk_cards_rep_reflection_;
  delete msg_majiang_show_public_cards_rep::default_instance_;
  delete msg_majiang_show_public_cards_rep_reflection_;
  delete msg_majiang_change_hand_card_req::default_instance_;
  delete msg_majiang_change_hand_card_req_reflection_;
  delete msg_majiang_get_hand_card_req::default_instance_;
  delete msg_majiang_get_hand_card_req_reflection_;
  delete msg_majiang_get_hand_card_rep::default_instance_;
  delete msg_majiang_get_hand_card_rep_reflection_;
  delete msg_majiang_oper_trustee_req::default_instance_;
  delete msg_majiang_oper_trustee_req_reflection_;
  delete msg_majiang_oper_trustee_rep::default_instance_;
  delete msg_majiang_oper_trustee_rep_reflection_;
  delete msg_majiang_oper_trustee_broadcast::default_instance_;
  delete msg_majiang_oper_trustee_broadcast_reflection_;
}

void protobuf_AddDesc_majiang_5flogic_5fmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::net::protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  ::net::protobuf_AddDesc_error_5fcode_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027majiang_logic_msg.proto\022\003net\032\025base_msg"
    "_struct.proto\032\020error_code.proto\"`\n\nweave"
    "_item\022\022\n\nweave_kind\030\001 \001(\r\022\023\n\013center_card"
    "\030\002 \001(\r\022\023\n\013public_card\030\003 \001(\r\022\024\n\014provide_u"
    "ser\030\004 \001(\r\"@\n\022mjaction_notify_hu\022\014\n\004card\030"
    "\001 \003(\r\022\r\n\005score\030\002 \003(\r\022\r\n\005count\030\003 \003(\r\"3\n m"
    "jaction_out_after_notify_hu_req\022\017\n\007chair"
    "id\030\001 \003(\r\"j\n mjaction_out_after_notify_hu"
    "_rep\022\032\n\022last_out_card_user\030\001 \001(\r\022*\n\tnoti"
    "fy_hu\030\002 \003(\0132\027.net.mjaction_notify_hu\"\\\n\034"
    "mjaction_out_front_notify_hu\022\020\n\010out_card"
    "\030\001 \003(\r\022*\n\tnotify_hu\030\002 \003(\0132\027.net.mjaction"
    "_notify_hu\"\'\n%msg_mjaction_oper_after_no"
    "tify_hu_req\"s\n%msg_mjaction_oper_after_n"
    "otify_hu_rep\022\024\n\014oper_chairid\030\001 \001(\r\0224\n\tno"
    "tify_hu\030\002 \003(\0132!.net.mjaction_out_front_n"
    "otify_hu\"&\n\010mjaction\022\014\n\004code\030\001 \001(\r\022\014\n\004ca"
    "rd\030\002 \001(\r\"\302\004\n\031msg_majiang_game_info_rep\022\023"
    "\n\013banker_user\030\001 \001(\r\022\020\n\010cur_user\030\002 \001(\r\022\022\n"
    "\nturn_winer\030\003 \001(\r\022\026\n\016turn_card_data\030\004 \001("
    "\r\022\025\n\rdiscard_count\030\005 \003(\r\022\025\n\rdiscard_card"
    "s\030\006 \003(\r\022\023\n\013weave_count\030\007 \003(\r\022$\n\013weave_it"
    "ems\030\010 \003(\0132\017.net.weave_item\022\027\n\017hand_card_"
    "count\030\t \003(\r\022\026\n\016hand_card_data\030\n \003(\r\022\022\n\ng"
    "ame_state\030\013 \001(\r\022\021\n\twait_time\030\014 \001(\r\022\021\n\tcu"
    "r_round\030\r \001(\r\022\037\n\010cur_oper\030\016 \003(\0132\r.net.mj"
    "action\022\027\n\017left_card_count\030\017 \001(\r\022\026\n\016send_"
    "card_data\030\020 \001(\r\022\025\n\rlisten_states\030\021 \003(\r\022\023"
    "\n\013resume_user\030\022 \001(\r\022\013\n\003uid\030\023 \003(\r\022\017\n\007trus"
    "tee\030\024 \003(\r\0224\n\tnotify_hu\030\025 \003(\0132!.net.mjact"
    "ion_out_front_notify_hu\022\024\n\014passhu_count\030"
    "\026 \003(\005\022\026\n\016send_card_user\030\027 \001(\r\"\223\002\n\025msg_ma"
    "jiang_start_rep\022\022\n\nsice_count\030\001 \003(\r\022\023\n\013b"
    "anker_user\030\002 \001(\r\022\020\n\010cur_user\030\003 \001(\r\022\"\n\013us"
    "er_action\030\004 \003(\0132\r.net.mjaction\022\021\n\tcard_d"
    "ata\030\005 \003(\r\022\021\n\tcur_round\030\006 \001(\r\022\020\n\010card_num"
    "\030\007 \003(\r\022\027\n\017left_card_count\030\010 \001(\r\0224\n\tnotif"
    "y_hu\030\t \003(\0132!.net.mjaction_out_front_noti"
    "fy_hu\022\024\n\014passhu_count\030\n \003(\005\"-\n\030msg_majia"
    "ng_out_card_req\022\021\n\tcard_data\030\001 \001(\r\"~\n\030ms"
    "g_majiang_out_card_rep\022\025\n\rout_card_user\030"
    "\001 \001(\r\022\025\n\rout_card_data\030\002 \001(\r\0224\n\tnotify_h"
    "u\030\003 \003(\0132!.net.mjaction_out_front_notify_"
    "hu\"\360\001\n\031msg_majiang_send_card_rep\022\021\n\tcard"
    "_data\030\001 \001(\r\022\035\n\006action\030\002 \003(\0132\r.net.mjacti"
    "on\022\020\n\010cur_user\030\003 \001(\r\022\023\n\013is_not_gang\030\004 \001("
    "\r\022\027\n\017left_card_count\030\005 \001(\r\022\025\n\rcur_hand_c"
    "ard\030\006 \003(\r\0224\n\tnotify_hu\030\007 \001(\0132!.net.mjact"
    "ion_out_front_notify_hu\022\024\n\014passhu_count\030"
    "\010 \003(\005\"2\n\033msg_majiang_listen_card_rep\022\023\n\013"
    "listen_user\030\001 \001(\r\"y\n\033msg_majiang_oper_no"
    "tify_rep\022\023\n\013resume_user\030\001 \001(\r\022\035\n\006action\030"
    "\002 \003(\0132\r.net.mjaction\022\020\n\010cur_user\030\003 \001(\r\022\024"
    "\n\014passhu_count\030\004 \003(\005\"A\n\031msg_majiang_oper"
    "_card_req\022\021\n\toper_code\030\001 \001(\r\022\021\n\toper_car"
    "d\030\002 \001(\r\"\261\001\n\033msg_majiang_oper_result_rep\022"
    "\021\n\toper_user\030\001 \001(\r\022\024\n\014provide_user\030\002 \001(\r"
    "\022\035\n\006action\030\003 \001(\0132\r.net.mjaction\0224\n\tnotif"
    "y_hu\030\004 \003(\0132!.net.mjaction_out_front_noti"
    "fy_hu\022\024\n\014passhu_count\030\005 \003(\005\"\321\001\n\tmjhu_inf"
    "o\022\017\n\007open_hu\030\001 \003(\r\022\017\n\007hu_kind\030\002 \003(\r\022\020\n\010h"
    "u_score\030\003 \003(\r\022\020\n\010hu_right\030\004 \003(\r\022\020\n\010hit_b"
    "ird\030\005 \003(\r\022\r\n\005score\030\006 \001(\005\022\017\n\007hu_card\030\007 \001("
    "\r\022\022\n\ncard_datas\030\010 \003(\r\022$\n\013weave_items\030\t \003"
    "(\0132\017.net.weave_item\022\022\n\nbird_score\030\n \001(\r\""
    "\267\001\n\031msg_majiang_game_over_rep\022\024\n\014provide"
    "_user\030\001 \001(\r\022\023\n\013chi_hu_card\030\002 \001(\r\022 \n\010hu_i"
    "nfos\030\003 \003(\0132\016.net.mjhu_info\022\020\n\010end_type\030\004"
    " \001(\r\022\023\n\013banker_user\030\005 \001(\r\022\020\n\010all_bird\030\006 "
    "\003(\r\022\024\n\014passhu_count\030\007 \003(\005\"V\n\032msg_majiang"
    "_opening_hu_rep\022\020\n\010chair_id\030\001 \001(\r\022\023\n\013min"
    "_hu_type\030\002 \003(\r\022\021\n\tcard_data\030\003 \003(\r\"\257\002\n ms"
    "g_majiang_flush_desk_cards_rep\022\026\n\016turn_c"
    "ard_data\030\001 \001(\r\022\025\n\rdiscard_count\030\002 \003(\r\022\025\n"
    "\rdiscard_cards\030\003 \003(\r\022\023\n\013weave_count\030\004 \003("
    "\r\022$\n\013weave_items\030\005 \003(\0132\017.net.weave_item\022"
    "\027\n\017hand_card_count\030\006 \003(\r\022\026\n\016hand_card_da"
    "ta\030\007 \003(\r\022\027\n\017left_card_count\030\010 \001(\r\022\026\n\016sen"
    "d_card_data\030\t \001(\r\022\020\n\010cur_user\030\n \001(\r\022\026\n\016s"
    "end_card_user\030\013 \001(\r\"v\n!msg_majiang_show_"
    "public_cards_rep\022\021\n\tshow_user\030\001 \001(\r\022\021\n\ts"
    "how_type\030\002 \001(\r\022\022\n\nshow_cards\030\003 \003(\r\022\027\n\017le"
    "ft_card_count\030\004 \001(\r\"L\n msg_majiang_chang"
    "e_hand_card_req\022\023\n\013change_user\030\001 \001(\r\022\023\n\013"
    "change_card\030\002 \003(\r\"-\n\035msg_majiang_get_han"
    "d_card_req\022\014\n\004user\030\001 \001(\r\"P\n\035msg_majiang_"
    "get_hand_card_rep\022\026\n\016hand_card_data\030\001 \003("
    "\r\022\027\n\017left_card_count\030\002 \001(\r\"/\n\034msg_majian"
    "g_oper_trustee_req\022\017\n\007trustee\030\001 \001(\r\"\?\n\034m"
    "sg_majiang_oper_trustee_rep\022\017\n\007trustee\030\001"
    " \001(\r\022\016\n\006result\030\002 \001(\r\"B\n\"msg_majiang_oper"
    "_trustee_broadcast\022\013\n\003uid\030\001 \001(\r\022\017\n\007trust"
    "ee\030\002 \001(\r", 3688);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "majiang_logic_msg.proto", &protobuf_RegisterTypes);
  weave_item::default_instance_ = new weave_item();
  mjaction_notify_hu::default_instance_ = new mjaction_notify_hu();
  mjaction_out_after_notify_hu_req::default_instance_ = new mjaction_out_after_notify_hu_req();
  mjaction_out_after_notify_hu_rep::default_instance_ = new mjaction_out_after_notify_hu_rep();
  mjaction_out_front_notify_hu::default_instance_ = new mjaction_out_front_notify_hu();
  msg_mjaction_oper_after_notify_hu_req::default_instance_ = new msg_mjaction_oper_after_notify_hu_req();
  msg_mjaction_oper_after_notify_hu_rep::default_instance_ = new msg_mjaction_oper_after_notify_hu_rep();
  mjaction::default_instance_ = new mjaction();
  msg_majiang_game_info_rep::default_instance_ = new msg_majiang_game_info_rep();
  msg_majiang_start_rep::default_instance_ = new msg_majiang_start_rep();
  msg_majiang_out_card_req::default_instance_ = new msg_majiang_out_card_req();
  msg_majiang_out_card_rep::default_instance_ = new msg_majiang_out_card_rep();
  msg_majiang_send_card_rep::default_instance_ = new msg_majiang_send_card_rep();
  msg_majiang_listen_card_rep::default_instance_ = new msg_majiang_listen_card_rep();
  msg_majiang_oper_notify_rep::default_instance_ = new msg_majiang_oper_notify_rep();
  msg_majiang_oper_card_req::default_instance_ = new msg_majiang_oper_card_req();
  msg_majiang_oper_result_rep::default_instance_ = new msg_majiang_oper_result_rep();
  mjhu_info::default_instance_ = new mjhu_info();
  msg_majiang_game_over_rep::default_instance_ = new msg_majiang_game_over_rep();
  msg_majiang_opening_hu_rep::default_instance_ = new msg_majiang_opening_hu_rep();
  msg_majiang_flush_desk_cards_rep::default_instance_ = new msg_majiang_flush_desk_cards_rep();
  msg_majiang_show_public_cards_rep::default_instance_ = new msg_majiang_show_public_cards_rep();
  msg_majiang_change_hand_card_req::default_instance_ = new msg_majiang_change_hand_card_req();
  msg_majiang_get_hand_card_req::default_instance_ = new msg_majiang_get_hand_card_req();
  msg_majiang_get_hand_card_rep::default_instance_ = new msg_majiang_get_hand_card_rep();
  msg_majiang_oper_trustee_req::default_instance_ = new msg_majiang_oper_trustee_req();
  msg_majiang_oper_trustee_rep::default_instance_ = new msg_majiang_oper_trustee_rep();
  msg_majiang_oper_trustee_broadcast::default_instance_ = new msg_majiang_oper_trustee_broadcast();
  weave_item::default_instance_->InitAsDefaultInstance();
  mjaction_notify_hu::default_instance_->InitAsDefaultInstance();
  mjaction_out_after_notify_hu_req::default_instance_->InitAsDefaultInstance();
  mjaction_out_after_notify_hu_rep::default_instance_->InitAsDefaultInstance();
  mjaction_out_front_notify_hu::default_instance_->InitAsDefaultInstance();
  msg_mjaction_oper_after_notify_hu_req::default_instance_->InitAsDefaultInstance();
  msg_mjaction_oper_after_notify_hu_rep::default_instance_->InitAsDefaultInstance();
  mjaction::default_instance_->InitAsDefaultInstance();
  msg_majiang_game_info_rep::default_instance_->InitAsDefaultInstance();
  msg_majiang_start_rep::default_instance_->InitAsDefaultInstance();
  msg_majiang_out_card_req::default_instance_->InitAsDefaultInstance();
  msg_majiang_out_card_rep::default_instance_->InitAsDefaultInstance();
  msg_majiang_send_card_rep::default_instance_->InitAsDefaultInstance();
  msg_majiang_listen_card_rep::default_instance_->InitAsDefaultInstance();
  msg_majiang_oper_notify_rep::default_instance_->InitAsDefaultInstance();
  msg_majiang_oper_card_req::default_instance_->InitAsDefaultInstance();
  msg_majiang_oper_result_rep::default_instance_->InitAsDefaultInstance();
  mjhu_info::default_instance_->InitAsDefaultInstance();
  msg_majiang_game_over_rep::default_instance_->InitAsDefaultInstance();
  msg_majiang_opening_hu_rep::default_instance_->InitAsDefaultInstance();
  msg_majiang_flush_desk_cards_rep::default_instance_->InitAsDefaultInstance();
  msg_majiang_show_public_cards_rep::default_instance_->InitAsDefaultInstance();
  msg_majiang_change_hand_card_req::default_instance_->InitAsDefaultInstance();
  msg_majiang_get_hand_card_req::default_instance_->InitAsDefaultInstance();
  msg_majiang_get_hand_card_rep::default_instance_->InitAsDefaultInstance();
  msg_majiang_oper_trustee_req::default_instance_->InitAsDefaultInstance();
  msg_majiang_oper_trustee_rep::default_instance_->InitAsDefaultInstance();
  msg_majiang_oper_trustee_broadcast::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_majiang_5flogic_5fmsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_majiang_5flogic_5fmsg_2eproto {
  StaticDescriptorInitializer_majiang_5flogic_5fmsg_2eproto() {
    protobuf_AddDesc_majiang_5flogic_5fmsg_2eproto();
  }
} static_descriptor_initializer_majiang_5flogic_5fmsg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int weave_item::kWeaveKindFieldNumber;
const int weave_item::kCenterCardFieldNumber;
const int weave_item::kPublicCardFieldNumber;
const int weave_item::kProvideUserFieldNumber;
#endif  // !_MSC_VER

weave_item::weave_item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void weave_item::InitAsDefaultInstance() {
}

weave_item::weave_item(const weave_item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void weave_item::SharedCtor() {
  _cached_size_ = 0;
  weave_kind_ = 0u;
  center_card_ = 0u;
  public_card_ = 0u;
  provide_user_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

weave_item::~weave_item() {
  SharedDtor();
}

void weave_item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void weave_item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* weave_item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return weave_item_descriptor_;
}

const weave_item& weave_item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

weave_item* weave_item::default_instance_ = NULL;

weave_item* weave_item::New() const {
  return new weave_item;
}

void weave_item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    weave_kind_ = 0u;
    center_card_ = 0u;
    public_card_ = 0u;
    provide_user_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool weave_item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 weave_kind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weave_kind_)));
          set_has_weave_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_center_card;
        break;
      }

      // optional uint32 center_card = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_center_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &center_card_)));
          set_has_center_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_public_card;
        break;
      }

      // optional uint32 public_card = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_public_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &public_card_)));
          set_has_public_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_provide_user;
        break;
      }

      // optional uint32 provide_user = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_provide_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &provide_user_)));
          set_has_provide_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void weave_item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 weave_kind = 1;
  if (has_weave_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->weave_kind(), output);
  }

  // optional uint32 center_card = 2;
  if (has_center_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->center_card(), output);
  }

  // optional uint32 public_card = 3;
  if (has_public_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->public_card(), output);
  }

  // optional uint32 provide_user = 4;
  if (has_provide_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->provide_user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* weave_item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 weave_kind = 1;
  if (has_weave_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->weave_kind(), target);
  }

  // optional uint32 center_card = 2;
  if (has_center_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->center_card(), target);
  }

  // optional uint32 public_card = 3;
  if (has_public_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->public_card(), target);
  }

  // optional uint32 provide_user = 4;
  if (has_provide_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->provide_user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int weave_item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 weave_kind = 1;
    if (has_weave_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weave_kind());
    }

    // optional uint32 center_card = 2;
    if (has_center_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->center_card());
    }

    // optional uint32 public_card = 3;
    if (has_public_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->public_card());
    }

    // optional uint32 provide_user = 4;
    if (has_provide_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->provide_user());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void weave_item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const weave_item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const weave_item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void weave_item::MergeFrom(const weave_item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weave_kind()) {
      set_weave_kind(from.weave_kind());
    }
    if (from.has_center_card()) {
      set_center_card(from.center_card());
    }
    if (from.has_public_card()) {
      set_public_card(from.public_card());
    }
    if (from.has_provide_user()) {
      set_provide_user(from.provide_user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void weave_item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void weave_item::CopyFrom(const weave_item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool weave_item::IsInitialized() const {

  return true;
}

void weave_item::Swap(weave_item* other) {
  if (other != this) {
    std::swap(weave_kind_, other->weave_kind_);
    std::swap(center_card_, other->center_card_);
    std::swap(public_card_, other->public_card_);
    std::swap(provide_user_, other->provide_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata weave_item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = weave_item_descriptor_;
  metadata.reflection = weave_item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mjaction_notify_hu::kCardFieldNumber;
const int mjaction_notify_hu::kScoreFieldNumber;
const int mjaction_notify_hu::kCountFieldNumber;
#endif  // !_MSC_VER

mjaction_notify_hu::mjaction_notify_hu()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mjaction_notify_hu::InitAsDefaultInstance() {
}

mjaction_notify_hu::mjaction_notify_hu(const mjaction_notify_hu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mjaction_notify_hu::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mjaction_notify_hu::~mjaction_notify_hu() {
  SharedDtor();
}

void mjaction_notify_hu::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mjaction_notify_hu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mjaction_notify_hu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mjaction_notify_hu_descriptor_;
}

const mjaction_notify_hu& mjaction_notify_hu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

mjaction_notify_hu* mjaction_notify_hu::default_instance_ = NULL;

mjaction_notify_hu* mjaction_notify_hu::New() const {
  return new mjaction_notify_hu;
}

void mjaction_notify_hu::Clear() {
  card_.Clear();
  score_.Clear();
  count_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mjaction_notify_hu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 card = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_card())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_card;
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // repeated uint32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // repeated uint32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mjaction_notify_hu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 card = 1;
  for (int i = 0; i < this->card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->card(i), output);
  }

  // repeated uint32 score = 2;
  for (int i = 0; i < this->score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->score(i), output);
  }

  // repeated uint32 count = 3;
  for (int i = 0; i < this->count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->count(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mjaction_notify_hu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 card = 1;
  for (int i = 0; i < this->card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->card(i), target);
  }

  // repeated uint32 score = 2;
  for (int i = 0; i < this->score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->score(i), target);
  }

  // repeated uint32 count = 3;
  for (int i = 0; i < this->count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->count(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mjaction_notify_hu::ByteSize() const {
  int total_size = 0;

  // repeated uint32 card = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->card(i));
    }
    total_size += 1 * this->card_size() + data_size;
  }

  // repeated uint32 score = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->score(i));
    }
    total_size += 1 * this->score_size() + data_size;
  }

  // repeated uint32 count = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->count(i));
    }
    total_size += 1 * this->count_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mjaction_notify_hu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mjaction_notify_hu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mjaction_notify_hu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mjaction_notify_hu::MergeFrom(const mjaction_notify_hu& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_.MergeFrom(from.card_);
  score_.MergeFrom(from.score_);
  count_.MergeFrom(from.count_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mjaction_notify_hu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mjaction_notify_hu::CopyFrom(const mjaction_notify_hu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mjaction_notify_hu::IsInitialized() const {

  return true;
}

void mjaction_notify_hu::Swap(mjaction_notify_hu* other) {
  if (other != this) {
    card_.Swap(&other->card_);
    score_.Swap(&other->score_);
    count_.Swap(&other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mjaction_notify_hu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mjaction_notify_hu_descriptor_;
  metadata.reflection = mjaction_notify_hu_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mjaction_out_after_notify_hu_req::kChairidFieldNumber;
#endif  // !_MSC_VER

mjaction_out_after_notify_hu_req::mjaction_out_after_notify_hu_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mjaction_out_after_notify_hu_req::InitAsDefaultInstance() {
}

mjaction_out_after_notify_hu_req::mjaction_out_after_notify_hu_req(const mjaction_out_after_notify_hu_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mjaction_out_after_notify_hu_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mjaction_out_after_notify_hu_req::~mjaction_out_after_notify_hu_req() {
  SharedDtor();
}

void mjaction_out_after_notify_hu_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mjaction_out_after_notify_hu_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mjaction_out_after_notify_hu_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mjaction_out_after_notify_hu_req_descriptor_;
}

const mjaction_out_after_notify_hu_req& mjaction_out_after_notify_hu_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

mjaction_out_after_notify_hu_req* mjaction_out_after_notify_hu_req::default_instance_ = NULL;

mjaction_out_after_notify_hu_req* mjaction_out_after_notify_hu_req::New() const {
  return new mjaction_out_after_notify_hu_req;
}

void mjaction_out_after_notify_hu_req::Clear() {
  chairid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mjaction_out_after_notify_hu_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 chairid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chairid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_chairid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_chairid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_chairid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mjaction_out_after_notify_hu_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 chairid = 1;
  for (int i = 0; i < this->chairid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->chairid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mjaction_out_after_notify_hu_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 chairid = 1;
  for (int i = 0; i < this->chairid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->chairid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mjaction_out_after_notify_hu_req::ByteSize() const {
  int total_size = 0;

  // repeated uint32 chairid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->chairid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->chairid(i));
    }
    total_size += 1 * this->chairid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mjaction_out_after_notify_hu_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mjaction_out_after_notify_hu_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mjaction_out_after_notify_hu_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mjaction_out_after_notify_hu_req::MergeFrom(const mjaction_out_after_notify_hu_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  chairid_.MergeFrom(from.chairid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mjaction_out_after_notify_hu_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mjaction_out_after_notify_hu_req::CopyFrom(const mjaction_out_after_notify_hu_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mjaction_out_after_notify_hu_req::IsInitialized() const {

  return true;
}

void mjaction_out_after_notify_hu_req::Swap(mjaction_out_after_notify_hu_req* other) {
  if (other != this) {
    chairid_.Swap(&other->chairid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mjaction_out_after_notify_hu_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mjaction_out_after_notify_hu_req_descriptor_;
  metadata.reflection = mjaction_out_after_notify_hu_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mjaction_out_after_notify_hu_rep::kLastOutCardUserFieldNumber;
const int mjaction_out_after_notify_hu_rep::kNotifyHuFieldNumber;
#endif  // !_MSC_VER

mjaction_out_after_notify_hu_rep::mjaction_out_after_notify_hu_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mjaction_out_after_notify_hu_rep::InitAsDefaultInstance() {
}

mjaction_out_after_notify_hu_rep::mjaction_out_after_notify_hu_rep(const mjaction_out_after_notify_hu_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mjaction_out_after_notify_hu_rep::SharedCtor() {
  _cached_size_ = 0;
  last_out_card_user_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mjaction_out_after_notify_hu_rep::~mjaction_out_after_notify_hu_rep() {
  SharedDtor();
}

void mjaction_out_after_notify_hu_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mjaction_out_after_notify_hu_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mjaction_out_after_notify_hu_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mjaction_out_after_notify_hu_rep_descriptor_;
}

const mjaction_out_after_notify_hu_rep& mjaction_out_after_notify_hu_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

mjaction_out_after_notify_hu_rep* mjaction_out_after_notify_hu_rep::default_instance_ = NULL;

mjaction_out_after_notify_hu_rep* mjaction_out_after_notify_hu_rep::New() const {
  return new mjaction_out_after_notify_hu_rep;
}

void mjaction_out_after_notify_hu_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    last_out_card_user_ = 0u;
  }
  notify_hu_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mjaction_out_after_notify_hu_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 last_out_card_user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_out_card_user_)));
          set_has_last_out_card_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_notify_hu;
        break;
      }

      // repeated .net.mjaction_notify_hu notify_hu = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notify_hu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_notify_hu()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_notify_hu;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mjaction_out_after_notify_hu_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 last_out_card_user = 1;
  if (has_last_out_card_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->last_out_card_user(), output);
  }

  // repeated .net.mjaction_notify_hu notify_hu = 2;
  for (int i = 0; i < this->notify_hu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->notify_hu(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mjaction_out_after_notify_hu_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 last_out_card_user = 1;
  if (has_last_out_card_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->last_out_card_user(), target);
  }

  // repeated .net.mjaction_notify_hu notify_hu = 2;
  for (int i = 0; i < this->notify_hu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->notify_hu(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mjaction_out_after_notify_hu_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 last_out_card_user = 1;
    if (has_last_out_card_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_out_card_user());
    }

  }
  // repeated .net.mjaction_notify_hu notify_hu = 2;
  total_size += 1 * this->notify_hu_size();
  for (int i = 0; i < this->notify_hu_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->notify_hu(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mjaction_out_after_notify_hu_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mjaction_out_after_notify_hu_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mjaction_out_after_notify_hu_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mjaction_out_after_notify_hu_rep::MergeFrom(const mjaction_out_after_notify_hu_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  notify_hu_.MergeFrom(from.notify_hu_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_out_card_user()) {
      set_last_out_card_user(from.last_out_card_user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mjaction_out_after_notify_hu_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mjaction_out_after_notify_hu_rep::CopyFrom(const mjaction_out_after_notify_hu_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mjaction_out_after_notify_hu_rep::IsInitialized() const {

  return true;
}

void mjaction_out_after_notify_hu_rep::Swap(mjaction_out_after_notify_hu_rep* other) {
  if (other != this) {
    std::swap(last_out_card_user_, other->last_out_card_user_);
    notify_hu_.Swap(&other->notify_hu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mjaction_out_after_notify_hu_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mjaction_out_after_notify_hu_rep_descriptor_;
  metadata.reflection = mjaction_out_after_notify_hu_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mjaction_out_front_notify_hu::kOutCardFieldNumber;
const int mjaction_out_front_notify_hu::kNotifyHuFieldNumber;
#endif  // !_MSC_VER

mjaction_out_front_notify_hu::mjaction_out_front_notify_hu()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mjaction_out_front_notify_hu::InitAsDefaultInstance() {
}

mjaction_out_front_notify_hu::mjaction_out_front_notify_hu(const mjaction_out_front_notify_hu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mjaction_out_front_notify_hu::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mjaction_out_front_notify_hu::~mjaction_out_front_notify_hu() {
  SharedDtor();
}

void mjaction_out_front_notify_hu::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mjaction_out_front_notify_hu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mjaction_out_front_notify_hu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mjaction_out_front_notify_hu_descriptor_;
}

const mjaction_out_front_notify_hu& mjaction_out_front_notify_hu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

mjaction_out_front_notify_hu* mjaction_out_front_notify_hu::default_instance_ = NULL;

mjaction_out_front_notify_hu* mjaction_out_front_notify_hu::New() const {
  return new mjaction_out_front_notify_hu;
}

void mjaction_out_front_notify_hu::Clear() {
  out_card_.Clear();
  notify_hu_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mjaction_out_front_notify_hu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 out_card = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_out_card())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_out_card())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_out_card;
        if (input->ExpectTag(18)) goto parse_notify_hu;
        break;
      }

      // repeated .net.mjaction_notify_hu notify_hu = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notify_hu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_notify_hu()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_notify_hu;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mjaction_out_front_notify_hu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 out_card = 1;
  for (int i = 0; i < this->out_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->out_card(i), output);
  }

  // repeated .net.mjaction_notify_hu notify_hu = 2;
  for (int i = 0; i < this->notify_hu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->notify_hu(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mjaction_out_front_notify_hu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 out_card = 1;
  for (int i = 0; i < this->out_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->out_card(i), target);
  }

  // repeated .net.mjaction_notify_hu notify_hu = 2;
  for (int i = 0; i < this->notify_hu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->notify_hu(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mjaction_out_front_notify_hu::ByteSize() const {
  int total_size = 0;

  // repeated uint32 out_card = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->out_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->out_card(i));
    }
    total_size += 1 * this->out_card_size() + data_size;
  }

  // repeated .net.mjaction_notify_hu notify_hu = 2;
  total_size += 1 * this->notify_hu_size();
  for (int i = 0; i < this->notify_hu_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->notify_hu(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mjaction_out_front_notify_hu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mjaction_out_front_notify_hu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mjaction_out_front_notify_hu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mjaction_out_front_notify_hu::MergeFrom(const mjaction_out_front_notify_hu& from) {
  GOOGLE_CHECK_NE(&from, this);
  out_card_.MergeFrom(from.out_card_);
  notify_hu_.MergeFrom(from.notify_hu_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mjaction_out_front_notify_hu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mjaction_out_front_notify_hu::CopyFrom(const mjaction_out_front_notify_hu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mjaction_out_front_notify_hu::IsInitialized() const {

  return true;
}

void mjaction_out_front_notify_hu::Swap(mjaction_out_front_notify_hu* other) {
  if (other != this) {
    out_card_.Swap(&other->out_card_);
    notify_hu_.Swap(&other->notify_hu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mjaction_out_front_notify_hu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mjaction_out_front_notify_hu_descriptor_;
  metadata.reflection = mjaction_out_front_notify_hu_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

msg_mjaction_oper_after_notify_hu_req::msg_mjaction_oper_after_notify_hu_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_mjaction_oper_after_notify_hu_req::InitAsDefaultInstance() {
}

msg_mjaction_oper_after_notify_hu_req::msg_mjaction_oper_after_notify_hu_req(const msg_mjaction_oper_after_notify_hu_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_mjaction_oper_after_notify_hu_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_mjaction_oper_after_notify_hu_req::~msg_mjaction_oper_after_notify_hu_req() {
  SharedDtor();
}

void msg_mjaction_oper_after_notify_hu_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_mjaction_oper_after_notify_hu_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_mjaction_oper_after_notify_hu_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_mjaction_oper_after_notify_hu_req_descriptor_;
}

const msg_mjaction_oper_after_notify_hu_req& msg_mjaction_oper_after_notify_hu_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_mjaction_oper_after_notify_hu_req* msg_mjaction_oper_after_notify_hu_req::default_instance_ = NULL;

msg_mjaction_oper_after_notify_hu_req* msg_mjaction_oper_after_notify_hu_req::New() const {
  return new msg_mjaction_oper_after_notify_hu_req;
}

void msg_mjaction_oper_after_notify_hu_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_mjaction_oper_after_notify_hu_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void msg_mjaction_oper_after_notify_hu_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_mjaction_oper_after_notify_hu_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_mjaction_oper_after_notify_hu_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_mjaction_oper_after_notify_hu_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_mjaction_oper_after_notify_hu_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_mjaction_oper_after_notify_hu_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_mjaction_oper_after_notify_hu_req::MergeFrom(const msg_mjaction_oper_after_notify_hu_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_mjaction_oper_after_notify_hu_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_mjaction_oper_after_notify_hu_req::CopyFrom(const msg_mjaction_oper_after_notify_hu_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_mjaction_oper_after_notify_hu_req::IsInitialized() const {

  return true;
}

void msg_mjaction_oper_after_notify_hu_req::Swap(msg_mjaction_oper_after_notify_hu_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_mjaction_oper_after_notify_hu_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_mjaction_oper_after_notify_hu_req_descriptor_;
  metadata.reflection = msg_mjaction_oper_after_notify_hu_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_mjaction_oper_after_notify_hu_rep::kOperChairidFieldNumber;
const int msg_mjaction_oper_after_notify_hu_rep::kNotifyHuFieldNumber;
#endif  // !_MSC_VER

msg_mjaction_oper_after_notify_hu_rep::msg_mjaction_oper_after_notify_hu_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_mjaction_oper_after_notify_hu_rep::InitAsDefaultInstance() {
}

msg_mjaction_oper_after_notify_hu_rep::msg_mjaction_oper_after_notify_hu_rep(const msg_mjaction_oper_after_notify_hu_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_mjaction_oper_after_notify_hu_rep::SharedCtor() {
  _cached_size_ = 0;
  oper_chairid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_mjaction_oper_after_notify_hu_rep::~msg_mjaction_oper_after_notify_hu_rep() {
  SharedDtor();
}

void msg_mjaction_oper_after_notify_hu_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_mjaction_oper_after_notify_hu_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_mjaction_oper_after_notify_hu_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_mjaction_oper_after_notify_hu_rep_descriptor_;
}

const msg_mjaction_oper_after_notify_hu_rep& msg_mjaction_oper_after_notify_hu_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_mjaction_oper_after_notify_hu_rep* msg_mjaction_oper_after_notify_hu_rep::default_instance_ = NULL;

msg_mjaction_oper_after_notify_hu_rep* msg_mjaction_oper_after_notify_hu_rep::New() const {
  return new msg_mjaction_oper_after_notify_hu_rep;
}

void msg_mjaction_oper_after_notify_hu_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oper_chairid_ = 0u;
  }
  notify_hu_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_mjaction_oper_after_notify_hu_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 oper_chairid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oper_chairid_)));
          set_has_oper_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_notify_hu;
        break;
      }

      // repeated .net.mjaction_out_front_notify_hu notify_hu = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notify_hu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_notify_hu()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_notify_hu;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_mjaction_oper_after_notify_hu_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 oper_chairid = 1;
  if (has_oper_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->oper_chairid(), output);
  }

  // repeated .net.mjaction_out_front_notify_hu notify_hu = 2;
  for (int i = 0; i < this->notify_hu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->notify_hu(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_mjaction_oper_after_notify_hu_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 oper_chairid = 1;
  if (has_oper_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->oper_chairid(), target);
  }

  // repeated .net.mjaction_out_front_notify_hu notify_hu = 2;
  for (int i = 0; i < this->notify_hu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->notify_hu(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_mjaction_oper_after_notify_hu_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 oper_chairid = 1;
    if (has_oper_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oper_chairid());
    }

  }
  // repeated .net.mjaction_out_front_notify_hu notify_hu = 2;
  total_size += 1 * this->notify_hu_size();
  for (int i = 0; i < this->notify_hu_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->notify_hu(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_mjaction_oper_after_notify_hu_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_mjaction_oper_after_notify_hu_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_mjaction_oper_after_notify_hu_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_mjaction_oper_after_notify_hu_rep::MergeFrom(const msg_mjaction_oper_after_notify_hu_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  notify_hu_.MergeFrom(from.notify_hu_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_oper_chairid()) {
      set_oper_chairid(from.oper_chairid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_mjaction_oper_after_notify_hu_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_mjaction_oper_after_notify_hu_rep::CopyFrom(const msg_mjaction_oper_after_notify_hu_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_mjaction_oper_after_notify_hu_rep::IsInitialized() const {

  return true;
}

void msg_mjaction_oper_after_notify_hu_rep::Swap(msg_mjaction_oper_after_notify_hu_rep* other) {
  if (other != this) {
    std::swap(oper_chairid_, other->oper_chairid_);
    notify_hu_.Swap(&other->notify_hu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_mjaction_oper_after_notify_hu_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_mjaction_oper_after_notify_hu_rep_descriptor_;
  metadata.reflection = msg_mjaction_oper_after_notify_hu_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mjaction::kCodeFieldNumber;
const int mjaction::kCardFieldNumber;
#endif  // !_MSC_VER

mjaction::mjaction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mjaction::InitAsDefaultInstance() {
}

mjaction::mjaction(const mjaction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mjaction::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0u;
  card_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mjaction::~mjaction() {
  SharedDtor();
}

void mjaction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mjaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mjaction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mjaction_descriptor_;
}

const mjaction& mjaction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

mjaction* mjaction::default_instance_ = NULL;

mjaction* mjaction::New() const {
  return new mjaction;
}

void mjaction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0u;
    card_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mjaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_card;
        break;
      }

      // optional uint32 card = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mjaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->code(), output);
  }

  // optional uint32 card = 2;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->card(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mjaction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->code(), target);
  }

  // optional uint32 card = 2;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->card(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mjaction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->code());
    }

    // optional uint32 card = 2;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mjaction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mjaction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mjaction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mjaction::MergeFrom(const mjaction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_card()) {
      set_card(from.card());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mjaction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mjaction::CopyFrom(const mjaction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mjaction::IsInitialized() const {

  return true;
}

void mjaction::Swap(mjaction* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(card_, other->card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mjaction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mjaction_descriptor_;
  metadata.reflection = mjaction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_majiang_game_info_rep::kBankerUserFieldNumber;
const int msg_majiang_game_info_rep::kCurUserFieldNumber;
const int msg_majiang_game_info_rep::kTurnWinerFieldNumber;
const int msg_majiang_game_info_rep::kTurnCardDataFieldNumber;
const int msg_majiang_game_info_rep::kDiscardCountFieldNumber;
const int msg_majiang_game_info_rep::kDiscardCardsFieldNumber;
const int msg_majiang_game_info_rep::kWeaveCountFieldNumber;
const int msg_majiang_game_info_rep::kWeaveItemsFieldNumber;
const int msg_majiang_game_info_rep::kHandCardCountFieldNumber;
const int msg_majiang_game_info_rep::kHandCardDataFieldNumber;
const int msg_majiang_game_info_rep::kGameStateFieldNumber;
const int msg_majiang_game_info_rep::kWaitTimeFieldNumber;
const int msg_majiang_game_info_rep::kCurRoundFieldNumber;
const int msg_majiang_game_info_rep::kCurOperFieldNumber;
const int msg_majiang_game_info_rep::kLeftCardCountFieldNumber;
const int msg_majiang_game_info_rep::kSendCardDataFieldNumber;
const int msg_majiang_game_info_rep::kListenStatesFieldNumber;
const int msg_majiang_game_info_rep::kResumeUserFieldNumber;
const int msg_majiang_game_info_rep::kUidFieldNumber;
const int msg_majiang_game_info_rep::kTrusteeFieldNumber;
const int msg_majiang_game_info_rep::kNotifyHuFieldNumber;
const int msg_majiang_game_info_rep::kPasshuCountFieldNumber;
const int msg_majiang_game_info_rep::kSendCardUserFieldNumber;
#endif  // !_MSC_VER

msg_majiang_game_info_rep::msg_majiang_game_info_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_majiang_game_info_rep::InitAsDefaultInstance() {
}

msg_majiang_game_info_rep::msg_majiang_game_info_rep(const msg_majiang_game_info_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_majiang_game_info_rep::SharedCtor() {
  _cached_size_ = 0;
  banker_user_ = 0u;
  cur_user_ = 0u;
  turn_winer_ = 0u;
  turn_card_data_ = 0u;
  game_state_ = 0u;
  wait_time_ = 0u;
  cur_round_ = 0u;
  left_card_count_ = 0u;
  send_card_data_ = 0u;
  resume_user_ = 0u;
  send_card_user_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_majiang_game_info_rep::~msg_majiang_game_info_rep() {
  SharedDtor();
}

void msg_majiang_game_info_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_majiang_game_info_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_majiang_game_info_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_majiang_game_info_rep_descriptor_;
}

const msg_majiang_game_info_rep& msg_majiang_game_info_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_majiang_game_info_rep* msg_majiang_game_info_rep::default_instance_ = NULL;

msg_majiang_game_info_rep* msg_majiang_game_info_rep::New() const {
  return new msg_majiang_game_info_rep;
}

void msg_majiang_game_info_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    banker_user_ = 0u;
    cur_user_ = 0u;
    turn_winer_ = 0u;
    turn_card_data_ = 0u;
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    game_state_ = 0u;
    wait_time_ = 0u;
    cur_round_ = 0u;
    left_card_count_ = 0u;
    send_card_data_ = 0u;
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    resume_user_ = 0u;
    send_card_user_ = 0u;
  }
  discard_count_.Clear();
  discard_cards_.Clear();
  weave_count_.Clear();
  weave_items_.Clear();
  hand_card_count_.Clear();
  hand_card_data_.Clear();
  cur_oper_.Clear();
  listen_states_.Clear();
  uid_.Clear();
  trustee_.Clear();
  notify_hu_.Clear();
  passhu_count_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_majiang_game_info_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 banker_user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &banker_user_)));
          set_has_banker_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_user;
        break;
      }

      // optional uint32 cur_user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_user_)));
          set_has_cur_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_turn_winer;
        break;
      }

      // optional uint32 turn_winer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turn_winer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &turn_winer_)));
          set_has_turn_winer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_turn_card_data;
        break;
      }

      // optional uint32 turn_card_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turn_card_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &turn_card_data_)));
          set_has_turn_card_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_discard_count;
        break;
      }

      // repeated uint32 discard_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_discard_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_discard_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_discard_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_discard_count;
        if (input->ExpectTag(48)) goto parse_discard_cards;
        break;
      }

      // repeated uint32 discard_cards = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_discard_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_discard_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_discard_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_discard_cards;
        if (input->ExpectTag(56)) goto parse_weave_count;
        break;
      }

      // repeated uint32 weave_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weave_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_weave_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_weave_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_weave_count;
        if (input->ExpectTag(66)) goto parse_weave_items;
        break;
      }

      // repeated .net.weave_item weave_items = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weave_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weave_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_weave_items;
        if (input->ExpectTag(72)) goto parse_hand_card_count;
        break;
      }

      // repeated uint32 hand_card_count = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hand_card_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72, input, this->mutable_hand_card_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hand_card_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_hand_card_count;
        if (input->ExpectTag(80)) goto parse_hand_card_data;
        break;
      }

      // repeated uint32 hand_card_data = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hand_card_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80, input, this->mutable_hand_card_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hand_card_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_hand_card_data;
        if (input->ExpectTag(88)) goto parse_game_state;
        break;
      }

      // optional uint32 game_state = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_state_)));
          set_has_game_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_wait_time;
        break;
      }

      // optional uint32 wait_time = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wait_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wait_time_)));
          set_has_wait_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_cur_round;
        break;
      }

      // optional uint32 cur_round = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_round_)));
          set_has_cur_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_cur_oper;
        break;
      }

      // repeated .net.mjaction cur_oper = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cur_oper:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cur_oper()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_cur_oper;
        if (input->ExpectTag(120)) goto parse_left_card_count;
        break;
      }

      // optional uint32 left_card_count = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_card_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_card_count_)));
          set_has_left_card_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_send_card_data;
        break;
      }

      // optional uint32 send_card_data = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_card_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_card_data_)));
          set_has_send_card_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_listen_states;
        break;
      }

      // repeated uint32 listen_states = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_listen_states:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 136, input, this->mutable_listen_states())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_listen_states())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_listen_states;
        if (input->ExpectTag(144)) goto parse_resume_user;
        break;
      }

      // optional uint32 resume_user = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resume_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resume_user_)));
          set_has_resume_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_uid;
        break;
      }

      // repeated uint32 uid = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 152, input, this->mutable_uid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_uid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_uid;
        if (input->ExpectTag(160)) goto parse_trustee;
        break;
      }

      // repeated uint32 trustee = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trustee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 160, input, this->mutable_trustee())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_trustee())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_trustee;
        if (input->ExpectTag(170)) goto parse_notify_hu;
        break;
      }

      // repeated .net.mjaction_out_front_notify_hu notify_hu = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notify_hu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_notify_hu()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_notify_hu;
        if (input->ExpectTag(176)) goto parse_passhu_count;
        break;
      }

      // repeated int32 passhu_count = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_passhu_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 176, input, this->mutable_passhu_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_passhu_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_passhu_count;
        if (input->ExpectTag(184)) goto parse_send_card_user;
        break;
      }

      // optional uint32 send_card_user = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_card_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_card_user_)));
          set_has_send_card_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_majiang_game_info_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 banker_user = 1;
  if (has_banker_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->banker_user(), output);
  }

  // optional uint32 cur_user = 2;
  if (has_cur_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cur_user(), output);
  }

  // optional uint32 turn_winer = 3;
  if (has_turn_winer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->turn_winer(), output);
  }

  // optional uint32 turn_card_data = 4;
  if (has_turn_card_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->turn_card_data(), output);
  }

  // repeated uint32 discard_count = 5;
  for (int i = 0; i < this->discard_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->discard_count(i), output);
  }

  // repeated uint32 discard_cards = 6;
  for (int i = 0; i < this->discard_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->discard_cards(i), output);
  }

  // repeated uint32 weave_count = 7;
  for (int i = 0; i < this->weave_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->weave_count(i), output);
  }

  // repeated .net.weave_item weave_items = 8;
  for (int i = 0; i < this->weave_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->weave_items(i), output);
  }

  // repeated uint32 hand_card_count = 9;
  for (int i = 0; i < this->hand_card_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->hand_card_count(i), output);
  }

  // repeated uint32 hand_card_data = 10;
  for (int i = 0; i < this->hand_card_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->hand_card_data(i), output);
  }

  // optional uint32 game_state = 11;
  if (has_game_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->game_state(), output);
  }

  // optional uint32 wait_time = 12;
  if (has_wait_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->wait_time(), output);
  }

  // optional uint32 cur_round = 13;
  if (has_cur_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->cur_round(), output);
  }

  // repeated .net.mjaction cur_oper = 14;
  for (int i = 0; i < this->cur_oper_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->cur_oper(i), output);
  }

  // optional uint32 left_card_count = 15;
  if (has_left_card_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->left_card_count(), output);
  }

  // optional uint32 send_card_data = 16;
  if (has_send_card_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->send_card_data(), output);
  }

  // repeated uint32 listen_states = 17;
  for (int i = 0; i < this->listen_states_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      17, this->listen_states(i), output);
  }

  // optional uint32 resume_user = 18;
  if (has_resume_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->resume_user(), output);
  }

  // repeated uint32 uid = 19;
  for (int i = 0; i < this->uid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      19, this->uid(i), output);
  }

  // repeated uint32 trustee = 20;
  for (int i = 0; i < this->trustee_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      20, this->trustee(i), output);
  }

  // repeated .net.mjaction_out_front_notify_hu notify_hu = 21;
  for (int i = 0; i < this->notify_hu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->notify_hu(i), output);
  }

  // repeated int32 passhu_count = 22;
  for (int i = 0; i < this->passhu_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      22, this->passhu_count(i), output);
  }

  // optional uint32 send_card_user = 23;
  if (has_send_card_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->send_card_user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_majiang_game_info_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 banker_user = 1;
  if (has_banker_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->banker_user(), target);
  }

  // optional uint32 cur_user = 2;
  if (has_cur_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cur_user(), target);
  }

  // optional uint32 turn_winer = 3;
  if (has_turn_winer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->turn_winer(), target);
  }

  // optional uint32 turn_card_data = 4;
  if (has_turn_card_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->turn_card_data(), target);
  }

  // repeated uint32 discard_count = 5;
  for (int i = 0; i < this->discard_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->discard_count(i), target);
  }

  // repeated uint32 discard_cards = 6;
  for (int i = 0; i < this->discard_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->discard_cards(i), target);
  }

  // repeated uint32 weave_count = 7;
  for (int i = 0; i < this->weave_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->weave_count(i), target);
  }

  // repeated .net.weave_item weave_items = 8;
  for (int i = 0; i < this->weave_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->weave_items(i), target);
  }

  // repeated uint32 hand_card_count = 9;
  for (int i = 0; i < this->hand_card_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(9, this->hand_card_count(i), target);
  }

  // repeated uint32 hand_card_data = 10;
  for (int i = 0; i < this->hand_card_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(10, this->hand_card_data(i), target);
  }

  // optional uint32 game_state = 11;
  if (has_game_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->game_state(), target);
  }

  // optional uint32 wait_time = 12;
  if (has_wait_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->wait_time(), target);
  }

  // optional uint32 cur_round = 13;
  if (has_cur_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->cur_round(), target);
  }

  // repeated .net.mjaction cur_oper = 14;
  for (int i = 0; i < this->cur_oper_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->cur_oper(i), target);
  }

  // optional uint32 left_card_count = 15;
  if (has_left_card_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->left_card_count(), target);
  }

  // optional uint32 send_card_data = 16;
  if (has_send_card_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->send_card_data(), target);
  }

  // repeated uint32 listen_states = 17;
  for (int i = 0; i < this->listen_states_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(17, this->listen_states(i), target);
  }

  // optional uint32 resume_user = 18;
  if (has_resume_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->resume_user(), target);
  }

  // repeated uint32 uid = 19;
  for (int i = 0; i < this->uid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(19, this->uid(i), target);
  }

  // repeated uint32 trustee = 20;
  for (int i = 0; i < this->trustee_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(20, this->trustee(i), target);
  }

  // repeated .net.mjaction_out_front_notify_hu notify_hu = 21;
  for (int i = 0; i < this->notify_hu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->notify_hu(i), target);
  }

  // repeated int32 passhu_count = 22;
  for (int i = 0; i < this->passhu_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(22, this->passhu_count(i), target);
  }

  // optional uint32 send_card_user = 23;
  if (has_send_card_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->send_card_user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_majiang_game_info_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 banker_user = 1;
    if (has_banker_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->banker_user());
    }

    // optional uint32 cur_user = 2;
    if (has_cur_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_user());
    }

    // optional uint32 turn_winer = 3;
    if (has_turn_winer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->turn_winer());
    }

    // optional uint32 turn_card_data = 4;
    if (has_turn_card_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->turn_card_data());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional uint32 game_state = 11;
    if (has_game_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_state());
    }

    // optional uint32 wait_time = 12;
    if (has_wait_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wait_time());
    }

    // optional uint32 cur_round = 13;
    if (has_cur_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_round());
    }

    // optional uint32 left_card_count = 15;
    if (has_left_card_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->left_card_count());
    }

    // optional uint32 send_card_data = 16;
    if (has_send_card_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->send_card_data());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional uint32 resume_user = 18;
    if (has_resume_user()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resume_user());
    }

    // optional uint32 send_card_user = 23;
    if (has_send_card_user()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->send_card_user());
    }

  }
  // repeated uint32 discard_count = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->discard_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->discard_count(i));
    }
    total_size += 1 * this->discard_count_size() + data_size;
  }

  // repeated uint32 discard_cards = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->discard_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->discard_cards(i));
    }
    total_size += 1 * this->discard_cards_size() + data_size;
  }

  // repeated uint32 weave_count = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->weave_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->weave_count(i));
    }
    total_size += 1 * this->weave_count_size() + data_size;
  }

  // repeated .net.weave_item weave_items = 8;
  total_size += 1 * this->weave_items_size();
  for (int i = 0; i < this->weave_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->weave_items(i));
  }

  // repeated uint32 hand_card_count = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->hand_card_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hand_card_count(i));
    }
    total_size += 1 * this->hand_card_count_size() + data_size;
  }

  // repeated uint32 hand_card_data = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->hand_card_data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hand_card_data(i));
    }
    total_size += 1 * this->hand_card_data_size() + data_size;
  }

  // repeated .net.mjaction cur_oper = 14;
  total_size += 1 * this->cur_oper_size();
  for (int i = 0; i < this->cur_oper_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cur_oper(i));
  }

  // repeated uint32 listen_states = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->listen_states_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->listen_states(i));
    }
    total_size += 2 * this->listen_states_size() + data_size;
  }

  // repeated uint32 uid = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->uid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->uid(i));
    }
    total_size += 2 * this->uid_size() + data_size;
  }

  // repeated uint32 trustee = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->trustee_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->trustee(i));
    }
    total_size += 2 * this->trustee_size() + data_size;
  }

  // repeated .net.mjaction_out_front_notify_hu notify_hu = 21;
  total_size += 2 * this->notify_hu_size();
  for (int i = 0; i < this->notify_hu_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->notify_hu(i));
  }

  // repeated int32 passhu_count = 22;
  {
    int data_size = 0;
    for (int i = 0; i < this->passhu_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->passhu_count(i));
    }
    total_size += 2 * this->passhu_count_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_majiang_game_info_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_majiang_game_info_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_majiang_game_info_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_majiang_game_info_rep::MergeFrom(const msg_majiang_game_info_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  discard_count_.MergeFrom(from.discard_count_);
  discard_cards_.MergeFrom(from.discard_cards_);
  weave_count_.MergeFrom(from.weave_count_);
  weave_items_.MergeFrom(from.weave_items_);
  hand_card_count_.MergeFrom(from.hand_card_count_);
  hand_card_data_.MergeFrom(from.hand_card_data_);
  cur_oper_.MergeFrom(from.cur_oper_);
  listen_states_.MergeFrom(from.listen_states_);
  uid_.MergeFrom(from.uid_);
  trustee_.MergeFrom(from.trustee_);
  notify_hu_.MergeFrom(from.notify_hu_);
  passhu_count_.MergeFrom(from.passhu_count_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_banker_user()) {
      set_banker_user(from.banker_user());
    }
    if (from.has_cur_user()) {
      set_cur_user(from.cur_user());
    }
    if (from.has_turn_winer()) {
      set_turn_winer(from.turn_winer());
    }
    if (from.has_turn_card_data()) {
      set_turn_card_data(from.turn_card_data());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_game_state()) {
      set_game_state(from.game_state());
    }
    if (from.has_wait_time()) {
      set_wait_time(from.wait_time());
    }
    if (from.has_cur_round()) {
      set_cur_round(from.cur_round());
    }
    if (from.has_left_card_count()) {
      set_left_card_count(from.left_card_count());
    }
    if (from.has_send_card_data()) {
      set_send_card_data(from.send_card_data());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_resume_user()) {
      set_resume_user(from.resume_user());
    }
    if (from.has_send_card_user()) {
      set_send_card_user(from.send_card_user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_majiang_game_info_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_majiang_game_info_rep::CopyFrom(const msg_majiang_game_info_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_majiang_game_info_rep::IsInitialized() const {

  return true;
}

void msg_majiang_game_info_rep::Swap(msg_majiang_game_info_rep* other) {
  if (other != this) {
    std::swap(banker_user_, other->banker_user_);
    std::swap(cur_user_, other->cur_user_);
    std::swap(turn_winer_, other->turn_winer_);
    std::swap(turn_card_data_, other->turn_card_data_);
    discard_count_.Swap(&other->discard_count_);
    discard_cards_.Swap(&other->discard_cards_);
    weave_count_.Swap(&other->weave_count_);
    weave_items_.Swap(&other->weave_items_);
    hand_card_count_.Swap(&other->hand_card_count_);
    hand_card_data_.Swap(&other->hand_card_data_);
    std::swap(game_state_, other->game_state_);
    std::swap(wait_time_, other->wait_time_);
    std::swap(cur_round_, other->cur_round_);
    cur_oper_.Swap(&other->cur_oper_);
    std::swap(left_card_count_, other->left_card_count_);
    std::swap(send_card_data_, other->send_card_data_);
    listen_states_.Swap(&other->listen_states_);
    std::swap(resume_user_, other->resume_user_);
    uid_.Swap(&other->uid_);
    trustee_.Swap(&other->trustee_);
    notify_hu_.Swap(&other->notify_hu_);
    passhu_count_.Swap(&other->passhu_count_);
    std::swap(send_card_user_, other->send_card_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_majiang_game_info_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_majiang_game_info_rep_descriptor_;
  metadata.reflection = msg_majiang_game_info_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_majiang_start_rep::kSiceCountFieldNumber;
const int msg_majiang_start_rep::kBankerUserFieldNumber;
const int msg_majiang_start_rep::kCurUserFieldNumber;
const int msg_majiang_start_rep::kUserActionFieldNumber;
const int msg_majiang_start_rep::kCardDataFieldNumber;
const int msg_majiang_start_rep::kCurRoundFieldNumber;
const int msg_majiang_start_rep::kCardNumFieldNumber;
const int msg_majiang_start_rep::kLeftCardCountFieldNumber;
const int msg_majiang_start_rep::kNotifyHuFieldNumber;
const int msg_majiang_start_rep::kPasshuCountFieldNumber;
#endif  // !_MSC_VER

msg_majiang_start_rep::msg_majiang_start_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_majiang_start_rep::InitAsDefaultInstance() {
}

msg_majiang_start_rep::msg_majiang_start_rep(const msg_majiang_start_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_majiang_start_rep::SharedCtor() {
  _cached_size_ = 0;
  banker_user_ = 0u;
  cur_user_ = 0u;
  cur_round_ = 0u;
  left_card_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_majiang_start_rep::~msg_majiang_start_rep() {
  SharedDtor();
}

void msg_majiang_start_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_majiang_start_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_majiang_start_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_majiang_start_rep_descriptor_;
}

const msg_majiang_start_rep& msg_majiang_start_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_majiang_start_rep* msg_majiang_start_rep::default_instance_ = NULL;

msg_majiang_start_rep* msg_majiang_start_rep::New() const {
  return new msg_majiang_start_rep;
}

void msg_majiang_start_rep::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    banker_user_ = 0u;
    cur_user_ = 0u;
    cur_round_ = 0u;
    left_card_count_ = 0u;
  }
  sice_count_.Clear();
  user_action_.Clear();
  card_data_.Clear();
  card_num_.Clear();
  notify_hu_.Clear();
  passhu_count_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_majiang_start_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 sice_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sice_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_sice_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_sice_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_sice_count;
        if (input->ExpectTag(16)) goto parse_banker_user;
        break;
      }

      // optional uint32 banker_user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &banker_user_)));
          set_has_banker_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_user;
        break;
      }

      // optional uint32 cur_user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_user_)));
          set_has_cur_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user_action;
        break;
      }

      // repeated .net.mjaction user_action = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_action()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user_action;
        if (input->ExpectTag(40)) goto parse_card_data;
        break;
      }

      // repeated uint32 card_data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_card_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_card_data;
        if (input->ExpectTag(48)) goto parse_cur_round;
        break;
      }

      // optional uint32 cur_round = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_round_)));
          set_has_cur_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_card_num;
        break;
      }

      // repeated uint32 card_num = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_card_num())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_num())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_card_num;
        if (input->ExpectTag(64)) goto parse_left_card_count;
        break;
      }

      // optional uint32 left_card_count = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_card_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_card_count_)));
          set_has_left_card_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_notify_hu;
        break;
      }

      // repeated .net.mjaction_out_front_notify_hu notify_hu = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notify_hu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_notify_hu()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_notify_hu;
        if (input->ExpectTag(80)) goto parse_passhu_count;
        break;
      }

      // repeated int32 passhu_count = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_passhu_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_passhu_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_passhu_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_passhu_count;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_majiang_start_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 sice_count = 1;
  for (int i = 0; i < this->sice_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->sice_count(i), output);
  }

  // optional uint32 banker_user = 2;
  if (has_banker_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->banker_user(), output);
  }

  // optional uint32 cur_user = 3;
  if (has_cur_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cur_user(), output);
  }

  // repeated .net.mjaction user_action = 4;
  for (int i = 0; i < this->user_action_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->user_action(i), output);
  }

  // repeated uint32 card_data = 5;
  for (int i = 0; i < this->card_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->card_data(i), output);
  }

  // optional uint32 cur_round = 6;
  if (has_cur_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->cur_round(), output);
  }

  // repeated uint32 card_num = 7;
  for (int i = 0; i < this->card_num_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->card_num(i), output);
  }

  // optional uint32 left_card_count = 8;
  if (has_left_card_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->left_card_count(), output);
  }

  // repeated .net.mjaction_out_front_notify_hu notify_hu = 9;
  for (int i = 0; i < this->notify_hu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->notify_hu(i), output);
  }

  // repeated int32 passhu_count = 10;
  for (int i = 0; i < this->passhu_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->passhu_count(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_majiang_start_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 sice_count = 1;
  for (int i = 0; i < this->sice_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->sice_count(i), target);
  }

  // optional uint32 banker_user = 2;
  if (has_banker_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->banker_user(), target);
  }

  // optional uint32 cur_user = 3;
  if (has_cur_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cur_user(), target);
  }

  // repeated .net.mjaction user_action = 4;
  for (int i = 0; i < this->user_action_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->user_action(i), target);
  }

  // repeated uint32 card_data = 5;
  for (int i = 0; i < this->card_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->card_data(i), target);
  }

  // optional uint32 cur_round = 6;
  if (has_cur_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->cur_round(), target);
  }

  // repeated uint32 card_num = 7;
  for (int i = 0; i < this->card_num_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->card_num(i), target);
  }

  // optional uint32 left_card_count = 8;
  if (has_left_card_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->left_card_count(), target);
  }

  // repeated .net.mjaction_out_front_notify_hu notify_hu = 9;
  for (int i = 0; i < this->notify_hu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->notify_hu(i), target);
  }

  // repeated int32 passhu_count = 10;
  for (int i = 0; i < this->passhu_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->passhu_count(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_majiang_start_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 banker_user = 2;
    if (has_banker_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->banker_user());
    }

    // optional uint32 cur_user = 3;
    if (has_cur_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_user());
    }

    // optional uint32 cur_round = 6;
    if (has_cur_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_round());
    }

    // optional uint32 left_card_count = 8;
    if (has_left_card_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->left_card_count());
    }

  }
  // repeated uint32 sice_count = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->sice_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->sice_count(i));
    }
    total_size += 1 * this->sice_count_size() + data_size;
  }

  // repeated .net.mjaction user_action = 4;
  total_size += 1 * this->user_action_size();
  for (int i = 0; i < this->user_action_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_action(i));
  }

  // repeated uint32 card_data = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->card_data(i));
    }
    total_size += 1 * this->card_data_size() + data_size;
  }

  // repeated uint32 card_num = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_num_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->card_num(i));
    }
    total_size += 1 * this->card_num_size() + data_size;
  }

  // repeated .net.mjaction_out_front_notify_hu notify_hu = 9;
  total_size += 1 * this->notify_hu_size();
  for (int i = 0; i < this->notify_hu_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->notify_hu(i));
  }

  // repeated int32 passhu_count = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->passhu_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->passhu_count(i));
    }
    total_size += 1 * this->passhu_count_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_majiang_start_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_majiang_start_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_majiang_start_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_majiang_start_rep::MergeFrom(const msg_majiang_start_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  sice_count_.MergeFrom(from.sice_count_);
  user_action_.MergeFrom(from.user_action_);
  card_data_.MergeFrom(from.card_data_);
  card_num_.MergeFrom(from.card_num_);
  notify_hu_.MergeFrom(from.notify_hu_);
  passhu_count_.MergeFrom(from.passhu_count_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_banker_user()) {
      set_banker_user(from.banker_user());
    }
    if (from.has_cur_user()) {
      set_cur_user(from.cur_user());
    }
    if (from.has_cur_round()) {
      set_cur_round(from.cur_round());
    }
    if (from.has_left_card_count()) {
      set_left_card_count(from.left_card_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_majiang_start_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_majiang_start_rep::CopyFrom(const msg_majiang_start_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_majiang_start_rep::IsInitialized() const {

  return true;
}

void msg_majiang_start_rep::Swap(msg_majiang_start_rep* other) {
  if (other != this) {
    sice_count_.Swap(&other->sice_count_);
    std::swap(banker_user_, other->banker_user_);
    std::swap(cur_user_, other->cur_user_);
    user_action_.Swap(&other->user_action_);
    card_data_.Swap(&other->card_data_);
    std::swap(cur_round_, other->cur_round_);
    card_num_.Swap(&other->card_num_);
    std::swap(left_card_count_, other->left_card_count_);
    notify_hu_.Swap(&other->notify_hu_);
    passhu_count_.Swap(&other->passhu_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_majiang_start_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_majiang_start_rep_descriptor_;
  metadata.reflection = msg_majiang_start_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_majiang_out_card_req::kCardDataFieldNumber;
#endif  // !_MSC_VER

msg_majiang_out_card_req::msg_majiang_out_card_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_majiang_out_card_req::InitAsDefaultInstance() {
}

msg_majiang_out_card_req::msg_majiang_out_card_req(const msg_majiang_out_card_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_majiang_out_card_req::SharedCtor() {
  _cached_size_ = 0;
  card_data_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_majiang_out_card_req::~msg_majiang_out_card_req() {
  SharedDtor();
}

void msg_majiang_out_card_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_majiang_out_card_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_majiang_out_card_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_majiang_out_card_req_descriptor_;
}

const msg_majiang_out_card_req& msg_majiang_out_card_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_majiang_out_card_req* msg_majiang_out_card_req::default_instance_ = NULL;

msg_majiang_out_card_req* msg_majiang_out_card_req::New() const {
  return new msg_majiang_out_card_req;
}

void msg_majiang_out_card_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    card_data_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_majiang_out_card_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 card_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_data_)));
          set_has_card_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_majiang_out_card_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 card_data = 1;
  if (has_card_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->card_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_majiang_out_card_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 card_data = 1;
  if (has_card_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->card_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_majiang_out_card_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 card_data = 1;
    if (has_card_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_majiang_out_card_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_majiang_out_card_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_majiang_out_card_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_majiang_out_card_req::MergeFrom(const msg_majiang_out_card_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card_data()) {
      set_card_data(from.card_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_majiang_out_card_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_majiang_out_card_req::CopyFrom(const msg_majiang_out_card_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_majiang_out_card_req::IsInitialized() const {

  return true;
}

void msg_majiang_out_card_req::Swap(msg_majiang_out_card_req* other) {
  if (other != this) {
    std::swap(card_data_, other->card_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_majiang_out_card_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_majiang_out_card_req_descriptor_;
  metadata.reflection = msg_majiang_out_card_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_majiang_out_card_rep::kOutCardUserFieldNumber;
const int msg_majiang_out_card_rep::kOutCardDataFieldNumber;
const int msg_majiang_out_card_rep::kNotifyHuFieldNumber;
#endif  // !_MSC_VER

msg_majiang_out_card_rep::msg_majiang_out_card_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_majiang_out_card_rep::InitAsDefaultInstance() {
}

msg_majiang_out_card_rep::msg_majiang_out_card_rep(const msg_majiang_out_card_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_majiang_out_card_rep::SharedCtor() {
  _cached_size_ = 0;
  out_card_user_ = 0u;
  out_card_data_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_majiang_out_card_rep::~msg_majiang_out_card_rep() {
  SharedDtor();
}

void msg_majiang_out_card_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_majiang_out_card_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_majiang_out_card_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_majiang_out_card_rep_descriptor_;
}

const msg_majiang_out_card_rep& msg_majiang_out_card_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_majiang_out_card_rep* msg_majiang_out_card_rep::default_instance_ = NULL;

msg_majiang_out_card_rep* msg_majiang_out_card_rep::New() const {
  return new msg_majiang_out_card_rep;
}

void msg_majiang_out_card_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    out_card_user_ = 0u;
    out_card_data_ = 0u;
  }
  notify_hu_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_majiang_out_card_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 out_card_user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_card_user_)));
          set_has_out_card_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_out_card_data;
        break;
      }

      // optional uint32 out_card_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_card_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_card_data_)));
          set_has_out_card_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_notify_hu;
        break;
      }

      // repeated .net.mjaction_out_front_notify_hu notify_hu = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notify_hu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_notify_hu()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_notify_hu;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_majiang_out_card_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 out_card_user = 1;
  if (has_out_card_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->out_card_user(), output);
  }

  // optional uint32 out_card_data = 2;
  if (has_out_card_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->out_card_data(), output);
  }

  // repeated .net.mjaction_out_front_notify_hu notify_hu = 3;
  for (int i = 0; i < this->notify_hu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->notify_hu(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_majiang_out_card_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 out_card_user = 1;
  if (has_out_card_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->out_card_user(), target);
  }

  // optional uint32 out_card_data = 2;
  if (has_out_card_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->out_card_data(), target);
  }

  // repeated .net.mjaction_out_front_notify_hu notify_hu = 3;
  for (int i = 0; i < this->notify_hu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->notify_hu(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_majiang_out_card_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 out_card_user = 1;
    if (has_out_card_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->out_card_user());
    }

    // optional uint32 out_card_data = 2;
    if (has_out_card_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->out_card_data());
    }

  }
  // repeated .net.mjaction_out_front_notify_hu notify_hu = 3;
  total_size += 1 * this->notify_hu_size();
  for (int i = 0; i < this->notify_hu_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->notify_hu(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_majiang_out_card_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_majiang_out_card_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_majiang_out_card_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_majiang_out_card_rep::MergeFrom(const msg_majiang_out_card_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  notify_hu_.MergeFrom(from.notify_hu_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_out_card_user()) {
      set_out_card_user(from.out_card_user());
    }
    if (from.has_out_card_data()) {
      set_out_card_data(from.out_card_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_majiang_out_card_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_majiang_out_card_rep::CopyFrom(const msg_majiang_out_card_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_majiang_out_card_rep::IsInitialized() const {

  return true;
}

void msg_majiang_out_card_rep::Swap(msg_majiang_out_card_rep* other) {
  if (other != this) {
    std::swap(out_card_user_, other->out_card_user_);
    std::swap(out_card_data_, other->out_card_data_);
    notify_hu_.Swap(&other->notify_hu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_majiang_out_card_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_majiang_out_card_rep_descriptor_;
  metadata.reflection = msg_majiang_out_card_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_majiang_send_card_rep::kCardDataFieldNumber;
const int msg_majiang_send_card_rep::kActionFieldNumber;
const int msg_majiang_send_card_rep::kCurUserFieldNumber;
const int msg_majiang_send_card_rep::kIsNotGangFieldNumber;
const int msg_majiang_send_card_rep::kLeftCardCountFieldNumber;
const int msg_majiang_send_card_rep::kCurHandCardFieldNumber;
const int msg_majiang_send_card_rep::kNotifyHuFieldNumber;
const int msg_majiang_send_card_rep::kPasshuCountFieldNumber;
#endif  // !_MSC_VER

msg_majiang_send_card_rep::msg_majiang_send_card_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_majiang_send_card_rep::InitAsDefaultInstance() {
  notify_hu_ = const_cast< ::net::mjaction_out_front_notify_hu*>(&::net::mjaction_out_front_notify_hu::default_instance());
}

msg_majiang_send_card_rep::msg_majiang_send_card_rep(const msg_majiang_send_card_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_majiang_send_card_rep::SharedCtor() {
  _cached_size_ = 0;
  card_data_ = 0u;
  cur_user_ = 0u;
  is_not_gang_ = 0u;
  left_card_count_ = 0u;
  notify_hu_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_majiang_send_card_rep::~msg_majiang_send_card_rep() {
  SharedDtor();
}

void msg_majiang_send_card_rep::SharedDtor() {
  if (this != default_instance_) {
    delete notify_hu_;
  }
}

void msg_majiang_send_card_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_majiang_send_card_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_majiang_send_card_rep_descriptor_;
}

const msg_majiang_send_card_rep& msg_majiang_send_card_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_majiang_send_card_rep* msg_majiang_send_card_rep::default_instance_ = NULL;

msg_majiang_send_card_rep* msg_majiang_send_card_rep::New() const {
  return new msg_majiang_send_card_rep;
}

void msg_majiang_send_card_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    card_data_ = 0u;
    cur_user_ = 0u;
    is_not_gang_ = 0u;
    left_card_count_ = 0u;
    if (has_notify_hu()) {
      if (notify_hu_ != NULL) notify_hu_->::net::mjaction_out_front_notify_hu::Clear();
    }
  }
  action_.Clear();
  cur_hand_card_.Clear();
  passhu_count_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_majiang_send_card_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 card_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_data_)));
          set_has_card_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_action;
        break;
      }

      // repeated .net.mjaction action = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_action()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_action;
        if (input->ExpectTag(24)) goto parse_cur_user;
        break;
      }

      // optional uint32 cur_user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_user_)));
          set_has_cur_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_not_gang;
        break;
      }

      // optional uint32 is_not_gang = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_not_gang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_not_gang_)));
          set_has_is_not_gang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_left_card_count;
        break;
      }

      // optional uint32 left_card_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_card_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_card_count_)));
          set_has_left_card_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cur_hand_card;
        break;
      }

      // repeated uint32 cur_hand_card = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_hand_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_cur_hand_card())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cur_hand_card())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cur_hand_card;
        if (input->ExpectTag(58)) goto parse_notify_hu;
        break;
      }

      // optional .net.mjaction_out_front_notify_hu notify_hu = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notify_hu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notify_hu()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_passhu_count;
        break;
      }

      // repeated int32 passhu_count = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_passhu_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_passhu_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_passhu_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_passhu_count;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_majiang_send_card_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 card_data = 1;
  if (has_card_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->card_data(), output);
  }

  // repeated .net.mjaction action = 2;
  for (int i = 0; i < this->action_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->action(i), output);
  }

  // optional uint32 cur_user = 3;
  if (has_cur_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cur_user(), output);
  }

  // optional uint32 is_not_gang = 4;
  if (has_is_not_gang()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->is_not_gang(), output);
  }

  // optional uint32 left_card_count = 5;
  if (has_left_card_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->left_card_count(), output);
  }

  // repeated uint32 cur_hand_card = 6;
  for (int i = 0; i < this->cur_hand_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->cur_hand_card(i), output);
  }

  // optional .net.mjaction_out_front_notify_hu notify_hu = 7;
  if (has_notify_hu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->notify_hu(), output);
  }

  // repeated int32 passhu_count = 8;
  for (int i = 0; i < this->passhu_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->passhu_count(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_majiang_send_card_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 card_data = 1;
  if (has_card_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->card_data(), target);
  }

  // repeated .net.mjaction action = 2;
  for (int i = 0; i < this->action_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->action(i), target);
  }

  // optional uint32 cur_user = 3;
  if (has_cur_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cur_user(), target);
  }

  // optional uint32 is_not_gang = 4;
  if (has_is_not_gang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->is_not_gang(), target);
  }

  // optional uint32 left_card_count = 5;
  if (has_left_card_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->left_card_count(), target);
  }

  // repeated uint32 cur_hand_card = 6;
  for (int i = 0; i < this->cur_hand_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->cur_hand_card(i), target);
  }

  // optional .net.mjaction_out_front_notify_hu notify_hu = 7;
  if (has_notify_hu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->notify_hu(), target);
  }

  // repeated int32 passhu_count = 8;
  for (int i = 0; i < this->passhu_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->passhu_count(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_majiang_send_card_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 card_data = 1;
    if (has_card_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card_data());
    }

    // optional uint32 cur_user = 3;
    if (has_cur_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_user());
    }

    // optional uint32 is_not_gang = 4;
    if (has_is_not_gang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_not_gang());
    }

    // optional uint32 left_card_count = 5;
    if (has_left_card_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->left_card_count());
    }

    // optional .net.mjaction_out_front_notify_hu notify_hu = 7;
    if (has_notify_hu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->notify_hu());
    }

  }
  // repeated .net.mjaction action = 2;
  total_size += 1 * this->action_size();
  for (int i = 0; i < this->action_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->action(i));
  }

  // repeated uint32 cur_hand_card = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->cur_hand_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cur_hand_card(i));
    }
    total_size += 1 * this->cur_hand_card_size() + data_size;
  }

  // repeated int32 passhu_count = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->passhu_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->passhu_count(i));
    }
    total_size += 1 * this->passhu_count_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_majiang_send_card_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_majiang_send_card_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_majiang_send_card_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_majiang_send_card_rep::MergeFrom(const msg_majiang_send_card_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  action_.MergeFrom(from.action_);
  cur_hand_card_.MergeFrom(from.cur_hand_card_);
  passhu_count_.MergeFrom(from.passhu_count_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card_data()) {
      set_card_data(from.card_data());
    }
    if (from.has_cur_user()) {
      set_cur_user(from.cur_user());
    }
    if (from.has_is_not_gang()) {
      set_is_not_gang(from.is_not_gang());
    }
    if (from.has_left_card_count()) {
      set_left_card_count(from.left_card_count());
    }
    if (from.has_notify_hu()) {
      mutable_notify_hu()->::net::mjaction_out_front_notify_hu::MergeFrom(from.notify_hu());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_majiang_send_card_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_majiang_send_card_rep::CopyFrom(const msg_majiang_send_card_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_majiang_send_card_rep::IsInitialized() const {

  return true;
}

void msg_majiang_send_card_rep::Swap(msg_majiang_send_card_rep* other) {
  if (other != this) {
    std::swap(card_data_, other->card_data_);
    action_.Swap(&other->action_);
    std::swap(cur_user_, other->cur_user_);
    std::swap(is_not_gang_, other->is_not_gang_);
    std::swap(left_card_count_, other->left_card_count_);
    cur_hand_card_.Swap(&other->cur_hand_card_);
    std::swap(notify_hu_, other->notify_hu_);
    passhu_count_.Swap(&other->passhu_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_majiang_send_card_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_majiang_send_card_rep_descriptor_;
  metadata.reflection = msg_majiang_send_card_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_majiang_listen_card_rep::kListenUserFieldNumber;
#endif  // !_MSC_VER

msg_majiang_listen_card_rep::msg_majiang_listen_card_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_majiang_listen_card_rep::InitAsDefaultInstance() {
}

msg_majiang_listen_card_rep::msg_majiang_listen_card_rep(const msg_majiang_listen_card_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_majiang_listen_card_rep::SharedCtor() {
  _cached_size_ = 0;
  listen_user_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_majiang_listen_card_rep::~msg_majiang_listen_card_rep() {
  SharedDtor();
}

void msg_majiang_listen_card_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_majiang_listen_card_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_majiang_listen_card_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_majiang_listen_card_rep_descriptor_;
}

const msg_majiang_listen_card_rep& msg_majiang_listen_card_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_majiang_listen_card_rep* msg_majiang_listen_card_rep::default_instance_ = NULL;

msg_majiang_listen_card_rep* msg_majiang_listen_card_rep::New() const {
  return new msg_majiang_listen_card_rep;
}

void msg_majiang_listen_card_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    listen_user_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_majiang_listen_card_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 listen_user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &listen_user_)));
          set_has_listen_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_majiang_listen_card_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 listen_user = 1;
  if (has_listen_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->listen_user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_majiang_listen_card_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 listen_user = 1;
  if (has_listen_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->listen_user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_majiang_listen_card_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 listen_user = 1;
    if (has_listen_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->listen_user());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_majiang_listen_card_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_majiang_listen_card_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_majiang_listen_card_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_majiang_listen_card_rep::MergeFrom(const msg_majiang_listen_card_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_listen_user()) {
      set_listen_user(from.listen_user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_majiang_listen_card_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_majiang_listen_card_rep::CopyFrom(const msg_majiang_listen_card_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_majiang_listen_card_rep::IsInitialized() const {

  return true;
}

void msg_majiang_listen_card_rep::Swap(msg_majiang_listen_card_rep* other) {
  if (other != this) {
    std::swap(listen_user_, other->listen_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_majiang_listen_card_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_majiang_listen_card_rep_descriptor_;
  metadata.reflection = msg_majiang_listen_card_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_majiang_oper_notify_rep::kResumeUserFieldNumber;
const int msg_majiang_oper_notify_rep::kActionFieldNumber;
const int msg_majiang_oper_notify_rep::kCurUserFieldNumber;
const int msg_majiang_oper_notify_rep::kPasshuCountFieldNumber;
#endif  // !_MSC_VER

msg_majiang_oper_notify_rep::msg_majiang_oper_notify_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_majiang_oper_notify_rep::InitAsDefaultInstance() {
}

msg_majiang_oper_notify_rep::msg_majiang_oper_notify_rep(const msg_majiang_oper_notify_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_majiang_oper_notify_rep::SharedCtor() {
  _cached_size_ = 0;
  resume_user_ = 0u;
  cur_user_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_majiang_oper_notify_rep::~msg_majiang_oper_notify_rep() {
  SharedDtor();
}

void msg_majiang_oper_notify_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_majiang_oper_notify_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_majiang_oper_notify_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_majiang_oper_notify_rep_descriptor_;
}

const msg_majiang_oper_notify_rep& msg_majiang_oper_notify_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_majiang_oper_notify_rep* msg_majiang_oper_notify_rep::default_instance_ = NULL;

msg_majiang_oper_notify_rep* msg_majiang_oper_notify_rep::New() const {
  return new msg_majiang_oper_notify_rep;
}

void msg_majiang_oper_notify_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    resume_user_ = 0u;
    cur_user_ = 0u;
  }
  action_.Clear();
  passhu_count_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_majiang_oper_notify_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 resume_user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resume_user_)));
          set_has_resume_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_action;
        break;
      }

      // repeated .net.mjaction action = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_action()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_action;
        if (input->ExpectTag(24)) goto parse_cur_user;
        break;
      }

      // optional uint32 cur_user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_user_)));
          set_has_cur_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_passhu_count;
        break;
      }

      // repeated int32 passhu_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_passhu_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_passhu_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_passhu_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_passhu_count;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_majiang_oper_notify_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 resume_user = 1;
  if (has_resume_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->resume_user(), output);
  }

  // repeated .net.mjaction action = 2;
  for (int i = 0; i < this->action_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->action(i), output);
  }

  // optional uint32 cur_user = 3;
  if (has_cur_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cur_user(), output);
  }

  // repeated int32 passhu_count = 4;
  for (int i = 0; i < this->passhu_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->passhu_count(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_majiang_oper_notify_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 resume_user = 1;
  if (has_resume_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->resume_user(), target);
  }

  // repeated .net.mjaction action = 2;
  for (int i = 0; i < this->action_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->action(i), target);
  }

  // optional uint32 cur_user = 3;
  if (has_cur_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cur_user(), target);
  }

  // repeated int32 passhu_count = 4;
  for (int i = 0; i < this->passhu_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->passhu_count(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_majiang_oper_notify_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 resume_user = 1;
    if (has_resume_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resume_user());
    }

    // optional uint32 cur_user = 3;
    if (has_cur_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_user());
    }

  }
  // repeated .net.mjaction action = 2;
  total_size += 1 * this->action_size();
  for (int i = 0; i < this->action_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->action(i));
  }

  // repeated int32 passhu_count = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->passhu_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->passhu_count(i));
    }
    total_size += 1 * this->passhu_count_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_majiang_oper_notify_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_majiang_oper_notify_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_majiang_oper_notify_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_majiang_oper_notify_rep::MergeFrom(const msg_majiang_oper_notify_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  action_.MergeFrom(from.action_);
  passhu_count_.MergeFrom(from.passhu_count_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resume_user()) {
      set_resume_user(from.resume_user());
    }
    if (from.has_cur_user()) {
      set_cur_user(from.cur_user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_majiang_oper_notify_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_majiang_oper_notify_rep::CopyFrom(const msg_majiang_oper_notify_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_majiang_oper_notify_rep::IsInitialized() const {

  return true;
}

void msg_majiang_oper_notify_rep::Swap(msg_majiang_oper_notify_rep* other) {
  if (other != this) {
    std::swap(resume_user_, other->resume_user_);
    action_.Swap(&other->action_);
    std::swap(cur_user_, other->cur_user_);
    passhu_count_.Swap(&other->passhu_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_majiang_oper_notify_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_majiang_oper_notify_rep_descriptor_;
  metadata.reflection = msg_majiang_oper_notify_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_majiang_oper_card_req::kOperCodeFieldNumber;
const int msg_majiang_oper_card_req::kOperCardFieldNumber;
#endif  // !_MSC_VER

msg_majiang_oper_card_req::msg_majiang_oper_card_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_majiang_oper_card_req::InitAsDefaultInstance() {
}

msg_majiang_oper_card_req::msg_majiang_oper_card_req(const msg_majiang_oper_card_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_majiang_oper_card_req::SharedCtor() {
  _cached_size_ = 0;
  oper_code_ = 0u;
  oper_card_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_majiang_oper_card_req::~msg_majiang_oper_card_req() {
  SharedDtor();
}

void msg_majiang_oper_card_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_majiang_oper_card_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_majiang_oper_card_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_majiang_oper_card_req_descriptor_;
}

const msg_majiang_oper_card_req& msg_majiang_oper_card_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_majiang_oper_card_req* msg_majiang_oper_card_req::default_instance_ = NULL;

msg_majiang_oper_card_req* msg_majiang_oper_card_req::New() const {
  return new msg_majiang_oper_card_req;
}

void msg_majiang_oper_card_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oper_code_ = 0u;
    oper_card_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_majiang_oper_card_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 oper_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oper_code_)));
          set_has_oper_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_oper_card;
        break;
      }

      // optional uint32 oper_card = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oper_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oper_card_)));
          set_has_oper_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_majiang_oper_card_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 oper_code = 1;
  if (has_oper_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->oper_code(), output);
  }

  // optional uint32 oper_card = 2;
  if (has_oper_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->oper_card(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_majiang_oper_card_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 oper_code = 1;
  if (has_oper_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->oper_code(), target);
  }

  // optional uint32 oper_card = 2;
  if (has_oper_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->oper_card(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_majiang_oper_card_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 oper_code = 1;
    if (has_oper_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oper_code());
    }

    // optional uint32 oper_card = 2;
    if (has_oper_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oper_card());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_majiang_oper_card_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_majiang_oper_card_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_majiang_oper_card_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_majiang_oper_card_req::MergeFrom(const msg_majiang_oper_card_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_oper_code()) {
      set_oper_code(from.oper_code());
    }
    if (from.has_oper_card()) {
      set_oper_card(from.oper_card());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_majiang_oper_card_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_majiang_oper_card_req::CopyFrom(const msg_majiang_oper_card_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_majiang_oper_card_req::IsInitialized() const {

  return true;
}

void msg_majiang_oper_card_req::Swap(msg_majiang_oper_card_req* other) {
  if (other != this) {
    std::swap(oper_code_, other->oper_code_);
    std::swap(oper_card_, other->oper_card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_majiang_oper_card_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_majiang_oper_card_req_descriptor_;
  metadata.reflection = msg_majiang_oper_card_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_majiang_oper_result_rep::kOperUserFieldNumber;
const int msg_majiang_oper_result_rep::kProvideUserFieldNumber;
const int msg_majiang_oper_result_rep::kActionFieldNumber;
const int msg_majiang_oper_result_rep::kNotifyHuFieldNumber;
const int msg_majiang_oper_result_rep::kPasshuCountFieldNumber;
#endif  // !_MSC_VER

msg_majiang_oper_result_rep::msg_majiang_oper_result_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_majiang_oper_result_rep::InitAsDefaultInstance() {
  action_ = const_cast< ::net::mjaction*>(&::net::mjaction::default_instance());
}

msg_majiang_oper_result_rep::msg_majiang_oper_result_rep(const msg_majiang_oper_result_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_majiang_oper_result_rep::SharedCtor() {
  _cached_size_ = 0;
  oper_user_ = 0u;
  provide_user_ = 0u;
  action_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_majiang_oper_result_rep::~msg_majiang_oper_result_rep() {
  SharedDtor();
}

void msg_majiang_oper_result_rep::SharedDtor() {
  if (this != default_instance_) {
    delete action_;
  }
}

void msg_majiang_oper_result_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_majiang_oper_result_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_majiang_oper_result_rep_descriptor_;
}

const msg_majiang_oper_result_rep& msg_majiang_oper_result_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_majiang_oper_result_rep* msg_majiang_oper_result_rep::default_instance_ = NULL;

msg_majiang_oper_result_rep* msg_majiang_oper_result_rep::New() const {
  return new msg_majiang_oper_result_rep;
}

void msg_majiang_oper_result_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oper_user_ = 0u;
    provide_user_ = 0u;
    if (has_action()) {
      if (action_ != NULL) action_->::net::mjaction::Clear();
    }
  }
  notify_hu_.Clear();
  passhu_count_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_majiang_oper_result_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 oper_user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oper_user_)));
          set_has_oper_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_provide_user;
        break;
      }

      // optional uint32 provide_user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_provide_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &provide_user_)));
          set_has_provide_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_action;
        break;
      }

      // optional .net.mjaction action = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_action()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_notify_hu;
        break;
      }

      // repeated .net.mjaction_out_front_notify_hu notify_hu = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notify_hu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_notify_hu()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_notify_hu;
        if (input->ExpectTag(40)) goto parse_passhu_count;
        break;
      }

      // repeated int32 passhu_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_passhu_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_passhu_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_passhu_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_passhu_count;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_majiang_oper_result_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 oper_user = 1;
  if (has_oper_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->oper_user(), output);
  }

  // optional uint32 provide_user = 2;
  if (has_provide_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->provide_user(), output);
  }

  // optional .net.mjaction action = 3;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->action(), output);
  }

  // repeated .net.mjaction_out_front_notify_hu notify_hu = 4;
  for (int i = 0; i < this->notify_hu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->notify_hu(i), output);
  }

  // repeated int32 passhu_count = 5;
  for (int i = 0; i < this->passhu_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->passhu_count(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_majiang_oper_result_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 oper_user = 1;
  if (has_oper_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->oper_user(), target);
  }

  // optional uint32 provide_user = 2;
  if (has_provide_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->provide_user(), target);
  }

  // optional .net.mjaction action = 3;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->action(), target);
  }

  // repeated .net.mjaction_out_front_notify_hu notify_hu = 4;
  for (int i = 0; i < this->notify_hu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->notify_hu(i), target);
  }

  // repeated int32 passhu_count = 5;
  for (int i = 0; i < this->passhu_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->passhu_count(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_majiang_oper_result_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 oper_user = 1;
    if (has_oper_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oper_user());
    }

    // optional uint32 provide_user = 2;
    if (has_provide_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->provide_user());
    }

    // optional .net.mjaction action = 3;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->action());
    }

  }
  // repeated .net.mjaction_out_front_notify_hu notify_hu = 4;
  total_size += 1 * this->notify_hu_size();
  for (int i = 0; i < this->notify_hu_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->notify_hu(i));
  }

  // repeated int32 passhu_count = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->passhu_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->passhu_count(i));
    }
    total_size += 1 * this->passhu_count_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_majiang_oper_result_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_majiang_oper_result_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_majiang_oper_result_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_majiang_oper_result_rep::MergeFrom(const msg_majiang_oper_result_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  notify_hu_.MergeFrom(from.notify_hu_);
  passhu_count_.MergeFrom(from.passhu_count_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_oper_user()) {
      set_oper_user(from.oper_user());
    }
    if (from.has_provide_user()) {
      set_provide_user(from.provide_user());
    }
    if (from.has_action()) {
      mutable_action()->::net::mjaction::MergeFrom(from.action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_majiang_oper_result_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_majiang_oper_result_rep::CopyFrom(const msg_majiang_oper_result_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_majiang_oper_result_rep::IsInitialized() const {

  return true;
}

void msg_majiang_oper_result_rep::Swap(msg_majiang_oper_result_rep* other) {
  if (other != this) {
    std::swap(oper_user_, other->oper_user_);
    std::swap(provide_user_, other->provide_user_);
    std::swap(action_, other->action_);
    notify_hu_.Swap(&other->notify_hu_);
    passhu_count_.Swap(&other->passhu_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_majiang_oper_result_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_majiang_oper_result_rep_descriptor_;
  metadata.reflection = msg_majiang_oper_result_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mjhu_info::kOpenHuFieldNumber;
const int mjhu_info::kHuKindFieldNumber;
const int mjhu_info::kHuScoreFieldNumber;
const int mjhu_info::kHuRightFieldNumber;
const int mjhu_info::kHitBirdFieldNumber;
const int mjhu_info::kScoreFieldNumber;
const int mjhu_info::kHuCardFieldNumber;
const int mjhu_info::kCardDatasFieldNumber;
const int mjhu_info::kWeaveItemsFieldNumber;
const int mjhu_info::kBirdScoreFieldNumber;
#endif  // !_MSC_VER

mjhu_info::mjhu_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mjhu_info::InitAsDefaultInstance() {
}

mjhu_info::mjhu_info(const mjhu_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mjhu_info::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0;
  hu_card_ = 0u;
  bird_score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mjhu_info::~mjhu_info() {
  SharedDtor();
}

void mjhu_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mjhu_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mjhu_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mjhu_info_descriptor_;
}

const mjhu_info& mjhu_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

mjhu_info* mjhu_info::default_instance_ = NULL;

mjhu_info* mjhu_info::New() const {
  return new mjhu_info;
}

void mjhu_info::Clear() {
  if (_has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    score_ = 0;
    hu_card_ = 0u;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    bird_score_ = 0u;
  }
  open_hu_.Clear();
  hu_kind_.Clear();
  hu_score_.Clear();
  hu_right_.Clear();
  hit_bird_.Clear();
  card_datas_.Clear();
  weave_items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mjhu_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 open_hu = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_hu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_open_hu())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_open_hu())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_open_hu;
        if (input->ExpectTag(16)) goto parse_hu_kind;
        break;
      }

      // repeated uint32 hu_kind = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hu_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_hu_kind())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hu_kind())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hu_kind;
        if (input->ExpectTag(24)) goto parse_hu_score;
        break;
      }

      // repeated uint32 hu_score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hu_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_hu_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hu_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hu_score;
        if (input->ExpectTag(32)) goto parse_hu_right;
        break;
      }

      // repeated uint32 hu_right = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hu_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_hu_right())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hu_right())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hu_right;
        if (input->ExpectTag(40)) goto parse_hit_bird;
        break;
      }

      // repeated uint32 hit_bird = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hit_bird:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_hit_bird())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hit_bird())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hit_bird;
        if (input->ExpectTag(48)) goto parse_score;
        break;
      }

      // optional int32 score = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_hu_card;
        break;
      }

      // optional uint32 hu_card = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hu_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hu_card_)));
          set_has_hu_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_card_datas;
        break;
      }

      // repeated uint32 card_datas = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_datas:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_card_datas())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_datas())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_card_datas;
        if (input->ExpectTag(74)) goto parse_weave_items;
        break;
      }

      // repeated .net.weave_item weave_items = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weave_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weave_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_weave_items;
        if (input->ExpectTag(80)) goto parse_bird_score;
        break;
      }

      // optional uint32 bird_score = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bird_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bird_score_)));
          set_has_bird_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mjhu_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 open_hu = 1;
  for (int i = 0; i < this->open_hu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->open_hu(i), output);
  }

  // repeated uint32 hu_kind = 2;
  for (int i = 0; i < this->hu_kind_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->hu_kind(i), output);
  }

  // repeated uint32 hu_score = 3;
  for (int i = 0; i < this->hu_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->hu_score(i), output);
  }

  // repeated uint32 hu_right = 4;
  for (int i = 0; i < this->hu_right_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->hu_right(i), output);
  }

  // repeated uint32 hit_bird = 5;
  for (int i = 0; i < this->hit_bird_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->hit_bird(i), output);
  }

  // optional int32 score = 6;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->score(), output);
  }

  // optional uint32 hu_card = 7;
  if (has_hu_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->hu_card(), output);
  }

  // repeated uint32 card_datas = 8;
  for (int i = 0; i < this->card_datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->card_datas(i), output);
  }

  // repeated .net.weave_item weave_items = 9;
  for (int i = 0; i < this->weave_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->weave_items(i), output);
  }

  // optional uint32 bird_score = 10;
  if (has_bird_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->bird_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mjhu_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 open_hu = 1;
  for (int i = 0; i < this->open_hu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->open_hu(i), target);
  }

  // repeated uint32 hu_kind = 2;
  for (int i = 0; i < this->hu_kind_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->hu_kind(i), target);
  }

  // repeated uint32 hu_score = 3;
  for (int i = 0; i < this->hu_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->hu_score(i), target);
  }

  // repeated uint32 hu_right = 4;
  for (int i = 0; i < this->hu_right_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->hu_right(i), target);
  }

  // repeated uint32 hit_bird = 5;
  for (int i = 0; i < this->hit_bird_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->hit_bird(i), target);
  }

  // optional int32 score = 6;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->score(), target);
  }

  // optional uint32 hu_card = 7;
  if (has_hu_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->hu_card(), target);
  }

  // repeated uint32 card_datas = 8;
  for (int i = 0; i < this->card_datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->card_datas(i), target);
  }

  // repeated .net.weave_item weave_items = 9;
  for (int i = 0; i < this->weave_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->weave_items(i), target);
  }

  // optional uint32 bird_score = 10;
  if (has_bird_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->bird_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mjhu_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    // optional int32 score = 6;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional uint32 hu_card = 7;
    if (has_hu_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hu_card());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional uint32 bird_score = 10;
    if (has_bird_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bird_score());
    }

  }
  // repeated uint32 open_hu = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->open_hu_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->open_hu(i));
    }
    total_size += 1 * this->open_hu_size() + data_size;
  }

  // repeated uint32 hu_kind = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->hu_kind_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hu_kind(i));
    }
    total_size += 1 * this->hu_kind_size() + data_size;
  }

  // repeated uint32 hu_score = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->hu_score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hu_score(i));
    }
    total_size += 1 * this->hu_score_size() + data_size;
  }

  // repeated uint32 hu_right = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->hu_right_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hu_right(i));
    }
    total_size += 1 * this->hu_right_size() + data_size;
  }

  // repeated uint32 hit_bird = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->hit_bird_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hit_bird(i));
    }
    total_size += 1 * this->hit_bird_size() + data_size;
  }

  // repeated uint32 card_datas = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_datas_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->card_datas(i));
    }
    total_size += 1 * this->card_datas_size() + data_size;
  }

  // repeated .net.weave_item weave_items = 9;
  total_size += 1 * this->weave_items_size();
  for (int i = 0; i < this->weave_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->weave_items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mjhu_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mjhu_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mjhu_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mjhu_info::MergeFrom(const mjhu_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  open_hu_.MergeFrom(from.open_hu_);
  hu_kind_.MergeFrom(from.hu_kind_);
  hu_score_.MergeFrom(from.hu_score_);
  hu_right_.MergeFrom(from.hu_right_);
  hit_bird_.MergeFrom(from.hit_bird_);
  card_datas_.MergeFrom(from.card_datas_);
  weave_items_.MergeFrom(from.weave_items_);
  if (from._has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_hu_card()) {
      set_hu_card(from.hu_card());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_bird_score()) {
      set_bird_score(from.bird_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mjhu_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mjhu_info::CopyFrom(const mjhu_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mjhu_info::IsInitialized() const {

  return true;
}

void mjhu_info::Swap(mjhu_info* other) {
  if (other != this) {
    open_hu_.Swap(&other->open_hu_);
    hu_kind_.Swap(&other->hu_kind_);
    hu_score_.Swap(&other->hu_score_);
    hu_right_.Swap(&other->hu_right_);
    hit_bird_.Swap(&other->hit_bird_);
    std::swap(score_, other->score_);
    std::swap(hu_card_, other->hu_card_);
    card_datas_.Swap(&other->card_datas_);
    weave_items_.Swap(&other->weave_items_);
    std::swap(bird_score_, other->bird_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mjhu_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mjhu_info_descriptor_;
  metadata.reflection = mjhu_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_majiang_game_over_rep::kProvideUserFieldNumber;
const int msg_majiang_game_over_rep::kChiHuCardFieldNumber;
const int msg_majiang_game_over_rep::kHuInfosFieldNumber;
const int msg_majiang_game_over_rep::kEndTypeFieldNumber;
const int msg_majiang_game_over_rep::kBankerUserFieldNumber;
const int msg_majiang_game_over_rep::kAllBirdFieldNumber;
const int msg_majiang_game_over_rep::kPasshuCountFieldNumber;
#endif  // !_MSC_VER

msg_majiang_game_over_rep::msg_majiang_game_over_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_majiang_game_over_rep::InitAsDefaultInstance() {
}

msg_majiang_game_over_rep::msg_majiang_game_over_rep(const msg_majiang_game_over_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_majiang_game_over_rep::SharedCtor() {
  _cached_size_ = 0;
  provide_user_ = 0u;
  chi_hu_card_ = 0u;
  end_type_ = 0u;
  banker_user_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_majiang_game_over_rep::~msg_majiang_game_over_rep() {
  SharedDtor();
}

void msg_majiang_game_over_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_majiang_game_over_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_majiang_game_over_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_majiang_game_over_rep_descriptor_;
}

const msg_majiang_game_over_rep& msg_majiang_game_over_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_majiang_game_over_rep* msg_majiang_game_over_rep::default_instance_ = NULL;

msg_majiang_game_over_rep* msg_majiang_game_over_rep::New() const {
  return new msg_majiang_game_over_rep;
}

void msg_majiang_game_over_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    provide_user_ = 0u;
    chi_hu_card_ = 0u;
    end_type_ = 0u;
    banker_user_ = 0u;
  }
  hu_infos_.Clear();
  all_bird_.Clear();
  passhu_count_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_majiang_game_over_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 provide_user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &provide_user_)));
          set_has_provide_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chi_hu_card;
        break;
      }

      // optional uint32 chi_hu_card = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chi_hu_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chi_hu_card_)));
          set_has_chi_hu_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hu_infos;
        break;
      }

      // repeated .net.mjhu_info hu_infos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hu_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hu_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hu_infos;
        if (input->ExpectTag(32)) goto parse_end_type;
        break;
      }

      // optional uint32 end_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_type_)));
          set_has_end_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_banker_user;
        break;
      }

      // optional uint32 banker_user = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &banker_user_)));
          set_has_banker_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_all_bird;
        break;
      }

      // repeated uint32 all_bird = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_bird:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_all_bird())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_all_bird())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_all_bird;
        if (input->ExpectTag(56)) goto parse_passhu_count;
        break;
      }

      // repeated int32 passhu_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_passhu_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_passhu_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_passhu_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_passhu_count;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_majiang_game_over_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 provide_user = 1;
  if (has_provide_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->provide_user(), output);
  }

  // optional uint32 chi_hu_card = 2;
  if (has_chi_hu_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->chi_hu_card(), output);
  }

  // repeated .net.mjhu_info hu_infos = 3;
  for (int i = 0; i < this->hu_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->hu_infos(i), output);
  }

  // optional uint32 end_type = 4;
  if (has_end_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->end_type(), output);
  }

  // optional uint32 banker_user = 5;
  if (has_banker_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->banker_user(), output);
  }

  // repeated uint32 all_bird = 6;
  for (int i = 0; i < this->all_bird_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->all_bird(i), output);
  }

  // repeated int32 passhu_count = 7;
  for (int i = 0; i < this->passhu_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->passhu_count(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_majiang_game_over_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 provide_user = 1;
  if (has_provide_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->provide_user(), target);
  }

  // optional uint32 chi_hu_card = 2;
  if (has_chi_hu_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->chi_hu_card(), target);
  }

  // repeated .net.mjhu_info hu_infos = 3;
  for (int i = 0; i < this->hu_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->hu_infos(i), target);
  }

  // optional uint32 end_type = 4;
  if (has_end_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->end_type(), target);
  }

  // optional uint32 banker_user = 5;
  if (has_banker_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->banker_user(), target);
  }

  // repeated uint32 all_bird = 6;
  for (int i = 0; i < this->all_bird_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->all_bird(i), target);
  }

  // repeated int32 passhu_count = 7;
  for (int i = 0; i < this->passhu_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->passhu_count(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_majiang_game_over_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 provide_user = 1;
    if (has_provide_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->provide_user());
    }

    // optional uint32 chi_hu_card = 2;
    if (has_chi_hu_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chi_hu_card());
    }

    // optional uint32 end_type = 4;
    if (has_end_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_type());
    }

    // optional uint32 banker_user = 5;
    if (has_banker_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->banker_user());
    }

  }
  // repeated .net.mjhu_info hu_infos = 3;
  total_size += 1 * this->hu_infos_size();
  for (int i = 0; i < this->hu_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hu_infos(i));
  }

  // repeated uint32 all_bird = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->all_bird_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->all_bird(i));
    }
    total_size += 1 * this->all_bird_size() + data_size;
  }

  // repeated int32 passhu_count = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->passhu_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->passhu_count(i));
    }
    total_size += 1 * this->passhu_count_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_majiang_game_over_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_majiang_game_over_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_majiang_game_over_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_majiang_game_over_rep::MergeFrom(const msg_majiang_game_over_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  hu_infos_.MergeFrom(from.hu_infos_);
  all_bird_.MergeFrom(from.all_bird_);
  passhu_count_.MergeFrom(from.passhu_count_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_provide_user()) {
      set_provide_user(from.provide_user());
    }
    if (from.has_chi_hu_card()) {
      set_chi_hu_card(from.chi_hu_card());
    }
    if (from.has_end_type()) {
      set_end_type(from.end_type());
    }
    if (from.has_banker_user()) {
      set_banker_user(from.banker_user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_majiang_game_over_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_majiang_game_over_rep::CopyFrom(const msg_majiang_game_over_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_majiang_game_over_rep::IsInitialized() const {

  return true;
}

void msg_majiang_game_over_rep::Swap(msg_majiang_game_over_rep* other) {
  if (other != this) {
    std::swap(provide_user_, other->provide_user_);
    std::swap(chi_hu_card_, other->chi_hu_card_);
    hu_infos_.Swap(&other->hu_infos_);
    std::swap(end_type_, other->end_type_);
    std::swap(banker_user_, other->banker_user_);
    all_bird_.Swap(&other->all_bird_);
    passhu_count_.Swap(&other->passhu_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_majiang_game_over_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_majiang_game_over_rep_descriptor_;
  metadata.reflection = msg_majiang_game_over_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_majiang_opening_hu_rep::kChairIdFieldNumber;
const int msg_majiang_opening_hu_rep::kMinHuTypeFieldNumber;
const int msg_majiang_opening_hu_rep::kCardDataFieldNumber;
#endif  // !_MSC_VER

msg_majiang_opening_hu_rep::msg_majiang_opening_hu_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_majiang_opening_hu_rep::InitAsDefaultInstance() {
}

msg_majiang_opening_hu_rep::msg_majiang_opening_hu_rep(const msg_majiang_opening_hu_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_majiang_opening_hu_rep::SharedCtor() {
  _cached_size_ = 0;
  chair_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_majiang_opening_hu_rep::~msg_majiang_opening_hu_rep() {
  SharedDtor();
}

void msg_majiang_opening_hu_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_majiang_opening_hu_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_majiang_opening_hu_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_majiang_opening_hu_rep_descriptor_;
}

const msg_majiang_opening_hu_rep& msg_majiang_opening_hu_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_majiang_opening_hu_rep* msg_majiang_opening_hu_rep::default_instance_ = NULL;

msg_majiang_opening_hu_rep* msg_majiang_opening_hu_rep::New() const {
  return new msg_majiang_opening_hu_rep;
}

void msg_majiang_opening_hu_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chair_id_ = 0u;
  }
  min_hu_type_.Clear();
  card_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_majiang_opening_hu_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 chair_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chair_id_)));
          set_has_chair_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_min_hu_type;
        break;
      }

      // repeated uint32 min_hu_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_hu_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_min_hu_type())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_min_hu_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_min_hu_type;
        if (input->ExpectTag(24)) goto parse_card_data;
        break;
      }

      // repeated uint32 card_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_card_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_card_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_majiang_opening_hu_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 chair_id = 1;
  if (has_chair_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chair_id(), output);
  }

  // repeated uint32 min_hu_type = 2;
  for (int i = 0; i < this->min_hu_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->min_hu_type(i), output);
  }

  // repeated uint32 card_data = 3;
  for (int i = 0; i < this->card_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->card_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_majiang_opening_hu_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 chair_id = 1;
  if (has_chair_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chair_id(), target);
  }

  // repeated uint32 min_hu_type = 2;
  for (int i = 0; i < this->min_hu_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->min_hu_type(i), target);
  }

  // repeated uint32 card_data = 3;
  for (int i = 0; i < this->card_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->card_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_majiang_opening_hu_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 chair_id = 1;
    if (has_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chair_id());
    }

  }
  // repeated uint32 min_hu_type = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->min_hu_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->min_hu_type(i));
    }
    total_size += 1 * this->min_hu_type_size() + data_size;
  }

  // repeated uint32 card_data = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->card_data(i));
    }
    total_size += 1 * this->card_data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_majiang_opening_hu_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_majiang_opening_hu_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_majiang_opening_hu_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_majiang_opening_hu_rep::MergeFrom(const msg_majiang_opening_hu_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  min_hu_type_.MergeFrom(from.min_hu_type_);
  card_data_.MergeFrom(from.card_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chair_id()) {
      set_chair_id(from.chair_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_majiang_opening_hu_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_majiang_opening_hu_rep::CopyFrom(const msg_majiang_opening_hu_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_majiang_opening_hu_rep::IsInitialized() const {

  return true;
}

void msg_majiang_opening_hu_rep::Swap(msg_majiang_opening_hu_rep* other) {
  if (other != this) {
    std::swap(chair_id_, other->chair_id_);
    min_hu_type_.Swap(&other->min_hu_type_);
    card_data_.Swap(&other->card_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_majiang_opening_hu_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_majiang_opening_hu_rep_descriptor_;
  metadata.reflection = msg_majiang_opening_hu_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_majiang_flush_desk_cards_rep::kTurnCardDataFieldNumber;
const int msg_majiang_flush_desk_cards_rep::kDiscardCountFieldNumber;
const int msg_majiang_flush_desk_cards_rep::kDiscardCardsFieldNumber;
const int msg_majiang_flush_desk_cards_rep::kWeaveCountFieldNumber;
const int msg_majiang_flush_desk_cards_rep::kWeaveItemsFieldNumber;
const int msg_majiang_flush_desk_cards_rep::kHandCardCountFieldNumber;
const int msg_majiang_flush_desk_cards_rep::kHandCardDataFieldNumber;
const int msg_majiang_flush_desk_cards_rep::kLeftCardCountFieldNumber;
const int msg_majiang_flush_desk_cards_rep::kSendCardDataFieldNumber;
const int msg_majiang_flush_desk_cards_rep::kCurUserFieldNumber;
const int msg_majiang_flush_desk_cards_rep::kSendCardUserFieldNumber;
#endif  // !_MSC_VER

msg_majiang_flush_desk_cards_rep::msg_majiang_flush_desk_cards_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_majiang_flush_desk_cards_rep::InitAsDefaultInstance() {
}

msg_majiang_flush_desk_cards_rep::msg_majiang_flush_desk_cards_rep(const msg_majiang_flush_desk_cards_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_majiang_flush_desk_cards_rep::SharedCtor() {
  _cached_size_ = 0;
  turn_card_data_ = 0u;
  left_card_count_ = 0u;
  send_card_data_ = 0u;
  cur_user_ = 0u;
  send_card_user_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_majiang_flush_desk_cards_rep::~msg_majiang_flush_desk_cards_rep() {
  SharedDtor();
}

void msg_majiang_flush_desk_cards_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_majiang_flush_desk_cards_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_majiang_flush_desk_cards_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_majiang_flush_desk_cards_rep_descriptor_;
}

const msg_majiang_flush_desk_cards_rep& msg_majiang_flush_desk_cards_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_majiang_flush_desk_cards_rep* msg_majiang_flush_desk_cards_rep::default_instance_ = NULL;

msg_majiang_flush_desk_cards_rep* msg_majiang_flush_desk_cards_rep::New() const {
  return new msg_majiang_flush_desk_cards_rep;
}

void msg_majiang_flush_desk_cards_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    turn_card_data_ = 0u;
    left_card_count_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    send_card_data_ = 0u;
    cur_user_ = 0u;
    send_card_user_ = 0u;
  }
  discard_count_.Clear();
  discard_cards_.Clear();
  weave_count_.Clear();
  weave_items_.Clear();
  hand_card_count_.Clear();
  hand_card_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_majiang_flush_desk_cards_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 turn_card_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &turn_card_data_)));
          set_has_turn_card_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_discard_count;
        break;
      }

      // repeated uint32 discard_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_discard_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_discard_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_discard_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_discard_count;
        if (input->ExpectTag(24)) goto parse_discard_cards;
        break;
      }

      // repeated uint32 discard_cards = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_discard_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_discard_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_discard_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_discard_cards;
        if (input->ExpectTag(32)) goto parse_weave_count;
        break;
      }

      // repeated uint32 weave_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weave_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_weave_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_weave_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_weave_count;
        if (input->ExpectTag(42)) goto parse_weave_items;
        break;
      }

      // repeated .net.weave_item weave_items = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weave_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weave_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_weave_items;
        if (input->ExpectTag(48)) goto parse_hand_card_count;
        break;
      }

      // repeated uint32 hand_card_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hand_card_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_hand_card_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hand_card_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_hand_card_count;
        if (input->ExpectTag(56)) goto parse_hand_card_data;
        break;
      }

      // repeated uint32 hand_card_data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hand_card_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_hand_card_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hand_card_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_hand_card_data;
        if (input->ExpectTag(64)) goto parse_left_card_count;
        break;
      }

      // optional uint32 left_card_count = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_card_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_card_count_)));
          set_has_left_card_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_send_card_data;
        break;
      }

      // optional uint32 send_card_data = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_card_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_card_data_)));
          set_has_send_card_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_cur_user;
        break;
      }

      // optional uint32 cur_user = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_user_)));
          set_has_cur_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_send_card_user;
        break;
      }

      // optional uint32 send_card_user = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_card_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_card_user_)));
          set_has_send_card_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_majiang_flush_desk_cards_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 turn_card_data = 1;
  if (has_turn_card_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->turn_card_data(), output);
  }

  // repeated uint32 discard_count = 2;
  for (int i = 0; i < this->discard_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->discard_count(i), output);
  }

  // repeated uint32 discard_cards = 3;
  for (int i = 0; i < this->discard_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->discard_cards(i), output);
  }

  // repeated uint32 weave_count = 4;
  for (int i = 0; i < this->weave_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->weave_count(i), output);
  }

  // repeated .net.weave_item weave_items = 5;
  for (int i = 0; i < this->weave_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->weave_items(i), output);
  }

  // repeated uint32 hand_card_count = 6;
  for (int i = 0; i < this->hand_card_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->hand_card_count(i), output);
  }

  // repeated uint32 hand_card_data = 7;
  for (int i = 0; i < this->hand_card_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->hand_card_data(i), output);
  }

  // optional uint32 left_card_count = 8;
  if (has_left_card_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->left_card_count(), output);
  }

  // optional uint32 send_card_data = 9;
  if (has_send_card_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->send_card_data(), output);
  }

  // optional uint32 cur_user = 10;
  if (has_cur_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->cur_user(), output);
  }

  // optional uint32 send_card_user = 11;
  if (has_send_card_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->send_card_user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_majiang_flush_desk_cards_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 turn_card_data = 1;
  if (has_turn_card_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->turn_card_data(), target);
  }

  // repeated uint32 discard_count = 2;
  for (int i = 0; i < this->discard_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->discard_count(i), target);
  }

  // repeated uint32 discard_cards = 3;
  for (int i = 0; i < this->discard_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->discard_cards(i), target);
  }

  // repeated uint32 weave_count = 4;
  for (int i = 0; i < this->weave_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->weave_count(i), target);
  }

  // repeated .net.weave_item weave_items = 5;
  for (int i = 0; i < this->weave_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->weave_items(i), target);
  }

  // repeated uint32 hand_card_count = 6;
  for (int i = 0; i < this->hand_card_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->hand_card_count(i), target);
  }

  // repeated uint32 hand_card_data = 7;
  for (int i = 0; i < this->hand_card_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->hand_card_data(i), target);
  }

  // optional uint32 left_card_count = 8;
  if (has_left_card_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->left_card_count(), target);
  }

  // optional uint32 send_card_data = 9;
  if (has_send_card_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->send_card_data(), target);
  }

  // optional uint32 cur_user = 10;
  if (has_cur_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->cur_user(), target);
  }

  // optional uint32 send_card_user = 11;
  if (has_send_card_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->send_card_user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_majiang_flush_desk_cards_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 turn_card_data = 1;
    if (has_turn_card_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->turn_card_data());
    }

    // optional uint32 left_card_count = 8;
    if (has_left_card_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->left_card_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 send_card_data = 9;
    if (has_send_card_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->send_card_data());
    }

    // optional uint32 cur_user = 10;
    if (has_cur_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_user());
    }

    // optional uint32 send_card_user = 11;
    if (has_send_card_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->send_card_user());
    }

  }
  // repeated uint32 discard_count = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->discard_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->discard_count(i));
    }
    total_size += 1 * this->discard_count_size() + data_size;
  }

  // repeated uint32 discard_cards = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->discard_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->discard_cards(i));
    }
    total_size += 1 * this->discard_cards_size() + data_size;
  }

  // repeated uint32 weave_count = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->weave_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->weave_count(i));
    }
    total_size += 1 * this->weave_count_size() + data_size;
  }

  // repeated .net.weave_item weave_items = 5;
  total_size += 1 * this->weave_items_size();
  for (int i = 0; i < this->weave_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->weave_items(i));
  }

  // repeated uint32 hand_card_count = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->hand_card_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hand_card_count(i));
    }
    total_size += 1 * this->hand_card_count_size() + data_size;
  }

  // repeated uint32 hand_card_data = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->hand_card_data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hand_card_data(i));
    }
    total_size += 1 * this->hand_card_data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_majiang_flush_desk_cards_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_majiang_flush_desk_cards_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_majiang_flush_desk_cards_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_majiang_flush_desk_cards_rep::MergeFrom(const msg_majiang_flush_desk_cards_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  discard_count_.MergeFrom(from.discard_count_);
  discard_cards_.MergeFrom(from.discard_cards_);
  weave_count_.MergeFrom(from.weave_count_);
  weave_items_.MergeFrom(from.weave_items_);
  hand_card_count_.MergeFrom(from.hand_card_count_);
  hand_card_data_.MergeFrom(from.hand_card_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_turn_card_data()) {
      set_turn_card_data(from.turn_card_data());
    }
    if (from.has_left_card_count()) {
      set_left_card_count(from.left_card_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_send_card_data()) {
      set_send_card_data(from.send_card_data());
    }
    if (from.has_cur_user()) {
      set_cur_user(from.cur_user());
    }
    if (from.has_send_card_user()) {
      set_send_card_user(from.send_card_user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_majiang_flush_desk_cards_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_majiang_flush_desk_cards_rep::CopyFrom(const msg_majiang_flush_desk_cards_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_majiang_flush_desk_cards_rep::IsInitialized() const {

  return true;
}

void msg_majiang_flush_desk_cards_rep::Swap(msg_majiang_flush_desk_cards_rep* other) {
  if (other != this) {
    std::swap(turn_card_data_, other->turn_card_data_);
    discard_count_.Swap(&other->discard_count_);
    discard_cards_.Swap(&other->discard_cards_);
    weave_count_.Swap(&other->weave_count_);
    weave_items_.Swap(&other->weave_items_);
    hand_card_count_.Swap(&other->hand_card_count_);
    hand_card_data_.Swap(&other->hand_card_data_);
    std::swap(left_card_count_, other->left_card_count_);
    std::swap(send_card_data_, other->send_card_data_);
    std::swap(cur_user_, other->cur_user_);
    std::swap(send_card_user_, other->send_card_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_majiang_flush_desk_cards_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_majiang_flush_desk_cards_rep_descriptor_;
  metadata.reflection = msg_majiang_flush_desk_cards_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_majiang_show_public_cards_rep::kShowUserFieldNumber;
const int msg_majiang_show_public_cards_rep::kShowTypeFieldNumber;
const int msg_majiang_show_public_cards_rep::kShowCardsFieldNumber;
const int msg_majiang_show_public_cards_rep::kLeftCardCountFieldNumber;
#endif  // !_MSC_VER

msg_majiang_show_public_cards_rep::msg_majiang_show_public_cards_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_majiang_show_public_cards_rep::InitAsDefaultInstance() {
}

msg_majiang_show_public_cards_rep::msg_majiang_show_public_cards_rep(const msg_majiang_show_public_cards_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_majiang_show_public_cards_rep::SharedCtor() {
  _cached_size_ = 0;
  show_user_ = 0u;
  show_type_ = 0u;
  left_card_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_majiang_show_public_cards_rep::~msg_majiang_show_public_cards_rep() {
  SharedDtor();
}

void msg_majiang_show_public_cards_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_majiang_show_public_cards_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_majiang_show_public_cards_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_majiang_show_public_cards_rep_descriptor_;
}

const msg_majiang_show_public_cards_rep& msg_majiang_show_public_cards_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_majiang_show_public_cards_rep* msg_majiang_show_public_cards_rep::default_instance_ = NULL;

msg_majiang_show_public_cards_rep* msg_majiang_show_public_cards_rep::New() const {
  return new msg_majiang_show_public_cards_rep;
}

void msg_majiang_show_public_cards_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    show_user_ = 0u;
    show_type_ = 0u;
    left_card_count_ = 0u;
  }
  show_cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_majiang_show_public_cards_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 show_user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &show_user_)));
          set_has_show_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_show_type;
        break;
      }

      // optional uint32 show_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &show_type_)));
          set_has_show_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_show_cards;
        break;
      }

      // repeated uint32 show_cards = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_show_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_show_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_show_cards;
        if (input->ExpectTag(32)) goto parse_left_card_count;
        break;
      }

      // optional uint32 left_card_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_card_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_card_count_)));
          set_has_left_card_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_majiang_show_public_cards_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 show_user = 1;
  if (has_show_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->show_user(), output);
  }

  // optional uint32 show_type = 2;
  if (has_show_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->show_type(), output);
  }

  // repeated uint32 show_cards = 3;
  for (int i = 0; i < this->show_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->show_cards(i), output);
  }

  // optional uint32 left_card_count = 4;
  if (has_left_card_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->left_card_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_majiang_show_public_cards_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 show_user = 1;
  if (has_show_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->show_user(), target);
  }

  // optional uint32 show_type = 2;
  if (has_show_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->show_type(), target);
  }

  // repeated uint32 show_cards = 3;
  for (int i = 0; i < this->show_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->show_cards(i), target);
  }

  // optional uint32 left_card_count = 4;
  if (has_left_card_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->left_card_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_majiang_show_public_cards_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 show_user = 1;
    if (has_show_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->show_user());
    }

    // optional uint32 show_type = 2;
    if (has_show_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->show_type());
    }

    // optional uint32 left_card_count = 4;
    if (has_left_card_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->left_card_count());
    }

  }
  // repeated uint32 show_cards = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->show_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->show_cards(i));
    }
    total_size += 1 * this->show_cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_majiang_show_public_cards_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_majiang_show_public_cards_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_majiang_show_public_cards_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_majiang_show_public_cards_rep::MergeFrom(const msg_majiang_show_public_cards_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  show_cards_.MergeFrom(from.show_cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_show_user()) {
      set_show_user(from.show_user());
    }
    if (from.has_show_type()) {
      set_show_type(from.show_type());
    }
    if (from.has_left_card_count()) {
      set_left_card_count(from.left_card_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_majiang_show_public_cards_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_majiang_show_public_cards_rep::CopyFrom(const msg_majiang_show_public_cards_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_majiang_show_public_cards_rep::IsInitialized() const {

  return true;
}

void msg_majiang_show_public_cards_rep::Swap(msg_majiang_show_public_cards_rep* other) {
  if (other != this) {
    std::swap(show_user_, other->show_user_);
    std::swap(show_type_, other->show_type_);
    show_cards_.Swap(&other->show_cards_);
    std::swap(left_card_count_, other->left_card_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_majiang_show_public_cards_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_majiang_show_public_cards_rep_descriptor_;
  metadata.reflection = msg_majiang_show_public_cards_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_majiang_change_hand_card_req::kChangeUserFieldNumber;
const int msg_majiang_change_hand_card_req::kChangeCardFieldNumber;
#endif  // !_MSC_VER

msg_majiang_change_hand_card_req::msg_majiang_change_hand_card_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_majiang_change_hand_card_req::InitAsDefaultInstance() {
}

msg_majiang_change_hand_card_req::msg_majiang_change_hand_card_req(const msg_majiang_change_hand_card_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_majiang_change_hand_card_req::SharedCtor() {
  _cached_size_ = 0;
  change_user_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_majiang_change_hand_card_req::~msg_majiang_change_hand_card_req() {
  SharedDtor();
}

void msg_majiang_change_hand_card_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_majiang_change_hand_card_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_majiang_change_hand_card_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_majiang_change_hand_card_req_descriptor_;
}

const msg_majiang_change_hand_card_req& msg_majiang_change_hand_card_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_majiang_change_hand_card_req* msg_majiang_change_hand_card_req::default_instance_ = NULL;

msg_majiang_change_hand_card_req* msg_majiang_change_hand_card_req::New() const {
  return new msg_majiang_change_hand_card_req;
}

void msg_majiang_change_hand_card_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    change_user_ = 0u;
  }
  change_card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_majiang_change_hand_card_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 change_user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &change_user_)));
          set_has_change_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_change_card;
        break;
      }

      // repeated uint32 change_card = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_change_card())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_change_card())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_change_card;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_majiang_change_hand_card_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 change_user = 1;
  if (has_change_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->change_user(), output);
  }

  // repeated uint32 change_card = 2;
  for (int i = 0; i < this->change_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->change_card(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_majiang_change_hand_card_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 change_user = 1;
  if (has_change_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->change_user(), target);
  }

  // repeated uint32 change_card = 2;
  for (int i = 0; i < this->change_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->change_card(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_majiang_change_hand_card_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 change_user = 1;
    if (has_change_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->change_user());
    }

  }
  // repeated uint32 change_card = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->change_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->change_card(i));
    }
    total_size += 1 * this->change_card_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_majiang_change_hand_card_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_majiang_change_hand_card_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_majiang_change_hand_card_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_majiang_change_hand_card_req::MergeFrom(const msg_majiang_change_hand_card_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  change_card_.MergeFrom(from.change_card_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_change_user()) {
      set_change_user(from.change_user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_majiang_change_hand_card_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_majiang_change_hand_card_req::CopyFrom(const msg_majiang_change_hand_card_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_majiang_change_hand_card_req::IsInitialized() const {

  return true;
}

void msg_majiang_change_hand_card_req::Swap(msg_majiang_change_hand_card_req* other) {
  if (other != this) {
    std::swap(change_user_, other->change_user_);
    change_card_.Swap(&other->change_card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_majiang_change_hand_card_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_majiang_change_hand_card_req_descriptor_;
  metadata.reflection = msg_majiang_change_hand_card_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_majiang_get_hand_card_req::kUserFieldNumber;
#endif  // !_MSC_VER

msg_majiang_get_hand_card_req::msg_majiang_get_hand_card_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_majiang_get_hand_card_req::InitAsDefaultInstance() {
}

msg_majiang_get_hand_card_req::msg_majiang_get_hand_card_req(const msg_majiang_get_hand_card_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_majiang_get_hand_card_req::SharedCtor() {
  _cached_size_ = 0;
  user_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_majiang_get_hand_card_req::~msg_majiang_get_hand_card_req() {
  SharedDtor();
}

void msg_majiang_get_hand_card_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_majiang_get_hand_card_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_majiang_get_hand_card_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_majiang_get_hand_card_req_descriptor_;
}

const msg_majiang_get_hand_card_req& msg_majiang_get_hand_card_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_majiang_get_hand_card_req* msg_majiang_get_hand_card_req::default_instance_ = NULL;

msg_majiang_get_hand_card_req* msg_majiang_get_hand_card_req::New() const {
  return new msg_majiang_get_hand_card_req;
}

void msg_majiang_get_hand_card_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_majiang_get_hand_card_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_)));
          set_has_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_majiang_get_hand_card_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_majiang_get_hand_card_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 user = 1;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_majiang_get_hand_card_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_majiang_get_hand_card_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_majiang_get_hand_card_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_majiang_get_hand_card_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_majiang_get_hand_card_req::MergeFrom(const msg_majiang_get_hand_card_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      set_user(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_majiang_get_hand_card_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_majiang_get_hand_card_req::CopyFrom(const msg_majiang_get_hand_card_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_majiang_get_hand_card_req::IsInitialized() const {

  return true;
}

void msg_majiang_get_hand_card_req::Swap(msg_majiang_get_hand_card_req* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_majiang_get_hand_card_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_majiang_get_hand_card_req_descriptor_;
  metadata.reflection = msg_majiang_get_hand_card_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_majiang_get_hand_card_rep::kHandCardDataFieldNumber;
const int msg_majiang_get_hand_card_rep::kLeftCardCountFieldNumber;
#endif  // !_MSC_VER

msg_majiang_get_hand_card_rep::msg_majiang_get_hand_card_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_majiang_get_hand_card_rep::InitAsDefaultInstance() {
}

msg_majiang_get_hand_card_rep::msg_majiang_get_hand_card_rep(const msg_majiang_get_hand_card_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_majiang_get_hand_card_rep::SharedCtor() {
  _cached_size_ = 0;
  left_card_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_majiang_get_hand_card_rep::~msg_majiang_get_hand_card_rep() {
  SharedDtor();
}

void msg_majiang_get_hand_card_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_majiang_get_hand_card_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_majiang_get_hand_card_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_majiang_get_hand_card_rep_descriptor_;
}

const msg_majiang_get_hand_card_rep& msg_majiang_get_hand_card_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_majiang_get_hand_card_rep* msg_majiang_get_hand_card_rep::default_instance_ = NULL;

msg_majiang_get_hand_card_rep* msg_majiang_get_hand_card_rep::New() const {
  return new msg_majiang_get_hand_card_rep;
}

void msg_majiang_get_hand_card_rep::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    left_card_count_ = 0u;
  }
  hand_card_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_majiang_get_hand_card_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 hand_card_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hand_card_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_hand_card_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hand_card_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_hand_card_data;
        if (input->ExpectTag(16)) goto parse_left_card_count;
        break;
      }

      // optional uint32 left_card_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_card_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_card_count_)));
          set_has_left_card_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_majiang_get_hand_card_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 hand_card_data = 1;
  for (int i = 0; i < this->hand_card_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->hand_card_data(i), output);
  }

  // optional uint32 left_card_count = 2;
  if (has_left_card_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->left_card_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_majiang_get_hand_card_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 hand_card_data = 1;
  for (int i = 0; i < this->hand_card_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->hand_card_data(i), target);
  }

  // optional uint32 left_card_count = 2;
  if (has_left_card_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->left_card_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_majiang_get_hand_card_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 left_card_count = 2;
    if (has_left_card_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->left_card_count());
    }

  }
  // repeated uint32 hand_card_data = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->hand_card_data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hand_card_data(i));
    }
    total_size += 1 * this->hand_card_data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_majiang_get_hand_card_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_majiang_get_hand_card_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_majiang_get_hand_card_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_majiang_get_hand_card_rep::MergeFrom(const msg_majiang_get_hand_card_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  hand_card_data_.MergeFrom(from.hand_card_data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_left_card_count()) {
      set_left_card_count(from.left_card_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_majiang_get_hand_card_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_majiang_get_hand_card_rep::CopyFrom(const msg_majiang_get_hand_card_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_majiang_get_hand_card_rep::IsInitialized() const {

  return true;
}

void msg_majiang_get_hand_card_rep::Swap(msg_majiang_get_hand_card_rep* other) {
  if (other != this) {
    hand_card_data_.Swap(&other->hand_card_data_);
    std::swap(left_card_count_, other->left_card_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_majiang_get_hand_card_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_majiang_get_hand_card_rep_descriptor_;
  metadata.reflection = msg_majiang_get_hand_card_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_majiang_oper_trustee_req::kTrusteeFieldNumber;
#endif  // !_MSC_VER

msg_majiang_oper_trustee_req::msg_majiang_oper_trustee_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_majiang_oper_trustee_req::InitAsDefaultInstance() {
}

msg_majiang_oper_trustee_req::msg_majiang_oper_trustee_req(const msg_majiang_oper_trustee_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_majiang_oper_trustee_req::SharedCtor() {
  _cached_size_ = 0;
  trustee_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_majiang_oper_trustee_req::~msg_majiang_oper_trustee_req() {
  SharedDtor();
}

void msg_majiang_oper_trustee_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_majiang_oper_trustee_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_majiang_oper_trustee_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_majiang_oper_trustee_req_descriptor_;
}

const msg_majiang_oper_trustee_req& msg_majiang_oper_trustee_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_majiang_oper_trustee_req* msg_majiang_oper_trustee_req::default_instance_ = NULL;

msg_majiang_oper_trustee_req* msg_majiang_oper_trustee_req::New() const {
  return new msg_majiang_oper_trustee_req;
}

void msg_majiang_oper_trustee_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    trustee_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_majiang_oper_trustee_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 trustee = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trustee_)));
          set_has_trustee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_majiang_oper_trustee_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 trustee = 1;
  if (has_trustee()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->trustee(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_majiang_oper_trustee_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 trustee = 1;
  if (has_trustee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->trustee(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_majiang_oper_trustee_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 trustee = 1;
    if (has_trustee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trustee());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_majiang_oper_trustee_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_majiang_oper_trustee_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_majiang_oper_trustee_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_majiang_oper_trustee_req::MergeFrom(const msg_majiang_oper_trustee_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trustee()) {
      set_trustee(from.trustee());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_majiang_oper_trustee_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_majiang_oper_trustee_req::CopyFrom(const msg_majiang_oper_trustee_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_majiang_oper_trustee_req::IsInitialized() const {

  return true;
}

void msg_majiang_oper_trustee_req::Swap(msg_majiang_oper_trustee_req* other) {
  if (other != this) {
    std::swap(trustee_, other->trustee_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_majiang_oper_trustee_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_majiang_oper_trustee_req_descriptor_;
  metadata.reflection = msg_majiang_oper_trustee_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_majiang_oper_trustee_rep::kTrusteeFieldNumber;
const int msg_majiang_oper_trustee_rep::kResultFieldNumber;
#endif  // !_MSC_VER

msg_majiang_oper_trustee_rep::msg_majiang_oper_trustee_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_majiang_oper_trustee_rep::InitAsDefaultInstance() {
}

msg_majiang_oper_trustee_rep::msg_majiang_oper_trustee_rep(const msg_majiang_oper_trustee_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_majiang_oper_trustee_rep::SharedCtor() {
  _cached_size_ = 0;
  trustee_ = 0u;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_majiang_oper_trustee_rep::~msg_majiang_oper_trustee_rep() {
  SharedDtor();
}

void msg_majiang_oper_trustee_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_majiang_oper_trustee_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_majiang_oper_trustee_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_majiang_oper_trustee_rep_descriptor_;
}

const msg_majiang_oper_trustee_rep& msg_majiang_oper_trustee_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_majiang_oper_trustee_rep* msg_majiang_oper_trustee_rep::default_instance_ = NULL;

msg_majiang_oper_trustee_rep* msg_majiang_oper_trustee_rep::New() const {
  return new msg_majiang_oper_trustee_rep;
}

void msg_majiang_oper_trustee_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    trustee_ = 0u;
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_majiang_oper_trustee_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 trustee = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trustee_)));
          set_has_trustee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional uint32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_majiang_oper_trustee_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 trustee = 1;
  if (has_trustee()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->trustee(), output);
  }

  // optional uint32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_majiang_oper_trustee_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 trustee = 1;
  if (has_trustee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->trustee(), target);
  }

  // optional uint32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_majiang_oper_trustee_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 trustee = 1;
    if (has_trustee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trustee());
    }

    // optional uint32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_majiang_oper_trustee_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_majiang_oper_trustee_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_majiang_oper_trustee_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_majiang_oper_trustee_rep::MergeFrom(const msg_majiang_oper_trustee_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trustee()) {
      set_trustee(from.trustee());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_majiang_oper_trustee_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_majiang_oper_trustee_rep::CopyFrom(const msg_majiang_oper_trustee_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_majiang_oper_trustee_rep::IsInitialized() const {

  return true;
}

void msg_majiang_oper_trustee_rep::Swap(msg_majiang_oper_trustee_rep* other) {
  if (other != this) {
    std::swap(trustee_, other->trustee_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_majiang_oper_trustee_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_majiang_oper_trustee_rep_descriptor_;
  metadata.reflection = msg_majiang_oper_trustee_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_majiang_oper_trustee_broadcast::kUidFieldNumber;
const int msg_majiang_oper_trustee_broadcast::kTrusteeFieldNumber;
#endif  // !_MSC_VER

msg_majiang_oper_trustee_broadcast::msg_majiang_oper_trustee_broadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_majiang_oper_trustee_broadcast::InitAsDefaultInstance() {
}

msg_majiang_oper_trustee_broadcast::msg_majiang_oper_trustee_broadcast(const msg_majiang_oper_trustee_broadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_majiang_oper_trustee_broadcast::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  trustee_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_majiang_oper_trustee_broadcast::~msg_majiang_oper_trustee_broadcast() {
  SharedDtor();
}

void msg_majiang_oper_trustee_broadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_majiang_oper_trustee_broadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_majiang_oper_trustee_broadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_majiang_oper_trustee_broadcast_descriptor_;
}

const msg_majiang_oper_trustee_broadcast& msg_majiang_oper_trustee_broadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_majiang_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_majiang_oper_trustee_broadcast* msg_majiang_oper_trustee_broadcast::default_instance_ = NULL;

msg_majiang_oper_trustee_broadcast* msg_majiang_oper_trustee_broadcast::New() const {
  return new msg_majiang_oper_trustee_broadcast;
}

void msg_majiang_oper_trustee_broadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    trustee_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_majiang_oper_trustee_broadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_trustee;
        break;
      }

      // optional uint32 trustee = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trustee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trustee_)));
          set_has_trustee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_majiang_oper_trustee_broadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 trustee = 2;
  if (has_trustee()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->trustee(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_majiang_oper_trustee_broadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional uint32 trustee = 2;
  if (has_trustee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->trustee(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_majiang_oper_trustee_broadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 trustee = 2;
    if (has_trustee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trustee());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_majiang_oper_trustee_broadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_majiang_oper_trustee_broadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_majiang_oper_trustee_broadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_majiang_oper_trustee_broadcast::MergeFrom(const msg_majiang_oper_trustee_broadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_trustee()) {
      set_trustee(from.trustee());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_majiang_oper_trustee_broadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_majiang_oper_trustee_broadcast::CopyFrom(const msg_majiang_oper_trustee_broadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_majiang_oper_trustee_broadcast::IsInitialized() const {

  return true;
}

void msg_majiang_oper_trustee_broadcast::Swap(msg_majiang_oper_trustee_broadcast* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(trustee_, other->trustee_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_majiang_oper_trustee_broadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_majiang_oper_trustee_broadcast_descriptor_;
  metadata.reflection = msg_majiang_oper_trustee_broadcast_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace net

// @@protoc_insertion_point(global_scope)
