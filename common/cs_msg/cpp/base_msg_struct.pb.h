// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base_msg_struct.proto

#ifndef PROTOBUF_base_5fmsg_5fstruct_2eproto__INCLUDED
#define PROTOBUF_base_5fmsg_5fstruct_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace net {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
void protobuf_AssignDesc_base_5fmsg_5fstruct_2eproto();
void protobuf_ShutdownFile_base_5fmsg_5fstruct_2eproto();

class base_info;
class land_info;
class game_data_info;
class svr_info;
class room_info;
class seat_info;
class seat_face;
class looker_info;
class land_table_info;
class showhand_table_info;
class bainiu_table_info;
class texas_table_info;
class zajinhua_table_info;
class niuniu_table_info;
class baccarat_table_info;
class sangong_table_info;
class paijiu_table_info;
class everycolor_table_info;
class dice_table_info;
class majiang_table_info;
class slot_table_info;
class war_table_info;
class fight_table_info;
class robniu_table_info;
class table_face_info;
class fishing_table_info;
class twoeight_table_info;
class mission_data;
class item;
class item_bag;
class msg_cards;
class player_num;

// ===================================================================

class base_info : public ::google::protobuf::Message {
 public:
  base_info();
  virtual ~base_info();

  base_info(const base_info& from);

  inline base_info& operator=(const base_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const base_info& default_instance();

  void Swap(base_info* other);

  // implements Message ----------------------------------------------

  base_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const base_info& from);
  void MergeFrom(const base_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 sex = 3;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 3;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional int64 diamond = 4;
  inline bool has_diamond() const;
  inline void clear_diamond();
  static const int kDiamondFieldNumber = 4;
  inline ::google::protobuf::int64 diamond() const;
  inline void set_diamond(::google::protobuf::int64 value);

  // optional int64 coin = 5;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 5;
  inline ::google::protobuf::int64 coin() const;
  inline void set_coin(::google::protobuf::int64 value);

  // optional int64 score = 6;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 6;
  inline ::google::protobuf::int64 score() const;
  inline void set_score(::google::protobuf::int64 value);

  // optional int64 ingot = 7;
  inline bool has_ingot() const;
  inline void clear_ingot();
  static const int kIngotFieldNumber = 7;
  inline ::google::protobuf::int64 ingot() const;
  inline void set_ingot(::google::protobuf::int64 value);

  // optional int64 cvalue = 8;
  inline bool has_cvalue() const;
  inline void clear_cvalue();
  static const int kCvalueFieldNumber = 8;
  inline ::google::protobuf::int64 cvalue() const;
  inline void set_cvalue(::google::protobuf::int64 value);

  // optional int64 safe_coin = 9;
  inline bool has_safe_coin() const;
  inline void clear_safe_coin();
  static const int kSafeCoinFieldNumber = 9;
  inline ::google::protobuf::int64 safe_coin() const;
  inline void set_safe_coin(::google::protobuf::int64 value);

  // optional uint32 vip = 10;
  inline bool has_vip() const;
  inline void clear_vip();
  static const int kVipFieldNumber = 10;
  inline ::google::protobuf::uint32 vip() const;
  inline void set_vip(::google::protobuf::uint32 value);

  // optional uint32 safeboxstate = 11;
  inline bool has_safeboxstate() const;
  inline void clear_safeboxstate();
  static const int kSafeboxstateFieldNumber = 11;
  inline ::google::protobuf::uint32 safeboxstate() const;
  inline void set_safeboxstate(::google::protobuf::uint32 value);

  // optional uint32 clogin = 12;
  inline bool has_clogin() const;
  inline void clear_clogin();
  static const int kCloginFieldNumber = 12;
  inline ::google::protobuf::uint32 clogin() const;
  inline void set_clogin(::google::protobuf::uint32 value);

  // optional uint32 weeklogin = 13;
  inline bool has_weeklogin() const;
  inline void clear_weeklogin();
  static const int kWeekloginFieldNumber = 13;
  inline ::google::protobuf::uint32 weeklogin() const;
  inline void set_weeklogin(::google::protobuf::uint32 value);

  // optional uint32 reward = 14;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 14;
  inline ::google::protobuf::uint32 reward() const;
  inline void set_reward(::google::protobuf::uint32 value);

  // optional uint32 bankrupt = 15;
  inline bool has_bankrupt() const;
  inline void clear_bankrupt();
  static const int kBankruptFieldNumber = 15;
  inline ::google::protobuf::uint32 bankrupt() const;
  inline void set_bankrupt(::google::protobuf::uint32 value);

  // optional uint32 head_icon = 16;
  inline bool has_head_icon() const;
  inline void clear_head_icon();
  static const int kHeadIconFieldNumber = 16;
  inline ::google::protobuf::uint32 head_icon() const;
  inline void set_head_icon(::google::protobuf::uint32 value);

  // optional uint32 day_game_count = 17;
  inline bool has_day_game_count() const;
  inline void clear_day_game_count();
  static const int kDayGameCountFieldNumber = 17;
  inline ::google::protobuf::uint32 day_game_count() const;
  inline void set_day_game_count(::google::protobuf::uint32 value);

  // optional uint32 login_ip = 18;
  inline bool has_login_ip() const;
  inline void clear_login_ip();
  static const int kLoginIpFieldNumber = 18;
  inline ::google::protobuf::uint32 login_ip() const;
  inline void set_login_ip(::google::protobuf::uint32 value);

  // optional bytes city = 19;
  inline bool has_city() const;
  inline void clear_city();
  static const int kCityFieldNumber = 19;
  inline const ::std::string& city() const;
  inline void set_city(const ::std::string& value);
  inline void set_city(const char* value);
  inline void set_city(const void* value, size_t size);
  inline ::std::string* mutable_city();
  inline ::std::string* release_city();
  inline void set_allocated_city(::std::string* city);

  // optional int64 recharge = 20;
  inline bool has_recharge() const;
  inline void clear_recharge();
  static const int kRechargeFieldNumber = 20;
  inline ::google::protobuf::int64 recharge() const;
  inline void set_recharge(::google::protobuf::int64 value);

  // optional int64 converts = 21;
  inline bool has_converts() const;
  inline void clear_converts();
  static const int kConvertsFieldNumber = 21;
  inline ::google::protobuf::int64 converts() const;
  inline void set_converts(::google::protobuf::int64 value);

  // optional uint32 batchid = 22;
  inline bool has_batchid() const;
  inline void clear_batchid();
  static const int kBatchidFieldNumber = 22;
  inline ::google::protobuf::uint32 batchid() const;
  inline void set_batchid(::google::protobuf::uint32 value);

  // optional uint32 lvscore = 23;
  inline bool has_lvscore() const;
  inline void clear_lvscore();
  static const int kLvscoreFieldNumber = 23;
  inline ::google::protobuf::uint32 lvscore() const;
  inline void set_lvscore(::google::protobuf::uint32 value);

  // optional uint32 lvcoin = 24;
  inline bool has_lvcoin() const;
  inline void clear_lvcoin();
  static const int kLvcoinFieldNumber = 24;
  inline ::google::protobuf::uint32 lvcoin() const;
  inline void set_lvcoin(::google::protobuf::uint32 value);

  // optional uint64 postime = 25;
  inline bool has_postime() const;
  inline void clear_postime();
  static const int kPostimeFieldNumber = 25;
  inline ::google::protobuf::uint64 postime() const;
  inline void set_postime(::google::protobuf::uint64 value);

  // optional uint32 userright = 26;
  inline bool has_userright() const;
  inline void clear_userright();
  static const int kUserrightFieldNumber = 26;
  inline ::google::protobuf::uint32 userright() const;
  inline void set_userright(::google::protobuf::uint32 value);

  // optional int64 win = 27;
  inline bool has_win() const;
  inline void clear_win();
  static const int kWinFieldNumber = 27;
  inline ::google::protobuf::int64 win() const;
  inline void set_win(::google::protobuf::int64 value);

  // optional uint32 posrmb = 28;
  inline bool has_posrmb() const;
  inline void clear_posrmb();
  static const int kPosrmbFieldNumber = 28;
  inline ::google::protobuf::uint32 posrmb() const;
  inline void set_posrmb(::google::protobuf::uint32 value);

  // optional uint32 welcount = 29;
  inline bool has_welcount() const;
  inline void clear_welcount();
  static const int kWelcountFieldNumber = 29;
  inline ::google::protobuf::uint32 welcount() const;
  inline void set_welcount(::google::protobuf::uint32 value);

  // optional uint64 weltime = 30;
  inline bool has_weltime() const;
  inline void clear_weltime();
  static const int kWeltimeFieldNumber = 30;
  inline ::google::protobuf::uint64 weltime() const;
  inline void set_weltime(::google::protobuf::uint64 value);

  // optional uint32 recharge_actwle = 31;
  inline bool has_recharge_actwle() const;
  inline void clear_recharge_actwle();
  static const int kRechargeActwleFieldNumber = 31;
  inline ::google::protobuf::uint32 recharge_actwle() const;
  inline void set_recharge_actwle(::google::protobuf::uint32 value);

  // optional uint64 converts_actwle = 32;
  inline bool has_converts_actwle() const;
  inline void clear_converts_actwle();
  static const int kConvertsActwleFieldNumber = 32;
  inline ::google::protobuf::uint64 converts_actwle() const;
  inline void set_converts_actwle(::google::protobuf::uint64 value);

  // optional uint64 rtime = 33;
  inline bool has_rtime() const;
  inline void clear_rtime();
  static const int kRtimeFieldNumber = 33;
  inline ::google::protobuf::uint64 rtime() const;
  inline void set_rtime(::google::protobuf::uint64 value);

  // optional uint32 ispay = 34;
  inline bool has_ispay() const;
  inline void clear_ispay();
  static const int kIspayFieldNumber = 34;
  inline ::google::protobuf::uint32 ispay() const;
  inline void set_ispay(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.base_info)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_diamond();
  inline void clear_has_diamond();
  inline void set_has_coin();
  inline void clear_has_coin();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_ingot();
  inline void clear_has_ingot();
  inline void set_has_cvalue();
  inline void clear_has_cvalue();
  inline void set_has_safe_coin();
  inline void clear_has_safe_coin();
  inline void set_has_vip();
  inline void clear_has_vip();
  inline void set_has_safeboxstate();
  inline void clear_has_safeboxstate();
  inline void set_has_clogin();
  inline void clear_has_clogin();
  inline void set_has_weeklogin();
  inline void clear_has_weeklogin();
  inline void set_has_reward();
  inline void clear_has_reward();
  inline void set_has_bankrupt();
  inline void clear_has_bankrupt();
  inline void set_has_head_icon();
  inline void clear_has_head_icon();
  inline void set_has_day_game_count();
  inline void clear_has_day_game_count();
  inline void set_has_login_ip();
  inline void clear_has_login_ip();
  inline void set_has_city();
  inline void clear_has_city();
  inline void set_has_recharge();
  inline void clear_has_recharge();
  inline void set_has_converts();
  inline void clear_has_converts();
  inline void set_has_batchid();
  inline void clear_has_batchid();
  inline void set_has_lvscore();
  inline void clear_has_lvscore();
  inline void set_has_lvcoin();
  inline void clear_has_lvcoin();
  inline void set_has_postime();
  inline void clear_has_postime();
  inline void set_has_userright();
  inline void clear_has_userright();
  inline void set_has_win();
  inline void clear_has_win();
  inline void set_has_posrmb();
  inline void clear_has_posrmb();
  inline void set_has_welcount();
  inline void clear_has_welcount();
  inline void set_has_weltime();
  inline void clear_has_weltime();
  inline void set_has_recharge_actwle();
  inline void clear_has_recharge_actwle();
  inline void set_has_converts_actwle();
  inline void clear_has_converts_actwle();
  inline void set_has_rtime();
  inline void clear_has_rtime();
  inline void set_has_ispay();
  inline void clear_has_ispay();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::int64 diamond_;
  ::google::protobuf::int64 coin_;
  ::google::protobuf::int64 score_;
  ::google::protobuf::int64 ingot_;
  ::google::protobuf::int64 cvalue_;
  ::google::protobuf::int64 safe_coin_;
  ::google::protobuf::uint32 vip_;
  ::google::protobuf::uint32 safeboxstate_;
  ::google::protobuf::uint32 clogin_;
  ::google::protobuf::uint32 weeklogin_;
  ::google::protobuf::uint32 reward_;
  ::google::protobuf::uint32 bankrupt_;
  ::google::protobuf::uint32 head_icon_;
  ::google::protobuf::uint32 day_game_count_;
  ::std::string* city_;
  ::google::protobuf::int64 recharge_;
  ::google::protobuf::uint32 login_ip_;
  ::google::protobuf::uint32 batchid_;
  ::google::protobuf::int64 converts_;
  ::google::protobuf::uint32 lvscore_;
  ::google::protobuf::uint32 lvcoin_;
  ::google::protobuf::uint64 postime_;
  ::google::protobuf::int64 win_;
  ::google::protobuf::uint32 userright_;
  ::google::protobuf::uint32 posrmb_;
  ::google::protobuf::uint64 weltime_;
  ::google::protobuf::uint32 welcount_;
  ::google::protobuf::uint32 recharge_actwle_;
  ::google::protobuf::uint64 converts_actwle_;
  ::google::protobuf::uint64 rtime_;
  ::google::protobuf::uint32 ispay_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(34 + 31) / 32];

  friend void  protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_AssignDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_ShutdownFile_base_5fmsg_5fstruct_2eproto();

  void InitAsDefaultInstance();
  static base_info* default_instance_;
};
// -------------------------------------------------------------------

class land_info : public ::google::protobuf::Message {
 public:
  land_info();
  virtual ~land_info();

  land_info(const land_info& from);

  inline land_info& operator=(const land_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const land_info& default_instance();

  void Swap(land_info* other);

  // implements Message ----------------------------------------------

  land_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const land_info& from);
  void MergeFrom(const land_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 win = 1;
  inline bool has_win() const;
  inline void clear_win();
  static const int kWinFieldNumber = 1;
  inline ::google::protobuf::uint32 win() const;
  inline void set_win(::google::protobuf::uint32 value);

  // optional uint32 lose = 2;
  inline bool has_lose() const;
  inline void clear_lose();
  static const int kLoseFieldNumber = 2;
  inline ::google::protobuf::uint32 lose() const;
  inline void set_lose(::google::protobuf::uint32 value);

  // optional uint32 land = 3;
  inline bool has_land() const;
  inline void clear_land();
  static const int kLandFieldNumber = 3;
  inline ::google::protobuf::uint32 land() const;
  inline void set_land(::google::protobuf::uint32 value);

  // optional uint32 spring = 4;
  inline bool has_spring() const;
  inline void clear_spring();
  static const int kSpringFieldNumber = 4;
  inline ::google::protobuf::uint32 spring() const;
  inline void set_spring(::google::protobuf::uint32 value);

  // optional int64 maxwin = 5;
  inline bool has_maxwin() const;
  inline void clear_maxwin();
  static const int kMaxwinFieldNumber = 5;
  inline ::google::protobuf::int64 maxwin() const;
  inline void set_maxwin(::google::protobuf::int64 value);

  // optional uint32 winc = 6;
  inline bool has_winc() const;
  inline void clear_winc();
  static const int kWincFieldNumber = 6;
  inline ::google::protobuf::uint32 winc() const;
  inline void set_winc(::google::protobuf::uint32 value);

  // optional uint32 losec = 7;
  inline bool has_losec() const;
  inline void clear_losec();
  static const int kLosecFieldNumber = 7;
  inline ::google::protobuf::uint32 losec() const;
  inline void set_losec(::google::protobuf::uint32 value);

  // optional uint32 landc = 8;
  inline bool has_landc() const;
  inline void clear_landc();
  static const int kLandcFieldNumber = 8;
  inline ::google::protobuf::uint32 landc() const;
  inline void set_landc(::google::protobuf::uint32 value);

  // optional int64 maxwinc = 9;
  inline bool has_maxwinc() const;
  inline void clear_maxwinc();
  static const int kMaxwincFieldNumber = 9;
  inline ::google::protobuf::int64 maxwinc() const;
  inline void set_maxwinc(::google::protobuf::int64 value);

  // optional uint32 springc = 10;
  inline bool has_springc() const;
  inline void clear_springc();
  static const int kSpringcFieldNumber = 10;
  inline ::google::protobuf::uint32 springc() const;
  inline void set_springc(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.land_info)
 private:
  inline void set_has_win();
  inline void clear_has_win();
  inline void set_has_lose();
  inline void clear_has_lose();
  inline void set_has_land();
  inline void clear_has_land();
  inline void set_has_spring();
  inline void clear_has_spring();
  inline void set_has_maxwin();
  inline void clear_has_maxwin();
  inline void set_has_winc();
  inline void clear_has_winc();
  inline void set_has_losec();
  inline void clear_has_losec();
  inline void set_has_landc();
  inline void clear_has_landc();
  inline void set_has_maxwinc();
  inline void clear_has_maxwinc();
  inline void set_has_springc();
  inline void clear_has_springc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 win_;
  ::google::protobuf::uint32 lose_;
  ::google::protobuf::uint32 land_;
  ::google::protobuf::uint32 spring_;
  ::google::protobuf::int64 maxwin_;
  ::google::protobuf::uint32 winc_;
  ::google::protobuf::uint32 losec_;
  ::google::protobuf::int64 maxwinc_;
  ::google::protobuf::uint32 landc_;
  ::google::protobuf::uint32 springc_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_AssignDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_ShutdownFile_base_5fmsg_5fstruct_2eproto();

  void InitAsDefaultInstance();
  static land_info* default_instance_;
};
// -------------------------------------------------------------------

class game_data_info : public ::google::protobuf::Message {
 public:
  game_data_info();
  virtual ~game_data_info();

  game_data_info(const game_data_info& from);

  inline game_data_info& operator=(const game_data_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_data_info& default_instance();

  void Swap(game_data_info* other);

  // implements Message ----------------------------------------------

  game_data_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_data_info& from);
  void MergeFrom(const game_data_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 game_type = 1;
  inline bool has_game_type() const;
  inline void clear_game_type();
  static const int kGameTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 game_type() const;
  inline void set_game_type(::google::protobuf::uint32 value);

  // optional uint32 win = 2;
  inline bool has_win() const;
  inline void clear_win();
  static const int kWinFieldNumber = 2;
  inline ::google::protobuf::uint32 win() const;
  inline void set_win(::google::protobuf::uint32 value);

  // optional uint32 lose = 3;
  inline bool has_lose() const;
  inline void clear_lose();
  static const int kLoseFieldNumber = 3;
  inline ::google::protobuf::uint32 lose() const;
  inline void set_lose(::google::protobuf::uint32 value);

  // optional int64 maxwin = 4;
  inline bool has_maxwin() const;
  inline void clear_maxwin();
  static const int kMaxwinFieldNumber = 4;
  inline ::google::protobuf::int64 maxwin() const;
  inline void set_maxwin(::google::protobuf::int64 value);

  // optional uint32 winc = 5;
  inline bool has_winc() const;
  inline void clear_winc();
  static const int kWincFieldNumber = 5;
  inline ::google::protobuf::uint32 winc() const;
  inline void set_winc(::google::protobuf::uint32 value);

  // optional uint32 losec = 6;
  inline bool has_losec() const;
  inline void clear_losec();
  static const int kLosecFieldNumber = 6;
  inline ::google::protobuf::uint32 losec() const;
  inline void set_losec(::google::protobuf::uint32 value);

  // optional int64 maxwinc = 7;
  inline bool has_maxwinc() const;
  inline void clear_maxwinc();
  static const int kMaxwincFieldNumber = 7;
  inline ::google::protobuf::int64 maxwinc() const;
  inline void set_maxwinc(::google::protobuf::int64 value);

  // repeated uint32 maxcard = 8;
  inline int maxcard_size() const;
  inline void clear_maxcard();
  static const int kMaxcardFieldNumber = 8;
  inline ::google::protobuf::uint32 maxcard(int index) const;
  inline void set_maxcard(int index, ::google::protobuf::uint32 value);
  inline void add_maxcard(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      maxcard() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_maxcard();

  // repeated uint32 maxcardc = 9;
  inline int maxcardc_size() const;
  inline void clear_maxcardc();
  static const int kMaxcardcFieldNumber = 9;
  inline ::google::protobuf::uint32 maxcardc(int index) const;
  inline void set_maxcardc(int index, ::google::protobuf::uint32 value);
  inline void add_maxcardc(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      maxcardc() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_maxcardc();

  // optional int64 daywin = 10;
  inline bool has_daywin() const;
  inline void clear_daywin();
  static const int kDaywinFieldNumber = 10;
  inline ::google::protobuf::int64 daywin() const;
  inline void set_daywin(::google::protobuf::int64 value);

  // optional int64 daywinc = 11;
  inline bool has_daywinc() const;
  inline void clear_daywinc();
  static const int kDaywincFieldNumber = 11;
  inline ::google::protobuf::int64 daywinc() const;
  inline void set_daywinc(::google::protobuf::int64 value);

  // optional uint32 land = 12;
  inline bool has_land() const;
  inline void clear_land();
  static const int kLandFieldNumber = 12;
  inline ::google::protobuf::uint32 land() const;
  inline void set_land(::google::protobuf::uint32 value);

  // optional uint32 spring = 13;
  inline bool has_spring() const;
  inline void clear_spring();
  static const int kSpringFieldNumber = 13;
  inline ::google::protobuf::uint32 spring() const;
  inline void set_spring(::google::protobuf::uint32 value);

  // optional uint32 landc = 14;
  inline bool has_landc() const;
  inline void clear_landc();
  static const int kLandcFieldNumber = 14;
  inline ::google::protobuf::uint32 landc() const;
  inline void set_landc(::google::protobuf::uint32 value);

  // optional uint32 springc = 15;
  inline bool has_springc() const;
  inline void clear_springc();
  static const int kSpringcFieldNumber = 15;
  inline ::google::protobuf::uint32 springc() const;
  inline void set_springc(::google::protobuf::uint32 value);

  // optional int64 weekwinc = 16;
  inline bool has_weekwinc() const;
  inline void clear_weekwinc();
  static const int kWeekwincFieldNumber = 16;
  inline ::google::protobuf::int64 weekwinc() const;
  inline void set_weekwinc(::google::protobuf::int64 value);

  // optional int64 totalwinc = 17;
  inline bool has_totalwinc() const;
  inline void clear_totalwinc();
  static const int kTotalwincFieldNumber = 17;
  inline ::google::protobuf::int64 totalwinc() const;
  inline void set_totalwinc(::google::protobuf::int64 value);

  // optional int64 stockscore = 18;
  inline bool has_stockscore() const;
  inline void clear_stockscore();
  static const int kStockscoreFieldNumber = 18;
  inline ::google::protobuf::int64 stockscore() const;
  inline void set_stockscore(::google::protobuf::int64 value);

  // optional int64 gamecount = 19;
  inline bool has_gamecount() const;
  inline void clear_gamecount();
  static const int kGamecountFieldNumber = 19;
  inline ::google::protobuf::int64 gamecount() const;
  inline void set_gamecount(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:net.game_data_info)
 private:
  inline void set_has_game_type();
  inline void clear_has_game_type();
  inline void set_has_win();
  inline void clear_has_win();
  inline void set_has_lose();
  inline void clear_has_lose();
  inline void set_has_maxwin();
  inline void clear_has_maxwin();
  inline void set_has_winc();
  inline void clear_has_winc();
  inline void set_has_losec();
  inline void clear_has_losec();
  inline void set_has_maxwinc();
  inline void clear_has_maxwinc();
  inline void set_has_daywin();
  inline void clear_has_daywin();
  inline void set_has_daywinc();
  inline void clear_has_daywinc();
  inline void set_has_land();
  inline void clear_has_land();
  inline void set_has_spring();
  inline void clear_has_spring();
  inline void set_has_landc();
  inline void clear_has_landc();
  inline void set_has_springc();
  inline void clear_has_springc();
  inline void set_has_weekwinc();
  inline void clear_has_weekwinc();
  inline void set_has_totalwinc();
  inline void clear_has_totalwinc();
  inline void set_has_stockscore();
  inline void clear_has_stockscore();
  inline void set_has_gamecount();
  inline void clear_has_gamecount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 game_type_;
  ::google::protobuf::uint32 win_;
  ::google::protobuf::int64 maxwin_;
  ::google::protobuf::uint32 lose_;
  ::google::protobuf::uint32 winc_;
  ::google::protobuf::int64 maxwinc_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > maxcard_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > maxcardc_;
  ::google::protobuf::uint32 losec_;
  ::google::protobuf::uint32 land_;
  ::google::protobuf::int64 daywin_;
  ::google::protobuf::int64 daywinc_;
  ::google::protobuf::uint32 spring_;
  ::google::protobuf::uint32 landc_;
  ::google::protobuf::int64 weekwinc_;
  ::google::protobuf::int64 totalwinc_;
  ::google::protobuf::int64 stockscore_;
  ::google::protobuf::int64 gamecount_;
  ::google::protobuf::uint32 springc_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];

  friend void  protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_AssignDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_ShutdownFile_base_5fmsg_5fstruct_2eproto();

  void InitAsDefaultInstance();
  static game_data_info* default_instance_;
};
// -------------------------------------------------------------------

class svr_info : public ::google::protobuf::Message {
 public:
  svr_info();
  virtual ~svr_info();

  svr_info(const svr_info& from);

  inline svr_info& operator=(const svr_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const svr_info& default_instance();

  void Swap(svr_info* other);

  // implements Message ----------------------------------------------

  svr_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const svr_info& from);
  void MergeFrom(const svr_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrid = 1;
  inline bool has_svrid() const;
  inline void clear_svrid();
  static const int kSvridFieldNumber = 1;
  inline ::google::protobuf::uint32 svrid() const;
  inline void set_svrid(::google::protobuf::uint32 value);

  // optional uint32 state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // optional uint32 game_type = 3;
  inline bool has_game_type() const;
  inline void clear_game_type();
  static const int kGameTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 game_type() const;
  inline void set_game_type(::google::protobuf::uint32 value);

  // optional uint32 game_subtype = 4;
  inline bool has_game_subtype() const;
  inline void clear_game_subtype();
  static const int kGameSubtypeFieldNumber = 4;
  inline ::google::protobuf::uint32 game_subtype() const;
  inline void set_game_subtype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.svr_info)
 private:
  inline void set_has_svrid();
  inline void clear_has_svrid();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_game_type();
  inline void clear_has_game_type();
  inline void set_has_game_subtype();
  inline void clear_has_game_subtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 svrid_;
  ::google::protobuf::uint32 state_;
  ::google::protobuf::uint32 game_type_;
  ::google::protobuf::uint32 game_subtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_AssignDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_ShutdownFile_base_5fmsg_5fstruct_2eproto();

  void InitAsDefaultInstance();
  static svr_info* default_instance_;
};
// -------------------------------------------------------------------

class room_info : public ::google::protobuf::Message {
 public:
  room_info();
  virtual ~room_info();

  room_info(const room_info& from);

  inline room_info& operator=(const room_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const room_info& default_instance();

  void Swap(room_info* other);

  // implements Message ----------------------------------------------

  room_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const room_info& from);
  void MergeFrom(const room_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 consume = 2;
  inline bool has_consume() const;
  inline void clear_consume();
  static const int kConsumeFieldNumber = 2;
  inline ::google::protobuf::uint32 consume() const;
  inline void set_consume(::google::protobuf::uint32 value);

  // optional uint32 deal = 3;
  inline bool has_deal() const;
  inline void clear_deal();
  static const int kDealFieldNumber = 3;
  inline ::google::protobuf::uint32 deal() const;
  inline void set_deal(::google::protobuf::uint32 value);

  // optional uint64 enter_min = 4;
  inline bool has_enter_min() const;
  inline void clear_enter_min();
  static const int kEnterMinFieldNumber = 4;
  inline ::google::protobuf::uint64 enter_min() const;
  inline void set_enter_min(::google::protobuf::uint64 value);

  // optional uint64 enter_max = 5;
  inline bool has_enter_max() const;
  inline void clear_enter_max();
  static const int kEnterMaxFieldNumber = 5;
  inline ::google::protobuf::uint64 enter_max() const;
  inline void set_enter_max(::google::protobuf::uint64 value);

  // optional uint32 player_num = 6;
  inline bool has_player_num() const;
  inline void clear_player_num();
  static const int kPlayerNumFieldNumber = 6;
  inline ::google::protobuf::uint32 player_num() const;
  inline void set_player_num(::google::protobuf::uint32 value);

  // optional uint32 basescore = 7;
  inline bool has_basescore() const;
  inline void clear_basescore();
  static const int kBasescoreFieldNumber = 7;
  inline ::google::protobuf::uint32 basescore() const;
  inline void set_basescore(::google::protobuf::uint32 value);

  // optional uint32 create_table = 8;
  inline bool has_create_table() const;
  inline void clear_create_table();
  static const int kCreateTableFieldNumber = 8;
  inline ::google::protobuf::uint32 create_table() const;
  inline void set_create_table(::google::protobuf::uint32 value);

  // optional uint32 show_type = 9;
  inline bool has_show_type() const;
  inline void clear_show_type();
  static const int kShowTypeFieldNumber = 9;
  inline ::google::protobuf::uint32 show_type() const;
  inline void set_show_type(::google::protobuf::uint32 value);

  // optional uint32 show_pic = 10;
  inline bool has_show_pic() const;
  inline void clear_show_pic();
  static const int kShowPicFieldNumber = 10;
  inline ::google::protobuf::uint32 show_pic() const;
  inline void set_show_pic(::google::protobuf::uint32 value);

  // optional uint64 jetton_min = 11;
  inline bool has_jetton_min() const;
  inline void clear_jetton_min();
  static const int kJettonMinFieldNumber = 11;
  inline ::google::protobuf::uint64 jetton_min() const;
  inline void set_jetton_min(::google::protobuf::uint64 value);

  // optional uint32 maxjettonrate = 12;
  inline bool has_maxjettonrate() const;
  inline void clear_maxjettonrate();
  static const int kMaxjettonrateFieldNumber = 12;
  inline ::google::protobuf::uint32 maxjettonrate() const;
  inline void set_maxjettonrate(::google::protobuf::uint32 value);

  // optional uint32 uproom = 13;
  inline bool has_uproom() const;
  inline void clear_uproom();
  static const int kUproomFieldNumber = 13;
  inline ::google::protobuf::uint32 uproom() const;
  inline void set_uproom(::google::protobuf::uint32 value);

  // optional uint32 exitchip = 14;
  inline bool has_exitchip() const;
  inline void clear_exitchip();
  static const int kExitchipFieldNumber = 14;
  inline ::google::protobuf::uint32 exitchip() const;
  inline void set_exitchip(::google::protobuf::uint32 value);

  // optional bytes room_name = 15;
  inline bool has_room_name() const;
  inline void clear_room_name();
  static const int kRoomNameFieldNumber = 15;
  inline const ::std::string& room_name() const;
  inline void set_room_name(const ::std::string& value);
  inline void set_room_name(const char* value);
  inline void set_room_name(const void* value, size_t size);
  inline ::std::string* mutable_room_name();
  inline ::std::string* release_room_name();
  inline void set_allocated_room_name(::std::string* room_name);

  // @@protoc_insertion_point(class_scope:net.room_info)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_consume();
  inline void clear_has_consume();
  inline void set_has_deal();
  inline void clear_has_deal();
  inline void set_has_enter_min();
  inline void clear_has_enter_min();
  inline void set_has_enter_max();
  inline void clear_has_enter_max();
  inline void set_has_player_num();
  inline void clear_has_player_num();
  inline void set_has_basescore();
  inline void clear_has_basescore();
  inline void set_has_create_table();
  inline void clear_has_create_table();
  inline void set_has_show_type();
  inline void clear_has_show_type();
  inline void set_has_show_pic();
  inline void clear_has_show_pic();
  inline void set_has_jetton_min();
  inline void clear_has_jetton_min();
  inline void set_has_maxjettonrate();
  inline void clear_has_maxjettonrate();
  inline void set_has_uproom();
  inline void clear_has_uproom();
  inline void set_has_exitchip();
  inline void clear_has_exitchip();
  inline void set_has_room_name();
  inline void clear_has_room_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 consume_;
  ::google::protobuf::uint64 enter_min_;
  ::google::protobuf::uint32 deal_;
  ::google::protobuf::uint32 player_num_;
  ::google::protobuf::uint64 enter_max_;
  ::google::protobuf::uint32 basescore_;
  ::google::protobuf::uint32 create_table_;
  ::google::protobuf::uint32 show_type_;
  ::google::protobuf::uint32 show_pic_;
  ::google::protobuf::uint64 jetton_min_;
  ::google::protobuf::uint32 maxjettonrate_;
  ::google::protobuf::uint32 uproom_;
  ::std::string* room_name_;
  ::google::protobuf::uint32 exitchip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_AssignDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_ShutdownFile_base_5fmsg_5fstruct_2eproto();

  void InitAsDefaultInstance();
  static room_info* default_instance_;
};
// -------------------------------------------------------------------

class seat_info : public ::google::protobuf::Message {
 public:
  seat_info();
  virtual ~seat_info();

  seat_info(const seat_info& from);

  inline seat_info& operator=(const seat_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const seat_info& default_instance();

  void Swap(seat_info* other);

  // implements Message ----------------------------------------------

  seat_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const seat_info& from);
  void MergeFrom(const seat_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 sex = 3;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 3;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional int64 coin = 4;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 4;
  inline ::google::protobuf::int64 coin() const;
  inline void set_coin(::google::protobuf::int64 value);

  // optional int64 score = 5;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 5;
  inline ::google::protobuf::int64 score() const;
  inline void set_score(::google::protobuf::int64 value);

  // optional int64 cvalue = 6;
  inline bool has_cvalue() const;
  inline void clear_cvalue();
  static const int kCvalueFieldNumber = 6;
  inline ::google::protobuf::int64 cvalue() const;
  inline void set_cvalue(::google::protobuf::int64 value);

  // optional uint32 chairid = 7;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairidFieldNumber = 7;
  inline ::google::protobuf::uint32 chairid() const;
  inline void set_chairid(::google::protobuf::uint32 value);

  // optional uint32 head_icon = 8;
  inline bool has_head_icon() const;
  inline void clear_head_icon();
  static const int kHeadIconFieldNumber = 8;
  inline ::google::protobuf::uint32 head_icon() const;
  inline void set_head_icon(::google::protobuf::uint32 value);

  // optional int64 buyin = 9;
  inline bool has_buyin() const;
  inline void clear_buyin();
  static const int kBuyinFieldNumber = 9;
  inline ::google::protobuf::int64 buyin() const;
  inline void set_buyin(::google::protobuf::int64 value);

  // optional bytes city = 10;
  inline bool has_city() const;
  inline void clear_city();
  static const int kCityFieldNumber = 10;
  inline const ::std::string& city() const;
  inline void set_city(const ::std::string& value);
  inline void set_city(const char* value);
  inline void set_city(const void* value, size_t size);
  inline ::std::string* mutable_city();
  inline ::std::string* release_city();
  inline void set_allocated_city(::std::string* city);

  // optional uint32 wincount = 11;
  inline bool has_wincount() const;
  inline void clear_wincount();
  static const int kWincountFieldNumber = 11;
  inline ::google::protobuf::uint32 wincount() const;
  inline void set_wincount(::google::protobuf::uint32 value);

  // optional int64 betscore = 12;
  inline bool has_betscore() const;
  inline void clear_betscore();
  static const int kBetscoreFieldNumber = 12;
  inline ::google::protobuf::int64 betscore() const;
  inline void set_betscore(::google::protobuf::int64 value);

  // optional uint32 betcount = 13;
  inline bool has_betcount() const;
  inline void clear_betcount();
  static const int kBetcountFieldNumber = 13;
  inline ::google::protobuf::uint32 betcount() const;
  inline void set_betcount(::google::protobuf::uint32 value);

  // optional uint32 showuid = 14;
  inline bool has_showuid() const;
  inline void clear_showuid();
  static const int kShowuidFieldNumber = 14;
  inline ::google::protobuf::uint32 showuid() const;
  inline void set_showuid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.seat_info)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_coin();
  inline void clear_has_coin();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_cvalue();
  inline void clear_has_cvalue();
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_head_icon();
  inline void clear_has_head_icon();
  inline void set_has_buyin();
  inline void clear_has_buyin();
  inline void set_has_city();
  inline void clear_has_city();
  inline void set_has_wincount();
  inline void clear_has_wincount();
  inline void set_has_betscore();
  inline void clear_has_betscore();
  inline void set_has_betcount();
  inline void clear_has_betcount();
  inline void set_has_showuid();
  inline void clear_has_showuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::int64 coin_;
  ::google::protobuf::int64 score_;
  ::google::protobuf::int64 cvalue_;
  ::google::protobuf::uint32 chairid_;
  ::google::protobuf::uint32 head_icon_;
  ::google::protobuf::int64 buyin_;
  ::std::string* city_;
  ::google::protobuf::int64 betscore_;
  ::google::protobuf::uint32 wincount_;
  ::google::protobuf::uint32 betcount_;
  ::google::protobuf::uint32 showuid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_AssignDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_ShutdownFile_base_5fmsg_5fstruct_2eproto();

  void InitAsDefaultInstance();
  static seat_info* default_instance_;
};
// -------------------------------------------------------------------

class seat_face : public ::google::protobuf::Message {
 public:
  seat_face();
  virtual ~seat_face();

  seat_face(const seat_face& from);

  inline seat_face& operator=(const seat_face& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const seat_face& default_instance();

  void Swap(seat_face* other);

  // implements Message ----------------------------------------------

  seat_face* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const seat_face& from);
  void MergeFrom(const seat_face& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 head_icon = 3;
  inline bool has_head_icon() const;
  inline void clear_head_icon();
  static const int kHeadIconFieldNumber = 3;
  inline ::google::protobuf::uint32 head_icon() const;
  inline void set_head_icon(::google::protobuf::uint32 value);

  // optional uint32 ready = 4;
  inline bool has_ready() const;
  inline void clear_ready();
  static const int kReadyFieldNumber = 4;
  inline ::google::protobuf::uint32 ready() const;
  inline void set_ready(::google::protobuf::uint32 value);

  // optional uint32 chairid = 5;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairidFieldNumber = 5;
  inline ::google::protobuf::uint32 chairid() const;
  inline void set_chairid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.seat_face)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_head_icon();
  inline void clear_has_head_icon();
  inline void set_has_ready();
  inline void clear_has_ready();
  inline void set_has_chairid();
  inline void clear_has_chairid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 head_icon_;
  ::google::protobuf::uint32 ready_;
  ::google::protobuf::uint32 chairid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_AssignDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_ShutdownFile_base_5fmsg_5fstruct_2eproto();

  void InitAsDefaultInstance();
  static seat_face* default_instance_;
};
// -------------------------------------------------------------------

class looker_info : public ::google::protobuf::Message {
 public:
  looker_info();
  virtual ~looker_info();

  looker_info(const looker_info& from);

  inline looker_info& operator=(const looker_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const looker_info& default_instance();

  void Swap(looker_info* other);

  // implements Message ----------------------------------------------

  looker_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const looker_info& from);
  void MergeFrom(const looker_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 head_icon = 3;
  inline bool has_head_icon() const;
  inline void clear_head_icon();
  static const int kHeadIconFieldNumber = 3;
  inline ::google::protobuf::uint32 head_icon() const;
  inline void set_head_icon(::google::protobuf::uint32 value);

  // optional uint32 sex = 4;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 4;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional int64 score = 5;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 5;
  inline ::google::protobuf::int64 score() const;
  inline void set_score(::google::protobuf::int64 value);

  // optional int64 coin = 6;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 6;
  inline ::google::protobuf::int64 coin() const;
  inline void set_coin(::google::protobuf::int64 value);

  // optional bytes city = 7;
  inline bool has_city() const;
  inline void clear_city();
  static const int kCityFieldNumber = 7;
  inline const ::std::string& city() const;
  inline void set_city(const ::std::string& value);
  inline void set_city(const char* value);
  inline void set_city(const void* value, size_t size);
  inline ::std::string* mutable_city();
  inline ::std::string* release_city();
  inline void set_allocated_city(::std::string* city);

  // optional uint32 wincount = 8;
  inline bool has_wincount() const;
  inline void clear_wincount();
  static const int kWincountFieldNumber = 8;
  inline ::google::protobuf::uint32 wincount() const;
  inline void set_wincount(::google::protobuf::uint32 value);

  // optional int64 betscore = 9;
  inline bool has_betscore() const;
  inline void clear_betscore();
  static const int kBetscoreFieldNumber = 9;
  inline ::google::protobuf::int64 betscore() const;
  inline void set_betscore(::google::protobuf::int64 value);

  // optional uint32 betcount = 10;
  inline bool has_betcount() const;
  inline void clear_betcount();
  static const int kBetcountFieldNumber = 10;
  inline ::google::protobuf::uint32 betcount() const;
  inline void set_betcount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.looker_info)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_head_icon();
  inline void clear_has_head_icon();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_coin();
  inline void clear_has_coin();
  inline void set_has_city();
  inline void clear_has_city();
  inline void set_has_wincount();
  inline void clear_has_wincount();
  inline void set_has_betscore();
  inline void clear_has_betscore();
  inline void set_has_betcount();
  inline void clear_has_betcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 head_icon_;
  ::google::protobuf::int64 score_;
  ::google::protobuf::int64 coin_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 wincount_;
  ::std::string* city_;
  ::google::protobuf::int64 betscore_;
  ::google::protobuf::uint32 betcount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_AssignDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_ShutdownFile_base_5fmsg_5fstruct_2eproto();

  void InitAsDefaultInstance();
  static looker_info* default_instance_;
};
// -------------------------------------------------------------------

class land_table_info : public ::google::protobuf::Message {
 public:
  land_table_info();
  virtual ~land_table_info();

  land_table_info(const land_table_info& from);

  inline land_table_info& operator=(const land_table_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const land_table_info& default_instance();

  void Swap(land_table_info* other);

  // implements Message ----------------------------------------------

  land_table_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const land_table_info& from);
  void MergeFrom(const land_table_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::uint32 tableid() const;
  inline void set_tableid(::google::protobuf::uint32 value);

  // optional bytes tablename = 2;
  inline bool has_tablename() const;
  inline void clear_tablename();
  static const int kTablenameFieldNumber = 2;
  inline const ::std::string& tablename() const;
  inline void set_tablename(const ::std::string& value);
  inline void set_tablename(const char* value);
  inline void set_tablename(const void* value, size_t size);
  inline ::std::string* mutable_tablename();
  inline ::std::string* release_tablename();
  inline void set_allocated_tablename(::std::string* tablename);

  // optional uint32 is_passwd = 3;
  inline bool has_is_passwd() const;
  inline void clear_is_passwd();
  static const int kIsPasswdFieldNumber = 3;
  inline ::google::protobuf::uint32 is_passwd() const;
  inline void set_is_passwd(::google::protobuf::uint32 value);

  // optional uint32 deal = 4;
  inline bool has_deal() const;
  inline void clear_deal();
  static const int kDealFieldNumber = 4;
  inline ::google::protobuf::uint32 deal() const;
  inline void set_deal(::google::protobuf::uint32 value);

  // optional int64 basescore = 5;
  inline bool has_basescore() const;
  inline void clear_basescore();
  static const int kBasescoreFieldNumber = 5;
  inline ::google::protobuf::int64 basescore() const;
  inline void set_basescore(::google::protobuf::int64 value);

  // optional uint32 consume = 6;
  inline bool has_consume() const;
  inline void clear_consume();
  static const int kConsumeFieldNumber = 6;
  inline ::google::protobuf::uint32 consume() const;
  inline void set_consume(::google::protobuf::uint32 value);

  // optional uint64 entermin = 7;
  inline bool has_entermin() const;
  inline void clear_entermin();
  static const int kEnterminFieldNumber = 7;
  inline ::google::protobuf::uint64 entermin() const;
  inline void set_entermin(::google::protobuf::uint64 value);

  // optional uint32 duetime = 8;
  inline bool has_duetime() const;
  inline void clear_duetime();
  static const int kDuetimeFieldNumber = 8;
  inline ::google::protobuf::uint32 duetime() const;
  inline void set_duetime(::google::protobuf::uint32 value);

  // optional uint32 feetype = 9;
  inline bool has_feetype() const;
  inline void clear_feetype();
  static const int kFeetypeFieldNumber = 9;
  inline ::google::protobuf::uint32 feetype() const;
  inline void set_feetype(::google::protobuf::uint32 value);

  // optional int64 feevalue = 10;
  inline bool has_feevalue() const;
  inline void clear_feevalue();
  static const int kFeevalueFieldNumber = 10;
  inline ::google::protobuf::int64 feevalue() const;
  inline void set_feevalue(::google::protobuf::int64 value);

  // optional bytes hostname = 11;
  inline bool has_hostname() const;
  inline void clear_hostname();
  static const int kHostnameFieldNumber = 11;
  inline const ::std::string& hostname() const;
  inline void set_hostname(const ::std::string& value);
  inline void set_hostname(const char* value);
  inline void set_hostname(const void* value, size_t size);
  inline ::std::string* mutable_hostname();
  inline ::std::string* release_hostname();
  inline void set_allocated_hostname(::std::string* hostname);

  // optional uint32 show_hand_num = 12;
  inline bool has_show_hand_num() const;
  inline void clear_show_hand_num();
  static const int kShowHandNumFieldNumber = 12;
  inline ::google::protobuf::uint32 show_hand_num() const;
  inline void set_show_hand_num(::google::protobuf::uint32 value);

  // optional uint32 call_time = 13;
  inline bool has_call_time() const;
  inline void clear_call_time();
  static const int kCallTimeFieldNumber = 13;
  inline ::google::protobuf::uint32 call_time() const;
  inline void set_call_time(::google::protobuf::uint32 value);

  // optional uint32 card_time = 14;
  inline bool has_card_time() const;
  inline void clear_card_time();
  static const int kCardTimeFieldNumber = 14;
  inline ::google::protobuf::uint32 card_time() const;
  inline void set_card_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.land_table_info)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_tablename();
  inline void clear_has_tablename();
  inline void set_has_is_passwd();
  inline void clear_has_is_passwd();
  inline void set_has_deal();
  inline void clear_has_deal();
  inline void set_has_basescore();
  inline void clear_has_basescore();
  inline void set_has_consume();
  inline void clear_has_consume();
  inline void set_has_entermin();
  inline void clear_has_entermin();
  inline void set_has_duetime();
  inline void clear_has_duetime();
  inline void set_has_feetype();
  inline void clear_has_feetype();
  inline void set_has_feevalue();
  inline void clear_has_feevalue();
  inline void set_has_hostname();
  inline void clear_has_hostname();
  inline void set_has_show_hand_num();
  inline void clear_has_show_hand_num();
  inline void set_has_call_time();
  inline void clear_has_call_time();
  inline void set_has_card_time();
  inline void clear_has_card_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tablename_;
  ::google::protobuf::uint32 tableid_;
  ::google::protobuf::uint32 is_passwd_;
  ::google::protobuf::int64 basescore_;
  ::google::protobuf::uint32 deal_;
  ::google::protobuf::uint32 consume_;
  ::google::protobuf::uint64 entermin_;
  ::google::protobuf::uint32 duetime_;
  ::google::protobuf::uint32 feetype_;
  ::google::protobuf::int64 feevalue_;
  ::std::string* hostname_;
  ::google::protobuf::uint32 show_hand_num_;
  ::google::protobuf::uint32 call_time_;
  ::google::protobuf::uint32 card_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_AssignDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_ShutdownFile_base_5fmsg_5fstruct_2eproto();

  void InitAsDefaultInstance();
  static land_table_info* default_instance_;
};
// -------------------------------------------------------------------

class showhand_table_info : public ::google::protobuf::Message {
 public:
  showhand_table_info();
  virtual ~showhand_table_info();

  showhand_table_info(const showhand_table_info& from);

  inline showhand_table_info& operator=(const showhand_table_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const showhand_table_info& default_instance();

  void Swap(showhand_table_info* other);

  // implements Message ----------------------------------------------

  showhand_table_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const showhand_table_info& from);
  void MergeFrom(const showhand_table_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::uint32 tableid() const;
  inline void set_tableid(::google::protobuf::uint32 value);

  // optional bytes tablename = 2;
  inline bool has_tablename() const;
  inline void clear_tablename();
  static const int kTablenameFieldNumber = 2;
  inline const ::std::string& tablename() const;
  inline void set_tablename(const ::std::string& value);
  inline void set_tablename(const char* value);
  inline void set_tablename(const void* value, size_t size);
  inline ::std::string* mutable_tablename();
  inline ::std::string* release_tablename();
  inline void set_allocated_tablename(::std::string* tablename);

  // optional uint32 is_passwd = 3;
  inline bool has_is_passwd() const;
  inline void clear_is_passwd();
  static const int kIsPasswdFieldNumber = 3;
  inline ::google::protobuf::uint32 is_passwd() const;
  inline void set_is_passwd(::google::protobuf::uint32 value);

  // optional int64 basescore = 4;
  inline bool has_basescore() const;
  inline void clear_basescore();
  static const int kBasescoreFieldNumber = 4;
  inline ::google::protobuf::int64 basescore() const;
  inline void set_basescore(::google::protobuf::int64 value);

  // optional uint32 consume = 5;
  inline bool has_consume() const;
  inline void clear_consume();
  static const int kConsumeFieldNumber = 5;
  inline ::google::protobuf::uint32 consume() const;
  inline void set_consume(::google::protobuf::uint32 value);

  // optional uint64 entermin = 6;
  inline bool has_entermin() const;
  inline void clear_entermin();
  static const int kEnterminFieldNumber = 6;
  inline ::google::protobuf::uint64 entermin() const;
  inline void set_entermin(::google::protobuf::uint64 value);

  // optional uint32 duetime = 7;
  inline bool has_duetime() const;
  inline void clear_duetime();
  static const int kDuetimeFieldNumber = 7;
  inline ::google::protobuf::uint32 duetime() const;
  inline void set_duetime(::google::protobuf::uint32 value);

  // optional uint32 feetype = 8;
  inline bool has_feetype() const;
  inline void clear_feetype();
  static const int kFeetypeFieldNumber = 8;
  inline ::google::protobuf::uint32 feetype() const;
  inline void set_feetype(::google::protobuf::uint32 value);

  // optional int64 feevalue = 9;
  inline bool has_feevalue() const;
  inline void clear_feevalue();
  static const int kFeevalueFieldNumber = 9;
  inline ::google::protobuf::int64 feevalue() const;
  inline void set_feevalue(::google::protobuf::int64 value);

  // optional bytes hostname = 10;
  inline bool has_hostname() const;
  inline void clear_hostname();
  static const int kHostnameFieldNumber = 10;
  inline const ::std::string& hostname() const;
  inline void set_hostname(const ::std::string& value);
  inline void set_hostname(const char* value);
  inline void set_hostname(const void* value, size_t size);
  inline ::std::string* mutable_hostname();
  inline ::std::string* release_hostname();
  inline void set_allocated_hostname(::std::string* hostname);

  // optional uint32 card_time = 11;
  inline bool has_card_time() const;
  inline void clear_card_time();
  static const int kCardTimeFieldNumber = 11;
  inline ::google::protobuf::uint32 card_time() const;
  inline void set_card_time(::google::protobuf::uint32 value);

  // optional uint32 table_state = 12;
  inline bool has_table_state() const;
  inline void clear_table_state();
  static const int kTableStateFieldNumber = 12;
  inline ::google::protobuf::uint32 table_state() const;
  inline void set_table_state(::google::protobuf::uint32 value);

  // repeated .net.seat_face players = 13;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 13;
  inline const ::net::seat_face& players(int index) const;
  inline ::net::seat_face* mutable_players(int index);
  inline ::net::seat_face* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::net::seat_face >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::net::seat_face >*
      mutable_players();

  // @@protoc_insertion_point(class_scope:net.showhand_table_info)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_tablename();
  inline void clear_has_tablename();
  inline void set_has_is_passwd();
  inline void clear_has_is_passwd();
  inline void set_has_basescore();
  inline void clear_has_basescore();
  inline void set_has_consume();
  inline void clear_has_consume();
  inline void set_has_entermin();
  inline void clear_has_entermin();
  inline void set_has_duetime();
  inline void clear_has_duetime();
  inline void set_has_feetype();
  inline void clear_has_feetype();
  inline void set_has_feevalue();
  inline void clear_has_feevalue();
  inline void set_has_hostname();
  inline void clear_has_hostname();
  inline void set_has_card_time();
  inline void clear_has_card_time();
  inline void set_has_table_state();
  inline void clear_has_table_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tablename_;
  ::google::protobuf::uint32 tableid_;
  ::google::protobuf::uint32 is_passwd_;
  ::google::protobuf::int64 basescore_;
  ::google::protobuf::uint64 entermin_;
  ::google::protobuf::uint32 consume_;
  ::google::protobuf::uint32 duetime_;
  ::google::protobuf::int64 feevalue_;
  ::google::protobuf::uint32 feetype_;
  ::google::protobuf::uint32 card_time_;
  ::std::string* hostname_;
  ::google::protobuf::RepeatedPtrField< ::net::seat_face > players_;
  ::google::protobuf::uint32 table_state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_AssignDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_ShutdownFile_base_5fmsg_5fstruct_2eproto();

  void InitAsDefaultInstance();
  static showhand_table_info* default_instance_;
};
// -------------------------------------------------------------------

class bainiu_table_info : public ::google::protobuf::Message {
 public:
  bainiu_table_info();
  virtual ~bainiu_table_info();

  bainiu_table_info(const bainiu_table_info& from);

  inline bainiu_table_info& operator=(const bainiu_table_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bainiu_table_info& default_instance();

  void Swap(bainiu_table_info* other);

  // implements Message ----------------------------------------------

  bainiu_table_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const bainiu_table_info& from);
  void MergeFrom(const bainiu_table_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::uint32 tableid() const;
  inline void set_tableid(::google::protobuf::uint32 value);

  // optional bytes tablename = 2;
  inline bool has_tablename() const;
  inline void clear_tablename();
  static const int kTablenameFieldNumber = 2;
  inline const ::std::string& tablename() const;
  inline void set_tablename(const ::std::string& value);
  inline void set_tablename(const char* value);
  inline void set_tablename(const void* value, size_t size);
  inline ::std::string* mutable_tablename();
  inline ::std::string* release_tablename();
  inline void set_allocated_tablename(::std::string* tablename);

  // optional uint32 is_passwd = 3;
  inline bool has_is_passwd() const;
  inline void clear_is_passwd();
  static const int kIsPasswdFieldNumber = 3;
  inline ::google::protobuf::uint32 is_passwd() const;
  inline void set_is_passwd(::google::protobuf::uint32 value);

  // optional int64 basescore = 4;
  inline bool has_basescore() const;
  inline void clear_basescore();
  static const int kBasescoreFieldNumber = 4;
  inline ::google::protobuf::int64 basescore() const;
  inline void set_basescore(::google::protobuf::int64 value);

  // optional uint32 consume = 5;
  inline bool has_consume() const;
  inline void clear_consume();
  static const int kConsumeFieldNumber = 5;
  inline ::google::protobuf::uint32 consume() const;
  inline void set_consume(::google::protobuf::uint32 value);

  // optional uint64 entermin = 6;
  inline bool has_entermin() const;
  inline void clear_entermin();
  static const int kEnterminFieldNumber = 6;
  inline ::google::protobuf::uint64 entermin() const;
  inline void set_entermin(::google::protobuf::uint64 value);

  // optional uint32 duetime = 7;
  inline bool has_duetime() const;
  inline void clear_duetime();
  static const int kDuetimeFieldNumber = 7;
  inline ::google::protobuf::uint32 duetime() const;
  inline void set_duetime(::google::protobuf::uint32 value);

  // optional uint32 feetype = 8;
  inline bool has_feetype() const;
  inline void clear_feetype();
  static const int kFeetypeFieldNumber = 8;
  inline ::google::protobuf::uint32 feetype() const;
  inline void set_feetype(::google::protobuf::uint32 value);

  // optional int64 feevalue = 9;
  inline bool has_feevalue() const;
  inline void clear_feevalue();
  static const int kFeevalueFieldNumber = 9;
  inline ::google::protobuf::int64 feevalue() const;
  inline void set_feevalue(::google::protobuf::int64 value);

  // optional bytes hostname = 10;
  inline bool has_hostname() const;
  inline void clear_hostname();
  static const int kHostnameFieldNumber = 10;
  inline const ::std::string& hostname() const;
  inline void set_hostname(const ::std::string& value);
  inline void set_hostname(const char* value);
  inline void set_hostname(const void* value, size_t size);
  inline ::std::string* mutable_hostname();
  inline ::std::string* release_hostname();
  inline void set_allocated_hostname(::std::string* hostname);

  // optional uint32 card_time = 11;
  inline bool has_card_time() const;
  inline void clear_card_time();
  static const int kCardTimeFieldNumber = 11;
  inline ::google::protobuf::uint32 card_time() const;
  inline void set_card_time(::google::protobuf::uint32 value);

  // optional uint32 table_state = 12;
  inline bool has_table_state() const;
  inline void clear_table_state();
  static const int kTableStateFieldNumber = 12;
  inline ::google::protobuf::uint32 table_state() const;
  inline void set_table_state(::google::protobuf::uint32 value);

  // optional int64 sitdown = 13;
  inline bool has_sitdown() const;
  inline void clear_sitdown();
  static const int kSitdownFieldNumber = 13;
  inline ::google::protobuf::int64 sitdown() const;
  inline void set_sitdown(::google::protobuf::int64 value);

  // optional int64 apply_banker_condition = 14;
  inline bool has_apply_banker_condition() const;
  inline void clear_apply_banker_condition();
  static const int kApplyBankerConditionFieldNumber = 14;
  inline ::google::protobuf::int64 apply_banker_condition() const;
  inline void set_apply_banker_condition(::google::protobuf::int64 value);

  // optional int64 apply_banker_maxscore = 15;
  inline bool has_apply_banker_maxscore() const;
  inline void clear_apply_banker_maxscore();
  static const int kApplyBankerMaxscoreFieldNumber = 15;
  inline ::google::protobuf::int64 apply_banker_maxscore() const;
  inline void set_apply_banker_maxscore(::google::protobuf::int64 value);

  // optional uint32 banker_max_time = 16;
  inline bool has_banker_max_time() const;
  inline void clear_banker_max_time();
  static const int kBankerMaxTimeFieldNumber = 16;
  inline ::google::protobuf::uint32 banker_max_time() const;
  inline void set_banker_max_time(::google::protobuf::uint32 value);

  // optional uint32 max_jetton_rate = 17;
  inline bool has_max_jetton_rate() const;
  inline void clear_max_jetton_rate();
  static const int kMaxJettonRateFieldNumber = 17;
  inline ::google::protobuf::uint32 max_jetton_rate() const;
  inline void set_max_jetton_rate(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.bainiu_table_info)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_tablename();
  inline void clear_has_tablename();
  inline void set_has_is_passwd();
  inline void clear_has_is_passwd();
  inline void set_has_basescore();
  inline void clear_has_basescore();
  inline void set_has_consume();
  inline void clear_has_consume();
  inline void set_has_entermin();
  inline void clear_has_entermin();
  inline void set_has_duetime();
  inline void clear_has_duetime();
  inline void set_has_feetype();
  inline void clear_has_feetype();
  inline void set_has_feevalue();
  inline void clear_has_feevalue();
  inline void set_has_hostname();
  inline void clear_has_hostname();
  inline void set_has_card_time();
  inline void clear_has_card_time();
  inline void set_has_table_state();
  inline void clear_has_table_state();
  inline void set_has_sitdown();
  inline void clear_has_sitdown();
  inline void set_has_apply_banker_condition();
  inline void clear_has_apply_banker_condition();
  inline void set_has_apply_banker_maxscore();
  inline void clear_has_apply_banker_maxscore();
  inline void set_has_banker_max_time();
  inline void clear_has_banker_max_time();
  inline void set_has_max_jetton_rate();
  inline void clear_has_max_jetton_rate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tablename_;
  ::google::protobuf::uint32 tableid_;
  ::google::protobuf::uint32 is_passwd_;
  ::google::protobuf::int64 basescore_;
  ::google::protobuf::uint64 entermin_;
  ::google::protobuf::uint32 consume_;
  ::google::protobuf::uint32 duetime_;
  ::google::protobuf::int64 feevalue_;
  ::google::protobuf::uint32 feetype_;
  ::google::protobuf::uint32 card_time_;
  ::std::string* hostname_;
  ::google::protobuf::int64 sitdown_;
  ::google::protobuf::int64 apply_banker_condition_;
  ::google::protobuf::uint32 table_state_;
  ::google::protobuf::uint32 banker_max_time_;
  ::google::protobuf::int64 apply_banker_maxscore_;
  ::google::protobuf::uint32 max_jetton_rate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_AssignDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_ShutdownFile_base_5fmsg_5fstruct_2eproto();

  void InitAsDefaultInstance();
  static bainiu_table_info* default_instance_;
};
// -------------------------------------------------------------------

class texas_table_info : public ::google::protobuf::Message {
 public:
  texas_table_info();
  virtual ~texas_table_info();

  texas_table_info(const texas_table_info& from);

  inline texas_table_info& operator=(const texas_table_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const texas_table_info& default_instance();

  void Swap(texas_table_info* other);

  // implements Message ----------------------------------------------

  texas_table_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const texas_table_info& from);
  void MergeFrom(const texas_table_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::uint32 tableid() const;
  inline void set_tableid(::google::protobuf::uint32 value);

  // optional bytes tablename = 2;
  inline bool has_tablename() const;
  inline void clear_tablename();
  static const int kTablenameFieldNumber = 2;
  inline const ::std::string& tablename() const;
  inline void set_tablename(const ::std::string& value);
  inline void set_tablename(const char* value);
  inline void set_tablename(const void* value, size_t size);
  inline ::std::string* mutable_tablename();
  inline ::std::string* release_tablename();
  inline void set_allocated_tablename(::std::string* tablename);

  // optional uint32 is_passwd = 3;
  inline bool has_is_passwd() const;
  inline void clear_is_passwd();
  static const int kIsPasswdFieldNumber = 3;
  inline ::google::protobuf::uint32 is_passwd() const;
  inline void set_is_passwd(::google::protobuf::uint32 value);

  // optional int64 basescore = 4;
  inline bool has_basescore() const;
  inline void clear_basescore();
  static const int kBasescoreFieldNumber = 4;
  inline ::google::protobuf::int64 basescore() const;
  inline void set_basescore(::google::protobuf::int64 value);

  // optional uint32 consume = 5;
  inline bool has_consume() const;
  inline void clear_consume();
  static const int kConsumeFieldNumber = 5;
  inline ::google::protobuf::uint32 consume() const;
  inline void set_consume(::google::protobuf::uint32 value);

  // optional uint64 entermin = 6;
  inline bool has_entermin() const;
  inline void clear_entermin();
  static const int kEnterminFieldNumber = 6;
  inline ::google::protobuf::uint64 entermin() const;
  inline void set_entermin(::google::protobuf::uint64 value);

  // optional uint32 duetime = 7;
  inline bool has_duetime() const;
  inline void clear_duetime();
  static const int kDuetimeFieldNumber = 7;
  inline ::google::protobuf::uint32 duetime() const;
  inline void set_duetime(::google::protobuf::uint32 value);

  // optional uint32 feetype = 8;
  inline bool has_feetype() const;
  inline void clear_feetype();
  static const int kFeetypeFieldNumber = 8;
  inline ::google::protobuf::uint32 feetype() const;
  inline void set_feetype(::google::protobuf::uint32 value);

  // optional int64 feevalue = 9;
  inline bool has_feevalue() const;
  inline void clear_feevalue();
  static const int kFeevalueFieldNumber = 9;
  inline ::google::protobuf::int64 feevalue() const;
  inline void set_feevalue(::google::protobuf::int64 value);

  // optional bytes hostname = 10;
  inline bool has_hostname() const;
  inline void clear_hostname();
  static const int kHostnameFieldNumber = 10;
  inline const ::std::string& hostname() const;
  inline void set_hostname(const ::std::string& value);
  inline void set_hostname(const char* value);
  inline void set_hostname(const void* value, size_t size);
  inline ::std::string* mutable_hostname();
  inline ::std::string* release_hostname();
  inline void set_allocated_hostname(::std::string* hostname);

  // optional uint32 card_time = 11;
  inline bool has_card_time() const;
  inline void clear_card_time();
  static const int kCardTimeFieldNumber = 11;
  inline ::google::protobuf::uint32 card_time() const;
  inline void set_card_time(::google::protobuf::uint32 value);

  // optional uint32 table_state = 12;
  inline bool has_table_state() const;
  inline void clear_table_state();
  static const int kTableStateFieldNumber = 12;
  inline ::google::protobuf::uint32 table_state() const;
  inline void set_table_state(::google::protobuf::uint32 value);

  // optional int64 sitdown = 13;
  inline bool has_sitdown() const;
  inline void clear_sitdown();
  static const int kSitdownFieldNumber = 13;
  inline ::google::protobuf::int64 sitdown() const;
  inline void set_sitdown(::google::protobuf::int64 value);

  // optional uint32 player_num = 14;
  inline bool has_player_num() const;
  inline void clear_player_num();
  static const int kPlayerNumFieldNumber = 14;
  inline ::google::protobuf::uint32 player_num() const;
  inline void set_player_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.texas_table_info)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_tablename();
  inline void clear_has_tablename();
  inline void set_has_is_passwd();
  inline void clear_has_is_passwd();
  inline void set_has_basescore();
  inline void clear_has_basescore();
  inline void set_has_consume();
  inline void clear_has_consume();
  inline void set_has_entermin();
  inline void clear_has_entermin();
  inline void set_has_duetime();
  inline void clear_has_duetime();
  inline void set_has_feetype();
  inline void clear_has_feetype();
  inline void set_has_feevalue();
  inline void clear_has_feevalue();
  inline void set_has_hostname();
  inline void clear_has_hostname();
  inline void set_has_card_time();
  inline void clear_has_card_time();
  inline void set_has_table_state();
  inline void clear_has_table_state();
  inline void set_has_sitdown();
  inline void clear_has_sitdown();
  inline void set_has_player_num();
  inline void clear_has_player_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tablename_;
  ::google::protobuf::uint32 tableid_;
  ::google::protobuf::uint32 is_passwd_;
  ::google::protobuf::int64 basescore_;
  ::google::protobuf::uint64 entermin_;
  ::google::protobuf::uint32 consume_;
  ::google::protobuf::uint32 duetime_;
  ::google::protobuf::int64 feevalue_;
  ::google::protobuf::uint32 feetype_;
  ::google::protobuf::uint32 card_time_;
  ::std::string* hostname_;
  ::google::protobuf::int64 sitdown_;
  ::google::protobuf::uint32 table_state_;
  ::google::protobuf::uint32 player_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_AssignDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_ShutdownFile_base_5fmsg_5fstruct_2eproto();

  void InitAsDefaultInstance();
  static texas_table_info* default_instance_;
};
// -------------------------------------------------------------------

class zajinhua_table_info : public ::google::protobuf::Message {
 public:
  zajinhua_table_info();
  virtual ~zajinhua_table_info();

  zajinhua_table_info(const zajinhua_table_info& from);

  inline zajinhua_table_info& operator=(const zajinhua_table_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const zajinhua_table_info& default_instance();

  void Swap(zajinhua_table_info* other);

  // implements Message ----------------------------------------------

  zajinhua_table_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const zajinhua_table_info& from);
  void MergeFrom(const zajinhua_table_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::uint32 tableid() const;
  inline void set_tableid(::google::protobuf::uint32 value);

  // optional bytes tablename = 2;
  inline bool has_tablename() const;
  inline void clear_tablename();
  static const int kTablenameFieldNumber = 2;
  inline const ::std::string& tablename() const;
  inline void set_tablename(const ::std::string& value);
  inline void set_tablename(const char* value);
  inline void set_tablename(const void* value, size_t size);
  inline ::std::string* mutable_tablename();
  inline ::std::string* release_tablename();
  inline void set_allocated_tablename(::std::string* tablename);

  // optional uint32 is_passwd = 3;
  inline bool has_is_passwd() const;
  inline void clear_is_passwd();
  static const int kIsPasswdFieldNumber = 3;
  inline ::google::protobuf::uint32 is_passwd() const;
  inline void set_is_passwd(::google::protobuf::uint32 value);

  // optional int64 basescore = 4;
  inline bool has_basescore() const;
  inline void clear_basescore();
  static const int kBasescoreFieldNumber = 4;
  inline ::google::protobuf::int64 basescore() const;
  inline void set_basescore(::google::protobuf::int64 value);

  // optional uint32 consume = 5;
  inline bool has_consume() const;
  inline void clear_consume();
  static const int kConsumeFieldNumber = 5;
  inline ::google::protobuf::uint32 consume() const;
  inline void set_consume(::google::protobuf::uint32 value);

  // optional uint64 entermin = 6;
  inline bool has_entermin() const;
  inline void clear_entermin();
  static const int kEnterminFieldNumber = 6;
  inline ::google::protobuf::uint64 entermin() const;
  inline void set_entermin(::google::protobuf::uint64 value);

  // optional uint32 duetime = 7;
  inline bool has_duetime() const;
  inline void clear_duetime();
  static const int kDuetimeFieldNumber = 7;
  inline ::google::protobuf::uint32 duetime() const;
  inline void set_duetime(::google::protobuf::uint32 value);

  // optional uint32 feetype = 8;
  inline bool has_feetype() const;
  inline void clear_feetype();
  static const int kFeetypeFieldNumber = 8;
  inline ::google::protobuf::uint32 feetype() const;
  inline void set_feetype(::google::protobuf::uint32 value);

  // optional int64 feevalue = 9;
  inline bool has_feevalue() const;
  inline void clear_feevalue();
  static const int kFeevalueFieldNumber = 9;
  inline ::google::protobuf::int64 feevalue() const;
  inline void set_feevalue(::google::protobuf::int64 value);

  // optional bytes hostname = 10;
  inline bool has_hostname() const;
  inline void clear_hostname();
  static const int kHostnameFieldNumber = 10;
  inline const ::std::string& hostname() const;
  inline void set_hostname(const ::std::string& value);
  inline void set_hostname(const char* value);
  inline void set_hostname(const void* value, size_t size);
  inline ::std::string* mutable_hostname();
  inline ::std::string* release_hostname();
  inline void set_allocated_hostname(::std::string* hostname);

  // optional uint32 card_time = 11;
  inline bool has_card_time() const;
  inline void clear_card_time();
  static const int kCardTimeFieldNumber = 11;
  inline ::google::protobuf::uint32 card_time() const;
  inline void set_card_time(::google::protobuf::uint32 value);

  // optional uint32 table_state = 12;
  inline bool has_table_state() const;
  inline void clear_table_state();
  static const int kTableStateFieldNumber = 12;
  inline ::google::protobuf::uint32 table_state() const;
  inline void set_table_state(::google::protobuf::uint32 value);

  // optional uint32 compare_round = 13;
  inline bool has_compare_round() const;
  inline void clear_compare_round();
  static const int kCompareRoundFieldNumber = 13;
  inline ::google::protobuf::uint32 compare_round() const;
  inline void set_compare_round(::google::protobuf::uint32 value);

  // optional uint32 look_round = 14;
  inline bool has_look_round() const;
  inline void clear_look_round();
  static const int kLookRoundFieldNumber = 14;
  inline ::google::protobuf::uint32 look_round() const;
  inline void set_look_round(::google::protobuf::uint32 value);

  // optional uint32 limit_round = 15;
  inline bool has_limit_round() const;
  inline void clear_limit_round();
  static const int kLimitRoundFieldNumber = 15;
  inline ::google::protobuf::uint32 limit_round() const;
  inline void set_limit_round(::google::protobuf::uint32 value);

  // repeated uint32 ming_multip = 16;
  inline int ming_multip_size() const;
  inline void clear_ming_multip();
  static const int kMingMultipFieldNumber = 16;
  inline ::google::protobuf::uint32 ming_multip(int index) const;
  inline void set_ming_multip(int index, ::google::protobuf::uint32 value);
  inline void add_ming_multip(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ming_multip() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ming_multip();

  // repeated uint32 blind_multip = 17;
  inline int blind_multip_size() const;
  inline void clear_blind_multip();
  static const int kBlindMultipFieldNumber = 17;
  inline ::google::protobuf::uint32 blind_multip(int index) const;
  inline void set_blind_multip(int index, ::google::protobuf::uint32 value);
  inline void add_blind_multip(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      blind_multip() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_blind_multip();

  // @@protoc_insertion_point(class_scope:net.zajinhua_table_info)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_tablename();
  inline void clear_has_tablename();
  inline void set_has_is_passwd();
  inline void clear_has_is_passwd();
  inline void set_has_basescore();
  inline void clear_has_basescore();
  inline void set_has_consume();
  inline void clear_has_consume();
  inline void set_has_entermin();
  inline void clear_has_entermin();
  inline void set_has_duetime();
  inline void clear_has_duetime();
  inline void set_has_feetype();
  inline void clear_has_feetype();
  inline void set_has_feevalue();
  inline void clear_has_feevalue();
  inline void set_has_hostname();
  inline void clear_has_hostname();
  inline void set_has_card_time();
  inline void clear_has_card_time();
  inline void set_has_table_state();
  inline void clear_has_table_state();
  inline void set_has_compare_round();
  inline void clear_has_compare_round();
  inline void set_has_look_round();
  inline void clear_has_look_round();
  inline void set_has_limit_round();
  inline void clear_has_limit_round();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tablename_;
  ::google::protobuf::uint32 tableid_;
  ::google::protobuf::uint32 is_passwd_;
  ::google::protobuf::int64 basescore_;
  ::google::protobuf::uint64 entermin_;
  ::google::protobuf::uint32 consume_;
  ::google::protobuf::uint32 duetime_;
  ::google::protobuf::int64 feevalue_;
  ::google::protobuf::uint32 feetype_;
  ::google::protobuf::uint32 card_time_;
  ::std::string* hostname_;
  ::google::protobuf::uint32 table_state_;
  ::google::protobuf::uint32 compare_round_;
  ::google::protobuf::uint32 look_round_;
  ::google::protobuf::uint32 limit_round_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ming_multip_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > blind_multip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_AssignDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_ShutdownFile_base_5fmsg_5fstruct_2eproto();

  void InitAsDefaultInstance();
  static zajinhua_table_info* default_instance_;
};
// -------------------------------------------------------------------

class niuniu_table_info : public ::google::protobuf::Message {
 public:
  niuniu_table_info();
  virtual ~niuniu_table_info();

  niuniu_table_info(const niuniu_table_info& from);

  inline niuniu_table_info& operator=(const niuniu_table_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const niuniu_table_info& default_instance();

  void Swap(niuniu_table_info* other);

  // implements Message ----------------------------------------------

  niuniu_table_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const niuniu_table_info& from);
  void MergeFrom(const niuniu_table_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::uint32 tableid() const;
  inline void set_tableid(::google::protobuf::uint32 value);

  // optional bytes tablename = 2;
  inline bool has_tablename() const;
  inline void clear_tablename();
  static const int kTablenameFieldNumber = 2;
  inline const ::std::string& tablename() const;
  inline void set_tablename(const ::std::string& value);
  inline void set_tablename(const char* value);
  inline void set_tablename(const void* value, size_t size);
  inline ::std::string* mutable_tablename();
  inline ::std::string* release_tablename();
  inline void set_allocated_tablename(::std::string* tablename);

  // optional uint32 is_passwd = 3;
  inline bool has_is_passwd() const;
  inline void clear_is_passwd();
  static const int kIsPasswdFieldNumber = 3;
  inline ::google::protobuf::uint32 is_passwd() const;
  inline void set_is_passwd(::google::protobuf::uint32 value);

  // optional int64 basescore = 4;
  inline bool has_basescore() const;
  inline void clear_basescore();
  static const int kBasescoreFieldNumber = 4;
  inline ::google::protobuf::int64 basescore() const;
  inline void set_basescore(::google::protobuf::int64 value);

  // optional uint32 consume = 5;
  inline bool has_consume() const;
  inline void clear_consume();
  static const int kConsumeFieldNumber = 5;
  inline ::google::protobuf::uint32 consume() const;
  inline void set_consume(::google::protobuf::uint32 value);

  // optional uint64 entermin = 6;
  inline bool has_entermin() const;
  inline void clear_entermin();
  static const int kEnterminFieldNumber = 6;
  inline ::google::protobuf::uint64 entermin() const;
  inline void set_entermin(::google::protobuf::uint64 value);

  // optional uint32 duetime = 7;
  inline bool has_duetime() const;
  inline void clear_duetime();
  static const int kDuetimeFieldNumber = 7;
  inline ::google::protobuf::uint32 duetime() const;
  inline void set_duetime(::google::protobuf::uint32 value);

  // optional uint32 feetype = 8;
  inline bool has_feetype() const;
  inline void clear_feetype();
  static const int kFeetypeFieldNumber = 8;
  inline ::google::protobuf::uint32 feetype() const;
  inline void set_feetype(::google::protobuf::uint32 value);

  // optional int64 feevalue = 9;
  inline bool has_feevalue() const;
  inline void clear_feevalue();
  static const int kFeevalueFieldNumber = 9;
  inline ::google::protobuf::int64 feevalue() const;
  inline void set_feevalue(::google::protobuf::int64 value);

  // optional bytes hostname = 10;
  inline bool has_hostname() const;
  inline void clear_hostname();
  static const int kHostnameFieldNumber = 10;
  inline const ::std::string& hostname() const;
  inline void set_hostname(const ::std::string& value);
  inline void set_hostname(const char* value);
  inline void set_hostname(const void* value, size_t size);
  inline ::std::string* mutable_hostname();
  inline ::std::string* release_hostname();
  inline void set_allocated_hostname(::std::string* hostname);

  // optional uint32 table_state = 11;
  inline bool has_table_state() const;
  inline void clear_table_state();
  static const int kTableStateFieldNumber = 11;
  inline ::google::protobuf::uint32 table_state() const;
  inline void set_table_state(::google::protobuf::uint32 value);

  // optional uint32 seat_num = 12;
  inline bool has_seat_num() const;
  inline void clear_seat_num();
  static const int kSeatNumFieldNumber = 12;
  inline ::google::protobuf::uint32 seat_num() const;
  inline void set_seat_num(::google::protobuf::uint32 value);

  // optional uint32 can_banker = 13;
  inline bool has_can_banker() const;
  inline void clear_can_banker();
  static const int kCanBankerFieldNumber = 13;
  inline ::google::protobuf::uint32 can_banker() const;
  inline void set_can_banker(::google::protobuf::uint32 value);

  // optional uint32 apply_banker_time = 14;
  inline bool has_apply_banker_time() const;
  inline void clear_apply_banker_time();
  static const int kApplyBankerTimeFieldNumber = 14;
  inline ::google::protobuf::uint32 apply_banker_time() const;
  inline void set_apply_banker_time(::google::protobuf::uint32 value);

  // optional uint32 card_time = 15;
  inline bool has_card_time() const;
  inline void clear_card_time();
  static const int kCardTimeFieldNumber = 15;
  inline ::google::protobuf::uint32 card_time() const;
  inline void set_card_time(::google::protobuf::uint32 value);

  // optional uint32 show_card_time = 16;
  inline bool has_show_card_time() const;
  inline void clear_show_card_time();
  static const int kShowCardTimeFieldNumber = 16;
  inline ::google::protobuf::uint32 show_card_time() const;
  inline void set_show_card_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.niuniu_table_info)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_tablename();
  inline void clear_has_tablename();
  inline void set_has_is_passwd();
  inline void clear_has_is_passwd();
  inline void set_has_basescore();
  inline void clear_has_basescore();
  inline void set_has_consume();
  inline void clear_has_consume();
  inline void set_has_entermin();
  inline void clear_has_entermin();
  inline void set_has_duetime();
  inline void clear_has_duetime();
  inline void set_has_feetype();
  inline void clear_has_feetype();
  inline void set_has_feevalue();
  inline void clear_has_feevalue();
  inline void set_has_hostname();
  inline void clear_has_hostname();
  inline void set_has_table_state();
  inline void clear_has_table_state();
  inline void set_has_seat_num();
  inline void clear_has_seat_num();
  inline void set_has_can_banker();
  inline void clear_has_can_banker();
  inline void set_has_apply_banker_time();
  inline void clear_has_apply_banker_time();
  inline void set_has_card_time();
  inline void clear_has_card_time();
  inline void set_has_show_card_time();
  inline void clear_has_show_card_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tablename_;
  ::google::protobuf::uint32 tableid_;
  ::google::protobuf::uint32 is_passwd_;
  ::google::protobuf::int64 basescore_;
  ::google::protobuf::uint64 entermin_;
  ::google::protobuf::uint32 consume_;
  ::google::protobuf::uint32 duetime_;
  ::google::protobuf::int64 feevalue_;
  ::google::protobuf::uint32 feetype_;
  ::google::protobuf::uint32 table_state_;
  ::std::string* hostname_;
  ::google::protobuf::uint32 seat_num_;
  ::google::protobuf::uint32 can_banker_;
  ::google::protobuf::uint32 apply_banker_time_;
  ::google::protobuf::uint32 card_time_;
  ::google::protobuf::uint32 show_card_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_AssignDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_ShutdownFile_base_5fmsg_5fstruct_2eproto();

  void InitAsDefaultInstance();
  static niuniu_table_info* default_instance_;
};
// -------------------------------------------------------------------

class baccarat_table_info : public ::google::protobuf::Message {
 public:
  baccarat_table_info();
  virtual ~baccarat_table_info();

  baccarat_table_info(const baccarat_table_info& from);

  inline baccarat_table_info& operator=(const baccarat_table_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const baccarat_table_info& default_instance();

  void Swap(baccarat_table_info* other);

  // implements Message ----------------------------------------------

  baccarat_table_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const baccarat_table_info& from);
  void MergeFrom(const baccarat_table_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::uint32 tableid() const;
  inline void set_tableid(::google::protobuf::uint32 value);

  // optional bytes tablename = 2;
  inline bool has_tablename() const;
  inline void clear_tablename();
  static const int kTablenameFieldNumber = 2;
  inline const ::std::string& tablename() const;
  inline void set_tablename(const ::std::string& value);
  inline void set_tablename(const char* value);
  inline void set_tablename(const void* value, size_t size);
  inline ::std::string* mutable_tablename();
  inline ::std::string* release_tablename();
  inline void set_allocated_tablename(::std::string* tablename);

  // optional uint32 is_passwd = 3;
  inline bool has_is_passwd() const;
  inline void clear_is_passwd();
  static const int kIsPasswdFieldNumber = 3;
  inline ::google::protobuf::uint32 is_passwd() const;
  inline void set_is_passwd(::google::protobuf::uint32 value);

  // optional int64 basescore = 4;
  inline bool has_basescore() const;
  inline void clear_basescore();
  static const int kBasescoreFieldNumber = 4;
  inline ::google::protobuf::int64 basescore() const;
  inline void set_basescore(::google::protobuf::int64 value);

  // optional uint32 consume = 5;
  inline bool has_consume() const;
  inline void clear_consume();
  static const int kConsumeFieldNumber = 5;
  inline ::google::protobuf::uint32 consume() const;
  inline void set_consume(::google::protobuf::uint32 value);

  // optional uint64 entermin = 6;
  inline bool has_entermin() const;
  inline void clear_entermin();
  static const int kEnterminFieldNumber = 6;
  inline ::google::protobuf::uint64 entermin() const;
  inline void set_entermin(::google::protobuf::uint64 value);

  // optional uint32 duetime = 7;
  inline bool has_duetime() const;
  inline void clear_duetime();
  static const int kDuetimeFieldNumber = 7;
  inline ::google::protobuf::uint32 duetime() const;
  inline void set_duetime(::google::protobuf::uint32 value);

  // optional uint32 feetype = 8;
  inline bool has_feetype() const;
  inline void clear_feetype();
  static const int kFeetypeFieldNumber = 8;
  inline ::google::protobuf::uint32 feetype() const;
  inline void set_feetype(::google::protobuf::uint32 value);

  // optional int64 feevalue = 9;
  inline bool has_feevalue() const;
  inline void clear_feevalue();
  static const int kFeevalueFieldNumber = 9;
  inline ::google::protobuf::int64 feevalue() const;
  inline void set_feevalue(::google::protobuf::int64 value);

  // optional bytes hostname = 10;
  inline bool has_hostname() const;
  inline void clear_hostname();
  static const int kHostnameFieldNumber = 10;
  inline const ::std::string& hostname() const;
  inline void set_hostname(const ::std::string& value);
  inline void set_hostname(const char* value);
  inline void set_hostname(const void* value, size_t size);
  inline ::std::string* mutable_hostname();
  inline ::std::string* release_hostname();
  inline void set_allocated_hostname(::std::string* hostname);

  // optional uint32 card_time = 11;
  inline bool has_card_time() const;
  inline void clear_card_time();
  static const int kCardTimeFieldNumber = 11;
  inline ::google::protobuf::uint32 card_time() const;
  inline void set_card_time(::google::protobuf::uint32 value);

  // optional uint32 table_state = 12;
  inline bool has_table_state() const;
  inline void clear_table_state();
  static const int kTableStateFieldNumber = 12;
  inline ::google::protobuf::uint32 table_state() const;
  inline void set_table_state(::google::protobuf::uint32 value);

  // optional int64 sitdown = 13;
  inline bool has_sitdown() const;
  inline void clear_sitdown();
  static const int kSitdownFieldNumber = 13;
  inline ::google::protobuf::int64 sitdown() const;
  inline void set_sitdown(::google::protobuf::int64 value);

  // optional int64 apply_banker_condition = 14;
  inline bool has_apply_banker_condition() const;
  inline void clear_apply_banker_condition();
  static const int kApplyBankerConditionFieldNumber = 14;
  inline ::google::protobuf::int64 apply_banker_condition() const;
  inline void set_apply_banker_condition(::google::protobuf::int64 value);

  // optional int64 apply_banker_maxscore = 15;
  inline bool has_apply_banker_maxscore() const;
  inline void clear_apply_banker_maxscore();
  static const int kApplyBankerMaxscoreFieldNumber = 15;
  inline ::google::protobuf::int64 apply_banker_maxscore() const;
  inline void set_apply_banker_maxscore(::google::protobuf::int64 value);

  // optional uint32 banker_max_time = 16;
  inline bool has_banker_max_time() const;
  inline void clear_banker_max_time();
  static const int kBankerMaxTimeFieldNumber = 16;
  inline ::google::protobuf::uint32 banker_max_time() const;
  inline void set_banker_max_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.baccarat_table_info)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_tablename();
  inline void clear_has_tablename();
  inline void set_has_is_passwd();
  inline void clear_has_is_passwd();
  inline void set_has_basescore();
  inline void clear_has_basescore();
  inline void set_has_consume();
  inline void clear_has_consume();
  inline void set_has_entermin();
  inline void clear_has_entermin();
  inline void set_has_duetime();
  inline void clear_has_duetime();
  inline void set_has_feetype();
  inline void clear_has_feetype();
  inline void set_has_feevalue();
  inline void clear_has_feevalue();
  inline void set_has_hostname();
  inline void clear_has_hostname();
  inline void set_has_card_time();
  inline void clear_has_card_time();
  inline void set_has_table_state();
  inline void clear_has_table_state();
  inline void set_has_sitdown();
  inline void clear_has_sitdown();
  inline void set_has_apply_banker_condition();
  inline void clear_has_apply_banker_condition();
  inline void set_has_apply_banker_maxscore();
  inline void clear_has_apply_banker_maxscore();
  inline void set_has_banker_max_time();
  inline void clear_has_banker_max_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tablename_;
  ::google::protobuf::uint32 tableid_;
  ::google::protobuf::uint32 is_passwd_;
  ::google::protobuf::int64 basescore_;
  ::google::protobuf::uint64 entermin_;
  ::google::protobuf::uint32 consume_;
  ::google::protobuf::uint32 duetime_;
  ::google::protobuf::int64 feevalue_;
  ::google::protobuf::uint32 feetype_;
  ::google::protobuf::uint32 card_time_;
  ::std::string* hostname_;
  ::google::protobuf::int64 sitdown_;
  ::google::protobuf::int64 apply_banker_condition_;
  ::google::protobuf::uint32 table_state_;
  ::google::protobuf::uint32 banker_max_time_;
  ::google::protobuf::int64 apply_banker_maxscore_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_AssignDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_ShutdownFile_base_5fmsg_5fstruct_2eproto();

  void InitAsDefaultInstance();
  static baccarat_table_info* default_instance_;
};
// -------------------------------------------------------------------

class sangong_table_info : public ::google::protobuf::Message {
 public:
  sangong_table_info();
  virtual ~sangong_table_info();

  sangong_table_info(const sangong_table_info& from);

  inline sangong_table_info& operator=(const sangong_table_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sangong_table_info& default_instance();

  void Swap(sangong_table_info* other);

  // implements Message ----------------------------------------------

  sangong_table_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sangong_table_info& from);
  void MergeFrom(const sangong_table_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::uint32 tableid() const;
  inline void set_tableid(::google::protobuf::uint32 value);

  // optional bytes tablename = 2;
  inline bool has_tablename() const;
  inline void clear_tablename();
  static const int kTablenameFieldNumber = 2;
  inline const ::std::string& tablename() const;
  inline void set_tablename(const ::std::string& value);
  inline void set_tablename(const char* value);
  inline void set_tablename(const void* value, size_t size);
  inline ::std::string* mutable_tablename();
  inline ::std::string* release_tablename();
  inline void set_allocated_tablename(::std::string* tablename);

  // optional uint32 is_passwd = 3;
  inline bool has_is_passwd() const;
  inline void clear_is_passwd();
  static const int kIsPasswdFieldNumber = 3;
  inline ::google::protobuf::uint32 is_passwd() const;
  inline void set_is_passwd(::google::protobuf::uint32 value);

  // optional int64 basescore = 4;
  inline bool has_basescore() const;
  inline void clear_basescore();
  static const int kBasescoreFieldNumber = 4;
  inline ::google::protobuf::int64 basescore() const;
  inline void set_basescore(::google::protobuf::int64 value);

  // optional uint32 consume = 5;
  inline bool has_consume() const;
  inline void clear_consume();
  static const int kConsumeFieldNumber = 5;
  inline ::google::protobuf::uint32 consume() const;
  inline void set_consume(::google::protobuf::uint32 value);

  // optional uint64 entermin = 6;
  inline bool has_entermin() const;
  inline void clear_entermin();
  static const int kEnterminFieldNumber = 6;
  inline ::google::protobuf::uint64 entermin() const;
  inline void set_entermin(::google::protobuf::uint64 value);

  // optional uint32 duetime = 7;
  inline bool has_duetime() const;
  inline void clear_duetime();
  static const int kDuetimeFieldNumber = 7;
  inline ::google::protobuf::uint32 duetime() const;
  inline void set_duetime(::google::protobuf::uint32 value);

  // optional uint32 feetype = 8;
  inline bool has_feetype() const;
  inline void clear_feetype();
  static const int kFeetypeFieldNumber = 8;
  inline ::google::protobuf::uint32 feetype() const;
  inline void set_feetype(::google::protobuf::uint32 value);

  // optional int64 feevalue = 9;
  inline bool has_feevalue() const;
  inline void clear_feevalue();
  static const int kFeevalueFieldNumber = 9;
  inline ::google::protobuf::int64 feevalue() const;
  inline void set_feevalue(::google::protobuf::int64 value);

  // optional bytes hostname = 10;
  inline bool has_hostname() const;
  inline void clear_hostname();
  static const int kHostnameFieldNumber = 10;
  inline const ::std::string& hostname() const;
  inline void set_hostname(const ::std::string& value);
  inline void set_hostname(const char* value);
  inline void set_hostname(const void* value, size_t size);
  inline ::std::string* mutable_hostname();
  inline ::std::string* release_hostname();
  inline void set_allocated_hostname(::std::string* hostname);

  // optional uint32 table_state = 11;
  inline bool has_table_state() const;
  inline void clear_table_state();
  static const int kTableStateFieldNumber = 11;
  inline ::google::protobuf::uint32 table_state() const;
  inline void set_table_state(::google::protobuf::uint32 value);

  // optional uint32 seat_num = 12;
  inline bool has_seat_num() const;
  inline void clear_seat_num();
  static const int kSeatNumFieldNumber = 12;
  inline ::google::protobuf::uint32 seat_num() const;
  inline void set_seat_num(::google::protobuf::uint32 value);

  // optional uint32 can_banker = 13;
  inline bool has_can_banker() const;
  inline void clear_can_banker();
  static const int kCanBankerFieldNumber = 13;
  inline ::google::protobuf::uint32 can_banker() const;
  inline void set_can_banker(::google::protobuf::uint32 value);

  // optional uint32 apply_banker_time = 14;
  inline bool has_apply_banker_time() const;
  inline void clear_apply_banker_time();
  static const int kApplyBankerTimeFieldNumber = 14;
  inline ::google::protobuf::uint32 apply_banker_time() const;
  inline void set_apply_banker_time(::google::protobuf::uint32 value);

  // optional uint32 card_time = 15;
  inline bool has_card_time() const;
  inline void clear_card_time();
  static const int kCardTimeFieldNumber = 15;
  inline ::google::protobuf::uint32 card_time() const;
  inline void set_card_time(::google::protobuf::uint32 value);

  // optional uint32 show_card_time = 16;
  inline bool has_show_card_time() const;
  inline void clear_show_card_time();
  static const int kShowCardTimeFieldNumber = 16;
  inline ::google::protobuf::uint32 show_card_time() const;
  inline void set_show_card_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.sangong_table_info)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_tablename();
  inline void clear_has_tablename();
  inline void set_has_is_passwd();
  inline void clear_has_is_passwd();
  inline void set_has_basescore();
  inline void clear_has_basescore();
  inline void set_has_consume();
  inline void clear_has_consume();
  inline void set_has_entermin();
  inline void clear_has_entermin();
  inline void set_has_duetime();
  inline void clear_has_duetime();
  inline void set_has_feetype();
  inline void clear_has_feetype();
  inline void set_has_feevalue();
  inline void clear_has_feevalue();
  inline void set_has_hostname();
  inline void clear_has_hostname();
  inline void set_has_table_state();
  inline void clear_has_table_state();
  inline void set_has_seat_num();
  inline void clear_has_seat_num();
  inline void set_has_can_banker();
  inline void clear_has_can_banker();
  inline void set_has_apply_banker_time();
  inline void clear_has_apply_banker_time();
  inline void set_has_card_time();
  inline void clear_has_card_time();
  inline void set_has_show_card_time();
  inline void clear_has_show_card_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tablename_;
  ::google::protobuf::uint32 tableid_;
  ::google::protobuf::uint32 is_passwd_;
  ::google::protobuf::int64 basescore_;
  ::google::protobuf::uint64 entermin_;
  ::google::protobuf::uint32 consume_;
  ::google::protobuf::uint32 duetime_;
  ::google::protobuf::int64 feevalue_;
  ::google::protobuf::uint32 feetype_;
  ::google::protobuf::uint32 table_state_;
  ::std::string* hostname_;
  ::google::protobuf::uint32 seat_num_;
  ::google::protobuf::uint32 can_banker_;
  ::google::protobuf::uint32 apply_banker_time_;
  ::google::protobuf::uint32 card_time_;
  ::google::protobuf::uint32 show_card_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_AssignDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_ShutdownFile_base_5fmsg_5fstruct_2eproto();

  void InitAsDefaultInstance();
  static sangong_table_info* default_instance_;
};
// -------------------------------------------------------------------

class paijiu_table_info : public ::google::protobuf::Message {
 public:
  paijiu_table_info();
  virtual ~paijiu_table_info();

  paijiu_table_info(const paijiu_table_info& from);

  inline paijiu_table_info& operator=(const paijiu_table_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const paijiu_table_info& default_instance();

  void Swap(paijiu_table_info* other);

  // implements Message ----------------------------------------------

  paijiu_table_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const paijiu_table_info& from);
  void MergeFrom(const paijiu_table_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::uint32 tableid() const;
  inline void set_tableid(::google::protobuf::uint32 value);

  // optional bytes tablename = 2;
  inline bool has_tablename() const;
  inline void clear_tablename();
  static const int kTablenameFieldNumber = 2;
  inline const ::std::string& tablename() const;
  inline void set_tablename(const ::std::string& value);
  inline void set_tablename(const char* value);
  inline void set_tablename(const void* value, size_t size);
  inline ::std::string* mutable_tablename();
  inline ::std::string* release_tablename();
  inline void set_allocated_tablename(::std::string* tablename);

  // optional uint32 is_passwd = 3;
  inline bool has_is_passwd() const;
  inline void clear_is_passwd();
  static const int kIsPasswdFieldNumber = 3;
  inline ::google::protobuf::uint32 is_passwd() const;
  inline void set_is_passwd(::google::protobuf::uint32 value);

  // optional int64 basescore = 4;
  inline bool has_basescore() const;
  inline void clear_basescore();
  static const int kBasescoreFieldNumber = 4;
  inline ::google::protobuf::int64 basescore() const;
  inline void set_basescore(::google::protobuf::int64 value);

  // optional uint32 consume = 5;
  inline bool has_consume() const;
  inline void clear_consume();
  static const int kConsumeFieldNumber = 5;
  inline ::google::protobuf::uint32 consume() const;
  inline void set_consume(::google::protobuf::uint32 value);

  // optional uint64 entermin = 6;
  inline bool has_entermin() const;
  inline void clear_entermin();
  static const int kEnterminFieldNumber = 6;
  inline ::google::protobuf::uint64 entermin() const;
  inline void set_entermin(::google::protobuf::uint64 value);

  // optional uint32 duetime = 7;
  inline bool has_duetime() const;
  inline void clear_duetime();
  static const int kDuetimeFieldNumber = 7;
  inline ::google::protobuf::uint32 duetime() const;
  inline void set_duetime(::google::protobuf::uint32 value);

  // optional uint32 feetype = 8;
  inline bool has_feetype() const;
  inline void clear_feetype();
  static const int kFeetypeFieldNumber = 8;
  inline ::google::protobuf::uint32 feetype() const;
  inline void set_feetype(::google::protobuf::uint32 value);

  // optional int64 feevalue = 9;
  inline bool has_feevalue() const;
  inline void clear_feevalue();
  static const int kFeevalueFieldNumber = 9;
  inline ::google::protobuf::int64 feevalue() const;
  inline void set_feevalue(::google::protobuf::int64 value);

  // optional bytes hostname = 10;
  inline bool has_hostname() const;
  inline void clear_hostname();
  static const int kHostnameFieldNumber = 10;
  inline const ::std::string& hostname() const;
  inline void set_hostname(const ::std::string& value);
  inline void set_hostname(const char* value);
  inline void set_hostname(const void* value, size_t size);
  inline ::std::string* mutable_hostname();
  inline ::std::string* release_hostname();
  inline void set_allocated_hostname(::std::string* hostname);

  // optional uint32 card_time = 11;
  inline bool has_card_time() const;
  inline void clear_card_time();
  static const int kCardTimeFieldNumber = 11;
  inline ::google::protobuf::uint32 card_time() const;
  inline void set_card_time(::google::protobuf::uint32 value);

  // optional uint32 table_state = 12;
  inline bool has_table_state() const;
  inline void clear_table_state();
  static const int kTableStateFieldNumber = 12;
  inline ::google::protobuf::uint32 table_state() const;
  inline void set_table_state(::google::protobuf::uint32 value);

  // optional int64 sitdown = 13;
  inline bool has_sitdown() const;
  inline void clear_sitdown();
  static const int kSitdownFieldNumber = 13;
  inline ::google::protobuf::int64 sitdown() const;
  inline void set_sitdown(::google::protobuf::int64 value);

  // optional int64 apply_banker_condition = 14;
  inline bool has_apply_banker_condition() const;
  inline void clear_apply_banker_condition();
  static const int kApplyBankerConditionFieldNumber = 14;
  inline ::google::protobuf::int64 apply_banker_condition() const;
  inline void set_apply_banker_condition(::google::protobuf::int64 value);

  // optional int64 apply_banker_maxscore = 15;
  inline bool has_apply_banker_maxscore() const;
  inline void clear_apply_banker_maxscore();
  static const int kApplyBankerMaxscoreFieldNumber = 15;
  inline ::google::protobuf::int64 apply_banker_maxscore() const;
  inline void set_apply_banker_maxscore(::google::protobuf::int64 value);

  // optional uint32 banker_max_time = 16;
  inline bool has_banker_max_time() const;
  inline void clear_banker_max_time();
  static const int kBankerMaxTimeFieldNumber = 16;
  inline ::google::protobuf::uint32 banker_max_time() const;
  inline void set_banker_max_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.paijiu_table_info)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_tablename();
  inline void clear_has_tablename();
  inline void set_has_is_passwd();
  inline void clear_has_is_passwd();
  inline void set_has_basescore();
  inline void clear_has_basescore();
  inline void set_has_consume();
  inline void clear_has_consume();
  inline void set_has_entermin();
  inline void clear_has_entermin();
  inline void set_has_duetime();
  inline void clear_has_duetime();
  inline void set_has_feetype();
  inline void clear_has_feetype();
  inline void set_has_feevalue();
  inline void clear_has_feevalue();
  inline void set_has_hostname();
  inline void clear_has_hostname();
  inline void set_has_card_time();
  inline void clear_has_card_time();
  inline void set_has_table_state();
  inline void clear_has_table_state();
  inline void set_has_sitdown();
  inline void clear_has_sitdown();
  inline void set_has_apply_banker_condition();
  inline void clear_has_apply_banker_condition();
  inline void set_has_apply_banker_maxscore();
  inline void clear_has_apply_banker_maxscore();
  inline void set_has_banker_max_time();
  inline void clear_has_banker_max_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tablename_;
  ::google::protobuf::uint32 tableid_;
  ::google::protobuf::uint32 is_passwd_;
  ::google::protobuf::int64 basescore_;
  ::google::protobuf::uint64 entermin_;
  ::google::protobuf::uint32 consume_;
  ::google::protobuf::uint32 duetime_;
  ::google::protobuf::int64 feevalue_;
  ::google::protobuf::uint32 feetype_;
  ::google::protobuf::uint32 card_time_;
  ::std::string* hostname_;
  ::google::protobuf::int64 sitdown_;
  ::google::protobuf::int64 apply_banker_condition_;
  ::google::protobuf::uint32 table_state_;
  ::google::protobuf::uint32 banker_max_time_;
  ::google::protobuf::int64 apply_banker_maxscore_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_AssignDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_ShutdownFile_base_5fmsg_5fstruct_2eproto();

  void InitAsDefaultInstance();
  static paijiu_table_info* default_instance_;
};
// -------------------------------------------------------------------

class everycolor_table_info : public ::google::protobuf::Message {
 public:
  everycolor_table_info();
  virtual ~everycolor_table_info();

  everycolor_table_info(const everycolor_table_info& from);

  inline everycolor_table_info& operator=(const everycolor_table_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const everycolor_table_info& default_instance();

  void Swap(everycolor_table_info* other);

  // implements Message ----------------------------------------------

  everycolor_table_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const everycolor_table_info& from);
  void MergeFrom(const everycolor_table_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 basescore = 1;
  inline bool has_basescore() const;
  inline void clear_basescore();
  static const int kBasescoreFieldNumber = 1;
  inline ::google::protobuf::int64 basescore() const;
  inline void set_basescore(::google::protobuf::int64 value);

  // optional uint32 consume = 2;
  inline bool has_consume() const;
  inline void clear_consume();
  static const int kConsumeFieldNumber = 2;
  inline ::google::protobuf::uint32 consume() const;
  inline void set_consume(::google::protobuf::uint32 value);

  // optional uint32 feetype = 3;
  inline bool has_feetype() const;
  inline void clear_feetype();
  static const int kFeetypeFieldNumber = 3;
  inline ::google::protobuf::uint32 feetype() const;
  inline void set_feetype(::google::protobuf::uint32 value);

  // optional int64 feevalue = 4;
  inline bool has_feevalue() const;
  inline void clear_feevalue();
  static const int kFeevalueFieldNumber = 4;
  inline ::google::protobuf::int64 feevalue() const;
  inline void set_feevalue(::google::protobuf::int64 value);

  // optional uint32 table_state = 5;
  inline bool has_table_state() const;
  inline void clear_table_state();
  static const int kTableStateFieldNumber = 5;
  inline ::google::protobuf::uint32 table_state() const;
  inline void set_table_state(::google::protobuf::uint32 value);

  // optional uint32 add_score_time = 6;
  inline bool has_add_score_time() const;
  inline void clear_add_score_time();
  static const int kAddScoreTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 add_score_time() const;
  inline void set_add_score_time(::google::protobuf::uint32 value);

  // optional uint32 show_card_time = 7;
  inline bool has_show_card_time() const;
  inline void clear_show_card_time();
  static const int kShowCardTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 show_card_time() const;
  inline void set_show_card_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.everycolor_table_info)
 private:
  inline void set_has_basescore();
  inline void clear_has_basescore();
  inline void set_has_consume();
  inline void clear_has_consume();
  inline void set_has_feetype();
  inline void clear_has_feetype();
  inline void set_has_feevalue();
  inline void clear_has_feevalue();
  inline void set_has_table_state();
  inline void clear_has_table_state();
  inline void set_has_add_score_time();
  inline void clear_has_add_score_time();
  inline void set_has_show_card_time();
  inline void clear_has_show_card_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 basescore_;
  ::google::protobuf::uint32 consume_;
  ::google::protobuf::uint32 feetype_;
  ::google::protobuf::int64 feevalue_;
  ::google::protobuf::uint32 table_state_;
  ::google::protobuf::uint32 add_score_time_;
  ::google::protobuf::uint32 show_card_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_AssignDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_ShutdownFile_base_5fmsg_5fstruct_2eproto();

  void InitAsDefaultInstance();
  static everycolor_table_info* default_instance_;
};
// -------------------------------------------------------------------

class dice_table_info : public ::google::protobuf::Message {
 public:
  dice_table_info();
  virtual ~dice_table_info();

  dice_table_info(const dice_table_info& from);

  inline dice_table_info& operator=(const dice_table_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dice_table_info& default_instance();

  void Swap(dice_table_info* other);

  // implements Message ----------------------------------------------

  dice_table_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const dice_table_info& from);
  void MergeFrom(const dice_table_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::uint32 tableid() const;
  inline void set_tableid(::google::protobuf::uint32 value);

  // optional bytes tablename = 2;
  inline bool has_tablename() const;
  inline void clear_tablename();
  static const int kTablenameFieldNumber = 2;
  inline const ::std::string& tablename() const;
  inline void set_tablename(const ::std::string& value);
  inline void set_tablename(const char* value);
  inline void set_tablename(const void* value, size_t size);
  inline ::std::string* mutable_tablename();
  inline ::std::string* release_tablename();
  inline void set_allocated_tablename(::std::string* tablename);

  // optional uint32 is_passwd = 3;
  inline bool has_is_passwd() const;
  inline void clear_is_passwd();
  static const int kIsPasswdFieldNumber = 3;
  inline ::google::protobuf::uint32 is_passwd() const;
  inline void set_is_passwd(::google::protobuf::uint32 value);

  // optional int64 basescore = 4;
  inline bool has_basescore() const;
  inline void clear_basescore();
  static const int kBasescoreFieldNumber = 4;
  inline ::google::protobuf::int64 basescore() const;
  inline void set_basescore(::google::protobuf::int64 value);

  // optional uint32 consume = 5;
  inline bool has_consume() const;
  inline void clear_consume();
  static const int kConsumeFieldNumber = 5;
  inline ::google::protobuf::uint32 consume() const;
  inline void set_consume(::google::protobuf::uint32 value);

  // optional uint64 entermin = 6;
  inline bool has_entermin() const;
  inline void clear_entermin();
  static const int kEnterminFieldNumber = 6;
  inline ::google::protobuf::uint64 entermin() const;
  inline void set_entermin(::google::protobuf::uint64 value);

  // optional uint32 duetime = 7;
  inline bool has_duetime() const;
  inline void clear_duetime();
  static const int kDuetimeFieldNumber = 7;
  inline ::google::protobuf::uint32 duetime() const;
  inline void set_duetime(::google::protobuf::uint32 value);

  // optional uint32 feetype = 8;
  inline bool has_feetype() const;
  inline void clear_feetype();
  static const int kFeetypeFieldNumber = 8;
  inline ::google::protobuf::uint32 feetype() const;
  inline void set_feetype(::google::protobuf::uint32 value);

  // optional int64 feevalue = 9;
  inline bool has_feevalue() const;
  inline void clear_feevalue();
  static const int kFeevalueFieldNumber = 9;
  inline ::google::protobuf::int64 feevalue() const;
  inline void set_feevalue(::google::protobuf::int64 value);

  // optional bytes hostname = 10;
  inline bool has_hostname() const;
  inline void clear_hostname();
  static const int kHostnameFieldNumber = 10;
  inline const ::std::string& hostname() const;
  inline void set_hostname(const ::std::string& value);
  inline void set_hostname(const char* value);
  inline void set_hostname(const void* value, size_t size);
  inline ::std::string* mutable_hostname();
  inline ::std::string* release_hostname();
  inline void set_allocated_hostname(::std::string* hostname);

  // optional uint32 free_time = 11;
  inline bool has_free_time() const;
  inline void clear_free_time();
  static const int kFreeTimeFieldNumber = 11;
  inline ::google::protobuf::uint32 free_time() const;
  inline void set_free_time(::google::protobuf::uint32 value);

  // optional uint32 card_time = 12;
  inline bool has_card_time() const;
  inline void clear_card_time();
  static const int kCardTimeFieldNumber = 12;
  inline ::google::protobuf::uint32 card_time() const;
  inline void set_card_time(::google::protobuf::uint32 value);

  // optional uint32 dispatch_time = 13;
  inline bool has_dispatch_time() const;
  inline void clear_dispatch_time();
  static const int kDispatchTimeFieldNumber = 13;
  inline ::google::protobuf::uint32 dispatch_time() const;
  inline void set_dispatch_time(::google::protobuf::uint32 value);

  // optional uint32 table_state = 14;
  inline bool has_table_state() const;
  inline void clear_table_state();
  static const int kTableStateFieldNumber = 14;
  inline ::google::protobuf::uint32 table_state() const;
  inline void set_table_state(::google::protobuf::uint32 value);

  // optional int64 sitdown = 15;
  inline bool has_sitdown() const;
  inline void clear_sitdown();
  static const int kSitdownFieldNumber = 15;
  inline ::google::protobuf::int64 sitdown() const;
  inline void set_sitdown(::google::protobuf::int64 value);

  // optional int64 apply_banker_condition = 16;
  inline bool has_apply_banker_condition() const;
  inline void clear_apply_banker_condition();
  static const int kApplyBankerConditionFieldNumber = 16;
  inline ::google::protobuf::int64 apply_banker_condition() const;
  inline void set_apply_banker_condition(::google::protobuf::int64 value);

  // optional int64 apply_banker_maxscore = 17;
  inline bool has_apply_banker_maxscore() const;
  inline void clear_apply_banker_maxscore();
  static const int kApplyBankerMaxscoreFieldNumber = 17;
  inline ::google::protobuf::int64 apply_banker_maxscore() const;
  inline void set_apply_banker_maxscore(::google::protobuf::int64 value);

  // optional uint32 banker_max_time = 18;
  inline bool has_banker_max_time() const;
  inline void clear_banker_max_time();
  static const int kBankerMaxTimeFieldNumber = 18;
  inline ::google::protobuf::uint32 banker_max_time() const;
  inline void set_banker_max_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.dice_table_info)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_tablename();
  inline void clear_has_tablename();
  inline void set_has_is_passwd();
  inline void clear_has_is_passwd();
  inline void set_has_basescore();
  inline void clear_has_basescore();
  inline void set_has_consume();
  inline void clear_has_consume();
  inline void set_has_entermin();
  inline void clear_has_entermin();
  inline void set_has_duetime();
  inline void clear_has_duetime();
  inline void set_has_feetype();
  inline void clear_has_feetype();
  inline void set_has_feevalue();
  inline void clear_has_feevalue();
  inline void set_has_hostname();
  inline void clear_has_hostname();
  inline void set_has_free_time();
  inline void clear_has_free_time();
  inline void set_has_card_time();
  inline void clear_has_card_time();
  inline void set_has_dispatch_time();
  inline void clear_has_dispatch_time();
  inline void set_has_table_state();
  inline void clear_has_table_state();
  inline void set_has_sitdown();
  inline void clear_has_sitdown();
  inline void set_has_apply_banker_condition();
  inline void clear_has_apply_banker_condition();
  inline void set_has_apply_banker_maxscore();
  inline void clear_has_apply_banker_maxscore();
  inline void set_has_banker_max_time();
  inline void clear_has_banker_max_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tablename_;
  ::google::protobuf::uint32 tableid_;
  ::google::protobuf::uint32 is_passwd_;
  ::google::protobuf::int64 basescore_;
  ::google::protobuf::uint64 entermin_;
  ::google::protobuf::uint32 consume_;
  ::google::protobuf::uint32 duetime_;
  ::google::protobuf::int64 feevalue_;
  ::google::protobuf::uint32 feetype_;
  ::google::protobuf::uint32 free_time_;
  ::std::string* hostname_;
  ::google::protobuf::uint32 card_time_;
  ::google::protobuf::uint32 dispatch_time_;
  ::google::protobuf::int64 sitdown_;
  ::google::protobuf::int64 apply_banker_condition_;
  ::google::protobuf::uint32 table_state_;
  ::google::protobuf::uint32 banker_max_time_;
  ::google::protobuf::int64 apply_banker_maxscore_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];

  friend void  protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_AssignDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_ShutdownFile_base_5fmsg_5fstruct_2eproto();

  void InitAsDefaultInstance();
  static dice_table_info* default_instance_;
};
// -------------------------------------------------------------------

class majiang_table_info : public ::google::protobuf::Message {
 public:
  majiang_table_info();
  virtual ~majiang_table_info();

  majiang_table_info(const majiang_table_info& from);

  inline majiang_table_info& operator=(const majiang_table_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const majiang_table_info& default_instance();

  void Swap(majiang_table_info* other);

  // implements Message ----------------------------------------------

  majiang_table_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const majiang_table_info& from);
  void MergeFrom(const majiang_table_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::uint32 tableid() const;
  inline void set_tableid(::google::protobuf::uint32 value);

  // optional bytes tablename = 2;
  inline bool has_tablename() const;
  inline void clear_tablename();
  static const int kTablenameFieldNumber = 2;
  inline const ::std::string& tablename() const;
  inline void set_tablename(const ::std::string& value);
  inline void set_tablename(const char* value);
  inline void set_tablename(const void* value, size_t size);
  inline ::std::string* mutable_tablename();
  inline ::std::string* release_tablename();
  inline void set_allocated_tablename(::std::string* tablename);

  // optional uint32 is_passwd = 3;
  inline bool has_is_passwd() const;
  inline void clear_is_passwd();
  static const int kIsPasswdFieldNumber = 3;
  inline ::google::protobuf::uint32 is_passwd() const;
  inline void set_is_passwd(::google::protobuf::uint32 value);

  // optional uint32 deal = 4;
  inline bool has_deal() const;
  inline void clear_deal();
  static const int kDealFieldNumber = 4;
  inline ::google::protobuf::uint32 deal() const;
  inline void set_deal(::google::protobuf::uint32 value);

  // optional int64 basescore = 5;
  inline bool has_basescore() const;
  inline void clear_basescore();
  static const int kBasescoreFieldNumber = 5;
  inline ::google::protobuf::int64 basescore() const;
  inline void set_basescore(::google::protobuf::int64 value);

  // optional uint32 consume = 6;
  inline bool has_consume() const;
  inline void clear_consume();
  static const int kConsumeFieldNumber = 6;
  inline ::google::protobuf::uint32 consume() const;
  inline void set_consume(::google::protobuf::uint32 value);

  // optional uint64 entermin = 7;
  inline bool has_entermin() const;
  inline void clear_entermin();
  static const int kEnterminFieldNumber = 7;
  inline ::google::protobuf::uint64 entermin() const;
  inline void set_entermin(::google::protobuf::uint64 value);

  // optional uint32 duetime = 8;
  inline bool has_duetime() const;
  inline void clear_duetime();
  static const int kDuetimeFieldNumber = 8;
  inline ::google::protobuf::uint32 duetime() const;
  inline void set_duetime(::google::protobuf::uint32 value);

  // optional uint32 feetype = 9;
  inline bool has_feetype() const;
  inline void clear_feetype();
  static const int kFeetypeFieldNumber = 9;
  inline ::google::protobuf::uint32 feetype() const;
  inline void set_feetype(::google::protobuf::uint32 value);

  // optional int64 feevalue = 10;
  inline bool has_feevalue() const;
  inline void clear_feevalue();
  static const int kFeevalueFieldNumber = 10;
  inline ::google::protobuf::int64 feevalue() const;
  inline void set_feevalue(::google::protobuf::int64 value);

  // optional bytes hostname = 11;
  inline bool has_hostname() const;
  inline void clear_hostname();
  static const int kHostnameFieldNumber = 11;
  inline const ::std::string& hostname() const;
  inline void set_hostname(const ::std::string& value);
  inline void set_hostname(const char* value);
  inline void set_hostname(const void* value, size_t size);
  inline ::std::string* mutable_hostname();
  inline ::std::string* release_hostname();
  inline void set_allocated_hostname(::std::string* hostname);

  // optional uint32 show_hand_num = 12;
  inline bool has_show_hand_num() const;
  inline void clear_show_hand_num();
  static const int kShowHandNumFieldNumber = 12;
  inline ::google::protobuf::uint32 show_hand_num() const;
  inline void set_show_hand_num(::google::protobuf::uint32 value);

  // optional uint32 call_time = 13;
  inline bool has_call_time() const;
  inline void clear_call_time();
  static const int kCallTimeFieldNumber = 13;
  inline ::google::protobuf::uint32 call_time() const;
  inline void set_call_time(::google::protobuf::uint32 value);

  // optional uint32 card_time = 14;
  inline bool has_card_time() const;
  inline void clear_card_time();
  static const int kCardTimeFieldNumber = 14;
  inline ::google::protobuf::uint32 card_time() const;
  inline void set_card_time(::google::protobuf::uint32 value);

  // optional uint32 play_type = 15;
  inline bool has_play_type() const;
  inline void clear_play_type();
  static const int kPlayTypeFieldNumber = 15;
  inline ::google::protobuf::uint32 play_type() const;
  inline void set_play_type(::google::protobuf::uint32 value);

  // optional uint32 seat_num = 16;
  inline bool has_seat_num() const;
  inline void clear_seat_num();
  static const int kSeatNumFieldNumber = 16;
  inline ::google::protobuf::uint32 seat_num() const;
  inline void set_seat_num(::google::protobuf::uint32 value);

  // repeated uint32 kind_cards = 17;
  inline int kind_cards_size() const;
  inline void clear_kind_cards();
  static const int kKindCardsFieldNumber = 17;
  inline ::google::protobuf::uint32 kind_cards(int index) const;
  inline void set_kind_cards(int index, ::google::protobuf::uint32 value);
  inline void add_kind_cards(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      kind_cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_kind_cards();

  // @@protoc_insertion_point(class_scope:net.majiang_table_info)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_tablename();
  inline void clear_has_tablename();
  inline void set_has_is_passwd();
  inline void clear_has_is_passwd();
  inline void set_has_deal();
  inline void clear_has_deal();
  inline void set_has_basescore();
  inline void clear_has_basescore();
  inline void set_has_consume();
  inline void clear_has_consume();
  inline void set_has_entermin();
  inline void clear_has_entermin();
  inline void set_has_duetime();
  inline void clear_has_duetime();
  inline void set_has_feetype();
  inline void clear_has_feetype();
  inline void set_has_feevalue();
  inline void clear_has_feevalue();
  inline void set_has_hostname();
  inline void clear_has_hostname();
  inline void set_has_show_hand_num();
  inline void clear_has_show_hand_num();
  inline void set_has_call_time();
  inline void clear_has_call_time();
  inline void set_has_card_time();
  inline void clear_has_card_time();
  inline void set_has_play_type();
  inline void clear_has_play_type();
  inline void set_has_seat_num();
  inline void clear_has_seat_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tablename_;
  ::google::protobuf::uint32 tableid_;
  ::google::protobuf::uint32 is_passwd_;
  ::google::protobuf::int64 basescore_;
  ::google::protobuf::uint32 deal_;
  ::google::protobuf::uint32 consume_;
  ::google::protobuf::uint64 entermin_;
  ::google::protobuf::uint32 duetime_;
  ::google::protobuf::uint32 feetype_;
  ::google::protobuf::int64 feevalue_;
  ::std::string* hostname_;
  ::google::protobuf::uint32 show_hand_num_;
  ::google::protobuf::uint32 call_time_;
  ::google::protobuf::uint32 card_time_;
  ::google::protobuf::uint32 play_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > kind_cards_;
  ::google::protobuf::uint32 seat_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_AssignDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_ShutdownFile_base_5fmsg_5fstruct_2eproto();

  void InitAsDefaultInstance();
  static majiang_table_info* default_instance_;
};
// -------------------------------------------------------------------

class slot_table_info : public ::google::protobuf::Message {
 public:
  slot_table_info();
  virtual ~slot_table_info();

  slot_table_info(const slot_table_info& from);

  inline slot_table_info& operator=(const slot_table_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const slot_table_info& default_instance();

  void Swap(slot_table_info* other);

  // implements Message ----------------------------------------------

  slot_table_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const slot_table_info& from);
  void MergeFrom(const slot_table_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::uint32 tableid() const;
  inline void set_tableid(::google::protobuf::uint32 value);

  // optional bytes tablename = 2;
  inline bool has_tablename() const;
  inline void clear_tablename();
  static const int kTablenameFieldNumber = 2;
  inline const ::std::string& tablename() const;
  inline void set_tablename(const ::std::string& value);
  inline void set_tablename(const char* value);
  inline void set_tablename(const void* value, size_t size);
  inline ::std::string* mutable_tablename();
  inline ::std::string* release_tablename();
  inline void set_allocated_tablename(::std::string* tablename);

  // optional uint32 is_passwd = 3;
  inline bool has_is_passwd() const;
  inline void clear_is_passwd();
  static const int kIsPasswdFieldNumber = 3;
  inline ::google::protobuf::uint32 is_passwd() const;
  inline void set_is_passwd(::google::protobuf::uint32 value);

  // optional bytes hostname = 4;
  inline bool has_hostname() const;
  inline void clear_hostname();
  static const int kHostnameFieldNumber = 4;
  inline const ::std::string& hostname() const;
  inline void set_hostname(const ::std::string& value);
  inline void set_hostname(const char* value);
  inline void set_hostname(const void* value, size_t size);
  inline ::std::string* mutable_hostname();
  inline ::std::string* release_hostname();
  inline void set_allocated_hostname(::std::string* hostname);

  // optional int64 basescore = 5;
  inline bool has_basescore() const;
  inline void clear_basescore();
  static const int kBasescoreFieldNumber = 5;
  inline ::google::protobuf::int64 basescore() const;
  inline void set_basescore(::google::protobuf::int64 value);

  // optional uint32 consume = 6;
  inline bool has_consume() const;
  inline void clear_consume();
  static const int kConsumeFieldNumber = 6;
  inline ::google::protobuf::uint32 consume() const;
  inline void set_consume(::google::protobuf::uint32 value);

  // optional uint64 entermin = 7;
  inline bool has_entermin() const;
  inline void clear_entermin();
  static const int kEnterminFieldNumber = 7;
  inline ::google::protobuf::uint64 entermin() const;
  inline void set_entermin(::google::protobuf::uint64 value);

  // optional uint32 duetime = 8;
  inline bool has_duetime() const;
  inline void clear_duetime();
  static const int kDuetimeFieldNumber = 8;
  inline ::google::protobuf::uint32 duetime() const;
  inline void set_duetime(::google::protobuf::uint32 value);

  // optional uint32 feetype = 9;
  inline bool has_feetype() const;
  inline void clear_feetype();
  static const int kFeetypeFieldNumber = 9;
  inline ::google::protobuf::uint32 feetype() const;
  inline void set_feetype(::google::protobuf::uint32 value);

  // optional int64 feevalue = 10;
  inline bool has_feevalue() const;
  inline void clear_feevalue();
  static const int kFeevalueFieldNumber = 10;
  inline ::google::protobuf::int64 feevalue() const;
  inline void set_feevalue(::google::protobuf::int64 value);

  // optional uint32 seat_num = 11;
  inline bool has_seat_num() const;
  inline void clear_seat_num();
  static const int kSeatNumFieldNumber = 11;
  inline ::google::protobuf::uint32 seat_num() const;
  inline void set_seat_num(::google::protobuf::uint32 value);

  // optional uint32 jackpot_score = 12;
  inline bool has_jackpot_score() const;
  inline void clear_jackpot_score();
  static const int kJackpotScoreFieldNumber = 12;
  inline ::google::protobuf::uint32 jackpot_score() const;
  inline void set_jackpot_score(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.slot_table_info)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_tablename();
  inline void clear_has_tablename();
  inline void set_has_is_passwd();
  inline void clear_has_is_passwd();
  inline void set_has_hostname();
  inline void clear_has_hostname();
  inline void set_has_basescore();
  inline void clear_has_basescore();
  inline void set_has_consume();
  inline void clear_has_consume();
  inline void set_has_entermin();
  inline void clear_has_entermin();
  inline void set_has_duetime();
  inline void clear_has_duetime();
  inline void set_has_feetype();
  inline void clear_has_feetype();
  inline void set_has_feevalue();
  inline void clear_has_feevalue();
  inline void set_has_seat_num();
  inline void clear_has_seat_num();
  inline void set_has_jackpot_score();
  inline void clear_has_jackpot_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tablename_;
  ::google::protobuf::uint32 tableid_;
  ::google::protobuf::uint32 is_passwd_;
  ::std::string* hostname_;
  ::google::protobuf::int64 basescore_;
  ::google::protobuf::uint64 entermin_;
  ::google::protobuf::uint32 consume_;
  ::google::protobuf::uint32 duetime_;
  ::google::protobuf::int64 feevalue_;
  ::google::protobuf::uint32 feetype_;
  ::google::protobuf::uint32 seat_num_;
  ::google::protobuf::uint32 jackpot_score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_AssignDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_ShutdownFile_base_5fmsg_5fstruct_2eproto();

  void InitAsDefaultInstance();
  static slot_table_info* default_instance_;
};
// -------------------------------------------------------------------

class war_table_info : public ::google::protobuf::Message {
 public:
  war_table_info();
  virtual ~war_table_info();

  war_table_info(const war_table_info& from);

  inline war_table_info& operator=(const war_table_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const war_table_info& default_instance();

  void Swap(war_table_info* other);

  // implements Message ----------------------------------------------

  war_table_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const war_table_info& from);
  void MergeFrom(const war_table_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::uint32 tableid() const;
  inline void set_tableid(::google::protobuf::uint32 value);

  // optional bytes tablename = 2;
  inline bool has_tablename() const;
  inline void clear_tablename();
  static const int kTablenameFieldNumber = 2;
  inline const ::std::string& tablename() const;
  inline void set_tablename(const ::std::string& value);
  inline void set_tablename(const char* value);
  inline void set_tablename(const void* value, size_t size);
  inline ::std::string* mutable_tablename();
  inline ::std::string* release_tablename();
  inline void set_allocated_tablename(::std::string* tablename);

  // optional uint32 is_passwd = 3;
  inline bool has_is_passwd() const;
  inline void clear_is_passwd();
  static const int kIsPasswdFieldNumber = 3;
  inline ::google::protobuf::uint32 is_passwd() const;
  inline void set_is_passwd(::google::protobuf::uint32 value);

  // optional int64 basescore = 4;
  inline bool has_basescore() const;
  inline void clear_basescore();
  static const int kBasescoreFieldNumber = 4;
  inline ::google::protobuf::int64 basescore() const;
  inline void set_basescore(::google::protobuf::int64 value);

  // optional uint32 consume = 5;
  inline bool has_consume() const;
  inline void clear_consume();
  static const int kConsumeFieldNumber = 5;
  inline ::google::protobuf::uint32 consume() const;
  inline void set_consume(::google::protobuf::uint32 value);

  // optional uint64 entermin = 6;
  inline bool has_entermin() const;
  inline void clear_entermin();
  static const int kEnterminFieldNumber = 6;
  inline ::google::protobuf::uint64 entermin() const;
  inline void set_entermin(::google::protobuf::uint64 value);

  // optional uint32 duetime = 7;
  inline bool has_duetime() const;
  inline void clear_duetime();
  static const int kDuetimeFieldNumber = 7;
  inline ::google::protobuf::uint32 duetime() const;
  inline void set_duetime(::google::protobuf::uint32 value);

  // optional uint32 feetype = 8;
  inline bool has_feetype() const;
  inline void clear_feetype();
  static const int kFeetypeFieldNumber = 8;
  inline ::google::protobuf::uint32 feetype() const;
  inline void set_feetype(::google::protobuf::uint32 value);

  // optional int64 feevalue = 9;
  inline bool has_feevalue() const;
  inline void clear_feevalue();
  static const int kFeevalueFieldNumber = 9;
  inline ::google::protobuf::int64 feevalue() const;
  inline void set_feevalue(::google::protobuf::int64 value);

  // optional bytes hostname = 10;
  inline bool has_hostname() const;
  inline void clear_hostname();
  static const int kHostnameFieldNumber = 10;
  inline const ::std::string& hostname() const;
  inline void set_hostname(const ::std::string& value);
  inline void set_hostname(const char* value);
  inline void set_hostname(const void* value, size_t size);
  inline ::std::string* mutable_hostname();
  inline ::std::string* release_hostname();
  inline void set_allocated_hostname(::std::string* hostname);

  // optional uint32 card_time = 11;
  inline bool has_card_time() const;
  inline void clear_card_time();
  static const int kCardTimeFieldNumber = 11;
  inline ::google::protobuf::uint32 card_time() const;
  inline void set_card_time(::google::protobuf::uint32 value);

  // optional uint32 table_state = 12;
  inline bool has_table_state() const;
  inline void clear_table_state();
  static const int kTableStateFieldNumber = 12;
  inline ::google::protobuf::uint32 table_state() const;
  inline void set_table_state(::google::protobuf::uint32 value);

  // optional int64 sitdown = 13;
  inline bool has_sitdown() const;
  inline void clear_sitdown();
  static const int kSitdownFieldNumber = 13;
  inline ::google::protobuf::int64 sitdown() const;
  inline void set_sitdown(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:net.war_table_info)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_tablename();
  inline void clear_has_tablename();
  inline void set_has_is_passwd();
  inline void clear_has_is_passwd();
  inline void set_has_basescore();
  inline void clear_has_basescore();
  inline void set_has_consume();
  inline void clear_has_consume();
  inline void set_has_entermin();
  inline void clear_has_entermin();
  inline void set_has_duetime();
  inline void clear_has_duetime();
  inline void set_has_feetype();
  inline void clear_has_feetype();
  inline void set_has_feevalue();
  inline void clear_has_feevalue();
  inline void set_has_hostname();
  inline void clear_has_hostname();
  inline void set_has_card_time();
  inline void clear_has_card_time();
  inline void set_has_table_state();
  inline void clear_has_table_state();
  inline void set_has_sitdown();
  inline void clear_has_sitdown();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tablename_;
  ::google::protobuf::uint32 tableid_;
  ::google::protobuf::uint32 is_passwd_;
  ::google::protobuf::int64 basescore_;
  ::google::protobuf::uint64 entermin_;
  ::google::protobuf::uint32 consume_;
  ::google::protobuf::uint32 duetime_;
  ::google::protobuf::int64 feevalue_;
  ::google::protobuf::uint32 feetype_;
  ::google::protobuf::uint32 card_time_;
  ::std::string* hostname_;
  ::google::protobuf::int64 sitdown_;
  ::google::protobuf::uint32 table_state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_AssignDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_ShutdownFile_base_5fmsg_5fstruct_2eproto();

  void InitAsDefaultInstance();
  static war_table_info* default_instance_;
};
// -------------------------------------------------------------------

class fight_table_info : public ::google::protobuf::Message {
 public:
  fight_table_info();
  virtual ~fight_table_info();

  fight_table_info(const fight_table_info& from);

  inline fight_table_info& operator=(const fight_table_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fight_table_info& default_instance();

  void Swap(fight_table_info* other);

  // implements Message ----------------------------------------------

  fight_table_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const fight_table_info& from);
  void MergeFrom(const fight_table_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::uint32 tableid() const;
  inline void set_tableid(::google::protobuf::uint32 value);

  // optional bytes tablename = 2;
  inline bool has_tablename() const;
  inline void clear_tablename();
  static const int kTablenameFieldNumber = 2;
  inline const ::std::string& tablename() const;
  inline void set_tablename(const ::std::string& value);
  inline void set_tablename(const char* value);
  inline void set_tablename(const void* value, size_t size);
  inline ::std::string* mutable_tablename();
  inline ::std::string* release_tablename();
  inline void set_allocated_tablename(::std::string* tablename);

  // optional uint32 is_passwd = 3;
  inline bool has_is_passwd() const;
  inline void clear_is_passwd();
  static const int kIsPasswdFieldNumber = 3;
  inline ::google::protobuf::uint32 is_passwd() const;
  inline void set_is_passwd(::google::protobuf::uint32 value);

  // optional int64 basescore = 4;
  inline bool has_basescore() const;
  inline void clear_basescore();
  static const int kBasescoreFieldNumber = 4;
  inline ::google::protobuf::int64 basescore() const;
  inline void set_basescore(::google::protobuf::int64 value);

  // optional uint32 consume = 5;
  inline bool has_consume() const;
  inline void clear_consume();
  static const int kConsumeFieldNumber = 5;
  inline ::google::protobuf::uint32 consume() const;
  inline void set_consume(::google::protobuf::uint32 value);

  // optional uint64 entermin = 6;
  inline bool has_entermin() const;
  inline void clear_entermin();
  static const int kEnterminFieldNumber = 6;
  inline ::google::protobuf::uint64 entermin() const;
  inline void set_entermin(::google::protobuf::uint64 value);

  // optional uint32 duetime = 7;
  inline bool has_duetime() const;
  inline void clear_duetime();
  static const int kDuetimeFieldNumber = 7;
  inline ::google::protobuf::uint32 duetime() const;
  inline void set_duetime(::google::protobuf::uint32 value);

  // optional uint32 feetype = 8;
  inline bool has_feetype() const;
  inline void clear_feetype();
  static const int kFeetypeFieldNumber = 8;
  inline ::google::protobuf::uint32 feetype() const;
  inline void set_feetype(::google::protobuf::uint32 value);

  // optional int64 feevalue = 9;
  inline bool has_feevalue() const;
  inline void clear_feevalue();
  static const int kFeevalueFieldNumber = 9;
  inline ::google::protobuf::int64 feevalue() const;
  inline void set_feevalue(::google::protobuf::int64 value);

  // optional bytes hostname = 10;
  inline bool has_hostname() const;
  inline void clear_hostname();
  static const int kHostnameFieldNumber = 10;
  inline const ::std::string& hostname() const;
  inline void set_hostname(const ::std::string& value);
  inline void set_hostname(const char* value);
  inline void set_hostname(const void* value, size_t size);
  inline ::std::string* mutable_hostname();
  inline ::std::string* release_hostname();
  inline void set_allocated_hostname(::std::string* hostname);

  // optional uint32 card_time = 11;
  inline bool has_card_time() const;
  inline void clear_card_time();
  static const int kCardTimeFieldNumber = 11;
  inline ::google::protobuf::uint32 card_time() const;
  inline void set_card_time(::google::protobuf::uint32 value);

  // optional uint32 table_state = 12;
  inline bool has_table_state() const;
  inline void clear_table_state();
  static const int kTableStateFieldNumber = 12;
  inline ::google::protobuf::uint32 table_state() const;
  inline void set_table_state(::google::protobuf::uint32 value);

  // optional int64 sitdown = 13;
  inline bool has_sitdown() const;
  inline void clear_sitdown();
  static const int kSitdownFieldNumber = 13;
  inline ::google::protobuf::int64 sitdown() const;
  inline void set_sitdown(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:net.fight_table_info)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_tablename();
  inline void clear_has_tablename();
  inline void set_has_is_passwd();
  inline void clear_has_is_passwd();
  inline void set_has_basescore();
  inline void clear_has_basescore();
  inline void set_has_consume();
  inline void clear_has_consume();
  inline void set_has_entermin();
  inline void clear_has_entermin();
  inline void set_has_duetime();
  inline void clear_has_duetime();
  inline void set_has_feetype();
  inline void clear_has_feetype();
  inline void set_has_feevalue();
  inline void clear_has_feevalue();
  inline void set_has_hostname();
  inline void clear_has_hostname();
  inline void set_has_card_time();
  inline void clear_has_card_time();
  inline void set_has_table_state();
  inline void clear_has_table_state();
  inline void set_has_sitdown();
  inline void clear_has_sitdown();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tablename_;
  ::google::protobuf::uint32 tableid_;
  ::google::protobuf::uint32 is_passwd_;
  ::google::protobuf::int64 basescore_;
  ::google::protobuf::uint64 entermin_;
  ::google::protobuf::uint32 consume_;
  ::google::protobuf::uint32 duetime_;
  ::google::protobuf::int64 feevalue_;
  ::google::protobuf::uint32 feetype_;
  ::google::protobuf::uint32 card_time_;
  ::std::string* hostname_;
  ::google::protobuf::int64 sitdown_;
  ::google::protobuf::uint32 table_state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_AssignDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_ShutdownFile_base_5fmsg_5fstruct_2eproto();

  void InitAsDefaultInstance();
  static fight_table_info* default_instance_;
};
// -------------------------------------------------------------------

class robniu_table_info : public ::google::protobuf::Message {
 public:
  robniu_table_info();
  virtual ~robniu_table_info();

  robniu_table_info(const robniu_table_info& from);

  inline robniu_table_info& operator=(const robniu_table_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const robniu_table_info& default_instance();

  void Swap(robniu_table_info* other);

  // implements Message ----------------------------------------------

  robniu_table_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const robniu_table_info& from);
  void MergeFrom(const robniu_table_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::uint32 tableid() const;
  inline void set_tableid(::google::protobuf::uint32 value);

  // optional bytes tablename = 2;
  inline bool has_tablename() const;
  inline void clear_tablename();
  static const int kTablenameFieldNumber = 2;
  inline const ::std::string& tablename() const;
  inline void set_tablename(const ::std::string& value);
  inline void set_tablename(const char* value);
  inline void set_tablename(const void* value, size_t size);
  inline ::std::string* mutable_tablename();
  inline ::std::string* release_tablename();
  inline void set_allocated_tablename(::std::string* tablename);

  // optional uint32 is_passwd = 3;
  inline bool has_is_passwd() const;
  inline void clear_is_passwd();
  static const int kIsPasswdFieldNumber = 3;
  inline ::google::protobuf::uint32 is_passwd() const;
  inline void set_is_passwd(::google::protobuf::uint32 value);

  // optional int64 basescore = 4;
  inline bool has_basescore() const;
  inline void clear_basescore();
  static const int kBasescoreFieldNumber = 4;
  inline ::google::protobuf::int64 basescore() const;
  inline void set_basescore(::google::protobuf::int64 value);

  // optional uint32 consume = 5;
  inline bool has_consume() const;
  inline void clear_consume();
  static const int kConsumeFieldNumber = 5;
  inline ::google::protobuf::uint32 consume() const;
  inline void set_consume(::google::protobuf::uint32 value);

  // optional uint64 entermin = 6;
  inline bool has_entermin() const;
  inline void clear_entermin();
  static const int kEnterminFieldNumber = 6;
  inline ::google::protobuf::uint64 entermin() const;
  inline void set_entermin(::google::protobuf::uint64 value);

  // optional uint32 duetime = 7;
  inline bool has_duetime() const;
  inline void clear_duetime();
  static const int kDuetimeFieldNumber = 7;
  inline ::google::protobuf::uint32 duetime() const;
  inline void set_duetime(::google::protobuf::uint32 value);

  // optional uint32 feetype = 8;
  inline bool has_feetype() const;
  inline void clear_feetype();
  static const int kFeetypeFieldNumber = 8;
  inline ::google::protobuf::uint32 feetype() const;
  inline void set_feetype(::google::protobuf::uint32 value);

  // optional int64 feevalue = 9;
  inline bool has_feevalue() const;
  inline void clear_feevalue();
  static const int kFeevalueFieldNumber = 9;
  inline ::google::protobuf::int64 feevalue() const;
  inline void set_feevalue(::google::protobuf::int64 value);

  // optional bytes hostname = 10;
  inline bool has_hostname() const;
  inline void clear_hostname();
  static const int kHostnameFieldNumber = 10;
  inline const ::std::string& hostname() const;
  inline void set_hostname(const ::std::string& value);
  inline void set_hostname(const char* value);
  inline void set_hostname(const void* value, size_t size);
  inline ::std::string* mutable_hostname();
  inline ::std::string* release_hostname();
  inline void set_allocated_hostname(::std::string* hostname);

  // optional uint32 table_state = 11;
  inline bool has_table_state() const;
  inline void clear_table_state();
  static const int kTableStateFieldNumber = 11;
  inline ::google::protobuf::uint32 table_state() const;
  inline void set_table_state(::google::protobuf::uint32 value);

  // optional uint32 seat_num = 12;
  inline bool has_seat_num() const;
  inline void clear_seat_num();
  static const int kSeatNumFieldNumber = 12;
  inline ::google::protobuf::uint32 seat_num() const;
  inline void set_seat_num(::google::protobuf::uint32 value);

  // optional uint32 can_banker = 13;
  inline bool has_can_banker() const;
  inline void clear_can_banker();
  static const int kCanBankerFieldNumber = 13;
  inline ::google::protobuf::uint32 can_banker() const;
  inline void set_can_banker(::google::protobuf::uint32 value);

  // optional uint32 apply_banker_time = 14;
  inline bool has_apply_banker_time() const;
  inline void clear_apply_banker_time();
  static const int kApplyBankerTimeFieldNumber = 14;
  inline ::google::protobuf::uint32 apply_banker_time() const;
  inline void set_apply_banker_time(::google::protobuf::uint32 value);

  // optional uint32 card_time = 15;
  inline bool has_card_time() const;
  inline void clear_card_time();
  static const int kCardTimeFieldNumber = 15;
  inline ::google::protobuf::uint32 card_time() const;
  inline void set_card_time(::google::protobuf::uint32 value);

  // optional uint32 show_card_time = 16;
  inline bool has_show_card_time() const;
  inline void clear_show_card_time();
  static const int kShowCardTimeFieldNumber = 16;
  inline ::google::protobuf::uint32 show_card_time() const;
  inline void set_show_card_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.robniu_table_info)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_tablename();
  inline void clear_has_tablename();
  inline void set_has_is_passwd();
  inline void clear_has_is_passwd();
  inline void set_has_basescore();
  inline void clear_has_basescore();
  inline void set_has_consume();
  inline void clear_has_consume();
  inline void set_has_entermin();
  inline void clear_has_entermin();
  inline void set_has_duetime();
  inline void clear_has_duetime();
  inline void set_has_feetype();
  inline void clear_has_feetype();
  inline void set_has_feevalue();
  inline void clear_has_feevalue();
  inline void set_has_hostname();
  inline void clear_has_hostname();
  inline void set_has_table_state();
  inline void clear_has_table_state();
  inline void set_has_seat_num();
  inline void clear_has_seat_num();
  inline void set_has_can_banker();
  inline void clear_has_can_banker();
  inline void set_has_apply_banker_time();
  inline void clear_has_apply_banker_time();
  inline void set_has_card_time();
  inline void clear_has_card_time();
  inline void set_has_show_card_time();
  inline void clear_has_show_card_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tablename_;
  ::google::protobuf::uint32 tableid_;
  ::google::protobuf::uint32 is_passwd_;
  ::google::protobuf::int64 basescore_;
  ::google::protobuf::uint64 entermin_;
  ::google::protobuf::uint32 consume_;
  ::google::protobuf::uint32 duetime_;
  ::google::protobuf::int64 feevalue_;
  ::google::protobuf::uint32 feetype_;
  ::google::protobuf::uint32 table_state_;
  ::std::string* hostname_;
  ::google::protobuf::uint32 seat_num_;
  ::google::protobuf::uint32 can_banker_;
  ::google::protobuf::uint32 apply_banker_time_;
  ::google::protobuf::uint32 card_time_;
  ::google::protobuf::uint32 show_card_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_AssignDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_ShutdownFile_base_5fmsg_5fstruct_2eproto();

  void InitAsDefaultInstance();
  static robniu_table_info* default_instance_;
};
// -------------------------------------------------------------------

class table_face_info : public ::google::protobuf::Message {
 public:
  table_face_info();
  virtual ~table_face_info();

  table_face_info(const table_face_info& from);

  inline table_face_info& operator=(const table_face_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const table_face_info& default_instance();

  void Swap(table_face_info* other);

  // implements Message ----------------------------------------------

  table_face_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const table_face_info& from);
  void MergeFrom(const table_face_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .net.land_table_info land = 1;
  inline bool has_land() const;
  inline void clear_land();
  static const int kLandFieldNumber = 1;
  inline const ::net::land_table_info& land() const;
  inline ::net::land_table_info* mutable_land();
  inline ::net::land_table_info* release_land();
  inline void set_allocated_land(::net::land_table_info* land);

  // optional .net.showhand_table_info showhand = 2;
  inline bool has_showhand() const;
  inline void clear_showhand();
  static const int kShowhandFieldNumber = 2;
  inline const ::net::showhand_table_info& showhand() const;
  inline ::net::showhand_table_info* mutable_showhand();
  inline ::net::showhand_table_info* release_showhand();
  inline void set_allocated_showhand(::net::showhand_table_info* showhand);

  // optional .net.bainiu_table_info bainiu = 3;
  inline bool has_bainiu() const;
  inline void clear_bainiu();
  static const int kBainiuFieldNumber = 3;
  inline const ::net::bainiu_table_info& bainiu() const;
  inline ::net::bainiu_table_info* mutable_bainiu();
  inline ::net::bainiu_table_info* release_bainiu();
  inline void set_allocated_bainiu(::net::bainiu_table_info* bainiu);

  // optional .net.texas_table_info texas = 4;
  inline bool has_texas() const;
  inline void clear_texas();
  static const int kTexasFieldNumber = 4;
  inline const ::net::texas_table_info& texas() const;
  inline ::net::texas_table_info* mutable_texas();
  inline ::net::texas_table_info* release_texas();
  inline void set_allocated_texas(::net::texas_table_info* texas);

  // optional .net.zajinhua_table_info zajinhua = 5;
  inline bool has_zajinhua() const;
  inline void clear_zajinhua();
  static const int kZajinhuaFieldNumber = 5;
  inline const ::net::zajinhua_table_info& zajinhua() const;
  inline ::net::zajinhua_table_info* mutable_zajinhua();
  inline ::net::zajinhua_table_info* release_zajinhua();
  inline void set_allocated_zajinhua(::net::zajinhua_table_info* zajinhua);

  // optional .net.niuniu_table_info niuniu = 6;
  inline bool has_niuniu() const;
  inline void clear_niuniu();
  static const int kNiuniuFieldNumber = 6;
  inline const ::net::niuniu_table_info& niuniu() const;
  inline ::net::niuniu_table_info* mutable_niuniu();
  inline ::net::niuniu_table_info* release_niuniu();
  inline void set_allocated_niuniu(::net::niuniu_table_info* niuniu);

  // optional .net.baccarat_table_info baccarat = 7;
  inline bool has_baccarat() const;
  inline void clear_baccarat();
  static const int kBaccaratFieldNumber = 7;
  inline const ::net::baccarat_table_info& baccarat() const;
  inline ::net::baccarat_table_info* mutable_baccarat();
  inline ::net::baccarat_table_info* release_baccarat();
  inline void set_allocated_baccarat(::net::baccarat_table_info* baccarat);

  // optional .net.sangong_table_info sangong = 8;
  inline bool has_sangong() const;
  inline void clear_sangong();
  static const int kSangongFieldNumber = 8;
  inline const ::net::sangong_table_info& sangong() const;
  inline ::net::sangong_table_info* mutable_sangong();
  inline ::net::sangong_table_info* release_sangong();
  inline void set_allocated_sangong(::net::sangong_table_info* sangong);

  // optional .net.paijiu_table_info paijiu = 9;
  inline bool has_paijiu() const;
  inline void clear_paijiu();
  static const int kPaijiuFieldNumber = 9;
  inline const ::net::paijiu_table_info& paijiu() const;
  inline ::net::paijiu_table_info* mutable_paijiu();
  inline ::net::paijiu_table_info* release_paijiu();
  inline void set_allocated_paijiu(::net::paijiu_table_info* paijiu);

  // optional .net.everycolor_table_info everycolor = 10;
  inline bool has_everycolor() const;
  inline void clear_everycolor();
  static const int kEverycolorFieldNumber = 10;
  inline const ::net::everycolor_table_info& everycolor() const;
  inline ::net::everycolor_table_info* mutable_everycolor();
  inline ::net::everycolor_table_info* release_everycolor();
  inline void set_allocated_everycolor(::net::everycolor_table_info* everycolor);

  // optional .net.dice_table_info dice = 11;
  inline bool has_dice() const;
  inline void clear_dice();
  static const int kDiceFieldNumber = 11;
  inline const ::net::dice_table_info& dice() const;
  inline ::net::dice_table_info* mutable_dice();
  inline ::net::dice_table_info* release_dice();
  inline void set_allocated_dice(::net::dice_table_info* dice);

  // optional .net.majiang_table_info majiang = 12;
  inline bool has_majiang() const;
  inline void clear_majiang();
  static const int kMajiangFieldNumber = 12;
  inline const ::net::majiang_table_info& majiang() const;
  inline ::net::majiang_table_info* mutable_majiang();
  inline ::net::majiang_table_info* release_majiang();
  inline void set_allocated_majiang(::net::majiang_table_info* majiang);

  // optional .net.slot_table_info slot = 13;
  inline bool has_slot() const;
  inline void clear_slot();
  static const int kSlotFieldNumber = 13;
  inline const ::net::slot_table_info& slot() const;
  inline ::net::slot_table_info* mutable_slot();
  inline ::net::slot_table_info* release_slot();
  inline void set_allocated_slot(::net::slot_table_info* slot);

  // optional .net.war_table_info war = 14;
  inline bool has_war() const;
  inline void clear_war();
  static const int kWarFieldNumber = 14;
  inline const ::net::war_table_info& war() const;
  inline ::net::war_table_info* mutable_war();
  inline ::net::war_table_info* release_war();
  inline void set_allocated_war(::net::war_table_info* war);

  // optional .net.fight_table_info fight = 15;
  inline bool has_fight() const;
  inline void clear_fight();
  static const int kFightFieldNumber = 15;
  inline const ::net::fight_table_info& fight() const;
  inline ::net::fight_table_info* mutable_fight();
  inline ::net::fight_table_info* release_fight();
  inline void set_allocated_fight(::net::fight_table_info* fight);

  // optional .net.robniu_table_info robniu = 16;
  inline bool has_robniu() const;
  inline void clear_robniu();
  static const int kRobniuFieldNumber = 16;
  inline const ::net::robniu_table_info& robniu() const;
  inline ::net::robniu_table_info* mutable_robniu();
  inline ::net::robniu_table_info* release_robniu();
  inline void set_allocated_robniu(::net::robniu_table_info* robniu);

  // optional .net.fishing_table_info fishing = 17;
  inline bool has_fishing() const;
  inline void clear_fishing();
  static const int kFishingFieldNumber = 17;
  inline const ::net::fishing_table_info& fishing() const;
  inline ::net::fishing_table_info* mutable_fishing();
  inline ::net::fishing_table_info* release_fishing();
  inline void set_allocated_fishing(::net::fishing_table_info* fishing);

  // optional .net.twoeight_table_info twoeight = 18;
  inline bool has_twoeight() const;
  inline void clear_twoeight();
  static const int kTwoeightFieldNumber = 18;
  inline const ::net::twoeight_table_info& twoeight() const;
  inline ::net::twoeight_table_info* mutable_twoeight();
  inline ::net::twoeight_table_info* release_twoeight();
  inline void set_allocated_twoeight(::net::twoeight_table_info* twoeight);

  // @@protoc_insertion_point(class_scope:net.table_face_info)
 private:
  inline void set_has_land();
  inline void clear_has_land();
  inline void set_has_showhand();
  inline void clear_has_showhand();
  inline void set_has_bainiu();
  inline void clear_has_bainiu();
  inline void set_has_texas();
  inline void clear_has_texas();
  inline void set_has_zajinhua();
  inline void clear_has_zajinhua();
  inline void set_has_niuniu();
  inline void clear_has_niuniu();
  inline void set_has_baccarat();
  inline void clear_has_baccarat();
  inline void set_has_sangong();
  inline void clear_has_sangong();
  inline void set_has_paijiu();
  inline void clear_has_paijiu();
  inline void set_has_everycolor();
  inline void clear_has_everycolor();
  inline void set_has_dice();
  inline void clear_has_dice();
  inline void set_has_majiang();
  inline void clear_has_majiang();
  inline void set_has_slot();
  inline void clear_has_slot();
  inline void set_has_war();
  inline void clear_has_war();
  inline void set_has_fight();
  inline void clear_has_fight();
  inline void set_has_robniu();
  inline void clear_has_robniu();
  inline void set_has_fishing();
  inline void clear_has_fishing();
  inline void set_has_twoeight();
  inline void clear_has_twoeight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::net::land_table_info* land_;
  ::net::showhand_table_info* showhand_;
  ::net::bainiu_table_info* bainiu_;
  ::net::texas_table_info* texas_;
  ::net::zajinhua_table_info* zajinhua_;
  ::net::niuniu_table_info* niuniu_;
  ::net::baccarat_table_info* baccarat_;
  ::net::sangong_table_info* sangong_;
  ::net::paijiu_table_info* paijiu_;
  ::net::everycolor_table_info* everycolor_;
  ::net::dice_table_info* dice_;
  ::net::majiang_table_info* majiang_;
  ::net::slot_table_info* slot_;
  ::net::war_table_info* war_;
  ::net::fight_table_info* fight_;
  ::net::robniu_table_info* robniu_;
  ::net::fishing_table_info* fishing_;
  ::net::twoeight_table_info* twoeight_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];

  friend void  protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_AssignDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_ShutdownFile_base_5fmsg_5fstruct_2eproto();

  void InitAsDefaultInstance();
  static table_face_info* default_instance_;
};
// -------------------------------------------------------------------

class fishing_table_info : public ::google::protobuf::Message {
 public:
  fishing_table_info();
  virtual ~fishing_table_info();

  fishing_table_info(const fishing_table_info& from);

  inline fishing_table_info& operator=(const fishing_table_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fishing_table_info& default_instance();

  void Swap(fishing_table_info* other);

  // implements Message ----------------------------------------------

  fishing_table_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const fishing_table_info& from);
  void MergeFrom(const fishing_table_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::uint32 tableid() const;
  inline void set_tableid(::google::protobuf::uint32 value);

  // optional bytes tablename = 2;
  inline bool has_tablename() const;
  inline void clear_tablename();
  static const int kTablenameFieldNumber = 2;
  inline const ::std::string& tablename() const;
  inline void set_tablename(const ::std::string& value);
  inline void set_tablename(const char* value);
  inline void set_tablename(const void* value, size_t size);
  inline ::std::string* mutable_tablename();
  inline ::std::string* release_tablename();
  inline void set_allocated_tablename(::std::string* tablename);

  // optional int64 basescore = 3;
  inline bool has_basescore() const;
  inline void clear_basescore();
  static const int kBasescoreFieldNumber = 3;
  inline ::google::protobuf::int64 basescore() const;
  inline void set_basescore(::google::protobuf::int64 value);

  // optional uint32 consume = 4;
  inline bool has_consume() const;
  inline void clear_consume();
  static const int kConsumeFieldNumber = 4;
  inline ::google::protobuf::uint32 consume() const;
  inline void set_consume(::google::protobuf::uint32 value);

  // optional uint64 entermin = 5;
  inline bool has_entermin() const;
  inline void clear_entermin();
  static const int kEnterminFieldNumber = 5;
  inline ::google::protobuf::uint64 entermin() const;
  inline void set_entermin(::google::protobuf::uint64 value);

  // optional uint64 maplevel = 6;
  inline bool has_maplevel() const;
  inline void clear_maplevel();
  static const int kMaplevelFieldNumber = 6;
  inline ::google::protobuf::uint64 maplevel() const;
  inline void set_maplevel(::google::protobuf::uint64 value);

  // optional uint32 table_state = 7;
  inline bool has_table_state() const;
  inline void clear_table_state();
  static const int kTableStateFieldNumber = 7;
  inline ::google::protobuf::uint32 table_state() const;
  inline void set_table_state(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.fishing_table_info)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_tablename();
  inline void clear_has_tablename();
  inline void set_has_basescore();
  inline void clear_has_basescore();
  inline void set_has_consume();
  inline void clear_has_consume();
  inline void set_has_entermin();
  inline void clear_has_entermin();
  inline void set_has_maplevel();
  inline void clear_has_maplevel();
  inline void set_has_table_state();
  inline void clear_has_table_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tablename_;
  ::google::protobuf::uint32 tableid_;
  ::google::protobuf::uint32 consume_;
  ::google::protobuf::int64 basescore_;
  ::google::protobuf::uint64 entermin_;
  ::google::protobuf::uint64 maplevel_;
  ::google::protobuf::uint32 table_state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_AssignDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_ShutdownFile_base_5fmsg_5fstruct_2eproto();

  void InitAsDefaultInstance();
  static fishing_table_info* default_instance_;
};
// -------------------------------------------------------------------

class twoeight_table_info : public ::google::protobuf::Message {
 public:
  twoeight_table_info();
  virtual ~twoeight_table_info();

  twoeight_table_info(const twoeight_table_info& from);

  inline twoeight_table_info& operator=(const twoeight_table_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const twoeight_table_info& default_instance();

  void Swap(twoeight_table_info* other);

  // implements Message ----------------------------------------------

  twoeight_table_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const twoeight_table_info& from);
  void MergeFrom(const twoeight_table_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::uint32 tableid() const;
  inline void set_tableid(::google::protobuf::uint32 value);

  // optional bytes tablename = 2;
  inline bool has_tablename() const;
  inline void clear_tablename();
  static const int kTablenameFieldNumber = 2;
  inline const ::std::string& tablename() const;
  inline void set_tablename(const ::std::string& value);
  inline void set_tablename(const char* value);
  inline void set_tablename(const void* value, size_t size);
  inline ::std::string* mutable_tablename();
  inline ::std::string* release_tablename();
  inline void set_allocated_tablename(::std::string* tablename);

  // optional uint32 is_passwd = 3;
  inline bool has_is_passwd() const;
  inline void clear_is_passwd();
  static const int kIsPasswdFieldNumber = 3;
  inline ::google::protobuf::uint32 is_passwd() const;
  inline void set_is_passwd(::google::protobuf::uint32 value);

  // optional int64 basescore = 4;
  inline bool has_basescore() const;
  inline void clear_basescore();
  static const int kBasescoreFieldNumber = 4;
  inline ::google::protobuf::int64 basescore() const;
  inline void set_basescore(::google::protobuf::int64 value);

  // optional uint32 consume = 5;
  inline bool has_consume() const;
  inline void clear_consume();
  static const int kConsumeFieldNumber = 5;
  inline ::google::protobuf::uint32 consume() const;
  inline void set_consume(::google::protobuf::uint32 value);

  // optional uint64 entermin = 6;
  inline bool has_entermin() const;
  inline void clear_entermin();
  static const int kEnterminFieldNumber = 6;
  inline ::google::protobuf::uint64 entermin() const;
  inline void set_entermin(::google::protobuf::uint64 value);

  // optional uint32 duetime = 7;
  inline bool has_duetime() const;
  inline void clear_duetime();
  static const int kDuetimeFieldNumber = 7;
  inline ::google::protobuf::uint32 duetime() const;
  inline void set_duetime(::google::protobuf::uint32 value);

  // optional uint32 feetype = 8;
  inline bool has_feetype() const;
  inline void clear_feetype();
  static const int kFeetypeFieldNumber = 8;
  inline ::google::protobuf::uint32 feetype() const;
  inline void set_feetype(::google::protobuf::uint32 value);

  // optional int64 feevalue = 9;
  inline bool has_feevalue() const;
  inline void clear_feevalue();
  static const int kFeevalueFieldNumber = 9;
  inline ::google::protobuf::int64 feevalue() const;
  inline void set_feevalue(::google::protobuf::int64 value);

  // optional bytes hostname = 10;
  inline bool has_hostname() const;
  inline void clear_hostname();
  static const int kHostnameFieldNumber = 10;
  inline const ::std::string& hostname() const;
  inline void set_hostname(const ::std::string& value);
  inline void set_hostname(const char* value);
  inline void set_hostname(const void* value, size_t size);
  inline ::std::string* mutable_hostname();
  inline ::std::string* release_hostname();
  inline void set_allocated_hostname(::std::string* hostname);

  // optional uint32 card_time = 11;
  inline bool has_card_time() const;
  inline void clear_card_time();
  static const int kCardTimeFieldNumber = 11;
  inline ::google::protobuf::uint32 card_time() const;
  inline void set_card_time(::google::protobuf::uint32 value);

  // optional uint32 table_state = 12;
  inline bool has_table_state() const;
  inline void clear_table_state();
  static const int kTableStateFieldNumber = 12;
  inline ::google::protobuf::uint32 table_state() const;
  inline void set_table_state(::google::protobuf::uint32 value);

  // optional int64 sitdown = 13;
  inline bool has_sitdown() const;
  inline void clear_sitdown();
  static const int kSitdownFieldNumber = 13;
  inline ::google::protobuf::int64 sitdown() const;
  inline void set_sitdown(::google::protobuf::int64 value);

  // optional int64 apply_banker_condition = 14;
  inline bool has_apply_banker_condition() const;
  inline void clear_apply_banker_condition();
  static const int kApplyBankerConditionFieldNumber = 14;
  inline ::google::protobuf::int64 apply_banker_condition() const;
  inline void set_apply_banker_condition(::google::protobuf::int64 value);

  // optional int64 apply_banker_maxscore = 15;
  inline bool has_apply_banker_maxscore() const;
  inline void clear_apply_banker_maxscore();
  static const int kApplyBankerMaxscoreFieldNumber = 15;
  inline ::google::protobuf::int64 apply_banker_maxscore() const;
  inline void set_apply_banker_maxscore(::google::protobuf::int64 value);

  // optional uint32 banker_max_time = 16;
  inline bool has_banker_max_time() const;
  inline void clear_banker_max_time();
  static const int kBankerMaxTimeFieldNumber = 16;
  inline ::google::protobuf::uint32 banker_max_time() const;
  inline void set_banker_max_time(::google::protobuf::uint32 value);

  // optional uint32 max_jetton_rate = 17;
  inline bool has_max_jetton_rate() const;
  inline void clear_max_jetton_rate();
  static const int kMaxJettonRateFieldNumber = 17;
  inline ::google::protobuf::uint32 max_jetton_rate() const;
  inline void set_max_jetton_rate(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.twoeight_table_info)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_tablename();
  inline void clear_has_tablename();
  inline void set_has_is_passwd();
  inline void clear_has_is_passwd();
  inline void set_has_basescore();
  inline void clear_has_basescore();
  inline void set_has_consume();
  inline void clear_has_consume();
  inline void set_has_entermin();
  inline void clear_has_entermin();
  inline void set_has_duetime();
  inline void clear_has_duetime();
  inline void set_has_feetype();
  inline void clear_has_feetype();
  inline void set_has_feevalue();
  inline void clear_has_feevalue();
  inline void set_has_hostname();
  inline void clear_has_hostname();
  inline void set_has_card_time();
  inline void clear_has_card_time();
  inline void set_has_table_state();
  inline void clear_has_table_state();
  inline void set_has_sitdown();
  inline void clear_has_sitdown();
  inline void set_has_apply_banker_condition();
  inline void clear_has_apply_banker_condition();
  inline void set_has_apply_banker_maxscore();
  inline void clear_has_apply_banker_maxscore();
  inline void set_has_banker_max_time();
  inline void clear_has_banker_max_time();
  inline void set_has_max_jetton_rate();
  inline void clear_has_max_jetton_rate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tablename_;
  ::google::protobuf::uint32 tableid_;
  ::google::protobuf::uint32 is_passwd_;
  ::google::protobuf::int64 basescore_;
  ::google::protobuf::uint64 entermin_;
  ::google::protobuf::uint32 consume_;
  ::google::protobuf::uint32 duetime_;
  ::google::protobuf::int64 feevalue_;
  ::google::protobuf::uint32 feetype_;
  ::google::protobuf::uint32 card_time_;
  ::std::string* hostname_;
  ::google::protobuf::int64 sitdown_;
  ::google::protobuf::int64 apply_banker_condition_;
  ::google::protobuf::uint32 table_state_;
  ::google::protobuf::uint32 banker_max_time_;
  ::google::protobuf::int64 apply_banker_maxscore_;
  ::google::protobuf::uint32 max_jetton_rate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_AssignDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_ShutdownFile_base_5fmsg_5fstruct_2eproto();

  void InitAsDefaultInstance();
  static twoeight_table_info* default_instance_;
};
// -------------------------------------------------------------------

class mission_data : public ::google::protobuf::Message {
 public:
  mission_data();
  virtual ~mission_data();

  mission_data(const mission_data& from);

  inline mission_data& operator=(const mission_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mission_data& default_instance();

  void Swap(mission_data* other);

  // implements Message ----------------------------------------------

  mission_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mission_data& from);
  void MergeFrom(const mission_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 msid = 1;
  inline bool has_msid() const;
  inline void clear_msid();
  static const int kMsidFieldNumber = 1;
  inline ::google::protobuf::uint32 msid() const;
  inline void set_msid(::google::protobuf::uint32 value);

  // optional uint32 rtimes = 2;
  inline bool has_rtimes() const;
  inline void clear_rtimes();
  static const int kRtimesFieldNumber = 2;
  inline ::google::protobuf::uint32 rtimes() const;
  inline void set_rtimes(::google::protobuf::uint32 value);

  // optional uint32 ctimes = 3;
  inline bool has_ctimes() const;
  inline void clear_ctimes();
  static const int kCtimesFieldNumber = 3;
  inline ::google::protobuf::uint32 ctimes() const;
  inline void set_ctimes(::google::protobuf::uint32 value);

  // optional uint32 cptime = 4;
  inline bool has_cptime() const;
  inline void clear_cptime();
  static const int kCptimeFieldNumber = 4;
  inline ::google::protobuf::uint32 cptime() const;
  inline void set_cptime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.mission_data)
 private:
  inline void set_has_msid();
  inline void clear_has_msid();
  inline void set_has_rtimes();
  inline void clear_has_rtimes();
  inline void set_has_ctimes();
  inline void clear_has_ctimes();
  inline void set_has_cptime();
  inline void clear_has_cptime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 msid_;
  ::google::protobuf::uint32 rtimes_;
  ::google::protobuf::uint32 ctimes_;
  ::google::protobuf::uint32 cptime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_AssignDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_ShutdownFile_base_5fmsg_5fstruct_2eproto();

  void InitAsDefaultInstance();
  static mission_data* default_instance_;
};
// -------------------------------------------------------------------

class item : public ::google::protobuf::Message {
 public:
  item();
  virtual ~item();

  item(const item& from);

  inline item& operator=(const item& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const item& default_instance();

  void Swap(item* other);

  // implements Message ----------------------------------------------

  item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const item& from);
  void MergeFrom(const item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::uint32 item_id() const;
  inline void set_item_id(::google::protobuf::uint32 value);

  // optional uint32 item_num = 2;
  inline bool has_item_num() const;
  inline void clear_item_num();
  static const int kItemNumFieldNumber = 2;
  inline ::google::protobuf::uint32 item_num() const;
  inline void set_item_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.item)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_num();
  inline void clear_has_item_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 item_id_;
  ::google::protobuf::uint32 item_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_AssignDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_ShutdownFile_base_5fmsg_5fstruct_2eproto();

  void InitAsDefaultInstance();
  static item* default_instance_;
};
// -------------------------------------------------------------------

class item_bag : public ::google::protobuf::Message {
 public:
  item_bag();
  virtual ~item_bag();

  item_bag(const item_bag& from);

  inline item_bag& operator=(const item_bag& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const item_bag& default_instance();

  void Swap(item_bag* other);

  // implements Message ----------------------------------------------

  item_bag* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const item_bag& from);
  void MergeFrom(const item_bag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .net.item items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::net::item& items(int index) const;
  inline ::net::item* mutable_items(int index);
  inline ::net::item* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::net::item >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::net::item >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:net.item_bag)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::net::item > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_AssignDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_ShutdownFile_base_5fmsg_5fstruct_2eproto();

  void InitAsDefaultInstance();
  static item_bag* default_instance_;
};
// -------------------------------------------------------------------

class msg_cards : public ::google::protobuf::Message {
 public:
  msg_cards();
  virtual ~msg_cards();

  msg_cards(const msg_cards& from);

  inline msg_cards& operator=(const msg_cards& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_cards& default_instance();

  void Swap(msg_cards* other);

  // implements Message ----------------------------------------------

  msg_cards* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_cards& from);
  void MergeFrom(const msg_cards& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 cards = 1;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 1;
  inline ::google::protobuf::uint32 cards(int index) const;
  inline void set_cards(int index, ::google::protobuf::uint32 value);
  inline void add_cards(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cards();

  // @@protoc_insertion_point(class_scope:net.msg_cards)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cards_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_AssignDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_ShutdownFile_base_5fmsg_5fstruct_2eproto();

  void InitAsDefaultInstance();
  static msg_cards* default_instance_;
};
// -------------------------------------------------------------------

class player_num : public ::google::protobuf::Message {
 public:
  player_num();
  virtual ~player_num();

  player_num(const player_num& from);

  inline player_num& operator=(const player_num& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const player_num& default_instance();

  void Swap(player_num* other);

  // implements Message ----------------------------------------------

  player_num* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const player_num& from);
  void MergeFrom(const player_num& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrid = 1;
  inline bool has_svrid() const;
  inline void clear_svrid();
  static const int kSvridFieldNumber = 1;
  inline ::google::protobuf::uint32 svrid() const;
  inline void set_svrid(::google::protobuf::uint32 value);

  // optional uint32 players = 2;
  inline bool has_players() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 2;
  inline ::google::protobuf::uint32 players() const;
  inline void set_players(::google::protobuf::uint32 value);

  // optional uint32 robots = 3;
  inline bool has_robots() const;
  inline void clear_robots();
  static const int kRobotsFieldNumber = 3;
  inline ::google::protobuf::uint32 robots() const;
  inline void set_robots(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.player_num)
 private:
  inline void set_has_svrid();
  inline void clear_has_svrid();
  inline void set_has_players();
  inline void clear_has_players();
  inline void set_has_robots();
  inline void clear_has_robots();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 svrid_;
  ::google::protobuf::uint32 players_;
  ::google::protobuf::uint32 robots_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_AssignDesc_base_5fmsg_5fstruct_2eproto();
  friend void protobuf_ShutdownFile_base_5fmsg_5fstruct_2eproto();

  void InitAsDefaultInstance();
  static player_num* default_instance_;
};
// ===================================================================


// ===================================================================

// base_info

// optional uint32 uid = 1;
inline bool base_info::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void base_info::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void base_info::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void base_info::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 base_info::uid() const {
  return uid_;
}
inline void base_info::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional bytes name = 2;
inline bool base_info::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void base_info::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void base_info::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void base_info::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& base_info::name() const {
  return *name_;
}
inline void base_info::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void base_info::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void base_info::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* base_info::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* base_info::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void base_info::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 sex = 3;
inline bool base_info::has_sex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void base_info::set_has_sex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void base_info::clear_has_sex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void base_info::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 base_info::sex() const {
  return sex_;
}
inline void base_info::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional int64 diamond = 4;
inline bool base_info::has_diamond() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void base_info::set_has_diamond() {
  _has_bits_[0] |= 0x00000008u;
}
inline void base_info::clear_has_diamond() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void base_info::clear_diamond() {
  diamond_ = GOOGLE_LONGLONG(0);
  clear_has_diamond();
}
inline ::google::protobuf::int64 base_info::diamond() const {
  return diamond_;
}
inline void base_info::set_diamond(::google::protobuf::int64 value) {
  set_has_diamond();
  diamond_ = value;
}

// optional int64 coin = 5;
inline bool base_info::has_coin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void base_info::set_has_coin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void base_info::clear_has_coin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void base_info::clear_coin() {
  coin_ = GOOGLE_LONGLONG(0);
  clear_has_coin();
}
inline ::google::protobuf::int64 base_info::coin() const {
  return coin_;
}
inline void base_info::set_coin(::google::protobuf::int64 value) {
  set_has_coin();
  coin_ = value;
}

// optional int64 score = 6;
inline bool base_info::has_score() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void base_info::set_has_score() {
  _has_bits_[0] |= 0x00000020u;
}
inline void base_info::clear_has_score() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void base_info::clear_score() {
  score_ = GOOGLE_LONGLONG(0);
  clear_has_score();
}
inline ::google::protobuf::int64 base_info::score() const {
  return score_;
}
inline void base_info::set_score(::google::protobuf::int64 value) {
  set_has_score();
  score_ = value;
}

// optional int64 ingot = 7;
inline bool base_info::has_ingot() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void base_info::set_has_ingot() {
  _has_bits_[0] |= 0x00000040u;
}
inline void base_info::clear_has_ingot() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void base_info::clear_ingot() {
  ingot_ = GOOGLE_LONGLONG(0);
  clear_has_ingot();
}
inline ::google::protobuf::int64 base_info::ingot() const {
  return ingot_;
}
inline void base_info::set_ingot(::google::protobuf::int64 value) {
  set_has_ingot();
  ingot_ = value;
}

// optional int64 cvalue = 8;
inline bool base_info::has_cvalue() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void base_info::set_has_cvalue() {
  _has_bits_[0] |= 0x00000080u;
}
inline void base_info::clear_has_cvalue() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void base_info::clear_cvalue() {
  cvalue_ = GOOGLE_LONGLONG(0);
  clear_has_cvalue();
}
inline ::google::protobuf::int64 base_info::cvalue() const {
  return cvalue_;
}
inline void base_info::set_cvalue(::google::protobuf::int64 value) {
  set_has_cvalue();
  cvalue_ = value;
}

// optional int64 safe_coin = 9;
inline bool base_info::has_safe_coin() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void base_info::set_has_safe_coin() {
  _has_bits_[0] |= 0x00000100u;
}
inline void base_info::clear_has_safe_coin() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void base_info::clear_safe_coin() {
  safe_coin_ = GOOGLE_LONGLONG(0);
  clear_has_safe_coin();
}
inline ::google::protobuf::int64 base_info::safe_coin() const {
  return safe_coin_;
}
inline void base_info::set_safe_coin(::google::protobuf::int64 value) {
  set_has_safe_coin();
  safe_coin_ = value;
}

// optional uint32 vip = 10;
inline bool base_info::has_vip() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void base_info::set_has_vip() {
  _has_bits_[0] |= 0x00000200u;
}
inline void base_info::clear_has_vip() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void base_info::clear_vip() {
  vip_ = 0u;
  clear_has_vip();
}
inline ::google::protobuf::uint32 base_info::vip() const {
  return vip_;
}
inline void base_info::set_vip(::google::protobuf::uint32 value) {
  set_has_vip();
  vip_ = value;
}

// optional uint32 safeboxstate = 11;
inline bool base_info::has_safeboxstate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void base_info::set_has_safeboxstate() {
  _has_bits_[0] |= 0x00000400u;
}
inline void base_info::clear_has_safeboxstate() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void base_info::clear_safeboxstate() {
  safeboxstate_ = 0u;
  clear_has_safeboxstate();
}
inline ::google::protobuf::uint32 base_info::safeboxstate() const {
  return safeboxstate_;
}
inline void base_info::set_safeboxstate(::google::protobuf::uint32 value) {
  set_has_safeboxstate();
  safeboxstate_ = value;
}

// optional uint32 clogin = 12;
inline bool base_info::has_clogin() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void base_info::set_has_clogin() {
  _has_bits_[0] |= 0x00000800u;
}
inline void base_info::clear_has_clogin() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void base_info::clear_clogin() {
  clogin_ = 0u;
  clear_has_clogin();
}
inline ::google::protobuf::uint32 base_info::clogin() const {
  return clogin_;
}
inline void base_info::set_clogin(::google::protobuf::uint32 value) {
  set_has_clogin();
  clogin_ = value;
}

// optional uint32 weeklogin = 13;
inline bool base_info::has_weeklogin() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void base_info::set_has_weeklogin() {
  _has_bits_[0] |= 0x00001000u;
}
inline void base_info::clear_has_weeklogin() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void base_info::clear_weeklogin() {
  weeklogin_ = 0u;
  clear_has_weeklogin();
}
inline ::google::protobuf::uint32 base_info::weeklogin() const {
  return weeklogin_;
}
inline void base_info::set_weeklogin(::google::protobuf::uint32 value) {
  set_has_weeklogin();
  weeklogin_ = value;
}

// optional uint32 reward = 14;
inline bool base_info::has_reward() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void base_info::set_has_reward() {
  _has_bits_[0] |= 0x00002000u;
}
inline void base_info::clear_has_reward() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void base_info::clear_reward() {
  reward_ = 0u;
  clear_has_reward();
}
inline ::google::protobuf::uint32 base_info::reward() const {
  return reward_;
}
inline void base_info::set_reward(::google::protobuf::uint32 value) {
  set_has_reward();
  reward_ = value;
}

// optional uint32 bankrupt = 15;
inline bool base_info::has_bankrupt() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void base_info::set_has_bankrupt() {
  _has_bits_[0] |= 0x00004000u;
}
inline void base_info::clear_has_bankrupt() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void base_info::clear_bankrupt() {
  bankrupt_ = 0u;
  clear_has_bankrupt();
}
inline ::google::protobuf::uint32 base_info::bankrupt() const {
  return bankrupt_;
}
inline void base_info::set_bankrupt(::google::protobuf::uint32 value) {
  set_has_bankrupt();
  bankrupt_ = value;
}

// optional uint32 head_icon = 16;
inline bool base_info::has_head_icon() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void base_info::set_has_head_icon() {
  _has_bits_[0] |= 0x00008000u;
}
inline void base_info::clear_has_head_icon() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void base_info::clear_head_icon() {
  head_icon_ = 0u;
  clear_has_head_icon();
}
inline ::google::protobuf::uint32 base_info::head_icon() const {
  return head_icon_;
}
inline void base_info::set_head_icon(::google::protobuf::uint32 value) {
  set_has_head_icon();
  head_icon_ = value;
}

// optional uint32 day_game_count = 17;
inline bool base_info::has_day_game_count() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void base_info::set_has_day_game_count() {
  _has_bits_[0] |= 0x00010000u;
}
inline void base_info::clear_has_day_game_count() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void base_info::clear_day_game_count() {
  day_game_count_ = 0u;
  clear_has_day_game_count();
}
inline ::google::protobuf::uint32 base_info::day_game_count() const {
  return day_game_count_;
}
inline void base_info::set_day_game_count(::google::protobuf::uint32 value) {
  set_has_day_game_count();
  day_game_count_ = value;
}

// optional uint32 login_ip = 18;
inline bool base_info::has_login_ip() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void base_info::set_has_login_ip() {
  _has_bits_[0] |= 0x00020000u;
}
inline void base_info::clear_has_login_ip() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void base_info::clear_login_ip() {
  login_ip_ = 0u;
  clear_has_login_ip();
}
inline ::google::protobuf::uint32 base_info::login_ip() const {
  return login_ip_;
}
inline void base_info::set_login_ip(::google::protobuf::uint32 value) {
  set_has_login_ip();
  login_ip_ = value;
}

// optional bytes city = 19;
inline bool base_info::has_city() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void base_info::set_has_city() {
  _has_bits_[0] |= 0x00040000u;
}
inline void base_info::clear_has_city() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void base_info::clear_city() {
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    city_->clear();
  }
  clear_has_city();
}
inline const ::std::string& base_info::city() const {
  return *city_;
}
inline void base_info::set_city(const ::std::string& value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(value);
}
inline void base_info::set_city(const char* value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(value);
}
inline void base_info::set_city(const void* value, size_t size) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* base_info::mutable_city() {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  return city_;
}
inline ::std::string* base_info::release_city() {
  clear_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = city_;
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void base_info::set_allocated_city(::std::string* city) {
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (city) {
    set_has_city();
    city_ = city;
  } else {
    clear_has_city();
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 recharge = 20;
inline bool base_info::has_recharge() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void base_info::set_has_recharge() {
  _has_bits_[0] |= 0x00080000u;
}
inline void base_info::clear_has_recharge() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void base_info::clear_recharge() {
  recharge_ = GOOGLE_LONGLONG(0);
  clear_has_recharge();
}
inline ::google::protobuf::int64 base_info::recharge() const {
  return recharge_;
}
inline void base_info::set_recharge(::google::protobuf::int64 value) {
  set_has_recharge();
  recharge_ = value;
}

// optional int64 converts = 21;
inline bool base_info::has_converts() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void base_info::set_has_converts() {
  _has_bits_[0] |= 0x00100000u;
}
inline void base_info::clear_has_converts() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void base_info::clear_converts() {
  converts_ = GOOGLE_LONGLONG(0);
  clear_has_converts();
}
inline ::google::protobuf::int64 base_info::converts() const {
  return converts_;
}
inline void base_info::set_converts(::google::protobuf::int64 value) {
  set_has_converts();
  converts_ = value;
}

// optional uint32 batchid = 22;
inline bool base_info::has_batchid() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void base_info::set_has_batchid() {
  _has_bits_[0] |= 0x00200000u;
}
inline void base_info::clear_has_batchid() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void base_info::clear_batchid() {
  batchid_ = 0u;
  clear_has_batchid();
}
inline ::google::protobuf::uint32 base_info::batchid() const {
  return batchid_;
}
inline void base_info::set_batchid(::google::protobuf::uint32 value) {
  set_has_batchid();
  batchid_ = value;
}

// optional uint32 lvscore = 23;
inline bool base_info::has_lvscore() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void base_info::set_has_lvscore() {
  _has_bits_[0] |= 0x00400000u;
}
inline void base_info::clear_has_lvscore() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void base_info::clear_lvscore() {
  lvscore_ = 0u;
  clear_has_lvscore();
}
inline ::google::protobuf::uint32 base_info::lvscore() const {
  return lvscore_;
}
inline void base_info::set_lvscore(::google::protobuf::uint32 value) {
  set_has_lvscore();
  lvscore_ = value;
}

// optional uint32 lvcoin = 24;
inline bool base_info::has_lvcoin() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void base_info::set_has_lvcoin() {
  _has_bits_[0] |= 0x00800000u;
}
inline void base_info::clear_has_lvcoin() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void base_info::clear_lvcoin() {
  lvcoin_ = 0u;
  clear_has_lvcoin();
}
inline ::google::protobuf::uint32 base_info::lvcoin() const {
  return lvcoin_;
}
inline void base_info::set_lvcoin(::google::protobuf::uint32 value) {
  set_has_lvcoin();
  lvcoin_ = value;
}

// optional uint64 postime = 25;
inline bool base_info::has_postime() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void base_info::set_has_postime() {
  _has_bits_[0] |= 0x01000000u;
}
inline void base_info::clear_has_postime() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void base_info::clear_postime() {
  postime_ = GOOGLE_ULONGLONG(0);
  clear_has_postime();
}
inline ::google::protobuf::uint64 base_info::postime() const {
  return postime_;
}
inline void base_info::set_postime(::google::protobuf::uint64 value) {
  set_has_postime();
  postime_ = value;
}

// optional uint32 userright = 26;
inline bool base_info::has_userright() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void base_info::set_has_userright() {
  _has_bits_[0] |= 0x02000000u;
}
inline void base_info::clear_has_userright() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void base_info::clear_userright() {
  userright_ = 0u;
  clear_has_userright();
}
inline ::google::protobuf::uint32 base_info::userright() const {
  return userright_;
}
inline void base_info::set_userright(::google::protobuf::uint32 value) {
  set_has_userright();
  userright_ = value;
}

// optional int64 win = 27;
inline bool base_info::has_win() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void base_info::set_has_win() {
  _has_bits_[0] |= 0x04000000u;
}
inline void base_info::clear_has_win() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void base_info::clear_win() {
  win_ = GOOGLE_LONGLONG(0);
  clear_has_win();
}
inline ::google::protobuf::int64 base_info::win() const {
  return win_;
}
inline void base_info::set_win(::google::protobuf::int64 value) {
  set_has_win();
  win_ = value;
}

// optional uint32 posrmb = 28;
inline bool base_info::has_posrmb() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void base_info::set_has_posrmb() {
  _has_bits_[0] |= 0x08000000u;
}
inline void base_info::clear_has_posrmb() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void base_info::clear_posrmb() {
  posrmb_ = 0u;
  clear_has_posrmb();
}
inline ::google::protobuf::uint32 base_info::posrmb() const {
  return posrmb_;
}
inline void base_info::set_posrmb(::google::protobuf::uint32 value) {
  set_has_posrmb();
  posrmb_ = value;
}

// optional uint32 welcount = 29;
inline bool base_info::has_welcount() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void base_info::set_has_welcount() {
  _has_bits_[0] |= 0x10000000u;
}
inline void base_info::clear_has_welcount() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void base_info::clear_welcount() {
  welcount_ = 0u;
  clear_has_welcount();
}
inline ::google::protobuf::uint32 base_info::welcount() const {
  return welcount_;
}
inline void base_info::set_welcount(::google::protobuf::uint32 value) {
  set_has_welcount();
  welcount_ = value;
}

// optional uint64 weltime = 30;
inline bool base_info::has_weltime() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void base_info::set_has_weltime() {
  _has_bits_[0] |= 0x20000000u;
}
inline void base_info::clear_has_weltime() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void base_info::clear_weltime() {
  weltime_ = GOOGLE_ULONGLONG(0);
  clear_has_weltime();
}
inline ::google::protobuf::uint64 base_info::weltime() const {
  return weltime_;
}
inline void base_info::set_weltime(::google::protobuf::uint64 value) {
  set_has_weltime();
  weltime_ = value;
}

// optional uint32 recharge_actwle = 31;
inline bool base_info::has_recharge_actwle() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void base_info::set_has_recharge_actwle() {
  _has_bits_[0] |= 0x40000000u;
}
inline void base_info::clear_has_recharge_actwle() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void base_info::clear_recharge_actwle() {
  recharge_actwle_ = 0u;
  clear_has_recharge_actwle();
}
inline ::google::protobuf::uint32 base_info::recharge_actwle() const {
  return recharge_actwle_;
}
inline void base_info::set_recharge_actwle(::google::protobuf::uint32 value) {
  set_has_recharge_actwle();
  recharge_actwle_ = value;
}

// optional uint64 converts_actwle = 32;
inline bool base_info::has_converts_actwle() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void base_info::set_has_converts_actwle() {
  _has_bits_[0] |= 0x80000000u;
}
inline void base_info::clear_has_converts_actwle() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void base_info::clear_converts_actwle() {
  converts_actwle_ = GOOGLE_ULONGLONG(0);
  clear_has_converts_actwle();
}
inline ::google::protobuf::uint64 base_info::converts_actwle() const {
  return converts_actwle_;
}
inline void base_info::set_converts_actwle(::google::protobuf::uint64 value) {
  set_has_converts_actwle();
  converts_actwle_ = value;
}

// optional uint64 rtime = 33;
inline bool base_info::has_rtime() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void base_info::set_has_rtime() {
  _has_bits_[1] |= 0x00000001u;
}
inline void base_info::clear_has_rtime() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void base_info::clear_rtime() {
  rtime_ = GOOGLE_ULONGLONG(0);
  clear_has_rtime();
}
inline ::google::protobuf::uint64 base_info::rtime() const {
  return rtime_;
}
inline void base_info::set_rtime(::google::protobuf::uint64 value) {
  set_has_rtime();
  rtime_ = value;
}

// optional uint32 ispay = 34;
inline bool base_info::has_ispay() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void base_info::set_has_ispay() {
  _has_bits_[1] |= 0x00000002u;
}
inline void base_info::clear_has_ispay() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void base_info::clear_ispay() {
  ispay_ = 0u;
  clear_has_ispay();
}
inline ::google::protobuf::uint32 base_info::ispay() const {
  return ispay_;
}
inline void base_info::set_ispay(::google::protobuf::uint32 value) {
  set_has_ispay();
  ispay_ = value;
}

// -------------------------------------------------------------------

// land_info

// optional uint32 win = 1;
inline bool land_info::has_win() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void land_info::set_has_win() {
  _has_bits_[0] |= 0x00000001u;
}
inline void land_info::clear_has_win() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void land_info::clear_win() {
  win_ = 0u;
  clear_has_win();
}
inline ::google::protobuf::uint32 land_info::win() const {
  return win_;
}
inline void land_info::set_win(::google::protobuf::uint32 value) {
  set_has_win();
  win_ = value;
}

// optional uint32 lose = 2;
inline bool land_info::has_lose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void land_info::set_has_lose() {
  _has_bits_[0] |= 0x00000002u;
}
inline void land_info::clear_has_lose() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void land_info::clear_lose() {
  lose_ = 0u;
  clear_has_lose();
}
inline ::google::protobuf::uint32 land_info::lose() const {
  return lose_;
}
inline void land_info::set_lose(::google::protobuf::uint32 value) {
  set_has_lose();
  lose_ = value;
}

// optional uint32 land = 3;
inline bool land_info::has_land() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void land_info::set_has_land() {
  _has_bits_[0] |= 0x00000004u;
}
inline void land_info::clear_has_land() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void land_info::clear_land() {
  land_ = 0u;
  clear_has_land();
}
inline ::google::protobuf::uint32 land_info::land() const {
  return land_;
}
inline void land_info::set_land(::google::protobuf::uint32 value) {
  set_has_land();
  land_ = value;
}

// optional uint32 spring = 4;
inline bool land_info::has_spring() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void land_info::set_has_spring() {
  _has_bits_[0] |= 0x00000008u;
}
inline void land_info::clear_has_spring() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void land_info::clear_spring() {
  spring_ = 0u;
  clear_has_spring();
}
inline ::google::protobuf::uint32 land_info::spring() const {
  return spring_;
}
inline void land_info::set_spring(::google::protobuf::uint32 value) {
  set_has_spring();
  spring_ = value;
}

// optional int64 maxwin = 5;
inline bool land_info::has_maxwin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void land_info::set_has_maxwin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void land_info::clear_has_maxwin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void land_info::clear_maxwin() {
  maxwin_ = GOOGLE_LONGLONG(0);
  clear_has_maxwin();
}
inline ::google::protobuf::int64 land_info::maxwin() const {
  return maxwin_;
}
inline void land_info::set_maxwin(::google::protobuf::int64 value) {
  set_has_maxwin();
  maxwin_ = value;
}

// optional uint32 winc = 6;
inline bool land_info::has_winc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void land_info::set_has_winc() {
  _has_bits_[0] |= 0x00000020u;
}
inline void land_info::clear_has_winc() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void land_info::clear_winc() {
  winc_ = 0u;
  clear_has_winc();
}
inline ::google::protobuf::uint32 land_info::winc() const {
  return winc_;
}
inline void land_info::set_winc(::google::protobuf::uint32 value) {
  set_has_winc();
  winc_ = value;
}

// optional uint32 losec = 7;
inline bool land_info::has_losec() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void land_info::set_has_losec() {
  _has_bits_[0] |= 0x00000040u;
}
inline void land_info::clear_has_losec() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void land_info::clear_losec() {
  losec_ = 0u;
  clear_has_losec();
}
inline ::google::protobuf::uint32 land_info::losec() const {
  return losec_;
}
inline void land_info::set_losec(::google::protobuf::uint32 value) {
  set_has_losec();
  losec_ = value;
}

// optional uint32 landc = 8;
inline bool land_info::has_landc() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void land_info::set_has_landc() {
  _has_bits_[0] |= 0x00000080u;
}
inline void land_info::clear_has_landc() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void land_info::clear_landc() {
  landc_ = 0u;
  clear_has_landc();
}
inline ::google::protobuf::uint32 land_info::landc() const {
  return landc_;
}
inline void land_info::set_landc(::google::protobuf::uint32 value) {
  set_has_landc();
  landc_ = value;
}

// optional int64 maxwinc = 9;
inline bool land_info::has_maxwinc() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void land_info::set_has_maxwinc() {
  _has_bits_[0] |= 0x00000100u;
}
inline void land_info::clear_has_maxwinc() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void land_info::clear_maxwinc() {
  maxwinc_ = GOOGLE_LONGLONG(0);
  clear_has_maxwinc();
}
inline ::google::protobuf::int64 land_info::maxwinc() const {
  return maxwinc_;
}
inline void land_info::set_maxwinc(::google::protobuf::int64 value) {
  set_has_maxwinc();
  maxwinc_ = value;
}

// optional uint32 springc = 10;
inline bool land_info::has_springc() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void land_info::set_has_springc() {
  _has_bits_[0] |= 0x00000200u;
}
inline void land_info::clear_has_springc() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void land_info::clear_springc() {
  springc_ = 0u;
  clear_has_springc();
}
inline ::google::protobuf::uint32 land_info::springc() const {
  return springc_;
}
inline void land_info::set_springc(::google::protobuf::uint32 value) {
  set_has_springc();
  springc_ = value;
}

// -------------------------------------------------------------------

// game_data_info

// optional uint32 game_type = 1;
inline bool game_data_info::has_game_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_data_info::set_has_game_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_data_info::clear_has_game_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_data_info::clear_game_type() {
  game_type_ = 0u;
  clear_has_game_type();
}
inline ::google::protobuf::uint32 game_data_info::game_type() const {
  return game_type_;
}
inline void game_data_info::set_game_type(::google::protobuf::uint32 value) {
  set_has_game_type();
  game_type_ = value;
}

// optional uint32 win = 2;
inline bool game_data_info::has_win() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_data_info::set_has_win() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_data_info::clear_has_win() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_data_info::clear_win() {
  win_ = 0u;
  clear_has_win();
}
inline ::google::protobuf::uint32 game_data_info::win() const {
  return win_;
}
inline void game_data_info::set_win(::google::protobuf::uint32 value) {
  set_has_win();
  win_ = value;
}

// optional uint32 lose = 3;
inline bool game_data_info::has_lose() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_data_info::set_has_lose() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_data_info::clear_has_lose() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_data_info::clear_lose() {
  lose_ = 0u;
  clear_has_lose();
}
inline ::google::protobuf::uint32 game_data_info::lose() const {
  return lose_;
}
inline void game_data_info::set_lose(::google::protobuf::uint32 value) {
  set_has_lose();
  lose_ = value;
}

// optional int64 maxwin = 4;
inline bool game_data_info::has_maxwin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void game_data_info::set_has_maxwin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void game_data_info::clear_has_maxwin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void game_data_info::clear_maxwin() {
  maxwin_ = GOOGLE_LONGLONG(0);
  clear_has_maxwin();
}
inline ::google::protobuf::int64 game_data_info::maxwin() const {
  return maxwin_;
}
inline void game_data_info::set_maxwin(::google::protobuf::int64 value) {
  set_has_maxwin();
  maxwin_ = value;
}

// optional uint32 winc = 5;
inline bool game_data_info::has_winc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void game_data_info::set_has_winc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void game_data_info::clear_has_winc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void game_data_info::clear_winc() {
  winc_ = 0u;
  clear_has_winc();
}
inline ::google::protobuf::uint32 game_data_info::winc() const {
  return winc_;
}
inline void game_data_info::set_winc(::google::protobuf::uint32 value) {
  set_has_winc();
  winc_ = value;
}

// optional uint32 losec = 6;
inline bool game_data_info::has_losec() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void game_data_info::set_has_losec() {
  _has_bits_[0] |= 0x00000020u;
}
inline void game_data_info::clear_has_losec() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void game_data_info::clear_losec() {
  losec_ = 0u;
  clear_has_losec();
}
inline ::google::protobuf::uint32 game_data_info::losec() const {
  return losec_;
}
inline void game_data_info::set_losec(::google::protobuf::uint32 value) {
  set_has_losec();
  losec_ = value;
}

// optional int64 maxwinc = 7;
inline bool game_data_info::has_maxwinc() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void game_data_info::set_has_maxwinc() {
  _has_bits_[0] |= 0x00000040u;
}
inline void game_data_info::clear_has_maxwinc() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void game_data_info::clear_maxwinc() {
  maxwinc_ = GOOGLE_LONGLONG(0);
  clear_has_maxwinc();
}
inline ::google::protobuf::int64 game_data_info::maxwinc() const {
  return maxwinc_;
}
inline void game_data_info::set_maxwinc(::google::protobuf::int64 value) {
  set_has_maxwinc();
  maxwinc_ = value;
}

// repeated uint32 maxcard = 8;
inline int game_data_info::maxcard_size() const {
  return maxcard_.size();
}
inline void game_data_info::clear_maxcard() {
  maxcard_.Clear();
}
inline ::google::protobuf::uint32 game_data_info::maxcard(int index) const {
  return maxcard_.Get(index);
}
inline void game_data_info::set_maxcard(int index, ::google::protobuf::uint32 value) {
  maxcard_.Set(index, value);
}
inline void game_data_info::add_maxcard(::google::protobuf::uint32 value) {
  maxcard_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
game_data_info::maxcard() const {
  return maxcard_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
game_data_info::mutable_maxcard() {
  return &maxcard_;
}

// repeated uint32 maxcardc = 9;
inline int game_data_info::maxcardc_size() const {
  return maxcardc_.size();
}
inline void game_data_info::clear_maxcardc() {
  maxcardc_.Clear();
}
inline ::google::protobuf::uint32 game_data_info::maxcardc(int index) const {
  return maxcardc_.Get(index);
}
inline void game_data_info::set_maxcardc(int index, ::google::protobuf::uint32 value) {
  maxcardc_.Set(index, value);
}
inline void game_data_info::add_maxcardc(::google::protobuf::uint32 value) {
  maxcardc_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
game_data_info::maxcardc() const {
  return maxcardc_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
game_data_info::mutable_maxcardc() {
  return &maxcardc_;
}

// optional int64 daywin = 10;
inline bool game_data_info::has_daywin() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void game_data_info::set_has_daywin() {
  _has_bits_[0] |= 0x00000200u;
}
inline void game_data_info::clear_has_daywin() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void game_data_info::clear_daywin() {
  daywin_ = GOOGLE_LONGLONG(0);
  clear_has_daywin();
}
inline ::google::protobuf::int64 game_data_info::daywin() const {
  return daywin_;
}
inline void game_data_info::set_daywin(::google::protobuf::int64 value) {
  set_has_daywin();
  daywin_ = value;
}

// optional int64 daywinc = 11;
inline bool game_data_info::has_daywinc() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void game_data_info::set_has_daywinc() {
  _has_bits_[0] |= 0x00000400u;
}
inline void game_data_info::clear_has_daywinc() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void game_data_info::clear_daywinc() {
  daywinc_ = GOOGLE_LONGLONG(0);
  clear_has_daywinc();
}
inline ::google::protobuf::int64 game_data_info::daywinc() const {
  return daywinc_;
}
inline void game_data_info::set_daywinc(::google::protobuf::int64 value) {
  set_has_daywinc();
  daywinc_ = value;
}

// optional uint32 land = 12;
inline bool game_data_info::has_land() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void game_data_info::set_has_land() {
  _has_bits_[0] |= 0x00000800u;
}
inline void game_data_info::clear_has_land() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void game_data_info::clear_land() {
  land_ = 0u;
  clear_has_land();
}
inline ::google::protobuf::uint32 game_data_info::land() const {
  return land_;
}
inline void game_data_info::set_land(::google::protobuf::uint32 value) {
  set_has_land();
  land_ = value;
}

// optional uint32 spring = 13;
inline bool game_data_info::has_spring() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void game_data_info::set_has_spring() {
  _has_bits_[0] |= 0x00001000u;
}
inline void game_data_info::clear_has_spring() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void game_data_info::clear_spring() {
  spring_ = 0u;
  clear_has_spring();
}
inline ::google::protobuf::uint32 game_data_info::spring() const {
  return spring_;
}
inline void game_data_info::set_spring(::google::protobuf::uint32 value) {
  set_has_spring();
  spring_ = value;
}

// optional uint32 landc = 14;
inline bool game_data_info::has_landc() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void game_data_info::set_has_landc() {
  _has_bits_[0] |= 0x00002000u;
}
inline void game_data_info::clear_has_landc() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void game_data_info::clear_landc() {
  landc_ = 0u;
  clear_has_landc();
}
inline ::google::protobuf::uint32 game_data_info::landc() const {
  return landc_;
}
inline void game_data_info::set_landc(::google::protobuf::uint32 value) {
  set_has_landc();
  landc_ = value;
}

// optional uint32 springc = 15;
inline bool game_data_info::has_springc() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void game_data_info::set_has_springc() {
  _has_bits_[0] |= 0x00004000u;
}
inline void game_data_info::clear_has_springc() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void game_data_info::clear_springc() {
  springc_ = 0u;
  clear_has_springc();
}
inline ::google::protobuf::uint32 game_data_info::springc() const {
  return springc_;
}
inline void game_data_info::set_springc(::google::protobuf::uint32 value) {
  set_has_springc();
  springc_ = value;
}

// optional int64 weekwinc = 16;
inline bool game_data_info::has_weekwinc() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void game_data_info::set_has_weekwinc() {
  _has_bits_[0] |= 0x00008000u;
}
inline void game_data_info::clear_has_weekwinc() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void game_data_info::clear_weekwinc() {
  weekwinc_ = GOOGLE_LONGLONG(0);
  clear_has_weekwinc();
}
inline ::google::protobuf::int64 game_data_info::weekwinc() const {
  return weekwinc_;
}
inline void game_data_info::set_weekwinc(::google::protobuf::int64 value) {
  set_has_weekwinc();
  weekwinc_ = value;
}

// optional int64 totalwinc = 17;
inline bool game_data_info::has_totalwinc() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void game_data_info::set_has_totalwinc() {
  _has_bits_[0] |= 0x00010000u;
}
inline void game_data_info::clear_has_totalwinc() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void game_data_info::clear_totalwinc() {
  totalwinc_ = GOOGLE_LONGLONG(0);
  clear_has_totalwinc();
}
inline ::google::protobuf::int64 game_data_info::totalwinc() const {
  return totalwinc_;
}
inline void game_data_info::set_totalwinc(::google::protobuf::int64 value) {
  set_has_totalwinc();
  totalwinc_ = value;
}

// optional int64 stockscore = 18;
inline bool game_data_info::has_stockscore() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void game_data_info::set_has_stockscore() {
  _has_bits_[0] |= 0x00020000u;
}
inline void game_data_info::clear_has_stockscore() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void game_data_info::clear_stockscore() {
  stockscore_ = GOOGLE_LONGLONG(0);
  clear_has_stockscore();
}
inline ::google::protobuf::int64 game_data_info::stockscore() const {
  return stockscore_;
}
inline void game_data_info::set_stockscore(::google::protobuf::int64 value) {
  set_has_stockscore();
  stockscore_ = value;
}

// optional int64 gamecount = 19;
inline bool game_data_info::has_gamecount() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void game_data_info::set_has_gamecount() {
  _has_bits_[0] |= 0x00040000u;
}
inline void game_data_info::clear_has_gamecount() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void game_data_info::clear_gamecount() {
  gamecount_ = GOOGLE_LONGLONG(0);
  clear_has_gamecount();
}
inline ::google::protobuf::int64 game_data_info::gamecount() const {
  return gamecount_;
}
inline void game_data_info::set_gamecount(::google::protobuf::int64 value) {
  set_has_gamecount();
  gamecount_ = value;
}

// -------------------------------------------------------------------

// svr_info

// optional uint32 svrid = 1;
inline bool svr_info::has_svrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void svr_info::set_has_svrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void svr_info::clear_has_svrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void svr_info::clear_svrid() {
  svrid_ = 0u;
  clear_has_svrid();
}
inline ::google::protobuf::uint32 svr_info::svrid() const {
  return svrid_;
}
inline void svr_info::set_svrid(::google::protobuf::uint32 value) {
  set_has_svrid();
  svrid_ = value;
}

// optional uint32 state = 2;
inline bool svr_info::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void svr_info::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void svr_info::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void svr_info::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 svr_info::state() const {
  return state_;
}
inline void svr_info::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
}

// optional uint32 game_type = 3;
inline bool svr_info::has_game_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void svr_info::set_has_game_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void svr_info::clear_has_game_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void svr_info::clear_game_type() {
  game_type_ = 0u;
  clear_has_game_type();
}
inline ::google::protobuf::uint32 svr_info::game_type() const {
  return game_type_;
}
inline void svr_info::set_game_type(::google::protobuf::uint32 value) {
  set_has_game_type();
  game_type_ = value;
}

// optional uint32 game_subtype = 4;
inline bool svr_info::has_game_subtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void svr_info::set_has_game_subtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void svr_info::clear_has_game_subtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void svr_info::clear_game_subtype() {
  game_subtype_ = 0u;
  clear_has_game_subtype();
}
inline ::google::protobuf::uint32 svr_info::game_subtype() const {
  return game_subtype_;
}
inline void svr_info::set_game_subtype(::google::protobuf::uint32 value) {
  set_has_game_subtype();
  game_subtype_ = value;
}

// -------------------------------------------------------------------

// room_info

// optional uint32 id = 1;
inline bool room_info::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void room_info::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void room_info::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void room_info::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 room_info::id() const {
  return id_;
}
inline void room_info::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 consume = 2;
inline bool room_info::has_consume() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void room_info::set_has_consume() {
  _has_bits_[0] |= 0x00000002u;
}
inline void room_info::clear_has_consume() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void room_info::clear_consume() {
  consume_ = 0u;
  clear_has_consume();
}
inline ::google::protobuf::uint32 room_info::consume() const {
  return consume_;
}
inline void room_info::set_consume(::google::protobuf::uint32 value) {
  set_has_consume();
  consume_ = value;
}

// optional uint32 deal = 3;
inline bool room_info::has_deal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void room_info::set_has_deal() {
  _has_bits_[0] |= 0x00000004u;
}
inline void room_info::clear_has_deal() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void room_info::clear_deal() {
  deal_ = 0u;
  clear_has_deal();
}
inline ::google::protobuf::uint32 room_info::deal() const {
  return deal_;
}
inline void room_info::set_deal(::google::protobuf::uint32 value) {
  set_has_deal();
  deal_ = value;
}

// optional uint64 enter_min = 4;
inline bool room_info::has_enter_min() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void room_info::set_has_enter_min() {
  _has_bits_[0] |= 0x00000008u;
}
inline void room_info::clear_has_enter_min() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void room_info::clear_enter_min() {
  enter_min_ = GOOGLE_ULONGLONG(0);
  clear_has_enter_min();
}
inline ::google::protobuf::uint64 room_info::enter_min() const {
  return enter_min_;
}
inline void room_info::set_enter_min(::google::protobuf::uint64 value) {
  set_has_enter_min();
  enter_min_ = value;
}

// optional uint64 enter_max = 5;
inline bool room_info::has_enter_max() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void room_info::set_has_enter_max() {
  _has_bits_[0] |= 0x00000010u;
}
inline void room_info::clear_has_enter_max() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void room_info::clear_enter_max() {
  enter_max_ = GOOGLE_ULONGLONG(0);
  clear_has_enter_max();
}
inline ::google::protobuf::uint64 room_info::enter_max() const {
  return enter_max_;
}
inline void room_info::set_enter_max(::google::protobuf::uint64 value) {
  set_has_enter_max();
  enter_max_ = value;
}

// optional uint32 player_num = 6;
inline bool room_info::has_player_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void room_info::set_has_player_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void room_info::clear_has_player_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void room_info::clear_player_num() {
  player_num_ = 0u;
  clear_has_player_num();
}
inline ::google::protobuf::uint32 room_info::player_num() const {
  return player_num_;
}
inline void room_info::set_player_num(::google::protobuf::uint32 value) {
  set_has_player_num();
  player_num_ = value;
}

// optional uint32 basescore = 7;
inline bool room_info::has_basescore() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void room_info::set_has_basescore() {
  _has_bits_[0] |= 0x00000040u;
}
inline void room_info::clear_has_basescore() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void room_info::clear_basescore() {
  basescore_ = 0u;
  clear_has_basescore();
}
inline ::google::protobuf::uint32 room_info::basescore() const {
  return basescore_;
}
inline void room_info::set_basescore(::google::protobuf::uint32 value) {
  set_has_basescore();
  basescore_ = value;
}

// optional uint32 create_table = 8;
inline bool room_info::has_create_table() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void room_info::set_has_create_table() {
  _has_bits_[0] |= 0x00000080u;
}
inline void room_info::clear_has_create_table() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void room_info::clear_create_table() {
  create_table_ = 0u;
  clear_has_create_table();
}
inline ::google::protobuf::uint32 room_info::create_table() const {
  return create_table_;
}
inline void room_info::set_create_table(::google::protobuf::uint32 value) {
  set_has_create_table();
  create_table_ = value;
}

// optional uint32 show_type = 9;
inline bool room_info::has_show_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void room_info::set_has_show_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void room_info::clear_has_show_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void room_info::clear_show_type() {
  show_type_ = 0u;
  clear_has_show_type();
}
inline ::google::protobuf::uint32 room_info::show_type() const {
  return show_type_;
}
inline void room_info::set_show_type(::google::protobuf::uint32 value) {
  set_has_show_type();
  show_type_ = value;
}

// optional uint32 show_pic = 10;
inline bool room_info::has_show_pic() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void room_info::set_has_show_pic() {
  _has_bits_[0] |= 0x00000200u;
}
inline void room_info::clear_has_show_pic() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void room_info::clear_show_pic() {
  show_pic_ = 0u;
  clear_has_show_pic();
}
inline ::google::protobuf::uint32 room_info::show_pic() const {
  return show_pic_;
}
inline void room_info::set_show_pic(::google::protobuf::uint32 value) {
  set_has_show_pic();
  show_pic_ = value;
}

// optional uint64 jetton_min = 11;
inline bool room_info::has_jetton_min() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void room_info::set_has_jetton_min() {
  _has_bits_[0] |= 0x00000400u;
}
inline void room_info::clear_has_jetton_min() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void room_info::clear_jetton_min() {
  jetton_min_ = GOOGLE_ULONGLONG(0);
  clear_has_jetton_min();
}
inline ::google::protobuf::uint64 room_info::jetton_min() const {
  return jetton_min_;
}
inline void room_info::set_jetton_min(::google::protobuf::uint64 value) {
  set_has_jetton_min();
  jetton_min_ = value;
}

// optional uint32 maxjettonrate = 12;
inline bool room_info::has_maxjettonrate() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void room_info::set_has_maxjettonrate() {
  _has_bits_[0] |= 0x00000800u;
}
inline void room_info::clear_has_maxjettonrate() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void room_info::clear_maxjettonrate() {
  maxjettonrate_ = 0u;
  clear_has_maxjettonrate();
}
inline ::google::protobuf::uint32 room_info::maxjettonrate() const {
  return maxjettonrate_;
}
inline void room_info::set_maxjettonrate(::google::protobuf::uint32 value) {
  set_has_maxjettonrate();
  maxjettonrate_ = value;
}

// optional uint32 uproom = 13;
inline bool room_info::has_uproom() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void room_info::set_has_uproom() {
  _has_bits_[0] |= 0x00001000u;
}
inline void room_info::clear_has_uproom() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void room_info::clear_uproom() {
  uproom_ = 0u;
  clear_has_uproom();
}
inline ::google::protobuf::uint32 room_info::uproom() const {
  return uproom_;
}
inline void room_info::set_uproom(::google::protobuf::uint32 value) {
  set_has_uproom();
  uproom_ = value;
}

// optional uint32 exitchip = 14;
inline bool room_info::has_exitchip() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void room_info::set_has_exitchip() {
  _has_bits_[0] |= 0x00002000u;
}
inline void room_info::clear_has_exitchip() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void room_info::clear_exitchip() {
  exitchip_ = 0u;
  clear_has_exitchip();
}
inline ::google::protobuf::uint32 room_info::exitchip() const {
  return exitchip_;
}
inline void room_info::set_exitchip(::google::protobuf::uint32 value) {
  set_has_exitchip();
  exitchip_ = value;
}

// optional bytes room_name = 15;
inline bool room_info::has_room_name() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void room_info::set_has_room_name() {
  _has_bits_[0] |= 0x00004000u;
}
inline void room_info::clear_has_room_name() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void room_info::clear_room_name() {
  if (room_name_ != &::google::protobuf::internal::kEmptyString) {
    room_name_->clear();
  }
  clear_has_room_name();
}
inline const ::std::string& room_info::room_name() const {
  return *room_name_;
}
inline void room_info::set_room_name(const ::std::string& value) {
  set_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void room_info::set_room_name(const char* value) {
  set_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void room_info::set_room_name(const void* value, size_t size) {
  set_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* room_info::mutable_room_name() {
  set_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    room_name_ = new ::std::string;
  }
  return room_name_;
}
inline ::std::string* room_info::release_room_name() {
  clear_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = room_name_;
    room_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void room_info::set_allocated_room_name(::std::string* room_name) {
  if (room_name_ != &::google::protobuf::internal::kEmptyString) {
    delete room_name_;
  }
  if (room_name) {
    set_has_room_name();
    room_name_ = room_name;
  } else {
    clear_has_room_name();
    room_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// seat_info

// optional uint32 uid = 1;
inline bool seat_info::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void seat_info::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void seat_info::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void seat_info::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 seat_info::uid() const {
  return uid_;
}
inline void seat_info::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional bytes name = 2;
inline bool seat_info::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void seat_info::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void seat_info::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void seat_info::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& seat_info::name() const {
  return *name_;
}
inline void seat_info::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void seat_info::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void seat_info::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* seat_info::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* seat_info::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void seat_info::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 sex = 3;
inline bool seat_info::has_sex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void seat_info::set_has_sex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void seat_info::clear_has_sex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void seat_info::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 seat_info::sex() const {
  return sex_;
}
inline void seat_info::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional int64 coin = 4;
inline bool seat_info::has_coin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void seat_info::set_has_coin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void seat_info::clear_has_coin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void seat_info::clear_coin() {
  coin_ = GOOGLE_LONGLONG(0);
  clear_has_coin();
}
inline ::google::protobuf::int64 seat_info::coin() const {
  return coin_;
}
inline void seat_info::set_coin(::google::protobuf::int64 value) {
  set_has_coin();
  coin_ = value;
}

// optional int64 score = 5;
inline bool seat_info::has_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void seat_info::set_has_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void seat_info::clear_has_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void seat_info::clear_score() {
  score_ = GOOGLE_LONGLONG(0);
  clear_has_score();
}
inline ::google::protobuf::int64 seat_info::score() const {
  return score_;
}
inline void seat_info::set_score(::google::protobuf::int64 value) {
  set_has_score();
  score_ = value;
}

// optional int64 cvalue = 6;
inline bool seat_info::has_cvalue() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void seat_info::set_has_cvalue() {
  _has_bits_[0] |= 0x00000020u;
}
inline void seat_info::clear_has_cvalue() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void seat_info::clear_cvalue() {
  cvalue_ = GOOGLE_LONGLONG(0);
  clear_has_cvalue();
}
inline ::google::protobuf::int64 seat_info::cvalue() const {
  return cvalue_;
}
inline void seat_info::set_cvalue(::google::protobuf::int64 value) {
  set_has_cvalue();
  cvalue_ = value;
}

// optional uint32 chairid = 7;
inline bool seat_info::has_chairid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void seat_info::set_has_chairid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void seat_info::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void seat_info::clear_chairid() {
  chairid_ = 0u;
  clear_has_chairid();
}
inline ::google::protobuf::uint32 seat_info::chairid() const {
  return chairid_;
}
inline void seat_info::set_chairid(::google::protobuf::uint32 value) {
  set_has_chairid();
  chairid_ = value;
}

// optional uint32 head_icon = 8;
inline bool seat_info::has_head_icon() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void seat_info::set_has_head_icon() {
  _has_bits_[0] |= 0x00000080u;
}
inline void seat_info::clear_has_head_icon() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void seat_info::clear_head_icon() {
  head_icon_ = 0u;
  clear_has_head_icon();
}
inline ::google::protobuf::uint32 seat_info::head_icon() const {
  return head_icon_;
}
inline void seat_info::set_head_icon(::google::protobuf::uint32 value) {
  set_has_head_icon();
  head_icon_ = value;
}

// optional int64 buyin = 9;
inline bool seat_info::has_buyin() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void seat_info::set_has_buyin() {
  _has_bits_[0] |= 0x00000100u;
}
inline void seat_info::clear_has_buyin() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void seat_info::clear_buyin() {
  buyin_ = GOOGLE_LONGLONG(0);
  clear_has_buyin();
}
inline ::google::protobuf::int64 seat_info::buyin() const {
  return buyin_;
}
inline void seat_info::set_buyin(::google::protobuf::int64 value) {
  set_has_buyin();
  buyin_ = value;
}

// optional bytes city = 10;
inline bool seat_info::has_city() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void seat_info::set_has_city() {
  _has_bits_[0] |= 0x00000200u;
}
inline void seat_info::clear_has_city() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void seat_info::clear_city() {
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    city_->clear();
  }
  clear_has_city();
}
inline const ::std::string& seat_info::city() const {
  return *city_;
}
inline void seat_info::set_city(const ::std::string& value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(value);
}
inline void seat_info::set_city(const char* value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(value);
}
inline void seat_info::set_city(const void* value, size_t size) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* seat_info::mutable_city() {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  return city_;
}
inline ::std::string* seat_info::release_city() {
  clear_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = city_;
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void seat_info::set_allocated_city(::std::string* city) {
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (city) {
    set_has_city();
    city_ = city;
  } else {
    clear_has_city();
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 wincount = 11;
inline bool seat_info::has_wincount() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void seat_info::set_has_wincount() {
  _has_bits_[0] |= 0x00000400u;
}
inline void seat_info::clear_has_wincount() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void seat_info::clear_wincount() {
  wincount_ = 0u;
  clear_has_wincount();
}
inline ::google::protobuf::uint32 seat_info::wincount() const {
  return wincount_;
}
inline void seat_info::set_wincount(::google::protobuf::uint32 value) {
  set_has_wincount();
  wincount_ = value;
}

// optional int64 betscore = 12;
inline bool seat_info::has_betscore() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void seat_info::set_has_betscore() {
  _has_bits_[0] |= 0x00000800u;
}
inline void seat_info::clear_has_betscore() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void seat_info::clear_betscore() {
  betscore_ = GOOGLE_LONGLONG(0);
  clear_has_betscore();
}
inline ::google::protobuf::int64 seat_info::betscore() const {
  return betscore_;
}
inline void seat_info::set_betscore(::google::protobuf::int64 value) {
  set_has_betscore();
  betscore_ = value;
}

// optional uint32 betcount = 13;
inline bool seat_info::has_betcount() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void seat_info::set_has_betcount() {
  _has_bits_[0] |= 0x00001000u;
}
inline void seat_info::clear_has_betcount() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void seat_info::clear_betcount() {
  betcount_ = 0u;
  clear_has_betcount();
}
inline ::google::protobuf::uint32 seat_info::betcount() const {
  return betcount_;
}
inline void seat_info::set_betcount(::google::protobuf::uint32 value) {
  set_has_betcount();
  betcount_ = value;
}

// optional uint32 showuid = 14;
inline bool seat_info::has_showuid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void seat_info::set_has_showuid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void seat_info::clear_has_showuid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void seat_info::clear_showuid() {
  showuid_ = 0u;
  clear_has_showuid();
}
inline ::google::protobuf::uint32 seat_info::showuid() const {
  return showuid_;
}
inline void seat_info::set_showuid(::google::protobuf::uint32 value) {
  set_has_showuid();
  showuid_ = value;
}

// -------------------------------------------------------------------

// seat_face

// optional uint32 uid = 1;
inline bool seat_face::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void seat_face::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void seat_face::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void seat_face::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 seat_face::uid() const {
  return uid_;
}
inline void seat_face::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional bytes name = 2;
inline bool seat_face::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void seat_face::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void seat_face::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void seat_face::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& seat_face::name() const {
  return *name_;
}
inline void seat_face::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void seat_face::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void seat_face::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* seat_face::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* seat_face::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void seat_face::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 head_icon = 3;
inline bool seat_face::has_head_icon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void seat_face::set_has_head_icon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void seat_face::clear_has_head_icon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void seat_face::clear_head_icon() {
  head_icon_ = 0u;
  clear_has_head_icon();
}
inline ::google::protobuf::uint32 seat_face::head_icon() const {
  return head_icon_;
}
inline void seat_face::set_head_icon(::google::protobuf::uint32 value) {
  set_has_head_icon();
  head_icon_ = value;
}

// optional uint32 ready = 4;
inline bool seat_face::has_ready() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void seat_face::set_has_ready() {
  _has_bits_[0] |= 0x00000008u;
}
inline void seat_face::clear_has_ready() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void seat_face::clear_ready() {
  ready_ = 0u;
  clear_has_ready();
}
inline ::google::protobuf::uint32 seat_face::ready() const {
  return ready_;
}
inline void seat_face::set_ready(::google::protobuf::uint32 value) {
  set_has_ready();
  ready_ = value;
}

// optional uint32 chairid = 5;
inline bool seat_face::has_chairid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void seat_face::set_has_chairid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void seat_face::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void seat_face::clear_chairid() {
  chairid_ = 0u;
  clear_has_chairid();
}
inline ::google::protobuf::uint32 seat_face::chairid() const {
  return chairid_;
}
inline void seat_face::set_chairid(::google::protobuf::uint32 value) {
  set_has_chairid();
  chairid_ = value;
}

// -------------------------------------------------------------------

// looker_info

// optional uint32 uid = 1;
inline bool looker_info::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void looker_info::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void looker_info::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void looker_info::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 looker_info::uid() const {
  return uid_;
}
inline void looker_info::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional bytes name = 2;
inline bool looker_info::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void looker_info::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void looker_info::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void looker_info::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& looker_info::name() const {
  return *name_;
}
inline void looker_info::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void looker_info::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void looker_info::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* looker_info::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* looker_info::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void looker_info::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 head_icon = 3;
inline bool looker_info::has_head_icon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void looker_info::set_has_head_icon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void looker_info::clear_has_head_icon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void looker_info::clear_head_icon() {
  head_icon_ = 0u;
  clear_has_head_icon();
}
inline ::google::protobuf::uint32 looker_info::head_icon() const {
  return head_icon_;
}
inline void looker_info::set_head_icon(::google::protobuf::uint32 value) {
  set_has_head_icon();
  head_icon_ = value;
}

// optional uint32 sex = 4;
inline bool looker_info::has_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void looker_info::set_has_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void looker_info::clear_has_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void looker_info::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 looker_info::sex() const {
  return sex_;
}
inline void looker_info::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional int64 score = 5;
inline bool looker_info::has_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void looker_info::set_has_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void looker_info::clear_has_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void looker_info::clear_score() {
  score_ = GOOGLE_LONGLONG(0);
  clear_has_score();
}
inline ::google::protobuf::int64 looker_info::score() const {
  return score_;
}
inline void looker_info::set_score(::google::protobuf::int64 value) {
  set_has_score();
  score_ = value;
}

// optional int64 coin = 6;
inline bool looker_info::has_coin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void looker_info::set_has_coin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void looker_info::clear_has_coin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void looker_info::clear_coin() {
  coin_ = GOOGLE_LONGLONG(0);
  clear_has_coin();
}
inline ::google::protobuf::int64 looker_info::coin() const {
  return coin_;
}
inline void looker_info::set_coin(::google::protobuf::int64 value) {
  set_has_coin();
  coin_ = value;
}

// optional bytes city = 7;
inline bool looker_info::has_city() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void looker_info::set_has_city() {
  _has_bits_[0] |= 0x00000040u;
}
inline void looker_info::clear_has_city() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void looker_info::clear_city() {
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    city_->clear();
  }
  clear_has_city();
}
inline const ::std::string& looker_info::city() const {
  return *city_;
}
inline void looker_info::set_city(const ::std::string& value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(value);
}
inline void looker_info::set_city(const char* value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(value);
}
inline void looker_info::set_city(const void* value, size_t size) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* looker_info::mutable_city() {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  return city_;
}
inline ::std::string* looker_info::release_city() {
  clear_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = city_;
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void looker_info::set_allocated_city(::std::string* city) {
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (city) {
    set_has_city();
    city_ = city;
  } else {
    clear_has_city();
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 wincount = 8;
inline bool looker_info::has_wincount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void looker_info::set_has_wincount() {
  _has_bits_[0] |= 0x00000080u;
}
inline void looker_info::clear_has_wincount() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void looker_info::clear_wincount() {
  wincount_ = 0u;
  clear_has_wincount();
}
inline ::google::protobuf::uint32 looker_info::wincount() const {
  return wincount_;
}
inline void looker_info::set_wincount(::google::protobuf::uint32 value) {
  set_has_wincount();
  wincount_ = value;
}

// optional int64 betscore = 9;
inline bool looker_info::has_betscore() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void looker_info::set_has_betscore() {
  _has_bits_[0] |= 0x00000100u;
}
inline void looker_info::clear_has_betscore() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void looker_info::clear_betscore() {
  betscore_ = GOOGLE_LONGLONG(0);
  clear_has_betscore();
}
inline ::google::protobuf::int64 looker_info::betscore() const {
  return betscore_;
}
inline void looker_info::set_betscore(::google::protobuf::int64 value) {
  set_has_betscore();
  betscore_ = value;
}

// optional uint32 betcount = 10;
inline bool looker_info::has_betcount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void looker_info::set_has_betcount() {
  _has_bits_[0] |= 0x00000200u;
}
inline void looker_info::clear_has_betcount() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void looker_info::clear_betcount() {
  betcount_ = 0u;
  clear_has_betcount();
}
inline ::google::protobuf::uint32 looker_info::betcount() const {
  return betcount_;
}
inline void looker_info::set_betcount(::google::protobuf::uint32 value) {
  set_has_betcount();
  betcount_ = value;
}

// -------------------------------------------------------------------

// land_table_info

// optional uint32 tableid = 1;
inline bool land_table_info::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void land_table_info::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void land_table_info::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void land_table_info::clear_tableid() {
  tableid_ = 0u;
  clear_has_tableid();
}
inline ::google::protobuf::uint32 land_table_info::tableid() const {
  return tableid_;
}
inline void land_table_info::set_tableid(::google::protobuf::uint32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional bytes tablename = 2;
inline bool land_table_info::has_tablename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void land_table_info::set_has_tablename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void land_table_info::clear_has_tablename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void land_table_info::clear_tablename() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    tablename_->clear();
  }
  clear_has_tablename();
}
inline const ::std::string& land_table_info::tablename() const {
  return *tablename_;
}
inline void land_table_info::set_tablename(const ::std::string& value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
}
inline void land_table_info::set_tablename(const char* value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
}
inline void land_table_info::set_tablename(const void* value, size_t size) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* land_table_info::mutable_tablename() {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  return tablename_;
}
inline ::std::string* land_table_info::release_tablename() {
  clear_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tablename_;
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void land_table_info::set_allocated_tablename(::std::string* tablename) {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (tablename) {
    set_has_tablename();
    tablename_ = tablename;
  } else {
    clear_has_tablename();
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 is_passwd = 3;
inline bool land_table_info::has_is_passwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void land_table_info::set_has_is_passwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void land_table_info::clear_has_is_passwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void land_table_info::clear_is_passwd() {
  is_passwd_ = 0u;
  clear_has_is_passwd();
}
inline ::google::protobuf::uint32 land_table_info::is_passwd() const {
  return is_passwd_;
}
inline void land_table_info::set_is_passwd(::google::protobuf::uint32 value) {
  set_has_is_passwd();
  is_passwd_ = value;
}

// optional uint32 deal = 4;
inline bool land_table_info::has_deal() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void land_table_info::set_has_deal() {
  _has_bits_[0] |= 0x00000008u;
}
inline void land_table_info::clear_has_deal() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void land_table_info::clear_deal() {
  deal_ = 0u;
  clear_has_deal();
}
inline ::google::protobuf::uint32 land_table_info::deal() const {
  return deal_;
}
inline void land_table_info::set_deal(::google::protobuf::uint32 value) {
  set_has_deal();
  deal_ = value;
}

// optional int64 basescore = 5;
inline bool land_table_info::has_basescore() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void land_table_info::set_has_basescore() {
  _has_bits_[0] |= 0x00000010u;
}
inline void land_table_info::clear_has_basescore() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void land_table_info::clear_basescore() {
  basescore_ = GOOGLE_LONGLONG(0);
  clear_has_basescore();
}
inline ::google::protobuf::int64 land_table_info::basescore() const {
  return basescore_;
}
inline void land_table_info::set_basescore(::google::protobuf::int64 value) {
  set_has_basescore();
  basescore_ = value;
}

// optional uint32 consume = 6;
inline bool land_table_info::has_consume() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void land_table_info::set_has_consume() {
  _has_bits_[0] |= 0x00000020u;
}
inline void land_table_info::clear_has_consume() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void land_table_info::clear_consume() {
  consume_ = 0u;
  clear_has_consume();
}
inline ::google::protobuf::uint32 land_table_info::consume() const {
  return consume_;
}
inline void land_table_info::set_consume(::google::protobuf::uint32 value) {
  set_has_consume();
  consume_ = value;
}

// optional uint64 entermin = 7;
inline bool land_table_info::has_entermin() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void land_table_info::set_has_entermin() {
  _has_bits_[0] |= 0x00000040u;
}
inline void land_table_info::clear_has_entermin() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void land_table_info::clear_entermin() {
  entermin_ = GOOGLE_ULONGLONG(0);
  clear_has_entermin();
}
inline ::google::protobuf::uint64 land_table_info::entermin() const {
  return entermin_;
}
inline void land_table_info::set_entermin(::google::protobuf::uint64 value) {
  set_has_entermin();
  entermin_ = value;
}

// optional uint32 duetime = 8;
inline bool land_table_info::has_duetime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void land_table_info::set_has_duetime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void land_table_info::clear_has_duetime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void land_table_info::clear_duetime() {
  duetime_ = 0u;
  clear_has_duetime();
}
inline ::google::protobuf::uint32 land_table_info::duetime() const {
  return duetime_;
}
inline void land_table_info::set_duetime(::google::protobuf::uint32 value) {
  set_has_duetime();
  duetime_ = value;
}

// optional uint32 feetype = 9;
inline bool land_table_info::has_feetype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void land_table_info::set_has_feetype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void land_table_info::clear_has_feetype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void land_table_info::clear_feetype() {
  feetype_ = 0u;
  clear_has_feetype();
}
inline ::google::protobuf::uint32 land_table_info::feetype() const {
  return feetype_;
}
inline void land_table_info::set_feetype(::google::protobuf::uint32 value) {
  set_has_feetype();
  feetype_ = value;
}

// optional int64 feevalue = 10;
inline bool land_table_info::has_feevalue() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void land_table_info::set_has_feevalue() {
  _has_bits_[0] |= 0x00000200u;
}
inline void land_table_info::clear_has_feevalue() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void land_table_info::clear_feevalue() {
  feevalue_ = GOOGLE_LONGLONG(0);
  clear_has_feevalue();
}
inline ::google::protobuf::int64 land_table_info::feevalue() const {
  return feevalue_;
}
inline void land_table_info::set_feevalue(::google::protobuf::int64 value) {
  set_has_feevalue();
  feevalue_ = value;
}

// optional bytes hostname = 11;
inline bool land_table_info::has_hostname() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void land_table_info::set_has_hostname() {
  _has_bits_[0] |= 0x00000400u;
}
inline void land_table_info::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void land_table_info::clear_hostname() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    hostname_->clear();
  }
  clear_has_hostname();
}
inline const ::std::string& land_table_info::hostname() const {
  return *hostname_;
}
inline void land_table_info::set_hostname(const ::std::string& value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void land_table_info::set_hostname(const char* value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void land_table_info::set_hostname(const void* value, size_t size) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* land_table_info::mutable_hostname() {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  return hostname_;
}
inline ::std::string* land_table_info::release_hostname() {
  clear_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hostname_;
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void land_table_info::set_allocated_hostname(::std::string* hostname) {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (hostname) {
    set_has_hostname();
    hostname_ = hostname;
  } else {
    clear_has_hostname();
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 show_hand_num = 12;
inline bool land_table_info::has_show_hand_num() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void land_table_info::set_has_show_hand_num() {
  _has_bits_[0] |= 0x00000800u;
}
inline void land_table_info::clear_has_show_hand_num() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void land_table_info::clear_show_hand_num() {
  show_hand_num_ = 0u;
  clear_has_show_hand_num();
}
inline ::google::protobuf::uint32 land_table_info::show_hand_num() const {
  return show_hand_num_;
}
inline void land_table_info::set_show_hand_num(::google::protobuf::uint32 value) {
  set_has_show_hand_num();
  show_hand_num_ = value;
}

// optional uint32 call_time = 13;
inline bool land_table_info::has_call_time() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void land_table_info::set_has_call_time() {
  _has_bits_[0] |= 0x00001000u;
}
inline void land_table_info::clear_has_call_time() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void land_table_info::clear_call_time() {
  call_time_ = 0u;
  clear_has_call_time();
}
inline ::google::protobuf::uint32 land_table_info::call_time() const {
  return call_time_;
}
inline void land_table_info::set_call_time(::google::protobuf::uint32 value) {
  set_has_call_time();
  call_time_ = value;
}

// optional uint32 card_time = 14;
inline bool land_table_info::has_card_time() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void land_table_info::set_has_card_time() {
  _has_bits_[0] |= 0x00002000u;
}
inline void land_table_info::clear_has_card_time() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void land_table_info::clear_card_time() {
  card_time_ = 0u;
  clear_has_card_time();
}
inline ::google::protobuf::uint32 land_table_info::card_time() const {
  return card_time_;
}
inline void land_table_info::set_card_time(::google::protobuf::uint32 value) {
  set_has_card_time();
  card_time_ = value;
}

// -------------------------------------------------------------------

// showhand_table_info

// optional uint32 tableid = 1;
inline bool showhand_table_info::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void showhand_table_info::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void showhand_table_info::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void showhand_table_info::clear_tableid() {
  tableid_ = 0u;
  clear_has_tableid();
}
inline ::google::protobuf::uint32 showhand_table_info::tableid() const {
  return tableid_;
}
inline void showhand_table_info::set_tableid(::google::protobuf::uint32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional bytes tablename = 2;
inline bool showhand_table_info::has_tablename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void showhand_table_info::set_has_tablename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void showhand_table_info::clear_has_tablename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void showhand_table_info::clear_tablename() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    tablename_->clear();
  }
  clear_has_tablename();
}
inline const ::std::string& showhand_table_info::tablename() const {
  return *tablename_;
}
inline void showhand_table_info::set_tablename(const ::std::string& value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
}
inline void showhand_table_info::set_tablename(const char* value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
}
inline void showhand_table_info::set_tablename(const void* value, size_t size) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* showhand_table_info::mutable_tablename() {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  return tablename_;
}
inline ::std::string* showhand_table_info::release_tablename() {
  clear_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tablename_;
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void showhand_table_info::set_allocated_tablename(::std::string* tablename) {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (tablename) {
    set_has_tablename();
    tablename_ = tablename;
  } else {
    clear_has_tablename();
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 is_passwd = 3;
inline bool showhand_table_info::has_is_passwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void showhand_table_info::set_has_is_passwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void showhand_table_info::clear_has_is_passwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void showhand_table_info::clear_is_passwd() {
  is_passwd_ = 0u;
  clear_has_is_passwd();
}
inline ::google::protobuf::uint32 showhand_table_info::is_passwd() const {
  return is_passwd_;
}
inline void showhand_table_info::set_is_passwd(::google::protobuf::uint32 value) {
  set_has_is_passwd();
  is_passwd_ = value;
}

// optional int64 basescore = 4;
inline bool showhand_table_info::has_basescore() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void showhand_table_info::set_has_basescore() {
  _has_bits_[0] |= 0x00000008u;
}
inline void showhand_table_info::clear_has_basescore() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void showhand_table_info::clear_basescore() {
  basescore_ = GOOGLE_LONGLONG(0);
  clear_has_basescore();
}
inline ::google::protobuf::int64 showhand_table_info::basescore() const {
  return basescore_;
}
inline void showhand_table_info::set_basescore(::google::protobuf::int64 value) {
  set_has_basescore();
  basescore_ = value;
}

// optional uint32 consume = 5;
inline bool showhand_table_info::has_consume() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void showhand_table_info::set_has_consume() {
  _has_bits_[0] |= 0x00000010u;
}
inline void showhand_table_info::clear_has_consume() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void showhand_table_info::clear_consume() {
  consume_ = 0u;
  clear_has_consume();
}
inline ::google::protobuf::uint32 showhand_table_info::consume() const {
  return consume_;
}
inline void showhand_table_info::set_consume(::google::protobuf::uint32 value) {
  set_has_consume();
  consume_ = value;
}

// optional uint64 entermin = 6;
inline bool showhand_table_info::has_entermin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void showhand_table_info::set_has_entermin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void showhand_table_info::clear_has_entermin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void showhand_table_info::clear_entermin() {
  entermin_ = GOOGLE_ULONGLONG(0);
  clear_has_entermin();
}
inline ::google::protobuf::uint64 showhand_table_info::entermin() const {
  return entermin_;
}
inline void showhand_table_info::set_entermin(::google::protobuf::uint64 value) {
  set_has_entermin();
  entermin_ = value;
}

// optional uint32 duetime = 7;
inline bool showhand_table_info::has_duetime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void showhand_table_info::set_has_duetime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void showhand_table_info::clear_has_duetime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void showhand_table_info::clear_duetime() {
  duetime_ = 0u;
  clear_has_duetime();
}
inline ::google::protobuf::uint32 showhand_table_info::duetime() const {
  return duetime_;
}
inline void showhand_table_info::set_duetime(::google::protobuf::uint32 value) {
  set_has_duetime();
  duetime_ = value;
}

// optional uint32 feetype = 8;
inline bool showhand_table_info::has_feetype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void showhand_table_info::set_has_feetype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void showhand_table_info::clear_has_feetype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void showhand_table_info::clear_feetype() {
  feetype_ = 0u;
  clear_has_feetype();
}
inline ::google::protobuf::uint32 showhand_table_info::feetype() const {
  return feetype_;
}
inline void showhand_table_info::set_feetype(::google::protobuf::uint32 value) {
  set_has_feetype();
  feetype_ = value;
}

// optional int64 feevalue = 9;
inline bool showhand_table_info::has_feevalue() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void showhand_table_info::set_has_feevalue() {
  _has_bits_[0] |= 0x00000100u;
}
inline void showhand_table_info::clear_has_feevalue() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void showhand_table_info::clear_feevalue() {
  feevalue_ = GOOGLE_LONGLONG(0);
  clear_has_feevalue();
}
inline ::google::protobuf::int64 showhand_table_info::feevalue() const {
  return feevalue_;
}
inline void showhand_table_info::set_feevalue(::google::protobuf::int64 value) {
  set_has_feevalue();
  feevalue_ = value;
}

// optional bytes hostname = 10;
inline bool showhand_table_info::has_hostname() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void showhand_table_info::set_has_hostname() {
  _has_bits_[0] |= 0x00000200u;
}
inline void showhand_table_info::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void showhand_table_info::clear_hostname() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    hostname_->clear();
  }
  clear_has_hostname();
}
inline const ::std::string& showhand_table_info::hostname() const {
  return *hostname_;
}
inline void showhand_table_info::set_hostname(const ::std::string& value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void showhand_table_info::set_hostname(const char* value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void showhand_table_info::set_hostname(const void* value, size_t size) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* showhand_table_info::mutable_hostname() {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  return hostname_;
}
inline ::std::string* showhand_table_info::release_hostname() {
  clear_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hostname_;
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void showhand_table_info::set_allocated_hostname(::std::string* hostname) {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (hostname) {
    set_has_hostname();
    hostname_ = hostname;
  } else {
    clear_has_hostname();
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 card_time = 11;
inline bool showhand_table_info::has_card_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void showhand_table_info::set_has_card_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void showhand_table_info::clear_has_card_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void showhand_table_info::clear_card_time() {
  card_time_ = 0u;
  clear_has_card_time();
}
inline ::google::protobuf::uint32 showhand_table_info::card_time() const {
  return card_time_;
}
inline void showhand_table_info::set_card_time(::google::protobuf::uint32 value) {
  set_has_card_time();
  card_time_ = value;
}

// optional uint32 table_state = 12;
inline bool showhand_table_info::has_table_state() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void showhand_table_info::set_has_table_state() {
  _has_bits_[0] |= 0x00000800u;
}
inline void showhand_table_info::clear_has_table_state() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void showhand_table_info::clear_table_state() {
  table_state_ = 0u;
  clear_has_table_state();
}
inline ::google::protobuf::uint32 showhand_table_info::table_state() const {
  return table_state_;
}
inline void showhand_table_info::set_table_state(::google::protobuf::uint32 value) {
  set_has_table_state();
  table_state_ = value;
}

// repeated .net.seat_face players = 13;
inline int showhand_table_info::players_size() const {
  return players_.size();
}
inline void showhand_table_info::clear_players() {
  players_.Clear();
}
inline const ::net::seat_face& showhand_table_info::players(int index) const {
  return players_.Get(index);
}
inline ::net::seat_face* showhand_table_info::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::net::seat_face* showhand_table_info::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::net::seat_face >&
showhand_table_info::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::net::seat_face >*
showhand_table_info::mutable_players() {
  return &players_;
}

// -------------------------------------------------------------------

// bainiu_table_info

// optional uint32 tableid = 1;
inline bool bainiu_table_info::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bainiu_table_info::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bainiu_table_info::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bainiu_table_info::clear_tableid() {
  tableid_ = 0u;
  clear_has_tableid();
}
inline ::google::protobuf::uint32 bainiu_table_info::tableid() const {
  return tableid_;
}
inline void bainiu_table_info::set_tableid(::google::protobuf::uint32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional bytes tablename = 2;
inline bool bainiu_table_info::has_tablename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bainiu_table_info::set_has_tablename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bainiu_table_info::clear_has_tablename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bainiu_table_info::clear_tablename() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    tablename_->clear();
  }
  clear_has_tablename();
}
inline const ::std::string& bainiu_table_info::tablename() const {
  return *tablename_;
}
inline void bainiu_table_info::set_tablename(const ::std::string& value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
}
inline void bainiu_table_info::set_tablename(const char* value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
}
inline void bainiu_table_info::set_tablename(const void* value, size_t size) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* bainiu_table_info::mutable_tablename() {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  return tablename_;
}
inline ::std::string* bainiu_table_info::release_tablename() {
  clear_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tablename_;
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void bainiu_table_info::set_allocated_tablename(::std::string* tablename) {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (tablename) {
    set_has_tablename();
    tablename_ = tablename;
  } else {
    clear_has_tablename();
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 is_passwd = 3;
inline bool bainiu_table_info::has_is_passwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void bainiu_table_info::set_has_is_passwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void bainiu_table_info::clear_has_is_passwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void bainiu_table_info::clear_is_passwd() {
  is_passwd_ = 0u;
  clear_has_is_passwd();
}
inline ::google::protobuf::uint32 bainiu_table_info::is_passwd() const {
  return is_passwd_;
}
inline void bainiu_table_info::set_is_passwd(::google::protobuf::uint32 value) {
  set_has_is_passwd();
  is_passwd_ = value;
}

// optional int64 basescore = 4;
inline bool bainiu_table_info::has_basescore() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void bainiu_table_info::set_has_basescore() {
  _has_bits_[0] |= 0x00000008u;
}
inline void bainiu_table_info::clear_has_basescore() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void bainiu_table_info::clear_basescore() {
  basescore_ = GOOGLE_LONGLONG(0);
  clear_has_basescore();
}
inline ::google::protobuf::int64 bainiu_table_info::basescore() const {
  return basescore_;
}
inline void bainiu_table_info::set_basescore(::google::protobuf::int64 value) {
  set_has_basescore();
  basescore_ = value;
}

// optional uint32 consume = 5;
inline bool bainiu_table_info::has_consume() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void bainiu_table_info::set_has_consume() {
  _has_bits_[0] |= 0x00000010u;
}
inline void bainiu_table_info::clear_has_consume() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void bainiu_table_info::clear_consume() {
  consume_ = 0u;
  clear_has_consume();
}
inline ::google::protobuf::uint32 bainiu_table_info::consume() const {
  return consume_;
}
inline void bainiu_table_info::set_consume(::google::protobuf::uint32 value) {
  set_has_consume();
  consume_ = value;
}

// optional uint64 entermin = 6;
inline bool bainiu_table_info::has_entermin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void bainiu_table_info::set_has_entermin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void bainiu_table_info::clear_has_entermin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void bainiu_table_info::clear_entermin() {
  entermin_ = GOOGLE_ULONGLONG(0);
  clear_has_entermin();
}
inline ::google::protobuf::uint64 bainiu_table_info::entermin() const {
  return entermin_;
}
inline void bainiu_table_info::set_entermin(::google::protobuf::uint64 value) {
  set_has_entermin();
  entermin_ = value;
}

// optional uint32 duetime = 7;
inline bool bainiu_table_info::has_duetime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void bainiu_table_info::set_has_duetime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void bainiu_table_info::clear_has_duetime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void bainiu_table_info::clear_duetime() {
  duetime_ = 0u;
  clear_has_duetime();
}
inline ::google::protobuf::uint32 bainiu_table_info::duetime() const {
  return duetime_;
}
inline void bainiu_table_info::set_duetime(::google::protobuf::uint32 value) {
  set_has_duetime();
  duetime_ = value;
}

// optional uint32 feetype = 8;
inline bool bainiu_table_info::has_feetype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void bainiu_table_info::set_has_feetype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void bainiu_table_info::clear_has_feetype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void bainiu_table_info::clear_feetype() {
  feetype_ = 0u;
  clear_has_feetype();
}
inline ::google::protobuf::uint32 bainiu_table_info::feetype() const {
  return feetype_;
}
inline void bainiu_table_info::set_feetype(::google::protobuf::uint32 value) {
  set_has_feetype();
  feetype_ = value;
}

// optional int64 feevalue = 9;
inline bool bainiu_table_info::has_feevalue() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void bainiu_table_info::set_has_feevalue() {
  _has_bits_[0] |= 0x00000100u;
}
inline void bainiu_table_info::clear_has_feevalue() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void bainiu_table_info::clear_feevalue() {
  feevalue_ = GOOGLE_LONGLONG(0);
  clear_has_feevalue();
}
inline ::google::protobuf::int64 bainiu_table_info::feevalue() const {
  return feevalue_;
}
inline void bainiu_table_info::set_feevalue(::google::protobuf::int64 value) {
  set_has_feevalue();
  feevalue_ = value;
}

// optional bytes hostname = 10;
inline bool bainiu_table_info::has_hostname() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void bainiu_table_info::set_has_hostname() {
  _has_bits_[0] |= 0x00000200u;
}
inline void bainiu_table_info::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void bainiu_table_info::clear_hostname() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    hostname_->clear();
  }
  clear_has_hostname();
}
inline const ::std::string& bainiu_table_info::hostname() const {
  return *hostname_;
}
inline void bainiu_table_info::set_hostname(const ::std::string& value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void bainiu_table_info::set_hostname(const char* value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void bainiu_table_info::set_hostname(const void* value, size_t size) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* bainiu_table_info::mutable_hostname() {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  return hostname_;
}
inline ::std::string* bainiu_table_info::release_hostname() {
  clear_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hostname_;
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void bainiu_table_info::set_allocated_hostname(::std::string* hostname) {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (hostname) {
    set_has_hostname();
    hostname_ = hostname;
  } else {
    clear_has_hostname();
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 card_time = 11;
inline bool bainiu_table_info::has_card_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void bainiu_table_info::set_has_card_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void bainiu_table_info::clear_has_card_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void bainiu_table_info::clear_card_time() {
  card_time_ = 0u;
  clear_has_card_time();
}
inline ::google::protobuf::uint32 bainiu_table_info::card_time() const {
  return card_time_;
}
inline void bainiu_table_info::set_card_time(::google::protobuf::uint32 value) {
  set_has_card_time();
  card_time_ = value;
}

// optional uint32 table_state = 12;
inline bool bainiu_table_info::has_table_state() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void bainiu_table_info::set_has_table_state() {
  _has_bits_[0] |= 0x00000800u;
}
inline void bainiu_table_info::clear_has_table_state() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void bainiu_table_info::clear_table_state() {
  table_state_ = 0u;
  clear_has_table_state();
}
inline ::google::protobuf::uint32 bainiu_table_info::table_state() const {
  return table_state_;
}
inline void bainiu_table_info::set_table_state(::google::protobuf::uint32 value) {
  set_has_table_state();
  table_state_ = value;
}

// optional int64 sitdown = 13;
inline bool bainiu_table_info::has_sitdown() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void bainiu_table_info::set_has_sitdown() {
  _has_bits_[0] |= 0x00001000u;
}
inline void bainiu_table_info::clear_has_sitdown() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void bainiu_table_info::clear_sitdown() {
  sitdown_ = GOOGLE_LONGLONG(0);
  clear_has_sitdown();
}
inline ::google::protobuf::int64 bainiu_table_info::sitdown() const {
  return sitdown_;
}
inline void bainiu_table_info::set_sitdown(::google::protobuf::int64 value) {
  set_has_sitdown();
  sitdown_ = value;
}

// optional int64 apply_banker_condition = 14;
inline bool bainiu_table_info::has_apply_banker_condition() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void bainiu_table_info::set_has_apply_banker_condition() {
  _has_bits_[0] |= 0x00002000u;
}
inline void bainiu_table_info::clear_has_apply_banker_condition() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void bainiu_table_info::clear_apply_banker_condition() {
  apply_banker_condition_ = GOOGLE_LONGLONG(0);
  clear_has_apply_banker_condition();
}
inline ::google::protobuf::int64 bainiu_table_info::apply_banker_condition() const {
  return apply_banker_condition_;
}
inline void bainiu_table_info::set_apply_banker_condition(::google::protobuf::int64 value) {
  set_has_apply_banker_condition();
  apply_banker_condition_ = value;
}

// optional int64 apply_banker_maxscore = 15;
inline bool bainiu_table_info::has_apply_banker_maxscore() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void bainiu_table_info::set_has_apply_banker_maxscore() {
  _has_bits_[0] |= 0x00004000u;
}
inline void bainiu_table_info::clear_has_apply_banker_maxscore() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void bainiu_table_info::clear_apply_banker_maxscore() {
  apply_banker_maxscore_ = GOOGLE_LONGLONG(0);
  clear_has_apply_banker_maxscore();
}
inline ::google::protobuf::int64 bainiu_table_info::apply_banker_maxscore() const {
  return apply_banker_maxscore_;
}
inline void bainiu_table_info::set_apply_banker_maxscore(::google::protobuf::int64 value) {
  set_has_apply_banker_maxscore();
  apply_banker_maxscore_ = value;
}

// optional uint32 banker_max_time = 16;
inline bool bainiu_table_info::has_banker_max_time() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void bainiu_table_info::set_has_banker_max_time() {
  _has_bits_[0] |= 0x00008000u;
}
inline void bainiu_table_info::clear_has_banker_max_time() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void bainiu_table_info::clear_banker_max_time() {
  banker_max_time_ = 0u;
  clear_has_banker_max_time();
}
inline ::google::protobuf::uint32 bainiu_table_info::banker_max_time() const {
  return banker_max_time_;
}
inline void bainiu_table_info::set_banker_max_time(::google::protobuf::uint32 value) {
  set_has_banker_max_time();
  banker_max_time_ = value;
}

// optional uint32 max_jetton_rate = 17;
inline bool bainiu_table_info::has_max_jetton_rate() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void bainiu_table_info::set_has_max_jetton_rate() {
  _has_bits_[0] |= 0x00010000u;
}
inline void bainiu_table_info::clear_has_max_jetton_rate() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void bainiu_table_info::clear_max_jetton_rate() {
  max_jetton_rate_ = 0u;
  clear_has_max_jetton_rate();
}
inline ::google::protobuf::uint32 bainiu_table_info::max_jetton_rate() const {
  return max_jetton_rate_;
}
inline void bainiu_table_info::set_max_jetton_rate(::google::protobuf::uint32 value) {
  set_has_max_jetton_rate();
  max_jetton_rate_ = value;
}

// -------------------------------------------------------------------

// texas_table_info

// optional uint32 tableid = 1;
inline bool texas_table_info::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void texas_table_info::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void texas_table_info::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void texas_table_info::clear_tableid() {
  tableid_ = 0u;
  clear_has_tableid();
}
inline ::google::protobuf::uint32 texas_table_info::tableid() const {
  return tableid_;
}
inline void texas_table_info::set_tableid(::google::protobuf::uint32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional bytes tablename = 2;
inline bool texas_table_info::has_tablename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void texas_table_info::set_has_tablename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void texas_table_info::clear_has_tablename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void texas_table_info::clear_tablename() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    tablename_->clear();
  }
  clear_has_tablename();
}
inline const ::std::string& texas_table_info::tablename() const {
  return *tablename_;
}
inline void texas_table_info::set_tablename(const ::std::string& value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
}
inline void texas_table_info::set_tablename(const char* value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
}
inline void texas_table_info::set_tablename(const void* value, size_t size) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* texas_table_info::mutable_tablename() {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  return tablename_;
}
inline ::std::string* texas_table_info::release_tablename() {
  clear_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tablename_;
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void texas_table_info::set_allocated_tablename(::std::string* tablename) {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (tablename) {
    set_has_tablename();
    tablename_ = tablename;
  } else {
    clear_has_tablename();
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 is_passwd = 3;
inline bool texas_table_info::has_is_passwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void texas_table_info::set_has_is_passwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void texas_table_info::clear_has_is_passwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void texas_table_info::clear_is_passwd() {
  is_passwd_ = 0u;
  clear_has_is_passwd();
}
inline ::google::protobuf::uint32 texas_table_info::is_passwd() const {
  return is_passwd_;
}
inline void texas_table_info::set_is_passwd(::google::protobuf::uint32 value) {
  set_has_is_passwd();
  is_passwd_ = value;
}

// optional int64 basescore = 4;
inline bool texas_table_info::has_basescore() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void texas_table_info::set_has_basescore() {
  _has_bits_[0] |= 0x00000008u;
}
inline void texas_table_info::clear_has_basescore() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void texas_table_info::clear_basescore() {
  basescore_ = GOOGLE_LONGLONG(0);
  clear_has_basescore();
}
inline ::google::protobuf::int64 texas_table_info::basescore() const {
  return basescore_;
}
inline void texas_table_info::set_basescore(::google::protobuf::int64 value) {
  set_has_basescore();
  basescore_ = value;
}

// optional uint32 consume = 5;
inline bool texas_table_info::has_consume() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void texas_table_info::set_has_consume() {
  _has_bits_[0] |= 0x00000010u;
}
inline void texas_table_info::clear_has_consume() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void texas_table_info::clear_consume() {
  consume_ = 0u;
  clear_has_consume();
}
inline ::google::protobuf::uint32 texas_table_info::consume() const {
  return consume_;
}
inline void texas_table_info::set_consume(::google::protobuf::uint32 value) {
  set_has_consume();
  consume_ = value;
}

// optional uint64 entermin = 6;
inline bool texas_table_info::has_entermin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void texas_table_info::set_has_entermin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void texas_table_info::clear_has_entermin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void texas_table_info::clear_entermin() {
  entermin_ = GOOGLE_ULONGLONG(0);
  clear_has_entermin();
}
inline ::google::protobuf::uint64 texas_table_info::entermin() const {
  return entermin_;
}
inline void texas_table_info::set_entermin(::google::protobuf::uint64 value) {
  set_has_entermin();
  entermin_ = value;
}

// optional uint32 duetime = 7;
inline bool texas_table_info::has_duetime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void texas_table_info::set_has_duetime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void texas_table_info::clear_has_duetime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void texas_table_info::clear_duetime() {
  duetime_ = 0u;
  clear_has_duetime();
}
inline ::google::protobuf::uint32 texas_table_info::duetime() const {
  return duetime_;
}
inline void texas_table_info::set_duetime(::google::protobuf::uint32 value) {
  set_has_duetime();
  duetime_ = value;
}

// optional uint32 feetype = 8;
inline bool texas_table_info::has_feetype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void texas_table_info::set_has_feetype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void texas_table_info::clear_has_feetype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void texas_table_info::clear_feetype() {
  feetype_ = 0u;
  clear_has_feetype();
}
inline ::google::protobuf::uint32 texas_table_info::feetype() const {
  return feetype_;
}
inline void texas_table_info::set_feetype(::google::protobuf::uint32 value) {
  set_has_feetype();
  feetype_ = value;
}

// optional int64 feevalue = 9;
inline bool texas_table_info::has_feevalue() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void texas_table_info::set_has_feevalue() {
  _has_bits_[0] |= 0x00000100u;
}
inline void texas_table_info::clear_has_feevalue() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void texas_table_info::clear_feevalue() {
  feevalue_ = GOOGLE_LONGLONG(0);
  clear_has_feevalue();
}
inline ::google::protobuf::int64 texas_table_info::feevalue() const {
  return feevalue_;
}
inline void texas_table_info::set_feevalue(::google::protobuf::int64 value) {
  set_has_feevalue();
  feevalue_ = value;
}

// optional bytes hostname = 10;
inline bool texas_table_info::has_hostname() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void texas_table_info::set_has_hostname() {
  _has_bits_[0] |= 0x00000200u;
}
inline void texas_table_info::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void texas_table_info::clear_hostname() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    hostname_->clear();
  }
  clear_has_hostname();
}
inline const ::std::string& texas_table_info::hostname() const {
  return *hostname_;
}
inline void texas_table_info::set_hostname(const ::std::string& value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void texas_table_info::set_hostname(const char* value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void texas_table_info::set_hostname(const void* value, size_t size) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* texas_table_info::mutable_hostname() {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  return hostname_;
}
inline ::std::string* texas_table_info::release_hostname() {
  clear_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hostname_;
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void texas_table_info::set_allocated_hostname(::std::string* hostname) {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (hostname) {
    set_has_hostname();
    hostname_ = hostname;
  } else {
    clear_has_hostname();
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 card_time = 11;
inline bool texas_table_info::has_card_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void texas_table_info::set_has_card_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void texas_table_info::clear_has_card_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void texas_table_info::clear_card_time() {
  card_time_ = 0u;
  clear_has_card_time();
}
inline ::google::protobuf::uint32 texas_table_info::card_time() const {
  return card_time_;
}
inline void texas_table_info::set_card_time(::google::protobuf::uint32 value) {
  set_has_card_time();
  card_time_ = value;
}

// optional uint32 table_state = 12;
inline bool texas_table_info::has_table_state() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void texas_table_info::set_has_table_state() {
  _has_bits_[0] |= 0x00000800u;
}
inline void texas_table_info::clear_has_table_state() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void texas_table_info::clear_table_state() {
  table_state_ = 0u;
  clear_has_table_state();
}
inline ::google::protobuf::uint32 texas_table_info::table_state() const {
  return table_state_;
}
inline void texas_table_info::set_table_state(::google::protobuf::uint32 value) {
  set_has_table_state();
  table_state_ = value;
}

// optional int64 sitdown = 13;
inline bool texas_table_info::has_sitdown() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void texas_table_info::set_has_sitdown() {
  _has_bits_[0] |= 0x00001000u;
}
inline void texas_table_info::clear_has_sitdown() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void texas_table_info::clear_sitdown() {
  sitdown_ = GOOGLE_LONGLONG(0);
  clear_has_sitdown();
}
inline ::google::protobuf::int64 texas_table_info::sitdown() const {
  return sitdown_;
}
inline void texas_table_info::set_sitdown(::google::protobuf::int64 value) {
  set_has_sitdown();
  sitdown_ = value;
}

// optional uint32 player_num = 14;
inline bool texas_table_info::has_player_num() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void texas_table_info::set_has_player_num() {
  _has_bits_[0] |= 0x00002000u;
}
inline void texas_table_info::clear_has_player_num() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void texas_table_info::clear_player_num() {
  player_num_ = 0u;
  clear_has_player_num();
}
inline ::google::protobuf::uint32 texas_table_info::player_num() const {
  return player_num_;
}
inline void texas_table_info::set_player_num(::google::protobuf::uint32 value) {
  set_has_player_num();
  player_num_ = value;
}

// -------------------------------------------------------------------

// zajinhua_table_info

// optional uint32 tableid = 1;
inline bool zajinhua_table_info::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void zajinhua_table_info::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void zajinhua_table_info::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void zajinhua_table_info::clear_tableid() {
  tableid_ = 0u;
  clear_has_tableid();
}
inline ::google::protobuf::uint32 zajinhua_table_info::tableid() const {
  return tableid_;
}
inline void zajinhua_table_info::set_tableid(::google::protobuf::uint32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional bytes tablename = 2;
inline bool zajinhua_table_info::has_tablename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void zajinhua_table_info::set_has_tablename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void zajinhua_table_info::clear_has_tablename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void zajinhua_table_info::clear_tablename() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    tablename_->clear();
  }
  clear_has_tablename();
}
inline const ::std::string& zajinhua_table_info::tablename() const {
  return *tablename_;
}
inline void zajinhua_table_info::set_tablename(const ::std::string& value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
}
inline void zajinhua_table_info::set_tablename(const char* value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
}
inline void zajinhua_table_info::set_tablename(const void* value, size_t size) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* zajinhua_table_info::mutable_tablename() {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  return tablename_;
}
inline ::std::string* zajinhua_table_info::release_tablename() {
  clear_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tablename_;
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void zajinhua_table_info::set_allocated_tablename(::std::string* tablename) {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (tablename) {
    set_has_tablename();
    tablename_ = tablename;
  } else {
    clear_has_tablename();
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 is_passwd = 3;
inline bool zajinhua_table_info::has_is_passwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void zajinhua_table_info::set_has_is_passwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void zajinhua_table_info::clear_has_is_passwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void zajinhua_table_info::clear_is_passwd() {
  is_passwd_ = 0u;
  clear_has_is_passwd();
}
inline ::google::protobuf::uint32 zajinhua_table_info::is_passwd() const {
  return is_passwd_;
}
inline void zajinhua_table_info::set_is_passwd(::google::protobuf::uint32 value) {
  set_has_is_passwd();
  is_passwd_ = value;
}

// optional int64 basescore = 4;
inline bool zajinhua_table_info::has_basescore() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void zajinhua_table_info::set_has_basescore() {
  _has_bits_[0] |= 0x00000008u;
}
inline void zajinhua_table_info::clear_has_basescore() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void zajinhua_table_info::clear_basescore() {
  basescore_ = GOOGLE_LONGLONG(0);
  clear_has_basescore();
}
inline ::google::protobuf::int64 zajinhua_table_info::basescore() const {
  return basescore_;
}
inline void zajinhua_table_info::set_basescore(::google::protobuf::int64 value) {
  set_has_basescore();
  basescore_ = value;
}

// optional uint32 consume = 5;
inline bool zajinhua_table_info::has_consume() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void zajinhua_table_info::set_has_consume() {
  _has_bits_[0] |= 0x00000010u;
}
inline void zajinhua_table_info::clear_has_consume() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void zajinhua_table_info::clear_consume() {
  consume_ = 0u;
  clear_has_consume();
}
inline ::google::protobuf::uint32 zajinhua_table_info::consume() const {
  return consume_;
}
inline void zajinhua_table_info::set_consume(::google::protobuf::uint32 value) {
  set_has_consume();
  consume_ = value;
}

// optional uint64 entermin = 6;
inline bool zajinhua_table_info::has_entermin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void zajinhua_table_info::set_has_entermin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void zajinhua_table_info::clear_has_entermin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void zajinhua_table_info::clear_entermin() {
  entermin_ = GOOGLE_ULONGLONG(0);
  clear_has_entermin();
}
inline ::google::protobuf::uint64 zajinhua_table_info::entermin() const {
  return entermin_;
}
inline void zajinhua_table_info::set_entermin(::google::protobuf::uint64 value) {
  set_has_entermin();
  entermin_ = value;
}

// optional uint32 duetime = 7;
inline bool zajinhua_table_info::has_duetime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void zajinhua_table_info::set_has_duetime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void zajinhua_table_info::clear_has_duetime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void zajinhua_table_info::clear_duetime() {
  duetime_ = 0u;
  clear_has_duetime();
}
inline ::google::protobuf::uint32 zajinhua_table_info::duetime() const {
  return duetime_;
}
inline void zajinhua_table_info::set_duetime(::google::protobuf::uint32 value) {
  set_has_duetime();
  duetime_ = value;
}

// optional uint32 feetype = 8;
inline bool zajinhua_table_info::has_feetype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void zajinhua_table_info::set_has_feetype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void zajinhua_table_info::clear_has_feetype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void zajinhua_table_info::clear_feetype() {
  feetype_ = 0u;
  clear_has_feetype();
}
inline ::google::protobuf::uint32 zajinhua_table_info::feetype() const {
  return feetype_;
}
inline void zajinhua_table_info::set_feetype(::google::protobuf::uint32 value) {
  set_has_feetype();
  feetype_ = value;
}

// optional int64 feevalue = 9;
inline bool zajinhua_table_info::has_feevalue() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void zajinhua_table_info::set_has_feevalue() {
  _has_bits_[0] |= 0x00000100u;
}
inline void zajinhua_table_info::clear_has_feevalue() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void zajinhua_table_info::clear_feevalue() {
  feevalue_ = GOOGLE_LONGLONG(0);
  clear_has_feevalue();
}
inline ::google::protobuf::int64 zajinhua_table_info::feevalue() const {
  return feevalue_;
}
inline void zajinhua_table_info::set_feevalue(::google::protobuf::int64 value) {
  set_has_feevalue();
  feevalue_ = value;
}

// optional bytes hostname = 10;
inline bool zajinhua_table_info::has_hostname() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void zajinhua_table_info::set_has_hostname() {
  _has_bits_[0] |= 0x00000200u;
}
inline void zajinhua_table_info::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void zajinhua_table_info::clear_hostname() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    hostname_->clear();
  }
  clear_has_hostname();
}
inline const ::std::string& zajinhua_table_info::hostname() const {
  return *hostname_;
}
inline void zajinhua_table_info::set_hostname(const ::std::string& value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void zajinhua_table_info::set_hostname(const char* value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void zajinhua_table_info::set_hostname(const void* value, size_t size) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* zajinhua_table_info::mutable_hostname() {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  return hostname_;
}
inline ::std::string* zajinhua_table_info::release_hostname() {
  clear_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hostname_;
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void zajinhua_table_info::set_allocated_hostname(::std::string* hostname) {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (hostname) {
    set_has_hostname();
    hostname_ = hostname;
  } else {
    clear_has_hostname();
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 card_time = 11;
inline bool zajinhua_table_info::has_card_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void zajinhua_table_info::set_has_card_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void zajinhua_table_info::clear_has_card_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void zajinhua_table_info::clear_card_time() {
  card_time_ = 0u;
  clear_has_card_time();
}
inline ::google::protobuf::uint32 zajinhua_table_info::card_time() const {
  return card_time_;
}
inline void zajinhua_table_info::set_card_time(::google::protobuf::uint32 value) {
  set_has_card_time();
  card_time_ = value;
}

// optional uint32 table_state = 12;
inline bool zajinhua_table_info::has_table_state() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void zajinhua_table_info::set_has_table_state() {
  _has_bits_[0] |= 0x00000800u;
}
inline void zajinhua_table_info::clear_has_table_state() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void zajinhua_table_info::clear_table_state() {
  table_state_ = 0u;
  clear_has_table_state();
}
inline ::google::protobuf::uint32 zajinhua_table_info::table_state() const {
  return table_state_;
}
inline void zajinhua_table_info::set_table_state(::google::protobuf::uint32 value) {
  set_has_table_state();
  table_state_ = value;
}

// optional uint32 compare_round = 13;
inline bool zajinhua_table_info::has_compare_round() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void zajinhua_table_info::set_has_compare_round() {
  _has_bits_[0] |= 0x00001000u;
}
inline void zajinhua_table_info::clear_has_compare_round() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void zajinhua_table_info::clear_compare_round() {
  compare_round_ = 0u;
  clear_has_compare_round();
}
inline ::google::protobuf::uint32 zajinhua_table_info::compare_round() const {
  return compare_round_;
}
inline void zajinhua_table_info::set_compare_round(::google::protobuf::uint32 value) {
  set_has_compare_round();
  compare_round_ = value;
}

// optional uint32 look_round = 14;
inline bool zajinhua_table_info::has_look_round() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void zajinhua_table_info::set_has_look_round() {
  _has_bits_[0] |= 0x00002000u;
}
inline void zajinhua_table_info::clear_has_look_round() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void zajinhua_table_info::clear_look_round() {
  look_round_ = 0u;
  clear_has_look_round();
}
inline ::google::protobuf::uint32 zajinhua_table_info::look_round() const {
  return look_round_;
}
inline void zajinhua_table_info::set_look_round(::google::protobuf::uint32 value) {
  set_has_look_round();
  look_round_ = value;
}

// optional uint32 limit_round = 15;
inline bool zajinhua_table_info::has_limit_round() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void zajinhua_table_info::set_has_limit_round() {
  _has_bits_[0] |= 0x00004000u;
}
inline void zajinhua_table_info::clear_has_limit_round() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void zajinhua_table_info::clear_limit_round() {
  limit_round_ = 0u;
  clear_has_limit_round();
}
inline ::google::protobuf::uint32 zajinhua_table_info::limit_round() const {
  return limit_round_;
}
inline void zajinhua_table_info::set_limit_round(::google::protobuf::uint32 value) {
  set_has_limit_round();
  limit_round_ = value;
}

// repeated uint32 ming_multip = 16;
inline int zajinhua_table_info::ming_multip_size() const {
  return ming_multip_.size();
}
inline void zajinhua_table_info::clear_ming_multip() {
  ming_multip_.Clear();
}
inline ::google::protobuf::uint32 zajinhua_table_info::ming_multip(int index) const {
  return ming_multip_.Get(index);
}
inline void zajinhua_table_info::set_ming_multip(int index, ::google::protobuf::uint32 value) {
  ming_multip_.Set(index, value);
}
inline void zajinhua_table_info::add_ming_multip(::google::protobuf::uint32 value) {
  ming_multip_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
zajinhua_table_info::ming_multip() const {
  return ming_multip_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
zajinhua_table_info::mutable_ming_multip() {
  return &ming_multip_;
}

// repeated uint32 blind_multip = 17;
inline int zajinhua_table_info::blind_multip_size() const {
  return blind_multip_.size();
}
inline void zajinhua_table_info::clear_blind_multip() {
  blind_multip_.Clear();
}
inline ::google::protobuf::uint32 zajinhua_table_info::blind_multip(int index) const {
  return blind_multip_.Get(index);
}
inline void zajinhua_table_info::set_blind_multip(int index, ::google::protobuf::uint32 value) {
  blind_multip_.Set(index, value);
}
inline void zajinhua_table_info::add_blind_multip(::google::protobuf::uint32 value) {
  blind_multip_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
zajinhua_table_info::blind_multip() const {
  return blind_multip_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
zajinhua_table_info::mutable_blind_multip() {
  return &blind_multip_;
}

// -------------------------------------------------------------------

// niuniu_table_info

// optional uint32 tableid = 1;
inline bool niuniu_table_info::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void niuniu_table_info::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void niuniu_table_info::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void niuniu_table_info::clear_tableid() {
  tableid_ = 0u;
  clear_has_tableid();
}
inline ::google::protobuf::uint32 niuniu_table_info::tableid() const {
  return tableid_;
}
inline void niuniu_table_info::set_tableid(::google::protobuf::uint32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional bytes tablename = 2;
inline bool niuniu_table_info::has_tablename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void niuniu_table_info::set_has_tablename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void niuniu_table_info::clear_has_tablename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void niuniu_table_info::clear_tablename() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    tablename_->clear();
  }
  clear_has_tablename();
}
inline const ::std::string& niuniu_table_info::tablename() const {
  return *tablename_;
}
inline void niuniu_table_info::set_tablename(const ::std::string& value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
}
inline void niuniu_table_info::set_tablename(const char* value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
}
inline void niuniu_table_info::set_tablename(const void* value, size_t size) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* niuniu_table_info::mutable_tablename() {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  return tablename_;
}
inline ::std::string* niuniu_table_info::release_tablename() {
  clear_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tablename_;
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void niuniu_table_info::set_allocated_tablename(::std::string* tablename) {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (tablename) {
    set_has_tablename();
    tablename_ = tablename;
  } else {
    clear_has_tablename();
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 is_passwd = 3;
inline bool niuniu_table_info::has_is_passwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void niuniu_table_info::set_has_is_passwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void niuniu_table_info::clear_has_is_passwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void niuniu_table_info::clear_is_passwd() {
  is_passwd_ = 0u;
  clear_has_is_passwd();
}
inline ::google::protobuf::uint32 niuniu_table_info::is_passwd() const {
  return is_passwd_;
}
inline void niuniu_table_info::set_is_passwd(::google::protobuf::uint32 value) {
  set_has_is_passwd();
  is_passwd_ = value;
}

// optional int64 basescore = 4;
inline bool niuniu_table_info::has_basescore() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void niuniu_table_info::set_has_basescore() {
  _has_bits_[0] |= 0x00000008u;
}
inline void niuniu_table_info::clear_has_basescore() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void niuniu_table_info::clear_basescore() {
  basescore_ = GOOGLE_LONGLONG(0);
  clear_has_basescore();
}
inline ::google::protobuf::int64 niuniu_table_info::basescore() const {
  return basescore_;
}
inline void niuniu_table_info::set_basescore(::google::protobuf::int64 value) {
  set_has_basescore();
  basescore_ = value;
}

// optional uint32 consume = 5;
inline bool niuniu_table_info::has_consume() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void niuniu_table_info::set_has_consume() {
  _has_bits_[0] |= 0x00000010u;
}
inline void niuniu_table_info::clear_has_consume() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void niuniu_table_info::clear_consume() {
  consume_ = 0u;
  clear_has_consume();
}
inline ::google::protobuf::uint32 niuniu_table_info::consume() const {
  return consume_;
}
inline void niuniu_table_info::set_consume(::google::protobuf::uint32 value) {
  set_has_consume();
  consume_ = value;
}

// optional uint64 entermin = 6;
inline bool niuniu_table_info::has_entermin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void niuniu_table_info::set_has_entermin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void niuniu_table_info::clear_has_entermin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void niuniu_table_info::clear_entermin() {
  entermin_ = GOOGLE_ULONGLONG(0);
  clear_has_entermin();
}
inline ::google::protobuf::uint64 niuniu_table_info::entermin() const {
  return entermin_;
}
inline void niuniu_table_info::set_entermin(::google::protobuf::uint64 value) {
  set_has_entermin();
  entermin_ = value;
}

// optional uint32 duetime = 7;
inline bool niuniu_table_info::has_duetime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void niuniu_table_info::set_has_duetime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void niuniu_table_info::clear_has_duetime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void niuniu_table_info::clear_duetime() {
  duetime_ = 0u;
  clear_has_duetime();
}
inline ::google::protobuf::uint32 niuniu_table_info::duetime() const {
  return duetime_;
}
inline void niuniu_table_info::set_duetime(::google::protobuf::uint32 value) {
  set_has_duetime();
  duetime_ = value;
}

// optional uint32 feetype = 8;
inline bool niuniu_table_info::has_feetype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void niuniu_table_info::set_has_feetype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void niuniu_table_info::clear_has_feetype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void niuniu_table_info::clear_feetype() {
  feetype_ = 0u;
  clear_has_feetype();
}
inline ::google::protobuf::uint32 niuniu_table_info::feetype() const {
  return feetype_;
}
inline void niuniu_table_info::set_feetype(::google::protobuf::uint32 value) {
  set_has_feetype();
  feetype_ = value;
}

// optional int64 feevalue = 9;
inline bool niuniu_table_info::has_feevalue() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void niuniu_table_info::set_has_feevalue() {
  _has_bits_[0] |= 0x00000100u;
}
inline void niuniu_table_info::clear_has_feevalue() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void niuniu_table_info::clear_feevalue() {
  feevalue_ = GOOGLE_LONGLONG(0);
  clear_has_feevalue();
}
inline ::google::protobuf::int64 niuniu_table_info::feevalue() const {
  return feevalue_;
}
inline void niuniu_table_info::set_feevalue(::google::protobuf::int64 value) {
  set_has_feevalue();
  feevalue_ = value;
}

// optional bytes hostname = 10;
inline bool niuniu_table_info::has_hostname() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void niuniu_table_info::set_has_hostname() {
  _has_bits_[0] |= 0x00000200u;
}
inline void niuniu_table_info::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void niuniu_table_info::clear_hostname() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    hostname_->clear();
  }
  clear_has_hostname();
}
inline const ::std::string& niuniu_table_info::hostname() const {
  return *hostname_;
}
inline void niuniu_table_info::set_hostname(const ::std::string& value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void niuniu_table_info::set_hostname(const char* value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void niuniu_table_info::set_hostname(const void* value, size_t size) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* niuniu_table_info::mutable_hostname() {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  return hostname_;
}
inline ::std::string* niuniu_table_info::release_hostname() {
  clear_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hostname_;
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void niuniu_table_info::set_allocated_hostname(::std::string* hostname) {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (hostname) {
    set_has_hostname();
    hostname_ = hostname;
  } else {
    clear_has_hostname();
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 table_state = 11;
inline bool niuniu_table_info::has_table_state() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void niuniu_table_info::set_has_table_state() {
  _has_bits_[0] |= 0x00000400u;
}
inline void niuniu_table_info::clear_has_table_state() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void niuniu_table_info::clear_table_state() {
  table_state_ = 0u;
  clear_has_table_state();
}
inline ::google::protobuf::uint32 niuniu_table_info::table_state() const {
  return table_state_;
}
inline void niuniu_table_info::set_table_state(::google::protobuf::uint32 value) {
  set_has_table_state();
  table_state_ = value;
}

// optional uint32 seat_num = 12;
inline bool niuniu_table_info::has_seat_num() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void niuniu_table_info::set_has_seat_num() {
  _has_bits_[0] |= 0x00000800u;
}
inline void niuniu_table_info::clear_has_seat_num() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void niuniu_table_info::clear_seat_num() {
  seat_num_ = 0u;
  clear_has_seat_num();
}
inline ::google::protobuf::uint32 niuniu_table_info::seat_num() const {
  return seat_num_;
}
inline void niuniu_table_info::set_seat_num(::google::protobuf::uint32 value) {
  set_has_seat_num();
  seat_num_ = value;
}

// optional uint32 can_banker = 13;
inline bool niuniu_table_info::has_can_banker() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void niuniu_table_info::set_has_can_banker() {
  _has_bits_[0] |= 0x00001000u;
}
inline void niuniu_table_info::clear_has_can_banker() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void niuniu_table_info::clear_can_banker() {
  can_banker_ = 0u;
  clear_has_can_banker();
}
inline ::google::protobuf::uint32 niuniu_table_info::can_banker() const {
  return can_banker_;
}
inline void niuniu_table_info::set_can_banker(::google::protobuf::uint32 value) {
  set_has_can_banker();
  can_banker_ = value;
}

// optional uint32 apply_banker_time = 14;
inline bool niuniu_table_info::has_apply_banker_time() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void niuniu_table_info::set_has_apply_banker_time() {
  _has_bits_[0] |= 0x00002000u;
}
inline void niuniu_table_info::clear_has_apply_banker_time() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void niuniu_table_info::clear_apply_banker_time() {
  apply_banker_time_ = 0u;
  clear_has_apply_banker_time();
}
inline ::google::protobuf::uint32 niuniu_table_info::apply_banker_time() const {
  return apply_banker_time_;
}
inline void niuniu_table_info::set_apply_banker_time(::google::protobuf::uint32 value) {
  set_has_apply_banker_time();
  apply_banker_time_ = value;
}

// optional uint32 card_time = 15;
inline bool niuniu_table_info::has_card_time() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void niuniu_table_info::set_has_card_time() {
  _has_bits_[0] |= 0x00004000u;
}
inline void niuniu_table_info::clear_has_card_time() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void niuniu_table_info::clear_card_time() {
  card_time_ = 0u;
  clear_has_card_time();
}
inline ::google::protobuf::uint32 niuniu_table_info::card_time() const {
  return card_time_;
}
inline void niuniu_table_info::set_card_time(::google::protobuf::uint32 value) {
  set_has_card_time();
  card_time_ = value;
}

// optional uint32 show_card_time = 16;
inline bool niuniu_table_info::has_show_card_time() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void niuniu_table_info::set_has_show_card_time() {
  _has_bits_[0] |= 0x00008000u;
}
inline void niuniu_table_info::clear_has_show_card_time() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void niuniu_table_info::clear_show_card_time() {
  show_card_time_ = 0u;
  clear_has_show_card_time();
}
inline ::google::protobuf::uint32 niuniu_table_info::show_card_time() const {
  return show_card_time_;
}
inline void niuniu_table_info::set_show_card_time(::google::protobuf::uint32 value) {
  set_has_show_card_time();
  show_card_time_ = value;
}

// -------------------------------------------------------------------

// baccarat_table_info

// optional uint32 tableid = 1;
inline bool baccarat_table_info::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void baccarat_table_info::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void baccarat_table_info::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void baccarat_table_info::clear_tableid() {
  tableid_ = 0u;
  clear_has_tableid();
}
inline ::google::protobuf::uint32 baccarat_table_info::tableid() const {
  return tableid_;
}
inline void baccarat_table_info::set_tableid(::google::protobuf::uint32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional bytes tablename = 2;
inline bool baccarat_table_info::has_tablename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void baccarat_table_info::set_has_tablename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void baccarat_table_info::clear_has_tablename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void baccarat_table_info::clear_tablename() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    tablename_->clear();
  }
  clear_has_tablename();
}
inline const ::std::string& baccarat_table_info::tablename() const {
  return *tablename_;
}
inline void baccarat_table_info::set_tablename(const ::std::string& value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
}
inline void baccarat_table_info::set_tablename(const char* value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
}
inline void baccarat_table_info::set_tablename(const void* value, size_t size) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* baccarat_table_info::mutable_tablename() {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  return tablename_;
}
inline ::std::string* baccarat_table_info::release_tablename() {
  clear_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tablename_;
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void baccarat_table_info::set_allocated_tablename(::std::string* tablename) {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (tablename) {
    set_has_tablename();
    tablename_ = tablename;
  } else {
    clear_has_tablename();
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 is_passwd = 3;
inline bool baccarat_table_info::has_is_passwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void baccarat_table_info::set_has_is_passwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void baccarat_table_info::clear_has_is_passwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void baccarat_table_info::clear_is_passwd() {
  is_passwd_ = 0u;
  clear_has_is_passwd();
}
inline ::google::protobuf::uint32 baccarat_table_info::is_passwd() const {
  return is_passwd_;
}
inline void baccarat_table_info::set_is_passwd(::google::protobuf::uint32 value) {
  set_has_is_passwd();
  is_passwd_ = value;
}

// optional int64 basescore = 4;
inline bool baccarat_table_info::has_basescore() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void baccarat_table_info::set_has_basescore() {
  _has_bits_[0] |= 0x00000008u;
}
inline void baccarat_table_info::clear_has_basescore() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void baccarat_table_info::clear_basescore() {
  basescore_ = GOOGLE_LONGLONG(0);
  clear_has_basescore();
}
inline ::google::protobuf::int64 baccarat_table_info::basescore() const {
  return basescore_;
}
inline void baccarat_table_info::set_basescore(::google::protobuf::int64 value) {
  set_has_basescore();
  basescore_ = value;
}

// optional uint32 consume = 5;
inline bool baccarat_table_info::has_consume() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void baccarat_table_info::set_has_consume() {
  _has_bits_[0] |= 0x00000010u;
}
inline void baccarat_table_info::clear_has_consume() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void baccarat_table_info::clear_consume() {
  consume_ = 0u;
  clear_has_consume();
}
inline ::google::protobuf::uint32 baccarat_table_info::consume() const {
  return consume_;
}
inline void baccarat_table_info::set_consume(::google::protobuf::uint32 value) {
  set_has_consume();
  consume_ = value;
}

// optional uint64 entermin = 6;
inline bool baccarat_table_info::has_entermin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void baccarat_table_info::set_has_entermin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void baccarat_table_info::clear_has_entermin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void baccarat_table_info::clear_entermin() {
  entermin_ = GOOGLE_ULONGLONG(0);
  clear_has_entermin();
}
inline ::google::protobuf::uint64 baccarat_table_info::entermin() const {
  return entermin_;
}
inline void baccarat_table_info::set_entermin(::google::protobuf::uint64 value) {
  set_has_entermin();
  entermin_ = value;
}

// optional uint32 duetime = 7;
inline bool baccarat_table_info::has_duetime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void baccarat_table_info::set_has_duetime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void baccarat_table_info::clear_has_duetime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void baccarat_table_info::clear_duetime() {
  duetime_ = 0u;
  clear_has_duetime();
}
inline ::google::protobuf::uint32 baccarat_table_info::duetime() const {
  return duetime_;
}
inline void baccarat_table_info::set_duetime(::google::protobuf::uint32 value) {
  set_has_duetime();
  duetime_ = value;
}

// optional uint32 feetype = 8;
inline bool baccarat_table_info::has_feetype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void baccarat_table_info::set_has_feetype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void baccarat_table_info::clear_has_feetype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void baccarat_table_info::clear_feetype() {
  feetype_ = 0u;
  clear_has_feetype();
}
inline ::google::protobuf::uint32 baccarat_table_info::feetype() const {
  return feetype_;
}
inline void baccarat_table_info::set_feetype(::google::protobuf::uint32 value) {
  set_has_feetype();
  feetype_ = value;
}

// optional int64 feevalue = 9;
inline bool baccarat_table_info::has_feevalue() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void baccarat_table_info::set_has_feevalue() {
  _has_bits_[0] |= 0x00000100u;
}
inline void baccarat_table_info::clear_has_feevalue() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void baccarat_table_info::clear_feevalue() {
  feevalue_ = GOOGLE_LONGLONG(0);
  clear_has_feevalue();
}
inline ::google::protobuf::int64 baccarat_table_info::feevalue() const {
  return feevalue_;
}
inline void baccarat_table_info::set_feevalue(::google::protobuf::int64 value) {
  set_has_feevalue();
  feevalue_ = value;
}

// optional bytes hostname = 10;
inline bool baccarat_table_info::has_hostname() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void baccarat_table_info::set_has_hostname() {
  _has_bits_[0] |= 0x00000200u;
}
inline void baccarat_table_info::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void baccarat_table_info::clear_hostname() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    hostname_->clear();
  }
  clear_has_hostname();
}
inline const ::std::string& baccarat_table_info::hostname() const {
  return *hostname_;
}
inline void baccarat_table_info::set_hostname(const ::std::string& value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void baccarat_table_info::set_hostname(const char* value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void baccarat_table_info::set_hostname(const void* value, size_t size) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* baccarat_table_info::mutable_hostname() {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  return hostname_;
}
inline ::std::string* baccarat_table_info::release_hostname() {
  clear_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hostname_;
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void baccarat_table_info::set_allocated_hostname(::std::string* hostname) {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (hostname) {
    set_has_hostname();
    hostname_ = hostname;
  } else {
    clear_has_hostname();
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 card_time = 11;
inline bool baccarat_table_info::has_card_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void baccarat_table_info::set_has_card_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void baccarat_table_info::clear_has_card_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void baccarat_table_info::clear_card_time() {
  card_time_ = 0u;
  clear_has_card_time();
}
inline ::google::protobuf::uint32 baccarat_table_info::card_time() const {
  return card_time_;
}
inline void baccarat_table_info::set_card_time(::google::protobuf::uint32 value) {
  set_has_card_time();
  card_time_ = value;
}

// optional uint32 table_state = 12;
inline bool baccarat_table_info::has_table_state() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void baccarat_table_info::set_has_table_state() {
  _has_bits_[0] |= 0x00000800u;
}
inline void baccarat_table_info::clear_has_table_state() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void baccarat_table_info::clear_table_state() {
  table_state_ = 0u;
  clear_has_table_state();
}
inline ::google::protobuf::uint32 baccarat_table_info::table_state() const {
  return table_state_;
}
inline void baccarat_table_info::set_table_state(::google::protobuf::uint32 value) {
  set_has_table_state();
  table_state_ = value;
}

// optional int64 sitdown = 13;
inline bool baccarat_table_info::has_sitdown() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void baccarat_table_info::set_has_sitdown() {
  _has_bits_[0] |= 0x00001000u;
}
inline void baccarat_table_info::clear_has_sitdown() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void baccarat_table_info::clear_sitdown() {
  sitdown_ = GOOGLE_LONGLONG(0);
  clear_has_sitdown();
}
inline ::google::protobuf::int64 baccarat_table_info::sitdown() const {
  return sitdown_;
}
inline void baccarat_table_info::set_sitdown(::google::protobuf::int64 value) {
  set_has_sitdown();
  sitdown_ = value;
}

// optional int64 apply_banker_condition = 14;
inline bool baccarat_table_info::has_apply_banker_condition() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void baccarat_table_info::set_has_apply_banker_condition() {
  _has_bits_[0] |= 0x00002000u;
}
inline void baccarat_table_info::clear_has_apply_banker_condition() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void baccarat_table_info::clear_apply_banker_condition() {
  apply_banker_condition_ = GOOGLE_LONGLONG(0);
  clear_has_apply_banker_condition();
}
inline ::google::protobuf::int64 baccarat_table_info::apply_banker_condition() const {
  return apply_banker_condition_;
}
inline void baccarat_table_info::set_apply_banker_condition(::google::protobuf::int64 value) {
  set_has_apply_banker_condition();
  apply_banker_condition_ = value;
}

// optional int64 apply_banker_maxscore = 15;
inline bool baccarat_table_info::has_apply_banker_maxscore() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void baccarat_table_info::set_has_apply_banker_maxscore() {
  _has_bits_[0] |= 0x00004000u;
}
inline void baccarat_table_info::clear_has_apply_banker_maxscore() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void baccarat_table_info::clear_apply_banker_maxscore() {
  apply_banker_maxscore_ = GOOGLE_LONGLONG(0);
  clear_has_apply_banker_maxscore();
}
inline ::google::protobuf::int64 baccarat_table_info::apply_banker_maxscore() const {
  return apply_banker_maxscore_;
}
inline void baccarat_table_info::set_apply_banker_maxscore(::google::protobuf::int64 value) {
  set_has_apply_banker_maxscore();
  apply_banker_maxscore_ = value;
}

// optional uint32 banker_max_time = 16;
inline bool baccarat_table_info::has_banker_max_time() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void baccarat_table_info::set_has_banker_max_time() {
  _has_bits_[0] |= 0x00008000u;
}
inline void baccarat_table_info::clear_has_banker_max_time() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void baccarat_table_info::clear_banker_max_time() {
  banker_max_time_ = 0u;
  clear_has_banker_max_time();
}
inline ::google::protobuf::uint32 baccarat_table_info::banker_max_time() const {
  return banker_max_time_;
}
inline void baccarat_table_info::set_banker_max_time(::google::protobuf::uint32 value) {
  set_has_banker_max_time();
  banker_max_time_ = value;
}

// -------------------------------------------------------------------

// sangong_table_info

// optional uint32 tableid = 1;
inline bool sangong_table_info::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sangong_table_info::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sangong_table_info::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sangong_table_info::clear_tableid() {
  tableid_ = 0u;
  clear_has_tableid();
}
inline ::google::protobuf::uint32 sangong_table_info::tableid() const {
  return tableid_;
}
inline void sangong_table_info::set_tableid(::google::protobuf::uint32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional bytes tablename = 2;
inline bool sangong_table_info::has_tablename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sangong_table_info::set_has_tablename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sangong_table_info::clear_has_tablename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sangong_table_info::clear_tablename() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    tablename_->clear();
  }
  clear_has_tablename();
}
inline const ::std::string& sangong_table_info::tablename() const {
  return *tablename_;
}
inline void sangong_table_info::set_tablename(const ::std::string& value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
}
inline void sangong_table_info::set_tablename(const char* value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
}
inline void sangong_table_info::set_tablename(const void* value, size_t size) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sangong_table_info::mutable_tablename() {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  return tablename_;
}
inline ::std::string* sangong_table_info::release_tablename() {
  clear_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tablename_;
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sangong_table_info::set_allocated_tablename(::std::string* tablename) {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (tablename) {
    set_has_tablename();
    tablename_ = tablename;
  } else {
    clear_has_tablename();
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 is_passwd = 3;
inline bool sangong_table_info::has_is_passwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sangong_table_info::set_has_is_passwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sangong_table_info::clear_has_is_passwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sangong_table_info::clear_is_passwd() {
  is_passwd_ = 0u;
  clear_has_is_passwd();
}
inline ::google::protobuf::uint32 sangong_table_info::is_passwd() const {
  return is_passwd_;
}
inline void sangong_table_info::set_is_passwd(::google::protobuf::uint32 value) {
  set_has_is_passwd();
  is_passwd_ = value;
}

// optional int64 basescore = 4;
inline bool sangong_table_info::has_basescore() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sangong_table_info::set_has_basescore() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sangong_table_info::clear_has_basescore() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sangong_table_info::clear_basescore() {
  basescore_ = GOOGLE_LONGLONG(0);
  clear_has_basescore();
}
inline ::google::protobuf::int64 sangong_table_info::basescore() const {
  return basescore_;
}
inline void sangong_table_info::set_basescore(::google::protobuf::int64 value) {
  set_has_basescore();
  basescore_ = value;
}

// optional uint32 consume = 5;
inline bool sangong_table_info::has_consume() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sangong_table_info::set_has_consume() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sangong_table_info::clear_has_consume() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sangong_table_info::clear_consume() {
  consume_ = 0u;
  clear_has_consume();
}
inline ::google::protobuf::uint32 sangong_table_info::consume() const {
  return consume_;
}
inline void sangong_table_info::set_consume(::google::protobuf::uint32 value) {
  set_has_consume();
  consume_ = value;
}

// optional uint64 entermin = 6;
inline bool sangong_table_info::has_entermin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sangong_table_info::set_has_entermin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sangong_table_info::clear_has_entermin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sangong_table_info::clear_entermin() {
  entermin_ = GOOGLE_ULONGLONG(0);
  clear_has_entermin();
}
inline ::google::protobuf::uint64 sangong_table_info::entermin() const {
  return entermin_;
}
inline void sangong_table_info::set_entermin(::google::protobuf::uint64 value) {
  set_has_entermin();
  entermin_ = value;
}

// optional uint32 duetime = 7;
inline bool sangong_table_info::has_duetime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sangong_table_info::set_has_duetime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sangong_table_info::clear_has_duetime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sangong_table_info::clear_duetime() {
  duetime_ = 0u;
  clear_has_duetime();
}
inline ::google::protobuf::uint32 sangong_table_info::duetime() const {
  return duetime_;
}
inline void sangong_table_info::set_duetime(::google::protobuf::uint32 value) {
  set_has_duetime();
  duetime_ = value;
}

// optional uint32 feetype = 8;
inline bool sangong_table_info::has_feetype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sangong_table_info::set_has_feetype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sangong_table_info::clear_has_feetype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sangong_table_info::clear_feetype() {
  feetype_ = 0u;
  clear_has_feetype();
}
inline ::google::protobuf::uint32 sangong_table_info::feetype() const {
  return feetype_;
}
inline void sangong_table_info::set_feetype(::google::protobuf::uint32 value) {
  set_has_feetype();
  feetype_ = value;
}

// optional int64 feevalue = 9;
inline bool sangong_table_info::has_feevalue() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void sangong_table_info::set_has_feevalue() {
  _has_bits_[0] |= 0x00000100u;
}
inline void sangong_table_info::clear_has_feevalue() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void sangong_table_info::clear_feevalue() {
  feevalue_ = GOOGLE_LONGLONG(0);
  clear_has_feevalue();
}
inline ::google::protobuf::int64 sangong_table_info::feevalue() const {
  return feevalue_;
}
inline void sangong_table_info::set_feevalue(::google::protobuf::int64 value) {
  set_has_feevalue();
  feevalue_ = value;
}

// optional bytes hostname = 10;
inline bool sangong_table_info::has_hostname() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void sangong_table_info::set_has_hostname() {
  _has_bits_[0] |= 0x00000200u;
}
inline void sangong_table_info::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void sangong_table_info::clear_hostname() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    hostname_->clear();
  }
  clear_has_hostname();
}
inline const ::std::string& sangong_table_info::hostname() const {
  return *hostname_;
}
inline void sangong_table_info::set_hostname(const ::std::string& value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void sangong_table_info::set_hostname(const char* value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void sangong_table_info::set_hostname(const void* value, size_t size) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sangong_table_info::mutable_hostname() {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  return hostname_;
}
inline ::std::string* sangong_table_info::release_hostname() {
  clear_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hostname_;
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sangong_table_info::set_allocated_hostname(::std::string* hostname) {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (hostname) {
    set_has_hostname();
    hostname_ = hostname;
  } else {
    clear_has_hostname();
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 table_state = 11;
inline bool sangong_table_info::has_table_state() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void sangong_table_info::set_has_table_state() {
  _has_bits_[0] |= 0x00000400u;
}
inline void sangong_table_info::clear_has_table_state() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void sangong_table_info::clear_table_state() {
  table_state_ = 0u;
  clear_has_table_state();
}
inline ::google::protobuf::uint32 sangong_table_info::table_state() const {
  return table_state_;
}
inline void sangong_table_info::set_table_state(::google::protobuf::uint32 value) {
  set_has_table_state();
  table_state_ = value;
}

// optional uint32 seat_num = 12;
inline bool sangong_table_info::has_seat_num() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void sangong_table_info::set_has_seat_num() {
  _has_bits_[0] |= 0x00000800u;
}
inline void sangong_table_info::clear_has_seat_num() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void sangong_table_info::clear_seat_num() {
  seat_num_ = 0u;
  clear_has_seat_num();
}
inline ::google::protobuf::uint32 sangong_table_info::seat_num() const {
  return seat_num_;
}
inline void sangong_table_info::set_seat_num(::google::protobuf::uint32 value) {
  set_has_seat_num();
  seat_num_ = value;
}

// optional uint32 can_banker = 13;
inline bool sangong_table_info::has_can_banker() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void sangong_table_info::set_has_can_banker() {
  _has_bits_[0] |= 0x00001000u;
}
inline void sangong_table_info::clear_has_can_banker() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void sangong_table_info::clear_can_banker() {
  can_banker_ = 0u;
  clear_has_can_banker();
}
inline ::google::protobuf::uint32 sangong_table_info::can_banker() const {
  return can_banker_;
}
inline void sangong_table_info::set_can_banker(::google::protobuf::uint32 value) {
  set_has_can_banker();
  can_banker_ = value;
}

// optional uint32 apply_banker_time = 14;
inline bool sangong_table_info::has_apply_banker_time() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void sangong_table_info::set_has_apply_banker_time() {
  _has_bits_[0] |= 0x00002000u;
}
inline void sangong_table_info::clear_has_apply_banker_time() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void sangong_table_info::clear_apply_banker_time() {
  apply_banker_time_ = 0u;
  clear_has_apply_banker_time();
}
inline ::google::protobuf::uint32 sangong_table_info::apply_banker_time() const {
  return apply_banker_time_;
}
inline void sangong_table_info::set_apply_banker_time(::google::protobuf::uint32 value) {
  set_has_apply_banker_time();
  apply_banker_time_ = value;
}

// optional uint32 card_time = 15;
inline bool sangong_table_info::has_card_time() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void sangong_table_info::set_has_card_time() {
  _has_bits_[0] |= 0x00004000u;
}
inline void sangong_table_info::clear_has_card_time() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void sangong_table_info::clear_card_time() {
  card_time_ = 0u;
  clear_has_card_time();
}
inline ::google::protobuf::uint32 sangong_table_info::card_time() const {
  return card_time_;
}
inline void sangong_table_info::set_card_time(::google::protobuf::uint32 value) {
  set_has_card_time();
  card_time_ = value;
}

// optional uint32 show_card_time = 16;
inline bool sangong_table_info::has_show_card_time() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void sangong_table_info::set_has_show_card_time() {
  _has_bits_[0] |= 0x00008000u;
}
inline void sangong_table_info::clear_has_show_card_time() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void sangong_table_info::clear_show_card_time() {
  show_card_time_ = 0u;
  clear_has_show_card_time();
}
inline ::google::protobuf::uint32 sangong_table_info::show_card_time() const {
  return show_card_time_;
}
inline void sangong_table_info::set_show_card_time(::google::protobuf::uint32 value) {
  set_has_show_card_time();
  show_card_time_ = value;
}

// -------------------------------------------------------------------

// paijiu_table_info

// optional uint32 tableid = 1;
inline bool paijiu_table_info::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void paijiu_table_info::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void paijiu_table_info::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void paijiu_table_info::clear_tableid() {
  tableid_ = 0u;
  clear_has_tableid();
}
inline ::google::protobuf::uint32 paijiu_table_info::tableid() const {
  return tableid_;
}
inline void paijiu_table_info::set_tableid(::google::protobuf::uint32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional bytes tablename = 2;
inline bool paijiu_table_info::has_tablename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void paijiu_table_info::set_has_tablename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void paijiu_table_info::clear_has_tablename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void paijiu_table_info::clear_tablename() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    tablename_->clear();
  }
  clear_has_tablename();
}
inline const ::std::string& paijiu_table_info::tablename() const {
  return *tablename_;
}
inline void paijiu_table_info::set_tablename(const ::std::string& value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
}
inline void paijiu_table_info::set_tablename(const char* value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
}
inline void paijiu_table_info::set_tablename(const void* value, size_t size) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* paijiu_table_info::mutable_tablename() {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  return tablename_;
}
inline ::std::string* paijiu_table_info::release_tablename() {
  clear_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tablename_;
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void paijiu_table_info::set_allocated_tablename(::std::string* tablename) {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (tablename) {
    set_has_tablename();
    tablename_ = tablename;
  } else {
    clear_has_tablename();
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 is_passwd = 3;
inline bool paijiu_table_info::has_is_passwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void paijiu_table_info::set_has_is_passwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void paijiu_table_info::clear_has_is_passwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void paijiu_table_info::clear_is_passwd() {
  is_passwd_ = 0u;
  clear_has_is_passwd();
}
inline ::google::protobuf::uint32 paijiu_table_info::is_passwd() const {
  return is_passwd_;
}
inline void paijiu_table_info::set_is_passwd(::google::protobuf::uint32 value) {
  set_has_is_passwd();
  is_passwd_ = value;
}

// optional int64 basescore = 4;
inline bool paijiu_table_info::has_basescore() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void paijiu_table_info::set_has_basescore() {
  _has_bits_[0] |= 0x00000008u;
}
inline void paijiu_table_info::clear_has_basescore() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void paijiu_table_info::clear_basescore() {
  basescore_ = GOOGLE_LONGLONG(0);
  clear_has_basescore();
}
inline ::google::protobuf::int64 paijiu_table_info::basescore() const {
  return basescore_;
}
inline void paijiu_table_info::set_basescore(::google::protobuf::int64 value) {
  set_has_basescore();
  basescore_ = value;
}

// optional uint32 consume = 5;
inline bool paijiu_table_info::has_consume() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void paijiu_table_info::set_has_consume() {
  _has_bits_[0] |= 0x00000010u;
}
inline void paijiu_table_info::clear_has_consume() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void paijiu_table_info::clear_consume() {
  consume_ = 0u;
  clear_has_consume();
}
inline ::google::protobuf::uint32 paijiu_table_info::consume() const {
  return consume_;
}
inline void paijiu_table_info::set_consume(::google::protobuf::uint32 value) {
  set_has_consume();
  consume_ = value;
}

// optional uint64 entermin = 6;
inline bool paijiu_table_info::has_entermin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void paijiu_table_info::set_has_entermin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void paijiu_table_info::clear_has_entermin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void paijiu_table_info::clear_entermin() {
  entermin_ = GOOGLE_ULONGLONG(0);
  clear_has_entermin();
}
inline ::google::protobuf::uint64 paijiu_table_info::entermin() const {
  return entermin_;
}
inline void paijiu_table_info::set_entermin(::google::protobuf::uint64 value) {
  set_has_entermin();
  entermin_ = value;
}

// optional uint32 duetime = 7;
inline bool paijiu_table_info::has_duetime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void paijiu_table_info::set_has_duetime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void paijiu_table_info::clear_has_duetime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void paijiu_table_info::clear_duetime() {
  duetime_ = 0u;
  clear_has_duetime();
}
inline ::google::protobuf::uint32 paijiu_table_info::duetime() const {
  return duetime_;
}
inline void paijiu_table_info::set_duetime(::google::protobuf::uint32 value) {
  set_has_duetime();
  duetime_ = value;
}

// optional uint32 feetype = 8;
inline bool paijiu_table_info::has_feetype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void paijiu_table_info::set_has_feetype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void paijiu_table_info::clear_has_feetype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void paijiu_table_info::clear_feetype() {
  feetype_ = 0u;
  clear_has_feetype();
}
inline ::google::protobuf::uint32 paijiu_table_info::feetype() const {
  return feetype_;
}
inline void paijiu_table_info::set_feetype(::google::protobuf::uint32 value) {
  set_has_feetype();
  feetype_ = value;
}

// optional int64 feevalue = 9;
inline bool paijiu_table_info::has_feevalue() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void paijiu_table_info::set_has_feevalue() {
  _has_bits_[0] |= 0x00000100u;
}
inline void paijiu_table_info::clear_has_feevalue() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void paijiu_table_info::clear_feevalue() {
  feevalue_ = GOOGLE_LONGLONG(0);
  clear_has_feevalue();
}
inline ::google::protobuf::int64 paijiu_table_info::feevalue() const {
  return feevalue_;
}
inline void paijiu_table_info::set_feevalue(::google::protobuf::int64 value) {
  set_has_feevalue();
  feevalue_ = value;
}

// optional bytes hostname = 10;
inline bool paijiu_table_info::has_hostname() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void paijiu_table_info::set_has_hostname() {
  _has_bits_[0] |= 0x00000200u;
}
inline void paijiu_table_info::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void paijiu_table_info::clear_hostname() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    hostname_->clear();
  }
  clear_has_hostname();
}
inline const ::std::string& paijiu_table_info::hostname() const {
  return *hostname_;
}
inline void paijiu_table_info::set_hostname(const ::std::string& value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void paijiu_table_info::set_hostname(const char* value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void paijiu_table_info::set_hostname(const void* value, size_t size) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* paijiu_table_info::mutable_hostname() {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  return hostname_;
}
inline ::std::string* paijiu_table_info::release_hostname() {
  clear_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hostname_;
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void paijiu_table_info::set_allocated_hostname(::std::string* hostname) {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (hostname) {
    set_has_hostname();
    hostname_ = hostname;
  } else {
    clear_has_hostname();
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 card_time = 11;
inline bool paijiu_table_info::has_card_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void paijiu_table_info::set_has_card_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void paijiu_table_info::clear_has_card_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void paijiu_table_info::clear_card_time() {
  card_time_ = 0u;
  clear_has_card_time();
}
inline ::google::protobuf::uint32 paijiu_table_info::card_time() const {
  return card_time_;
}
inline void paijiu_table_info::set_card_time(::google::protobuf::uint32 value) {
  set_has_card_time();
  card_time_ = value;
}

// optional uint32 table_state = 12;
inline bool paijiu_table_info::has_table_state() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void paijiu_table_info::set_has_table_state() {
  _has_bits_[0] |= 0x00000800u;
}
inline void paijiu_table_info::clear_has_table_state() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void paijiu_table_info::clear_table_state() {
  table_state_ = 0u;
  clear_has_table_state();
}
inline ::google::protobuf::uint32 paijiu_table_info::table_state() const {
  return table_state_;
}
inline void paijiu_table_info::set_table_state(::google::protobuf::uint32 value) {
  set_has_table_state();
  table_state_ = value;
}

// optional int64 sitdown = 13;
inline bool paijiu_table_info::has_sitdown() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void paijiu_table_info::set_has_sitdown() {
  _has_bits_[0] |= 0x00001000u;
}
inline void paijiu_table_info::clear_has_sitdown() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void paijiu_table_info::clear_sitdown() {
  sitdown_ = GOOGLE_LONGLONG(0);
  clear_has_sitdown();
}
inline ::google::protobuf::int64 paijiu_table_info::sitdown() const {
  return sitdown_;
}
inline void paijiu_table_info::set_sitdown(::google::protobuf::int64 value) {
  set_has_sitdown();
  sitdown_ = value;
}

// optional int64 apply_banker_condition = 14;
inline bool paijiu_table_info::has_apply_banker_condition() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void paijiu_table_info::set_has_apply_banker_condition() {
  _has_bits_[0] |= 0x00002000u;
}
inline void paijiu_table_info::clear_has_apply_banker_condition() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void paijiu_table_info::clear_apply_banker_condition() {
  apply_banker_condition_ = GOOGLE_LONGLONG(0);
  clear_has_apply_banker_condition();
}
inline ::google::protobuf::int64 paijiu_table_info::apply_banker_condition() const {
  return apply_banker_condition_;
}
inline void paijiu_table_info::set_apply_banker_condition(::google::protobuf::int64 value) {
  set_has_apply_banker_condition();
  apply_banker_condition_ = value;
}

// optional int64 apply_banker_maxscore = 15;
inline bool paijiu_table_info::has_apply_banker_maxscore() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void paijiu_table_info::set_has_apply_banker_maxscore() {
  _has_bits_[0] |= 0x00004000u;
}
inline void paijiu_table_info::clear_has_apply_banker_maxscore() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void paijiu_table_info::clear_apply_banker_maxscore() {
  apply_banker_maxscore_ = GOOGLE_LONGLONG(0);
  clear_has_apply_banker_maxscore();
}
inline ::google::protobuf::int64 paijiu_table_info::apply_banker_maxscore() const {
  return apply_banker_maxscore_;
}
inline void paijiu_table_info::set_apply_banker_maxscore(::google::protobuf::int64 value) {
  set_has_apply_banker_maxscore();
  apply_banker_maxscore_ = value;
}

// optional uint32 banker_max_time = 16;
inline bool paijiu_table_info::has_banker_max_time() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void paijiu_table_info::set_has_banker_max_time() {
  _has_bits_[0] |= 0x00008000u;
}
inline void paijiu_table_info::clear_has_banker_max_time() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void paijiu_table_info::clear_banker_max_time() {
  banker_max_time_ = 0u;
  clear_has_banker_max_time();
}
inline ::google::protobuf::uint32 paijiu_table_info::banker_max_time() const {
  return banker_max_time_;
}
inline void paijiu_table_info::set_banker_max_time(::google::protobuf::uint32 value) {
  set_has_banker_max_time();
  banker_max_time_ = value;
}

// -------------------------------------------------------------------

// everycolor_table_info

// optional int64 basescore = 1;
inline bool everycolor_table_info::has_basescore() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void everycolor_table_info::set_has_basescore() {
  _has_bits_[0] |= 0x00000001u;
}
inline void everycolor_table_info::clear_has_basescore() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void everycolor_table_info::clear_basescore() {
  basescore_ = GOOGLE_LONGLONG(0);
  clear_has_basescore();
}
inline ::google::protobuf::int64 everycolor_table_info::basescore() const {
  return basescore_;
}
inline void everycolor_table_info::set_basescore(::google::protobuf::int64 value) {
  set_has_basescore();
  basescore_ = value;
}

// optional uint32 consume = 2;
inline bool everycolor_table_info::has_consume() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void everycolor_table_info::set_has_consume() {
  _has_bits_[0] |= 0x00000002u;
}
inline void everycolor_table_info::clear_has_consume() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void everycolor_table_info::clear_consume() {
  consume_ = 0u;
  clear_has_consume();
}
inline ::google::protobuf::uint32 everycolor_table_info::consume() const {
  return consume_;
}
inline void everycolor_table_info::set_consume(::google::protobuf::uint32 value) {
  set_has_consume();
  consume_ = value;
}

// optional uint32 feetype = 3;
inline bool everycolor_table_info::has_feetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void everycolor_table_info::set_has_feetype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void everycolor_table_info::clear_has_feetype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void everycolor_table_info::clear_feetype() {
  feetype_ = 0u;
  clear_has_feetype();
}
inline ::google::protobuf::uint32 everycolor_table_info::feetype() const {
  return feetype_;
}
inline void everycolor_table_info::set_feetype(::google::protobuf::uint32 value) {
  set_has_feetype();
  feetype_ = value;
}

// optional int64 feevalue = 4;
inline bool everycolor_table_info::has_feevalue() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void everycolor_table_info::set_has_feevalue() {
  _has_bits_[0] |= 0x00000008u;
}
inline void everycolor_table_info::clear_has_feevalue() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void everycolor_table_info::clear_feevalue() {
  feevalue_ = GOOGLE_LONGLONG(0);
  clear_has_feevalue();
}
inline ::google::protobuf::int64 everycolor_table_info::feevalue() const {
  return feevalue_;
}
inline void everycolor_table_info::set_feevalue(::google::protobuf::int64 value) {
  set_has_feevalue();
  feevalue_ = value;
}

// optional uint32 table_state = 5;
inline bool everycolor_table_info::has_table_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void everycolor_table_info::set_has_table_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void everycolor_table_info::clear_has_table_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void everycolor_table_info::clear_table_state() {
  table_state_ = 0u;
  clear_has_table_state();
}
inline ::google::protobuf::uint32 everycolor_table_info::table_state() const {
  return table_state_;
}
inline void everycolor_table_info::set_table_state(::google::protobuf::uint32 value) {
  set_has_table_state();
  table_state_ = value;
}

// optional uint32 add_score_time = 6;
inline bool everycolor_table_info::has_add_score_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void everycolor_table_info::set_has_add_score_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void everycolor_table_info::clear_has_add_score_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void everycolor_table_info::clear_add_score_time() {
  add_score_time_ = 0u;
  clear_has_add_score_time();
}
inline ::google::protobuf::uint32 everycolor_table_info::add_score_time() const {
  return add_score_time_;
}
inline void everycolor_table_info::set_add_score_time(::google::protobuf::uint32 value) {
  set_has_add_score_time();
  add_score_time_ = value;
}

// optional uint32 show_card_time = 7;
inline bool everycolor_table_info::has_show_card_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void everycolor_table_info::set_has_show_card_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void everycolor_table_info::clear_has_show_card_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void everycolor_table_info::clear_show_card_time() {
  show_card_time_ = 0u;
  clear_has_show_card_time();
}
inline ::google::protobuf::uint32 everycolor_table_info::show_card_time() const {
  return show_card_time_;
}
inline void everycolor_table_info::set_show_card_time(::google::protobuf::uint32 value) {
  set_has_show_card_time();
  show_card_time_ = value;
}

// -------------------------------------------------------------------

// dice_table_info

// optional uint32 tableid = 1;
inline bool dice_table_info::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void dice_table_info::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void dice_table_info::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void dice_table_info::clear_tableid() {
  tableid_ = 0u;
  clear_has_tableid();
}
inline ::google::protobuf::uint32 dice_table_info::tableid() const {
  return tableid_;
}
inline void dice_table_info::set_tableid(::google::protobuf::uint32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional bytes tablename = 2;
inline bool dice_table_info::has_tablename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void dice_table_info::set_has_tablename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void dice_table_info::clear_has_tablename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void dice_table_info::clear_tablename() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    tablename_->clear();
  }
  clear_has_tablename();
}
inline const ::std::string& dice_table_info::tablename() const {
  return *tablename_;
}
inline void dice_table_info::set_tablename(const ::std::string& value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
}
inline void dice_table_info::set_tablename(const char* value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
}
inline void dice_table_info::set_tablename(const void* value, size_t size) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* dice_table_info::mutable_tablename() {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  return tablename_;
}
inline ::std::string* dice_table_info::release_tablename() {
  clear_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tablename_;
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void dice_table_info::set_allocated_tablename(::std::string* tablename) {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (tablename) {
    set_has_tablename();
    tablename_ = tablename;
  } else {
    clear_has_tablename();
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 is_passwd = 3;
inline bool dice_table_info::has_is_passwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void dice_table_info::set_has_is_passwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void dice_table_info::clear_has_is_passwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void dice_table_info::clear_is_passwd() {
  is_passwd_ = 0u;
  clear_has_is_passwd();
}
inline ::google::protobuf::uint32 dice_table_info::is_passwd() const {
  return is_passwd_;
}
inline void dice_table_info::set_is_passwd(::google::protobuf::uint32 value) {
  set_has_is_passwd();
  is_passwd_ = value;
}

// optional int64 basescore = 4;
inline bool dice_table_info::has_basescore() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void dice_table_info::set_has_basescore() {
  _has_bits_[0] |= 0x00000008u;
}
inline void dice_table_info::clear_has_basescore() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void dice_table_info::clear_basescore() {
  basescore_ = GOOGLE_LONGLONG(0);
  clear_has_basescore();
}
inline ::google::protobuf::int64 dice_table_info::basescore() const {
  return basescore_;
}
inline void dice_table_info::set_basescore(::google::protobuf::int64 value) {
  set_has_basescore();
  basescore_ = value;
}

// optional uint32 consume = 5;
inline bool dice_table_info::has_consume() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void dice_table_info::set_has_consume() {
  _has_bits_[0] |= 0x00000010u;
}
inline void dice_table_info::clear_has_consume() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void dice_table_info::clear_consume() {
  consume_ = 0u;
  clear_has_consume();
}
inline ::google::protobuf::uint32 dice_table_info::consume() const {
  return consume_;
}
inline void dice_table_info::set_consume(::google::protobuf::uint32 value) {
  set_has_consume();
  consume_ = value;
}

// optional uint64 entermin = 6;
inline bool dice_table_info::has_entermin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void dice_table_info::set_has_entermin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void dice_table_info::clear_has_entermin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void dice_table_info::clear_entermin() {
  entermin_ = GOOGLE_ULONGLONG(0);
  clear_has_entermin();
}
inline ::google::protobuf::uint64 dice_table_info::entermin() const {
  return entermin_;
}
inline void dice_table_info::set_entermin(::google::protobuf::uint64 value) {
  set_has_entermin();
  entermin_ = value;
}

// optional uint32 duetime = 7;
inline bool dice_table_info::has_duetime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void dice_table_info::set_has_duetime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void dice_table_info::clear_has_duetime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void dice_table_info::clear_duetime() {
  duetime_ = 0u;
  clear_has_duetime();
}
inline ::google::protobuf::uint32 dice_table_info::duetime() const {
  return duetime_;
}
inline void dice_table_info::set_duetime(::google::protobuf::uint32 value) {
  set_has_duetime();
  duetime_ = value;
}

// optional uint32 feetype = 8;
inline bool dice_table_info::has_feetype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void dice_table_info::set_has_feetype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void dice_table_info::clear_has_feetype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void dice_table_info::clear_feetype() {
  feetype_ = 0u;
  clear_has_feetype();
}
inline ::google::protobuf::uint32 dice_table_info::feetype() const {
  return feetype_;
}
inline void dice_table_info::set_feetype(::google::protobuf::uint32 value) {
  set_has_feetype();
  feetype_ = value;
}

// optional int64 feevalue = 9;
inline bool dice_table_info::has_feevalue() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void dice_table_info::set_has_feevalue() {
  _has_bits_[0] |= 0x00000100u;
}
inline void dice_table_info::clear_has_feevalue() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void dice_table_info::clear_feevalue() {
  feevalue_ = GOOGLE_LONGLONG(0);
  clear_has_feevalue();
}
inline ::google::protobuf::int64 dice_table_info::feevalue() const {
  return feevalue_;
}
inline void dice_table_info::set_feevalue(::google::protobuf::int64 value) {
  set_has_feevalue();
  feevalue_ = value;
}

// optional bytes hostname = 10;
inline bool dice_table_info::has_hostname() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void dice_table_info::set_has_hostname() {
  _has_bits_[0] |= 0x00000200u;
}
inline void dice_table_info::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void dice_table_info::clear_hostname() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    hostname_->clear();
  }
  clear_has_hostname();
}
inline const ::std::string& dice_table_info::hostname() const {
  return *hostname_;
}
inline void dice_table_info::set_hostname(const ::std::string& value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void dice_table_info::set_hostname(const char* value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void dice_table_info::set_hostname(const void* value, size_t size) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* dice_table_info::mutable_hostname() {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  return hostname_;
}
inline ::std::string* dice_table_info::release_hostname() {
  clear_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hostname_;
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void dice_table_info::set_allocated_hostname(::std::string* hostname) {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (hostname) {
    set_has_hostname();
    hostname_ = hostname;
  } else {
    clear_has_hostname();
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 free_time = 11;
inline bool dice_table_info::has_free_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void dice_table_info::set_has_free_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void dice_table_info::clear_has_free_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void dice_table_info::clear_free_time() {
  free_time_ = 0u;
  clear_has_free_time();
}
inline ::google::protobuf::uint32 dice_table_info::free_time() const {
  return free_time_;
}
inline void dice_table_info::set_free_time(::google::protobuf::uint32 value) {
  set_has_free_time();
  free_time_ = value;
}

// optional uint32 card_time = 12;
inline bool dice_table_info::has_card_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void dice_table_info::set_has_card_time() {
  _has_bits_[0] |= 0x00000800u;
}
inline void dice_table_info::clear_has_card_time() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void dice_table_info::clear_card_time() {
  card_time_ = 0u;
  clear_has_card_time();
}
inline ::google::protobuf::uint32 dice_table_info::card_time() const {
  return card_time_;
}
inline void dice_table_info::set_card_time(::google::protobuf::uint32 value) {
  set_has_card_time();
  card_time_ = value;
}

// optional uint32 dispatch_time = 13;
inline bool dice_table_info::has_dispatch_time() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void dice_table_info::set_has_dispatch_time() {
  _has_bits_[0] |= 0x00001000u;
}
inline void dice_table_info::clear_has_dispatch_time() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void dice_table_info::clear_dispatch_time() {
  dispatch_time_ = 0u;
  clear_has_dispatch_time();
}
inline ::google::protobuf::uint32 dice_table_info::dispatch_time() const {
  return dispatch_time_;
}
inline void dice_table_info::set_dispatch_time(::google::protobuf::uint32 value) {
  set_has_dispatch_time();
  dispatch_time_ = value;
}

// optional uint32 table_state = 14;
inline bool dice_table_info::has_table_state() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void dice_table_info::set_has_table_state() {
  _has_bits_[0] |= 0x00002000u;
}
inline void dice_table_info::clear_has_table_state() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void dice_table_info::clear_table_state() {
  table_state_ = 0u;
  clear_has_table_state();
}
inline ::google::protobuf::uint32 dice_table_info::table_state() const {
  return table_state_;
}
inline void dice_table_info::set_table_state(::google::protobuf::uint32 value) {
  set_has_table_state();
  table_state_ = value;
}

// optional int64 sitdown = 15;
inline bool dice_table_info::has_sitdown() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void dice_table_info::set_has_sitdown() {
  _has_bits_[0] |= 0x00004000u;
}
inline void dice_table_info::clear_has_sitdown() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void dice_table_info::clear_sitdown() {
  sitdown_ = GOOGLE_LONGLONG(0);
  clear_has_sitdown();
}
inline ::google::protobuf::int64 dice_table_info::sitdown() const {
  return sitdown_;
}
inline void dice_table_info::set_sitdown(::google::protobuf::int64 value) {
  set_has_sitdown();
  sitdown_ = value;
}

// optional int64 apply_banker_condition = 16;
inline bool dice_table_info::has_apply_banker_condition() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void dice_table_info::set_has_apply_banker_condition() {
  _has_bits_[0] |= 0x00008000u;
}
inline void dice_table_info::clear_has_apply_banker_condition() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void dice_table_info::clear_apply_banker_condition() {
  apply_banker_condition_ = GOOGLE_LONGLONG(0);
  clear_has_apply_banker_condition();
}
inline ::google::protobuf::int64 dice_table_info::apply_banker_condition() const {
  return apply_banker_condition_;
}
inline void dice_table_info::set_apply_banker_condition(::google::protobuf::int64 value) {
  set_has_apply_banker_condition();
  apply_banker_condition_ = value;
}

// optional int64 apply_banker_maxscore = 17;
inline bool dice_table_info::has_apply_banker_maxscore() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void dice_table_info::set_has_apply_banker_maxscore() {
  _has_bits_[0] |= 0x00010000u;
}
inline void dice_table_info::clear_has_apply_banker_maxscore() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void dice_table_info::clear_apply_banker_maxscore() {
  apply_banker_maxscore_ = GOOGLE_LONGLONG(0);
  clear_has_apply_banker_maxscore();
}
inline ::google::protobuf::int64 dice_table_info::apply_banker_maxscore() const {
  return apply_banker_maxscore_;
}
inline void dice_table_info::set_apply_banker_maxscore(::google::protobuf::int64 value) {
  set_has_apply_banker_maxscore();
  apply_banker_maxscore_ = value;
}

// optional uint32 banker_max_time = 18;
inline bool dice_table_info::has_banker_max_time() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void dice_table_info::set_has_banker_max_time() {
  _has_bits_[0] |= 0x00020000u;
}
inline void dice_table_info::clear_has_banker_max_time() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void dice_table_info::clear_banker_max_time() {
  banker_max_time_ = 0u;
  clear_has_banker_max_time();
}
inline ::google::protobuf::uint32 dice_table_info::banker_max_time() const {
  return banker_max_time_;
}
inline void dice_table_info::set_banker_max_time(::google::protobuf::uint32 value) {
  set_has_banker_max_time();
  banker_max_time_ = value;
}

// -------------------------------------------------------------------

// majiang_table_info

// optional uint32 tableid = 1;
inline bool majiang_table_info::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void majiang_table_info::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void majiang_table_info::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void majiang_table_info::clear_tableid() {
  tableid_ = 0u;
  clear_has_tableid();
}
inline ::google::protobuf::uint32 majiang_table_info::tableid() const {
  return tableid_;
}
inline void majiang_table_info::set_tableid(::google::protobuf::uint32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional bytes tablename = 2;
inline bool majiang_table_info::has_tablename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void majiang_table_info::set_has_tablename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void majiang_table_info::clear_has_tablename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void majiang_table_info::clear_tablename() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    tablename_->clear();
  }
  clear_has_tablename();
}
inline const ::std::string& majiang_table_info::tablename() const {
  return *tablename_;
}
inline void majiang_table_info::set_tablename(const ::std::string& value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
}
inline void majiang_table_info::set_tablename(const char* value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
}
inline void majiang_table_info::set_tablename(const void* value, size_t size) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* majiang_table_info::mutable_tablename() {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  return tablename_;
}
inline ::std::string* majiang_table_info::release_tablename() {
  clear_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tablename_;
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void majiang_table_info::set_allocated_tablename(::std::string* tablename) {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (tablename) {
    set_has_tablename();
    tablename_ = tablename;
  } else {
    clear_has_tablename();
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 is_passwd = 3;
inline bool majiang_table_info::has_is_passwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void majiang_table_info::set_has_is_passwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void majiang_table_info::clear_has_is_passwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void majiang_table_info::clear_is_passwd() {
  is_passwd_ = 0u;
  clear_has_is_passwd();
}
inline ::google::protobuf::uint32 majiang_table_info::is_passwd() const {
  return is_passwd_;
}
inline void majiang_table_info::set_is_passwd(::google::protobuf::uint32 value) {
  set_has_is_passwd();
  is_passwd_ = value;
}

// optional uint32 deal = 4;
inline bool majiang_table_info::has_deal() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void majiang_table_info::set_has_deal() {
  _has_bits_[0] |= 0x00000008u;
}
inline void majiang_table_info::clear_has_deal() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void majiang_table_info::clear_deal() {
  deal_ = 0u;
  clear_has_deal();
}
inline ::google::protobuf::uint32 majiang_table_info::deal() const {
  return deal_;
}
inline void majiang_table_info::set_deal(::google::protobuf::uint32 value) {
  set_has_deal();
  deal_ = value;
}

// optional int64 basescore = 5;
inline bool majiang_table_info::has_basescore() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void majiang_table_info::set_has_basescore() {
  _has_bits_[0] |= 0x00000010u;
}
inline void majiang_table_info::clear_has_basescore() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void majiang_table_info::clear_basescore() {
  basescore_ = GOOGLE_LONGLONG(0);
  clear_has_basescore();
}
inline ::google::protobuf::int64 majiang_table_info::basescore() const {
  return basescore_;
}
inline void majiang_table_info::set_basescore(::google::protobuf::int64 value) {
  set_has_basescore();
  basescore_ = value;
}

// optional uint32 consume = 6;
inline bool majiang_table_info::has_consume() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void majiang_table_info::set_has_consume() {
  _has_bits_[0] |= 0x00000020u;
}
inline void majiang_table_info::clear_has_consume() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void majiang_table_info::clear_consume() {
  consume_ = 0u;
  clear_has_consume();
}
inline ::google::protobuf::uint32 majiang_table_info::consume() const {
  return consume_;
}
inline void majiang_table_info::set_consume(::google::protobuf::uint32 value) {
  set_has_consume();
  consume_ = value;
}

// optional uint64 entermin = 7;
inline bool majiang_table_info::has_entermin() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void majiang_table_info::set_has_entermin() {
  _has_bits_[0] |= 0x00000040u;
}
inline void majiang_table_info::clear_has_entermin() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void majiang_table_info::clear_entermin() {
  entermin_ = GOOGLE_ULONGLONG(0);
  clear_has_entermin();
}
inline ::google::protobuf::uint64 majiang_table_info::entermin() const {
  return entermin_;
}
inline void majiang_table_info::set_entermin(::google::protobuf::uint64 value) {
  set_has_entermin();
  entermin_ = value;
}

// optional uint32 duetime = 8;
inline bool majiang_table_info::has_duetime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void majiang_table_info::set_has_duetime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void majiang_table_info::clear_has_duetime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void majiang_table_info::clear_duetime() {
  duetime_ = 0u;
  clear_has_duetime();
}
inline ::google::protobuf::uint32 majiang_table_info::duetime() const {
  return duetime_;
}
inline void majiang_table_info::set_duetime(::google::protobuf::uint32 value) {
  set_has_duetime();
  duetime_ = value;
}

// optional uint32 feetype = 9;
inline bool majiang_table_info::has_feetype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void majiang_table_info::set_has_feetype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void majiang_table_info::clear_has_feetype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void majiang_table_info::clear_feetype() {
  feetype_ = 0u;
  clear_has_feetype();
}
inline ::google::protobuf::uint32 majiang_table_info::feetype() const {
  return feetype_;
}
inline void majiang_table_info::set_feetype(::google::protobuf::uint32 value) {
  set_has_feetype();
  feetype_ = value;
}

// optional int64 feevalue = 10;
inline bool majiang_table_info::has_feevalue() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void majiang_table_info::set_has_feevalue() {
  _has_bits_[0] |= 0x00000200u;
}
inline void majiang_table_info::clear_has_feevalue() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void majiang_table_info::clear_feevalue() {
  feevalue_ = GOOGLE_LONGLONG(0);
  clear_has_feevalue();
}
inline ::google::protobuf::int64 majiang_table_info::feevalue() const {
  return feevalue_;
}
inline void majiang_table_info::set_feevalue(::google::protobuf::int64 value) {
  set_has_feevalue();
  feevalue_ = value;
}

// optional bytes hostname = 11;
inline bool majiang_table_info::has_hostname() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void majiang_table_info::set_has_hostname() {
  _has_bits_[0] |= 0x00000400u;
}
inline void majiang_table_info::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void majiang_table_info::clear_hostname() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    hostname_->clear();
  }
  clear_has_hostname();
}
inline const ::std::string& majiang_table_info::hostname() const {
  return *hostname_;
}
inline void majiang_table_info::set_hostname(const ::std::string& value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void majiang_table_info::set_hostname(const char* value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void majiang_table_info::set_hostname(const void* value, size_t size) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* majiang_table_info::mutable_hostname() {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  return hostname_;
}
inline ::std::string* majiang_table_info::release_hostname() {
  clear_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hostname_;
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void majiang_table_info::set_allocated_hostname(::std::string* hostname) {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (hostname) {
    set_has_hostname();
    hostname_ = hostname;
  } else {
    clear_has_hostname();
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 show_hand_num = 12;
inline bool majiang_table_info::has_show_hand_num() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void majiang_table_info::set_has_show_hand_num() {
  _has_bits_[0] |= 0x00000800u;
}
inline void majiang_table_info::clear_has_show_hand_num() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void majiang_table_info::clear_show_hand_num() {
  show_hand_num_ = 0u;
  clear_has_show_hand_num();
}
inline ::google::protobuf::uint32 majiang_table_info::show_hand_num() const {
  return show_hand_num_;
}
inline void majiang_table_info::set_show_hand_num(::google::protobuf::uint32 value) {
  set_has_show_hand_num();
  show_hand_num_ = value;
}

// optional uint32 call_time = 13;
inline bool majiang_table_info::has_call_time() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void majiang_table_info::set_has_call_time() {
  _has_bits_[0] |= 0x00001000u;
}
inline void majiang_table_info::clear_has_call_time() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void majiang_table_info::clear_call_time() {
  call_time_ = 0u;
  clear_has_call_time();
}
inline ::google::protobuf::uint32 majiang_table_info::call_time() const {
  return call_time_;
}
inline void majiang_table_info::set_call_time(::google::protobuf::uint32 value) {
  set_has_call_time();
  call_time_ = value;
}

// optional uint32 card_time = 14;
inline bool majiang_table_info::has_card_time() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void majiang_table_info::set_has_card_time() {
  _has_bits_[0] |= 0x00002000u;
}
inline void majiang_table_info::clear_has_card_time() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void majiang_table_info::clear_card_time() {
  card_time_ = 0u;
  clear_has_card_time();
}
inline ::google::protobuf::uint32 majiang_table_info::card_time() const {
  return card_time_;
}
inline void majiang_table_info::set_card_time(::google::protobuf::uint32 value) {
  set_has_card_time();
  card_time_ = value;
}

// optional uint32 play_type = 15;
inline bool majiang_table_info::has_play_type() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void majiang_table_info::set_has_play_type() {
  _has_bits_[0] |= 0x00004000u;
}
inline void majiang_table_info::clear_has_play_type() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void majiang_table_info::clear_play_type() {
  play_type_ = 0u;
  clear_has_play_type();
}
inline ::google::protobuf::uint32 majiang_table_info::play_type() const {
  return play_type_;
}
inline void majiang_table_info::set_play_type(::google::protobuf::uint32 value) {
  set_has_play_type();
  play_type_ = value;
}

// optional uint32 seat_num = 16;
inline bool majiang_table_info::has_seat_num() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void majiang_table_info::set_has_seat_num() {
  _has_bits_[0] |= 0x00008000u;
}
inline void majiang_table_info::clear_has_seat_num() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void majiang_table_info::clear_seat_num() {
  seat_num_ = 0u;
  clear_has_seat_num();
}
inline ::google::protobuf::uint32 majiang_table_info::seat_num() const {
  return seat_num_;
}
inline void majiang_table_info::set_seat_num(::google::protobuf::uint32 value) {
  set_has_seat_num();
  seat_num_ = value;
}

// repeated uint32 kind_cards = 17;
inline int majiang_table_info::kind_cards_size() const {
  return kind_cards_.size();
}
inline void majiang_table_info::clear_kind_cards() {
  kind_cards_.Clear();
}
inline ::google::protobuf::uint32 majiang_table_info::kind_cards(int index) const {
  return kind_cards_.Get(index);
}
inline void majiang_table_info::set_kind_cards(int index, ::google::protobuf::uint32 value) {
  kind_cards_.Set(index, value);
}
inline void majiang_table_info::add_kind_cards(::google::protobuf::uint32 value) {
  kind_cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
majiang_table_info::kind_cards() const {
  return kind_cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
majiang_table_info::mutable_kind_cards() {
  return &kind_cards_;
}

// -------------------------------------------------------------------

// slot_table_info

// optional uint32 tableid = 1;
inline bool slot_table_info::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void slot_table_info::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void slot_table_info::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void slot_table_info::clear_tableid() {
  tableid_ = 0u;
  clear_has_tableid();
}
inline ::google::protobuf::uint32 slot_table_info::tableid() const {
  return tableid_;
}
inline void slot_table_info::set_tableid(::google::protobuf::uint32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional bytes tablename = 2;
inline bool slot_table_info::has_tablename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void slot_table_info::set_has_tablename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void slot_table_info::clear_has_tablename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void slot_table_info::clear_tablename() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    tablename_->clear();
  }
  clear_has_tablename();
}
inline const ::std::string& slot_table_info::tablename() const {
  return *tablename_;
}
inline void slot_table_info::set_tablename(const ::std::string& value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
}
inline void slot_table_info::set_tablename(const char* value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
}
inline void slot_table_info::set_tablename(const void* value, size_t size) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* slot_table_info::mutable_tablename() {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  return tablename_;
}
inline ::std::string* slot_table_info::release_tablename() {
  clear_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tablename_;
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void slot_table_info::set_allocated_tablename(::std::string* tablename) {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (tablename) {
    set_has_tablename();
    tablename_ = tablename;
  } else {
    clear_has_tablename();
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 is_passwd = 3;
inline bool slot_table_info::has_is_passwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void slot_table_info::set_has_is_passwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void slot_table_info::clear_has_is_passwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void slot_table_info::clear_is_passwd() {
  is_passwd_ = 0u;
  clear_has_is_passwd();
}
inline ::google::protobuf::uint32 slot_table_info::is_passwd() const {
  return is_passwd_;
}
inline void slot_table_info::set_is_passwd(::google::protobuf::uint32 value) {
  set_has_is_passwd();
  is_passwd_ = value;
}

// optional bytes hostname = 4;
inline bool slot_table_info::has_hostname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void slot_table_info::set_has_hostname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void slot_table_info::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void slot_table_info::clear_hostname() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    hostname_->clear();
  }
  clear_has_hostname();
}
inline const ::std::string& slot_table_info::hostname() const {
  return *hostname_;
}
inline void slot_table_info::set_hostname(const ::std::string& value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void slot_table_info::set_hostname(const char* value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void slot_table_info::set_hostname(const void* value, size_t size) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* slot_table_info::mutable_hostname() {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  return hostname_;
}
inline ::std::string* slot_table_info::release_hostname() {
  clear_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hostname_;
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void slot_table_info::set_allocated_hostname(::std::string* hostname) {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (hostname) {
    set_has_hostname();
    hostname_ = hostname;
  } else {
    clear_has_hostname();
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 basescore = 5;
inline bool slot_table_info::has_basescore() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void slot_table_info::set_has_basescore() {
  _has_bits_[0] |= 0x00000010u;
}
inline void slot_table_info::clear_has_basescore() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void slot_table_info::clear_basescore() {
  basescore_ = GOOGLE_LONGLONG(0);
  clear_has_basescore();
}
inline ::google::protobuf::int64 slot_table_info::basescore() const {
  return basescore_;
}
inline void slot_table_info::set_basescore(::google::protobuf::int64 value) {
  set_has_basescore();
  basescore_ = value;
}

// optional uint32 consume = 6;
inline bool slot_table_info::has_consume() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void slot_table_info::set_has_consume() {
  _has_bits_[0] |= 0x00000020u;
}
inline void slot_table_info::clear_has_consume() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void slot_table_info::clear_consume() {
  consume_ = 0u;
  clear_has_consume();
}
inline ::google::protobuf::uint32 slot_table_info::consume() const {
  return consume_;
}
inline void slot_table_info::set_consume(::google::protobuf::uint32 value) {
  set_has_consume();
  consume_ = value;
}

// optional uint64 entermin = 7;
inline bool slot_table_info::has_entermin() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void slot_table_info::set_has_entermin() {
  _has_bits_[0] |= 0x00000040u;
}
inline void slot_table_info::clear_has_entermin() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void slot_table_info::clear_entermin() {
  entermin_ = GOOGLE_ULONGLONG(0);
  clear_has_entermin();
}
inline ::google::protobuf::uint64 slot_table_info::entermin() const {
  return entermin_;
}
inline void slot_table_info::set_entermin(::google::protobuf::uint64 value) {
  set_has_entermin();
  entermin_ = value;
}

// optional uint32 duetime = 8;
inline bool slot_table_info::has_duetime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void slot_table_info::set_has_duetime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void slot_table_info::clear_has_duetime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void slot_table_info::clear_duetime() {
  duetime_ = 0u;
  clear_has_duetime();
}
inline ::google::protobuf::uint32 slot_table_info::duetime() const {
  return duetime_;
}
inline void slot_table_info::set_duetime(::google::protobuf::uint32 value) {
  set_has_duetime();
  duetime_ = value;
}

// optional uint32 feetype = 9;
inline bool slot_table_info::has_feetype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void slot_table_info::set_has_feetype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void slot_table_info::clear_has_feetype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void slot_table_info::clear_feetype() {
  feetype_ = 0u;
  clear_has_feetype();
}
inline ::google::protobuf::uint32 slot_table_info::feetype() const {
  return feetype_;
}
inline void slot_table_info::set_feetype(::google::protobuf::uint32 value) {
  set_has_feetype();
  feetype_ = value;
}

// optional int64 feevalue = 10;
inline bool slot_table_info::has_feevalue() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void slot_table_info::set_has_feevalue() {
  _has_bits_[0] |= 0x00000200u;
}
inline void slot_table_info::clear_has_feevalue() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void slot_table_info::clear_feevalue() {
  feevalue_ = GOOGLE_LONGLONG(0);
  clear_has_feevalue();
}
inline ::google::protobuf::int64 slot_table_info::feevalue() const {
  return feevalue_;
}
inline void slot_table_info::set_feevalue(::google::protobuf::int64 value) {
  set_has_feevalue();
  feevalue_ = value;
}

// optional uint32 seat_num = 11;
inline bool slot_table_info::has_seat_num() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void slot_table_info::set_has_seat_num() {
  _has_bits_[0] |= 0x00000400u;
}
inline void slot_table_info::clear_has_seat_num() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void slot_table_info::clear_seat_num() {
  seat_num_ = 0u;
  clear_has_seat_num();
}
inline ::google::protobuf::uint32 slot_table_info::seat_num() const {
  return seat_num_;
}
inline void slot_table_info::set_seat_num(::google::protobuf::uint32 value) {
  set_has_seat_num();
  seat_num_ = value;
}

// optional uint32 jackpot_score = 12;
inline bool slot_table_info::has_jackpot_score() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void slot_table_info::set_has_jackpot_score() {
  _has_bits_[0] |= 0x00000800u;
}
inline void slot_table_info::clear_has_jackpot_score() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void slot_table_info::clear_jackpot_score() {
  jackpot_score_ = 0u;
  clear_has_jackpot_score();
}
inline ::google::protobuf::uint32 slot_table_info::jackpot_score() const {
  return jackpot_score_;
}
inline void slot_table_info::set_jackpot_score(::google::protobuf::uint32 value) {
  set_has_jackpot_score();
  jackpot_score_ = value;
}

// -------------------------------------------------------------------

// war_table_info

// optional uint32 tableid = 1;
inline bool war_table_info::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void war_table_info::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void war_table_info::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void war_table_info::clear_tableid() {
  tableid_ = 0u;
  clear_has_tableid();
}
inline ::google::protobuf::uint32 war_table_info::tableid() const {
  return tableid_;
}
inline void war_table_info::set_tableid(::google::protobuf::uint32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional bytes tablename = 2;
inline bool war_table_info::has_tablename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void war_table_info::set_has_tablename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void war_table_info::clear_has_tablename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void war_table_info::clear_tablename() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    tablename_->clear();
  }
  clear_has_tablename();
}
inline const ::std::string& war_table_info::tablename() const {
  return *tablename_;
}
inline void war_table_info::set_tablename(const ::std::string& value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
}
inline void war_table_info::set_tablename(const char* value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
}
inline void war_table_info::set_tablename(const void* value, size_t size) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* war_table_info::mutable_tablename() {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  return tablename_;
}
inline ::std::string* war_table_info::release_tablename() {
  clear_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tablename_;
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void war_table_info::set_allocated_tablename(::std::string* tablename) {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (tablename) {
    set_has_tablename();
    tablename_ = tablename;
  } else {
    clear_has_tablename();
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 is_passwd = 3;
inline bool war_table_info::has_is_passwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void war_table_info::set_has_is_passwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void war_table_info::clear_has_is_passwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void war_table_info::clear_is_passwd() {
  is_passwd_ = 0u;
  clear_has_is_passwd();
}
inline ::google::protobuf::uint32 war_table_info::is_passwd() const {
  return is_passwd_;
}
inline void war_table_info::set_is_passwd(::google::protobuf::uint32 value) {
  set_has_is_passwd();
  is_passwd_ = value;
}

// optional int64 basescore = 4;
inline bool war_table_info::has_basescore() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void war_table_info::set_has_basescore() {
  _has_bits_[0] |= 0x00000008u;
}
inline void war_table_info::clear_has_basescore() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void war_table_info::clear_basescore() {
  basescore_ = GOOGLE_LONGLONG(0);
  clear_has_basescore();
}
inline ::google::protobuf::int64 war_table_info::basescore() const {
  return basescore_;
}
inline void war_table_info::set_basescore(::google::protobuf::int64 value) {
  set_has_basescore();
  basescore_ = value;
}

// optional uint32 consume = 5;
inline bool war_table_info::has_consume() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void war_table_info::set_has_consume() {
  _has_bits_[0] |= 0x00000010u;
}
inline void war_table_info::clear_has_consume() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void war_table_info::clear_consume() {
  consume_ = 0u;
  clear_has_consume();
}
inline ::google::protobuf::uint32 war_table_info::consume() const {
  return consume_;
}
inline void war_table_info::set_consume(::google::protobuf::uint32 value) {
  set_has_consume();
  consume_ = value;
}

// optional uint64 entermin = 6;
inline bool war_table_info::has_entermin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void war_table_info::set_has_entermin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void war_table_info::clear_has_entermin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void war_table_info::clear_entermin() {
  entermin_ = GOOGLE_ULONGLONG(0);
  clear_has_entermin();
}
inline ::google::protobuf::uint64 war_table_info::entermin() const {
  return entermin_;
}
inline void war_table_info::set_entermin(::google::protobuf::uint64 value) {
  set_has_entermin();
  entermin_ = value;
}

// optional uint32 duetime = 7;
inline bool war_table_info::has_duetime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void war_table_info::set_has_duetime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void war_table_info::clear_has_duetime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void war_table_info::clear_duetime() {
  duetime_ = 0u;
  clear_has_duetime();
}
inline ::google::protobuf::uint32 war_table_info::duetime() const {
  return duetime_;
}
inline void war_table_info::set_duetime(::google::protobuf::uint32 value) {
  set_has_duetime();
  duetime_ = value;
}

// optional uint32 feetype = 8;
inline bool war_table_info::has_feetype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void war_table_info::set_has_feetype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void war_table_info::clear_has_feetype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void war_table_info::clear_feetype() {
  feetype_ = 0u;
  clear_has_feetype();
}
inline ::google::protobuf::uint32 war_table_info::feetype() const {
  return feetype_;
}
inline void war_table_info::set_feetype(::google::protobuf::uint32 value) {
  set_has_feetype();
  feetype_ = value;
}

// optional int64 feevalue = 9;
inline bool war_table_info::has_feevalue() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void war_table_info::set_has_feevalue() {
  _has_bits_[0] |= 0x00000100u;
}
inline void war_table_info::clear_has_feevalue() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void war_table_info::clear_feevalue() {
  feevalue_ = GOOGLE_LONGLONG(0);
  clear_has_feevalue();
}
inline ::google::protobuf::int64 war_table_info::feevalue() const {
  return feevalue_;
}
inline void war_table_info::set_feevalue(::google::protobuf::int64 value) {
  set_has_feevalue();
  feevalue_ = value;
}

// optional bytes hostname = 10;
inline bool war_table_info::has_hostname() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void war_table_info::set_has_hostname() {
  _has_bits_[0] |= 0x00000200u;
}
inline void war_table_info::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void war_table_info::clear_hostname() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    hostname_->clear();
  }
  clear_has_hostname();
}
inline const ::std::string& war_table_info::hostname() const {
  return *hostname_;
}
inline void war_table_info::set_hostname(const ::std::string& value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void war_table_info::set_hostname(const char* value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void war_table_info::set_hostname(const void* value, size_t size) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* war_table_info::mutable_hostname() {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  return hostname_;
}
inline ::std::string* war_table_info::release_hostname() {
  clear_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hostname_;
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void war_table_info::set_allocated_hostname(::std::string* hostname) {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (hostname) {
    set_has_hostname();
    hostname_ = hostname;
  } else {
    clear_has_hostname();
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 card_time = 11;
inline bool war_table_info::has_card_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void war_table_info::set_has_card_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void war_table_info::clear_has_card_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void war_table_info::clear_card_time() {
  card_time_ = 0u;
  clear_has_card_time();
}
inline ::google::protobuf::uint32 war_table_info::card_time() const {
  return card_time_;
}
inline void war_table_info::set_card_time(::google::protobuf::uint32 value) {
  set_has_card_time();
  card_time_ = value;
}

// optional uint32 table_state = 12;
inline bool war_table_info::has_table_state() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void war_table_info::set_has_table_state() {
  _has_bits_[0] |= 0x00000800u;
}
inline void war_table_info::clear_has_table_state() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void war_table_info::clear_table_state() {
  table_state_ = 0u;
  clear_has_table_state();
}
inline ::google::protobuf::uint32 war_table_info::table_state() const {
  return table_state_;
}
inline void war_table_info::set_table_state(::google::protobuf::uint32 value) {
  set_has_table_state();
  table_state_ = value;
}

// optional int64 sitdown = 13;
inline bool war_table_info::has_sitdown() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void war_table_info::set_has_sitdown() {
  _has_bits_[0] |= 0x00001000u;
}
inline void war_table_info::clear_has_sitdown() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void war_table_info::clear_sitdown() {
  sitdown_ = GOOGLE_LONGLONG(0);
  clear_has_sitdown();
}
inline ::google::protobuf::int64 war_table_info::sitdown() const {
  return sitdown_;
}
inline void war_table_info::set_sitdown(::google::protobuf::int64 value) {
  set_has_sitdown();
  sitdown_ = value;
}

// -------------------------------------------------------------------

// fight_table_info

// optional uint32 tableid = 1;
inline bool fight_table_info::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void fight_table_info::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void fight_table_info::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void fight_table_info::clear_tableid() {
  tableid_ = 0u;
  clear_has_tableid();
}
inline ::google::protobuf::uint32 fight_table_info::tableid() const {
  return tableid_;
}
inline void fight_table_info::set_tableid(::google::protobuf::uint32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional bytes tablename = 2;
inline bool fight_table_info::has_tablename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void fight_table_info::set_has_tablename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void fight_table_info::clear_has_tablename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void fight_table_info::clear_tablename() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    tablename_->clear();
  }
  clear_has_tablename();
}
inline const ::std::string& fight_table_info::tablename() const {
  return *tablename_;
}
inline void fight_table_info::set_tablename(const ::std::string& value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
}
inline void fight_table_info::set_tablename(const char* value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
}
inline void fight_table_info::set_tablename(const void* value, size_t size) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* fight_table_info::mutable_tablename() {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  return tablename_;
}
inline ::std::string* fight_table_info::release_tablename() {
  clear_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tablename_;
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void fight_table_info::set_allocated_tablename(::std::string* tablename) {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (tablename) {
    set_has_tablename();
    tablename_ = tablename;
  } else {
    clear_has_tablename();
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 is_passwd = 3;
inline bool fight_table_info::has_is_passwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void fight_table_info::set_has_is_passwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void fight_table_info::clear_has_is_passwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void fight_table_info::clear_is_passwd() {
  is_passwd_ = 0u;
  clear_has_is_passwd();
}
inline ::google::protobuf::uint32 fight_table_info::is_passwd() const {
  return is_passwd_;
}
inline void fight_table_info::set_is_passwd(::google::protobuf::uint32 value) {
  set_has_is_passwd();
  is_passwd_ = value;
}

// optional int64 basescore = 4;
inline bool fight_table_info::has_basescore() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void fight_table_info::set_has_basescore() {
  _has_bits_[0] |= 0x00000008u;
}
inline void fight_table_info::clear_has_basescore() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void fight_table_info::clear_basescore() {
  basescore_ = GOOGLE_LONGLONG(0);
  clear_has_basescore();
}
inline ::google::protobuf::int64 fight_table_info::basescore() const {
  return basescore_;
}
inline void fight_table_info::set_basescore(::google::protobuf::int64 value) {
  set_has_basescore();
  basescore_ = value;
}

// optional uint32 consume = 5;
inline bool fight_table_info::has_consume() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void fight_table_info::set_has_consume() {
  _has_bits_[0] |= 0x00000010u;
}
inline void fight_table_info::clear_has_consume() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void fight_table_info::clear_consume() {
  consume_ = 0u;
  clear_has_consume();
}
inline ::google::protobuf::uint32 fight_table_info::consume() const {
  return consume_;
}
inline void fight_table_info::set_consume(::google::protobuf::uint32 value) {
  set_has_consume();
  consume_ = value;
}

// optional uint64 entermin = 6;
inline bool fight_table_info::has_entermin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void fight_table_info::set_has_entermin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void fight_table_info::clear_has_entermin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void fight_table_info::clear_entermin() {
  entermin_ = GOOGLE_ULONGLONG(0);
  clear_has_entermin();
}
inline ::google::protobuf::uint64 fight_table_info::entermin() const {
  return entermin_;
}
inline void fight_table_info::set_entermin(::google::protobuf::uint64 value) {
  set_has_entermin();
  entermin_ = value;
}

// optional uint32 duetime = 7;
inline bool fight_table_info::has_duetime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void fight_table_info::set_has_duetime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void fight_table_info::clear_has_duetime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void fight_table_info::clear_duetime() {
  duetime_ = 0u;
  clear_has_duetime();
}
inline ::google::protobuf::uint32 fight_table_info::duetime() const {
  return duetime_;
}
inline void fight_table_info::set_duetime(::google::protobuf::uint32 value) {
  set_has_duetime();
  duetime_ = value;
}

// optional uint32 feetype = 8;
inline bool fight_table_info::has_feetype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void fight_table_info::set_has_feetype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void fight_table_info::clear_has_feetype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void fight_table_info::clear_feetype() {
  feetype_ = 0u;
  clear_has_feetype();
}
inline ::google::protobuf::uint32 fight_table_info::feetype() const {
  return feetype_;
}
inline void fight_table_info::set_feetype(::google::protobuf::uint32 value) {
  set_has_feetype();
  feetype_ = value;
}

// optional int64 feevalue = 9;
inline bool fight_table_info::has_feevalue() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void fight_table_info::set_has_feevalue() {
  _has_bits_[0] |= 0x00000100u;
}
inline void fight_table_info::clear_has_feevalue() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void fight_table_info::clear_feevalue() {
  feevalue_ = GOOGLE_LONGLONG(0);
  clear_has_feevalue();
}
inline ::google::protobuf::int64 fight_table_info::feevalue() const {
  return feevalue_;
}
inline void fight_table_info::set_feevalue(::google::protobuf::int64 value) {
  set_has_feevalue();
  feevalue_ = value;
}

// optional bytes hostname = 10;
inline bool fight_table_info::has_hostname() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void fight_table_info::set_has_hostname() {
  _has_bits_[0] |= 0x00000200u;
}
inline void fight_table_info::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void fight_table_info::clear_hostname() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    hostname_->clear();
  }
  clear_has_hostname();
}
inline const ::std::string& fight_table_info::hostname() const {
  return *hostname_;
}
inline void fight_table_info::set_hostname(const ::std::string& value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void fight_table_info::set_hostname(const char* value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void fight_table_info::set_hostname(const void* value, size_t size) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* fight_table_info::mutable_hostname() {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  return hostname_;
}
inline ::std::string* fight_table_info::release_hostname() {
  clear_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hostname_;
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void fight_table_info::set_allocated_hostname(::std::string* hostname) {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (hostname) {
    set_has_hostname();
    hostname_ = hostname;
  } else {
    clear_has_hostname();
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 card_time = 11;
inline bool fight_table_info::has_card_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void fight_table_info::set_has_card_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void fight_table_info::clear_has_card_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void fight_table_info::clear_card_time() {
  card_time_ = 0u;
  clear_has_card_time();
}
inline ::google::protobuf::uint32 fight_table_info::card_time() const {
  return card_time_;
}
inline void fight_table_info::set_card_time(::google::protobuf::uint32 value) {
  set_has_card_time();
  card_time_ = value;
}

// optional uint32 table_state = 12;
inline bool fight_table_info::has_table_state() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void fight_table_info::set_has_table_state() {
  _has_bits_[0] |= 0x00000800u;
}
inline void fight_table_info::clear_has_table_state() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void fight_table_info::clear_table_state() {
  table_state_ = 0u;
  clear_has_table_state();
}
inline ::google::protobuf::uint32 fight_table_info::table_state() const {
  return table_state_;
}
inline void fight_table_info::set_table_state(::google::protobuf::uint32 value) {
  set_has_table_state();
  table_state_ = value;
}

// optional int64 sitdown = 13;
inline bool fight_table_info::has_sitdown() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void fight_table_info::set_has_sitdown() {
  _has_bits_[0] |= 0x00001000u;
}
inline void fight_table_info::clear_has_sitdown() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void fight_table_info::clear_sitdown() {
  sitdown_ = GOOGLE_LONGLONG(0);
  clear_has_sitdown();
}
inline ::google::protobuf::int64 fight_table_info::sitdown() const {
  return sitdown_;
}
inline void fight_table_info::set_sitdown(::google::protobuf::int64 value) {
  set_has_sitdown();
  sitdown_ = value;
}

// -------------------------------------------------------------------

// robniu_table_info

// optional uint32 tableid = 1;
inline bool robniu_table_info::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void robniu_table_info::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void robniu_table_info::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void robniu_table_info::clear_tableid() {
  tableid_ = 0u;
  clear_has_tableid();
}
inline ::google::protobuf::uint32 robniu_table_info::tableid() const {
  return tableid_;
}
inline void robniu_table_info::set_tableid(::google::protobuf::uint32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional bytes tablename = 2;
inline bool robniu_table_info::has_tablename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void robniu_table_info::set_has_tablename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void robniu_table_info::clear_has_tablename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void robniu_table_info::clear_tablename() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    tablename_->clear();
  }
  clear_has_tablename();
}
inline const ::std::string& robniu_table_info::tablename() const {
  return *tablename_;
}
inline void robniu_table_info::set_tablename(const ::std::string& value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
}
inline void robniu_table_info::set_tablename(const char* value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
}
inline void robniu_table_info::set_tablename(const void* value, size_t size) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* robniu_table_info::mutable_tablename() {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  return tablename_;
}
inline ::std::string* robniu_table_info::release_tablename() {
  clear_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tablename_;
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void robniu_table_info::set_allocated_tablename(::std::string* tablename) {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (tablename) {
    set_has_tablename();
    tablename_ = tablename;
  } else {
    clear_has_tablename();
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 is_passwd = 3;
inline bool robniu_table_info::has_is_passwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void robniu_table_info::set_has_is_passwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void robniu_table_info::clear_has_is_passwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void robniu_table_info::clear_is_passwd() {
  is_passwd_ = 0u;
  clear_has_is_passwd();
}
inline ::google::protobuf::uint32 robniu_table_info::is_passwd() const {
  return is_passwd_;
}
inline void robniu_table_info::set_is_passwd(::google::protobuf::uint32 value) {
  set_has_is_passwd();
  is_passwd_ = value;
}

// optional int64 basescore = 4;
inline bool robniu_table_info::has_basescore() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void robniu_table_info::set_has_basescore() {
  _has_bits_[0] |= 0x00000008u;
}
inline void robniu_table_info::clear_has_basescore() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void robniu_table_info::clear_basescore() {
  basescore_ = GOOGLE_LONGLONG(0);
  clear_has_basescore();
}
inline ::google::protobuf::int64 robniu_table_info::basescore() const {
  return basescore_;
}
inline void robniu_table_info::set_basescore(::google::protobuf::int64 value) {
  set_has_basescore();
  basescore_ = value;
}

// optional uint32 consume = 5;
inline bool robniu_table_info::has_consume() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void robniu_table_info::set_has_consume() {
  _has_bits_[0] |= 0x00000010u;
}
inline void robniu_table_info::clear_has_consume() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void robniu_table_info::clear_consume() {
  consume_ = 0u;
  clear_has_consume();
}
inline ::google::protobuf::uint32 robniu_table_info::consume() const {
  return consume_;
}
inline void robniu_table_info::set_consume(::google::protobuf::uint32 value) {
  set_has_consume();
  consume_ = value;
}

// optional uint64 entermin = 6;
inline bool robniu_table_info::has_entermin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void robniu_table_info::set_has_entermin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void robniu_table_info::clear_has_entermin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void robniu_table_info::clear_entermin() {
  entermin_ = GOOGLE_ULONGLONG(0);
  clear_has_entermin();
}
inline ::google::protobuf::uint64 robniu_table_info::entermin() const {
  return entermin_;
}
inline void robniu_table_info::set_entermin(::google::protobuf::uint64 value) {
  set_has_entermin();
  entermin_ = value;
}

// optional uint32 duetime = 7;
inline bool robniu_table_info::has_duetime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void robniu_table_info::set_has_duetime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void robniu_table_info::clear_has_duetime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void robniu_table_info::clear_duetime() {
  duetime_ = 0u;
  clear_has_duetime();
}
inline ::google::protobuf::uint32 robniu_table_info::duetime() const {
  return duetime_;
}
inline void robniu_table_info::set_duetime(::google::protobuf::uint32 value) {
  set_has_duetime();
  duetime_ = value;
}

// optional uint32 feetype = 8;
inline bool robniu_table_info::has_feetype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void robniu_table_info::set_has_feetype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void robniu_table_info::clear_has_feetype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void robniu_table_info::clear_feetype() {
  feetype_ = 0u;
  clear_has_feetype();
}
inline ::google::protobuf::uint32 robniu_table_info::feetype() const {
  return feetype_;
}
inline void robniu_table_info::set_feetype(::google::protobuf::uint32 value) {
  set_has_feetype();
  feetype_ = value;
}

// optional int64 feevalue = 9;
inline bool robniu_table_info::has_feevalue() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void robniu_table_info::set_has_feevalue() {
  _has_bits_[0] |= 0x00000100u;
}
inline void robniu_table_info::clear_has_feevalue() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void robniu_table_info::clear_feevalue() {
  feevalue_ = GOOGLE_LONGLONG(0);
  clear_has_feevalue();
}
inline ::google::protobuf::int64 robniu_table_info::feevalue() const {
  return feevalue_;
}
inline void robniu_table_info::set_feevalue(::google::protobuf::int64 value) {
  set_has_feevalue();
  feevalue_ = value;
}

// optional bytes hostname = 10;
inline bool robniu_table_info::has_hostname() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void robniu_table_info::set_has_hostname() {
  _has_bits_[0] |= 0x00000200u;
}
inline void robniu_table_info::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void robniu_table_info::clear_hostname() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    hostname_->clear();
  }
  clear_has_hostname();
}
inline const ::std::string& robniu_table_info::hostname() const {
  return *hostname_;
}
inline void robniu_table_info::set_hostname(const ::std::string& value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void robniu_table_info::set_hostname(const char* value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void robniu_table_info::set_hostname(const void* value, size_t size) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* robniu_table_info::mutable_hostname() {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  return hostname_;
}
inline ::std::string* robniu_table_info::release_hostname() {
  clear_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hostname_;
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void robniu_table_info::set_allocated_hostname(::std::string* hostname) {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (hostname) {
    set_has_hostname();
    hostname_ = hostname;
  } else {
    clear_has_hostname();
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 table_state = 11;
inline bool robniu_table_info::has_table_state() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void robniu_table_info::set_has_table_state() {
  _has_bits_[0] |= 0x00000400u;
}
inline void robniu_table_info::clear_has_table_state() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void robniu_table_info::clear_table_state() {
  table_state_ = 0u;
  clear_has_table_state();
}
inline ::google::protobuf::uint32 robniu_table_info::table_state() const {
  return table_state_;
}
inline void robniu_table_info::set_table_state(::google::protobuf::uint32 value) {
  set_has_table_state();
  table_state_ = value;
}

// optional uint32 seat_num = 12;
inline bool robniu_table_info::has_seat_num() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void robniu_table_info::set_has_seat_num() {
  _has_bits_[0] |= 0x00000800u;
}
inline void robniu_table_info::clear_has_seat_num() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void robniu_table_info::clear_seat_num() {
  seat_num_ = 0u;
  clear_has_seat_num();
}
inline ::google::protobuf::uint32 robniu_table_info::seat_num() const {
  return seat_num_;
}
inline void robniu_table_info::set_seat_num(::google::protobuf::uint32 value) {
  set_has_seat_num();
  seat_num_ = value;
}

// optional uint32 can_banker = 13;
inline bool robniu_table_info::has_can_banker() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void robniu_table_info::set_has_can_banker() {
  _has_bits_[0] |= 0x00001000u;
}
inline void robniu_table_info::clear_has_can_banker() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void robniu_table_info::clear_can_banker() {
  can_banker_ = 0u;
  clear_has_can_banker();
}
inline ::google::protobuf::uint32 robniu_table_info::can_banker() const {
  return can_banker_;
}
inline void robniu_table_info::set_can_banker(::google::protobuf::uint32 value) {
  set_has_can_banker();
  can_banker_ = value;
}

// optional uint32 apply_banker_time = 14;
inline bool robniu_table_info::has_apply_banker_time() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void robniu_table_info::set_has_apply_banker_time() {
  _has_bits_[0] |= 0x00002000u;
}
inline void robniu_table_info::clear_has_apply_banker_time() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void robniu_table_info::clear_apply_banker_time() {
  apply_banker_time_ = 0u;
  clear_has_apply_banker_time();
}
inline ::google::protobuf::uint32 robniu_table_info::apply_banker_time() const {
  return apply_banker_time_;
}
inline void robniu_table_info::set_apply_banker_time(::google::protobuf::uint32 value) {
  set_has_apply_banker_time();
  apply_banker_time_ = value;
}

// optional uint32 card_time = 15;
inline bool robniu_table_info::has_card_time() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void robniu_table_info::set_has_card_time() {
  _has_bits_[0] |= 0x00004000u;
}
inline void robniu_table_info::clear_has_card_time() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void robniu_table_info::clear_card_time() {
  card_time_ = 0u;
  clear_has_card_time();
}
inline ::google::protobuf::uint32 robniu_table_info::card_time() const {
  return card_time_;
}
inline void robniu_table_info::set_card_time(::google::protobuf::uint32 value) {
  set_has_card_time();
  card_time_ = value;
}

// optional uint32 show_card_time = 16;
inline bool robniu_table_info::has_show_card_time() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void robniu_table_info::set_has_show_card_time() {
  _has_bits_[0] |= 0x00008000u;
}
inline void robniu_table_info::clear_has_show_card_time() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void robniu_table_info::clear_show_card_time() {
  show_card_time_ = 0u;
  clear_has_show_card_time();
}
inline ::google::protobuf::uint32 robniu_table_info::show_card_time() const {
  return show_card_time_;
}
inline void robniu_table_info::set_show_card_time(::google::protobuf::uint32 value) {
  set_has_show_card_time();
  show_card_time_ = value;
}

// -------------------------------------------------------------------

// table_face_info

// optional .net.land_table_info land = 1;
inline bool table_face_info::has_land() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void table_face_info::set_has_land() {
  _has_bits_[0] |= 0x00000001u;
}
inline void table_face_info::clear_has_land() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void table_face_info::clear_land() {
  if (land_ != NULL) land_->::net::land_table_info::Clear();
  clear_has_land();
}
inline const ::net::land_table_info& table_face_info::land() const {
  return land_ != NULL ? *land_ : *default_instance_->land_;
}
inline ::net::land_table_info* table_face_info::mutable_land() {
  set_has_land();
  if (land_ == NULL) land_ = new ::net::land_table_info;
  return land_;
}
inline ::net::land_table_info* table_face_info::release_land() {
  clear_has_land();
  ::net::land_table_info* temp = land_;
  land_ = NULL;
  return temp;
}
inline void table_face_info::set_allocated_land(::net::land_table_info* land) {
  delete land_;
  land_ = land;
  if (land) {
    set_has_land();
  } else {
    clear_has_land();
  }
}

// optional .net.showhand_table_info showhand = 2;
inline bool table_face_info::has_showhand() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void table_face_info::set_has_showhand() {
  _has_bits_[0] |= 0x00000002u;
}
inline void table_face_info::clear_has_showhand() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void table_face_info::clear_showhand() {
  if (showhand_ != NULL) showhand_->::net::showhand_table_info::Clear();
  clear_has_showhand();
}
inline const ::net::showhand_table_info& table_face_info::showhand() const {
  return showhand_ != NULL ? *showhand_ : *default_instance_->showhand_;
}
inline ::net::showhand_table_info* table_face_info::mutable_showhand() {
  set_has_showhand();
  if (showhand_ == NULL) showhand_ = new ::net::showhand_table_info;
  return showhand_;
}
inline ::net::showhand_table_info* table_face_info::release_showhand() {
  clear_has_showhand();
  ::net::showhand_table_info* temp = showhand_;
  showhand_ = NULL;
  return temp;
}
inline void table_face_info::set_allocated_showhand(::net::showhand_table_info* showhand) {
  delete showhand_;
  showhand_ = showhand;
  if (showhand) {
    set_has_showhand();
  } else {
    clear_has_showhand();
  }
}

// optional .net.bainiu_table_info bainiu = 3;
inline bool table_face_info::has_bainiu() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void table_face_info::set_has_bainiu() {
  _has_bits_[0] |= 0x00000004u;
}
inline void table_face_info::clear_has_bainiu() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void table_face_info::clear_bainiu() {
  if (bainiu_ != NULL) bainiu_->::net::bainiu_table_info::Clear();
  clear_has_bainiu();
}
inline const ::net::bainiu_table_info& table_face_info::bainiu() const {
  return bainiu_ != NULL ? *bainiu_ : *default_instance_->bainiu_;
}
inline ::net::bainiu_table_info* table_face_info::mutable_bainiu() {
  set_has_bainiu();
  if (bainiu_ == NULL) bainiu_ = new ::net::bainiu_table_info;
  return bainiu_;
}
inline ::net::bainiu_table_info* table_face_info::release_bainiu() {
  clear_has_bainiu();
  ::net::bainiu_table_info* temp = bainiu_;
  bainiu_ = NULL;
  return temp;
}
inline void table_face_info::set_allocated_bainiu(::net::bainiu_table_info* bainiu) {
  delete bainiu_;
  bainiu_ = bainiu;
  if (bainiu) {
    set_has_bainiu();
  } else {
    clear_has_bainiu();
  }
}

// optional .net.texas_table_info texas = 4;
inline bool table_face_info::has_texas() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void table_face_info::set_has_texas() {
  _has_bits_[0] |= 0x00000008u;
}
inline void table_face_info::clear_has_texas() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void table_face_info::clear_texas() {
  if (texas_ != NULL) texas_->::net::texas_table_info::Clear();
  clear_has_texas();
}
inline const ::net::texas_table_info& table_face_info::texas() const {
  return texas_ != NULL ? *texas_ : *default_instance_->texas_;
}
inline ::net::texas_table_info* table_face_info::mutable_texas() {
  set_has_texas();
  if (texas_ == NULL) texas_ = new ::net::texas_table_info;
  return texas_;
}
inline ::net::texas_table_info* table_face_info::release_texas() {
  clear_has_texas();
  ::net::texas_table_info* temp = texas_;
  texas_ = NULL;
  return temp;
}
inline void table_face_info::set_allocated_texas(::net::texas_table_info* texas) {
  delete texas_;
  texas_ = texas;
  if (texas) {
    set_has_texas();
  } else {
    clear_has_texas();
  }
}

// optional .net.zajinhua_table_info zajinhua = 5;
inline bool table_face_info::has_zajinhua() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void table_face_info::set_has_zajinhua() {
  _has_bits_[0] |= 0x00000010u;
}
inline void table_face_info::clear_has_zajinhua() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void table_face_info::clear_zajinhua() {
  if (zajinhua_ != NULL) zajinhua_->::net::zajinhua_table_info::Clear();
  clear_has_zajinhua();
}
inline const ::net::zajinhua_table_info& table_face_info::zajinhua() const {
  return zajinhua_ != NULL ? *zajinhua_ : *default_instance_->zajinhua_;
}
inline ::net::zajinhua_table_info* table_face_info::mutable_zajinhua() {
  set_has_zajinhua();
  if (zajinhua_ == NULL) zajinhua_ = new ::net::zajinhua_table_info;
  return zajinhua_;
}
inline ::net::zajinhua_table_info* table_face_info::release_zajinhua() {
  clear_has_zajinhua();
  ::net::zajinhua_table_info* temp = zajinhua_;
  zajinhua_ = NULL;
  return temp;
}
inline void table_face_info::set_allocated_zajinhua(::net::zajinhua_table_info* zajinhua) {
  delete zajinhua_;
  zajinhua_ = zajinhua;
  if (zajinhua) {
    set_has_zajinhua();
  } else {
    clear_has_zajinhua();
  }
}

// optional .net.niuniu_table_info niuniu = 6;
inline bool table_face_info::has_niuniu() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void table_face_info::set_has_niuniu() {
  _has_bits_[0] |= 0x00000020u;
}
inline void table_face_info::clear_has_niuniu() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void table_face_info::clear_niuniu() {
  if (niuniu_ != NULL) niuniu_->::net::niuniu_table_info::Clear();
  clear_has_niuniu();
}
inline const ::net::niuniu_table_info& table_face_info::niuniu() const {
  return niuniu_ != NULL ? *niuniu_ : *default_instance_->niuniu_;
}
inline ::net::niuniu_table_info* table_face_info::mutable_niuniu() {
  set_has_niuniu();
  if (niuniu_ == NULL) niuniu_ = new ::net::niuniu_table_info;
  return niuniu_;
}
inline ::net::niuniu_table_info* table_face_info::release_niuniu() {
  clear_has_niuniu();
  ::net::niuniu_table_info* temp = niuniu_;
  niuniu_ = NULL;
  return temp;
}
inline void table_face_info::set_allocated_niuniu(::net::niuniu_table_info* niuniu) {
  delete niuniu_;
  niuniu_ = niuniu;
  if (niuniu) {
    set_has_niuniu();
  } else {
    clear_has_niuniu();
  }
}

// optional .net.baccarat_table_info baccarat = 7;
inline bool table_face_info::has_baccarat() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void table_face_info::set_has_baccarat() {
  _has_bits_[0] |= 0x00000040u;
}
inline void table_face_info::clear_has_baccarat() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void table_face_info::clear_baccarat() {
  if (baccarat_ != NULL) baccarat_->::net::baccarat_table_info::Clear();
  clear_has_baccarat();
}
inline const ::net::baccarat_table_info& table_face_info::baccarat() const {
  return baccarat_ != NULL ? *baccarat_ : *default_instance_->baccarat_;
}
inline ::net::baccarat_table_info* table_face_info::mutable_baccarat() {
  set_has_baccarat();
  if (baccarat_ == NULL) baccarat_ = new ::net::baccarat_table_info;
  return baccarat_;
}
inline ::net::baccarat_table_info* table_face_info::release_baccarat() {
  clear_has_baccarat();
  ::net::baccarat_table_info* temp = baccarat_;
  baccarat_ = NULL;
  return temp;
}
inline void table_face_info::set_allocated_baccarat(::net::baccarat_table_info* baccarat) {
  delete baccarat_;
  baccarat_ = baccarat;
  if (baccarat) {
    set_has_baccarat();
  } else {
    clear_has_baccarat();
  }
}

// optional .net.sangong_table_info sangong = 8;
inline bool table_face_info::has_sangong() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void table_face_info::set_has_sangong() {
  _has_bits_[0] |= 0x00000080u;
}
inline void table_face_info::clear_has_sangong() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void table_face_info::clear_sangong() {
  if (sangong_ != NULL) sangong_->::net::sangong_table_info::Clear();
  clear_has_sangong();
}
inline const ::net::sangong_table_info& table_face_info::sangong() const {
  return sangong_ != NULL ? *sangong_ : *default_instance_->sangong_;
}
inline ::net::sangong_table_info* table_face_info::mutable_sangong() {
  set_has_sangong();
  if (sangong_ == NULL) sangong_ = new ::net::sangong_table_info;
  return sangong_;
}
inline ::net::sangong_table_info* table_face_info::release_sangong() {
  clear_has_sangong();
  ::net::sangong_table_info* temp = sangong_;
  sangong_ = NULL;
  return temp;
}
inline void table_face_info::set_allocated_sangong(::net::sangong_table_info* sangong) {
  delete sangong_;
  sangong_ = sangong;
  if (sangong) {
    set_has_sangong();
  } else {
    clear_has_sangong();
  }
}

// optional .net.paijiu_table_info paijiu = 9;
inline bool table_face_info::has_paijiu() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void table_face_info::set_has_paijiu() {
  _has_bits_[0] |= 0x00000100u;
}
inline void table_face_info::clear_has_paijiu() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void table_face_info::clear_paijiu() {
  if (paijiu_ != NULL) paijiu_->::net::paijiu_table_info::Clear();
  clear_has_paijiu();
}
inline const ::net::paijiu_table_info& table_face_info::paijiu() const {
  return paijiu_ != NULL ? *paijiu_ : *default_instance_->paijiu_;
}
inline ::net::paijiu_table_info* table_face_info::mutable_paijiu() {
  set_has_paijiu();
  if (paijiu_ == NULL) paijiu_ = new ::net::paijiu_table_info;
  return paijiu_;
}
inline ::net::paijiu_table_info* table_face_info::release_paijiu() {
  clear_has_paijiu();
  ::net::paijiu_table_info* temp = paijiu_;
  paijiu_ = NULL;
  return temp;
}
inline void table_face_info::set_allocated_paijiu(::net::paijiu_table_info* paijiu) {
  delete paijiu_;
  paijiu_ = paijiu;
  if (paijiu) {
    set_has_paijiu();
  } else {
    clear_has_paijiu();
  }
}

// optional .net.everycolor_table_info everycolor = 10;
inline bool table_face_info::has_everycolor() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void table_face_info::set_has_everycolor() {
  _has_bits_[0] |= 0x00000200u;
}
inline void table_face_info::clear_has_everycolor() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void table_face_info::clear_everycolor() {
  if (everycolor_ != NULL) everycolor_->::net::everycolor_table_info::Clear();
  clear_has_everycolor();
}
inline const ::net::everycolor_table_info& table_face_info::everycolor() const {
  return everycolor_ != NULL ? *everycolor_ : *default_instance_->everycolor_;
}
inline ::net::everycolor_table_info* table_face_info::mutable_everycolor() {
  set_has_everycolor();
  if (everycolor_ == NULL) everycolor_ = new ::net::everycolor_table_info;
  return everycolor_;
}
inline ::net::everycolor_table_info* table_face_info::release_everycolor() {
  clear_has_everycolor();
  ::net::everycolor_table_info* temp = everycolor_;
  everycolor_ = NULL;
  return temp;
}
inline void table_face_info::set_allocated_everycolor(::net::everycolor_table_info* everycolor) {
  delete everycolor_;
  everycolor_ = everycolor;
  if (everycolor) {
    set_has_everycolor();
  } else {
    clear_has_everycolor();
  }
}

// optional .net.dice_table_info dice = 11;
inline bool table_face_info::has_dice() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void table_face_info::set_has_dice() {
  _has_bits_[0] |= 0x00000400u;
}
inline void table_face_info::clear_has_dice() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void table_face_info::clear_dice() {
  if (dice_ != NULL) dice_->::net::dice_table_info::Clear();
  clear_has_dice();
}
inline const ::net::dice_table_info& table_face_info::dice() const {
  return dice_ != NULL ? *dice_ : *default_instance_->dice_;
}
inline ::net::dice_table_info* table_face_info::mutable_dice() {
  set_has_dice();
  if (dice_ == NULL) dice_ = new ::net::dice_table_info;
  return dice_;
}
inline ::net::dice_table_info* table_face_info::release_dice() {
  clear_has_dice();
  ::net::dice_table_info* temp = dice_;
  dice_ = NULL;
  return temp;
}
inline void table_face_info::set_allocated_dice(::net::dice_table_info* dice) {
  delete dice_;
  dice_ = dice;
  if (dice) {
    set_has_dice();
  } else {
    clear_has_dice();
  }
}

// optional .net.majiang_table_info majiang = 12;
inline bool table_face_info::has_majiang() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void table_face_info::set_has_majiang() {
  _has_bits_[0] |= 0x00000800u;
}
inline void table_face_info::clear_has_majiang() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void table_face_info::clear_majiang() {
  if (majiang_ != NULL) majiang_->::net::majiang_table_info::Clear();
  clear_has_majiang();
}
inline const ::net::majiang_table_info& table_face_info::majiang() const {
  return majiang_ != NULL ? *majiang_ : *default_instance_->majiang_;
}
inline ::net::majiang_table_info* table_face_info::mutable_majiang() {
  set_has_majiang();
  if (majiang_ == NULL) majiang_ = new ::net::majiang_table_info;
  return majiang_;
}
inline ::net::majiang_table_info* table_face_info::release_majiang() {
  clear_has_majiang();
  ::net::majiang_table_info* temp = majiang_;
  majiang_ = NULL;
  return temp;
}
inline void table_face_info::set_allocated_majiang(::net::majiang_table_info* majiang) {
  delete majiang_;
  majiang_ = majiang;
  if (majiang) {
    set_has_majiang();
  } else {
    clear_has_majiang();
  }
}

// optional .net.slot_table_info slot = 13;
inline bool table_face_info::has_slot() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void table_face_info::set_has_slot() {
  _has_bits_[0] |= 0x00001000u;
}
inline void table_face_info::clear_has_slot() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void table_face_info::clear_slot() {
  if (slot_ != NULL) slot_->::net::slot_table_info::Clear();
  clear_has_slot();
}
inline const ::net::slot_table_info& table_face_info::slot() const {
  return slot_ != NULL ? *slot_ : *default_instance_->slot_;
}
inline ::net::slot_table_info* table_face_info::mutable_slot() {
  set_has_slot();
  if (slot_ == NULL) slot_ = new ::net::slot_table_info;
  return slot_;
}
inline ::net::slot_table_info* table_face_info::release_slot() {
  clear_has_slot();
  ::net::slot_table_info* temp = slot_;
  slot_ = NULL;
  return temp;
}
inline void table_face_info::set_allocated_slot(::net::slot_table_info* slot) {
  delete slot_;
  slot_ = slot;
  if (slot) {
    set_has_slot();
  } else {
    clear_has_slot();
  }
}

// optional .net.war_table_info war = 14;
inline bool table_face_info::has_war() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void table_face_info::set_has_war() {
  _has_bits_[0] |= 0x00002000u;
}
inline void table_face_info::clear_has_war() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void table_face_info::clear_war() {
  if (war_ != NULL) war_->::net::war_table_info::Clear();
  clear_has_war();
}
inline const ::net::war_table_info& table_face_info::war() const {
  return war_ != NULL ? *war_ : *default_instance_->war_;
}
inline ::net::war_table_info* table_face_info::mutable_war() {
  set_has_war();
  if (war_ == NULL) war_ = new ::net::war_table_info;
  return war_;
}
inline ::net::war_table_info* table_face_info::release_war() {
  clear_has_war();
  ::net::war_table_info* temp = war_;
  war_ = NULL;
  return temp;
}
inline void table_face_info::set_allocated_war(::net::war_table_info* war) {
  delete war_;
  war_ = war;
  if (war) {
    set_has_war();
  } else {
    clear_has_war();
  }
}

// optional .net.fight_table_info fight = 15;
inline bool table_face_info::has_fight() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void table_face_info::set_has_fight() {
  _has_bits_[0] |= 0x00004000u;
}
inline void table_face_info::clear_has_fight() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void table_face_info::clear_fight() {
  if (fight_ != NULL) fight_->::net::fight_table_info::Clear();
  clear_has_fight();
}
inline const ::net::fight_table_info& table_face_info::fight() const {
  return fight_ != NULL ? *fight_ : *default_instance_->fight_;
}
inline ::net::fight_table_info* table_face_info::mutable_fight() {
  set_has_fight();
  if (fight_ == NULL) fight_ = new ::net::fight_table_info;
  return fight_;
}
inline ::net::fight_table_info* table_face_info::release_fight() {
  clear_has_fight();
  ::net::fight_table_info* temp = fight_;
  fight_ = NULL;
  return temp;
}
inline void table_face_info::set_allocated_fight(::net::fight_table_info* fight) {
  delete fight_;
  fight_ = fight;
  if (fight) {
    set_has_fight();
  } else {
    clear_has_fight();
  }
}

// optional .net.robniu_table_info robniu = 16;
inline bool table_face_info::has_robniu() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void table_face_info::set_has_robniu() {
  _has_bits_[0] |= 0x00008000u;
}
inline void table_face_info::clear_has_robniu() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void table_face_info::clear_robniu() {
  if (robniu_ != NULL) robniu_->::net::robniu_table_info::Clear();
  clear_has_robniu();
}
inline const ::net::robniu_table_info& table_face_info::robniu() const {
  return robniu_ != NULL ? *robniu_ : *default_instance_->robniu_;
}
inline ::net::robniu_table_info* table_face_info::mutable_robniu() {
  set_has_robniu();
  if (robniu_ == NULL) robniu_ = new ::net::robniu_table_info;
  return robniu_;
}
inline ::net::robniu_table_info* table_face_info::release_robniu() {
  clear_has_robniu();
  ::net::robniu_table_info* temp = robniu_;
  robniu_ = NULL;
  return temp;
}
inline void table_face_info::set_allocated_robniu(::net::robniu_table_info* robniu) {
  delete robniu_;
  robniu_ = robniu;
  if (robniu) {
    set_has_robniu();
  } else {
    clear_has_robniu();
  }
}

// optional .net.fishing_table_info fishing = 17;
inline bool table_face_info::has_fishing() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void table_face_info::set_has_fishing() {
  _has_bits_[0] |= 0x00010000u;
}
inline void table_face_info::clear_has_fishing() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void table_face_info::clear_fishing() {
  if (fishing_ != NULL) fishing_->::net::fishing_table_info::Clear();
  clear_has_fishing();
}
inline const ::net::fishing_table_info& table_face_info::fishing() const {
  return fishing_ != NULL ? *fishing_ : *default_instance_->fishing_;
}
inline ::net::fishing_table_info* table_face_info::mutable_fishing() {
  set_has_fishing();
  if (fishing_ == NULL) fishing_ = new ::net::fishing_table_info;
  return fishing_;
}
inline ::net::fishing_table_info* table_face_info::release_fishing() {
  clear_has_fishing();
  ::net::fishing_table_info* temp = fishing_;
  fishing_ = NULL;
  return temp;
}
inline void table_face_info::set_allocated_fishing(::net::fishing_table_info* fishing) {
  delete fishing_;
  fishing_ = fishing;
  if (fishing) {
    set_has_fishing();
  } else {
    clear_has_fishing();
  }
}

// optional .net.twoeight_table_info twoeight = 18;
inline bool table_face_info::has_twoeight() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void table_face_info::set_has_twoeight() {
  _has_bits_[0] |= 0x00020000u;
}
inline void table_face_info::clear_has_twoeight() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void table_face_info::clear_twoeight() {
  if (twoeight_ != NULL) twoeight_->::net::twoeight_table_info::Clear();
  clear_has_twoeight();
}
inline const ::net::twoeight_table_info& table_face_info::twoeight() const {
  return twoeight_ != NULL ? *twoeight_ : *default_instance_->twoeight_;
}
inline ::net::twoeight_table_info* table_face_info::mutable_twoeight() {
  set_has_twoeight();
  if (twoeight_ == NULL) twoeight_ = new ::net::twoeight_table_info;
  return twoeight_;
}
inline ::net::twoeight_table_info* table_face_info::release_twoeight() {
  clear_has_twoeight();
  ::net::twoeight_table_info* temp = twoeight_;
  twoeight_ = NULL;
  return temp;
}
inline void table_face_info::set_allocated_twoeight(::net::twoeight_table_info* twoeight) {
  delete twoeight_;
  twoeight_ = twoeight;
  if (twoeight) {
    set_has_twoeight();
  } else {
    clear_has_twoeight();
  }
}

// -------------------------------------------------------------------

// fishing_table_info

// optional uint32 tableid = 1;
inline bool fishing_table_info::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void fishing_table_info::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void fishing_table_info::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void fishing_table_info::clear_tableid() {
  tableid_ = 0u;
  clear_has_tableid();
}
inline ::google::protobuf::uint32 fishing_table_info::tableid() const {
  return tableid_;
}
inline void fishing_table_info::set_tableid(::google::protobuf::uint32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional bytes tablename = 2;
inline bool fishing_table_info::has_tablename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void fishing_table_info::set_has_tablename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void fishing_table_info::clear_has_tablename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void fishing_table_info::clear_tablename() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    tablename_->clear();
  }
  clear_has_tablename();
}
inline const ::std::string& fishing_table_info::tablename() const {
  return *tablename_;
}
inline void fishing_table_info::set_tablename(const ::std::string& value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
}
inline void fishing_table_info::set_tablename(const char* value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
}
inline void fishing_table_info::set_tablename(const void* value, size_t size) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* fishing_table_info::mutable_tablename() {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  return tablename_;
}
inline ::std::string* fishing_table_info::release_tablename() {
  clear_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tablename_;
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void fishing_table_info::set_allocated_tablename(::std::string* tablename) {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (tablename) {
    set_has_tablename();
    tablename_ = tablename;
  } else {
    clear_has_tablename();
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 basescore = 3;
inline bool fishing_table_info::has_basescore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void fishing_table_info::set_has_basescore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void fishing_table_info::clear_has_basescore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void fishing_table_info::clear_basescore() {
  basescore_ = GOOGLE_LONGLONG(0);
  clear_has_basescore();
}
inline ::google::protobuf::int64 fishing_table_info::basescore() const {
  return basescore_;
}
inline void fishing_table_info::set_basescore(::google::protobuf::int64 value) {
  set_has_basescore();
  basescore_ = value;
}

// optional uint32 consume = 4;
inline bool fishing_table_info::has_consume() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void fishing_table_info::set_has_consume() {
  _has_bits_[0] |= 0x00000008u;
}
inline void fishing_table_info::clear_has_consume() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void fishing_table_info::clear_consume() {
  consume_ = 0u;
  clear_has_consume();
}
inline ::google::protobuf::uint32 fishing_table_info::consume() const {
  return consume_;
}
inline void fishing_table_info::set_consume(::google::protobuf::uint32 value) {
  set_has_consume();
  consume_ = value;
}

// optional uint64 entermin = 5;
inline bool fishing_table_info::has_entermin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void fishing_table_info::set_has_entermin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void fishing_table_info::clear_has_entermin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void fishing_table_info::clear_entermin() {
  entermin_ = GOOGLE_ULONGLONG(0);
  clear_has_entermin();
}
inline ::google::protobuf::uint64 fishing_table_info::entermin() const {
  return entermin_;
}
inline void fishing_table_info::set_entermin(::google::protobuf::uint64 value) {
  set_has_entermin();
  entermin_ = value;
}

// optional uint64 maplevel = 6;
inline bool fishing_table_info::has_maplevel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void fishing_table_info::set_has_maplevel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void fishing_table_info::clear_has_maplevel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void fishing_table_info::clear_maplevel() {
  maplevel_ = GOOGLE_ULONGLONG(0);
  clear_has_maplevel();
}
inline ::google::protobuf::uint64 fishing_table_info::maplevel() const {
  return maplevel_;
}
inline void fishing_table_info::set_maplevel(::google::protobuf::uint64 value) {
  set_has_maplevel();
  maplevel_ = value;
}

// optional uint32 table_state = 7;
inline bool fishing_table_info::has_table_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void fishing_table_info::set_has_table_state() {
  _has_bits_[0] |= 0x00000040u;
}
inline void fishing_table_info::clear_has_table_state() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void fishing_table_info::clear_table_state() {
  table_state_ = 0u;
  clear_has_table_state();
}
inline ::google::protobuf::uint32 fishing_table_info::table_state() const {
  return table_state_;
}
inline void fishing_table_info::set_table_state(::google::protobuf::uint32 value) {
  set_has_table_state();
  table_state_ = value;
}

// -------------------------------------------------------------------

// twoeight_table_info

// optional uint32 tableid = 1;
inline bool twoeight_table_info::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void twoeight_table_info::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void twoeight_table_info::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void twoeight_table_info::clear_tableid() {
  tableid_ = 0u;
  clear_has_tableid();
}
inline ::google::protobuf::uint32 twoeight_table_info::tableid() const {
  return tableid_;
}
inline void twoeight_table_info::set_tableid(::google::protobuf::uint32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional bytes tablename = 2;
inline bool twoeight_table_info::has_tablename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void twoeight_table_info::set_has_tablename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void twoeight_table_info::clear_has_tablename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void twoeight_table_info::clear_tablename() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    tablename_->clear();
  }
  clear_has_tablename();
}
inline const ::std::string& twoeight_table_info::tablename() const {
  return *tablename_;
}
inline void twoeight_table_info::set_tablename(const ::std::string& value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
}
inline void twoeight_table_info::set_tablename(const char* value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
}
inline void twoeight_table_info::set_tablename(const void* value, size_t size) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* twoeight_table_info::mutable_tablename() {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  return tablename_;
}
inline ::std::string* twoeight_table_info::release_tablename() {
  clear_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tablename_;
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void twoeight_table_info::set_allocated_tablename(::std::string* tablename) {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (tablename) {
    set_has_tablename();
    tablename_ = tablename;
  } else {
    clear_has_tablename();
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 is_passwd = 3;
inline bool twoeight_table_info::has_is_passwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void twoeight_table_info::set_has_is_passwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void twoeight_table_info::clear_has_is_passwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void twoeight_table_info::clear_is_passwd() {
  is_passwd_ = 0u;
  clear_has_is_passwd();
}
inline ::google::protobuf::uint32 twoeight_table_info::is_passwd() const {
  return is_passwd_;
}
inline void twoeight_table_info::set_is_passwd(::google::protobuf::uint32 value) {
  set_has_is_passwd();
  is_passwd_ = value;
}

// optional int64 basescore = 4;
inline bool twoeight_table_info::has_basescore() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void twoeight_table_info::set_has_basescore() {
  _has_bits_[0] |= 0x00000008u;
}
inline void twoeight_table_info::clear_has_basescore() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void twoeight_table_info::clear_basescore() {
  basescore_ = GOOGLE_LONGLONG(0);
  clear_has_basescore();
}
inline ::google::protobuf::int64 twoeight_table_info::basescore() const {
  return basescore_;
}
inline void twoeight_table_info::set_basescore(::google::protobuf::int64 value) {
  set_has_basescore();
  basescore_ = value;
}

// optional uint32 consume = 5;
inline bool twoeight_table_info::has_consume() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void twoeight_table_info::set_has_consume() {
  _has_bits_[0] |= 0x00000010u;
}
inline void twoeight_table_info::clear_has_consume() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void twoeight_table_info::clear_consume() {
  consume_ = 0u;
  clear_has_consume();
}
inline ::google::protobuf::uint32 twoeight_table_info::consume() const {
  return consume_;
}
inline void twoeight_table_info::set_consume(::google::protobuf::uint32 value) {
  set_has_consume();
  consume_ = value;
}

// optional uint64 entermin = 6;
inline bool twoeight_table_info::has_entermin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void twoeight_table_info::set_has_entermin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void twoeight_table_info::clear_has_entermin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void twoeight_table_info::clear_entermin() {
  entermin_ = GOOGLE_ULONGLONG(0);
  clear_has_entermin();
}
inline ::google::protobuf::uint64 twoeight_table_info::entermin() const {
  return entermin_;
}
inline void twoeight_table_info::set_entermin(::google::protobuf::uint64 value) {
  set_has_entermin();
  entermin_ = value;
}

// optional uint32 duetime = 7;
inline bool twoeight_table_info::has_duetime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void twoeight_table_info::set_has_duetime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void twoeight_table_info::clear_has_duetime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void twoeight_table_info::clear_duetime() {
  duetime_ = 0u;
  clear_has_duetime();
}
inline ::google::protobuf::uint32 twoeight_table_info::duetime() const {
  return duetime_;
}
inline void twoeight_table_info::set_duetime(::google::protobuf::uint32 value) {
  set_has_duetime();
  duetime_ = value;
}

// optional uint32 feetype = 8;
inline bool twoeight_table_info::has_feetype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void twoeight_table_info::set_has_feetype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void twoeight_table_info::clear_has_feetype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void twoeight_table_info::clear_feetype() {
  feetype_ = 0u;
  clear_has_feetype();
}
inline ::google::protobuf::uint32 twoeight_table_info::feetype() const {
  return feetype_;
}
inline void twoeight_table_info::set_feetype(::google::protobuf::uint32 value) {
  set_has_feetype();
  feetype_ = value;
}

// optional int64 feevalue = 9;
inline bool twoeight_table_info::has_feevalue() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void twoeight_table_info::set_has_feevalue() {
  _has_bits_[0] |= 0x00000100u;
}
inline void twoeight_table_info::clear_has_feevalue() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void twoeight_table_info::clear_feevalue() {
  feevalue_ = GOOGLE_LONGLONG(0);
  clear_has_feevalue();
}
inline ::google::protobuf::int64 twoeight_table_info::feevalue() const {
  return feevalue_;
}
inline void twoeight_table_info::set_feevalue(::google::protobuf::int64 value) {
  set_has_feevalue();
  feevalue_ = value;
}

// optional bytes hostname = 10;
inline bool twoeight_table_info::has_hostname() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void twoeight_table_info::set_has_hostname() {
  _has_bits_[0] |= 0x00000200u;
}
inline void twoeight_table_info::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void twoeight_table_info::clear_hostname() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    hostname_->clear();
  }
  clear_has_hostname();
}
inline const ::std::string& twoeight_table_info::hostname() const {
  return *hostname_;
}
inline void twoeight_table_info::set_hostname(const ::std::string& value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void twoeight_table_info::set_hostname(const char* value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void twoeight_table_info::set_hostname(const void* value, size_t size) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* twoeight_table_info::mutable_hostname() {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  return hostname_;
}
inline ::std::string* twoeight_table_info::release_hostname() {
  clear_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hostname_;
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void twoeight_table_info::set_allocated_hostname(::std::string* hostname) {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (hostname) {
    set_has_hostname();
    hostname_ = hostname;
  } else {
    clear_has_hostname();
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 card_time = 11;
inline bool twoeight_table_info::has_card_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void twoeight_table_info::set_has_card_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void twoeight_table_info::clear_has_card_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void twoeight_table_info::clear_card_time() {
  card_time_ = 0u;
  clear_has_card_time();
}
inline ::google::protobuf::uint32 twoeight_table_info::card_time() const {
  return card_time_;
}
inline void twoeight_table_info::set_card_time(::google::protobuf::uint32 value) {
  set_has_card_time();
  card_time_ = value;
}

// optional uint32 table_state = 12;
inline bool twoeight_table_info::has_table_state() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void twoeight_table_info::set_has_table_state() {
  _has_bits_[0] |= 0x00000800u;
}
inline void twoeight_table_info::clear_has_table_state() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void twoeight_table_info::clear_table_state() {
  table_state_ = 0u;
  clear_has_table_state();
}
inline ::google::protobuf::uint32 twoeight_table_info::table_state() const {
  return table_state_;
}
inline void twoeight_table_info::set_table_state(::google::protobuf::uint32 value) {
  set_has_table_state();
  table_state_ = value;
}

// optional int64 sitdown = 13;
inline bool twoeight_table_info::has_sitdown() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void twoeight_table_info::set_has_sitdown() {
  _has_bits_[0] |= 0x00001000u;
}
inline void twoeight_table_info::clear_has_sitdown() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void twoeight_table_info::clear_sitdown() {
  sitdown_ = GOOGLE_LONGLONG(0);
  clear_has_sitdown();
}
inline ::google::protobuf::int64 twoeight_table_info::sitdown() const {
  return sitdown_;
}
inline void twoeight_table_info::set_sitdown(::google::protobuf::int64 value) {
  set_has_sitdown();
  sitdown_ = value;
}

// optional int64 apply_banker_condition = 14;
inline bool twoeight_table_info::has_apply_banker_condition() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void twoeight_table_info::set_has_apply_banker_condition() {
  _has_bits_[0] |= 0x00002000u;
}
inline void twoeight_table_info::clear_has_apply_banker_condition() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void twoeight_table_info::clear_apply_banker_condition() {
  apply_banker_condition_ = GOOGLE_LONGLONG(0);
  clear_has_apply_banker_condition();
}
inline ::google::protobuf::int64 twoeight_table_info::apply_banker_condition() const {
  return apply_banker_condition_;
}
inline void twoeight_table_info::set_apply_banker_condition(::google::protobuf::int64 value) {
  set_has_apply_banker_condition();
  apply_banker_condition_ = value;
}

// optional int64 apply_banker_maxscore = 15;
inline bool twoeight_table_info::has_apply_banker_maxscore() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void twoeight_table_info::set_has_apply_banker_maxscore() {
  _has_bits_[0] |= 0x00004000u;
}
inline void twoeight_table_info::clear_has_apply_banker_maxscore() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void twoeight_table_info::clear_apply_banker_maxscore() {
  apply_banker_maxscore_ = GOOGLE_LONGLONG(0);
  clear_has_apply_banker_maxscore();
}
inline ::google::protobuf::int64 twoeight_table_info::apply_banker_maxscore() const {
  return apply_banker_maxscore_;
}
inline void twoeight_table_info::set_apply_banker_maxscore(::google::protobuf::int64 value) {
  set_has_apply_banker_maxscore();
  apply_banker_maxscore_ = value;
}

// optional uint32 banker_max_time = 16;
inline bool twoeight_table_info::has_banker_max_time() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void twoeight_table_info::set_has_banker_max_time() {
  _has_bits_[0] |= 0x00008000u;
}
inline void twoeight_table_info::clear_has_banker_max_time() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void twoeight_table_info::clear_banker_max_time() {
  banker_max_time_ = 0u;
  clear_has_banker_max_time();
}
inline ::google::protobuf::uint32 twoeight_table_info::banker_max_time() const {
  return banker_max_time_;
}
inline void twoeight_table_info::set_banker_max_time(::google::protobuf::uint32 value) {
  set_has_banker_max_time();
  banker_max_time_ = value;
}

// optional uint32 max_jetton_rate = 17;
inline bool twoeight_table_info::has_max_jetton_rate() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void twoeight_table_info::set_has_max_jetton_rate() {
  _has_bits_[0] |= 0x00010000u;
}
inline void twoeight_table_info::clear_has_max_jetton_rate() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void twoeight_table_info::clear_max_jetton_rate() {
  max_jetton_rate_ = 0u;
  clear_has_max_jetton_rate();
}
inline ::google::protobuf::uint32 twoeight_table_info::max_jetton_rate() const {
  return max_jetton_rate_;
}
inline void twoeight_table_info::set_max_jetton_rate(::google::protobuf::uint32 value) {
  set_has_max_jetton_rate();
  max_jetton_rate_ = value;
}

// -------------------------------------------------------------------

// mission_data

// optional uint32 msid = 1;
inline bool mission_data::has_msid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mission_data::set_has_msid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mission_data::clear_has_msid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mission_data::clear_msid() {
  msid_ = 0u;
  clear_has_msid();
}
inline ::google::protobuf::uint32 mission_data::msid() const {
  return msid_;
}
inline void mission_data::set_msid(::google::protobuf::uint32 value) {
  set_has_msid();
  msid_ = value;
}

// optional uint32 rtimes = 2;
inline bool mission_data::has_rtimes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mission_data::set_has_rtimes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mission_data::clear_has_rtimes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mission_data::clear_rtimes() {
  rtimes_ = 0u;
  clear_has_rtimes();
}
inline ::google::protobuf::uint32 mission_data::rtimes() const {
  return rtimes_;
}
inline void mission_data::set_rtimes(::google::protobuf::uint32 value) {
  set_has_rtimes();
  rtimes_ = value;
}

// optional uint32 ctimes = 3;
inline bool mission_data::has_ctimes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mission_data::set_has_ctimes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mission_data::clear_has_ctimes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mission_data::clear_ctimes() {
  ctimes_ = 0u;
  clear_has_ctimes();
}
inline ::google::protobuf::uint32 mission_data::ctimes() const {
  return ctimes_;
}
inline void mission_data::set_ctimes(::google::protobuf::uint32 value) {
  set_has_ctimes();
  ctimes_ = value;
}

// optional uint32 cptime = 4;
inline bool mission_data::has_cptime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mission_data::set_has_cptime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mission_data::clear_has_cptime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mission_data::clear_cptime() {
  cptime_ = 0u;
  clear_has_cptime();
}
inline ::google::protobuf::uint32 mission_data::cptime() const {
  return cptime_;
}
inline void mission_data::set_cptime(::google::protobuf::uint32 value) {
  set_has_cptime();
  cptime_ = value;
}

// -------------------------------------------------------------------

// item

// optional uint32 item_id = 1;
inline bool item::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void item::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void item::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void item::clear_item_id() {
  item_id_ = 0u;
  clear_has_item_id();
}
inline ::google::protobuf::uint32 item::item_id() const {
  return item_id_;
}
inline void item::set_item_id(::google::protobuf::uint32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional uint32 item_num = 2;
inline bool item::has_item_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void item::set_has_item_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void item::clear_has_item_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void item::clear_item_num() {
  item_num_ = 0u;
  clear_has_item_num();
}
inline ::google::protobuf::uint32 item::item_num() const {
  return item_num_;
}
inline void item::set_item_num(::google::protobuf::uint32 value) {
  set_has_item_num();
  item_num_ = value;
}

// -------------------------------------------------------------------

// item_bag

// repeated .net.item items = 1;
inline int item_bag::items_size() const {
  return items_.size();
}
inline void item_bag::clear_items() {
  items_.Clear();
}
inline const ::net::item& item_bag::items(int index) const {
  return items_.Get(index);
}
inline ::net::item* item_bag::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::net::item* item_bag::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::net::item >&
item_bag::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::net::item >*
item_bag::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// msg_cards

// repeated uint32 cards = 1;
inline int msg_cards::cards_size() const {
  return cards_.size();
}
inline void msg_cards::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::uint32 msg_cards::cards(int index) const {
  return cards_.Get(index);
}
inline void msg_cards::set_cards(int index, ::google::protobuf::uint32 value) {
  cards_.Set(index, value);
}
inline void msg_cards::add_cards(::google::protobuf::uint32 value) {
  cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
msg_cards::cards() const {
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
msg_cards::mutable_cards() {
  return &cards_;
}

// -------------------------------------------------------------------

// player_num

// optional uint32 svrid = 1;
inline bool player_num::has_svrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void player_num::set_has_svrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void player_num::clear_has_svrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void player_num::clear_svrid() {
  svrid_ = 0u;
  clear_has_svrid();
}
inline ::google::protobuf::uint32 player_num::svrid() const {
  return svrid_;
}
inline void player_num::set_svrid(::google::protobuf::uint32 value) {
  set_has_svrid();
  svrid_ = value;
}

// optional uint32 players = 2;
inline bool player_num::has_players() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void player_num::set_has_players() {
  _has_bits_[0] |= 0x00000002u;
}
inline void player_num::clear_has_players() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void player_num::clear_players() {
  players_ = 0u;
  clear_has_players();
}
inline ::google::protobuf::uint32 player_num::players() const {
  return players_;
}
inline void player_num::set_players(::google::protobuf::uint32 value) {
  set_has_players();
  players_ = value;
}

// optional uint32 robots = 3;
inline bool player_num::has_robots() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void player_num::set_has_robots() {
  _has_bits_[0] |= 0x00000004u;
}
inline void player_num::clear_has_robots() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void player_num::clear_robots() {
  robots_ = 0u;
  clear_has_robots();
}
inline ::google::protobuf::uint32 player_num::robots() const {
  return robots_;
}
inline void player_num::set_robots(::google::protobuf::uint32 value) {
  set_has_robots();
  robots_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace net

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_base_5fmsg_5fstruct_2eproto__INCLUDED
