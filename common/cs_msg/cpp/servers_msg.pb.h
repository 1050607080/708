// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: servers_msg.proto

#ifndef PROTOBUF_servers_5fmsg_2eproto__INCLUDED
#define PROTOBUF_servers_5fmsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "base_msg_struct.pb.h"
#include "error_code.pb.h"
#include "dice_logic_msg.pb.h"
// @@protoc_insertion_point(includes)

namespace net {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_servers_5fmsg_2eproto();
void protobuf_AssignDesc_servers_5fmsg_2eproto();
void protobuf_ShutdownFile_servers_5fmsg_2eproto();

class msg_register_svr;
class msg_register_svr_rep;
class msg_report_svr_info;
class msg_leave_svr;
class msg_notify_net_state;
class msg_enter_into_game_svr;
class msg_notify_change_account_data;
class msg_update_lobby_change_account_data;
class msg_notify_change_playerinfo;
class msg_notify_stop_service;
class land_game_result;
class msg_report_game_result;
class msg_report_fee_log;
class msg_leave_robot;
class msg_flush_change_account_data;
class msg_update_change_account_data;
class msg_change_room_param;
class msg_contorl_player;
class msg_contorl_multi_player;
class msg_dice_control_req;
class msg_majiang_config_hand_card;
class msg_update_server_room_robot;
class msg_reload_robot_online_cfg;
class msg_update_new_player_novice_welfare_right;
class msg_update_new_player_novice_welfare_value;
class msg_register_dispatch;
class msg_register_dispatch_rep;
class msg_notify_gamesvrs_new_lobby;
class msg_retire_lobbysvr;
class msg_retire_gamesvr;
class msg_report_onlines;
class msg_broadcast_other_lobby;
class msg_broadcast_info;
class msg_stop_snatch_coin;
class msg_robot_snatch_coin;
class msg_auto_kill_user_cfg;
class msg_flush_active_welfare_cfg;
class msg_reset_active_welfare_info;
class msg_flush_new_register_welfare_cfg;
class msg_stop_conctrl_player;
class msg_syn_ctrl_user_cfg;
class msg_change_room_stock_cfg;
class msg_syn_lucky_cfg;
class msg_syn_fish_cfg;
class msg_reset_lucky_cfg;

// ===================================================================

class msg_register_svr : public ::google::protobuf::Message {
 public:
  msg_register_svr();
  virtual ~msg_register_svr();

  msg_register_svr(const msg_register_svr& from);

  inline msg_register_svr& operator=(const msg_register_svr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_register_svr& default_instance();

  void Swap(msg_register_svr* other);

  // implements Message ----------------------------------------------

  msg_register_svr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_register_svr& from);
  void MergeFrom(const msg_register_svr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrid = 1;
  inline bool has_svrid() const;
  inline void clear_svrid();
  static const int kSvridFieldNumber = 1;
  inline ::google::protobuf::uint32 svrid() const;
  inline void set_svrid(::google::protobuf::uint32 value);

  // optional uint32 game_type = 2;
  inline bool has_game_type() const;
  inline void clear_game_type();
  static const int kGameTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 game_type() const;
  inline void set_game_type(::google::protobuf::uint32 value);

  // optional uint32 robot = 3;
  inline bool has_robot() const;
  inline void clear_robot();
  static const int kRobotFieldNumber = 3;
  inline ::google::protobuf::uint32 robot() const;
  inline void set_robot(::google::protobuf::uint32 value);

  // optional uint32 game_subtype = 4;
  inline bool has_game_subtype() const;
  inline void clear_game_subtype();
  static const int kGameSubtypeFieldNumber = 4;
  inline ::google::protobuf::uint32 game_subtype() const;
  inline void set_game_subtype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_register_svr)
 private:
  inline void set_has_svrid();
  inline void clear_has_svrid();
  inline void set_has_game_type();
  inline void clear_has_game_type();
  inline void set_has_robot();
  inline void clear_has_robot();
  inline void set_has_game_subtype();
  inline void clear_has_game_subtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 svrid_;
  ::google::protobuf::uint32 game_type_;
  ::google::protobuf::uint32 robot_;
  ::google::protobuf::uint32 game_subtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_register_svr* default_instance_;
};
// -------------------------------------------------------------------

class msg_register_svr_rep : public ::google::protobuf::Message {
 public:
  msg_register_svr_rep();
  virtual ~msg_register_svr_rep();

  msg_register_svr_rep(const msg_register_svr_rep& from);

  inline msg_register_svr_rep& operator=(const msg_register_svr_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_register_svr_rep& default_instance();

  void Swap(msg_register_svr_rep* other);

  // implements Message ----------------------------------------------

  msg_register_svr_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_register_svr_rep& from);
  void MergeFrom(const msg_register_svr_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_register_svr_rep)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_register_svr_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_report_svr_info : public ::google::protobuf::Message {
 public:
  msg_report_svr_info();
  virtual ~msg_report_svr_info();

  msg_report_svr_info(const msg_report_svr_info& from);

  inline msg_report_svr_info& operator=(const msg_report_svr_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_report_svr_info& default_instance();

  void Swap(msg_report_svr_info* other);

  // implements Message ----------------------------------------------

  msg_report_svr_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_report_svr_info& from);
  void MergeFrom(const msg_report_svr_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 onlines = 1;
  inline bool has_onlines() const;
  inline void clear_onlines();
  static const int kOnlinesFieldNumber = 1;
  inline ::google::protobuf::uint32 onlines() const;
  inline void set_onlines(::google::protobuf::uint32 value);

  // optional uint32 robots = 2;
  inline bool has_robots() const;
  inline void clear_robots();
  static const int kRobotsFieldNumber = 2;
  inline ::google::protobuf::uint32 robots() const;
  inline void set_robots(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_report_svr_info)
 private:
  inline void set_has_onlines();
  inline void clear_has_onlines();
  inline void set_has_robots();
  inline void clear_has_robots();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 onlines_;
  ::google::protobuf::uint32 robots_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_report_svr_info* default_instance_;
};
// -------------------------------------------------------------------

class msg_leave_svr : public ::google::protobuf::Message {
 public:
  msg_leave_svr();
  virtual ~msg_leave_svr();

  msg_leave_svr(const msg_leave_svr& from);

  inline msg_leave_svr& operator=(const msg_leave_svr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_leave_svr& default_instance();

  void Swap(msg_leave_svr* other);

  // implements Message ----------------------------------------------

  msg_leave_svr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_leave_svr& from);
  void MergeFrom(const msg_leave_svr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 goto_svr = 2;
  inline bool has_goto_svr() const;
  inline void clear_goto_svr();
  static const int kGotoSvrFieldNumber = 2;
  inline ::google::protobuf::uint32 goto_svr() const;
  inline void set_goto_svr(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_leave_svr)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_goto_svr();
  inline void clear_has_goto_svr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 goto_svr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_leave_svr* default_instance_;
};
// -------------------------------------------------------------------

class msg_notify_net_state : public ::google::protobuf::Message {
 public:
  msg_notify_net_state();
  virtual ~msg_notify_net_state();

  msg_notify_net_state(const msg_notify_net_state& from);

  inline msg_notify_net_state& operator=(const msg_notify_net_state& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_notify_net_state& default_instance();

  void Swap(msg_notify_net_state* other);

  // implements Message ----------------------------------------------

  msg_notify_net_state* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_notify_net_state& from);
  void MergeFrom(const msg_notify_net_state& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_notify_net_state)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_notify_net_state* default_instance_;
};
// -------------------------------------------------------------------

class msg_enter_into_game_svr : public ::google::protobuf::Message {
 public:
  msg_enter_into_game_svr();
  virtual ~msg_enter_into_game_svr();

  msg_enter_into_game_svr(const msg_enter_into_game_svr& from);

  inline msg_enter_into_game_svr& operator=(const msg_enter_into_game_svr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_enter_into_game_svr& default_instance();

  void Swap(msg_enter_into_game_svr* other);

  // implements Message ----------------------------------------------

  msg_enter_into_game_svr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_enter_into_game_svr& from);
  void MergeFrom(const msg_enter_into_game_svr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 player_type = 1;
  inline bool has_player_type() const;
  inline void clear_player_type();
  static const int kPlayerTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 player_type() const;
  inline void set_player_type(::google::protobuf::uint32 value);

  // optional .net.base_info base_data = 2;
  inline bool has_base_data() const;
  inline void clear_base_data();
  static const int kBaseDataFieldNumber = 2;
  inline const ::net::base_info& base_data() const;
  inline ::net::base_info* mutable_base_data();
  inline ::net::base_info* release_base_data();
  inline void set_allocated_base_data(::net::base_info* base_data);

  // optional .net.game_data_info game_data = 3;
  inline bool has_game_data() const;
  inline void clear_game_data();
  static const int kGameDataFieldNumber = 3;
  inline const ::net::game_data_info& game_data() const;
  inline ::net::game_data_info* mutable_game_data();
  inline ::net::game_data_info* release_game_data();
  inline void set_allocated_game_data(::net::game_data_info* game_data);

  // optional uint32 ctrl_flag = 4;
  inline bool has_ctrl_flag() const;
  inline void clear_ctrl_flag();
  static const int kCtrlFlagFieldNumber = 4;
  inline ::google::protobuf::uint32 ctrl_flag() const;
  inline void set_ctrl_flag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_enter_into_game_svr)
 private:
  inline void set_has_player_type();
  inline void clear_has_player_type();
  inline void set_has_base_data();
  inline void clear_has_base_data();
  inline void set_has_game_data();
  inline void clear_has_game_data();
  inline void set_has_ctrl_flag();
  inline void clear_has_ctrl_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::net::base_info* base_data_;
  ::google::protobuf::uint32 player_type_;
  ::google::protobuf::uint32 ctrl_flag_;
  ::net::game_data_info* game_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_enter_into_game_svr* default_instance_;
};
// -------------------------------------------------------------------

class msg_notify_change_account_data : public ::google::protobuf::Message {
 public:
  msg_notify_change_account_data();
  virtual ~msg_notify_change_account_data();

  msg_notify_change_account_data(const msg_notify_change_account_data& from);

  inline msg_notify_change_account_data& operator=(const msg_notify_change_account_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_notify_change_account_data& default_instance();

  void Swap(msg_notify_change_account_data* other);

  // implements Message ----------------------------------------------

  msg_notify_change_account_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_notify_change_account_data& from);
  void MergeFrom(const msg_notify_change_account_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional int64 diamond = 2;
  inline bool has_diamond() const;
  inline void clear_diamond();
  static const int kDiamondFieldNumber = 2;
  inline ::google::protobuf::int64 diamond() const;
  inline void set_diamond(::google::protobuf::int64 value);

  // optional int64 coin = 3;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 3;
  inline ::google::protobuf::int64 coin() const;
  inline void set_coin(::google::protobuf::int64 value);

  // optional int64 score = 4;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 4;
  inline ::google::protobuf::int64 score() const;
  inline void set_score(::google::protobuf::int64 value);

  // optional int64 ingot = 5;
  inline bool has_ingot() const;
  inline void clear_ingot();
  static const int kIngotFieldNumber = 5;
  inline ::google::protobuf::int64 ingot() const;
  inline void set_ingot(::google::protobuf::int64 value);

  // optional int64 cvalue = 6;
  inline bool has_cvalue() const;
  inline void clear_cvalue();
  static const int kCvalueFieldNumber = 6;
  inline ::google::protobuf::int64 cvalue() const;
  inline void set_cvalue(::google::protobuf::int64 value);

  // optional uint32 oper_type = 7;
  inline bool has_oper_type() const;
  inline void clear_oper_type();
  static const int kOperTypeFieldNumber = 7;
  inline ::google::protobuf::uint32 oper_type() const;
  inline void set_oper_type(::google::protobuf::uint32 value);

  // optional uint32 sub_type = 8;
  inline bool has_sub_type() const;
  inline void clear_sub_type();
  static const int kSubTypeFieldNumber = 8;
  inline ::google::protobuf::uint32 sub_type() const;
  inline void set_sub_type(::google::protobuf::uint32 value);

  // optional int64 safe_coin = 9;
  inline bool has_safe_coin() const;
  inline void clear_safe_coin();
  static const int kSafeCoinFieldNumber = 9;
  inline ::google::protobuf::int64 safe_coin() const;
  inline void set_safe_coin(::google::protobuf::int64 value);

  // optional bytes chessid = 10;
  inline bool has_chessid() const;
  inline void clear_chessid();
  static const int kChessidFieldNumber = 10;
  inline const ::std::string& chessid() const;
  inline void set_chessid(const ::std::string& value);
  inline void set_chessid(const char* value);
  inline void set_chessid(const void* value, size_t size);
  inline ::std::string* mutable_chessid();
  inline ::std::string* release_chessid();
  inline void set_allocated_chessid(::std::string* chessid);

  // @@protoc_insertion_point(class_scope:net.msg_notify_change_account_data)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_diamond();
  inline void clear_has_diamond();
  inline void set_has_coin();
  inline void clear_has_coin();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_ingot();
  inline void clear_has_ingot();
  inline void set_has_cvalue();
  inline void clear_has_cvalue();
  inline void set_has_oper_type();
  inline void clear_has_oper_type();
  inline void set_has_sub_type();
  inline void clear_has_sub_type();
  inline void set_has_safe_coin();
  inline void clear_has_safe_coin();
  inline void set_has_chessid();
  inline void clear_has_chessid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 diamond_;
  ::google::protobuf::int64 coin_;
  ::google::protobuf::int64 score_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 oper_type_;
  ::google::protobuf::int64 ingot_;
  ::google::protobuf::int64 cvalue_;
  ::google::protobuf::int64 safe_coin_;
  ::std::string* chessid_;
  ::google::protobuf::uint32 sub_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_notify_change_account_data* default_instance_;
};
// -------------------------------------------------------------------

class msg_update_lobby_change_account_data : public ::google::protobuf::Message {
 public:
  msg_update_lobby_change_account_data();
  virtual ~msg_update_lobby_change_account_data();

  msg_update_lobby_change_account_data(const msg_update_lobby_change_account_data& from);

  inline msg_update_lobby_change_account_data& operator=(const msg_update_lobby_change_account_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_update_lobby_change_account_data& default_instance();

  void Swap(msg_update_lobby_change_account_data* other);

  // implements Message ----------------------------------------------

  msg_update_lobby_change_account_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_update_lobby_change_account_data& from);
  void MergeFrom(const msg_update_lobby_change_account_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional int64 diamond = 2;
  inline bool has_diamond() const;
  inline void clear_diamond();
  static const int kDiamondFieldNumber = 2;
  inline ::google::protobuf::int64 diamond() const;
  inline void set_diamond(::google::protobuf::int64 value);

  // optional int64 coin = 3;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 3;
  inline ::google::protobuf::int64 coin() const;
  inline void set_coin(::google::protobuf::int64 value);

  // optional int64 score = 4;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 4;
  inline ::google::protobuf::int64 score() const;
  inline void set_score(::google::protobuf::int64 value);

  // optional int64 ingot = 5;
  inline bool has_ingot() const;
  inline void clear_ingot();
  static const int kIngotFieldNumber = 5;
  inline ::google::protobuf::int64 ingot() const;
  inline void set_ingot(::google::protobuf::int64 value);

  // optional int64 cvalue = 6;
  inline bool has_cvalue() const;
  inline void clear_cvalue();
  static const int kCvalueFieldNumber = 6;
  inline ::google::protobuf::int64 cvalue() const;
  inline void set_cvalue(::google::protobuf::int64 value);

  // optional uint32 oper_type = 7;
  inline bool has_oper_type() const;
  inline void clear_oper_type();
  static const int kOperTypeFieldNumber = 7;
  inline ::google::protobuf::uint32 oper_type() const;
  inline void set_oper_type(::google::protobuf::uint32 value);

  // optional uint32 sub_type = 8;
  inline bool has_sub_type() const;
  inline void clear_sub_type();
  static const int kSubTypeFieldNumber = 8;
  inline ::google::protobuf::uint32 sub_type() const;
  inline void set_sub_type(::google::protobuf::uint32 value);

  // optional int64 safe_coin = 9;
  inline bool has_safe_coin() const;
  inline void clear_safe_coin();
  static const int kSafeCoinFieldNumber = 9;
  inline ::google::protobuf::int64 safe_coin() const;
  inline void set_safe_coin(::google::protobuf::int64 value);

  // optional bytes chessid = 10;
  inline bool has_chessid() const;
  inline void clear_chessid();
  static const int kChessidFieldNumber = 10;
  inline const ::std::string& chessid() const;
  inline void set_chessid(const ::std::string& value);
  inline void set_chessid(const char* value);
  inline void set_chessid(const void* value, size_t size);
  inline ::std::string* mutable_chessid();
  inline ::std::string* release_chessid();
  inline void set_allocated_chessid(::std::string* chessid);

  // @@protoc_insertion_point(class_scope:net.msg_update_lobby_change_account_data)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_diamond();
  inline void clear_has_diamond();
  inline void set_has_coin();
  inline void clear_has_coin();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_ingot();
  inline void clear_has_ingot();
  inline void set_has_cvalue();
  inline void clear_has_cvalue();
  inline void set_has_oper_type();
  inline void clear_has_oper_type();
  inline void set_has_sub_type();
  inline void clear_has_sub_type();
  inline void set_has_safe_coin();
  inline void clear_has_safe_coin();
  inline void set_has_chessid();
  inline void clear_has_chessid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 diamond_;
  ::google::protobuf::int64 coin_;
  ::google::protobuf::int64 score_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 oper_type_;
  ::google::protobuf::int64 ingot_;
  ::google::protobuf::int64 cvalue_;
  ::google::protobuf::int64 safe_coin_;
  ::std::string* chessid_;
  ::google::protobuf::uint32 sub_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_update_lobby_change_account_data* default_instance_;
};
// -------------------------------------------------------------------

class msg_notify_change_playerinfo : public ::google::protobuf::Message {
 public:
  msg_notify_change_playerinfo();
  virtual ~msg_notify_change_playerinfo();

  msg_notify_change_playerinfo(const msg_notify_change_playerinfo& from);

  inline msg_notify_change_playerinfo& operator=(const msg_notify_change_playerinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_notify_change_playerinfo& default_instance();

  void Swap(msg_notify_change_playerinfo* other);

  // implements Message ----------------------------------------------

  msg_notify_change_playerinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_notify_change_playerinfo& from);
  void MergeFrom(const msg_notify_change_playerinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 safebox = 1;
  inline bool has_safebox() const;
  inline void clear_safebox();
  static const int kSafeboxFieldNumber = 1;
  inline ::google::protobuf::uint32 safebox() const;
  inline void set_safebox(::google::protobuf::uint32 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:net.msg_notify_change_playerinfo)
 private:
  inline void set_has_safebox();
  inline void clear_has_safebox();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 safebox_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_notify_change_playerinfo* default_instance_;
};
// -------------------------------------------------------------------

class msg_notify_stop_service : public ::google::protobuf::Message {
 public:
  msg_notify_stop_service();
  virtual ~msg_notify_stop_service();

  msg_notify_stop_service(const msg_notify_stop_service& from);

  inline msg_notify_stop_service& operator=(const msg_notify_stop_service& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_notify_stop_service& default_instance();

  void Swap(msg_notify_stop_service* other);

  // implements Message ----------------------------------------------

  msg_notify_stop_service* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_notify_stop_service& from);
  void MergeFrom(const msg_notify_stop_service& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 btime = 1;
  inline bool has_btime() const;
  inline void clear_btime();
  static const int kBtimeFieldNumber = 1;
  inline ::google::protobuf::uint32 btime() const;
  inline void set_btime(::google::protobuf::uint32 value);

  // optional uint32 etime = 2;
  inline bool has_etime() const;
  inline void clear_etime();
  static const int kEtimeFieldNumber = 2;
  inline ::google::protobuf::uint32 etime() const;
  inline void set_etime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_notify_stop_service)
 private:
  inline void set_has_btime();
  inline void clear_has_btime();
  inline void set_has_etime();
  inline void clear_has_etime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 btime_;
  ::google::protobuf::uint32 etime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_notify_stop_service* default_instance_;
};
// -------------------------------------------------------------------

class land_game_result : public ::google::protobuf::Message {
 public:
  land_game_result();
  virtual ~land_game_result();

  land_game_result(const land_game_result& from);

  inline land_game_result& operator=(const land_game_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const land_game_result& default_instance();

  void Swap(land_game_result* other);

  // implements Message ----------------------------------------------

  land_game_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const land_game_result& from);
  void MergeFrom(const land_game_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 is_spring = 1;
  inline bool has_is_spring() const;
  inline void clear_is_spring();
  static const int kIsSpringFieldNumber = 1;
  inline ::google::protobuf::uint32 is_spring() const;
  inline void set_is_spring(::google::protobuf::uint32 value);

  // optional uint32 is_land = 2;
  inline bool has_is_land() const;
  inline void clear_is_land();
  static const int kIsLandFieldNumber = 2;
  inline ::google::protobuf::uint32 is_land() const;
  inline void set_is_land(::google::protobuf::uint32 value);

  // optional uint32 deal = 3;
  inline bool has_deal() const;
  inline void clear_deal();
  static const int kDealFieldNumber = 3;
  inline ::google::protobuf::uint32 deal() const;
  inline void set_deal(::google::protobuf::uint32 value);

  // optional uint64 enter_min = 4;
  inline bool has_enter_min() const;
  inline void clear_enter_min();
  static const int kEnterMinFieldNumber = 4;
  inline ::google::protobuf::uint64 enter_min() const;
  inline void set_enter_min(::google::protobuf::uint64 value);

  // optional uint32 basescore = 5;
  inline bool has_basescore() const;
  inline void clear_basescore();
  static const int kBasescoreFieldNumber = 5;
  inline ::google::protobuf::uint32 basescore() const;
  inline void set_basescore(::google::protobuf::uint32 value);

  // optional uint32 press_count = 6;
  inline bool has_press_count() const;
  inline void clear_press_count();
  static const int kPressCountFieldNumber = 6;
  inline ::google::protobuf::uint32 press_count() const;
  inline void set_press_count(::google::protobuf::uint32 value);

  // optional uint32 bankrupt_count = 7;
  inline bool has_bankrupt_count() const;
  inline void clear_bankrupt_count();
  static const int kBankruptCountFieldNumber = 7;
  inline ::google::protobuf::uint32 bankrupt_count() const;
  inline void set_bankrupt_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.land_game_result)
 private:
  inline void set_has_is_spring();
  inline void clear_has_is_spring();
  inline void set_has_is_land();
  inline void clear_has_is_land();
  inline void set_has_deal();
  inline void clear_has_deal();
  inline void set_has_enter_min();
  inline void clear_has_enter_min();
  inline void set_has_basescore();
  inline void clear_has_basescore();
  inline void set_has_press_count();
  inline void clear_has_press_count();
  inline void set_has_bankrupt_count();
  inline void clear_has_bankrupt_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 is_spring_;
  ::google::protobuf::uint32 is_land_;
  ::google::protobuf::uint64 enter_min_;
  ::google::protobuf::uint32 deal_;
  ::google::protobuf::uint32 basescore_;
  ::google::protobuf::uint32 press_count_;
  ::google::protobuf::uint32 bankrupt_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static land_game_result* default_instance_;
};
// -------------------------------------------------------------------

class msg_report_game_result : public ::google::protobuf::Message {
 public:
  msg_report_game_result();
  virtual ~msg_report_game_result();

  msg_report_game_result(const msg_report_game_result& from);

  inline msg_report_game_result& operator=(const msg_report_game_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_report_game_result& default_instance();

  void Swap(msg_report_game_result* other);

  // implements Message ----------------------------------------------

  msg_report_game_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_report_game_result& from);
  void MergeFrom(const msg_report_game_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 consume = 2;
  inline bool has_consume() const;
  inline void clear_consume();
  static const int kConsumeFieldNumber = 2;
  inline ::google::protobuf::uint32 consume() const;
  inline void set_consume(::google::protobuf::uint32 value);

  // optional uint32 game_type = 3;
  inline bool has_game_type() const;
  inline void clear_game_type();
  static const int kGameTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 game_type() const;
  inline void set_game_type(::google::protobuf::uint32 value);

  // optional uint32 roomid = 4;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 4;
  inline ::google::protobuf::uint32 roomid() const;
  inline void set_roomid(::google::protobuf::uint32 value);

  // optional int64 win_score = 5;
  inline bool has_win_score() const;
  inline void clear_win_score();
  static const int kWinScoreFieldNumber = 5;
  inline ::google::protobuf::int64 win_score() const;
  inline void set_win_score(::google::protobuf::int64 value);

  // optional int64 ex_win_score = 6;
  inline bool has_ex_win_score() const;
  inline void clear_ex_win_score();
  static const int kExWinScoreFieldNumber = 6;
  inline ::google::protobuf::int64 ex_win_score() const;
  inline void set_ex_win_score(::google::protobuf::int64 value);

  // optional int64 bet_score = 7;
  inline bool has_bet_score() const;
  inline void clear_bet_score();
  static const int kBetScoreFieldNumber = 7;
  inline ::google::protobuf::int64 bet_score() const;
  inline void set_bet_score(::google::protobuf::int64 value);

  // optional int32 branker = 8;
  inline bool has_branker() const;
  inline void clear_branker();
  static const int kBrankerFieldNumber = 8;
  inline ::google::protobuf::int32 branker() const;
  inline void set_branker(::google::protobuf::int32 value);

  // optional int32 welcount = 9;
  inline bool has_welcount() const;
  inline void clear_welcount();
  static const int kWelcountFieldNumber = 9;
  inline ::google::protobuf::int32 welcount() const;
  inline void set_welcount(::google::protobuf::int32 value);

  // optional uint64 weltime = 10;
  inline bool has_weltime() const;
  inline void clear_weltime();
  static const int kWeltimeFieldNumber = 10;
  inline ::google::protobuf::uint64 weltime() const;
  inline void set_weltime(::google::protobuf::uint64 value);

  // optional .net.land_game_result land = 11;
  inline bool has_land() const;
  inline void clear_land();
  static const int kLandFieldNumber = 11;
  inline const ::net::land_game_result& land() const;
  inline ::net::land_game_result* mutable_land();
  inline ::net::land_game_result* release_land();
  inline void set_allocated_land(::net::land_game_result* land);

  // @@protoc_insertion_point(class_scope:net.msg_report_game_result)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_consume();
  inline void clear_has_consume();
  inline void set_has_game_type();
  inline void clear_has_game_type();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_win_score();
  inline void clear_has_win_score();
  inline void set_has_ex_win_score();
  inline void clear_has_ex_win_score();
  inline void set_has_bet_score();
  inline void clear_has_bet_score();
  inline void set_has_branker();
  inline void clear_has_branker();
  inline void set_has_welcount();
  inline void clear_has_welcount();
  inline void set_has_weltime();
  inline void clear_has_weltime();
  inline void set_has_land();
  inline void clear_has_land();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 consume_;
  ::google::protobuf::uint32 game_type_;
  ::google::protobuf::uint32 roomid_;
  ::google::protobuf::int64 win_score_;
  ::google::protobuf::int64 ex_win_score_;
  ::google::protobuf::int64 bet_score_;
  ::google::protobuf::int32 branker_;
  ::google::protobuf::int32 welcount_;
  ::google::protobuf::uint64 weltime_;
  ::net::land_game_result* land_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_report_game_result* default_instance_;
};
// -------------------------------------------------------------------

class msg_report_fee_log : public ::google::protobuf::Message {
 public:
  msg_report_fee_log();
  virtual ~msg_report_fee_log();

  msg_report_fee_log(const msg_report_fee_log& from);

  inline msg_report_fee_log& operator=(const msg_report_fee_log& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_report_fee_log& default_instance();

  void Swap(msg_report_fee_log* other);

  // implements Message ----------------------------------------------

  msg_report_fee_log* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_report_fee_log& from);
  void MergeFrom(const msg_report_fee_log& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional int64 fee_win = 2;
  inline bool has_fee_win() const;
  inline void clear_fee_win();
  static const int kFeeWinFieldNumber = 2;
  inline ::google::protobuf::int64 fee_win() const;
  inline void set_fee_win(::google::protobuf::int64 value);

  // optional int64 fee_lose = 3;
  inline bool has_fee_lose() const;
  inline void clear_fee_lose();
  static const int kFeeLoseFieldNumber = 3;
  inline ::google::protobuf::int64 fee_lose() const;
  inline void set_fee_lose(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:net.msg_report_fee_log)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_fee_win();
  inline void clear_has_fee_win();
  inline void set_has_fee_lose();
  inline void clear_has_fee_lose();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 fee_win_;
  ::google::protobuf::int64 fee_lose_;
  ::google::protobuf::uint32 uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_report_fee_log* default_instance_;
};
// -------------------------------------------------------------------

class msg_leave_robot : public ::google::protobuf::Message {
 public:
  msg_leave_robot();
  virtual ~msg_leave_robot();

  msg_leave_robot(const msg_leave_robot& from);

  inline msg_leave_robot& operator=(const msg_leave_robot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_leave_robot& default_instance();

  void Swap(msg_leave_robot* other);

  // implements Message ----------------------------------------------

  msg_leave_robot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_leave_robot& from);
  void MergeFrom(const msg_leave_robot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_leave_robot)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_leave_robot* default_instance_;
};
// -------------------------------------------------------------------

class msg_flush_change_account_data : public ::google::protobuf::Message {
 public:
  msg_flush_change_account_data();
  virtual ~msg_flush_change_account_data();

  msg_flush_change_account_data(const msg_flush_change_account_data& from);

  inline msg_flush_change_account_data& operator=(const msg_flush_change_account_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_flush_change_account_data& default_instance();

  void Swap(msg_flush_change_account_data* other);

  // implements Message ----------------------------------------------

  msg_flush_change_account_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_flush_change_account_data& from);
  void MergeFrom(const msg_flush_change_account_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional int64 diamond = 2;
  inline bool has_diamond() const;
  inline void clear_diamond();
  static const int kDiamondFieldNumber = 2;
  inline ::google::protobuf::int64 diamond() const;
  inline void set_diamond(::google::protobuf::int64 value);

  // optional int64 coin = 3;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 3;
  inline ::google::protobuf::int64 coin() const;
  inline void set_coin(::google::protobuf::int64 value);

  // optional int64 score = 4;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 4;
  inline ::google::protobuf::int64 score() const;
  inline void set_score(::google::protobuf::int64 value);

  // optional int64 ingot = 5;
  inline bool has_ingot() const;
  inline void clear_ingot();
  static const int kIngotFieldNumber = 5;
  inline ::google::protobuf::int64 ingot() const;
  inline void set_ingot(::google::protobuf::int64 value);

  // optional int64 cvalue = 6;
  inline bool has_cvalue() const;
  inline void clear_cvalue();
  static const int kCvalueFieldNumber = 6;
  inline ::google::protobuf::int64 cvalue() const;
  inline void set_cvalue(::google::protobuf::int64 value);

  // optional int64 safe_coin = 7;
  inline bool has_safe_coin() const;
  inline void clear_safe_coin();
  static const int kSafeCoinFieldNumber = 7;
  inline ::google::protobuf::int64 safe_coin() const;
  inline void set_safe_coin(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:net.msg_flush_change_account_data)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_diamond();
  inline void clear_has_diamond();
  inline void set_has_coin();
  inline void clear_has_coin();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_ingot();
  inline void clear_has_ingot();
  inline void set_has_cvalue();
  inline void clear_has_cvalue();
  inline void set_has_safe_coin();
  inline void clear_has_safe_coin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 diamond_;
  ::google::protobuf::int64 coin_;
  ::google::protobuf::int64 score_;
  ::google::protobuf::int64 ingot_;
  ::google::protobuf::int64 cvalue_;
  ::google::protobuf::int64 safe_coin_;
  ::google::protobuf::uint32 uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_flush_change_account_data* default_instance_;
};
// -------------------------------------------------------------------

class msg_update_change_account_data : public ::google::protobuf::Message {
 public:
  msg_update_change_account_data();
  virtual ~msg_update_change_account_data();

  msg_update_change_account_data(const msg_update_change_account_data& from);

  inline msg_update_change_account_data& operator=(const msg_update_change_account_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_update_change_account_data& default_instance();

  void Swap(msg_update_change_account_data* other);

  // implements Message ----------------------------------------------

  msg_update_change_account_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_update_change_account_data& from);
  void MergeFrom(const msg_update_change_account_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional int64 diamond = 2;
  inline bool has_diamond() const;
  inline void clear_diamond();
  static const int kDiamondFieldNumber = 2;
  inline ::google::protobuf::int64 diamond() const;
  inline void set_diamond(::google::protobuf::int64 value);

  // optional int64 coin = 3;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 3;
  inline ::google::protobuf::int64 coin() const;
  inline void set_coin(::google::protobuf::int64 value);

  // optional int64 score = 4;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 4;
  inline ::google::protobuf::int64 score() const;
  inline void set_score(::google::protobuf::int64 value);

  // optional int64 ingot = 5;
  inline bool has_ingot() const;
  inline void clear_ingot();
  static const int kIngotFieldNumber = 5;
  inline ::google::protobuf::int64 ingot() const;
  inline void set_ingot(::google::protobuf::int64 value);

  // optional int64 cvalue = 6;
  inline bool has_cvalue() const;
  inline void clear_cvalue();
  static const int kCvalueFieldNumber = 6;
  inline ::google::protobuf::int64 cvalue() const;
  inline void set_cvalue(::google::protobuf::int64 value);

  // optional int64 safe_coin = 7;
  inline bool has_safe_coin() const;
  inline void clear_safe_coin();
  static const int kSafeCoinFieldNumber = 7;
  inline ::google::protobuf::int64 safe_coin() const;
  inline void set_safe_coin(::google::protobuf::int64 value);

  // optional uint32 oper_type = 8;
  inline bool has_oper_type() const;
  inline void clear_oper_type();
  static const int kOperTypeFieldNumber = 8;
  inline ::google::protobuf::uint32 oper_type() const;
  inline void set_oper_type(::google::protobuf::uint32 value);

  // optional uint32 sub_type = 9;
  inline bool has_sub_type() const;
  inline void clear_sub_type();
  static const int kSubTypeFieldNumber = 9;
  inline ::google::protobuf::uint32 sub_type() const;
  inline void set_sub_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_update_change_account_data)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_diamond();
  inline void clear_has_diamond();
  inline void set_has_coin();
  inline void clear_has_coin();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_ingot();
  inline void clear_has_ingot();
  inline void set_has_cvalue();
  inline void clear_has_cvalue();
  inline void set_has_safe_coin();
  inline void clear_has_safe_coin();
  inline void set_has_oper_type();
  inline void clear_has_oper_type();
  inline void set_has_sub_type();
  inline void clear_has_sub_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 diamond_;
  ::google::protobuf::int64 coin_;
  ::google::protobuf::int64 score_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 oper_type_;
  ::google::protobuf::int64 ingot_;
  ::google::protobuf::int64 cvalue_;
  ::google::protobuf::int64 safe_coin_;
  ::google::protobuf::uint32 sub_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_update_change_account_data* default_instance_;
};
// -------------------------------------------------------------------

class msg_change_room_param : public ::google::protobuf::Message {
 public:
  msg_change_room_param();
  virtual ~msg_change_room_param();

  msg_change_room_param(const msg_change_room_param& from);

  inline msg_change_room_param& operator=(const msg_change_room_param& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_change_room_param& default_instance();

  void Swap(msg_change_room_param* other);

  // implements Message ----------------------------------------------

  msg_change_room_param* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_change_room_param& from);
  void MergeFrom(const msg_change_room_param& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 gametype = 1;
  inline bool has_gametype() const;
  inline void clear_gametype();
  static const int kGametypeFieldNumber = 1;
  inline ::google::protobuf::uint32 gametype() const;
  inline void set_gametype(::google::protobuf::uint32 value);

  // optional uint32 roomid = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  inline ::google::protobuf::uint32 roomid() const;
  inline void set_roomid(::google::protobuf::uint32 value);

  // optional bytes param = 3;
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 3;
  inline const ::std::string& param() const;
  inline void set_param(const ::std::string& value);
  inline void set_param(const char* value);
  inline void set_param(const void* value, size_t size);
  inline ::std::string* mutable_param();
  inline ::std::string* release_param();
  inline void set_allocated_param(::std::string* param);

  // @@protoc_insertion_point(class_scope:net.msg_change_room_param)
 private:
  inline void set_has_gametype();
  inline void clear_has_gametype();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 gametype_;
  ::google::protobuf::uint32 roomid_;
  ::std::string* param_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_change_room_param* default_instance_;
};
// -------------------------------------------------------------------

class msg_contorl_player : public ::google::protobuf::Message {
 public:
  msg_contorl_player();
  virtual ~msg_contorl_player();

  msg_contorl_player(const msg_contorl_player& from);

  inline msg_contorl_player& operator=(const msg_contorl_player& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_contorl_player& default_instance();

  void Swap(msg_contorl_player* other);

  // implements Message ----------------------------------------------

  msg_contorl_player* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_contorl_player& from);
  void MergeFrom(const msg_contorl_player& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 gametype = 1;
  inline bool has_gametype() const;
  inline void clear_gametype();
  static const int kGametypeFieldNumber = 1;
  inline ::google::protobuf::uint32 gametype() const;
  inline void set_gametype(::google::protobuf::uint32 value);

  // optional uint32 roomid = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  inline ::google::protobuf::uint32 roomid() const;
  inline void set_roomid(::google::protobuf::uint32 value);

  // optional uint32 uid = 3;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 3;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 operatetype = 4;
  inline bool has_operatetype() const;
  inline void clear_operatetype();
  static const int kOperatetypeFieldNumber = 4;
  inline ::google::protobuf::uint32 operatetype() const;
  inline void set_operatetype(::google::protobuf::uint32 value);

  // optional uint32 gamecount = 5;
  inline bool has_gamecount() const;
  inline void clear_gamecount();
  static const int kGamecountFieldNumber = 5;
  inline ::google::protobuf::uint32 gamecount() const;
  inline void set_gamecount(::google::protobuf::uint32 value);

  // optional int64 id = 6;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 6;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:net.msg_contorl_player)
 private:
  inline void set_has_gametype();
  inline void clear_has_gametype();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_operatetype();
  inline void clear_has_operatetype();
  inline void set_has_gamecount();
  inline void clear_has_gamecount();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 gametype_;
  ::google::protobuf::uint32 roomid_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 operatetype_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::uint32 gamecount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_contorl_player* default_instance_;
};
// -------------------------------------------------------------------

class msg_contorl_multi_player : public ::google::protobuf::Message {
 public:
  msg_contorl_multi_player();
  virtual ~msg_contorl_multi_player();

  msg_contorl_multi_player(const msg_contorl_multi_player& from);

  inline msg_contorl_multi_player& operator=(const msg_contorl_multi_player& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_contorl_multi_player& default_instance();

  void Swap(msg_contorl_multi_player* other);

  // implements Message ----------------------------------------------

  msg_contorl_multi_player* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_contorl_multi_player& from);
  void MergeFrom(const msg_contorl_multi_player& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 gametype = 1;
  inline bool has_gametype() const;
  inline void clear_gametype();
  static const int kGametypeFieldNumber = 1;
  inline ::google::protobuf::uint32 gametype() const;
  inline void set_gametype(::google::protobuf::uint32 value);

  // optional uint32 roomid = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  inline ::google::protobuf::uint32 roomid() const;
  inline void set_roomid(::google::protobuf::uint32 value);

  // optional uint32 uid = 3;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 3;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 operatetype = 4;
  inline bool has_operatetype() const;
  inline void clear_operatetype();
  static const int kOperatetypeFieldNumber = 4;
  inline ::google::protobuf::uint32 operatetype() const;
  inline void set_operatetype(::google::protobuf::uint32 value);

  // optional uint32 gamecount = 5;
  inline bool has_gamecount() const;
  inline void clear_gamecount();
  static const int kGamecountFieldNumber = 5;
  inline ::google::protobuf::uint32 gamecount() const;
  inline void set_gamecount(::google::protobuf::uint32 value);

  // optional uint64 gametime = 6;
  inline bool has_gametime() const;
  inline void clear_gametime();
  static const int kGametimeFieldNumber = 6;
  inline ::google::protobuf::uint64 gametime() const;
  inline void set_gametime(::google::protobuf::uint64 value);

  // optional int64 totalscore = 7;
  inline bool has_totalscore() const;
  inline void clear_totalscore();
  static const int kTotalscoreFieldNumber = 7;
  inline ::google::protobuf::int64 totalscore() const;
  inline void set_totalscore(::google::protobuf::int64 value);

  // optional int64 id = 8;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 8;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:net.msg_contorl_multi_player)
 private:
  inline void set_has_gametype();
  inline void clear_has_gametype();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_operatetype();
  inline void clear_has_operatetype();
  inline void set_has_gamecount();
  inline void clear_has_gamecount();
  inline void set_has_gametime();
  inline void clear_has_gametime();
  inline void set_has_totalscore();
  inline void clear_has_totalscore();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 gametype_;
  ::google::protobuf::uint32 roomid_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 operatetype_;
  ::google::protobuf::uint64 gametime_;
  ::google::protobuf::int64 totalscore_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::uint32 gamecount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_contorl_multi_player* default_instance_;
};
// -------------------------------------------------------------------

class msg_dice_control_req : public ::google::protobuf::Message {
 public:
  msg_dice_control_req();
  virtual ~msg_dice_control_req();

  msg_dice_control_req(const msg_dice_control_req& from);

  inline msg_dice_control_req& operator=(const msg_dice_control_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_dice_control_req& default_instance();

  void Swap(msg_dice_control_req* other);

  // implements Message ----------------------------------------------

  msg_dice_control_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_dice_control_req& from);
  void MergeFrom(const msg_dice_control_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 gametype = 1;
  inline bool has_gametype() const;
  inline void clear_gametype();
  static const int kGametypeFieldNumber = 1;
  inline ::google::protobuf::uint32 gametype() const;
  inline void set_gametype(::google::protobuf::uint32 value);

  // optional uint32 roomid = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  inline ::google::protobuf::uint32 roomid() const;
  inline void set_roomid(::google::protobuf::uint32 value);

  // optional .net.dice_control_req dice = 3;
  inline bool has_dice() const;
  inline void clear_dice();
  static const int kDiceFieldNumber = 3;
  inline const ::net::dice_control_req& dice() const;
  inline ::net::dice_control_req* mutable_dice();
  inline ::net::dice_control_req* release_dice();
  inline void set_allocated_dice(::net::dice_control_req* dice);

  // @@protoc_insertion_point(class_scope:net.msg_dice_control_req)
 private:
  inline void set_has_gametype();
  inline void clear_has_gametype();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_dice();
  inline void clear_has_dice();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 gametype_;
  ::google::protobuf::uint32 roomid_;
  ::net::dice_control_req* dice_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_dice_control_req* default_instance_;
};
// -------------------------------------------------------------------

class msg_majiang_config_hand_card : public ::google::protobuf::Message {
 public:
  msg_majiang_config_hand_card();
  virtual ~msg_majiang_config_hand_card();

  msg_majiang_config_hand_card(const msg_majiang_config_hand_card& from);

  inline msg_majiang_config_hand_card& operator=(const msg_majiang_config_hand_card& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_majiang_config_hand_card& default_instance();

  void Swap(msg_majiang_config_hand_card* other);

  // implements Message ----------------------------------------------

  msg_majiang_config_hand_card* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_majiang_config_hand_card& from);
  void MergeFrom(const msg_majiang_config_hand_card& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 gametype = 1;
  inline bool has_gametype() const;
  inline void clear_gametype();
  static const int kGametypeFieldNumber = 1;
  inline ::google::protobuf::uint32 gametype() const;
  inline void set_gametype(::google::protobuf::uint32 value);

  // optional uint32 roomid = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  inline ::google::protobuf::uint32 roomid() const;
  inline void set_roomid(::google::protobuf::uint32 value);

  // optional bytes hand_card = 3;
  inline bool has_hand_card() const;
  inline void clear_hand_card();
  static const int kHandCardFieldNumber = 3;
  inline const ::std::string& hand_card() const;
  inline void set_hand_card(const ::std::string& value);
  inline void set_hand_card(const char* value);
  inline void set_hand_card(const void* value, size_t size);
  inline ::std::string* mutable_hand_card();
  inline ::std::string* release_hand_card();
  inline void set_allocated_hand_card(::std::string* hand_card);

  // @@protoc_insertion_point(class_scope:net.msg_majiang_config_hand_card)
 private:
  inline void set_has_gametype();
  inline void clear_has_gametype();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_hand_card();
  inline void clear_has_hand_card();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 gametype_;
  ::google::protobuf::uint32 roomid_;
  ::std::string* hand_card_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_majiang_config_hand_card* default_instance_;
};
// -------------------------------------------------------------------

class msg_update_server_room_robot : public ::google::protobuf::Message {
 public:
  msg_update_server_room_robot();
  virtual ~msg_update_server_room_robot();

  msg_update_server_room_robot(const msg_update_server_room_robot& from);

  inline msg_update_server_room_robot& operator=(const msg_update_server_room_robot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_update_server_room_robot& default_instance();

  void Swap(msg_update_server_room_robot* other);

  // implements Message ----------------------------------------------

  msg_update_server_room_robot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_update_server_room_robot& from);
  void MergeFrom(const msg_update_server_room_robot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 gametype = 1;
  inline bool has_gametype() const;
  inline void clear_gametype();
  static const int kGametypeFieldNumber = 1;
  inline ::google::protobuf::uint32 gametype() const;
  inline void set_gametype(::google::protobuf::uint32 value);

  // optional uint32 roomid = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  inline ::google::protobuf::uint32 roomid() const;
  inline void set_roomid(::google::protobuf::uint32 value);

  // optional uint32 robot = 3;
  inline bool has_robot() const;
  inline void clear_robot();
  static const int kRobotFieldNumber = 3;
  inline ::google::protobuf::uint32 robot() const;
  inline void set_robot(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_update_server_room_robot)
 private:
  inline void set_has_gametype();
  inline void clear_has_gametype();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_robot();
  inline void clear_has_robot();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 gametype_;
  ::google::protobuf::uint32 roomid_;
  ::google::protobuf::uint32 robot_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_update_server_room_robot* default_instance_;
};
// -------------------------------------------------------------------

class msg_reload_robot_online_cfg : public ::google::protobuf::Message {
 public:
  msg_reload_robot_online_cfg();
  virtual ~msg_reload_robot_online_cfg();

  msg_reload_robot_online_cfg(const msg_reload_robot_online_cfg& from);

  inline msg_reload_robot_online_cfg& operator=(const msg_reload_robot_online_cfg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_reload_robot_online_cfg& default_instance();

  void Swap(msg_reload_robot_online_cfg* other);

  // implements Message ----------------------------------------------

  msg_reload_robot_online_cfg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_reload_robot_online_cfg& from);
  void MergeFrom(const msg_reload_robot_online_cfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 optype = 1;
  inline bool has_optype() const;
  inline void clear_optype();
  static const int kOptypeFieldNumber = 1;
  inline ::google::protobuf::uint32 optype() const;
  inline void set_optype(::google::protobuf::uint32 value);

  // optional uint32 gametype = 2;
  inline bool has_gametype() const;
  inline void clear_gametype();
  static const int kGametypeFieldNumber = 2;
  inline ::google::protobuf::uint32 gametype() const;
  inline void set_gametype(::google::protobuf::uint32 value);

  // optional uint32 roomid = 3;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 3;
  inline ::google::protobuf::uint32 roomid() const;
  inline void set_roomid(::google::protobuf::uint32 value);

  // optional uint32 leveltype = 4;
  inline bool has_leveltype() const;
  inline void clear_leveltype();
  static const int kLeveltypeFieldNumber = 4;
  inline ::google::protobuf::uint32 leveltype() const;
  inline void set_leveltype(::google::protobuf::uint32 value);

  // optional uint32 batchid = 5;
  inline bool has_batchid() const;
  inline void clear_batchid();
  static const int kBatchidFieldNumber = 5;
  inline ::google::protobuf::uint32 batchid() const;
  inline void set_batchid(::google::protobuf::uint32 value);

  // optional uint32 logintype = 6;
  inline bool has_logintype() const;
  inline void clear_logintype();
  static const int kLogintypeFieldNumber = 6;
  inline ::google::protobuf::uint32 logintype() const;
  inline void set_logintype(::google::protobuf::uint32 value);

  // optional uint32 entertimer = 7;
  inline bool has_entertimer() const;
  inline void clear_entertimer();
  static const int kEntertimerFieldNumber = 7;
  inline ::google::protobuf::uint32 entertimer() const;
  inline void set_entertimer(::google::protobuf::uint32 value);

  // optional uint32 leavetimer = 8;
  inline bool has_leavetimer() const;
  inline void clear_leavetimer();
  static const int kLeavetimerFieldNumber = 8;
  inline ::google::protobuf::uint32 leavetimer() const;
  inline void set_leavetimer(::google::protobuf::uint32 value);

  // repeated uint32 online = 9;
  inline int online_size() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 9;
  inline ::google::protobuf::uint32 online(int index) const;
  inline void set_online(int index, ::google::protobuf::uint32 value);
  inline void add_online(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      online() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_online();

  // @@protoc_insertion_point(class_scope:net.msg_reload_robot_online_cfg)
 private:
  inline void set_has_optype();
  inline void clear_has_optype();
  inline void set_has_gametype();
  inline void clear_has_gametype();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_leveltype();
  inline void clear_has_leveltype();
  inline void set_has_batchid();
  inline void clear_has_batchid();
  inline void set_has_logintype();
  inline void clear_has_logintype();
  inline void set_has_entertimer();
  inline void clear_has_entertimer();
  inline void set_has_leavetimer();
  inline void clear_has_leavetimer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 optype_;
  ::google::protobuf::uint32 gametype_;
  ::google::protobuf::uint32 roomid_;
  ::google::protobuf::uint32 leveltype_;
  ::google::protobuf::uint32 batchid_;
  ::google::protobuf::uint32 logintype_;
  ::google::protobuf::uint32 entertimer_;
  ::google::protobuf::uint32 leavetimer_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > online_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_reload_robot_online_cfg* default_instance_;
};
// -------------------------------------------------------------------

class msg_update_new_player_novice_welfare_right : public ::google::protobuf::Message {
 public:
  msg_update_new_player_novice_welfare_right();
  virtual ~msg_update_new_player_novice_welfare_right();

  msg_update_new_player_novice_welfare_right(const msg_update_new_player_novice_welfare_right& from);

  inline msg_update_new_player_novice_welfare_right& operator=(const msg_update_new_player_novice_welfare_right& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_update_new_player_novice_welfare_right& default_instance();

  void Swap(msg_update_new_player_novice_welfare_right* other);

  // implements Message ----------------------------------------------

  msg_update_new_player_novice_welfare_right* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_update_new_player_novice_welfare_right& from);
  void MergeFrom(const msg_update_new_player_novice_welfare_right& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 userright = 2;
  inline bool has_userright() const;
  inline void clear_userright();
  static const int kUserrightFieldNumber = 2;
  inline ::google::protobuf::uint32 userright() const;
  inline void set_userright(::google::protobuf::uint32 value);

  // optional uint32 posrmb = 3;
  inline bool has_posrmb() const;
  inline void clear_posrmb();
  static const int kPosrmbFieldNumber = 3;
  inline ::google::protobuf::uint32 posrmb() const;
  inline void set_posrmb(::google::protobuf::uint32 value);

  // optional uint64 postime = 4;
  inline bool has_postime() const;
  inline void clear_postime();
  static const int kPostimeFieldNumber = 4;
  inline ::google::protobuf::uint64 postime() const;
  inline void set_postime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:net.msg_update_new_player_novice_welfare_right)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_userright();
  inline void clear_has_userright();
  inline void set_has_posrmb();
  inline void clear_has_posrmb();
  inline void set_has_postime();
  inline void clear_has_postime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 userright_;
  ::google::protobuf::uint64 postime_;
  ::google::protobuf::uint32 posrmb_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_update_new_player_novice_welfare_right* default_instance_;
};
// -------------------------------------------------------------------

class msg_update_new_player_novice_welfare_value : public ::google::protobuf::Message {
 public:
  msg_update_new_player_novice_welfare_value();
  virtual ~msg_update_new_player_novice_welfare_value();

  msg_update_new_player_novice_welfare_value(const msg_update_new_player_novice_welfare_value& from);

  inline msg_update_new_player_novice_welfare_value& operator=(const msg_update_new_player_novice_welfare_value& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_update_new_player_novice_welfare_value& default_instance();

  void Swap(msg_update_new_player_novice_welfare_value* other);

  // implements Message ----------------------------------------------

  msg_update_new_player_novice_welfare_value* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_update_new_player_novice_welfare_value& from);
  void MergeFrom(const msg_update_new_player_novice_welfare_value& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 minpayrmb = 2;
  inline bool has_minpayrmb() const;
  inline void clear_minpayrmb();
  static const int kMinpayrmbFieldNumber = 2;
  inline ::google::protobuf::uint32 minpayrmb() const;
  inline void set_minpayrmb(::google::protobuf::uint32 value);

  // optional uint32 maxpayrmb = 3;
  inline bool has_maxpayrmb() const;
  inline void clear_maxpayrmb();
  static const int kMaxpayrmbFieldNumber = 3;
  inline ::google::protobuf::uint32 maxpayrmb() const;
  inline void set_maxpayrmb(::google::protobuf::uint32 value);

  // optional uint32 maxwinscore = 4;
  inline bool has_maxwinscore() const;
  inline void clear_maxwinscore();
  static const int kMaxwinscoreFieldNumber = 4;
  inline ::google::protobuf::uint32 maxwinscore() const;
  inline void set_maxwinscore(::google::protobuf::uint32 value);

  // optional uint32 welfarecount = 5;
  inline bool has_welfarecount() const;
  inline void clear_welfarecount();
  static const int kWelfarecountFieldNumber = 5;
  inline ::google::protobuf::uint32 welfarecount() const;
  inline void set_welfarecount(::google::protobuf::uint32 value);

  // optional uint32 welfarepro = 6;
  inline bool has_welfarepro() const;
  inline void clear_welfarepro();
  static const int kWelfareproFieldNumber = 6;
  inline ::google::protobuf::uint32 welfarepro() const;
  inline void set_welfarepro(::google::protobuf::uint32 value);

  // optional uint32 postime = 7;
  inline bool has_postime() const;
  inline void clear_postime();
  static const int kPostimeFieldNumber = 7;
  inline ::google::protobuf::uint32 postime() const;
  inline void set_postime(::google::protobuf::uint32 value);

  // optional uint32 lift_odds = 8;
  inline bool has_lift_odds() const;
  inline void clear_lift_odds();
  static const int kLiftOddsFieldNumber = 8;
  inline ::google::protobuf::uint32 lift_odds() const;
  inline void set_lift_odds(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_update_new_player_novice_welfare_value)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_minpayrmb();
  inline void clear_has_minpayrmb();
  inline void set_has_maxpayrmb();
  inline void clear_has_maxpayrmb();
  inline void set_has_maxwinscore();
  inline void clear_has_maxwinscore();
  inline void set_has_welfarecount();
  inline void clear_has_welfarecount();
  inline void set_has_welfarepro();
  inline void clear_has_welfarepro();
  inline void set_has_postime();
  inline void clear_has_postime();
  inline void set_has_lift_odds();
  inline void clear_has_lift_odds();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 minpayrmb_;
  ::google::protobuf::uint32 maxpayrmb_;
  ::google::protobuf::uint32 maxwinscore_;
  ::google::protobuf::uint32 welfarecount_;
  ::google::protobuf::uint32 welfarepro_;
  ::google::protobuf::uint32 postime_;
  ::google::protobuf::uint32 lift_odds_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_update_new_player_novice_welfare_value* default_instance_;
};
// -------------------------------------------------------------------

class msg_register_dispatch : public ::google::protobuf::Message {
 public:
  msg_register_dispatch();
  virtual ~msg_register_dispatch();

  msg_register_dispatch(const msg_register_dispatch& from);

  inline msg_register_dispatch& operator=(const msg_register_dispatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_register_dispatch& default_instance();

  void Swap(msg_register_dispatch* other);

  // implements Message ----------------------------------------------

  msg_register_dispatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_register_dispatch& from);
  void MergeFrom(const msg_register_dispatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrid = 1;
  inline bool has_svrid() const;
  inline void clear_svrid();
  static const int kSvridFieldNumber = 1;
  inline ::google::protobuf::uint32 svrid() const;
  inline void set_svrid(::google::protobuf::uint32 value);

  // optional uint32 svr_type = 2;
  inline bool has_svr_type() const;
  inline void clear_svr_type();
  static const int kSvrTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 svr_type() const;
  inline void set_svr_type(::google::protobuf::uint32 value);

  // optional uint32 game_type = 3;
  inline bool has_game_type() const;
  inline void clear_game_type();
  static const int kGameTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 game_type() const;
  inline void set_game_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_register_dispatch)
 private:
  inline void set_has_svrid();
  inline void clear_has_svrid();
  inline void set_has_svr_type();
  inline void clear_has_svr_type();
  inline void set_has_game_type();
  inline void clear_has_game_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 svrid_;
  ::google::protobuf::uint32 svr_type_;
  ::google::protobuf::uint32 game_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_register_dispatch* default_instance_;
};
// -------------------------------------------------------------------

class msg_register_dispatch_rep : public ::google::protobuf::Message {
 public:
  msg_register_dispatch_rep();
  virtual ~msg_register_dispatch_rep();

  msg_register_dispatch_rep(const msg_register_dispatch_rep& from);

  inline msg_register_dispatch_rep& operator=(const msg_register_dispatch_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_register_dispatch_rep& default_instance();

  void Swap(msg_register_dispatch_rep* other);

  // implements Message ----------------------------------------------

  msg_register_dispatch_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_register_dispatch_rep& from);
  void MergeFrom(const msg_register_dispatch_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_register_dispatch_rep)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_register_dispatch_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_notify_gamesvrs_new_lobby : public ::google::protobuf::Message {
 public:
  msg_notify_gamesvrs_new_lobby();
  virtual ~msg_notify_gamesvrs_new_lobby();

  msg_notify_gamesvrs_new_lobby(const msg_notify_gamesvrs_new_lobby& from);

  inline msg_notify_gamesvrs_new_lobby& operator=(const msg_notify_gamesvrs_new_lobby& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_notify_gamesvrs_new_lobby& default_instance();

  void Swap(msg_notify_gamesvrs_new_lobby* other);

  // implements Message ----------------------------------------------

  msg_notify_gamesvrs_new_lobby* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_notify_gamesvrs_new_lobby& from);
  void MergeFrom(const msg_notify_gamesvrs_new_lobby& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 lobby_svrid = 1;
  inline bool has_lobby_svrid() const;
  inline void clear_lobby_svrid();
  static const int kLobbySvridFieldNumber = 1;
  inline ::google::protobuf::uint32 lobby_svrid() const;
  inline void set_lobby_svrid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_notify_gamesvrs_new_lobby)
 private:
  inline void set_has_lobby_svrid();
  inline void clear_has_lobby_svrid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 lobby_svrid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_notify_gamesvrs_new_lobby* default_instance_;
};
// -------------------------------------------------------------------

class msg_retire_lobbysvr : public ::google::protobuf::Message {
 public:
  msg_retire_lobbysvr();
  virtual ~msg_retire_lobbysvr();

  msg_retire_lobbysvr(const msg_retire_lobbysvr& from);

  inline msg_retire_lobbysvr& operator=(const msg_retire_lobbysvr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_retire_lobbysvr& default_instance();

  void Swap(msg_retire_lobbysvr* other);

  // implements Message ----------------------------------------------

  msg_retire_lobbysvr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_retire_lobbysvr& from);
  void MergeFrom(const msg_retire_lobbysvr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrid = 1;
  inline bool has_svrid() const;
  inline void clear_svrid();
  static const int kSvridFieldNumber = 1;
  inline ::google::protobuf::uint32 svrid() const;
  inline void set_svrid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_retire_lobbysvr)
 private:
  inline void set_has_svrid();
  inline void clear_has_svrid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 svrid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_retire_lobbysvr* default_instance_;
};
// -------------------------------------------------------------------

class msg_retire_gamesvr : public ::google::protobuf::Message {
 public:
  msg_retire_gamesvr();
  virtual ~msg_retire_gamesvr();

  msg_retire_gamesvr(const msg_retire_gamesvr& from);

  inline msg_retire_gamesvr& operator=(const msg_retire_gamesvr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_retire_gamesvr& default_instance();

  void Swap(msg_retire_gamesvr* other);

  // implements Message ----------------------------------------------

  msg_retire_gamesvr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_retire_gamesvr& from);
  void MergeFrom(const msg_retire_gamesvr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 svrid = 1;
  inline bool has_svrid() const;
  inline void clear_svrid();
  static const int kSvridFieldNumber = 1;
  inline ::google::protobuf::uint32 svrid() const;
  inline void set_svrid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_retire_gamesvr)
 private:
  inline void set_has_svrid();
  inline void clear_has_svrid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 svrid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_retire_gamesvr* default_instance_;
};
// -------------------------------------------------------------------

class msg_report_onlines : public ::google::protobuf::Message {
 public:
  msg_report_onlines();
  virtual ~msg_report_onlines();

  msg_report_onlines(const msg_report_onlines& from);

  inline msg_report_onlines& operator=(const msg_report_onlines& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_report_onlines& default_instance();

  void Swap(msg_report_onlines* other);

  // implements Message ----------------------------------------------

  msg_report_onlines* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_report_onlines& from);
  void MergeFrom(const msg_report_onlines& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 player_size = 1;
  inline bool has_player_size() const;
  inline void clear_player_size();
  static const int kPlayerSizeFieldNumber = 1;
  inline ::google::protobuf::uint32 player_size() const;
  inline void set_player_size(::google::protobuf::uint32 value);

  // optional uint32 robot_size = 2;
  inline bool has_robot_size() const;
  inline void clear_robot_size();
  static const int kRobotSizeFieldNumber = 2;
  inline ::google::protobuf::uint32 robot_size() const;
  inline void set_robot_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_report_onlines)
 private:
  inline void set_has_player_size();
  inline void clear_has_player_size();
  inline void set_has_robot_size();
  inline void clear_has_robot_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 player_size_;
  ::google::protobuf::uint32 robot_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_report_onlines* default_instance_;
};
// -------------------------------------------------------------------

class msg_broadcast_other_lobby : public ::google::protobuf::Message {
 public:
  msg_broadcast_other_lobby();
  virtual ~msg_broadcast_other_lobby();

  msg_broadcast_other_lobby(const msg_broadcast_other_lobby& from);

  inline msg_broadcast_other_lobby& operator=(const msg_broadcast_other_lobby& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_broadcast_other_lobby& default_instance();

  void Swap(msg_broadcast_other_lobby* other);

  // implements Message ----------------------------------------------

  msg_broadcast_other_lobby* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_broadcast_other_lobby& from);
  void MergeFrom(const msg_broadcast_other_lobby& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 svrid = 2;
  inline bool has_svrid() const;
  inline void clear_svrid();
  static const int kSvridFieldNumber = 2;
  inline ::google::protobuf::uint32 svrid() const;
  inline void set_svrid(::google::protobuf::uint32 value);

  // optional bytes data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional uint32 cmd = 4;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 4;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_broadcast_other_lobby)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_svrid();
  inline void clear_has_svrid();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_cmd();
  inline void clear_has_cmd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 svrid_;
  ::std::string* data_;
  ::google::protobuf::uint32 cmd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_broadcast_other_lobby* default_instance_;
};
// -------------------------------------------------------------------

class msg_broadcast_info : public ::google::protobuf::Message {
 public:
  msg_broadcast_info();
  virtual ~msg_broadcast_info();

  msg_broadcast_info(const msg_broadcast_info& from);

  inline msg_broadcast_info& operator=(const msg_broadcast_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_broadcast_info& default_instance();

  void Swap(msg_broadcast_info* other);

  // implements Message ----------------------------------------------

  msg_broadcast_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_broadcast_info& from);
  void MergeFrom(const msg_broadcast_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional uint32 cmd = 2;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 2;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_broadcast_info)
 private:
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_cmd();
  inline void clear_has_cmd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* data_;
  ::google::protobuf::uint32 cmd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_broadcast_info* default_instance_;
};
// -------------------------------------------------------------------

class msg_stop_snatch_coin : public ::google::protobuf::Message {
 public:
  msg_stop_snatch_coin();
  virtual ~msg_stop_snatch_coin();

  msg_stop_snatch_coin(const msg_stop_snatch_coin& from);

  inline msg_stop_snatch_coin& operator=(const msg_stop_snatch_coin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_stop_snatch_coin& default_instance();

  void Swap(msg_stop_snatch_coin* other);

  // implements Message ----------------------------------------------

  msg_stop_snatch_coin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_stop_snatch_coin& from);
  void MergeFrom(const msg_stop_snatch_coin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 gametype = 1;
  inline bool has_gametype() const;
  inline void clear_gametype();
  static const int kGametypeFieldNumber = 1;
  inline ::google::protobuf::uint32 gametype() const;
  inline void set_gametype(::google::protobuf::uint32 value);

  // optional uint32 roomid = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  inline ::google::protobuf::uint32 roomid() const;
  inline void set_roomid(::google::protobuf::uint32 value);

  // optional uint32 stop = 3;
  inline bool has_stop() const;
  inline void clear_stop();
  static const int kStopFieldNumber = 3;
  inline ::google::protobuf::uint32 stop() const;
  inline void set_stop(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_stop_snatch_coin)
 private:
  inline void set_has_gametype();
  inline void clear_has_gametype();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_stop();
  inline void clear_has_stop();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 gametype_;
  ::google::protobuf::uint32 roomid_;
  ::google::protobuf::uint32 stop_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_stop_snatch_coin* default_instance_;
};
// -------------------------------------------------------------------

class msg_robot_snatch_coin : public ::google::protobuf::Message {
 public:
  msg_robot_snatch_coin();
  virtual ~msg_robot_snatch_coin();

  msg_robot_snatch_coin(const msg_robot_snatch_coin& from);

  inline msg_robot_snatch_coin& operator=(const msg_robot_snatch_coin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_robot_snatch_coin& default_instance();

  void Swap(msg_robot_snatch_coin* other);

  // implements Message ----------------------------------------------

  msg_robot_snatch_coin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_robot_snatch_coin& from);
  void MergeFrom(const msg_robot_snatch_coin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 gametype = 1;
  inline bool has_gametype() const;
  inline void clear_gametype();
  static const int kGametypeFieldNumber = 1;
  inline ::google::protobuf::uint32 gametype() const;
  inline void set_gametype(::google::protobuf::uint32 value);

  // optional uint32 roomid = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  inline ::google::protobuf::uint32 roomid() const;
  inline void set_roomid(::google::protobuf::uint32 value);

  // optional uint32 snatchtype = 3;
  inline bool has_snatchtype() const;
  inline void clear_snatchtype();
  static const int kSnatchtypeFieldNumber = 3;
  inline ::google::protobuf::uint32 snatchtype() const;
  inline void set_snatchtype(::google::protobuf::uint32 value);

  // optional uint32 robotcount = 4;
  inline bool has_robotcount() const;
  inline void clear_robotcount();
  static const int kRobotcountFieldNumber = 4;
  inline ::google::protobuf::uint32 robotcount() const;
  inline void set_robotcount(::google::protobuf::uint32 value);

  // optional uint32 cardcount = 5;
  inline bool has_cardcount() const;
  inline void clear_cardcount();
  static const int kCardcountFieldNumber = 5;
  inline ::google::protobuf::uint32 cardcount() const;
  inline void set_cardcount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_robot_snatch_coin)
 private:
  inline void set_has_gametype();
  inline void clear_has_gametype();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_snatchtype();
  inline void clear_has_snatchtype();
  inline void set_has_robotcount();
  inline void clear_has_robotcount();
  inline void set_has_cardcount();
  inline void clear_has_cardcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 gametype_;
  ::google::protobuf::uint32 roomid_;
  ::google::protobuf::uint32 snatchtype_;
  ::google::protobuf::uint32 robotcount_;
  ::google::protobuf::uint32 cardcount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_robot_snatch_coin* default_instance_;
};
// -------------------------------------------------------------------

class msg_auto_kill_user_cfg : public ::google::protobuf::Message {
 public:
  msg_auto_kill_user_cfg();
  virtual ~msg_auto_kill_user_cfg();

  msg_auto_kill_user_cfg(const msg_auto_kill_user_cfg& from);

  inline msg_auto_kill_user_cfg& operator=(const msg_auto_kill_user_cfg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_auto_kill_user_cfg& default_instance();

  void Swap(msg_auto_kill_user_cfg* other);

  // implements Message ----------------------------------------------

  msg_auto_kill_user_cfg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_auto_kill_user_cfg& from);
  void MergeFrom(const msg_auto_kill_user_cfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes updatejson = 1;
  inline bool has_updatejson() const;
  inline void clear_updatejson();
  static const int kUpdatejsonFieldNumber = 1;
  inline const ::std::string& updatejson() const;
  inline void set_updatejson(const ::std::string& value);
  inline void set_updatejson(const char* value);
  inline void set_updatejson(const void* value, size_t size);
  inline ::std::string* mutable_updatejson();
  inline ::std::string* release_updatejson();
  inline void set_allocated_updatejson(::std::string* updatejson);

  // @@protoc_insertion_point(class_scope:net.msg_auto_kill_user_cfg)
 private:
  inline void set_has_updatejson();
  inline void clear_has_updatejson();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* updatejson_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_auto_kill_user_cfg* default_instance_;
};
// -------------------------------------------------------------------

class msg_flush_active_welfare_cfg : public ::google::protobuf::Message {
 public:
  msg_flush_active_welfare_cfg();
  virtual ~msg_flush_active_welfare_cfg();

  msg_flush_active_welfare_cfg(const msg_flush_active_welfare_cfg& from);

  inline msg_flush_active_welfare_cfg& operator=(const msg_flush_active_welfare_cfg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_flush_active_welfare_cfg& default_instance();

  void Swap(msg_flush_active_welfare_cfg* other);

  // implements Message ----------------------------------------------

  msg_flush_active_welfare_cfg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_flush_active_welfare_cfg& from);
  void MergeFrom(const msg_flush_active_welfare_cfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes updatejson = 1;
  inline bool has_updatejson() const;
  inline void clear_updatejson();
  static const int kUpdatejsonFieldNumber = 1;
  inline const ::std::string& updatejson() const;
  inline void set_updatejson(const ::std::string& value);
  inline void set_updatejson(const char* value);
  inline void set_updatejson(const void* value, size_t size);
  inline ::std::string* mutable_updatejson();
  inline ::std::string* release_updatejson();
  inline void set_allocated_updatejson(::std::string* updatejson);

  // @@protoc_insertion_point(class_scope:net.msg_flush_active_welfare_cfg)
 private:
  inline void set_has_updatejson();
  inline void clear_has_updatejson();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* updatejson_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_flush_active_welfare_cfg* default_instance_;
};
// -------------------------------------------------------------------

class msg_reset_active_welfare_info : public ::google::protobuf::Message {
 public:
  msg_reset_active_welfare_info();
  virtual ~msg_reset_active_welfare_info();

  msg_reset_active_welfare_info(const msg_reset_active_welfare_info& from);

  inline msg_reset_active_welfare_info& operator=(const msg_reset_active_welfare_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_reset_active_welfare_info& default_instance();

  void Swap(msg_reset_active_welfare_info* other);

  // implements Message ----------------------------------------------

  msg_reset_active_welfare_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_reset_active_welfare_info& from);
  void MergeFrom(const msg_reset_active_welfare_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes updatejson = 1;
  inline bool has_updatejson() const;
  inline void clear_updatejson();
  static const int kUpdatejsonFieldNumber = 1;
  inline const ::std::string& updatejson() const;
  inline void set_updatejson(const ::std::string& value);
  inline void set_updatejson(const char* value);
  inline void set_updatejson(const void* value, size_t size);
  inline ::std::string* mutable_updatejson();
  inline ::std::string* release_updatejson();
  inline void set_allocated_updatejson(::std::string* updatejson);

  // @@protoc_insertion_point(class_scope:net.msg_reset_active_welfare_info)
 private:
  inline void set_has_updatejson();
  inline void clear_has_updatejson();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* updatejson_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_reset_active_welfare_info* default_instance_;
};
// -------------------------------------------------------------------

class msg_flush_new_register_welfare_cfg : public ::google::protobuf::Message {
 public:
  msg_flush_new_register_welfare_cfg();
  virtual ~msg_flush_new_register_welfare_cfg();

  msg_flush_new_register_welfare_cfg(const msg_flush_new_register_welfare_cfg& from);

  inline msg_flush_new_register_welfare_cfg& operator=(const msg_flush_new_register_welfare_cfg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_flush_new_register_welfare_cfg& default_instance();

  void Swap(msg_flush_new_register_welfare_cfg* other);

  // implements Message ----------------------------------------------

  msg_flush_new_register_welfare_cfg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_flush_new_register_welfare_cfg& from);
  void MergeFrom(const msg_flush_new_register_welfare_cfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes updatejson = 1;
  inline bool has_updatejson() const;
  inline void clear_updatejson();
  static const int kUpdatejsonFieldNumber = 1;
  inline const ::std::string& updatejson() const;
  inline void set_updatejson(const ::std::string& value);
  inline void set_updatejson(const char* value);
  inline void set_updatejson(const void* value, size_t size);
  inline ::std::string* mutable_updatejson();
  inline ::std::string* release_updatejson();
  inline void set_allocated_updatejson(::std::string* updatejson);

  // @@protoc_insertion_point(class_scope:net.msg_flush_new_register_welfare_cfg)
 private:
  inline void set_has_updatejson();
  inline void clear_has_updatejson();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* updatejson_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_flush_new_register_welfare_cfg* default_instance_;
};
// -------------------------------------------------------------------

class msg_stop_conctrl_player : public ::google::protobuf::Message {
 public:
  msg_stop_conctrl_player();
  virtual ~msg_stop_conctrl_player();

  msg_stop_conctrl_player(const msg_stop_conctrl_player& from);

  inline msg_stop_conctrl_player& operator=(const msg_stop_conctrl_player& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_stop_conctrl_player& default_instance();

  void Swap(msg_stop_conctrl_player* other);

  // implements Message ----------------------------------------------

  msg_stop_conctrl_player* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_stop_conctrl_player& from);
  void MergeFrom(const msg_stop_conctrl_player& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_stop_conctrl_player)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_stop_conctrl_player* default_instance_;
};
// -------------------------------------------------------------------

class msg_syn_ctrl_user_cfg : public ::google::protobuf::Message {
 public:
  msg_syn_ctrl_user_cfg();
  virtual ~msg_syn_ctrl_user_cfg();

  msg_syn_ctrl_user_cfg(const msg_syn_ctrl_user_cfg& from);

  inline msg_syn_ctrl_user_cfg& operator=(const msg_syn_ctrl_user_cfg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_syn_ctrl_user_cfg& default_instance();

  void Swap(msg_syn_ctrl_user_cfg* other);

  // implements Message ----------------------------------------------

  msg_syn_ctrl_user_cfg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_syn_ctrl_user_cfg& from);
  void MergeFrom(const msg_syn_ctrl_user_cfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 vec_suid = 1;
  inline int vec_suid_size() const;
  inline void clear_vec_suid();
  static const int kVecSuidFieldNumber = 1;
  inline ::google::protobuf::uint32 vec_suid(int index) const;
  inline void set_vec_suid(int index, ::google::protobuf::uint32 value);
  inline void add_vec_suid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      vec_suid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_vec_suid();

  // optional uint32 opertype = 2;
  inline bool has_opertype() const;
  inline void clear_opertype();
  static const int kOpertypeFieldNumber = 2;
  inline ::google::protobuf::uint32 opertype() const;
  inline void set_opertype(::google::protobuf::uint32 value);

  // optional uint32 tag_suid = 3;
  inline bool has_tag_suid() const;
  inline void clear_tag_suid();
  static const int kTagSuidFieldNumber = 3;
  inline ::google::protobuf::uint32 tag_suid() const;
  inline void set_tag_suid(::google::protobuf::uint32 value);

  // optional bytes tag_sdeviceid = 4;
  inline bool has_tag_sdeviceid() const;
  inline void clear_tag_sdeviceid();
  static const int kTagSdeviceidFieldNumber = 4;
  inline const ::std::string& tag_sdeviceid() const;
  inline void set_tag_sdeviceid(const ::std::string& value);
  inline void set_tag_sdeviceid(const char* value);
  inline void set_tag_sdeviceid(const void* value, size_t size);
  inline ::std::string* mutable_tag_sdeviceid();
  inline ::std::string* release_tag_sdeviceid();
  inline void set_allocated_tag_sdeviceid(::std::string* tag_sdeviceid);

  // optional uint32 tag_tuid = 5;
  inline bool has_tag_tuid() const;
  inline void clear_tag_tuid();
  static const int kTagTuidFieldNumber = 5;
  inline ::google::protobuf::uint32 tag_tuid() const;
  inline void set_tag_tuid(::google::protobuf::uint32 value);

  // repeated uint32 tag_cgid = 6;
  inline int tag_cgid_size() const;
  inline void clear_tag_cgid();
  static const int kTagCgidFieldNumber = 6;
  inline ::google::protobuf::uint32 tag_cgid(int index) const;
  inline void set_tag_cgid(int index, ::google::protobuf::uint32 value);
  inline void add_tag_cgid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      tag_cgid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_tag_cgid();

  // optional bytes tag_skey = 7;
  inline bool has_tag_skey() const;
  inline void clear_tag_skey();
  static const int kTagSkeyFieldNumber = 7;
  inline const ::std::string& tag_skey() const;
  inline void set_tag_skey(const ::std::string& value);
  inline void set_tag_skey(const char* value);
  inline void set_tag_skey(const void* value, size_t size);
  inline ::std::string* mutable_tag_skey();
  inline ::std::string* release_tag_skey();
  inline void set_allocated_tag_skey(::std::string* tag_skey);

  // @@protoc_insertion_point(class_scope:net.msg_syn_ctrl_user_cfg)
 private:
  inline void set_has_opertype();
  inline void clear_has_opertype();
  inline void set_has_tag_suid();
  inline void clear_has_tag_suid();
  inline void set_has_tag_sdeviceid();
  inline void clear_has_tag_sdeviceid();
  inline void set_has_tag_tuid();
  inline void clear_has_tag_tuid();
  inline void set_has_tag_skey();
  inline void clear_has_tag_skey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > vec_suid_;
  ::google::protobuf::uint32 opertype_;
  ::google::protobuf::uint32 tag_suid_;
  ::std::string* tag_sdeviceid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > tag_cgid_;
  ::std::string* tag_skey_;
  ::google::protobuf::uint32 tag_tuid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_syn_ctrl_user_cfg* default_instance_;
};
// -------------------------------------------------------------------

class msg_change_room_stock_cfg : public ::google::protobuf::Message {
 public:
  msg_change_room_stock_cfg();
  virtual ~msg_change_room_stock_cfg();

  msg_change_room_stock_cfg(const msg_change_room_stock_cfg& from);

  inline msg_change_room_stock_cfg& operator=(const msg_change_room_stock_cfg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_change_room_stock_cfg& default_instance();

  void Swap(msg_change_room_stock_cfg* other);

  // implements Message ----------------------------------------------

  msg_change_room_stock_cfg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_change_room_stock_cfg& from);
  void MergeFrom(const msg_change_room_stock_cfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // optional int64 stock_max = 2;
  inline bool has_stock_max() const;
  inline void clear_stock_max();
  static const int kStockMaxFieldNumber = 2;
  inline ::google::protobuf::int64 stock_max() const;
  inline void set_stock_max(::google::protobuf::int64 value);

  // optional int32 stock_conversion_rate = 3;
  inline bool has_stock_conversion_rate() const;
  inline void clear_stock_conversion_rate();
  static const int kStockConversionRateFieldNumber = 3;
  inline ::google::protobuf::int32 stock_conversion_rate() const;
  inline void set_stock_conversion_rate(::google::protobuf::int32 value);

  // optional int64 jackpot_min = 4;
  inline bool has_jackpot_min() const;
  inline void clear_jackpot_min();
  static const int kJackpotMinFieldNumber = 4;
  inline ::google::protobuf::int64 jackpot_min() const;
  inline void set_jackpot_min(::google::protobuf::int64 value);

  // optional int32 jackpot_max_rate = 5;
  inline bool has_jackpot_max_rate() const;
  inline void clear_jackpot_max_rate();
  static const int kJackpotMaxRateFieldNumber = 5;
  inline ::google::protobuf::int32 jackpot_max_rate() const;
  inline void set_jackpot_max_rate(::google::protobuf::int32 value);

  // optional int32 jackpot_rate = 6;
  inline bool has_jackpot_rate() const;
  inline void clear_jackpot_rate();
  static const int kJackpotRateFieldNumber = 6;
  inline ::google::protobuf::int32 jackpot_rate() const;
  inline void set_jackpot_rate(::google::protobuf::int32 value);

  // optional int32 jackpot_coefficient = 7;
  inline bool has_jackpot_coefficient() const;
  inline void clear_jackpot_coefficient();
  static const int kJackpotCoefficientFieldNumber = 7;
  inline ::google::protobuf::int32 jackpot_coefficient() const;
  inline void set_jackpot_coefficient(::google::protobuf::int32 value);

  // optional int32 jackpot_extract_rate = 8;
  inline bool has_jackpot_extract_rate() const;
  inline void clear_jackpot_extract_rate();
  static const int kJackpotExtractRateFieldNumber = 8;
  inline ::google::protobuf::int32 jackpot_extract_rate() const;
  inline void set_jackpot_extract_rate(::google::protobuf::int32 value);

  // optional int64 add_stock = 9;
  inline bool has_add_stock() const;
  inline void clear_add_stock();
  static const int kAddStockFieldNumber = 9;
  inline ::google::protobuf::int64 add_stock() const;
  inline void set_add_stock(::google::protobuf::int64 value);

  // optional int64 kill_points_line = 10;
  inline bool has_kill_points_line() const;
  inline void clear_kill_points_line();
  static const int kKillPointsLineFieldNumber = 10;
  inline ::google::protobuf::int64 kill_points_line() const;
  inline void set_kill_points_line(::google::protobuf::int64 value);

  // optional int32 player_win_rate = 11;
  inline bool has_player_win_rate() const;
  inline void clear_player_win_rate();
  static const int kPlayerWinRateFieldNumber = 11;
  inline ::google::protobuf::int32 player_win_rate() const;
  inline void set_player_win_rate(::google::protobuf::int32 value);

  // optional int64 add_jackpot = 12;
  inline bool has_add_jackpot() const;
  inline void clear_add_jackpot();
  static const int kAddJackpotFieldNumber = 12;
  inline ::google::protobuf::int64 add_jackpot() const;
  inline void set_add_jackpot(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:net.msg_change_room_stock_cfg)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_stock_max();
  inline void clear_has_stock_max();
  inline void set_has_stock_conversion_rate();
  inline void clear_has_stock_conversion_rate();
  inline void set_has_jackpot_min();
  inline void clear_has_jackpot_min();
  inline void set_has_jackpot_max_rate();
  inline void clear_has_jackpot_max_rate();
  inline void set_has_jackpot_rate();
  inline void clear_has_jackpot_rate();
  inline void set_has_jackpot_coefficient();
  inline void clear_has_jackpot_coefficient();
  inline void set_has_jackpot_extract_rate();
  inline void clear_has_jackpot_extract_rate();
  inline void set_has_add_stock();
  inline void clear_has_add_stock();
  inline void set_has_kill_points_line();
  inline void clear_has_kill_points_line();
  inline void set_has_player_win_rate();
  inline void clear_has_player_win_rate();
  inline void set_has_add_jackpot();
  inline void clear_has_add_jackpot();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 stock_max_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 stock_conversion_rate_;
  ::google::protobuf::int64 jackpot_min_;
  ::google::protobuf::int32 jackpot_max_rate_;
  ::google::protobuf::int32 jackpot_rate_;
  ::google::protobuf::int32 jackpot_coefficient_;
  ::google::protobuf::int32 jackpot_extract_rate_;
  ::google::protobuf::int64 add_stock_;
  ::google::protobuf::int64 kill_points_line_;
  ::google::protobuf::int64 add_jackpot_;
  ::google::protobuf::int32 player_win_rate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_change_room_stock_cfg* default_instance_;
};
// -------------------------------------------------------------------

class msg_syn_lucky_cfg : public ::google::protobuf::Message {
 public:
  msg_syn_lucky_cfg();
  virtual ~msg_syn_lucky_cfg();

  msg_syn_lucky_cfg(const msg_syn_lucky_cfg& from);

  inline msg_syn_lucky_cfg& operator=(const msg_syn_lucky_cfg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_syn_lucky_cfg& default_instance();

  void Swap(msg_syn_lucky_cfg* other);

  // implements Message ----------------------------------------------

  msg_syn_lucky_cfg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_syn_lucky_cfg& from);
  void MergeFrom(const msg_syn_lucky_cfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_syn_lucky_cfg)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_syn_lucky_cfg* default_instance_;
};
// -------------------------------------------------------------------

class msg_syn_fish_cfg : public ::google::protobuf::Message {
 public:
  msg_syn_fish_cfg();
  virtual ~msg_syn_fish_cfg();

  msg_syn_fish_cfg(const msg_syn_fish_cfg& from);

  inline msg_syn_fish_cfg& operator=(const msg_syn_fish_cfg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_syn_fish_cfg& default_instance();

  void Swap(msg_syn_fish_cfg* other);

  // implements Message ----------------------------------------------

  msg_syn_fish_cfg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_syn_fish_cfg& from);
  void MergeFrom(const msg_syn_fish_cfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 prize_min = 2;
  inline bool has_prize_min() const;
  inline void clear_prize_min();
  static const int kPrizeMinFieldNumber = 2;
  inline ::google::protobuf::uint32 prize_min() const;
  inline void set_prize_min(::google::protobuf::uint32 value);

  // optional uint32 prize_max = 3;
  inline bool has_prize_max() const;
  inline void clear_prize_max();
  static const int kPrizeMaxFieldNumber = 3;
  inline ::google::protobuf::uint32 prize_max() const;
  inline void set_prize_max(::google::protobuf::uint32 value);

  // optional uint32 kill_rate = 4;
  inline bool has_kill_rate() const;
  inline void clear_kill_rate();
  static const int kKillRateFieldNumber = 4;
  inline ::google::protobuf::uint32 kill_rate() const;
  inline void set_kill_rate(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_syn_fish_cfg)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_prize_min();
  inline void clear_has_prize_min();
  inline void set_has_prize_max();
  inline void clear_has_prize_max();
  inline void set_has_kill_rate();
  inline void clear_has_kill_rate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 prize_min_;
  ::google::protobuf::uint32 prize_max_;
  ::google::protobuf::uint32 kill_rate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_syn_fish_cfg* default_instance_;
};
// -------------------------------------------------------------------

class msg_reset_lucky_cfg : public ::google::protobuf::Message {
 public:
  msg_reset_lucky_cfg();
  virtual ~msg_reset_lucky_cfg();

  msg_reset_lucky_cfg(const msg_reset_lucky_cfg& from);

  inline msg_reset_lucky_cfg& operator=(const msg_reset_lucky_cfg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_reset_lucky_cfg& default_instance();

  void Swap(msg_reset_lucky_cfg* other);

  // implements Message ----------------------------------------------

  msg_reset_lucky_cfg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_reset_lucky_cfg& from);
  void MergeFrom(const msg_reset_lucky_cfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_reset_lucky_cfg)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_servers_5fmsg_2eproto();
  friend void protobuf_AssignDesc_servers_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_servers_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_reset_lucky_cfg* default_instance_;
};
// ===================================================================


// ===================================================================

// msg_register_svr

// optional uint32 svrid = 1;
inline bool msg_register_svr::has_svrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_register_svr::set_has_svrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_register_svr::clear_has_svrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_register_svr::clear_svrid() {
  svrid_ = 0u;
  clear_has_svrid();
}
inline ::google::protobuf::uint32 msg_register_svr::svrid() const {
  return svrid_;
}
inline void msg_register_svr::set_svrid(::google::protobuf::uint32 value) {
  set_has_svrid();
  svrid_ = value;
}

// optional uint32 game_type = 2;
inline bool msg_register_svr::has_game_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_register_svr::set_has_game_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_register_svr::clear_has_game_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_register_svr::clear_game_type() {
  game_type_ = 0u;
  clear_has_game_type();
}
inline ::google::protobuf::uint32 msg_register_svr::game_type() const {
  return game_type_;
}
inline void msg_register_svr::set_game_type(::google::protobuf::uint32 value) {
  set_has_game_type();
  game_type_ = value;
}

// optional uint32 robot = 3;
inline bool msg_register_svr::has_robot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_register_svr::set_has_robot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_register_svr::clear_has_robot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_register_svr::clear_robot() {
  robot_ = 0u;
  clear_has_robot();
}
inline ::google::protobuf::uint32 msg_register_svr::robot() const {
  return robot_;
}
inline void msg_register_svr::set_robot(::google::protobuf::uint32 value) {
  set_has_robot();
  robot_ = value;
}

// optional uint32 game_subtype = 4;
inline bool msg_register_svr::has_game_subtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_register_svr::set_has_game_subtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_register_svr::clear_has_game_subtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_register_svr::clear_game_subtype() {
  game_subtype_ = 0u;
  clear_has_game_subtype();
}
inline ::google::protobuf::uint32 msg_register_svr::game_subtype() const {
  return game_subtype_;
}
inline void msg_register_svr::set_game_subtype(::google::protobuf::uint32 value) {
  set_has_game_subtype();
  game_subtype_ = value;
}

// -------------------------------------------------------------------

// msg_register_svr_rep

// optional uint32 result = 1;
inline bool msg_register_svr_rep::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_register_svr_rep::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_register_svr_rep::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_register_svr_rep::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 msg_register_svr_rep::result() const {
  return result_;
}
inline void msg_register_svr_rep::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// msg_report_svr_info

// optional uint32 onlines = 1;
inline bool msg_report_svr_info::has_onlines() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_report_svr_info::set_has_onlines() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_report_svr_info::clear_has_onlines() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_report_svr_info::clear_onlines() {
  onlines_ = 0u;
  clear_has_onlines();
}
inline ::google::protobuf::uint32 msg_report_svr_info::onlines() const {
  return onlines_;
}
inline void msg_report_svr_info::set_onlines(::google::protobuf::uint32 value) {
  set_has_onlines();
  onlines_ = value;
}

// optional uint32 robots = 2;
inline bool msg_report_svr_info::has_robots() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_report_svr_info::set_has_robots() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_report_svr_info::clear_has_robots() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_report_svr_info::clear_robots() {
  robots_ = 0u;
  clear_has_robots();
}
inline ::google::protobuf::uint32 msg_report_svr_info::robots() const {
  return robots_;
}
inline void msg_report_svr_info::set_robots(::google::protobuf::uint32 value) {
  set_has_robots();
  robots_ = value;
}

// -------------------------------------------------------------------

// msg_leave_svr

// optional uint32 uid = 1;
inline bool msg_leave_svr::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_leave_svr::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_leave_svr::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_leave_svr::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 msg_leave_svr::uid() const {
  return uid_;
}
inline void msg_leave_svr::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 goto_svr = 2;
inline bool msg_leave_svr::has_goto_svr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_leave_svr::set_has_goto_svr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_leave_svr::clear_has_goto_svr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_leave_svr::clear_goto_svr() {
  goto_svr_ = 0u;
  clear_has_goto_svr();
}
inline ::google::protobuf::uint32 msg_leave_svr::goto_svr() const {
  return goto_svr_;
}
inline void msg_leave_svr::set_goto_svr(::google::protobuf::uint32 value) {
  set_has_goto_svr();
  goto_svr_ = value;
}

// -------------------------------------------------------------------

// msg_notify_net_state

// optional uint32 uid = 1;
inline bool msg_notify_net_state::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_notify_net_state::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_notify_net_state::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_notify_net_state::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 msg_notify_net_state::uid() const {
  return uid_;
}
inline void msg_notify_net_state::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 state = 2;
inline bool msg_notify_net_state::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_notify_net_state::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_notify_net_state::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_notify_net_state::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 msg_notify_net_state::state() const {
  return state_;
}
inline void msg_notify_net_state::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// msg_enter_into_game_svr

// optional uint32 player_type = 1;
inline bool msg_enter_into_game_svr::has_player_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_enter_into_game_svr::set_has_player_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_enter_into_game_svr::clear_has_player_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_enter_into_game_svr::clear_player_type() {
  player_type_ = 0u;
  clear_has_player_type();
}
inline ::google::protobuf::uint32 msg_enter_into_game_svr::player_type() const {
  return player_type_;
}
inline void msg_enter_into_game_svr::set_player_type(::google::protobuf::uint32 value) {
  set_has_player_type();
  player_type_ = value;
}

// optional .net.base_info base_data = 2;
inline bool msg_enter_into_game_svr::has_base_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_enter_into_game_svr::set_has_base_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_enter_into_game_svr::clear_has_base_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_enter_into_game_svr::clear_base_data() {
  if (base_data_ != NULL) base_data_->::net::base_info::Clear();
  clear_has_base_data();
}
inline const ::net::base_info& msg_enter_into_game_svr::base_data() const {
  return base_data_ != NULL ? *base_data_ : *default_instance_->base_data_;
}
inline ::net::base_info* msg_enter_into_game_svr::mutable_base_data() {
  set_has_base_data();
  if (base_data_ == NULL) base_data_ = new ::net::base_info;
  return base_data_;
}
inline ::net::base_info* msg_enter_into_game_svr::release_base_data() {
  clear_has_base_data();
  ::net::base_info* temp = base_data_;
  base_data_ = NULL;
  return temp;
}
inline void msg_enter_into_game_svr::set_allocated_base_data(::net::base_info* base_data) {
  delete base_data_;
  base_data_ = base_data;
  if (base_data) {
    set_has_base_data();
  } else {
    clear_has_base_data();
  }
}

// optional .net.game_data_info game_data = 3;
inline bool msg_enter_into_game_svr::has_game_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_enter_into_game_svr::set_has_game_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_enter_into_game_svr::clear_has_game_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_enter_into_game_svr::clear_game_data() {
  if (game_data_ != NULL) game_data_->::net::game_data_info::Clear();
  clear_has_game_data();
}
inline const ::net::game_data_info& msg_enter_into_game_svr::game_data() const {
  return game_data_ != NULL ? *game_data_ : *default_instance_->game_data_;
}
inline ::net::game_data_info* msg_enter_into_game_svr::mutable_game_data() {
  set_has_game_data();
  if (game_data_ == NULL) game_data_ = new ::net::game_data_info;
  return game_data_;
}
inline ::net::game_data_info* msg_enter_into_game_svr::release_game_data() {
  clear_has_game_data();
  ::net::game_data_info* temp = game_data_;
  game_data_ = NULL;
  return temp;
}
inline void msg_enter_into_game_svr::set_allocated_game_data(::net::game_data_info* game_data) {
  delete game_data_;
  game_data_ = game_data;
  if (game_data) {
    set_has_game_data();
  } else {
    clear_has_game_data();
  }
}

// optional uint32 ctrl_flag = 4;
inline bool msg_enter_into_game_svr::has_ctrl_flag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_enter_into_game_svr::set_has_ctrl_flag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_enter_into_game_svr::clear_has_ctrl_flag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_enter_into_game_svr::clear_ctrl_flag() {
  ctrl_flag_ = 0u;
  clear_has_ctrl_flag();
}
inline ::google::protobuf::uint32 msg_enter_into_game_svr::ctrl_flag() const {
  return ctrl_flag_;
}
inline void msg_enter_into_game_svr::set_ctrl_flag(::google::protobuf::uint32 value) {
  set_has_ctrl_flag();
  ctrl_flag_ = value;
}

// -------------------------------------------------------------------

// msg_notify_change_account_data

// optional uint32 uid = 1;
inline bool msg_notify_change_account_data::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_notify_change_account_data::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_notify_change_account_data::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_notify_change_account_data::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 msg_notify_change_account_data::uid() const {
  return uid_;
}
inline void msg_notify_change_account_data::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional int64 diamond = 2;
inline bool msg_notify_change_account_data::has_diamond() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_notify_change_account_data::set_has_diamond() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_notify_change_account_data::clear_has_diamond() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_notify_change_account_data::clear_diamond() {
  diamond_ = GOOGLE_LONGLONG(0);
  clear_has_diamond();
}
inline ::google::protobuf::int64 msg_notify_change_account_data::diamond() const {
  return diamond_;
}
inline void msg_notify_change_account_data::set_diamond(::google::protobuf::int64 value) {
  set_has_diamond();
  diamond_ = value;
}

// optional int64 coin = 3;
inline bool msg_notify_change_account_data::has_coin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_notify_change_account_data::set_has_coin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_notify_change_account_data::clear_has_coin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_notify_change_account_data::clear_coin() {
  coin_ = GOOGLE_LONGLONG(0);
  clear_has_coin();
}
inline ::google::protobuf::int64 msg_notify_change_account_data::coin() const {
  return coin_;
}
inline void msg_notify_change_account_data::set_coin(::google::protobuf::int64 value) {
  set_has_coin();
  coin_ = value;
}

// optional int64 score = 4;
inline bool msg_notify_change_account_data::has_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_notify_change_account_data::set_has_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_notify_change_account_data::clear_has_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_notify_change_account_data::clear_score() {
  score_ = GOOGLE_LONGLONG(0);
  clear_has_score();
}
inline ::google::protobuf::int64 msg_notify_change_account_data::score() const {
  return score_;
}
inline void msg_notify_change_account_data::set_score(::google::protobuf::int64 value) {
  set_has_score();
  score_ = value;
}

// optional int64 ingot = 5;
inline bool msg_notify_change_account_data::has_ingot() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_notify_change_account_data::set_has_ingot() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_notify_change_account_data::clear_has_ingot() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_notify_change_account_data::clear_ingot() {
  ingot_ = GOOGLE_LONGLONG(0);
  clear_has_ingot();
}
inline ::google::protobuf::int64 msg_notify_change_account_data::ingot() const {
  return ingot_;
}
inline void msg_notify_change_account_data::set_ingot(::google::protobuf::int64 value) {
  set_has_ingot();
  ingot_ = value;
}

// optional int64 cvalue = 6;
inline bool msg_notify_change_account_data::has_cvalue() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_notify_change_account_data::set_has_cvalue() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_notify_change_account_data::clear_has_cvalue() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_notify_change_account_data::clear_cvalue() {
  cvalue_ = GOOGLE_LONGLONG(0);
  clear_has_cvalue();
}
inline ::google::protobuf::int64 msg_notify_change_account_data::cvalue() const {
  return cvalue_;
}
inline void msg_notify_change_account_data::set_cvalue(::google::protobuf::int64 value) {
  set_has_cvalue();
  cvalue_ = value;
}

// optional uint32 oper_type = 7;
inline bool msg_notify_change_account_data::has_oper_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_notify_change_account_data::set_has_oper_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_notify_change_account_data::clear_has_oper_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_notify_change_account_data::clear_oper_type() {
  oper_type_ = 0u;
  clear_has_oper_type();
}
inline ::google::protobuf::uint32 msg_notify_change_account_data::oper_type() const {
  return oper_type_;
}
inline void msg_notify_change_account_data::set_oper_type(::google::protobuf::uint32 value) {
  set_has_oper_type();
  oper_type_ = value;
}

// optional uint32 sub_type = 8;
inline bool msg_notify_change_account_data::has_sub_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void msg_notify_change_account_data::set_has_sub_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void msg_notify_change_account_data::clear_has_sub_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void msg_notify_change_account_data::clear_sub_type() {
  sub_type_ = 0u;
  clear_has_sub_type();
}
inline ::google::protobuf::uint32 msg_notify_change_account_data::sub_type() const {
  return sub_type_;
}
inline void msg_notify_change_account_data::set_sub_type(::google::protobuf::uint32 value) {
  set_has_sub_type();
  sub_type_ = value;
}

// optional int64 safe_coin = 9;
inline bool msg_notify_change_account_data::has_safe_coin() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void msg_notify_change_account_data::set_has_safe_coin() {
  _has_bits_[0] |= 0x00000100u;
}
inline void msg_notify_change_account_data::clear_has_safe_coin() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void msg_notify_change_account_data::clear_safe_coin() {
  safe_coin_ = GOOGLE_LONGLONG(0);
  clear_has_safe_coin();
}
inline ::google::protobuf::int64 msg_notify_change_account_data::safe_coin() const {
  return safe_coin_;
}
inline void msg_notify_change_account_data::set_safe_coin(::google::protobuf::int64 value) {
  set_has_safe_coin();
  safe_coin_ = value;
}

// optional bytes chessid = 10;
inline bool msg_notify_change_account_data::has_chessid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void msg_notify_change_account_data::set_has_chessid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void msg_notify_change_account_data::clear_has_chessid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void msg_notify_change_account_data::clear_chessid() {
  if (chessid_ != &::google::protobuf::internal::kEmptyString) {
    chessid_->clear();
  }
  clear_has_chessid();
}
inline const ::std::string& msg_notify_change_account_data::chessid() const {
  return *chessid_;
}
inline void msg_notify_change_account_data::set_chessid(const ::std::string& value) {
  set_has_chessid();
  if (chessid_ == &::google::protobuf::internal::kEmptyString) {
    chessid_ = new ::std::string;
  }
  chessid_->assign(value);
}
inline void msg_notify_change_account_data::set_chessid(const char* value) {
  set_has_chessid();
  if (chessid_ == &::google::protobuf::internal::kEmptyString) {
    chessid_ = new ::std::string;
  }
  chessid_->assign(value);
}
inline void msg_notify_change_account_data::set_chessid(const void* value, size_t size) {
  set_has_chessid();
  if (chessid_ == &::google::protobuf::internal::kEmptyString) {
    chessid_ = new ::std::string;
  }
  chessid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_notify_change_account_data::mutable_chessid() {
  set_has_chessid();
  if (chessid_ == &::google::protobuf::internal::kEmptyString) {
    chessid_ = new ::std::string;
  }
  return chessid_;
}
inline ::std::string* msg_notify_change_account_data::release_chessid() {
  clear_has_chessid();
  if (chessid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = chessid_;
    chessid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_notify_change_account_data::set_allocated_chessid(::std::string* chessid) {
  if (chessid_ != &::google::protobuf::internal::kEmptyString) {
    delete chessid_;
  }
  if (chessid) {
    set_has_chessid();
    chessid_ = chessid;
  } else {
    clear_has_chessid();
    chessid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// msg_update_lobby_change_account_data

// optional uint32 uid = 1;
inline bool msg_update_lobby_change_account_data::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_update_lobby_change_account_data::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_update_lobby_change_account_data::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_update_lobby_change_account_data::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 msg_update_lobby_change_account_data::uid() const {
  return uid_;
}
inline void msg_update_lobby_change_account_data::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional int64 diamond = 2;
inline bool msg_update_lobby_change_account_data::has_diamond() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_update_lobby_change_account_data::set_has_diamond() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_update_lobby_change_account_data::clear_has_diamond() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_update_lobby_change_account_data::clear_diamond() {
  diamond_ = GOOGLE_LONGLONG(0);
  clear_has_diamond();
}
inline ::google::protobuf::int64 msg_update_lobby_change_account_data::diamond() const {
  return diamond_;
}
inline void msg_update_lobby_change_account_data::set_diamond(::google::protobuf::int64 value) {
  set_has_diamond();
  diamond_ = value;
}

// optional int64 coin = 3;
inline bool msg_update_lobby_change_account_data::has_coin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_update_lobby_change_account_data::set_has_coin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_update_lobby_change_account_data::clear_has_coin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_update_lobby_change_account_data::clear_coin() {
  coin_ = GOOGLE_LONGLONG(0);
  clear_has_coin();
}
inline ::google::protobuf::int64 msg_update_lobby_change_account_data::coin() const {
  return coin_;
}
inline void msg_update_lobby_change_account_data::set_coin(::google::protobuf::int64 value) {
  set_has_coin();
  coin_ = value;
}

// optional int64 score = 4;
inline bool msg_update_lobby_change_account_data::has_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_update_lobby_change_account_data::set_has_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_update_lobby_change_account_data::clear_has_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_update_lobby_change_account_data::clear_score() {
  score_ = GOOGLE_LONGLONG(0);
  clear_has_score();
}
inline ::google::protobuf::int64 msg_update_lobby_change_account_data::score() const {
  return score_;
}
inline void msg_update_lobby_change_account_data::set_score(::google::protobuf::int64 value) {
  set_has_score();
  score_ = value;
}

// optional int64 ingot = 5;
inline bool msg_update_lobby_change_account_data::has_ingot() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_update_lobby_change_account_data::set_has_ingot() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_update_lobby_change_account_data::clear_has_ingot() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_update_lobby_change_account_data::clear_ingot() {
  ingot_ = GOOGLE_LONGLONG(0);
  clear_has_ingot();
}
inline ::google::protobuf::int64 msg_update_lobby_change_account_data::ingot() const {
  return ingot_;
}
inline void msg_update_lobby_change_account_data::set_ingot(::google::protobuf::int64 value) {
  set_has_ingot();
  ingot_ = value;
}

// optional int64 cvalue = 6;
inline bool msg_update_lobby_change_account_data::has_cvalue() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_update_lobby_change_account_data::set_has_cvalue() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_update_lobby_change_account_data::clear_has_cvalue() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_update_lobby_change_account_data::clear_cvalue() {
  cvalue_ = GOOGLE_LONGLONG(0);
  clear_has_cvalue();
}
inline ::google::protobuf::int64 msg_update_lobby_change_account_data::cvalue() const {
  return cvalue_;
}
inline void msg_update_lobby_change_account_data::set_cvalue(::google::protobuf::int64 value) {
  set_has_cvalue();
  cvalue_ = value;
}

// optional uint32 oper_type = 7;
inline bool msg_update_lobby_change_account_data::has_oper_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_update_lobby_change_account_data::set_has_oper_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_update_lobby_change_account_data::clear_has_oper_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_update_lobby_change_account_data::clear_oper_type() {
  oper_type_ = 0u;
  clear_has_oper_type();
}
inline ::google::protobuf::uint32 msg_update_lobby_change_account_data::oper_type() const {
  return oper_type_;
}
inline void msg_update_lobby_change_account_data::set_oper_type(::google::protobuf::uint32 value) {
  set_has_oper_type();
  oper_type_ = value;
}

// optional uint32 sub_type = 8;
inline bool msg_update_lobby_change_account_data::has_sub_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void msg_update_lobby_change_account_data::set_has_sub_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void msg_update_lobby_change_account_data::clear_has_sub_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void msg_update_lobby_change_account_data::clear_sub_type() {
  sub_type_ = 0u;
  clear_has_sub_type();
}
inline ::google::protobuf::uint32 msg_update_lobby_change_account_data::sub_type() const {
  return sub_type_;
}
inline void msg_update_lobby_change_account_data::set_sub_type(::google::protobuf::uint32 value) {
  set_has_sub_type();
  sub_type_ = value;
}

// optional int64 safe_coin = 9;
inline bool msg_update_lobby_change_account_data::has_safe_coin() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void msg_update_lobby_change_account_data::set_has_safe_coin() {
  _has_bits_[0] |= 0x00000100u;
}
inline void msg_update_lobby_change_account_data::clear_has_safe_coin() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void msg_update_lobby_change_account_data::clear_safe_coin() {
  safe_coin_ = GOOGLE_LONGLONG(0);
  clear_has_safe_coin();
}
inline ::google::protobuf::int64 msg_update_lobby_change_account_data::safe_coin() const {
  return safe_coin_;
}
inline void msg_update_lobby_change_account_data::set_safe_coin(::google::protobuf::int64 value) {
  set_has_safe_coin();
  safe_coin_ = value;
}

// optional bytes chessid = 10;
inline bool msg_update_lobby_change_account_data::has_chessid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void msg_update_lobby_change_account_data::set_has_chessid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void msg_update_lobby_change_account_data::clear_has_chessid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void msg_update_lobby_change_account_data::clear_chessid() {
  if (chessid_ != &::google::protobuf::internal::kEmptyString) {
    chessid_->clear();
  }
  clear_has_chessid();
}
inline const ::std::string& msg_update_lobby_change_account_data::chessid() const {
  return *chessid_;
}
inline void msg_update_lobby_change_account_data::set_chessid(const ::std::string& value) {
  set_has_chessid();
  if (chessid_ == &::google::protobuf::internal::kEmptyString) {
    chessid_ = new ::std::string;
  }
  chessid_->assign(value);
}
inline void msg_update_lobby_change_account_data::set_chessid(const char* value) {
  set_has_chessid();
  if (chessid_ == &::google::protobuf::internal::kEmptyString) {
    chessid_ = new ::std::string;
  }
  chessid_->assign(value);
}
inline void msg_update_lobby_change_account_data::set_chessid(const void* value, size_t size) {
  set_has_chessid();
  if (chessid_ == &::google::protobuf::internal::kEmptyString) {
    chessid_ = new ::std::string;
  }
  chessid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_update_lobby_change_account_data::mutable_chessid() {
  set_has_chessid();
  if (chessid_ == &::google::protobuf::internal::kEmptyString) {
    chessid_ = new ::std::string;
  }
  return chessid_;
}
inline ::std::string* msg_update_lobby_change_account_data::release_chessid() {
  clear_has_chessid();
  if (chessid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = chessid_;
    chessid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_update_lobby_change_account_data::set_allocated_chessid(::std::string* chessid) {
  if (chessid_ != &::google::protobuf::internal::kEmptyString) {
    delete chessid_;
  }
  if (chessid) {
    set_has_chessid();
    chessid_ = chessid;
  } else {
    clear_has_chessid();
    chessid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// msg_notify_change_playerinfo

// optional uint32 safebox = 1;
inline bool msg_notify_change_playerinfo::has_safebox() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_notify_change_playerinfo::set_has_safebox() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_notify_change_playerinfo::clear_has_safebox() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_notify_change_playerinfo::clear_safebox() {
  safebox_ = 0u;
  clear_has_safebox();
}
inline ::google::protobuf::uint32 msg_notify_change_playerinfo::safebox() const {
  return safebox_;
}
inline void msg_notify_change_playerinfo::set_safebox(::google::protobuf::uint32 value) {
  set_has_safebox();
  safebox_ = value;
}

// optional bytes name = 2;
inline bool msg_notify_change_playerinfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_notify_change_playerinfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_notify_change_playerinfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_notify_change_playerinfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& msg_notify_change_playerinfo::name() const {
  return *name_;
}
inline void msg_notify_change_playerinfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void msg_notify_change_playerinfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void msg_notify_change_playerinfo::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_notify_change_playerinfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* msg_notify_change_playerinfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_notify_change_playerinfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// msg_notify_stop_service

// optional uint32 btime = 1;
inline bool msg_notify_stop_service::has_btime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_notify_stop_service::set_has_btime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_notify_stop_service::clear_has_btime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_notify_stop_service::clear_btime() {
  btime_ = 0u;
  clear_has_btime();
}
inline ::google::protobuf::uint32 msg_notify_stop_service::btime() const {
  return btime_;
}
inline void msg_notify_stop_service::set_btime(::google::protobuf::uint32 value) {
  set_has_btime();
  btime_ = value;
}

// optional uint32 etime = 2;
inline bool msg_notify_stop_service::has_etime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_notify_stop_service::set_has_etime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_notify_stop_service::clear_has_etime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_notify_stop_service::clear_etime() {
  etime_ = 0u;
  clear_has_etime();
}
inline ::google::protobuf::uint32 msg_notify_stop_service::etime() const {
  return etime_;
}
inline void msg_notify_stop_service::set_etime(::google::protobuf::uint32 value) {
  set_has_etime();
  etime_ = value;
}

// -------------------------------------------------------------------

// land_game_result

// optional uint32 is_spring = 1;
inline bool land_game_result::has_is_spring() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void land_game_result::set_has_is_spring() {
  _has_bits_[0] |= 0x00000001u;
}
inline void land_game_result::clear_has_is_spring() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void land_game_result::clear_is_spring() {
  is_spring_ = 0u;
  clear_has_is_spring();
}
inline ::google::protobuf::uint32 land_game_result::is_spring() const {
  return is_spring_;
}
inline void land_game_result::set_is_spring(::google::protobuf::uint32 value) {
  set_has_is_spring();
  is_spring_ = value;
}

// optional uint32 is_land = 2;
inline bool land_game_result::has_is_land() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void land_game_result::set_has_is_land() {
  _has_bits_[0] |= 0x00000002u;
}
inline void land_game_result::clear_has_is_land() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void land_game_result::clear_is_land() {
  is_land_ = 0u;
  clear_has_is_land();
}
inline ::google::protobuf::uint32 land_game_result::is_land() const {
  return is_land_;
}
inline void land_game_result::set_is_land(::google::protobuf::uint32 value) {
  set_has_is_land();
  is_land_ = value;
}

// optional uint32 deal = 3;
inline bool land_game_result::has_deal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void land_game_result::set_has_deal() {
  _has_bits_[0] |= 0x00000004u;
}
inline void land_game_result::clear_has_deal() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void land_game_result::clear_deal() {
  deal_ = 0u;
  clear_has_deal();
}
inline ::google::protobuf::uint32 land_game_result::deal() const {
  return deal_;
}
inline void land_game_result::set_deal(::google::protobuf::uint32 value) {
  set_has_deal();
  deal_ = value;
}

// optional uint64 enter_min = 4;
inline bool land_game_result::has_enter_min() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void land_game_result::set_has_enter_min() {
  _has_bits_[0] |= 0x00000008u;
}
inline void land_game_result::clear_has_enter_min() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void land_game_result::clear_enter_min() {
  enter_min_ = GOOGLE_ULONGLONG(0);
  clear_has_enter_min();
}
inline ::google::protobuf::uint64 land_game_result::enter_min() const {
  return enter_min_;
}
inline void land_game_result::set_enter_min(::google::protobuf::uint64 value) {
  set_has_enter_min();
  enter_min_ = value;
}

// optional uint32 basescore = 5;
inline bool land_game_result::has_basescore() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void land_game_result::set_has_basescore() {
  _has_bits_[0] |= 0x00000010u;
}
inline void land_game_result::clear_has_basescore() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void land_game_result::clear_basescore() {
  basescore_ = 0u;
  clear_has_basescore();
}
inline ::google::protobuf::uint32 land_game_result::basescore() const {
  return basescore_;
}
inline void land_game_result::set_basescore(::google::protobuf::uint32 value) {
  set_has_basescore();
  basescore_ = value;
}

// optional uint32 press_count = 6;
inline bool land_game_result::has_press_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void land_game_result::set_has_press_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void land_game_result::clear_has_press_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void land_game_result::clear_press_count() {
  press_count_ = 0u;
  clear_has_press_count();
}
inline ::google::protobuf::uint32 land_game_result::press_count() const {
  return press_count_;
}
inline void land_game_result::set_press_count(::google::protobuf::uint32 value) {
  set_has_press_count();
  press_count_ = value;
}

// optional uint32 bankrupt_count = 7;
inline bool land_game_result::has_bankrupt_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void land_game_result::set_has_bankrupt_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void land_game_result::clear_has_bankrupt_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void land_game_result::clear_bankrupt_count() {
  bankrupt_count_ = 0u;
  clear_has_bankrupt_count();
}
inline ::google::protobuf::uint32 land_game_result::bankrupt_count() const {
  return bankrupt_count_;
}
inline void land_game_result::set_bankrupt_count(::google::protobuf::uint32 value) {
  set_has_bankrupt_count();
  bankrupt_count_ = value;
}

// -------------------------------------------------------------------

// msg_report_game_result

// optional uint32 uid = 1;
inline bool msg_report_game_result::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_report_game_result::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_report_game_result::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_report_game_result::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 msg_report_game_result::uid() const {
  return uid_;
}
inline void msg_report_game_result::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 consume = 2;
inline bool msg_report_game_result::has_consume() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_report_game_result::set_has_consume() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_report_game_result::clear_has_consume() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_report_game_result::clear_consume() {
  consume_ = 0u;
  clear_has_consume();
}
inline ::google::protobuf::uint32 msg_report_game_result::consume() const {
  return consume_;
}
inline void msg_report_game_result::set_consume(::google::protobuf::uint32 value) {
  set_has_consume();
  consume_ = value;
}

// optional uint32 game_type = 3;
inline bool msg_report_game_result::has_game_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_report_game_result::set_has_game_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_report_game_result::clear_has_game_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_report_game_result::clear_game_type() {
  game_type_ = 0u;
  clear_has_game_type();
}
inline ::google::protobuf::uint32 msg_report_game_result::game_type() const {
  return game_type_;
}
inline void msg_report_game_result::set_game_type(::google::protobuf::uint32 value) {
  set_has_game_type();
  game_type_ = value;
}

// optional uint32 roomid = 4;
inline bool msg_report_game_result::has_roomid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_report_game_result::set_has_roomid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_report_game_result::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_report_game_result::clear_roomid() {
  roomid_ = 0u;
  clear_has_roomid();
}
inline ::google::protobuf::uint32 msg_report_game_result::roomid() const {
  return roomid_;
}
inline void msg_report_game_result::set_roomid(::google::protobuf::uint32 value) {
  set_has_roomid();
  roomid_ = value;
}

// optional int64 win_score = 5;
inline bool msg_report_game_result::has_win_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_report_game_result::set_has_win_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_report_game_result::clear_has_win_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_report_game_result::clear_win_score() {
  win_score_ = GOOGLE_LONGLONG(0);
  clear_has_win_score();
}
inline ::google::protobuf::int64 msg_report_game_result::win_score() const {
  return win_score_;
}
inline void msg_report_game_result::set_win_score(::google::protobuf::int64 value) {
  set_has_win_score();
  win_score_ = value;
}

// optional int64 ex_win_score = 6;
inline bool msg_report_game_result::has_ex_win_score() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_report_game_result::set_has_ex_win_score() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_report_game_result::clear_has_ex_win_score() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_report_game_result::clear_ex_win_score() {
  ex_win_score_ = GOOGLE_LONGLONG(0);
  clear_has_ex_win_score();
}
inline ::google::protobuf::int64 msg_report_game_result::ex_win_score() const {
  return ex_win_score_;
}
inline void msg_report_game_result::set_ex_win_score(::google::protobuf::int64 value) {
  set_has_ex_win_score();
  ex_win_score_ = value;
}

// optional int64 bet_score = 7;
inline bool msg_report_game_result::has_bet_score() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_report_game_result::set_has_bet_score() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_report_game_result::clear_has_bet_score() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_report_game_result::clear_bet_score() {
  bet_score_ = GOOGLE_LONGLONG(0);
  clear_has_bet_score();
}
inline ::google::protobuf::int64 msg_report_game_result::bet_score() const {
  return bet_score_;
}
inline void msg_report_game_result::set_bet_score(::google::protobuf::int64 value) {
  set_has_bet_score();
  bet_score_ = value;
}

// optional int32 branker = 8;
inline bool msg_report_game_result::has_branker() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void msg_report_game_result::set_has_branker() {
  _has_bits_[0] |= 0x00000080u;
}
inline void msg_report_game_result::clear_has_branker() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void msg_report_game_result::clear_branker() {
  branker_ = 0;
  clear_has_branker();
}
inline ::google::protobuf::int32 msg_report_game_result::branker() const {
  return branker_;
}
inline void msg_report_game_result::set_branker(::google::protobuf::int32 value) {
  set_has_branker();
  branker_ = value;
}

// optional int32 welcount = 9;
inline bool msg_report_game_result::has_welcount() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void msg_report_game_result::set_has_welcount() {
  _has_bits_[0] |= 0x00000100u;
}
inline void msg_report_game_result::clear_has_welcount() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void msg_report_game_result::clear_welcount() {
  welcount_ = 0;
  clear_has_welcount();
}
inline ::google::protobuf::int32 msg_report_game_result::welcount() const {
  return welcount_;
}
inline void msg_report_game_result::set_welcount(::google::protobuf::int32 value) {
  set_has_welcount();
  welcount_ = value;
}

// optional uint64 weltime = 10;
inline bool msg_report_game_result::has_weltime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void msg_report_game_result::set_has_weltime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void msg_report_game_result::clear_has_weltime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void msg_report_game_result::clear_weltime() {
  weltime_ = GOOGLE_ULONGLONG(0);
  clear_has_weltime();
}
inline ::google::protobuf::uint64 msg_report_game_result::weltime() const {
  return weltime_;
}
inline void msg_report_game_result::set_weltime(::google::protobuf::uint64 value) {
  set_has_weltime();
  weltime_ = value;
}

// optional .net.land_game_result land = 11;
inline bool msg_report_game_result::has_land() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void msg_report_game_result::set_has_land() {
  _has_bits_[0] |= 0x00000400u;
}
inline void msg_report_game_result::clear_has_land() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void msg_report_game_result::clear_land() {
  if (land_ != NULL) land_->::net::land_game_result::Clear();
  clear_has_land();
}
inline const ::net::land_game_result& msg_report_game_result::land() const {
  return land_ != NULL ? *land_ : *default_instance_->land_;
}
inline ::net::land_game_result* msg_report_game_result::mutable_land() {
  set_has_land();
  if (land_ == NULL) land_ = new ::net::land_game_result;
  return land_;
}
inline ::net::land_game_result* msg_report_game_result::release_land() {
  clear_has_land();
  ::net::land_game_result* temp = land_;
  land_ = NULL;
  return temp;
}
inline void msg_report_game_result::set_allocated_land(::net::land_game_result* land) {
  delete land_;
  land_ = land;
  if (land) {
    set_has_land();
  } else {
    clear_has_land();
  }
}

// -------------------------------------------------------------------

// msg_report_fee_log

// optional uint32 uid = 1;
inline bool msg_report_fee_log::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_report_fee_log::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_report_fee_log::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_report_fee_log::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 msg_report_fee_log::uid() const {
  return uid_;
}
inline void msg_report_fee_log::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional int64 fee_win = 2;
inline bool msg_report_fee_log::has_fee_win() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_report_fee_log::set_has_fee_win() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_report_fee_log::clear_has_fee_win() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_report_fee_log::clear_fee_win() {
  fee_win_ = GOOGLE_LONGLONG(0);
  clear_has_fee_win();
}
inline ::google::protobuf::int64 msg_report_fee_log::fee_win() const {
  return fee_win_;
}
inline void msg_report_fee_log::set_fee_win(::google::protobuf::int64 value) {
  set_has_fee_win();
  fee_win_ = value;
}

// optional int64 fee_lose = 3;
inline bool msg_report_fee_log::has_fee_lose() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_report_fee_log::set_has_fee_lose() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_report_fee_log::clear_has_fee_lose() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_report_fee_log::clear_fee_lose() {
  fee_lose_ = GOOGLE_LONGLONG(0);
  clear_has_fee_lose();
}
inline ::google::protobuf::int64 msg_report_fee_log::fee_lose() const {
  return fee_lose_;
}
inline void msg_report_fee_log::set_fee_lose(::google::protobuf::int64 value) {
  set_has_fee_lose();
  fee_lose_ = value;
}

// -------------------------------------------------------------------

// msg_leave_robot

// optional uint32 uid = 1;
inline bool msg_leave_robot::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_leave_robot::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_leave_robot::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_leave_robot::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 msg_leave_robot::uid() const {
  return uid_;
}
inline void msg_leave_robot::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// -------------------------------------------------------------------

// msg_flush_change_account_data

// optional uint32 uid = 1;
inline bool msg_flush_change_account_data::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_flush_change_account_data::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_flush_change_account_data::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_flush_change_account_data::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 msg_flush_change_account_data::uid() const {
  return uid_;
}
inline void msg_flush_change_account_data::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional int64 diamond = 2;
inline bool msg_flush_change_account_data::has_diamond() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_flush_change_account_data::set_has_diamond() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_flush_change_account_data::clear_has_diamond() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_flush_change_account_data::clear_diamond() {
  diamond_ = GOOGLE_LONGLONG(0);
  clear_has_diamond();
}
inline ::google::protobuf::int64 msg_flush_change_account_data::diamond() const {
  return diamond_;
}
inline void msg_flush_change_account_data::set_diamond(::google::protobuf::int64 value) {
  set_has_diamond();
  diamond_ = value;
}

// optional int64 coin = 3;
inline bool msg_flush_change_account_data::has_coin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_flush_change_account_data::set_has_coin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_flush_change_account_data::clear_has_coin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_flush_change_account_data::clear_coin() {
  coin_ = GOOGLE_LONGLONG(0);
  clear_has_coin();
}
inline ::google::protobuf::int64 msg_flush_change_account_data::coin() const {
  return coin_;
}
inline void msg_flush_change_account_data::set_coin(::google::protobuf::int64 value) {
  set_has_coin();
  coin_ = value;
}

// optional int64 score = 4;
inline bool msg_flush_change_account_data::has_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_flush_change_account_data::set_has_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_flush_change_account_data::clear_has_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_flush_change_account_data::clear_score() {
  score_ = GOOGLE_LONGLONG(0);
  clear_has_score();
}
inline ::google::protobuf::int64 msg_flush_change_account_data::score() const {
  return score_;
}
inline void msg_flush_change_account_data::set_score(::google::protobuf::int64 value) {
  set_has_score();
  score_ = value;
}

// optional int64 ingot = 5;
inline bool msg_flush_change_account_data::has_ingot() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_flush_change_account_data::set_has_ingot() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_flush_change_account_data::clear_has_ingot() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_flush_change_account_data::clear_ingot() {
  ingot_ = GOOGLE_LONGLONG(0);
  clear_has_ingot();
}
inline ::google::protobuf::int64 msg_flush_change_account_data::ingot() const {
  return ingot_;
}
inline void msg_flush_change_account_data::set_ingot(::google::protobuf::int64 value) {
  set_has_ingot();
  ingot_ = value;
}

// optional int64 cvalue = 6;
inline bool msg_flush_change_account_data::has_cvalue() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_flush_change_account_data::set_has_cvalue() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_flush_change_account_data::clear_has_cvalue() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_flush_change_account_data::clear_cvalue() {
  cvalue_ = GOOGLE_LONGLONG(0);
  clear_has_cvalue();
}
inline ::google::protobuf::int64 msg_flush_change_account_data::cvalue() const {
  return cvalue_;
}
inline void msg_flush_change_account_data::set_cvalue(::google::protobuf::int64 value) {
  set_has_cvalue();
  cvalue_ = value;
}

// optional int64 safe_coin = 7;
inline bool msg_flush_change_account_data::has_safe_coin() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_flush_change_account_data::set_has_safe_coin() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_flush_change_account_data::clear_has_safe_coin() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_flush_change_account_data::clear_safe_coin() {
  safe_coin_ = GOOGLE_LONGLONG(0);
  clear_has_safe_coin();
}
inline ::google::protobuf::int64 msg_flush_change_account_data::safe_coin() const {
  return safe_coin_;
}
inline void msg_flush_change_account_data::set_safe_coin(::google::protobuf::int64 value) {
  set_has_safe_coin();
  safe_coin_ = value;
}

// -------------------------------------------------------------------

// msg_update_change_account_data

// optional uint32 uid = 1;
inline bool msg_update_change_account_data::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_update_change_account_data::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_update_change_account_data::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_update_change_account_data::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 msg_update_change_account_data::uid() const {
  return uid_;
}
inline void msg_update_change_account_data::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional int64 diamond = 2;
inline bool msg_update_change_account_data::has_diamond() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_update_change_account_data::set_has_diamond() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_update_change_account_data::clear_has_diamond() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_update_change_account_data::clear_diamond() {
  diamond_ = GOOGLE_LONGLONG(0);
  clear_has_diamond();
}
inline ::google::protobuf::int64 msg_update_change_account_data::diamond() const {
  return diamond_;
}
inline void msg_update_change_account_data::set_diamond(::google::protobuf::int64 value) {
  set_has_diamond();
  diamond_ = value;
}

// optional int64 coin = 3;
inline bool msg_update_change_account_data::has_coin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_update_change_account_data::set_has_coin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_update_change_account_data::clear_has_coin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_update_change_account_data::clear_coin() {
  coin_ = GOOGLE_LONGLONG(0);
  clear_has_coin();
}
inline ::google::protobuf::int64 msg_update_change_account_data::coin() const {
  return coin_;
}
inline void msg_update_change_account_data::set_coin(::google::protobuf::int64 value) {
  set_has_coin();
  coin_ = value;
}

// optional int64 score = 4;
inline bool msg_update_change_account_data::has_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_update_change_account_data::set_has_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_update_change_account_data::clear_has_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_update_change_account_data::clear_score() {
  score_ = GOOGLE_LONGLONG(0);
  clear_has_score();
}
inline ::google::protobuf::int64 msg_update_change_account_data::score() const {
  return score_;
}
inline void msg_update_change_account_data::set_score(::google::protobuf::int64 value) {
  set_has_score();
  score_ = value;
}

// optional int64 ingot = 5;
inline bool msg_update_change_account_data::has_ingot() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_update_change_account_data::set_has_ingot() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_update_change_account_data::clear_has_ingot() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_update_change_account_data::clear_ingot() {
  ingot_ = GOOGLE_LONGLONG(0);
  clear_has_ingot();
}
inline ::google::protobuf::int64 msg_update_change_account_data::ingot() const {
  return ingot_;
}
inline void msg_update_change_account_data::set_ingot(::google::protobuf::int64 value) {
  set_has_ingot();
  ingot_ = value;
}

// optional int64 cvalue = 6;
inline bool msg_update_change_account_data::has_cvalue() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_update_change_account_data::set_has_cvalue() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_update_change_account_data::clear_has_cvalue() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_update_change_account_data::clear_cvalue() {
  cvalue_ = GOOGLE_LONGLONG(0);
  clear_has_cvalue();
}
inline ::google::protobuf::int64 msg_update_change_account_data::cvalue() const {
  return cvalue_;
}
inline void msg_update_change_account_data::set_cvalue(::google::protobuf::int64 value) {
  set_has_cvalue();
  cvalue_ = value;
}

// optional int64 safe_coin = 7;
inline bool msg_update_change_account_data::has_safe_coin() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_update_change_account_data::set_has_safe_coin() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_update_change_account_data::clear_has_safe_coin() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_update_change_account_data::clear_safe_coin() {
  safe_coin_ = GOOGLE_LONGLONG(0);
  clear_has_safe_coin();
}
inline ::google::protobuf::int64 msg_update_change_account_data::safe_coin() const {
  return safe_coin_;
}
inline void msg_update_change_account_data::set_safe_coin(::google::protobuf::int64 value) {
  set_has_safe_coin();
  safe_coin_ = value;
}

// optional uint32 oper_type = 8;
inline bool msg_update_change_account_data::has_oper_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void msg_update_change_account_data::set_has_oper_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void msg_update_change_account_data::clear_has_oper_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void msg_update_change_account_data::clear_oper_type() {
  oper_type_ = 0u;
  clear_has_oper_type();
}
inline ::google::protobuf::uint32 msg_update_change_account_data::oper_type() const {
  return oper_type_;
}
inline void msg_update_change_account_data::set_oper_type(::google::protobuf::uint32 value) {
  set_has_oper_type();
  oper_type_ = value;
}

// optional uint32 sub_type = 9;
inline bool msg_update_change_account_data::has_sub_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void msg_update_change_account_data::set_has_sub_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void msg_update_change_account_data::clear_has_sub_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void msg_update_change_account_data::clear_sub_type() {
  sub_type_ = 0u;
  clear_has_sub_type();
}
inline ::google::protobuf::uint32 msg_update_change_account_data::sub_type() const {
  return sub_type_;
}
inline void msg_update_change_account_data::set_sub_type(::google::protobuf::uint32 value) {
  set_has_sub_type();
  sub_type_ = value;
}

// -------------------------------------------------------------------

// msg_change_room_param

// optional uint32 gametype = 1;
inline bool msg_change_room_param::has_gametype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_change_room_param::set_has_gametype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_change_room_param::clear_has_gametype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_change_room_param::clear_gametype() {
  gametype_ = 0u;
  clear_has_gametype();
}
inline ::google::protobuf::uint32 msg_change_room_param::gametype() const {
  return gametype_;
}
inline void msg_change_room_param::set_gametype(::google::protobuf::uint32 value) {
  set_has_gametype();
  gametype_ = value;
}

// optional uint32 roomid = 2;
inline bool msg_change_room_param::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_change_room_param::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_change_room_param::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_change_room_param::clear_roomid() {
  roomid_ = 0u;
  clear_has_roomid();
}
inline ::google::protobuf::uint32 msg_change_room_param::roomid() const {
  return roomid_;
}
inline void msg_change_room_param::set_roomid(::google::protobuf::uint32 value) {
  set_has_roomid();
  roomid_ = value;
}

// optional bytes param = 3;
inline bool msg_change_room_param::has_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_change_room_param::set_has_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_change_room_param::clear_has_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_change_room_param::clear_param() {
  if (param_ != &::google::protobuf::internal::kEmptyString) {
    param_->clear();
  }
  clear_has_param();
}
inline const ::std::string& msg_change_room_param::param() const {
  return *param_;
}
inline void msg_change_room_param::set_param(const ::std::string& value) {
  set_has_param();
  if (param_ == &::google::protobuf::internal::kEmptyString) {
    param_ = new ::std::string;
  }
  param_->assign(value);
}
inline void msg_change_room_param::set_param(const char* value) {
  set_has_param();
  if (param_ == &::google::protobuf::internal::kEmptyString) {
    param_ = new ::std::string;
  }
  param_->assign(value);
}
inline void msg_change_room_param::set_param(const void* value, size_t size) {
  set_has_param();
  if (param_ == &::google::protobuf::internal::kEmptyString) {
    param_ = new ::std::string;
  }
  param_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_change_room_param::mutable_param() {
  set_has_param();
  if (param_ == &::google::protobuf::internal::kEmptyString) {
    param_ = new ::std::string;
  }
  return param_;
}
inline ::std::string* msg_change_room_param::release_param() {
  clear_has_param();
  if (param_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = param_;
    param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_change_room_param::set_allocated_param(::std::string* param) {
  if (param_ != &::google::protobuf::internal::kEmptyString) {
    delete param_;
  }
  if (param) {
    set_has_param();
    param_ = param;
  } else {
    clear_has_param();
    param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// msg_contorl_player

// optional uint32 gametype = 1;
inline bool msg_contorl_player::has_gametype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_contorl_player::set_has_gametype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_contorl_player::clear_has_gametype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_contorl_player::clear_gametype() {
  gametype_ = 0u;
  clear_has_gametype();
}
inline ::google::protobuf::uint32 msg_contorl_player::gametype() const {
  return gametype_;
}
inline void msg_contorl_player::set_gametype(::google::protobuf::uint32 value) {
  set_has_gametype();
  gametype_ = value;
}

// optional uint32 roomid = 2;
inline bool msg_contorl_player::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_contorl_player::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_contorl_player::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_contorl_player::clear_roomid() {
  roomid_ = 0u;
  clear_has_roomid();
}
inline ::google::protobuf::uint32 msg_contorl_player::roomid() const {
  return roomid_;
}
inline void msg_contorl_player::set_roomid(::google::protobuf::uint32 value) {
  set_has_roomid();
  roomid_ = value;
}

// optional uint32 uid = 3;
inline bool msg_contorl_player::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_contorl_player::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_contorl_player::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_contorl_player::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 msg_contorl_player::uid() const {
  return uid_;
}
inline void msg_contorl_player::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 operatetype = 4;
inline bool msg_contorl_player::has_operatetype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_contorl_player::set_has_operatetype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_contorl_player::clear_has_operatetype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_contorl_player::clear_operatetype() {
  operatetype_ = 0u;
  clear_has_operatetype();
}
inline ::google::protobuf::uint32 msg_contorl_player::operatetype() const {
  return operatetype_;
}
inline void msg_contorl_player::set_operatetype(::google::protobuf::uint32 value) {
  set_has_operatetype();
  operatetype_ = value;
}

// optional uint32 gamecount = 5;
inline bool msg_contorl_player::has_gamecount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_contorl_player::set_has_gamecount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_contorl_player::clear_has_gamecount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_contorl_player::clear_gamecount() {
  gamecount_ = 0u;
  clear_has_gamecount();
}
inline ::google::protobuf::uint32 msg_contorl_player::gamecount() const {
  return gamecount_;
}
inline void msg_contorl_player::set_gamecount(::google::protobuf::uint32 value) {
  set_has_gamecount();
  gamecount_ = value;
}

// optional int64 id = 6;
inline bool msg_contorl_player::has_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_contorl_player::set_has_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_contorl_player::clear_has_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_contorl_player::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 msg_contorl_player::id() const {
  return id_;
}
inline void msg_contorl_player::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// msg_contorl_multi_player

// optional uint32 gametype = 1;
inline bool msg_contorl_multi_player::has_gametype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_contorl_multi_player::set_has_gametype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_contorl_multi_player::clear_has_gametype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_contorl_multi_player::clear_gametype() {
  gametype_ = 0u;
  clear_has_gametype();
}
inline ::google::protobuf::uint32 msg_contorl_multi_player::gametype() const {
  return gametype_;
}
inline void msg_contorl_multi_player::set_gametype(::google::protobuf::uint32 value) {
  set_has_gametype();
  gametype_ = value;
}

// optional uint32 roomid = 2;
inline bool msg_contorl_multi_player::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_contorl_multi_player::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_contorl_multi_player::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_contorl_multi_player::clear_roomid() {
  roomid_ = 0u;
  clear_has_roomid();
}
inline ::google::protobuf::uint32 msg_contorl_multi_player::roomid() const {
  return roomid_;
}
inline void msg_contorl_multi_player::set_roomid(::google::protobuf::uint32 value) {
  set_has_roomid();
  roomid_ = value;
}

// optional uint32 uid = 3;
inline bool msg_contorl_multi_player::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_contorl_multi_player::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_contorl_multi_player::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_contorl_multi_player::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 msg_contorl_multi_player::uid() const {
  return uid_;
}
inline void msg_contorl_multi_player::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 operatetype = 4;
inline bool msg_contorl_multi_player::has_operatetype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_contorl_multi_player::set_has_operatetype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_contorl_multi_player::clear_has_operatetype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_contorl_multi_player::clear_operatetype() {
  operatetype_ = 0u;
  clear_has_operatetype();
}
inline ::google::protobuf::uint32 msg_contorl_multi_player::operatetype() const {
  return operatetype_;
}
inline void msg_contorl_multi_player::set_operatetype(::google::protobuf::uint32 value) {
  set_has_operatetype();
  operatetype_ = value;
}

// optional uint32 gamecount = 5;
inline bool msg_contorl_multi_player::has_gamecount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_contorl_multi_player::set_has_gamecount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_contorl_multi_player::clear_has_gamecount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_contorl_multi_player::clear_gamecount() {
  gamecount_ = 0u;
  clear_has_gamecount();
}
inline ::google::protobuf::uint32 msg_contorl_multi_player::gamecount() const {
  return gamecount_;
}
inline void msg_contorl_multi_player::set_gamecount(::google::protobuf::uint32 value) {
  set_has_gamecount();
  gamecount_ = value;
}

// optional uint64 gametime = 6;
inline bool msg_contorl_multi_player::has_gametime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_contorl_multi_player::set_has_gametime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_contorl_multi_player::clear_has_gametime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_contorl_multi_player::clear_gametime() {
  gametime_ = GOOGLE_ULONGLONG(0);
  clear_has_gametime();
}
inline ::google::protobuf::uint64 msg_contorl_multi_player::gametime() const {
  return gametime_;
}
inline void msg_contorl_multi_player::set_gametime(::google::protobuf::uint64 value) {
  set_has_gametime();
  gametime_ = value;
}

// optional int64 totalscore = 7;
inline bool msg_contorl_multi_player::has_totalscore() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_contorl_multi_player::set_has_totalscore() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_contorl_multi_player::clear_has_totalscore() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_contorl_multi_player::clear_totalscore() {
  totalscore_ = GOOGLE_LONGLONG(0);
  clear_has_totalscore();
}
inline ::google::protobuf::int64 msg_contorl_multi_player::totalscore() const {
  return totalscore_;
}
inline void msg_contorl_multi_player::set_totalscore(::google::protobuf::int64 value) {
  set_has_totalscore();
  totalscore_ = value;
}

// optional int64 id = 8;
inline bool msg_contorl_multi_player::has_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void msg_contorl_multi_player::set_has_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void msg_contorl_multi_player::clear_has_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void msg_contorl_multi_player::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 msg_contorl_multi_player::id() const {
  return id_;
}
inline void msg_contorl_multi_player::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// msg_dice_control_req

// optional uint32 gametype = 1;
inline bool msg_dice_control_req::has_gametype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_dice_control_req::set_has_gametype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_dice_control_req::clear_has_gametype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_dice_control_req::clear_gametype() {
  gametype_ = 0u;
  clear_has_gametype();
}
inline ::google::protobuf::uint32 msg_dice_control_req::gametype() const {
  return gametype_;
}
inline void msg_dice_control_req::set_gametype(::google::protobuf::uint32 value) {
  set_has_gametype();
  gametype_ = value;
}

// optional uint32 roomid = 2;
inline bool msg_dice_control_req::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_dice_control_req::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_dice_control_req::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_dice_control_req::clear_roomid() {
  roomid_ = 0u;
  clear_has_roomid();
}
inline ::google::protobuf::uint32 msg_dice_control_req::roomid() const {
  return roomid_;
}
inline void msg_dice_control_req::set_roomid(::google::protobuf::uint32 value) {
  set_has_roomid();
  roomid_ = value;
}

// optional .net.dice_control_req dice = 3;
inline bool msg_dice_control_req::has_dice() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_dice_control_req::set_has_dice() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_dice_control_req::clear_has_dice() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_dice_control_req::clear_dice() {
  if (dice_ != NULL) dice_->::net::dice_control_req::Clear();
  clear_has_dice();
}
inline const ::net::dice_control_req& msg_dice_control_req::dice() const {
  return dice_ != NULL ? *dice_ : *default_instance_->dice_;
}
inline ::net::dice_control_req* msg_dice_control_req::mutable_dice() {
  set_has_dice();
  if (dice_ == NULL) dice_ = new ::net::dice_control_req;
  return dice_;
}
inline ::net::dice_control_req* msg_dice_control_req::release_dice() {
  clear_has_dice();
  ::net::dice_control_req* temp = dice_;
  dice_ = NULL;
  return temp;
}
inline void msg_dice_control_req::set_allocated_dice(::net::dice_control_req* dice) {
  delete dice_;
  dice_ = dice;
  if (dice) {
    set_has_dice();
  } else {
    clear_has_dice();
  }
}

// -------------------------------------------------------------------

// msg_majiang_config_hand_card

// optional uint32 gametype = 1;
inline bool msg_majiang_config_hand_card::has_gametype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_majiang_config_hand_card::set_has_gametype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_majiang_config_hand_card::clear_has_gametype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_majiang_config_hand_card::clear_gametype() {
  gametype_ = 0u;
  clear_has_gametype();
}
inline ::google::protobuf::uint32 msg_majiang_config_hand_card::gametype() const {
  return gametype_;
}
inline void msg_majiang_config_hand_card::set_gametype(::google::protobuf::uint32 value) {
  set_has_gametype();
  gametype_ = value;
}

// optional uint32 roomid = 2;
inline bool msg_majiang_config_hand_card::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_majiang_config_hand_card::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_majiang_config_hand_card::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_majiang_config_hand_card::clear_roomid() {
  roomid_ = 0u;
  clear_has_roomid();
}
inline ::google::protobuf::uint32 msg_majiang_config_hand_card::roomid() const {
  return roomid_;
}
inline void msg_majiang_config_hand_card::set_roomid(::google::protobuf::uint32 value) {
  set_has_roomid();
  roomid_ = value;
}

// optional bytes hand_card = 3;
inline bool msg_majiang_config_hand_card::has_hand_card() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_majiang_config_hand_card::set_has_hand_card() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_majiang_config_hand_card::clear_has_hand_card() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_majiang_config_hand_card::clear_hand_card() {
  if (hand_card_ != &::google::protobuf::internal::kEmptyString) {
    hand_card_->clear();
  }
  clear_has_hand_card();
}
inline const ::std::string& msg_majiang_config_hand_card::hand_card() const {
  return *hand_card_;
}
inline void msg_majiang_config_hand_card::set_hand_card(const ::std::string& value) {
  set_has_hand_card();
  if (hand_card_ == &::google::protobuf::internal::kEmptyString) {
    hand_card_ = new ::std::string;
  }
  hand_card_->assign(value);
}
inline void msg_majiang_config_hand_card::set_hand_card(const char* value) {
  set_has_hand_card();
  if (hand_card_ == &::google::protobuf::internal::kEmptyString) {
    hand_card_ = new ::std::string;
  }
  hand_card_->assign(value);
}
inline void msg_majiang_config_hand_card::set_hand_card(const void* value, size_t size) {
  set_has_hand_card();
  if (hand_card_ == &::google::protobuf::internal::kEmptyString) {
    hand_card_ = new ::std::string;
  }
  hand_card_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_majiang_config_hand_card::mutable_hand_card() {
  set_has_hand_card();
  if (hand_card_ == &::google::protobuf::internal::kEmptyString) {
    hand_card_ = new ::std::string;
  }
  return hand_card_;
}
inline ::std::string* msg_majiang_config_hand_card::release_hand_card() {
  clear_has_hand_card();
  if (hand_card_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hand_card_;
    hand_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_majiang_config_hand_card::set_allocated_hand_card(::std::string* hand_card) {
  if (hand_card_ != &::google::protobuf::internal::kEmptyString) {
    delete hand_card_;
  }
  if (hand_card) {
    set_has_hand_card();
    hand_card_ = hand_card;
  } else {
    clear_has_hand_card();
    hand_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// msg_update_server_room_robot

// optional uint32 gametype = 1;
inline bool msg_update_server_room_robot::has_gametype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_update_server_room_robot::set_has_gametype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_update_server_room_robot::clear_has_gametype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_update_server_room_robot::clear_gametype() {
  gametype_ = 0u;
  clear_has_gametype();
}
inline ::google::protobuf::uint32 msg_update_server_room_robot::gametype() const {
  return gametype_;
}
inline void msg_update_server_room_robot::set_gametype(::google::protobuf::uint32 value) {
  set_has_gametype();
  gametype_ = value;
}

// optional uint32 roomid = 2;
inline bool msg_update_server_room_robot::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_update_server_room_robot::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_update_server_room_robot::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_update_server_room_robot::clear_roomid() {
  roomid_ = 0u;
  clear_has_roomid();
}
inline ::google::protobuf::uint32 msg_update_server_room_robot::roomid() const {
  return roomid_;
}
inline void msg_update_server_room_robot::set_roomid(::google::protobuf::uint32 value) {
  set_has_roomid();
  roomid_ = value;
}

// optional uint32 robot = 3;
inline bool msg_update_server_room_robot::has_robot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_update_server_room_robot::set_has_robot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_update_server_room_robot::clear_has_robot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_update_server_room_robot::clear_robot() {
  robot_ = 0u;
  clear_has_robot();
}
inline ::google::protobuf::uint32 msg_update_server_room_robot::robot() const {
  return robot_;
}
inline void msg_update_server_room_robot::set_robot(::google::protobuf::uint32 value) {
  set_has_robot();
  robot_ = value;
}

// -------------------------------------------------------------------

// msg_reload_robot_online_cfg

// optional uint32 optype = 1;
inline bool msg_reload_robot_online_cfg::has_optype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_reload_robot_online_cfg::set_has_optype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_reload_robot_online_cfg::clear_has_optype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_reload_robot_online_cfg::clear_optype() {
  optype_ = 0u;
  clear_has_optype();
}
inline ::google::protobuf::uint32 msg_reload_robot_online_cfg::optype() const {
  return optype_;
}
inline void msg_reload_robot_online_cfg::set_optype(::google::protobuf::uint32 value) {
  set_has_optype();
  optype_ = value;
}

// optional uint32 gametype = 2;
inline bool msg_reload_robot_online_cfg::has_gametype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_reload_robot_online_cfg::set_has_gametype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_reload_robot_online_cfg::clear_has_gametype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_reload_robot_online_cfg::clear_gametype() {
  gametype_ = 0u;
  clear_has_gametype();
}
inline ::google::protobuf::uint32 msg_reload_robot_online_cfg::gametype() const {
  return gametype_;
}
inline void msg_reload_robot_online_cfg::set_gametype(::google::protobuf::uint32 value) {
  set_has_gametype();
  gametype_ = value;
}

// optional uint32 roomid = 3;
inline bool msg_reload_robot_online_cfg::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_reload_robot_online_cfg::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_reload_robot_online_cfg::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_reload_robot_online_cfg::clear_roomid() {
  roomid_ = 0u;
  clear_has_roomid();
}
inline ::google::protobuf::uint32 msg_reload_robot_online_cfg::roomid() const {
  return roomid_;
}
inline void msg_reload_robot_online_cfg::set_roomid(::google::protobuf::uint32 value) {
  set_has_roomid();
  roomid_ = value;
}

// optional uint32 leveltype = 4;
inline bool msg_reload_robot_online_cfg::has_leveltype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_reload_robot_online_cfg::set_has_leveltype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_reload_robot_online_cfg::clear_has_leveltype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_reload_robot_online_cfg::clear_leveltype() {
  leveltype_ = 0u;
  clear_has_leveltype();
}
inline ::google::protobuf::uint32 msg_reload_robot_online_cfg::leveltype() const {
  return leveltype_;
}
inline void msg_reload_robot_online_cfg::set_leveltype(::google::protobuf::uint32 value) {
  set_has_leveltype();
  leveltype_ = value;
}

// optional uint32 batchid = 5;
inline bool msg_reload_robot_online_cfg::has_batchid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_reload_robot_online_cfg::set_has_batchid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_reload_robot_online_cfg::clear_has_batchid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_reload_robot_online_cfg::clear_batchid() {
  batchid_ = 0u;
  clear_has_batchid();
}
inline ::google::protobuf::uint32 msg_reload_robot_online_cfg::batchid() const {
  return batchid_;
}
inline void msg_reload_robot_online_cfg::set_batchid(::google::protobuf::uint32 value) {
  set_has_batchid();
  batchid_ = value;
}

// optional uint32 logintype = 6;
inline bool msg_reload_robot_online_cfg::has_logintype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_reload_robot_online_cfg::set_has_logintype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_reload_robot_online_cfg::clear_has_logintype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_reload_robot_online_cfg::clear_logintype() {
  logintype_ = 0u;
  clear_has_logintype();
}
inline ::google::protobuf::uint32 msg_reload_robot_online_cfg::logintype() const {
  return logintype_;
}
inline void msg_reload_robot_online_cfg::set_logintype(::google::protobuf::uint32 value) {
  set_has_logintype();
  logintype_ = value;
}

// optional uint32 entertimer = 7;
inline bool msg_reload_robot_online_cfg::has_entertimer() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_reload_robot_online_cfg::set_has_entertimer() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_reload_robot_online_cfg::clear_has_entertimer() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_reload_robot_online_cfg::clear_entertimer() {
  entertimer_ = 0u;
  clear_has_entertimer();
}
inline ::google::protobuf::uint32 msg_reload_robot_online_cfg::entertimer() const {
  return entertimer_;
}
inline void msg_reload_robot_online_cfg::set_entertimer(::google::protobuf::uint32 value) {
  set_has_entertimer();
  entertimer_ = value;
}

// optional uint32 leavetimer = 8;
inline bool msg_reload_robot_online_cfg::has_leavetimer() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void msg_reload_robot_online_cfg::set_has_leavetimer() {
  _has_bits_[0] |= 0x00000080u;
}
inline void msg_reload_robot_online_cfg::clear_has_leavetimer() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void msg_reload_robot_online_cfg::clear_leavetimer() {
  leavetimer_ = 0u;
  clear_has_leavetimer();
}
inline ::google::protobuf::uint32 msg_reload_robot_online_cfg::leavetimer() const {
  return leavetimer_;
}
inline void msg_reload_robot_online_cfg::set_leavetimer(::google::protobuf::uint32 value) {
  set_has_leavetimer();
  leavetimer_ = value;
}

// repeated uint32 online = 9;
inline int msg_reload_robot_online_cfg::online_size() const {
  return online_.size();
}
inline void msg_reload_robot_online_cfg::clear_online() {
  online_.Clear();
}
inline ::google::protobuf::uint32 msg_reload_robot_online_cfg::online(int index) const {
  return online_.Get(index);
}
inline void msg_reload_robot_online_cfg::set_online(int index, ::google::protobuf::uint32 value) {
  online_.Set(index, value);
}
inline void msg_reload_robot_online_cfg::add_online(::google::protobuf::uint32 value) {
  online_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
msg_reload_robot_online_cfg::online() const {
  return online_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
msg_reload_robot_online_cfg::mutable_online() {
  return &online_;
}

// -------------------------------------------------------------------

// msg_update_new_player_novice_welfare_right

// optional uint32 uid = 1;
inline bool msg_update_new_player_novice_welfare_right::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_update_new_player_novice_welfare_right::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_update_new_player_novice_welfare_right::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_update_new_player_novice_welfare_right::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 msg_update_new_player_novice_welfare_right::uid() const {
  return uid_;
}
inline void msg_update_new_player_novice_welfare_right::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 userright = 2;
inline bool msg_update_new_player_novice_welfare_right::has_userright() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_update_new_player_novice_welfare_right::set_has_userright() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_update_new_player_novice_welfare_right::clear_has_userright() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_update_new_player_novice_welfare_right::clear_userright() {
  userright_ = 0u;
  clear_has_userright();
}
inline ::google::protobuf::uint32 msg_update_new_player_novice_welfare_right::userright() const {
  return userright_;
}
inline void msg_update_new_player_novice_welfare_right::set_userright(::google::protobuf::uint32 value) {
  set_has_userright();
  userright_ = value;
}

// optional uint32 posrmb = 3;
inline bool msg_update_new_player_novice_welfare_right::has_posrmb() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_update_new_player_novice_welfare_right::set_has_posrmb() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_update_new_player_novice_welfare_right::clear_has_posrmb() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_update_new_player_novice_welfare_right::clear_posrmb() {
  posrmb_ = 0u;
  clear_has_posrmb();
}
inline ::google::protobuf::uint32 msg_update_new_player_novice_welfare_right::posrmb() const {
  return posrmb_;
}
inline void msg_update_new_player_novice_welfare_right::set_posrmb(::google::protobuf::uint32 value) {
  set_has_posrmb();
  posrmb_ = value;
}

// optional uint64 postime = 4;
inline bool msg_update_new_player_novice_welfare_right::has_postime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_update_new_player_novice_welfare_right::set_has_postime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_update_new_player_novice_welfare_right::clear_has_postime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_update_new_player_novice_welfare_right::clear_postime() {
  postime_ = GOOGLE_ULONGLONG(0);
  clear_has_postime();
}
inline ::google::protobuf::uint64 msg_update_new_player_novice_welfare_right::postime() const {
  return postime_;
}
inline void msg_update_new_player_novice_welfare_right::set_postime(::google::protobuf::uint64 value) {
  set_has_postime();
  postime_ = value;
}

// -------------------------------------------------------------------

// msg_update_new_player_novice_welfare_value

// optional uint32 id = 1;
inline bool msg_update_new_player_novice_welfare_value::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_update_new_player_novice_welfare_value::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_update_new_player_novice_welfare_value::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_update_new_player_novice_welfare_value::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 msg_update_new_player_novice_welfare_value::id() const {
  return id_;
}
inline void msg_update_new_player_novice_welfare_value::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 minpayrmb = 2;
inline bool msg_update_new_player_novice_welfare_value::has_minpayrmb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_update_new_player_novice_welfare_value::set_has_minpayrmb() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_update_new_player_novice_welfare_value::clear_has_minpayrmb() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_update_new_player_novice_welfare_value::clear_minpayrmb() {
  minpayrmb_ = 0u;
  clear_has_minpayrmb();
}
inline ::google::protobuf::uint32 msg_update_new_player_novice_welfare_value::minpayrmb() const {
  return minpayrmb_;
}
inline void msg_update_new_player_novice_welfare_value::set_minpayrmb(::google::protobuf::uint32 value) {
  set_has_minpayrmb();
  minpayrmb_ = value;
}

// optional uint32 maxpayrmb = 3;
inline bool msg_update_new_player_novice_welfare_value::has_maxpayrmb() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_update_new_player_novice_welfare_value::set_has_maxpayrmb() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_update_new_player_novice_welfare_value::clear_has_maxpayrmb() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_update_new_player_novice_welfare_value::clear_maxpayrmb() {
  maxpayrmb_ = 0u;
  clear_has_maxpayrmb();
}
inline ::google::protobuf::uint32 msg_update_new_player_novice_welfare_value::maxpayrmb() const {
  return maxpayrmb_;
}
inline void msg_update_new_player_novice_welfare_value::set_maxpayrmb(::google::protobuf::uint32 value) {
  set_has_maxpayrmb();
  maxpayrmb_ = value;
}

// optional uint32 maxwinscore = 4;
inline bool msg_update_new_player_novice_welfare_value::has_maxwinscore() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_update_new_player_novice_welfare_value::set_has_maxwinscore() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_update_new_player_novice_welfare_value::clear_has_maxwinscore() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_update_new_player_novice_welfare_value::clear_maxwinscore() {
  maxwinscore_ = 0u;
  clear_has_maxwinscore();
}
inline ::google::protobuf::uint32 msg_update_new_player_novice_welfare_value::maxwinscore() const {
  return maxwinscore_;
}
inline void msg_update_new_player_novice_welfare_value::set_maxwinscore(::google::protobuf::uint32 value) {
  set_has_maxwinscore();
  maxwinscore_ = value;
}

// optional uint32 welfarecount = 5;
inline bool msg_update_new_player_novice_welfare_value::has_welfarecount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_update_new_player_novice_welfare_value::set_has_welfarecount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_update_new_player_novice_welfare_value::clear_has_welfarecount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_update_new_player_novice_welfare_value::clear_welfarecount() {
  welfarecount_ = 0u;
  clear_has_welfarecount();
}
inline ::google::protobuf::uint32 msg_update_new_player_novice_welfare_value::welfarecount() const {
  return welfarecount_;
}
inline void msg_update_new_player_novice_welfare_value::set_welfarecount(::google::protobuf::uint32 value) {
  set_has_welfarecount();
  welfarecount_ = value;
}

// optional uint32 welfarepro = 6;
inline bool msg_update_new_player_novice_welfare_value::has_welfarepro() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_update_new_player_novice_welfare_value::set_has_welfarepro() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_update_new_player_novice_welfare_value::clear_has_welfarepro() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_update_new_player_novice_welfare_value::clear_welfarepro() {
  welfarepro_ = 0u;
  clear_has_welfarepro();
}
inline ::google::protobuf::uint32 msg_update_new_player_novice_welfare_value::welfarepro() const {
  return welfarepro_;
}
inline void msg_update_new_player_novice_welfare_value::set_welfarepro(::google::protobuf::uint32 value) {
  set_has_welfarepro();
  welfarepro_ = value;
}

// optional uint32 postime = 7;
inline bool msg_update_new_player_novice_welfare_value::has_postime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_update_new_player_novice_welfare_value::set_has_postime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_update_new_player_novice_welfare_value::clear_has_postime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_update_new_player_novice_welfare_value::clear_postime() {
  postime_ = 0u;
  clear_has_postime();
}
inline ::google::protobuf::uint32 msg_update_new_player_novice_welfare_value::postime() const {
  return postime_;
}
inline void msg_update_new_player_novice_welfare_value::set_postime(::google::protobuf::uint32 value) {
  set_has_postime();
  postime_ = value;
}

// optional uint32 lift_odds = 8;
inline bool msg_update_new_player_novice_welfare_value::has_lift_odds() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void msg_update_new_player_novice_welfare_value::set_has_lift_odds() {
  _has_bits_[0] |= 0x00000080u;
}
inline void msg_update_new_player_novice_welfare_value::clear_has_lift_odds() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void msg_update_new_player_novice_welfare_value::clear_lift_odds() {
  lift_odds_ = 0u;
  clear_has_lift_odds();
}
inline ::google::protobuf::uint32 msg_update_new_player_novice_welfare_value::lift_odds() const {
  return lift_odds_;
}
inline void msg_update_new_player_novice_welfare_value::set_lift_odds(::google::protobuf::uint32 value) {
  set_has_lift_odds();
  lift_odds_ = value;
}

// -------------------------------------------------------------------

// msg_register_dispatch

// optional uint32 svrid = 1;
inline bool msg_register_dispatch::has_svrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_register_dispatch::set_has_svrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_register_dispatch::clear_has_svrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_register_dispatch::clear_svrid() {
  svrid_ = 0u;
  clear_has_svrid();
}
inline ::google::protobuf::uint32 msg_register_dispatch::svrid() const {
  return svrid_;
}
inline void msg_register_dispatch::set_svrid(::google::protobuf::uint32 value) {
  set_has_svrid();
  svrid_ = value;
}

// optional uint32 svr_type = 2;
inline bool msg_register_dispatch::has_svr_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_register_dispatch::set_has_svr_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_register_dispatch::clear_has_svr_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_register_dispatch::clear_svr_type() {
  svr_type_ = 0u;
  clear_has_svr_type();
}
inline ::google::protobuf::uint32 msg_register_dispatch::svr_type() const {
  return svr_type_;
}
inline void msg_register_dispatch::set_svr_type(::google::protobuf::uint32 value) {
  set_has_svr_type();
  svr_type_ = value;
}

// optional uint32 game_type = 3;
inline bool msg_register_dispatch::has_game_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_register_dispatch::set_has_game_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_register_dispatch::clear_has_game_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_register_dispatch::clear_game_type() {
  game_type_ = 0u;
  clear_has_game_type();
}
inline ::google::protobuf::uint32 msg_register_dispatch::game_type() const {
  return game_type_;
}
inline void msg_register_dispatch::set_game_type(::google::protobuf::uint32 value) {
  set_has_game_type();
  game_type_ = value;
}

// -------------------------------------------------------------------

// msg_register_dispatch_rep

// optional uint32 result = 1;
inline bool msg_register_dispatch_rep::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_register_dispatch_rep::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_register_dispatch_rep::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_register_dispatch_rep::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 msg_register_dispatch_rep::result() const {
  return result_;
}
inline void msg_register_dispatch_rep::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// msg_notify_gamesvrs_new_lobby

// optional uint32 lobby_svrid = 1;
inline bool msg_notify_gamesvrs_new_lobby::has_lobby_svrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_notify_gamesvrs_new_lobby::set_has_lobby_svrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_notify_gamesvrs_new_lobby::clear_has_lobby_svrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_notify_gamesvrs_new_lobby::clear_lobby_svrid() {
  lobby_svrid_ = 0u;
  clear_has_lobby_svrid();
}
inline ::google::protobuf::uint32 msg_notify_gamesvrs_new_lobby::lobby_svrid() const {
  return lobby_svrid_;
}
inline void msg_notify_gamesvrs_new_lobby::set_lobby_svrid(::google::protobuf::uint32 value) {
  set_has_lobby_svrid();
  lobby_svrid_ = value;
}

// -------------------------------------------------------------------

// msg_retire_lobbysvr

// optional uint32 svrid = 1;
inline bool msg_retire_lobbysvr::has_svrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_retire_lobbysvr::set_has_svrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_retire_lobbysvr::clear_has_svrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_retire_lobbysvr::clear_svrid() {
  svrid_ = 0u;
  clear_has_svrid();
}
inline ::google::protobuf::uint32 msg_retire_lobbysvr::svrid() const {
  return svrid_;
}
inline void msg_retire_lobbysvr::set_svrid(::google::protobuf::uint32 value) {
  set_has_svrid();
  svrid_ = value;
}

// -------------------------------------------------------------------

// msg_retire_gamesvr

// optional uint32 svrid = 1;
inline bool msg_retire_gamesvr::has_svrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_retire_gamesvr::set_has_svrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_retire_gamesvr::clear_has_svrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_retire_gamesvr::clear_svrid() {
  svrid_ = 0u;
  clear_has_svrid();
}
inline ::google::protobuf::uint32 msg_retire_gamesvr::svrid() const {
  return svrid_;
}
inline void msg_retire_gamesvr::set_svrid(::google::protobuf::uint32 value) {
  set_has_svrid();
  svrid_ = value;
}

// -------------------------------------------------------------------

// msg_report_onlines

// optional uint32 player_size = 1;
inline bool msg_report_onlines::has_player_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_report_onlines::set_has_player_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_report_onlines::clear_has_player_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_report_onlines::clear_player_size() {
  player_size_ = 0u;
  clear_has_player_size();
}
inline ::google::protobuf::uint32 msg_report_onlines::player_size() const {
  return player_size_;
}
inline void msg_report_onlines::set_player_size(::google::protobuf::uint32 value) {
  set_has_player_size();
  player_size_ = value;
}

// optional uint32 robot_size = 2;
inline bool msg_report_onlines::has_robot_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_report_onlines::set_has_robot_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_report_onlines::clear_has_robot_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_report_onlines::clear_robot_size() {
  robot_size_ = 0u;
  clear_has_robot_size();
}
inline ::google::protobuf::uint32 msg_report_onlines::robot_size() const {
  return robot_size_;
}
inline void msg_report_onlines::set_robot_size(::google::protobuf::uint32 value) {
  set_has_robot_size();
  robot_size_ = value;
}

// -------------------------------------------------------------------

// msg_broadcast_other_lobby

// optional uint32 type = 1;
inline bool msg_broadcast_other_lobby::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_broadcast_other_lobby::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_broadcast_other_lobby::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_broadcast_other_lobby::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 msg_broadcast_other_lobby::type() const {
  return type_;
}
inline void msg_broadcast_other_lobby::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 svrid = 2;
inline bool msg_broadcast_other_lobby::has_svrid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_broadcast_other_lobby::set_has_svrid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_broadcast_other_lobby::clear_has_svrid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_broadcast_other_lobby::clear_svrid() {
  svrid_ = 0u;
  clear_has_svrid();
}
inline ::google::protobuf::uint32 msg_broadcast_other_lobby::svrid() const {
  return svrid_;
}
inline void msg_broadcast_other_lobby::set_svrid(::google::protobuf::uint32 value) {
  set_has_svrid();
  svrid_ = value;
}

// optional bytes data = 3;
inline bool msg_broadcast_other_lobby::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_broadcast_other_lobby::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_broadcast_other_lobby::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_broadcast_other_lobby::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& msg_broadcast_other_lobby::data() const {
  return *data_;
}
inline void msg_broadcast_other_lobby::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void msg_broadcast_other_lobby::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void msg_broadcast_other_lobby::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_broadcast_other_lobby::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* msg_broadcast_other_lobby::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_broadcast_other_lobby::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 cmd = 4;
inline bool msg_broadcast_other_lobby::has_cmd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_broadcast_other_lobby::set_has_cmd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_broadcast_other_lobby::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_broadcast_other_lobby::clear_cmd() {
  cmd_ = 0u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 msg_broadcast_other_lobby::cmd() const {
  return cmd_;
}
inline void msg_broadcast_other_lobby::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
}

// -------------------------------------------------------------------

// msg_broadcast_info

// optional bytes data = 1;
inline bool msg_broadcast_info::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_broadcast_info::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_broadcast_info::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_broadcast_info::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& msg_broadcast_info::data() const {
  return *data_;
}
inline void msg_broadcast_info::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void msg_broadcast_info::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void msg_broadcast_info::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_broadcast_info::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* msg_broadcast_info::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_broadcast_info::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 cmd = 2;
inline bool msg_broadcast_info::has_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_broadcast_info::set_has_cmd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_broadcast_info::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_broadcast_info::clear_cmd() {
  cmd_ = 0u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 msg_broadcast_info::cmd() const {
  return cmd_;
}
inline void msg_broadcast_info::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
}

// -------------------------------------------------------------------

// msg_stop_snatch_coin

// optional uint32 gametype = 1;
inline bool msg_stop_snatch_coin::has_gametype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_stop_snatch_coin::set_has_gametype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_stop_snatch_coin::clear_has_gametype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_stop_snatch_coin::clear_gametype() {
  gametype_ = 0u;
  clear_has_gametype();
}
inline ::google::protobuf::uint32 msg_stop_snatch_coin::gametype() const {
  return gametype_;
}
inline void msg_stop_snatch_coin::set_gametype(::google::protobuf::uint32 value) {
  set_has_gametype();
  gametype_ = value;
}

// optional uint32 roomid = 2;
inline bool msg_stop_snatch_coin::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_stop_snatch_coin::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_stop_snatch_coin::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_stop_snatch_coin::clear_roomid() {
  roomid_ = 0u;
  clear_has_roomid();
}
inline ::google::protobuf::uint32 msg_stop_snatch_coin::roomid() const {
  return roomid_;
}
inline void msg_stop_snatch_coin::set_roomid(::google::protobuf::uint32 value) {
  set_has_roomid();
  roomid_ = value;
}

// optional uint32 stop = 3;
inline bool msg_stop_snatch_coin::has_stop() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_stop_snatch_coin::set_has_stop() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_stop_snatch_coin::clear_has_stop() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_stop_snatch_coin::clear_stop() {
  stop_ = 0u;
  clear_has_stop();
}
inline ::google::protobuf::uint32 msg_stop_snatch_coin::stop() const {
  return stop_;
}
inline void msg_stop_snatch_coin::set_stop(::google::protobuf::uint32 value) {
  set_has_stop();
  stop_ = value;
}

// -------------------------------------------------------------------

// msg_robot_snatch_coin

// optional uint32 gametype = 1;
inline bool msg_robot_snatch_coin::has_gametype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_robot_snatch_coin::set_has_gametype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_robot_snatch_coin::clear_has_gametype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_robot_snatch_coin::clear_gametype() {
  gametype_ = 0u;
  clear_has_gametype();
}
inline ::google::protobuf::uint32 msg_robot_snatch_coin::gametype() const {
  return gametype_;
}
inline void msg_robot_snatch_coin::set_gametype(::google::protobuf::uint32 value) {
  set_has_gametype();
  gametype_ = value;
}

// optional uint32 roomid = 2;
inline bool msg_robot_snatch_coin::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_robot_snatch_coin::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_robot_snatch_coin::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_robot_snatch_coin::clear_roomid() {
  roomid_ = 0u;
  clear_has_roomid();
}
inline ::google::protobuf::uint32 msg_robot_snatch_coin::roomid() const {
  return roomid_;
}
inline void msg_robot_snatch_coin::set_roomid(::google::protobuf::uint32 value) {
  set_has_roomid();
  roomid_ = value;
}

// optional uint32 snatchtype = 3;
inline bool msg_robot_snatch_coin::has_snatchtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_robot_snatch_coin::set_has_snatchtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_robot_snatch_coin::clear_has_snatchtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_robot_snatch_coin::clear_snatchtype() {
  snatchtype_ = 0u;
  clear_has_snatchtype();
}
inline ::google::protobuf::uint32 msg_robot_snatch_coin::snatchtype() const {
  return snatchtype_;
}
inline void msg_robot_snatch_coin::set_snatchtype(::google::protobuf::uint32 value) {
  set_has_snatchtype();
  snatchtype_ = value;
}

// optional uint32 robotcount = 4;
inline bool msg_robot_snatch_coin::has_robotcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_robot_snatch_coin::set_has_robotcount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_robot_snatch_coin::clear_has_robotcount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_robot_snatch_coin::clear_robotcount() {
  robotcount_ = 0u;
  clear_has_robotcount();
}
inline ::google::protobuf::uint32 msg_robot_snatch_coin::robotcount() const {
  return robotcount_;
}
inline void msg_robot_snatch_coin::set_robotcount(::google::protobuf::uint32 value) {
  set_has_robotcount();
  robotcount_ = value;
}

// optional uint32 cardcount = 5;
inline bool msg_robot_snatch_coin::has_cardcount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_robot_snatch_coin::set_has_cardcount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_robot_snatch_coin::clear_has_cardcount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_robot_snatch_coin::clear_cardcount() {
  cardcount_ = 0u;
  clear_has_cardcount();
}
inline ::google::protobuf::uint32 msg_robot_snatch_coin::cardcount() const {
  return cardcount_;
}
inline void msg_robot_snatch_coin::set_cardcount(::google::protobuf::uint32 value) {
  set_has_cardcount();
  cardcount_ = value;
}

// -------------------------------------------------------------------

// msg_auto_kill_user_cfg

// optional bytes updatejson = 1;
inline bool msg_auto_kill_user_cfg::has_updatejson() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_auto_kill_user_cfg::set_has_updatejson() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_auto_kill_user_cfg::clear_has_updatejson() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_auto_kill_user_cfg::clear_updatejson() {
  if (updatejson_ != &::google::protobuf::internal::kEmptyString) {
    updatejson_->clear();
  }
  clear_has_updatejson();
}
inline const ::std::string& msg_auto_kill_user_cfg::updatejson() const {
  return *updatejson_;
}
inline void msg_auto_kill_user_cfg::set_updatejson(const ::std::string& value) {
  set_has_updatejson();
  if (updatejson_ == &::google::protobuf::internal::kEmptyString) {
    updatejson_ = new ::std::string;
  }
  updatejson_->assign(value);
}
inline void msg_auto_kill_user_cfg::set_updatejson(const char* value) {
  set_has_updatejson();
  if (updatejson_ == &::google::protobuf::internal::kEmptyString) {
    updatejson_ = new ::std::string;
  }
  updatejson_->assign(value);
}
inline void msg_auto_kill_user_cfg::set_updatejson(const void* value, size_t size) {
  set_has_updatejson();
  if (updatejson_ == &::google::protobuf::internal::kEmptyString) {
    updatejson_ = new ::std::string;
  }
  updatejson_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_auto_kill_user_cfg::mutable_updatejson() {
  set_has_updatejson();
  if (updatejson_ == &::google::protobuf::internal::kEmptyString) {
    updatejson_ = new ::std::string;
  }
  return updatejson_;
}
inline ::std::string* msg_auto_kill_user_cfg::release_updatejson() {
  clear_has_updatejson();
  if (updatejson_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = updatejson_;
    updatejson_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_auto_kill_user_cfg::set_allocated_updatejson(::std::string* updatejson) {
  if (updatejson_ != &::google::protobuf::internal::kEmptyString) {
    delete updatejson_;
  }
  if (updatejson) {
    set_has_updatejson();
    updatejson_ = updatejson;
  } else {
    clear_has_updatejson();
    updatejson_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// msg_flush_active_welfare_cfg

// optional bytes updatejson = 1;
inline bool msg_flush_active_welfare_cfg::has_updatejson() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_flush_active_welfare_cfg::set_has_updatejson() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_flush_active_welfare_cfg::clear_has_updatejson() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_flush_active_welfare_cfg::clear_updatejson() {
  if (updatejson_ != &::google::protobuf::internal::kEmptyString) {
    updatejson_->clear();
  }
  clear_has_updatejson();
}
inline const ::std::string& msg_flush_active_welfare_cfg::updatejson() const {
  return *updatejson_;
}
inline void msg_flush_active_welfare_cfg::set_updatejson(const ::std::string& value) {
  set_has_updatejson();
  if (updatejson_ == &::google::protobuf::internal::kEmptyString) {
    updatejson_ = new ::std::string;
  }
  updatejson_->assign(value);
}
inline void msg_flush_active_welfare_cfg::set_updatejson(const char* value) {
  set_has_updatejson();
  if (updatejson_ == &::google::protobuf::internal::kEmptyString) {
    updatejson_ = new ::std::string;
  }
  updatejson_->assign(value);
}
inline void msg_flush_active_welfare_cfg::set_updatejson(const void* value, size_t size) {
  set_has_updatejson();
  if (updatejson_ == &::google::protobuf::internal::kEmptyString) {
    updatejson_ = new ::std::string;
  }
  updatejson_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_flush_active_welfare_cfg::mutable_updatejson() {
  set_has_updatejson();
  if (updatejson_ == &::google::protobuf::internal::kEmptyString) {
    updatejson_ = new ::std::string;
  }
  return updatejson_;
}
inline ::std::string* msg_flush_active_welfare_cfg::release_updatejson() {
  clear_has_updatejson();
  if (updatejson_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = updatejson_;
    updatejson_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_flush_active_welfare_cfg::set_allocated_updatejson(::std::string* updatejson) {
  if (updatejson_ != &::google::protobuf::internal::kEmptyString) {
    delete updatejson_;
  }
  if (updatejson) {
    set_has_updatejson();
    updatejson_ = updatejson;
  } else {
    clear_has_updatejson();
    updatejson_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// msg_reset_active_welfare_info

// optional bytes updatejson = 1;
inline bool msg_reset_active_welfare_info::has_updatejson() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_reset_active_welfare_info::set_has_updatejson() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_reset_active_welfare_info::clear_has_updatejson() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_reset_active_welfare_info::clear_updatejson() {
  if (updatejson_ != &::google::protobuf::internal::kEmptyString) {
    updatejson_->clear();
  }
  clear_has_updatejson();
}
inline const ::std::string& msg_reset_active_welfare_info::updatejson() const {
  return *updatejson_;
}
inline void msg_reset_active_welfare_info::set_updatejson(const ::std::string& value) {
  set_has_updatejson();
  if (updatejson_ == &::google::protobuf::internal::kEmptyString) {
    updatejson_ = new ::std::string;
  }
  updatejson_->assign(value);
}
inline void msg_reset_active_welfare_info::set_updatejson(const char* value) {
  set_has_updatejson();
  if (updatejson_ == &::google::protobuf::internal::kEmptyString) {
    updatejson_ = new ::std::string;
  }
  updatejson_->assign(value);
}
inline void msg_reset_active_welfare_info::set_updatejson(const void* value, size_t size) {
  set_has_updatejson();
  if (updatejson_ == &::google::protobuf::internal::kEmptyString) {
    updatejson_ = new ::std::string;
  }
  updatejson_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_reset_active_welfare_info::mutable_updatejson() {
  set_has_updatejson();
  if (updatejson_ == &::google::protobuf::internal::kEmptyString) {
    updatejson_ = new ::std::string;
  }
  return updatejson_;
}
inline ::std::string* msg_reset_active_welfare_info::release_updatejson() {
  clear_has_updatejson();
  if (updatejson_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = updatejson_;
    updatejson_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_reset_active_welfare_info::set_allocated_updatejson(::std::string* updatejson) {
  if (updatejson_ != &::google::protobuf::internal::kEmptyString) {
    delete updatejson_;
  }
  if (updatejson) {
    set_has_updatejson();
    updatejson_ = updatejson;
  } else {
    clear_has_updatejson();
    updatejson_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// msg_flush_new_register_welfare_cfg

// optional bytes updatejson = 1;
inline bool msg_flush_new_register_welfare_cfg::has_updatejson() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_flush_new_register_welfare_cfg::set_has_updatejson() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_flush_new_register_welfare_cfg::clear_has_updatejson() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_flush_new_register_welfare_cfg::clear_updatejson() {
  if (updatejson_ != &::google::protobuf::internal::kEmptyString) {
    updatejson_->clear();
  }
  clear_has_updatejson();
}
inline const ::std::string& msg_flush_new_register_welfare_cfg::updatejson() const {
  return *updatejson_;
}
inline void msg_flush_new_register_welfare_cfg::set_updatejson(const ::std::string& value) {
  set_has_updatejson();
  if (updatejson_ == &::google::protobuf::internal::kEmptyString) {
    updatejson_ = new ::std::string;
  }
  updatejson_->assign(value);
}
inline void msg_flush_new_register_welfare_cfg::set_updatejson(const char* value) {
  set_has_updatejson();
  if (updatejson_ == &::google::protobuf::internal::kEmptyString) {
    updatejson_ = new ::std::string;
  }
  updatejson_->assign(value);
}
inline void msg_flush_new_register_welfare_cfg::set_updatejson(const void* value, size_t size) {
  set_has_updatejson();
  if (updatejson_ == &::google::protobuf::internal::kEmptyString) {
    updatejson_ = new ::std::string;
  }
  updatejson_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_flush_new_register_welfare_cfg::mutable_updatejson() {
  set_has_updatejson();
  if (updatejson_ == &::google::protobuf::internal::kEmptyString) {
    updatejson_ = new ::std::string;
  }
  return updatejson_;
}
inline ::std::string* msg_flush_new_register_welfare_cfg::release_updatejson() {
  clear_has_updatejson();
  if (updatejson_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = updatejson_;
    updatejson_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_flush_new_register_welfare_cfg::set_allocated_updatejson(::std::string* updatejson) {
  if (updatejson_ != &::google::protobuf::internal::kEmptyString) {
    delete updatejson_;
  }
  if (updatejson) {
    set_has_updatejson();
    updatejson_ = updatejson;
  } else {
    clear_has_updatejson();
    updatejson_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// msg_stop_conctrl_player

// optional uint32 uid = 1;
inline bool msg_stop_conctrl_player::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_stop_conctrl_player::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_stop_conctrl_player::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_stop_conctrl_player::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 msg_stop_conctrl_player::uid() const {
  return uid_;
}
inline void msg_stop_conctrl_player::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// -------------------------------------------------------------------

// msg_syn_ctrl_user_cfg

// repeated uint32 vec_suid = 1;
inline int msg_syn_ctrl_user_cfg::vec_suid_size() const {
  return vec_suid_.size();
}
inline void msg_syn_ctrl_user_cfg::clear_vec_suid() {
  vec_suid_.Clear();
}
inline ::google::protobuf::uint32 msg_syn_ctrl_user_cfg::vec_suid(int index) const {
  return vec_suid_.Get(index);
}
inline void msg_syn_ctrl_user_cfg::set_vec_suid(int index, ::google::protobuf::uint32 value) {
  vec_suid_.Set(index, value);
}
inline void msg_syn_ctrl_user_cfg::add_vec_suid(::google::protobuf::uint32 value) {
  vec_suid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
msg_syn_ctrl_user_cfg::vec_suid() const {
  return vec_suid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
msg_syn_ctrl_user_cfg::mutable_vec_suid() {
  return &vec_suid_;
}

// optional uint32 opertype = 2;
inline bool msg_syn_ctrl_user_cfg::has_opertype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_syn_ctrl_user_cfg::set_has_opertype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_syn_ctrl_user_cfg::clear_has_opertype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_syn_ctrl_user_cfg::clear_opertype() {
  opertype_ = 0u;
  clear_has_opertype();
}
inline ::google::protobuf::uint32 msg_syn_ctrl_user_cfg::opertype() const {
  return opertype_;
}
inline void msg_syn_ctrl_user_cfg::set_opertype(::google::protobuf::uint32 value) {
  set_has_opertype();
  opertype_ = value;
}

// optional uint32 tag_suid = 3;
inline bool msg_syn_ctrl_user_cfg::has_tag_suid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_syn_ctrl_user_cfg::set_has_tag_suid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_syn_ctrl_user_cfg::clear_has_tag_suid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_syn_ctrl_user_cfg::clear_tag_suid() {
  tag_suid_ = 0u;
  clear_has_tag_suid();
}
inline ::google::protobuf::uint32 msg_syn_ctrl_user_cfg::tag_suid() const {
  return tag_suid_;
}
inline void msg_syn_ctrl_user_cfg::set_tag_suid(::google::protobuf::uint32 value) {
  set_has_tag_suid();
  tag_suid_ = value;
}

// optional bytes tag_sdeviceid = 4;
inline bool msg_syn_ctrl_user_cfg::has_tag_sdeviceid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_syn_ctrl_user_cfg::set_has_tag_sdeviceid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_syn_ctrl_user_cfg::clear_has_tag_sdeviceid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_syn_ctrl_user_cfg::clear_tag_sdeviceid() {
  if (tag_sdeviceid_ != &::google::protobuf::internal::kEmptyString) {
    tag_sdeviceid_->clear();
  }
  clear_has_tag_sdeviceid();
}
inline const ::std::string& msg_syn_ctrl_user_cfg::tag_sdeviceid() const {
  return *tag_sdeviceid_;
}
inline void msg_syn_ctrl_user_cfg::set_tag_sdeviceid(const ::std::string& value) {
  set_has_tag_sdeviceid();
  if (tag_sdeviceid_ == &::google::protobuf::internal::kEmptyString) {
    tag_sdeviceid_ = new ::std::string;
  }
  tag_sdeviceid_->assign(value);
}
inline void msg_syn_ctrl_user_cfg::set_tag_sdeviceid(const char* value) {
  set_has_tag_sdeviceid();
  if (tag_sdeviceid_ == &::google::protobuf::internal::kEmptyString) {
    tag_sdeviceid_ = new ::std::string;
  }
  tag_sdeviceid_->assign(value);
}
inline void msg_syn_ctrl_user_cfg::set_tag_sdeviceid(const void* value, size_t size) {
  set_has_tag_sdeviceid();
  if (tag_sdeviceid_ == &::google::protobuf::internal::kEmptyString) {
    tag_sdeviceid_ = new ::std::string;
  }
  tag_sdeviceid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_syn_ctrl_user_cfg::mutable_tag_sdeviceid() {
  set_has_tag_sdeviceid();
  if (tag_sdeviceid_ == &::google::protobuf::internal::kEmptyString) {
    tag_sdeviceid_ = new ::std::string;
  }
  return tag_sdeviceid_;
}
inline ::std::string* msg_syn_ctrl_user_cfg::release_tag_sdeviceid() {
  clear_has_tag_sdeviceid();
  if (tag_sdeviceid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tag_sdeviceid_;
    tag_sdeviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_syn_ctrl_user_cfg::set_allocated_tag_sdeviceid(::std::string* tag_sdeviceid) {
  if (tag_sdeviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete tag_sdeviceid_;
  }
  if (tag_sdeviceid) {
    set_has_tag_sdeviceid();
    tag_sdeviceid_ = tag_sdeviceid;
  } else {
    clear_has_tag_sdeviceid();
    tag_sdeviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 tag_tuid = 5;
inline bool msg_syn_ctrl_user_cfg::has_tag_tuid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_syn_ctrl_user_cfg::set_has_tag_tuid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_syn_ctrl_user_cfg::clear_has_tag_tuid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_syn_ctrl_user_cfg::clear_tag_tuid() {
  tag_tuid_ = 0u;
  clear_has_tag_tuid();
}
inline ::google::protobuf::uint32 msg_syn_ctrl_user_cfg::tag_tuid() const {
  return tag_tuid_;
}
inline void msg_syn_ctrl_user_cfg::set_tag_tuid(::google::protobuf::uint32 value) {
  set_has_tag_tuid();
  tag_tuid_ = value;
}

// repeated uint32 tag_cgid = 6;
inline int msg_syn_ctrl_user_cfg::tag_cgid_size() const {
  return tag_cgid_.size();
}
inline void msg_syn_ctrl_user_cfg::clear_tag_cgid() {
  tag_cgid_.Clear();
}
inline ::google::protobuf::uint32 msg_syn_ctrl_user_cfg::tag_cgid(int index) const {
  return tag_cgid_.Get(index);
}
inline void msg_syn_ctrl_user_cfg::set_tag_cgid(int index, ::google::protobuf::uint32 value) {
  tag_cgid_.Set(index, value);
}
inline void msg_syn_ctrl_user_cfg::add_tag_cgid(::google::protobuf::uint32 value) {
  tag_cgid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
msg_syn_ctrl_user_cfg::tag_cgid() const {
  return tag_cgid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
msg_syn_ctrl_user_cfg::mutable_tag_cgid() {
  return &tag_cgid_;
}

// optional bytes tag_skey = 7;
inline bool msg_syn_ctrl_user_cfg::has_tag_skey() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_syn_ctrl_user_cfg::set_has_tag_skey() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_syn_ctrl_user_cfg::clear_has_tag_skey() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_syn_ctrl_user_cfg::clear_tag_skey() {
  if (tag_skey_ != &::google::protobuf::internal::kEmptyString) {
    tag_skey_->clear();
  }
  clear_has_tag_skey();
}
inline const ::std::string& msg_syn_ctrl_user_cfg::tag_skey() const {
  return *tag_skey_;
}
inline void msg_syn_ctrl_user_cfg::set_tag_skey(const ::std::string& value) {
  set_has_tag_skey();
  if (tag_skey_ == &::google::protobuf::internal::kEmptyString) {
    tag_skey_ = new ::std::string;
  }
  tag_skey_->assign(value);
}
inline void msg_syn_ctrl_user_cfg::set_tag_skey(const char* value) {
  set_has_tag_skey();
  if (tag_skey_ == &::google::protobuf::internal::kEmptyString) {
    tag_skey_ = new ::std::string;
  }
  tag_skey_->assign(value);
}
inline void msg_syn_ctrl_user_cfg::set_tag_skey(const void* value, size_t size) {
  set_has_tag_skey();
  if (tag_skey_ == &::google::protobuf::internal::kEmptyString) {
    tag_skey_ = new ::std::string;
  }
  tag_skey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* msg_syn_ctrl_user_cfg::mutable_tag_skey() {
  set_has_tag_skey();
  if (tag_skey_ == &::google::protobuf::internal::kEmptyString) {
    tag_skey_ = new ::std::string;
  }
  return tag_skey_;
}
inline ::std::string* msg_syn_ctrl_user_cfg::release_tag_skey() {
  clear_has_tag_skey();
  if (tag_skey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tag_skey_;
    tag_skey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void msg_syn_ctrl_user_cfg::set_allocated_tag_skey(::std::string* tag_skey) {
  if (tag_skey_ != &::google::protobuf::internal::kEmptyString) {
    delete tag_skey_;
  }
  if (tag_skey) {
    set_has_tag_skey();
    tag_skey_ = tag_skey;
  } else {
    clear_has_tag_skey();
    tag_skey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// msg_change_room_stock_cfg

// optional int32 roomid = 1;
inline bool msg_change_room_stock_cfg::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_change_room_stock_cfg::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_change_room_stock_cfg::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_change_room_stock_cfg::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 msg_change_room_stock_cfg::roomid() const {
  return roomid_;
}
inline void msg_change_room_stock_cfg::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// optional int64 stock_max = 2;
inline bool msg_change_room_stock_cfg::has_stock_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_change_room_stock_cfg::set_has_stock_max() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_change_room_stock_cfg::clear_has_stock_max() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_change_room_stock_cfg::clear_stock_max() {
  stock_max_ = GOOGLE_LONGLONG(0);
  clear_has_stock_max();
}
inline ::google::protobuf::int64 msg_change_room_stock_cfg::stock_max() const {
  return stock_max_;
}
inline void msg_change_room_stock_cfg::set_stock_max(::google::protobuf::int64 value) {
  set_has_stock_max();
  stock_max_ = value;
}

// optional int32 stock_conversion_rate = 3;
inline bool msg_change_room_stock_cfg::has_stock_conversion_rate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_change_room_stock_cfg::set_has_stock_conversion_rate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_change_room_stock_cfg::clear_has_stock_conversion_rate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_change_room_stock_cfg::clear_stock_conversion_rate() {
  stock_conversion_rate_ = 0;
  clear_has_stock_conversion_rate();
}
inline ::google::protobuf::int32 msg_change_room_stock_cfg::stock_conversion_rate() const {
  return stock_conversion_rate_;
}
inline void msg_change_room_stock_cfg::set_stock_conversion_rate(::google::protobuf::int32 value) {
  set_has_stock_conversion_rate();
  stock_conversion_rate_ = value;
}

// optional int64 jackpot_min = 4;
inline bool msg_change_room_stock_cfg::has_jackpot_min() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_change_room_stock_cfg::set_has_jackpot_min() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_change_room_stock_cfg::clear_has_jackpot_min() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_change_room_stock_cfg::clear_jackpot_min() {
  jackpot_min_ = GOOGLE_LONGLONG(0);
  clear_has_jackpot_min();
}
inline ::google::protobuf::int64 msg_change_room_stock_cfg::jackpot_min() const {
  return jackpot_min_;
}
inline void msg_change_room_stock_cfg::set_jackpot_min(::google::protobuf::int64 value) {
  set_has_jackpot_min();
  jackpot_min_ = value;
}

// optional int32 jackpot_max_rate = 5;
inline bool msg_change_room_stock_cfg::has_jackpot_max_rate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_change_room_stock_cfg::set_has_jackpot_max_rate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_change_room_stock_cfg::clear_has_jackpot_max_rate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_change_room_stock_cfg::clear_jackpot_max_rate() {
  jackpot_max_rate_ = 0;
  clear_has_jackpot_max_rate();
}
inline ::google::protobuf::int32 msg_change_room_stock_cfg::jackpot_max_rate() const {
  return jackpot_max_rate_;
}
inline void msg_change_room_stock_cfg::set_jackpot_max_rate(::google::protobuf::int32 value) {
  set_has_jackpot_max_rate();
  jackpot_max_rate_ = value;
}

// optional int32 jackpot_rate = 6;
inline bool msg_change_room_stock_cfg::has_jackpot_rate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_change_room_stock_cfg::set_has_jackpot_rate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_change_room_stock_cfg::clear_has_jackpot_rate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_change_room_stock_cfg::clear_jackpot_rate() {
  jackpot_rate_ = 0;
  clear_has_jackpot_rate();
}
inline ::google::protobuf::int32 msg_change_room_stock_cfg::jackpot_rate() const {
  return jackpot_rate_;
}
inline void msg_change_room_stock_cfg::set_jackpot_rate(::google::protobuf::int32 value) {
  set_has_jackpot_rate();
  jackpot_rate_ = value;
}

// optional int32 jackpot_coefficient = 7;
inline bool msg_change_room_stock_cfg::has_jackpot_coefficient() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_change_room_stock_cfg::set_has_jackpot_coefficient() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_change_room_stock_cfg::clear_has_jackpot_coefficient() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_change_room_stock_cfg::clear_jackpot_coefficient() {
  jackpot_coefficient_ = 0;
  clear_has_jackpot_coefficient();
}
inline ::google::protobuf::int32 msg_change_room_stock_cfg::jackpot_coefficient() const {
  return jackpot_coefficient_;
}
inline void msg_change_room_stock_cfg::set_jackpot_coefficient(::google::protobuf::int32 value) {
  set_has_jackpot_coefficient();
  jackpot_coefficient_ = value;
}

// optional int32 jackpot_extract_rate = 8;
inline bool msg_change_room_stock_cfg::has_jackpot_extract_rate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void msg_change_room_stock_cfg::set_has_jackpot_extract_rate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void msg_change_room_stock_cfg::clear_has_jackpot_extract_rate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void msg_change_room_stock_cfg::clear_jackpot_extract_rate() {
  jackpot_extract_rate_ = 0;
  clear_has_jackpot_extract_rate();
}
inline ::google::protobuf::int32 msg_change_room_stock_cfg::jackpot_extract_rate() const {
  return jackpot_extract_rate_;
}
inline void msg_change_room_stock_cfg::set_jackpot_extract_rate(::google::protobuf::int32 value) {
  set_has_jackpot_extract_rate();
  jackpot_extract_rate_ = value;
}

// optional int64 add_stock = 9;
inline bool msg_change_room_stock_cfg::has_add_stock() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void msg_change_room_stock_cfg::set_has_add_stock() {
  _has_bits_[0] |= 0x00000100u;
}
inline void msg_change_room_stock_cfg::clear_has_add_stock() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void msg_change_room_stock_cfg::clear_add_stock() {
  add_stock_ = GOOGLE_LONGLONG(0);
  clear_has_add_stock();
}
inline ::google::protobuf::int64 msg_change_room_stock_cfg::add_stock() const {
  return add_stock_;
}
inline void msg_change_room_stock_cfg::set_add_stock(::google::protobuf::int64 value) {
  set_has_add_stock();
  add_stock_ = value;
}

// optional int64 kill_points_line = 10;
inline bool msg_change_room_stock_cfg::has_kill_points_line() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void msg_change_room_stock_cfg::set_has_kill_points_line() {
  _has_bits_[0] |= 0x00000200u;
}
inline void msg_change_room_stock_cfg::clear_has_kill_points_line() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void msg_change_room_stock_cfg::clear_kill_points_line() {
  kill_points_line_ = GOOGLE_LONGLONG(0);
  clear_has_kill_points_line();
}
inline ::google::protobuf::int64 msg_change_room_stock_cfg::kill_points_line() const {
  return kill_points_line_;
}
inline void msg_change_room_stock_cfg::set_kill_points_line(::google::protobuf::int64 value) {
  set_has_kill_points_line();
  kill_points_line_ = value;
}

// optional int32 player_win_rate = 11;
inline bool msg_change_room_stock_cfg::has_player_win_rate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void msg_change_room_stock_cfg::set_has_player_win_rate() {
  _has_bits_[0] |= 0x00000400u;
}
inline void msg_change_room_stock_cfg::clear_has_player_win_rate() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void msg_change_room_stock_cfg::clear_player_win_rate() {
  player_win_rate_ = 0;
  clear_has_player_win_rate();
}
inline ::google::protobuf::int32 msg_change_room_stock_cfg::player_win_rate() const {
  return player_win_rate_;
}
inline void msg_change_room_stock_cfg::set_player_win_rate(::google::protobuf::int32 value) {
  set_has_player_win_rate();
  player_win_rate_ = value;
}

// optional int64 add_jackpot = 12;
inline bool msg_change_room_stock_cfg::has_add_jackpot() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void msg_change_room_stock_cfg::set_has_add_jackpot() {
  _has_bits_[0] |= 0x00000800u;
}
inline void msg_change_room_stock_cfg::clear_has_add_jackpot() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void msg_change_room_stock_cfg::clear_add_jackpot() {
  add_jackpot_ = GOOGLE_LONGLONG(0);
  clear_has_add_jackpot();
}
inline ::google::protobuf::int64 msg_change_room_stock_cfg::add_jackpot() const {
  return add_jackpot_;
}
inline void msg_change_room_stock_cfg::set_add_jackpot(::google::protobuf::int64 value) {
  set_has_add_jackpot();
  add_jackpot_ = value;
}

// -------------------------------------------------------------------

// msg_syn_lucky_cfg

// optional uint32 uid = 1;
inline bool msg_syn_lucky_cfg::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_syn_lucky_cfg::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_syn_lucky_cfg::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_syn_lucky_cfg::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 msg_syn_lucky_cfg::uid() const {
  return uid_;
}
inline void msg_syn_lucky_cfg::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// -------------------------------------------------------------------

// msg_syn_fish_cfg

// optional uint32 id = 1;
inline bool msg_syn_fish_cfg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_syn_fish_cfg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_syn_fish_cfg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_syn_fish_cfg::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 msg_syn_fish_cfg::id() const {
  return id_;
}
inline void msg_syn_fish_cfg::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 prize_min = 2;
inline bool msg_syn_fish_cfg::has_prize_min() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_syn_fish_cfg::set_has_prize_min() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_syn_fish_cfg::clear_has_prize_min() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_syn_fish_cfg::clear_prize_min() {
  prize_min_ = 0u;
  clear_has_prize_min();
}
inline ::google::protobuf::uint32 msg_syn_fish_cfg::prize_min() const {
  return prize_min_;
}
inline void msg_syn_fish_cfg::set_prize_min(::google::protobuf::uint32 value) {
  set_has_prize_min();
  prize_min_ = value;
}

// optional uint32 prize_max = 3;
inline bool msg_syn_fish_cfg::has_prize_max() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_syn_fish_cfg::set_has_prize_max() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_syn_fish_cfg::clear_has_prize_max() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_syn_fish_cfg::clear_prize_max() {
  prize_max_ = 0u;
  clear_has_prize_max();
}
inline ::google::protobuf::uint32 msg_syn_fish_cfg::prize_max() const {
  return prize_max_;
}
inline void msg_syn_fish_cfg::set_prize_max(::google::protobuf::uint32 value) {
  set_has_prize_max();
  prize_max_ = value;
}

// optional uint32 kill_rate = 4;
inline bool msg_syn_fish_cfg::has_kill_rate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_syn_fish_cfg::set_has_kill_rate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_syn_fish_cfg::clear_has_kill_rate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_syn_fish_cfg::clear_kill_rate() {
  kill_rate_ = 0u;
  clear_has_kill_rate();
}
inline ::google::protobuf::uint32 msg_syn_fish_cfg::kill_rate() const {
  return kill_rate_;
}
inline void msg_syn_fish_cfg::set_kill_rate(::google::protobuf::uint32 value) {
  set_has_kill_rate();
  kill_rate_ = value;
}

// -------------------------------------------------------------------

// msg_reset_lucky_cfg

// optional uint32 uid = 1;
inline bool msg_reset_lucky_cfg::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_reset_lucky_cfg::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_reset_lucky_cfg::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_reset_lucky_cfg::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 msg_reset_lucky_cfg::uid() const {
  return uid_;
}
inline void msg_reset_lucky_cfg::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace net

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_servers_5fmsg_2eproto__INCLUDED
