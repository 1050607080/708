// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: texas_logic_msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "texas_logic_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace net {

namespace {

const ::google::protobuf::Descriptor* msg_texas_game_info_free_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_texas_game_info_free_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_texas_game_info_play_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_texas_game_info_play_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_texas_start_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_texas_start_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_texas_addscore_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_texas_addscore_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_texas_addscore_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_texas_addscore_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_texas_giveup_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_texas_giveup_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_texas_giveup_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_texas_giveup_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_texas_sendcard_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_texas_sendcard_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* texas_win_chair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  texas_win_chair_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_texas_game_end_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_texas_game_end_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_texas_buyin_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_texas_buyin_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_texas_buyin_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_texas_buyin_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_texas_buyin_next_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_texas_buyin_next_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_texas_buyin_next_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_texas_buyin_next_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_texas_buyin_next_suc_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_texas_buyin_next_suc_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_texas_show_card_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_texas_show_card_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_texas_show_card_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_texas_show_card_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_texas_standup_table_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_texas_standup_table_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_texas_buyin_wait_standup_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_texas_buyin_wait_standup_rep_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_texas_5flogic_5fmsg_2eproto() {
  protobuf_AddDesc_texas_5flogic_5fmsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "texas_logic_msg.proto");
  GOOGLE_CHECK(file != NULL);
  msg_texas_game_info_free_rep_descriptor_ = file->message_type(0);
  static const int msg_texas_game_info_free_rep_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_game_info_free_rep, cell_minscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_game_info_free_rep, cell_maxscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_game_info_free_rep, buyin_state_),
  };
  msg_texas_game_info_free_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_texas_game_info_free_rep_descriptor_,
      msg_texas_game_info_free_rep::default_instance_,
      msg_texas_game_info_free_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_game_info_free_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_game_info_free_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_texas_game_info_free_rep));
  msg_texas_game_info_play_rep_descriptor_ = file->message_type(1);
  static const int msg_texas_game_info_play_rep_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_game_info_play_rep, cell_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_game_info_play_rep, turn_max_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_game_info_play_rep, turn_less_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_game_info_play_rep, cell_max_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_game_info_play_rep, add_less_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_game_info_play_rep, table_scores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_game_info_play_rep, total_scores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_game_info_play_rep, center_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_game_info_play_rep, d_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_game_info_play_rep, current_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_game_info_play_rep, play_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_game_info_play_rep, balance_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_game_info_play_rep, center_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_game_info_play_rep, hand_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_game_info_play_rep, oper_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_game_info_play_rep, min_chipin_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_game_info_play_rep, max_chipin_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_game_info_play_rep, card_chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_game_info_play_rep, buyin_state_),
  };
  msg_texas_game_info_play_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_texas_game_info_play_rep_descriptor_,
      msg_texas_game_info_play_rep::default_instance_,
      msg_texas_game_info_play_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_game_info_play_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_game_info_play_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_texas_game_info_play_rep));
  msg_texas_start_rep_descriptor_ = file->message_type(2);
  static const int msg_texas_start_rep_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_start_rep, current_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_start_rep, d_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_start_rep, max_chipin_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_start_rep, cell_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_start_rep, turn_max_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_start_rep, turn_less_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_start_rep, add_less_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_start_rep, card_datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_start_rep, min_chipin_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_start_rep, card_chairid_),
  };
  msg_texas_start_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_texas_start_rep_descriptor_,
      msg_texas_start_rep::default_instance_,
      msg_texas_start_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_start_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_start_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_texas_start_rep));
  msg_texas_addscore_req_descriptor_ = file->message_type(3);
  static const int msg_texas_addscore_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_addscore_req, add_score_),
  };
  msg_texas_addscore_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_texas_addscore_req_descriptor_,
      msg_texas_addscore_req::default_instance_,
      msg_texas_addscore_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_addscore_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_addscore_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_texas_addscore_req));
  msg_texas_addscore_rep_descriptor_ = file->message_type(4);
  static const int msg_texas_addscore_rep_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_addscore_rep, current_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_addscore_rep, addscore_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_addscore_rep, addscore_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_addscore_rep, turn_less_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_addscore_rep, turn_max_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_addscore_rep, add_less_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_addscore_rep, showhands_),
  };
  msg_texas_addscore_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_texas_addscore_rep_descriptor_,
      msg_texas_addscore_rep::default_instance_,
      msg_texas_addscore_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_addscore_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_addscore_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_texas_addscore_rep));
  msg_texas_giveup_req_descriptor_ = file->message_type(5);
  static const int msg_texas_giveup_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_giveup_req, giveup_reason_),
  };
  msg_texas_giveup_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_texas_giveup_req_descriptor_,
      msg_texas_giveup_req::default_instance_,
      msg_texas_giveup_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_giveup_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_giveup_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_texas_giveup_req));
  msg_texas_giveup_rep_descriptor_ = file->message_type(6);
  static const int msg_texas_giveup_rep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_giveup_rep, giveup_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_giveup_rep, lost_score_),
  };
  msg_texas_giveup_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_texas_giveup_rep_descriptor_,
      msg_texas_giveup_rep::default_instance_,
      msg_texas_giveup_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_giveup_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_giveup_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_texas_giveup_rep));
  msg_texas_sendcard_rep_descriptor_ = file->message_type(7);
  static const int msg_texas_sendcard_rep_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_sendcard_rep, public_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_sendcard_rep, current_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_sendcard_rep, send_card_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_sendcard_rep, center_cards_),
  };
  msg_texas_sendcard_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_texas_sendcard_rep_descriptor_,
      msg_texas_sendcard_rep::default_instance_,
      msg_texas_sendcard_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_sendcard_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_sendcard_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_texas_sendcard_rep));
  texas_win_chair_descriptor_ = file->message_type(8);
  static const int texas_win_chair_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texas_win_chair, win_chair_),
  };
  texas_win_chair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      texas_win_chair_descriptor_,
      texas_win_chair::default_instance_,
      texas_win_chair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texas_win_chair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texas_win_chair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(texas_win_chair));
  msg_texas_game_end_rep_descriptor_ = file->message_type(9);
  static const int msg_texas_game_end_rep_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_game_end_rep, total_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_game_end_rep, game_scores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_game_end_rep, card_datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_game_end_rep, last_center_carddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_game_end_rep, win_chairs_),
  };
  msg_texas_game_end_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_texas_game_end_rep_descriptor_,
      msg_texas_game_end_rep::default_instance_,
      msg_texas_game_end_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_game_end_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_game_end_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_texas_game_end_rep));
  msg_texas_buyin_req_descriptor_ = file->message_type(10);
  static const int msg_texas_buyin_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_buyin_req, score_),
  };
  msg_texas_buyin_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_texas_buyin_req_descriptor_,
      msg_texas_buyin_req::default_instance_,
      msg_texas_buyin_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_buyin_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_buyin_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_texas_buyin_req));
  msg_texas_buyin_rep_descriptor_ = file->message_type(11);
  static const int msg_texas_buyin_rep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_buyin_rep, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_buyin_rep, result_),
  };
  msg_texas_buyin_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_texas_buyin_rep_descriptor_,
      msg_texas_buyin_rep::default_instance_,
      msg_texas_buyin_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_buyin_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_buyin_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_texas_buyin_rep));
  msg_texas_buyin_next_req_descriptor_ = file->message_type(12);
  static const int msg_texas_buyin_next_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_buyin_next_req, score_),
  };
  msg_texas_buyin_next_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_texas_buyin_next_req_descriptor_,
      msg_texas_buyin_next_req::default_instance_,
      msg_texas_buyin_next_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_buyin_next_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_buyin_next_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_texas_buyin_next_req));
  msg_texas_buyin_next_rep_descriptor_ = file->message_type(13);
  static const int msg_texas_buyin_next_rep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_buyin_next_rep, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_buyin_next_rep, result_),
  };
  msg_texas_buyin_next_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_texas_buyin_next_rep_descriptor_,
      msg_texas_buyin_next_rep::default_instance_,
      msg_texas_buyin_next_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_buyin_next_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_buyin_next_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_texas_buyin_next_rep));
  msg_texas_buyin_next_suc_rep_descriptor_ = file->message_type(14);
  static const int msg_texas_buyin_next_suc_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_buyin_next_suc_rep, score_),
  };
  msg_texas_buyin_next_suc_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_texas_buyin_next_suc_rep_descriptor_,
      msg_texas_buyin_next_suc_rep::default_instance_,
      msg_texas_buyin_next_suc_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_buyin_next_suc_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_buyin_next_suc_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_texas_buyin_next_suc_rep));
  msg_texas_show_card_req_descriptor_ = file->message_type(15);
  static const int msg_texas_show_card_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_show_card_req, cards_),
  };
  msg_texas_show_card_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_texas_show_card_req_descriptor_,
      msg_texas_show_card_req::default_instance_,
      msg_texas_show_card_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_show_card_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_show_card_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_texas_show_card_req));
  msg_texas_show_card_rep_descriptor_ = file->message_type(16);
  static const int msg_texas_show_card_rep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_show_card_rep, show_chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_show_card_rep, cards_),
  };
  msg_texas_show_card_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_texas_show_card_rep_descriptor_,
      msg_texas_show_card_rep::default_instance_,
      msg_texas_show_card_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_show_card_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_show_card_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_texas_show_card_rep));
  msg_texas_standup_table_rep_descriptor_ = file->message_type(17);
  static const int msg_texas_standup_table_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_standup_table_rep, reason_),
  };
  msg_texas_standup_table_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_texas_standup_table_rep_descriptor_,
      msg_texas_standup_table_rep::default_instance_,
      msg_texas_standup_table_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_standup_table_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_standup_table_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_texas_standup_table_rep));
  msg_texas_buyin_wait_standup_rep_descriptor_ = file->message_type(18);
  static const int msg_texas_buyin_wait_standup_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_buyin_wait_standup_rep, reason_),
  };
  msg_texas_buyin_wait_standup_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_texas_buyin_wait_standup_rep_descriptor_,
      msg_texas_buyin_wait_standup_rep::default_instance_,
      msg_texas_buyin_wait_standup_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_buyin_wait_standup_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_texas_buyin_wait_standup_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_texas_buyin_wait_standup_rep));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_texas_5flogic_5fmsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_texas_game_info_free_rep_descriptor_, &msg_texas_game_info_free_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_texas_game_info_play_rep_descriptor_, &msg_texas_game_info_play_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_texas_start_rep_descriptor_, &msg_texas_start_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_texas_addscore_req_descriptor_, &msg_texas_addscore_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_texas_addscore_rep_descriptor_, &msg_texas_addscore_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_texas_giveup_req_descriptor_, &msg_texas_giveup_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_texas_giveup_rep_descriptor_, &msg_texas_giveup_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_texas_sendcard_rep_descriptor_, &msg_texas_sendcard_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    texas_win_chair_descriptor_, &texas_win_chair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_texas_game_end_rep_descriptor_, &msg_texas_game_end_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_texas_buyin_req_descriptor_, &msg_texas_buyin_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_texas_buyin_rep_descriptor_, &msg_texas_buyin_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_texas_buyin_next_req_descriptor_, &msg_texas_buyin_next_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_texas_buyin_next_rep_descriptor_, &msg_texas_buyin_next_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_texas_buyin_next_suc_rep_descriptor_, &msg_texas_buyin_next_suc_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_texas_show_card_req_descriptor_, &msg_texas_show_card_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_texas_show_card_rep_descriptor_, &msg_texas_show_card_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_texas_standup_table_rep_descriptor_, &msg_texas_standup_table_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_texas_buyin_wait_standup_rep_descriptor_, &msg_texas_buyin_wait_standup_rep::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_texas_5flogic_5fmsg_2eproto() {
  delete msg_texas_game_info_free_rep::default_instance_;
  delete msg_texas_game_info_free_rep_reflection_;
  delete msg_texas_game_info_play_rep::default_instance_;
  delete msg_texas_game_info_play_rep_reflection_;
  delete msg_texas_start_rep::default_instance_;
  delete msg_texas_start_rep_reflection_;
  delete msg_texas_addscore_req::default_instance_;
  delete msg_texas_addscore_req_reflection_;
  delete msg_texas_addscore_rep::default_instance_;
  delete msg_texas_addscore_rep_reflection_;
  delete msg_texas_giveup_req::default_instance_;
  delete msg_texas_giveup_req_reflection_;
  delete msg_texas_giveup_rep::default_instance_;
  delete msg_texas_giveup_rep_reflection_;
  delete msg_texas_sendcard_rep::default_instance_;
  delete msg_texas_sendcard_rep_reflection_;
  delete texas_win_chair::default_instance_;
  delete texas_win_chair_reflection_;
  delete msg_texas_game_end_rep::default_instance_;
  delete msg_texas_game_end_rep_reflection_;
  delete msg_texas_buyin_req::default_instance_;
  delete msg_texas_buyin_req_reflection_;
  delete msg_texas_buyin_rep::default_instance_;
  delete msg_texas_buyin_rep_reflection_;
  delete msg_texas_buyin_next_req::default_instance_;
  delete msg_texas_buyin_next_req_reflection_;
  delete msg_texas_buyin_next_rep::default_instance_;
  delete msg_texas_buyin_next_rep_reflection_;
  delete msg_texas_buyin_next_suc_rep::default_instance_;
  delete msg_texas_buyin_next_suc_rep_reflection_;
  delete msg_texas_show_card_req::default_instance_;
  delete msg_texas_show_card_req_reflection_;
  delete msg_texas_show_card_rep::default_instance_;
  delete msg_texas_show_card_rep_reflection_;
  delete msg_texas_standup_table_rep::default_instance_;
  delete msg_texas_standup_table_rep_reflection_;
  delete msg_texas_buyin_wait_standup_rep::default_instance_;
  delete msg_texas_buyin_wait_standup_rep_reflection_;
}

void protobuf_AddDesc_texas_5flogic_5fmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::net::protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  ::net::protobuf_AddDesc_error_5fcode_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025texas_logic_msg.proto\022\003net\032\025base_msg_s"
    "truct.proto\032\020error_code.proto\"a\n\034msg_tex"
    "as_game_info_free_rep\022\025\n\rcell_minscore\030\001"
    " \001(\003\022\025\n\rcell_maxscore\030\002 \001(\003\022\023\n\013buyin_sta"
    "te\030\003 \001(\005\"\301\003\n\034msg_texas_game_info_play_re"
    "p\022\022\n\ncell_score\030\001 \001(\003\022\026\n\016turn_max_score\030"
    "\002 \001(\003\022\027\n\017turn_less_score\030\003 \001(\003\022\026\n\016cell_m"
    "ax_score\030\004 \001(\003\022\026\n\016add_less_score\030\005 \001(\003\022\024"
    "\n\014table_scores\030\006 \003(\003\022\024\n\014total_scores\030\007 \003"
    "(\003\022\024\n\014center_score\030\010 \001(\003\022\016\n\006d_user\030\t \001(\r"
    "\022\024\n\014current_user\030\n \001(\r\022\023\n\013play_status\030\013 "
    "\003(\r\022\025\n\rbalance_count\030\014 \001(\r\022\024\n\014center_car"
    "ds\030\r \003(\r\022\022\n\nhand_cards\030\016 \003(\r\022\021\n\toper_tim"
    "e\030\017 \001(\r\022\027\n\017min_chipin_user\030\020 \001(\r\022\027\n\017max_"
    "chipin_user\030\021 \001(\r\022\024\n\014card_chairid\030\022 \003(\r\022"
    "\023\n\013buyin_state\030\023 \001(\005\"\204\002\n\023msg_texas_start"
    "_rep\022\024\n\014current_user\030\001 \001(\r\022\016\n\006d_user\030\002 \001"
    "(\r\022\027\n\017max_chipin_user\030\003 \001(\r\022\022\n\ncell_scor"
    "e\030\004 \001(\003\022\026\n\016turn_max_score\030\005 \001(\003\022\027\n\017turn_"
    "less_score\030\006 \001(\003\022\026\n\016add_less_score\030\007 \001(\003"
    "\022\"\n\ncard_datas\030\010 \001(\0132\016.net.msg_cards\022\027\n\017"
    "min_chipin_user\030\t \001(\r\022\024\n\014card_chairid\030\n "
    "\003(\r\"+\n\026msg_texas_addscore_req\022\021\n\tadd_sco"
    "re\030\001 \001(\003\"\271\001\n\026msg_texas_addscore_rep\022\024\n\014c"
    "urrent_user\030\001 \001(\r\022\025\n\raddscore_user\030\002 \001(\r"
    "\022\026\n\016addscore_count\030\003 \001(\003\022\027\n\017turn_less_sc"
    "ore\030\004 \001(\003\022\026\n\016turn_max_score\030\005 \001(\003\022\026\n\016add"
    "_less_score\030\006 \001(\003\022\021\n\tshowhands\030\007 \003(\r\"-\n\024"
    "msg_texas_giveup_req\022\025\n\rgiveup_reason\030\001 "
    "\001(\r\"\?\n\024msg_texas_giveup_rep\022\023\n\013giveup_us"
    "er\030\001 \001(\r\022\022\n\nlost_score\030\002 \001(\003\"r\n\026msg_texa"
    "s_sendcard_rep\022\023\n\013public_card\030\001 \001(\r\022\024\n\014c"
    "urrent_user\030\002 \001(\r\022\027\n\017send_card_count\030\003 \001"
    "(\r\022\024\n\014center_cards\030\004 \003(\r\"$\n\017texas_win_ch"
    "air\022\021\n\twin_chair\030\001 \003(\r\"\274\001\n\026msg_texas_gam"
    "e_end_rep\022\021\n\ttotal_end\030\001 \001(\r\022\023\n\013game_sco"
    "res\030\002 \003(\003\022\"\n\ncard_datas\030\003 \003(\0132\016.net.msg_"
    "cards\022,\n\024last_center_cardData\030\004 \003(\0132\016.ne"
    "t.msg_cards\022(\n\nwin_chairs\030\005 \003(\0132\024.net.te"
    "xas_win_chair\"$\n\023msg_texas_buyin_req\022\r\n\005"
    "score\030\001 \001(\003\"4\n\023msg_texas_buyin_rep\022\r\n\005sc"
    "ore\030\001 \001(\003\022\016\n\006result\030\002 \001(\r\")\n\030msg_texas_b"
    "uyin_next_req\022\r\n\005score\030\001 \001(\003\"9\n\030msg_texa"
    "s_buyin_next_rep\022\r\n\005score\030\001 \001(\003\022\016\n\006resul"
    "t\030\002 \001(\r\"-\n\034msg_texas_buyin_next_suc_rep\022"
    "\r\n\005score\030\001 \001(\003\"(\n\027msg_texas_show_card_re"
    "q\022\r\n\005cards\030\001 \003(\r\">\n\027msg_texas_show_card_"
    "rep\022\024\n\014show_chairid\030\001 \001(\r\022\r\n\005cards\030\002 \003(\r"
    "\"-\n\033msg_texas_standup_table_rep\022\016\n\006reaso"
    "n\030\001 \001(\r\"2\n msg_texas_buyin_wait_standup_"
    "rep\022\016\n\006reason\030\001 \001(\005", 2019);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "texas_logic_msg.proto", &protobuf_RegisterTypes);
  msg_texas_game_info_free_rep::default_instance_ = new msg_texas_game_info_free_rep();
  msg_texas_game_info_play_rep::default_instance_ = new msg_texas_game_info_play_rep();
  msg_texas_start_rep::default_instance_ = new msg_texas_start_rep();
  msg_texas_addscore_req::default_instance_ = new msg_texas_addscore_req();
  msg_texas_addscore_rep::default_instance_ = new msg_texas_addscore_rep();
  msg_texas_giveup_req::default_instance_ = new msg_texas_giveup_req();
  msg_texas_giveup_rep::default_instance_ = new msg_texas_giveup_rep();
  msg_texas_sendcard_rep::default_instance_ = new msg_texas_sendcard_rep();
  texas_win_chair::default_instance_ = new texas_win_chair();
  msg_texas_game_end_rep::default_instance_ = new msg_texas_game_end_rep();
  msg_texas_buyin_req::default_instance_ = new msg_texas_buyin_req();
  msg_texas_buyin_rep::default_instance_ = new msg_texas_buyin_rep();
  msg_texas_buyin_next_req::default_instance_ = new msg_texas_buyin_next_req();
  msg_texas_buyin_next_rep::default_instance_ = new msg_texas_buyin_next_rep();
  msg_texas_buyin_next_suc_rep::default_instance_ = new msg_texas_buyin_next_suc_rep();
  msg_texas_show_card_req::default_instance_ = new msg_texas_show_card_req();
  msg_texas_show_card_rep::default_instance_ = new msg_texas_show_card_rep();
  msg_texas_standup_table_rep::default_instance_ = new msg_texas_standup_table_rep();
  msg_texas_buyin_wait_standup_rep::default_instance_ = new msg_texas_buyin_wait_standup_rep();
  msg_texas_game_info_free_rep::default_instance_->InitAsDefaultInstance();
  msg_texas_game_info_play_rep::default_instance_->InitAsDefaultInstance();
  msg_texas_start_rep::default_instance_->InitAsDefaultInstance();
  msg_texas_addscore_req::default_instance_->InitAsDefaultInstance();
  msg_texas_addscore_rep::default_instance_->InitAsDefaultInstance();
  msg_texas_giveup_req::default_instance_->InitAsDefaultInstance();
  msg_texas_giveup_rep::default_instance_->InitAsDefaultInstance();
  msg_texas_sendcard_rep::default_instance_->InitAsDefaultInstance();
  texas_win_chair::default_instance_->InitAsDefaultInstance();
  msg_texas_game_end_rep::default_instance_->InitAsDefaultInstance();
  msg_texas_buyin_req::default_instance_->InitAsDefaultInstance();
  msg_texas_buyin_rep::default_instance_->InitAsDefaultInstance();
  msg_texas_buyin_next_req::default_instance_->InitAsDefaultInstance();
  msg_texas_buyin_next_rep::default_instance_->InitAsDefaultInstance();
  msg_texas_buyin_next_suc_rep::default_instance_->InitAsDefaultInstance();
  msg_texas_show_card_req::default_instance_->InitAsDefaultInstance();
  msg_texas_show_card_rep::default_instance_->InitAsDefaultInstance();
  msg_texas_standup_table_rep::default_instance_->InitAsDefaultInstance();
  msg_texas_buyin_wait_standup_rep::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_texas_5flogic_5fmsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_texas_5flogic_5fmsg_2eproto {
  StaticDescriptorInitializer_texas_5flogic_5fmsg_2eproto() {
    protobuf_AddDesc_texas_5flogic_5fmsg_2eproto();
  }
} static_descriptor_initializer_texas_5flogic_5fmsg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int msg_texas_game_info_free_rep::kCellMinscoreFieldNumber;
const int msg_texas_game_info_free_rep::kCellMaxscoreFieldNumber;
const int msg_texas_game_info_free_rep::kBuyinStateFieldNumber;
#endif  // !_MSC_VER

msg_texas_game_info_free_rep::msg_texas_game_info_free_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_texas_game_info_free_rep::InitAsDefaultInstance() {
}

msg_texas_game_info_free_rep::msg_texas_game_info_free_rep(const msg_texas_game_info_free_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_texas_game_info_free_rep::SharedCtor() {
  _cached_size_ = 0;
  cell_minscore_ = GOOGLE_LONGLONG(0);
  cell_maxscore_ = GOOGLE_LONGLONG(0);
  buyin_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_texas_game_info_free_rep::~msg_texas_game_info_free_rep() {
  SharedDtor();
}

void msg_texas_game_info_free_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_texas_game_info_free_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_texas_game_info_free_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_texas_game_info_free_rep_descriptor_;
}

const msg_texas_game_info_free_rep& msg_texas_game_info_free_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_texas_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_texas_game_info_free_rep* msg_texas_game_info_free_rep::default_instance_ = NULL;

msg_texas_game_info_free_rep* msg_texas_game_info_free_rep::New() const {
  return new msg_texas_game_info_free_rep;
}

void msg_texas_game_info_free_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cell_minscore_ = GOOGLE_LONGLONG(0);
    cell_maxscore_ = GOOGLE_LONGLONG(0);
    buyin_state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_texas_game_info_free_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 cell_minscore = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cell_minscore_)));
          set_has_cell_minscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cell_maxscore;
        break;
      }

      // optional int64 cell_maxscore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cell_maxscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cell_maxscore_)));
          set_has_cell_maxscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buyin_state;
        break;
      }

      // optional int32 buyin_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyin_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyin_state_)));
          set_has_buyin_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_texas_game_info_free_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 cell_minscore = 1;
  if (has_cell_minscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->cell_minscore(), output);
  }

  // optional int64 cell_maxscore = 2;
  if (has_cell_maxscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->cell_maxscore(), output);
  }

  // optional int32 buyin_state = 3;
  if (has_buyin_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->buyin_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_texas_game_info_free_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 cell_minscore = 1;
  if (has_cell_minscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->cell_minscore(), target);
  }

  // optional int64 cell_maxscore = 2;
  if (has_cell_maxscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->cell_maxscore(), target);
  }

  // optional int32 buyin_state = 3;
  if (has_buyin_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->buyin_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_texas_game_info_free_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 cell_minscore = 1;
    if (has_cell_minscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cell_minscore());
    }

    // optional int64 cell_maxscore = 2;
    if (has_cell_maxscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cell_maxscore());
    }

    // optional int32 buyin_state = 3;
    if (has_buyin_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyin_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_texas_game_info_free_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_texas_game_info_free_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_texas_game_info_free_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_texas_game_info_free_rep::MergeFrom(const msg_texas_game_info_free_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cell_minscore()) {
      set_cell_minscore(from.cell_minscore());
    }
    if (from.has_cell_maxscore()) {
      set_cell_maxscore(from.cell_maxscore());
    }
    if (from.has_buyin_state()) {
      set_buyin_state(from.buyin_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_texas_game_info_free_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_texas_game_info_free_rep::CopyFrom(const msg_texas_game_info_free_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_texas_game_info_free_rep::IsInitialized() const {

  return true;
}

void msg_texas_game_info_free_rep::Swap(msg_texas_game_info_free_rep* other) {
  if (other != this) {
    std::swap(cell_minscore_, other->cell_minscore_);
    std::swap(cell_maxscore_, other->cell_maxscore_);
    std::swap(buyin_state_, other->buyin_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_texas_game_info_free_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_texas_game_info_free_rep_descriptor_;
  metadata.reflection = msg_texas_game_info_free_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_texas_game_info_play_rep::kCellScoreFieldNumber;
const int msg_texas_game_info_play_rep::kTurnMaxScoreFieldNumber;
const int msg_texas_game_info_play_rep::kTurnLessScoreFieldNumber;
const int msg_texas_game_info_play_rep::kCellMaxScoreFieldNumber;
const int msg_texas_game_info_play_rep::kAddLessScoreFieldNumber;
const int msg_texas_game_info_play_rep::kTableScoresFieldNumber;
const int msg_texas_game_info_play_rep::kTotalScoresFieldNumber;
const int msg_texas_game_info_play_rep::kCenterScoreFieldNumber;
const int msg_texas_game_info_play_rep::kDUserFieldNumber;
const int msg_texas_game_info_play_rep::kCurrentUserFieldNumber;
const int msg_texas_game_info_play_rep::kPlayStatusFieldNumber;
const int msg_texas_game_info_play_rep::kBalanceCountFieldNumber;
const int msg_texas_game_info_play_rep::kCenterCardsFieldNumber;
const int msg_texas_game_info_play_rep::kHandCardsFieldNumber;
const int msg_texas_game_info_play_rep::kOperTimeFieldNumber;
const int msg_texas_game_info_play_rep::kMinChipinUserFieldNumber;
const int msg_texas_game_info_play_rep::kMaxChipinUserFieldNumber;
const int msg_texas_game_info_play_rep::kCardChairidFieldNumber;
const int msg_texas_game_info_play_rep::kBuyinStateFieldNumber;
#endif  // !_MSC_VER

msg_texas_game_info_play_rep::msg_texas_game_info_play_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_texas_game_info_play_rep::InitAsDefaultInstance() {
}

msg_texas_game_info_play_rep::msg_texas_game_info_play_rep(const msg_texas_game_info_play_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_texas_game_info_play_rep::SharedCtor() {
  _cached_size_ = 0;
  cell_score_ = GOOGLE_LONGLONG(0);
  turn_max_score_ = GOOGLE_LONGLONG(0);
  turn_less_score_ = GOOGLE_LONGLONG(0);
  cell_max_score_ = GOOGLE_LONGLONG(0);
  add_less_score_ = GOOGLE_LONGLONG(0);
  center_score_ = GOOGLE_LONGLONG(0);
  d_user_ = 0u;
  current_user_ = 0u;
  balance_count_ = 0u;
  oper_time_ = 0u;
  min_chipin_user_ = 0u;
  max_chipin_user_ = 0u;
  buyin_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_texas_game_info_play_rep::~msg_texas_game_info_play_rep() {
  SharedDtor();
}

void msg_texas_game_info_play_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_texas_game_info_play_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_texas_game_info_play_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_texas_game_info_play_rep_descriptor_;
}

const msg_texas_game_info_play_rep& msg_texas_game_info_play_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_texas_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_texas_game_info_play_rep* msg_texas_game_info_play_rep::default_instance_ = NULL;

msg_texas_game_info_play_rep* msg_texas_game_info_play_rep::New() const {
  return new msg_texas_game_info_play_rep;
}

void msg_texas_game_info_play_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cell_score_ = GOOGLE_LONGLONG(0);
    turn_max_score_ = GOOGLE_LONGLONG(0);
    turn_less_score_ = GOOGLE_LONGLONG(0);
    cell_max_score_ = GOOGLE_LONGLONG(0);
    add_less_score_ = GOOGLE_LONGLONG(0);
    center_score_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    d_user_ = 0u;
    current_user_ = 0u;
    balance_count_ = 0u;
    oper_time_ = 0u;
    min_chipin_user_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    max_chipin_user_ = 0u;
    buyin_state_ = 0;
  }
  table_scores_.Clear();
  total_scores_.Clear();
  play_status_.Clear();
  center_cards_.Clear();
  hand_cards_.Clear();
  card_chairid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_texas_game_info_play_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 cell_score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cell_score_)));
          set_has_cell_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_turn_max_score;
        break;
      }

      // optional int64 turn_max_score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turn_max_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &turn_max_score_)));
          set_has_turn_max_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_turn_less_score;
        break;
      }

      // optional int64 turn_less_score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turn_less_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &turn_less_score_)));
          set_has_turn_less_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cell_max_score;
        break;
      }

      // optional int64 cell_max_score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cell_max_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cell_max_score_)));
          set_has_cell_max_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_add_less_score;
        break;
      }

      // optional int64 add_less_score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_less_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &add_less_score_)));
          set_has_add_less_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_table_scores;
        break;
      }

      // repeated int64 table_scores = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_scores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 48, input, this->mutable_table_scores())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_table_scores())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_table_scores;
        if (input->ExpectTag(56)) goto parse_total_scores;
        break;
      }

      // repeated int64 total_scores = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_scores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 56, input, this->mutable_total_scores())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_total_scores())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_total_scores;
        if (input->ExpectTag(64)) goto parse_center_score;
        break;
      }

      // optional int64 center_score = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_center_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &center_score_)));
          set_has_center_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_d_user;
        break;
      }

      // optional uint32 d_user = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_d_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &d_user_)));
          set_has_d_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_current_user;
        break;
      }

      // optional uint32 current_user = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_user_)));
          set_has_current_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_play_status;
        break;
      }

      // repeated uint32 play_status = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_play_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 88, input, this->mutable_play_status())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_play_status())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_play_status;
        if (input->ExpectTag(96)) goto parse_balance_count;
        break;
      }

      // optional uint32 balance_count = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_balance_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &balance_count_)));
          set_has_balance_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_center_cards;
        break;
      }

      // repeated uint32 center_cards = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_center_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 104, input, this->mutable_center_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_center_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_center_cards;
        if (input->ExpectTag(112)) goto parse_hand_cards;
        break;
      }

      // repeated uint32 hand_cards = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hand_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 112, input, this->mutable_hand_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hand_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_hand_cards;
        if (input->ExpectTag(120)) goto parse_oper_time;
        break;
      }

      // optional uint32 oper_time = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oper_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oper_time_)));
          set_has_oper_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_min_chipin_user;
        break;
      }

      // optional uint32 min_chipin_user = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_chipin_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_chipin_user_)));
          set_has_min_chipin_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_max_chipin_user;
        break;
      }

      // optional uint32 max_chipin_user = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_chipin_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_chipin_user_)));
          set_has_max_chipin_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_card_chairid;
        break;
      }

      // repeated uint32 card_chairid = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_chairid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 144, input, this->mutable_card_chairid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_chairid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_card_chairid;
        if (input->ExpectTag(152)) goto parse_buyin_state;
        break;
      }

      // optional int32 buyin_state = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyin_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyin_state_)));
          set_has_buyin_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_texas_game_info_play_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 cell_score = 1;
  if (has_cell_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->cell_score(), output);
  }

  // optional int64 turn_max_score = 2;
  if (has_turn_max_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->turn_max_score(), output);
  }

  // optional int64 turn_less_score = 3;
  if (has_turn_less_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->turn_less_score(), output);
  }

  // optional int64 cell_max_score = 4;
  if (has_cell_max_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->cell_max_score(), output);
  }

  // optional int64 add_less_score = 5;
  if (has_add_less_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->add_less_score(), output);
  }

  // repeated int64 table_scores = 6;
  for (int i = 0; i < this->table_scores_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      6, this->table_scores(i), output);
  }

  // repeated int64 total_scores = 7;
  for (int i = 0; i < this->total_scores_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      7, this->total_scores(i), output);
  }

  // optional int64 center_score = 8;
  if (has_center_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->center_score(), output);
  }

  // optional uint32 d_user = 9;
  if (has_d_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->d_user(), output);
  }

  // optional uint32 current_user = 10;
  if (has_current_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->current_user(), output);
  }

  // repeated uint32 play_status = 11;
  for (int i = 0; i < this->play_status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      11, this->play_status(i), output);
  }

  // optional uint32 balance_count = 12;
  if (has_balance_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->balance_count(), output);
  }

  // repeated uint32 center_cards = 13;
  for (int i = 0; i < this->center_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      13, this->center_cards(i), output);
  }

  // repeated uint32 hand_cards = 14;
  for (int i = 0; i < this->hand_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      14, this->hand_cards(i), output);
  }

  // optional uint32 oper_time = 15;
  if (has_oper_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->oper_time(), output);
  }

  // optional uint32 min_chipin_user = 16;
  if (has_min_chipin_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->min_chipin_user(), output);
  }

  // optional uint32 max_chipin_user = 17;
  if (has_max_chipin_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->max_chipin_user(), output);
  }

  // repeated uint32 card_chairid = 18;
  for (int i = 0; i < this->card_chairid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      18, this->card_chairid(i), output);
  }

  // optional int32 buyin_state = 19;
  if (has_buyin_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->buyin_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_texas_game_info_play_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 cell_score = 1;
  if (has_cell_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->cell_score(), target);
  }

  // optional int64 turn_max_score = 2;
  if (has_turn_max_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->turn_max_score(), target);
  }

  // optional int64 turn_less_score = 3;
  if (has_turn_less_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->turn_less_score(), target);
  }

  // optional int64 cell_max_score = 4;
  if (has_cell_max_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->cell_max_score(), target);
  }

  // optional int64 add_less_score = 5;
  if (has_add_less_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->add_less_score(), target);
  }

  // repeated int64 table_scores = 6;
  for (int i = 0; i < this->table_scores_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(6, this->table_scores(i), target);
  }

  // repeated int64 total_scores = 7;
  for (int i = 0; i < this->total_scores_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(7, this->total_scores(i), target);
  }

  // optional int64 center_score = 8;
  if (has_center_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->center_score(), target);
  }

  // optional uint32 d_user = 9;
  if (has_d_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->d_user(), target);
  }

  // optional uint32 current_user = 10;
  if (has_current_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->current_user(), target);
  }

  // repeated uint32 play_status = 11;
  for (int i = 0; i < this->play_status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(11, this->play_status(i), target);
  }

  // optional uint32 balance_count = 12;
  if (has_balance_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->balance_count(), target);
  }

  // repeated uint32 center_cards = 13;
  for (int i = 0; i < this->center_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(13, this->center_cards(i), target);
  }

  // repeated uint32 hand_cards = 14;
  for (int i = 0; i < this->hand_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(14, this->hand_cards(i), target);
  }

  // optional uint32 oper_time = 15;
  if (has_oper_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->oper_time(), target);
  }

  // optional uint32 min_chipin_user = 16;
  if (has_min_chipin_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->min_chipin_user(), target);
  }

  // optional uint32 max_chipin_user = 17;
  if (has_max_chipin_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->max_chipin_user(), target);
  }

  // repeated uint32 card_chairid = 18;
  for (int i = 0; i < this->card_chairid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(18, this->card_chairid(i), target);
  }

  // optional int32 buyin_state = 19;
  if (has_buyin_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->buyin_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_texas_game_info_play_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 cell_score = 1;
    if (has_cell_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cell_score());
    }

    // optional int64 turn_max_score = 2;
    if (has_turn_max_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->turn_max_score());
    }

    // optional int64 turn_less_score = 3;
    if (has_turn_less_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->turn_less_score());
    }

    // optional int64 cell_max_score = 4;
    if (has_cell_max_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cell_max_score());
    }

    // optional int64 add_less_score = 5;
    if (has_add_less_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->add_less_score());
    }

    // optional int64 center_score = 8;
    if (has_center_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->center_score());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 d_user = 9;
    if (has_d_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->d_user());
    }

    // optional uint32 current_user = 10;
    if (has_current_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_user());
    }

    // optional uint32 balance_count = 12;
    if (has_balance_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->balance_count());
    }

    // optional uint32 oper_time = 15;
    if (has_oper_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oper_time());
    }

    // optional uint32 min_chipin_user = 16;
    if (has_min_chipin_user()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_chipin_user());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 max_chipin_user = 17;
    if (has_max_chipin_user()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_chipin_user());
    }

    // optional int32 buyin_state = 19;
    if (has_buyin_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyin_state());
    }

  }
  // repeated int64 table_scores = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->table_scores_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->table_scores(i));
    }
    total_size += 1 * this->table_scores_size() + data_size;
  }

  // repeated int64 total_scores = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->total_scores_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->total_scores(i));
    }
    total_size += 1 * this->total_scores_size() + data_size;
  }

  // repeated uint32 play_status = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->play_status_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->play_status(i));
    }
    total_size += 1 * this->play_status_size() + data_size;
  }

  // repeated uint32 center_cards = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->center_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->center_cards(i));
    }
    total_size += 1 * this->center_cards_size() + data_size;
  }

  // repeated uint32 hand_cards = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->hand_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hand_cards(i));
    }
    total_size += 1 * this->hand_cards_size() + data_size;
  }

  // repeated uint32 card_chairid = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_chairid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->card_chairid(i));
    }
    total_size += 2 * this->card_chairid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_texas_game_info_play_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_texas_game_info_play_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_texas_game_info_play_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_texas_game_info_play_rep::MergeFrom(const msg_texas_game_info_play_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  table_scores_.MergeFrom(from.table_scores_);
  total_scores_.MergeFrom(from.total_scores_);
  play_status_.MergeFrom(from.play_status_);
  center_cards_.MergeFrom(from.center_cards_);
  hand_cards_.MergeFrom(from.hand_cards_);
  card_chairid_.MergeFrom(from.card_chairid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cell_score()) {
      set_cell_score(from.cell_score());
    }
    if (from.has_turn_max_score()) {
      set_turn_max_score(from.turn_max_score());
    }
    if (from.has_turn_less_score()) {
      set_turn_less_score(from.turn_less_score());
    }
    if (from.has_cell_max_score()) {
      set_cell_max_score(from.cell_max_score());
    }
    if (from.has_add_less_score()) {
      set_add_less_score(from.add_less_score());
    }
    if (from.has_center_score()) {
      set_center_score(from.center_score());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_d_user()) {
      set_d_user(from.d_user());
    }
    if (from.has_current_user()) {
      set_current_user(from.current_user());
    }
    if (from.has_balance_count()) {
      set_balance_count(from.balance_count());
    }
    if (from.has_oper_time()) {
      set_oper_time(from.oper_time());
    }
    if (from.has_min_chipin_user()) {
      set_min_chipin_user(from.min_chipin_user());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_max_chipin_user()) {
      set_max_chipin_user(from.max_chipin_user());
    }
    if (from.has_buyin_state()) {
      set_buyin_state(from.buyin_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_texas_game_info_play_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_texas_game_info_play_rep::CopyFrom(const msg_texas_game_info_play_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_texas_game_info_play_rep::IsInitialized() const {

  return true;
}

void msg_texas_game_info_play_rep::Swap(msg_texas_game_info_play_rep* other) {
  if (other != this) {
    std::swap(cell_score_, other->cell_score_);
    std::swap(turn_max_score_, other->turn_max_score_);
    std::swap(turn_less_score_, other->turn_less_score_);
    std::swap(cell_max_score_, other->cell_max_score_);
    std::swap(add_less_score_, other->add_less_score_);
    table_scores_.Swap(&other->table_scores_);
    total_scores_.Swap(&other->total_scores_);
    std::swap(center_score_, other->center_score_);
    std::swap(d_user_, other->d_user_);
    std::swap(current_user_, other->current_user_);
    play_status_.Swap(&other->play_status_);
    std::swap(balance_count_, other->balance_count_);
    center_cards_.Swap(&other->center_cards_);
    hand_cards_.Swap(&other->hand_cards_);
    std::swap(oper_time_, other->oper_time_);
    std::swap(min_chipin_user_, other->min_chipin_user_);
    std::swap(max_chipin_user_, other->max_chipin_user_);
    card_chairid_.Swap(&other->card_chairid_);
    std::swap(buyin_state_, other->buyin_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_texas_game_info_play_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_texas_game_info_play_rep_descriptor_;
  metadata.reflection = msg_texas_game_info_play_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_texas_start_rep::kCurrentUserFieldNumber;
const int msg_texas_start_rep::kDUserFieldNumber;
const int msg_texas_start_rep::kMaxChipinUserFieldNumber;
const int msg_texas_start_rep::kCellScoreFieldNumber;
const int msg_texas_start_rep::kTurnMaxScoreFieldNumber;
const int msg_texas_start_rep::kTurnLessScoreFieldNumber;
const int msg_texas_start_rep::kAddLessScoreFieldNumber;
const int msg_texas_start_rep::kCardDatasFieldNumber;
const int msg_texas_start_rep::kMinChipinUserFieldNumber;
const int msg_texas_start_rep::kCardChairidFieldNumber;
#endif  // !_MSC_VER

msg_texas_start_rep::msg_texas_start_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_texas_start_rep::InitAsDefaultInstance() {
  card_datas_ = const_cast< ::net::msg_cards*>(&::net::msg_cards::default_instance());
}

msg_texas_start_rep::msg_texas_start_rep(const msg_texas_start_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_texas_start_rep::SharedCtor() {
  _cached_size_ = 0;
  current_user_ = 0u;
  d_user_ = 0u;
  max_chipin_user_ = 0u;
  cell_score_ = GOOGLE_LONGLONG(0);
  turn_max_score_ = GOOGLE_LONGLONG(0);
  turn_less_score_ = GOOGLE_LONGLONG(0);
  add_less_score_ = GOOGLE_LONGLONG(0);
  card_datas_ = NULL;
  min_chipin_user_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_texas_start_rep::~msg_texas_start_rep() {
  SharedDtor();
}

void msg_texas_start_rep::SharedDtor() {
  if (this != default_instance_) {
    delete card_datas_;
  }
}

void msg_texas_start_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_texas_start_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_texas_start_rep_descriptor_;
}

const msg_texas_start_rep& msg_texas_start_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_texas_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_texas_start_rep* msg_texas_start_rep::default_instance_ = NULL;

msg_texas_start_rep* msg_texas_start_rep::New() const {
  return new msg_texas_start_rep;
}

void msg_texas_start_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    current_user_ = 0u;
    d_user_ = 0u;
    max_chipin_user_ = 0u;
    cell_score_ = GOOGLE_LONGLONG(0);
    turn_max_score_ = GOOGLE_LONGLONG(0);
    turn_less_score_ = GOOGLE_LONGLONG(0);
    add_less_score_ = GOOGLE_LONGLONG(0);
    if (has_card_datas()) {
      if (card_datas_ != NULL) card_datas_->::net::msg_cards::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    min_chipin_user_ = 0u;
  }
  card_chairid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_texas_start_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 current_user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_user_)));
          set_has_current_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_d_user;
        break;
      }

      // optional uint32 d_user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_d_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &d_user_)));
          set_has_d_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_chipin_user;
        break;
      }

      // optional uint32 max_chipin_user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_chipin_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_chipin_user_)));
          set_has_max_chipin_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cell_score;
        break;
      }

      // optional int64 cell_score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cell_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cell_score_)));
          set_has_cell_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_turn_max_score;
        break;
      }

      // optional int64 turn_max_score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turn_max_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &turn_max_score_)));
          set_has_turn_max_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_turn_less_score;
        break;
      }

      // optional int64 turn_less_score = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turn_less_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &turn_less_score_)));
          set_has_turn_less_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_add_less_score;
        break;
      }

      // optional int64 add_less_score = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_less_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &add_less_score_)));
          set_has_add_less_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_card_datas;
        break;
      }

      // optional .net.msg_cards card_datas = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_card_datas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_min_chipin_user;
        break;
      }

      // optional uint32 min_chipin_user = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_chipin_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_chipin_user_)));
          set_has_min_chipin_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_card_chairid;
        break;
      }

      // repeated uint32 card_chairid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_chairid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80, input, this->mutable_card_chairid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_chairid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_card_chairid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_texas_start_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 current_user = 1;
  if (has_current_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->current_user(), output);
  }

  // optional uint32 d_user = 2;
  if (has_d_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->d_user(), output);
  }

  // optional uint32 max_chipin_user = 3;
  if (has_max_chipin_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max_chipin_user(), output);
  }

  // optional int64 cell_score = 4;
  if (has_cell_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->cell_score(), output);
  }

  // optional int64 turn_max_score = 5;
  if (has_turn_max_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->turn_max_score(), output);
  }

  // optional int64 turn_less_score = 6;
  if (has_turn_less_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->turn_less_score(), output);
  }

  // optional int64 add_less_score = 7;
  if (has_add_less_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->add_less_score(), output);
  }

  // optional .net.msg_cards card_datas = 8;
  if (has_card_datas()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->card_datas(), output);
  }

  // optional uint32 min_chipin_user = 9;
  if (has_min_chipin_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->min_chipin_user(), output);
  }

  // repeated uint32 card_chairid = 10;
  for (int i = 0; i < this->card_chairid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->card_chairid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_texas_start_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 current_user = 1;
  if (has_current_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->current_user(), target);
  }

  // optional uint32 d_user = 2;
  if (has_d_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->d_user(), target);
  }

  // optional uint32 max_chipin_user = 3;
  if (has_max_chipin_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->max_chipin_user(), target);
  }

  // optional int64 cell_score = 4;
  if (has_cell_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->cell_score(), target);
  }

  // optional int64 turn_max_score = 5;
  if (has_turn_max_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->turn_max_score(), target);
  }

  // optional int64 turn_less_score = 6;
  if (has_turn_less_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->turn_less_score(), target);
  }

  // optional int64 add_less_score = 7;
  if (has_add_less_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->add_less_score(), target);
  }

  // optional .net.msg_cards card_datas = 8;
  if (has_card_datas()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->card_datas(), target);
  }

  // optional uint32 min_chipin_user = 9;
  if (has_min_chipin_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->min_chipin_user(), target);
  }

  // repeated uint32 card_chairid = 10;
  for (int i = 0; i < this->card_chairid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(10, this->card_chairid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_texas_start_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 current_user = 1;
    if (has_current_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_user());
    }

    // optional uint32 d_user = 2;
    if (has_d_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->d_user());
    }

    // optional uint32 max_chipin_user = 3;
    if (has_max_chipin_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_chipin_user());
    }

    // optional int64 cell_score = 4;
    if (has_cell_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cell_score());
    }

    // optional int64 turn_max_score = 5;
    if (has_turn_max_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->turn_max_score());
    }

    // optional int64 turn_less_score = 6;
    if (has_turn_less_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->turn_less_score());
    }

    // optional int64 add_less_score = 7;
    if (has_add_less_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->add_less_score());
    }

    // optional .net.msg_cards card_datas = 8;
    if (has_card_datas()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->card_datas());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 min_chipin_user = 9;
    if (has_min_chipin_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_chipin_user());
    }

  }
  // repeated uint32 card_chairid = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_chairid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->card_chairid(i));
    }
    total_size += 1 * this->card_chairid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_texas_start_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_texas_start_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_texas_start_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_texas_start_rep::MergeFrom(const msg_texas_start_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_chairid_.MergeFrom(from.card_chairid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_current_user()) {
      set_current_user(from.current_user());
    }
    if (from.has_d_user()) {
      set_d_user(from.d_user());
    }
    if (from.has_max_chipin_user()) {
      set_max_chipin_user(from.max_chipin_user());
    }
    if (from.has_cell_score()) {
      set_cell_score(from.cell_score());
    }
    if (from.has_turn_max_score()) {
      set_turn_max_score(from.turn_max_score());
    }
    if (from.has_turn_less_score()) {
      set_turn_less_score(from.turn_less_score());
    }
    if (from.has_add_less_score()) {
      set_add_less_score(from.add_less_score());
    }
    if (from.has_card_datas()) {
      mutable_card_datas()->::net::msg_cards::MergeFrom(from.card_datas());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_min_chipin_user()) {
      set_min_chipin_user(from.min_chipin_user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_texas_start_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_texas_start_rep::CopyFrom(const msg_texas_start_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_texas_start_rep::IsInitialized() const {

  return true;
}

void msg_texas_start_rep::Swap(msg_texas_start_rep* other) {
  if (other != this) {
    std::swap(current_user_, other->current_user_);
    std::swap(d_user_, other->d_user_);
    std::swap(max_chipin_user_, other->max_chipin_user_);
    std::swap(cell_score_, other->cell_score_);
    std::swap(turn_max_score_, other->turn_max_score_);
    std::swap(turn_less_score_, other->turn_less_score_);
    std::swap(add_less_score_, other->add_less_score_);
    std::swap(card_datas_, other->card_datas_);
    std::swap(min_chipin_user_, other->min_chipin_user_);
    card_chairid_.Swap(&other->card_chairid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_texas_start_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_texas_start_rep_descriptor_;
  metadata.reflection = msg_texas_start_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_texas_addscore_req::kAddScoreFieldNumber;
#endif  // !_MSC_VER

msg_texas_addscore_req::msg_texas_addscore_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_texas_addscore_req::InitAsDefaultInstance() {
}

msg_texas_addscore_req::msg_texas_addscore_req(const msg_texas_addscore_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_texas_addscore_req::SharedCtor() {
  _cached_size_ = 0;
  add_score_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_texas_addscore_req::~msg_texas_addscore_req() {
  SharedDtor();
}

void msg_texas_addscore_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_texas_addscore_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_texas_addscore_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_texas_addscore_req_descriptor_;
}

const msg_texas_addscore_req& msg_texas_addscore_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_texas_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_texas_addscore_req* msg_texas_addscore_req::default_instance_ = NULL;

msg_texas_addscore_req* msg_texas_addscore_req::New() const {
  return new msg_texas_addscore_req;
}

void msg_texas_addscore_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    add_score_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_texas_addscore_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 add_score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &add_score_)));
          set_has_add_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_texas_addscore_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 add_score = 1;
  if (has_add_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->add_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_texas_addscore_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 add_score = 1;
  if (has_add_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->add_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_texas_addscore_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 add_score = 1;
    if (has_add_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->add_score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_texas_addscore_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_texas_addscore_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_texas_addscore_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_texas_addscore_req::MergeFrom(const msg_texas_addscore_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_add_score()) {
      set_add_score(from.add_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_texas_addscore_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_texas_addscore_req::CopyFrom(const msg_texas_addscore_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_texas_addscore_req::IsInitialized() const {

  return true;
}

void msg_texas_addscore_req::Swap(msg_texas_addscore_req* other) {
  if (other != this) {
    std::swap(add_score_, other->add_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_texas_addscore_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_texas_addscore_req_descriptor_;
  metadata.reflection = msg_texas_addscore_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_texas_addscore_rep::kCurrentUserFieldNumber;
const int msg_texas_addscore_rep::kAddscoreUserFieldNumber;
const int msg_texas_addscore_rep::kAddscoreCountFieldNumber;
const int msg_texas_addscore_rep::kTurnLessScoreFieldNumber;
const int msg_texas_addscore_rep::kTurnMaxScoreFieldNumber;
const int msg_texas_addscore_rep::kAddLessScoreFieldNumber;
const int msg_texas_addscore_rep::kShowhandsFieldNumber;
#endif  // !_MSC_VER

msg_texas_addscore_rep::msg_texas_addscore_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_texas_addscore_rep::InitAsDefaultInstance() {
}

msg_texas_addscore_rep::msg_texas_addscore_rep(const msg_texas_addscore_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_texas_addscore_rep::SharedCtor() {
  _cached_size_ = 0;
  current_user_ = 0u;
  addscore_user_ = 0u;
  addscore_count_ = GOOGLE_LONGLONG(0);
  turn_less_score_ = GOOGLE_LONGLONG(0);
  turn_max_score_ = GOOGLE_LONGLONG(0);
  add_less_score_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_texas_addscore_rep::~msg_texas_addscore_rep() {
  SharedDtor();
}

void msg_texas_addscore_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_texas_addscore_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_texas_addscore_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_texas_addscore_rep_descriptor_;
}

const msg_texas_addscore_rep& msg_texas_addscore_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_texas_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_texas_addscore_rep* msg_texas_addscore_rep::default_instance_ = NULL;

msg_texas_addscore_rep* msg_texas_addscore_rep::New() const {
  return new msg_texas_addscore_rep;
}

void msg_texas_addscore_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    current_user_ = 0u;
    addscore_user_ = 0u;
    addscore_count_ = GOOGLE_LONGLONG(0);
    turn_less_score_ = GOOGLE_LONGLONG(0);
    turn_max_score_ = GOOGLE_LONGLONG(0);
    add_less_score_ = GOOGLE_LONGLONG(0);
  }
  showhands_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_texas_addscore_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 current_user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_user_)));
          set_has_current_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_addscore_user;
        break;
      }

      // optional uint32 addscore_user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addscore_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addscore_user_)));
          set_has_addscore_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_addscore_count;
        break;
      }

      // optional int64 addscore_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addscore_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &addscore_count_)));
          set_has_addscore_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_turn_less_score;
        break;
      }

      // optional int64 turn_less_score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turn_less_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &turn_less_score_)));
          set_has_turn_less_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_turn_max_score;
        break;
      }

      // optional int64 turn_max_score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turn_max_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &turn_max_score_)));
          set_has_turn_max_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_add_less_score;
        break;
      }

      // optional int64 add_less_score = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_less_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &add_less_score_)));
          set_has_add_less_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_showhands;
        break;
      }

      // repeated uint32 showhands = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_showhands:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_showhands())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_showhands())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_showhands;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_texas_addscore_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 current_user = 1;
  if (has_current_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->current_user(), output);
  }

  // optional uint32 addscore_user = 2;
  if (has_addscore_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->addscore_user(), output);
  }

  // optional int64 addscore_count = 3;
  if (has_addscore_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->addscore_count(), output);
  }

  // optional int64 turn_less_score = 4;
  if (has_turn_less_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->turn_less_score(), output);
  }

  // optional int64 turn_max_score = 5;
  if (has_turn_max_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->turn_max_score(), output);
  }

  // optional int64 add_less_score = 6;
  if (has_add_less_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->add_less_score(), output);
  }

  // repeated uint32 showhands = 7;
  for (int i = 0; i < this->showhands_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->showhands(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_texas_addscore_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 current_user = 1;
  if (has_current_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->current_user(), target);
  }

  // optional uint32 addscore_user = 2;
  if (has_addscore_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->addscore_user(), target);
  }

  // optional int64 addscore_count = 3;
  if (has_addscore_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->addscore_count(), target);
  }

  // optional int64 turn_less_score = 4;
  if (has_turn_less_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->turn_less_score(), target);
  }

  // optional int64 turn_max_score = 5;
  if (has_turn_max_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->turn_max_score(), target);
  }

  // optional int64 add_less_score = 6;
  if (has_add_less_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->add_less_score(), target);
  }

  // repeated uint32 showhands = 7;
  for (int i = 0; i < this->showhands_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->showhands(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_texas_addscore_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 current_user = 1;
    if (has_current_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_user());
    }

    // optional uint32 addscore_user = 2;
    if (has_addscore_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addscore_user());
    }

    // optional int64 addscore_count = 3;
    if (has_addscore_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->addscore_count());
    }

    // optional int64 turn_less_score = 4;
    if (has_turn_less_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->turn_less_score());
    }

    // optional int64 turn_max_score = 5;
    if (has_turn_max_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->turn_max_score());
    }

    // optional int64 add_less_score = 6;
    if (has_add_less_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->add_less_score());
    }

  }
  // repeated uint32 showhands = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->showhands_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->showhands(i));
    }
    total_size += 1 * this->showhands_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_texas_addscore_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_texas_addscore_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_texas_addscore_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_texas_addscore_rep::MergeFrom(const msg_texas_addscore_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  showhands_.MergeFrom(from.showhands_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_current_user()) {
      set_current_user(from.current_user());
    }
    if (from.has_addscore_user()) {
      set_addscore_user(from.addscore_user());
    }
    if (from.has_addscore_count()) {
      set_addscore_count(from.addscore_count());
    }
    if (from.has_turn_less_score()) {
      set_turn_less_score(from.turn_less_score());
    }
    if (from.has_turn_max_score()) {
      set_turn_max_score(from.turn_max_score());
    }
    if (from.has_add_less_score()) {
      set_add_less_score(from.add_less_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_texas_addscore_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_texas_addscore_rep::CopyFrom(const msg_texas_addscore_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_texas_addscore_rep::IsInitialized() const {

  return true;
}

void msg_texas_addscore_rep::Swap(msg_texas_addscore_rep* other) {
  if (other != this) {
    std::swap(current_user_, other->current_user_);
    std::swap(addscore_user_, other->addscore_user_);
    std::swap(addscore_count_, other->addscore_count_);
    std::swap(turn_less_score_, other->turn_less_score_);
    std::swap(turn_max_score_, other->turn_max_score_);
    std::swap(add_less_score_, other->add_less_score_);
    showhands_.Swap(&other->showhands_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_texas_addscore_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_texas_addscore_rep_descriptor_;
  metadata.reflection = msg_texas_addscore_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_texas_giveup_req::kGiveupReasonFieldNumber;
#endif  // !_MSC_VER

msg_texas_giveup_req::msg_texas_giveup_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_texas_giveup_req::InitAsDefaultInstance() {
}

msg_texas_giveup_req::msg_texas_giveup_req(const msg_texas_giveup_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_texas_giveup_req::SharedCtor() {
  _cached_size_ = 0;
  giveup_reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_texas_giveup_req::~msg_texas_giveup_req() {
  SharedDtor();
}

void msg_texas_giveup_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_texas_giveup_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_texas_giveup_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_texas_giveup_req_descriptor_;
}

const msg_texas_giveup_req& msg_texas_giveup_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_texas_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_texas_giveup_req* msg_texas_giveup_req::default_instance_ = NULL;

msg_texas_giveup_req* msg_texas_giveup_req::New() const {
  return new msg_texas_giveup_req;
}

void msg_texas_giveup_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    giveup_reason_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_texas_giveup_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 giveup_reason = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &giveup_reason_)));
          set_has_giveup_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_texas_giveup_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 giveup_reason = 1;
  if (has_giveup_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->giveup_reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_texas_giveup_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 giveup_reason = 1;
  if (has_giveup_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->giveup_reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_texas_giveup_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 giveup_reason = 1;
    if (has_giveup_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->giveup_reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_texas_giveup_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_texas_giveup_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_texas_giveup_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_texas_giveup_req::MergeFrom(const msg_texas_giveup_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_giveup_reason()) {
      set_giveup_reason(from.giveup_reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_texas_giveup_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_texas_giveup_req::CopyFrom(const msg_texas_giveup_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_texas_giveup_req::IsInitialized() const {

  return true;
}

void msg_texas_giveup_req::Swap(msg_texas_giveup_req* other) {
  if (other != this) {
    std::swap(giveup_reason_, other->giveup_reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_texas_giveup_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_texas_giveup_req_descriptor_;
  metadata.reflection = msg_texas_giveup_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_texas_giveup_rep::kGiveupUserFieldNumber;
const int msg_texas_giveup_rep::kLostScoreFieldNumber;
#endif  // !_MSC_VER

msg_texas_giveup_rep::msg_texas_giveup_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_texas_giveup_rep::InitAsDefaultInstance() {
}

msg_texas_giveup_rep::msg_texas_giveup_rep(const msg_texas_giveup_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_texas_giveup_rep::SharedCtor() {
  _cached_size_ = 0;
  giveup_user_ = 0u;
  lost_score_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_texas_giveup_rep::~msg_texas_giveup_rep() {
  SharedDtor();
}

void msg_texas_giveup_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_texas_giveup_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_texas_giveup_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_texas_giveup_rep_descriptor_;
}

const msg_texas_giveup_rep& msg_texas_giveup_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_texas_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_texas_giveup_rep* msg_texas_giveup_rep::default_instance_ = NULL;

msg_texas_giveup_rep* msg_texas_giveup_rep::New() const {
  return new msg_texas_giveup_rep;
}

void msg_texas_giveup_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    giveup_user_ = 0u;
    lost_score_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_texas_giveup_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 giveup_user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &giveup_user_)));
          set_has_giveup_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lost_score;
        break;
      }

      // optional int64 lost_score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lost_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lost_score_)));
          set_has_lost_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_texas_giveup_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 giveup_user = 1;
  if (has_giveup_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->giveup_user(), output);
  }

  // optional int64 lost_score = 2;
  if (has_lost_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->lost_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_texas_giveup_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 giveup_user = 1;
  if (has_giveup_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->giveup_user(), target);
  }

  // optional int64 lost_score = 2;
  if (has_lost_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->lost_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_texas_giveup_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 giveup_user = 1;
    if (has_giveup_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->giveup_user());
    }

    // optional int64 lost_score = 2;
    if (has_lost_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lost_score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_texas_giveup_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_texas_giveup_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_texas_giveup_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_texas_giveup_rep::MergeFrom(const msg_texas_giveup_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_giveup_user()) {
      set_giveup_user(from.giveup_user());
    }
    if (from.has_lost_score()) {
      set_lost_score(from.lost_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_texas_giveup_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_texas_giveup_rep::CopyFrom(const msg_texas_giveup_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_texas_giveup_rep::IsInitialized() const {

  return true;
}

void msg_texas_giveup_rep::Swap(msg_texas_giveup_rep* other) {
  if (other != this) {
    std::swap(giveup_user_, other->giveup_user_);
    std::swap(lost_score_, other->lost_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_texas_giveup_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_texas_giveup_rep_descriptor_;
  metadata.reflection = msg_texas_giveup_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_texas_sendcard_rep::kPublicCardFieldNumber;
const int msg_texas_sendcard_rep::kCurrentUserFieldNumber;
const int msg_texas_sendcard_rep::kSendCardCountFieldNumber;
const int msg_texas_sendcard_rep::kCenterCardsFieldNumber;
#endif  // !_MSC_VER

msg_texas_sendcard_rep::msg_texas_sendcard_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_texas_sendcard_rep::InitAsDefaultInstance() {
}

msg_texas_sendcard_rep::msg_texas_sendcard_rep(const msg_texas_sendcard_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_texas_sendcard_rep::SharedCtor() {
  _cached_size_ = 0;
  public_card_ = 0u;
  current_user_ = 0u;
  send_card_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_texas_sendcard_rep::~msg_texas_sendcard_rep() {
  SharedDtor();
}

void msg_texas_sendcard_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_texas_sendcard_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_texas_sendcard_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_texas_sendcard_rep_descriptor_;
}

const msg_texas_sendcard_rep& msg_texas_sendcard_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_texas_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_texas_sendcard_rep* msg_texas_sendcard_rep::default_instance_ = NULL;

msg_texas_sendcard_rep* msg_texas_sendcard_rep::New() const {
  return new msg_texas_sendcard_rep;
}

void msg_texas_sendcard_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    public_card_ = 0u;
    current_user_ = 0u;
    send_card_count_ = 0u;
  }
  center_cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_texas_sendcard_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 public_card = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &public_card_)));
          set_has_public_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_current_user;
        break;
      }

      // optional uint32 current_user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_user_)));
          set_has_current_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_send_card_count;
        break;
      }

      // optional uint32 send_card_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_card_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_card_count_)));
          set_has_send_card_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_center_cards;
        break;
      }

      // repeated uint32 center_cards = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_center_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_center_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_center_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_center_cards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_texas_sendcard_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 public_card = 1;
  if (has_public_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->public_card(), output);
  }

  // optional uint32 current_user = 2;
  if (has_current_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->current_user(), output);
  }

  // optional uint32 send_card_count = 3;
  if (has_send_card_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->send_card_count(), output);
  }

  // repeated uint32 center_cards = 4;
  for (int i = 0; i < this->center_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->center_cards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_texas_sendcard_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 public_card = 1;
  if (has_public_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->public_card(), target);
  }

  // optional uint32 current_user = 2;
  if (has_current_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->current_user(), target);
  }

  // optional uint32 send_card_count = 3;
  if (has_send_card_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->send_card_count(), target);
  }

  // repeated uint32 center_cards = 4;
  for (int i = 0; i < this->center_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->center_cards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_texas_sendcard_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 public_card = 1;
    if (has_public_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->public_card());
    }

    // optional uint32 current_user = 2;
    if (has_current_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_user());
    }

    // optional uint32 send_card_count = 3;
    if (has_send_card_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->send_card_count());
    }

  }
  // repeated uint32 center_cards = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->center_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->center_cards(i));
    }
    total_size += 1 * this->center_cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_texas_sendcard_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_texas_sendcard_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_texas_sendcard_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_texas_sendcard_rep::MergeFrom(const msg_texas_sendcard_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  center_cards_.MergeFrom(from.center_cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_public_card()) {
      set_public_card(from.public_card());
    }
    if (from.has_current_user()) {
      set_current_user(from.current_user());
    }
    if (from.has_send_card_count()) {
      set_send_card_count(from.send_card_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_texas_sendcard_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_texas_sendcard_rep::CopyFrom(const msg_texas_sendcard_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_texas_sendcard_rep::IsInitialized() const {

  return true;
}

void msg_texas_sendcard_rep::Swap(msg_texas_sendcard_rep* other) {
  if (other != this) {
    std::swap(public_card_, other->public_card_);
    std::swap(current_user_, other->current_user_);
    std::swap(send_card_count_, other->send_card_count_);
    center_cards_.Swap(&other->center_cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_texas_sendcard_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_texas_sendcard_rep_descriptor_;
  metadata.reflection = msg_texas_sendcard_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int texas_win_chair::kWinChairFieldNumber;
#endif  // !_MSC_VER

texas_win_chair::texas_win_chair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void texas_win_chair::InitAsDefaultInstance() {
}

texas_win_chair::texas_win_chair(const texas_win_chair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void texas_win_chair::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

texas_win_chair::~texas_win_chair() {
  SharedDtor();
}

void texas_win_chair::SharedDtor() {
  if (this != default_instance_) {
  }
}

void texas_win_chair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* texas_win_chair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return texas_win_chair_descriptor_;
}

const texas_win_chair& texas_win_chair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_texas_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

texas_win_chair* texas_win_chair::default_instance_ = NULL;

texas_win_chair* texas_win_chair::New() const {
  return new texas_win_chair;
}

void texas_win_chair::Clear() {
  win_chair_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool texas_win_chair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 win_chair = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_chair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_win_chair())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_win_chair())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_win_chair;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void texas_win_chair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 win_chair = 1;
  for (int i = 0; i < this->win_chair_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->win_chair(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* texas_win_chair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 win_chair = 1;
  for (int i = 0; i < this->win_chair_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->win_chair(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int texas_win_chair::ByteSize() const {
  int total_size = 0;

  // repeated uint32 win_chair = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->win_chair_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->win_chair(i));
    }
    total_size += 1 * this->win_chair_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void texas_win_chair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const texas_win_chair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const texas_win_chair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void texas_win_chair::MergeFrom(const texas_win_chair& from) {
  GOOGLE_CHECK_NE(&from, this);
  win_chair_.MergeFrom(from.win_chair_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void texas_win_chair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void texas_win_chair::CopyFrom(const texas_win_chair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool texas_win_chair::IsInitialized() const {

  return true;
}

void texas_win_chair::Swap(texas_win_chair* other) {
  if (other != this) {
    win_chair_.Swap(&other->win_chair_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata texas_win_chair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = texas_win_chair_descriptor_;
  metadata.reflection = texas_win_chair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_texas_game_end_rep::kTotalEndFieldNumber;
const int msg_texas_game_end_rep::kGameScoresFieldNumber;
const int msg_texas_game_end_rep::kCardDatasFieldNumber;
const int msg_texas_game_end_rep::kLastCenterCardDataFieldNumber;
const int msg_texas_game_end_rep::kWinChairsFieldNumber;
#endif  // !_MSC_VER

msg_texas_game_end_rep::msg_texas_game_end_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_texas_game_end_rep::InitAsDefaultInstance() {
}

msg_texas_game_end_rep::msg_texas_game_end_rep(const msg_texas_game_end_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_texas_game_end_rep::SharedCtor() {
  _cached_size_ = 0;
  total_end_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_texas_game_end_rep::~msg_texas_game_end_rep() {
  SharedDtor();
}

void msg_texas_game_end_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_texas_game_end_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_texas_game_end_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_texas_game_end_rep_descriptor_;
}

const msg_texas_game_end_rep& msg_texas_game_end_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_texas_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_texas_game_end_rep* msg_texas_game_end_rep::default_instance_ = NULL;

msg_texas_game_end_rep* msg_texas_game_end_rep::New() const {
  return new msg_texas_game_end_rep;
}

void msg_texas_game_end_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    total_end_ = 0u;
  }
  game_scores_.Clear();
  card_datas_.Clear();
  last_center_carddata_.Clear();
  win_chairs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_texas_game_end_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 total_end = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_end_)));
          set_has_total_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_scores;
        break;
      }

      // repeated int64 game_scores = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_scores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_game_scores())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_game_scores())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_scores;
        if (input->ExpectTag(26)) goto parse_card_datas;
        break;
      }

      // repeated .net.msg_cards card_datas = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card_datas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_card_datas;
        if (input->ExpectTag(34)) goto parse_last_center_cardData;
        break;
      }

      // repeated .net.msg_cards last_center_cardData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last_center_cardData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_last_center_carddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_last_center_cardData;
        if (input->ExpectTag(42)) goto parse_win_chairs;
        break;
      }

      // repeated .net.texas_win_chair win_chairs = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_win_chairs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_win_chairs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_win_chairs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_texas_game_end_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 total_end = 1;
  if (has_total_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->total_end(), output);
  }

  // repeated int64 game_scores = 2;
  for (int i = 0; i < this->game_scores_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->game_scores(i), output);
  }

  // repeated .net.msg_cards card_datas = 3;
  for (int i = 0; i < this->card_datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->card_datas(i), output);
  }

  // repeated .net.msg_cards last_center_cardData = 4;
  for (int i = 0; i < this->last_center_carddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->last_center_carddata(i), output);
  }

  // repeated .net.texas_win_chair win_chairs = 5;
  for (int i = 0; i < this->win_chairs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->win_chairs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_texas_game_end_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 total_end = 1;
  if (has_total_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->total_end(), target);
  }

  // repeated int64 game_scores = 2;
  for (int i = 0; i < this->game_scores_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->game_scores(i), target);
  }

  // repeated .net.msg_cards card_datas = 3;
  for (int i = 0; i < this->card_datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->card_datas(i), target);
  }

  // repeated .net.msg_cards last_center_cardData = 4;
  for (int i = 0; i < this->last_center_carddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->last_center_carddata(i), target);
  }

  // repeated .net.texas_win_chair win_chairs = 5;
  for (int i = 0; i < this->win_chairs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->win_chairs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_texas_game_end_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 total_end = 1;
    if (has_total_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_end());
    }

  }
  // repeated int64 game_scores = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->game_scores_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->game_scores(i));
    }
    total_size += 1 * this->game_scores_size() + data_size;
  }

  // repeated .net.msg_cards card_datas = 3;
  total_size += 1 * this->card_datas_size();
  for (int i = 0; i < this->card_datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->card_datas(i));
  }

  // repeated .net.msg_cards last_center_cardData = 4;
  total_size += 1 * this->last_center_carddata_size();
  for (int i = 0; i < this->last_center_carddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->last_center_carddata(i));
  }

  // repeated .net.texas_win_chair win_chairs = 5;
  total_size += 1 * this->win_chairs_size();
  for (int i = 0; i < this->win_chairs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->win_chairs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_texas_game_end_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_texas_game_end_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_texas_game_end_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_texas_game_end_rep::MergeFrom(const msg_texas_game_end_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  game_scores_.MergeFrom(from.game_scores_);
  card_datas_.MergeFrom(from.card_datas_);
  last_center_carddata_.MergeFrom(from.last_center_carddata_);
  win_chairs_.MergeFrom(from.win_chairs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_end()) {
      set_total_end(from.total_end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_texas_game_end_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_texas_game_end_rep::CopyFrom(const msg_texas_game_end_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_texas_game_end_rep::IsInitialized() const {

  return true;
}

void msg_texas_game_end_rep::Swap(msg_texas_game_end_rep* other) {
  if (other != this) {
    std::swap(total_end_, other->total_end_);
    game_scores_.Swap(&other->game_scores_);
    card_datas_.Swap(&other->card_datas_);
    last_center_carddata_.Swap(&other->last_center_carddata_);
    win_chairs_.Swap(&other->win_chairs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_texas_game_end_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_texas_game_end_rep_descriptor_;
  metadata.reflection = msg_texas_game_end_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_texas_buyin_req::kScoreFieldNumber;
#endif  // !_MSC_VER

msg_texas_buyin_req::msg_texas_buyin_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_texas_buyin_req::InitAsDefaultInstance() {
}

msg_texas_buyin_req::msg_texas_buyin_req(const msg_texas_buyin_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_texas_buyin_req::SharedCtor() {
  _cached_size_ = 0;
  score_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_texas_buyin_req::~msg_texas_buyin_req() {
  SharedDtor();
}

void msg_texas_buyin_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_texas_buyin_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_texas_buyin_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_texas_buyin_req_descriptor_;
}

const msg_texas_buyin_req& msg_texas_buyin_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_texas_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_texas_buyin_req* msg_texas_buyin_req::default_instance_ = NULL;

msg_texas_buyin_req* msg_texas_buyin_req::New() const {
  return new msg_texas_buyin_req;
}

void msg_texas_buyin_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    score_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_texas_buyin_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_texas_buyin_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_texas_buyin_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 score = 1;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_texas_buyin_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_texas_buyin_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_texas_buyin_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_texas_buyin_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_texas_buyin_req::MergeFrom(const msg_texas_buyin_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_texas_buyin_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_texas_buyin_req::CopyFrom(const msg_texas_buyin_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_texas_buyin_req::IsInitialized() const {

  return true;
}

void msg_texas_buyin_req::Swap(msg_texas_buyin_req* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_texas_buyin_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_texas_buyin_req_descriptor_;
  metadata.reflection = msg_texas_buyin_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_texas_buyin_rep::kScoreFieldNumber;
const int msg_texas_buyin_rep::kResultFieldNumber;
#endif  // !_MSC_VER

msg_texas_buyin_rep::msg_texas_buyin_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_texas_buyin_rep::InitAsDefaultInstance() {
}

msg_texas_buyin_rep::msg_texas_buyin_rep(const msg_texas_buyin_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_texas_buyin_rep::SharedCtor() {
  _cached_size_ = 0;
  score_ = GOOGLE_LONGLONG(0);
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_texas_buyin_rep::~msg_texas_buyin_rep() {
  SharedDtor();
}

void msg_texas_buyin_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_texas_buyin_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_texas_buyin_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_texas_buyin_rep_descriptor_;
}

const msg_texas_buyin_rep& msg_texas_buyin_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_texas_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_texas_buyin_rep* msg_texas_buyin_rep::default_instance_ = NULL;

msg_texas_buyin_rep* msg_texas_buyin_rep::New() const {
  return new msg_texas_buyin_rep;
}

void msg_texas_buyin_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    score_ = GOOGLE_LONGLONG(0);
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_texas_buyin_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional uint32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_texas_buyin_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->score(), output);
  }

  // optional uint32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_texas_buyin_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 score = 1;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->score(), target);
  }

  // optional uint32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_texas_buyin_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->score());
    }

    // optional uint32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_texas_buyin_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_texas_buyin_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_texas_buyin_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_texas_buyin_rep::MergeFrom(const msg_texas_buyin_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_texas_buyin_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_texas_buyin_rep::CopyFrom(const msg_texas_buyin_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_texas_buyin_rep::IsInitialized() const {

  return true;
}

void msg_texas_buyin_rep::Swap(msg_texas_buyin_rep* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_texas_buyin_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_texas_buyin_rep_descriptor_;
  metadata.reflection = msg_texas_buyin_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_texas_buyin_next_req::kScoreFieldNumber;
#endif  // !_MSC_VER

msg_texas_buyin_next_req::msg_texas_buyin_next_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_texas_buyin_next_req::InitAsDefaultInstance() {
}

msg_texas_buyin_next_req::msg_texas_buyin_next_req(const msg_texas_buyin_next_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_texas_buyin_next_req::SharedCtor() {
  _cached_size_ = 0;
  score_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_texas_buyin_next_req::~msg_texas_buyin_next_req() {
  SharedDtor();
}

void msg_texas_buyin_next_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_texas_buyin_next_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_texas_buyin_next_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_texas_buyin_next_req_descriptor_;
}

const msg_texas_buyin_next_req& msg_texas_buyin_next_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_texas_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_texas_buyin_next_req* msg_texas_buyin_next_req::default_instance_ = NULL;

msg_texas_buyin_next_req* msg_texas_buyin_next_req::New() const {
  return new msg_texas_buyin_next_req;
}

void msg_texas_buyin_next_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    score_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_texas_buyin_next_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_texas_buyin_next_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_texas_buyin_next_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 score = 1;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_texas_buyin_next_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_texas_buyin_next_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_texas_buyin_next_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_texas_buyin_next_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_texas_buyin_next_req::MergeFrom(const msg_texas_buyin_next_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_texas_buyin_next_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_texas_buyin_next_req::CopyFrom(const msg_texas_buyin_next_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_texas_buyin_next_req::IsInitialized() const {

  return true;
}

void msg_texas_buyin_next_req::Swap(msg_texas_buyin_next_req* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_texas_buyin_next_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_texas_buyin_next_req_descriptor_;
  metadata.reflection = msg_texas_buyin_next_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_texas_buyin_next_rep::kScoreFieldNumber;
const int msg_texas_buyin_next_rep::kResultFieldNumber;
#endif  // !_MSC_VER

msg_texas_buyin_next_rep::msg_texas_buyin_next_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_texas_buyin_next_rep::InitAsDefaultInstance() {
}

msg_texas_buyin_next_rep::msg_texas_buyin_next_rep(const msg_texas_buyin_next_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_texas_buyin_next_rep::SharedCtor() {
  _cached_size_ = 0;
  score_ = GOOGLE_LONGLONG(0);
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_texas_buyin_next_rep::~msg_texas_buyin_next_rep() {
  SharedDtor();
}

void msg_texas_buyin_next_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_texas_buyin_next_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_texas_buyin_next_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_texas_buyin_next_rep_descriptor_;
}

const msg_texas_buyin_next_rep& msg_texas_buyin_next_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_texas_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_texas_buyin_next_rep* msg_texas_buyin_next_rep::default_instance_ = NULL;

msg_texas_buyin_next_rep* msg_texas_buyin_next_rep::New() const {
  return new msg_texas_buyin_next_rep;
}

void msg_texas_buyin_next_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    score_ = GOOGLE_LONGLONG(0);
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_texas_buyin_next_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional uint32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_texas_buyin_next_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->score(), output);
  }

  // optional uint32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_texas_buyin_next_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 score = 1;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->score(), target);
  }

  // optional uint32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_texas_buyin_next_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->score());
    }

    // optional uint32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_texas_buyin_next_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_texas_buyin_next_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_texas_buyin_next_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_texas_buyin_next_rep::MergeFrom(const msg_texas_buyin_next_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_texas_buyin_next_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_texas_buyin_next_rep::CopyFrom(const msg_texas_buyin_next_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_texas_buyin_next_rep::IsInitialized() const {

  return true;
}

void msg_texas_buyin_next_rep::Swap(msg_texas_buyin_next_rep* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_texas_buyin_next_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_texas_buyin_next_rep_descriptor_;
  metadata.reflection = msg_texas_buyin_next_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_texas_buyin_next_suc_rep::kScoreFieldNumber;
#endif  // !_MSC_VER

msg_texas_buyin_next_suc_rep::msg_texas_buyin_next_suc_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_texas_buyin_next_suc_rep::InitAsDefaultInstance() {
}

msg_texas_buyin_next_suc_rep::msg_texas_buyin_next_suc_rep(const msg_texas_buyin_next_suc_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_texas_buyin_next_suc_rep::SharedCtor() {
  _cached_size_ = 0;
  score_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_texas_buyin_next_suc_rep::~msg_texas_buyin_next_suc_rep() {
  SharedDtor();
}

void msg_texas_buyin_next_suc_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_texas_buyin_next_suc_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_texas_buyin_next_suc_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_texas_buyin_next_suc_rep_descriptor_;
}

const msg_texas_buyin_next_suc_rep& msg_texas_buyin_next_suc_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_texas_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_texas_buyin_next_suc_rep* msg_texas_buyin_next_suc_rep::default_instance_ = NULL;

msg_texas_buyin_next_suc_rep* msg_texas_buyin_next_suc_rep::New() const {
  return new msg_texas_buyin_next_suc_rep;
}

void msg_texas_buyin_next_suc_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    score_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_texas_buyin_next_suc_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_texas_buyin_next_suc_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_texas_buyin_next_suc_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 score = 1;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_texas_buyin_next_suc_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_texas_buyin_next_suc_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_texas_buyin_next_suc_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_texas_buyin_next_suc_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_texas_buyin_next_suc_rep::MergeFrom(const msg_texas_buyin_next_suc_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_texas_buyin_next_suc_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_texas_buyin_next_suc_rep::CopyFrom(const msg_texas_buyin_next_suc_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_texas_buyin_next_suc_rep::IsInitialized() const {

  return true;
}

void msg_texas_buyin_next_suc_rep::Swap(msg_texas_buyin_next_suc_rep* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_texas_buyin_next_suc_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_texas_buyin_next_suc_rep_descriptor_;
  metadata.reflection = msg_texas_buyin_next_suc_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_texas_show_card_req::kCardsFieldNumber;
#endif  // !_MSC_VER

msg_texas_show_card_req::msg_texas_show_card_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_texas_show_card_req::InitAsDefaultInstance() {
}

msg_texas_show_card_req::msg_texas_show_card_req(const msg_texas_show_card_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_texas_show_card_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_texas_show_card_req::~msg_texas_show_card_req() {
  SharedDtor();
}

void msg_texas_show_card_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_texas_show_card_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_texas_show_card_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_texas_show_card_req_descriptor_;
}

const msg_texas_show_card_req& msg_texas_show_card_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_texas_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_texas_show_card_req* msg_texas_show_card_req::default_instance_ = NULL;

msg_texas_show_card_req* msg_texas_show_card_req::New() const {
  return new msg_texas_show_card_req;
}

void msg_texas_show_card_req::Clear() {
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_texas_show_card_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 cards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_cards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_texas_show_card_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 cards = 1;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->cards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_texas_show_card_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 cards = 1;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->cards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_texas_show_card_req::ByteSize() const {
  int total_size = 0;

  // repeated uint32 cards = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_texas_show_card_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_texas_show_card_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_texas_show_card_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_texas_show_card_req::MergeFrom(const msg_texas_show_card_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_texas_show_card_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_texas_show_card_req::CopyFrom(const msg_texas_show_card_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_texas_show_card_req::IsInitialized() const {

  return true;
}

void msg_texas_show_card_req::Swap(msg_texas_show_card_req* other) {
  if (other != this) {
    cards_.Swap(&other->cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_texas_show_card_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_texas_show_card_req_descriptor_;
  metadata.reflection = msg_texas_show_card_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_texas_show_card_rep::kShowChairidFieldNumber;
const int msg_texas_show_card_rep::kCardsFieldNumber;
#endif  // !_MSC_VER

msg_texas_show_card_rep::msg_texas_show_card_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_texas_show_card_rep::InitAsDefaultInstance() {
}

msg_texas_show_card_rep::msg_texas_show_card_rep(const msg_texas_show_card_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_texas_show_card_rep::SharedCtor() {
  _cached_size_ = 0;
  show_chairid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_texas_show_card_rep::~msg_texas_show_card_rep() {
  SharedDtor();
}

void msg_texas_show_card_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_texas_show_card_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_texas_show_card_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_texas_show_card_rep_descriptor_;
}

const msg_texas_show_card_rep& msg_texas_show_card_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_texas_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_texas_show_card_rep* msg_texas_show_card_rep::default_instance_ = NULL;

msg_texas_show_card_rep* msg_texas_show_card_rep::New() const {
  return new msg_texas_show_card_rep;
}

void msg_texas_show_card_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    show_chairid_ = 0u;
  }
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_texas_show_card_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 show_chairid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &show_chairid_)));
          set_has_show_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cards;
        break;
      }

      // repeated uint32 cards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_texas_show_card_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 show_chairid = 1;
  if (has_show_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->show_chairid(), output);
  }

  // repeated uint32 cards = 2;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->cards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_texas_show_card_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 show_chairid = 1;
  if (has_show_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->show_chairid(), target);
  }

  // repeated uint32 cards = 2;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->cards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_texas_show_card_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 show_chairid = 1;
    if (has_show_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->show_chairid());
    }

  }
  // repeated uint32 cards = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_texas_show_card_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_texas_show_card_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_texas_show_card_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_texas_show_card_rep::MergeFrom(const msg_texas_show_card_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_show_chairid()) {
      set_show_chairid(from.show_chairid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_texas_show_card_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_texas_show_card_rep::CopyFrom(const msg_texas_show_card_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_texas_show_card_rep::IsInitialized() const {

  return true;
}

void msg_texas_show_card_rep::Swap(msg_texas_show_card_rep* other) {
  if (other != this) {
    std::swap(show_chairid_, other->show_chairid_);
    cards_.Swap(&other->cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_texas_show_card_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_texas_show_card_rep_descriptor_;
  metadata.reflection = msg_texas_show_card_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_texas_standup_table_rep::kReasonFieldNumber;
#endif  // !_MSC_VER

msg_texas_standup_table_rep::msg_texas_standup_table_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_texas_standup_table_rep::InitAsDefaultInstance() {
}

msg_texas_standup_table_rep::msg_texas_standup_table_rep(const msg_texas_standup_table_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_texas_standup_table_rep::SharedCtor() {
  _cached_size_ = 0;
  reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_texas_standup_table_rep::~msg_texas_standup_table_rep() {
  SharedDtor();
}

void msg_texas_standup_table_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_texas_standup_table_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_texas_standup_table_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_texas_standup_table_rep_descriptor_;
}

const msg_texas_standup_table_rep& msg_texas_standup_table_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_texas_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_texas_standup_table_rep* msg_texas_standup_table_rep::default_instance_ = NULL;

msg_texas_standup_table_rep* msg_texas_standup_table_rep::New() const {
  return new msg_texas_standup_table_rep;
}

void msg_texas_standup_table_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reason_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_texas_standup_table_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reason = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_texas_standup_table_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_texas_standup_table_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reason = 1;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_texas_standup_table_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reason = 1;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_texas_standup_table_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_texas_standup_table_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_texas_standup_table_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_texas_standup_table_rep::MergeFrom(const msg_texas_standup_table_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_texas_standup_table_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_texas_standup_table_rep::CopyFrom(const msg_texas_standup_table_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_texas_standup_table_rep::IsInitialized() const {

  return true;
}

void msg_texas_standup_table_rep::Swap(msg_texas_standup_table_rep* other) {
  if (other != this) {
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_texas_standup_table_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_texas_standup_table_rep_descriptor_;
  metadata.reflection = msg_texas_standup_table_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_texas_buyin_wait_standup_rep::kReasonFieldNumber;
#endif  // !_MSC_VER

msg_texas_buyin_wait_standup_rep::msg_texas_buyin_wait_standup_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_texas_buyin_wait_standup_rep::InitAsDefaultInstance() {
}

msg_texas_buyin_wait_standup_rep::msg_texas_buyin_wait_standup_rep(const msg_texas_buyin_wait_standup_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_texas_buyin_wait_standup_rep::SharedCtor() {
  _cached_size_ = 0;
  reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_texas_buyin_wait_standup_rep::~msg_texas_buyin_wait_standup_rep() {
  SharedDtor();
}

void msg_texas_buyin_wait_standup_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_texas_buyin_wait_standup_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_texas_buyin_wait_standup_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_texas_buyin_wait_standup_rep_descriptor_;
}

const msg_texas_buyin_wait_standup_rep& msg_texas_buyin_wait_standup_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_texas_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_texas_buyin_wait_standup_rep* msg_texas_buyin_wait_standup_rep::default_instance_ = NULL;

msg_texas_buyin_wait_standup_rep* msg_texas_buyin_wait_standup_rep::New() const {
  return new msg_texas_buyin_wait_standup_rep;
}

void msg_texas_buyin_wait_standup_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reason_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_texas_buyin_wait_standup_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 reason = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_texas_buyin_wait_standup_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_texas_buyin_wait_standup_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 reason = 1;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_texas_buyin_wait_standup_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 reason = 1;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_texas_buyin_wait_standup_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_texas_buyin_wait_standup_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_texas_buyin_wait_standup_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_texas_buyin_wait_standup_rep::MergeFrom(const msg_texas_buyin_wait_standup_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_texas_buyin_wait_standup_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_texas_buyin_wait_standup_rep::CopyFrom(const msg_texas_buyin_wait_standup_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_texas_buyin_wait_standup_rep::IsInitialized() const {

  return true;
}

void msg_texas_buyin_wait_standup_rep::Swap(msg_texas_buyin_wait_standup_rep* other) {
  if (other != this) {
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_texas_buyin_wait_standup_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_texas_buyin_wait_standup_rep_descriptor_;
  metadata.reflection = msg_texas_buyin_wait_standup_rep_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace net

// @@protoc_insertion_point(global_scope)
