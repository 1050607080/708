// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fishing_logic_msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fishing_logic_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace net {

namespace {

const ::google::protobuf::Descriptor* msg_fishing_game_info_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_fishing_game_info_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_fishing_game_info_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_fishing_game_info_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_fishing_hit_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_fishing_hit_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_fishing_hit_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_fishing_hit_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_fishing_hit_no_fish_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_fishing_hit_no_fish_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_fishing_shooting_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_fishing_shooting_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_fishing_notice_shooting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_fishing_notice_shooting_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_fishing_change_bot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_fishing_change_bot_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_fishing_notice_change_bot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_fishing_notice_change_bot_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_fishing_notice_change_map_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_fishing_notice_change_map_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_fishing_use_prop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_fishing_use_prop_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_fishing_notice_use_prop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_fishing_notice_use_prop_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_fishing_map_info_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_fishing_map_info_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_fishing_map_info_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_fishing_map_info_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_fishing_bullet_trace_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_fishing_bullet_trace_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_fishing_notice_bullet_trace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_fishing_notice_bullet_trace_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_fishing_new_bullet_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_fishing_new_bullet_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_fishing_notice_new_bullet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_fishing_notice_new_bullet_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_fishing_5flogic_5fmsg_2eproto() {
  protobuf_AddDesc_fishing_5flogic_5fmsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "fishing_logic_msg.proto");
  GOOGLE_CHECK(file != NULL);
  msg_fishing_game_info_rep_descriptor_ = file->message_type(0);
  static const int msg_fishing_game_info_rep_offsets_[1] = {
  };
  msg_fishing_game_info_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_fishing_game_info_rep_descriptor_,
      msg_fishing_game_info_rep::default_instance_,
      msg_fishing_game_info_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_game_info_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_game_info_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_fishing_game_info_rep));
  msg_fishing_game_info_rsp_descriptor_ = file->message_type(1);
  static const int msg_fishing_game_info_rsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_game_info_rsp, interval_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_game_info_rsp, fish_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_game_info_rsp, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_game_info_rsp, bullet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_game_info_rsp, bot_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_game_info_rsp, arm_range_),
  };
  msg_fishing_game_info_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_fishing_game_info_rsp_descriptor_,
      msg_fishing_game_info_rsp::default_instance_,
      msg_fishing_game_info_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_game_info_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_game_info_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_fishing_game_info_rsp));
  msg_fishing_hit_req_descriptor_ = file->message_type(2);
  static const int msg_fishing_hit_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_hit_req, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_hit_req, bullet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_hit_req, bullet_bot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_hit_req, fish_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_hit_req, timestamp_),
  };
  msg_fishing_hit_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_fishing_hit_req_descriptor_,
      msg_fishing_hit_req::default_instance_,
      msg_fishing_hit_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_hit_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_hit_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_fishing_hit_req));
  msg_fishing_hit_rsp_descriptor_ = file->message_type(3);
  static const int msg_fishing_hit_rsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_hit_rsp, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_hit_rsp, bullet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_hit_rsp, bullet_bot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_hit_rsp, fish_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_hit_rsp, fish_multi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_hit_rsp, score_),
  };
  msg_fishing_hit_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_fishing_hit_rsp_descriptor_,
      msg_fishing_hit_rsp::default_instance_,
      msg_fishing_hit_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_hit_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_hit_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_fishing_hit_rsp));
  msg_fishing_hit_no_fish_rsp_descriptor_ = file->message_type(4);
  static const int msg_fishing_hit_no_fish_rsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_hit_no_fish_rsp, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_hit_no_fish_rsp, bullet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_hit_no_fish_rsp, bullet_bot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_hit_no_fish_rsp, fish_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_hit_no_fish_rsp, timestamp_),
  };
  msg_fishing_hit_no_fish_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_fishing_hit_no_fish_rsp_descriptor_,
      msg_fishing_hit_no_fish_rsp::default_instance_,
      msg_fishing_hit_no_fish_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_hit_no_fish_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_hit_no_fish_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_fishing_hit_no_fish_rsp));
  msg_fishing_shooting_req_descriptor_ = file->message_type(5);
  static const int msg_fishing_shooting_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_shooting_req, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_shooting_req, bullet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_shooting_req, bullet_direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_shooting_req, bullet_bot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_shooting_req, fish_no_),
  };
  msg_fishing_shooting_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_fishing_shooting_req_descriptor_,
      msg_fishing_shooting_req::default_instance_,
      msg_fishing_shooting_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_shooting_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_shooting_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_fishing_shooting_req));
  msg_fishing_notice_shooting_descriptor_ = file->message_type(6);
  static const int msg_fishing_notice_shooting_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_notice_shooting, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_notice_shooting, bullet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_notice_shooting, bullet_direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_notice_shooting, bullet_bot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_notice_shooting, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_notice_shooting, fish_no_),
  };
  msg_fishing_notice_shooting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_fishing_notice_shooting_descriptor_,
      msg_fishing_notice_shooting::default_instance_,
      msg_fishing_notice_shooting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_notice_shooting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_notice_shooting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_fishing_notice_shooting));
  msg_fishing_change_bot_descriptor_ = file->message_type(7);
  static const int msg_fishing_change_bot_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_change_bot, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_change_bot, bot_),
  };
  msg_fishing_change_bot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_fishing_change_bot_descriptor_,
      msg_fishing_change_bot::default_instance_,
      msg_fishing_change_bot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_change_bot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_change_bot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_fishing_change_bot));
  msg_fishing_notice_change_bot_descriptor_ = file->message_type(8);
  static const int msg_fishing_notice_change_bot_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_notice_change_bot, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_notice_change_bot, bot_),
  };
  msg_fishing_notice_change_bot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_fishing_notice_change_bot_descriptor_,
      msg_fishing_notice_change_bot::default_instance_,
      msg_fishing_notice_change_bot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_notice_change_bot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_notice_change_bot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_fishing_notice_change_bot));
  msg_fishing_notice_change_map_descriptor_ = file->message_type(9);
  static const int msg_fishing_notice_change_map_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_notice_change_map, map_id_),
  };
  msg_fishing_notice_change_map_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_fishing_notice_change_map_descriptor_,
      msg_fishing_notice_change_map::default_instance_,
      msg_fishing_notice_change_map_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_notice_change_map, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_notice_change_map, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_fishing_notice_change_map));
  msg_fishing_use_prop_descriptor_ = file->message_type(10);
  static const int msg_fishing_use_prop_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_use_prop, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_use_prop, prop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_use_prop, state_),
  };
  msg_fishing_use_prop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_fishing_use_prop_descriptor_,
      msg_fishing_use_prop::default_instance_,
      msg_fishing_use_prop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_use_prop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_use_prop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_fishing_use_prop));
  msg_fishing_notice_use_prop_descriptor_ = file->message_type(11);
  static const int msg_fishing_notice_use_prop_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_notice_use_prop, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_notice_use_prop, prop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_notice_use_prop, state_),
  };
  msg_fishing_notice_use_prop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_fishing_notice_use_prop_descriptor_,
      msg_fishing_notice_use_prop::default_instance_,
      msg_fishing_notice_use_prop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_notice_use_prop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_notice_use_prop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_fishing_notice_use_prop));
  msg_fishing_map_info_rep_descriptor_ = file->message_type(12);
  static const int msg_fishing_map_info_rep_offsets_[1] = {
  };
  msg_fishing_map_info_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_fishing_map_info_rep_descriptor_,
      msg_fishing_map_info_rep::default_instance_,
      msg_fishing_map_info_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_map_info_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_map_info_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_fishing_map_info_rep));
  msg_fishing_map_info_rsp_descriptor_ = file->message_type(13);
  static const int msg_fishing_map_info_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_map_info_rsp, interval_time_),
  };
  msg_fishing_map_info_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_fishing_map_info_rsp_descriptor_,
      msg_fishing_map_info_rsp::default_instance_,
      msg_fishing_map_info_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_map_info_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_map_info_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_fishing_map_info_rsp));
  msg_fishing_bullet_trace_req_descriptor_ = file->message_type(14);
  static const int msg_fishing_bullet_trace_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_bullet_trace_req, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_bullet_trace_req, fish_no_),
  };
  msg_fishing_bullet_trace_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_fishing_bullet_trace_req_descriptor_,
      msg_fishing_bullet_trace_req::default_instance_,
      msg_fishing_bullet_trace_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_bullet_trace_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_bullet_trace_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_fishing_bullet_trace_req));
  msg_fishing_notice_bullet_trace_descriptor_ = file->message_type(15);
  static const int msg_fishing_notice_bullet_trace_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_notice_bullet_trace, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_notice_bullet_trace, fish_no_),
  };
  msg_fishing_notice_bullet_trace_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_fishing_notice_bullet_trace_descriptor_,
      msg_fishing_notice_bullet_trace::default_instance_,
      msg_fishing_notice_bullet_trace_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_notice_bullet_trace, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_notice_bullet_trace, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_fishing_notice_bullet_trace));
  msg_fishing_new_bullet_req_descriptor_ = file->message_type(16);
  static const int msg_fishing_new_bullet_req_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_new_bullet_req, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_new_bullet_req, bullet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_new_bullet_req, bullet_direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_new_bullet_req, bullet_bot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_new_bullet_req, fish_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_new_bullet_req, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_new_bullet_req, pos_y_),
  };
  msg_fishing_new_bullet_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_fishing_new_bullet_req_descriptor_,
      msg_fishing_new_bullet_req::default_instance_,
      msg_fishing_new_bullet_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_new_bullet_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_new_bullet_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_fishing_new_bullet_req));
  msg_fishing_notice_new_bullet_descriptor_ = file->message_type(17);
  static const int msg_fishing_notice_new_bullet_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_notice_new_bullet, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_notice_new_bullet, bullet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_notice_new_bullet, bullet_direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_notice_new_bullet, bullet_bot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_notice_new_bullet, fish_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_notice_new_bullet, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_notice_new_bullet, pos_y_),
  };
  msg_fishing_notice_new_bullet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_fishing_notice_new_bullet_descriptor_,
      msg_fishing_notice_new_bullet::default_instance_,
      msg_fishing_notice_new_bullet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_notice_new_bullet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_fishing_notice_new_bullet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_fishing_notice_new_bullet));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_fishing_5flogic_5fmsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_fishing_game_info_rep_descriptor_, &msg_fishing_game_info_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_fishing_game_info_rsp_descriptor_, &msg_fishing_game_info_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_fishing_hit_req_descriptor_, &msg_fishing_hit_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_fishing_hit_rsp_descriptor_, &msg_fishing_hit_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_fishing_hit_no_fish_rsp_descriptor_, &msg_fishing_hit_no_fish_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_fishing_shooting_req_descriptor_, &msg_fishing_shooting_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_fishing_notice_shooting_descriptor_, &msg_fishing_notice_shooting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_fishing_change_bot_descriptor_, &msg_fishing_change_bot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_fishing_notice_change_bot_descriptor_, &msg_fishing_notice_change_bot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_fishing_notice_change_map_descriptor_, &msg_fishing_notice_change_map::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_fishing_use_prop_descriptor_, &msg_fishing_use_prop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_fishing_notice_use_prop_descriptor_, &msg_fishing_notice_use_prop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_fishing_map_info_rep_descriptor_, &msg_fishing_map_info_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_fishing_map_info_rsp_descriptor_, &msg_fishing_map_info_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_fishing_bullet_trace_req_descriptor_, &msg_fishing_bullet_trace_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_fishing_notice_bullet_trace_descriptor_, &msg_fishing_notice_bullet_trace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_fishing_new_bullet_req_descriptor_, &msg_fishing_new_bullet_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_fishing_notice_new_bullet_descriptor_, &msg_fishing_notice_new_bullet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_fishing_5flogic_5fmsg_2eproto() {
  delete msg_fishing_game_info_rep::default_instance_;
  delete msg_fishing_game_info_rep_reflection_;
  delete msg_fishing_game_info_rsp::default_instance_;
  delete msg_fishing_game_info_rsp_reflection_;
  delete msg_fishing_hit_req::default_instance_;
  delete msg_fishing_hit_req_reflection_;
  delete msg_fishing_hit_rsp::default_instance_;
  delete msg_fishing_hit_rsp_reflection_;
  delete msg_fishing_hit_no_fish_rsp::default_instance_;
  delete msg_fishing_hit_no_fish_rsp_reflection_;
  delete msg_fishing_shooting_req::default_instance_;
  delete msg_fishing_shooting_req_reflection_;
  delete msg_fishing_notice_shooting::default_instance_;
  delete msg_fishing_notice_shooting_reflection_;
  delete msg_fishing_change_bot::default_instance_;
  delete msg_fishing_change_bot_reflection_;
  delete msg_fishing_notice_change_bot::default_instance_;
  delete msg_fishing_notice_change_bot_reflection_;
  delete msg_fishing_notice_change_map::default_instance_;
  delete msg_fishing_notice_change_map_reflection_;
  delete msg_fishing_use_prop::default_instance_;
  delete msg_fishing_use_prop_reflection_;
  delete msg_fishing_notice_use_prop::default_instance_;
  delete msg_fishing_notice_use_prop_reflection_;
  delete msg_fishing_map_info_rep::default_instance_;
  delete msg_fishing_map_info_rep_reflection_;
  delete msg_fishing_map_info_rsp::default_instance_;
  delete msg_fishing_map_info_rsp_reflection_;
  delete msg_fishing_bullet_trace_req::default_instance_;
  delete msg_fishing_bullet_trace_req_reflection_;
  delete msg_fishing_notice_bullet_trace::default_instance_;
  delete msg_fishing_notice_bullet_trace_reflection_;
  delete msg_fishing_new_bullet_req::default_instance_;
  delete msg_fishing_new_bullet_req_reflection_;
  delete msg_fishing_notice_new_bullet::default_instance_;
  delete msg_fishing_notice_new_bullet_reflection_;
}

void protobuf_AddDesc_fishing_5flogic_5fmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::net::protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  ::net::protobuf_AddDesc_error_5fcode_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027fishing_logic_msg.proto\022\003net\032\025base_msg"
    "_struct.proto\032\020error_code.proto\"\033\n\031msg_f"
    "ishing_game_info_rep\"\213\001\n\031msg_fishing_gam"
    "e_info_rsp\022\025\n\rinterval_time\030\001 \001(\r\022\017\n\007fis"
    "h_no\030\002 \003(\r\022\016\n\006map_id\030\003 \001(\r\022\021\n\tbullet_id\030"
    "\004 \001(\r\022\020\n\010bot_list\030\005 \003(\r\022\021\n\tarm_range\030\006 \003"
    "(\r\"q\n\023msg_fishing_hit_req\022\017\n\007seat_id\030\001 \001"
    "(\r\022\021\n\tbullet_id\030\002 \001(\r\022\022\n\nbullet_bot\030\003 \001("
    "\r\022\017\n\007fish_no\030\004 \001(\r\022\021\n\ttimestamp\030\005 \001(\004\"\201\001"
    "\n\023msg_fishing_hit_rsp\022\017\n\007seat_id\030\001 \001(\r\022\021"
    "\n\tbullet_id\030\002 \001(\r\022\022\n\nbullet_bot\030\003 \001(\r\022\017\n"
    "\007fish_id\030\004 \001(\r\022\022\n\nfish_multi\030\005 \001(\r\022\r\n\005sc"
    "ore\030\006 \001(\r\"y\n\033msg_fishing_hit_no_fish_rsp"
    "\022\017\n\007seat_id\030\001 \001(\r\022\021\n\tbullet_id\030\002 \001(\r\022\022\n\n"
    "bullet_bot\030\003 \001(\r\022\017\n\007fish_id\030\004 \001(\r\022\021\n\ttim"
    "estamp\030\005 \001(\004\"z\n\030msg_fishing_shooting_req"
    "\022\017\n\007seat_id\030\001 \001(\r\022\021\n\tbullet_id\030\002 \001(\r\022\025\n\r"
    "bullet_direct\030\003 \001(\005\022\022\n\nbullet_bot\030\004 \001(\r\022"
    "\017\n\007fish_no\030\005 \001(\r\"\214\001\n\033msg_fishing_notice_"
    "shooting\022\017\n\007seat_id\030\001 \001(\r\022\021\n\tbullet_id\030\002"
    " \001(\r\022\025\n\rbullet_direct\030\003 \001(\005\022\022\n\nbullet_bo"
    "t\030\004 \001(\r\022\r\n\005score\030\005 \001(\r\022\017\n\007fish_no\030\006 \001(\r\""
    "6\n\026msg_fishing_change_bot\022\017\n\007seat_id\030\001 \001"
    "(\r\022\013\n\003bot\030\002 \001(\r\"=\n\035msg_fishing_notice_ch"
    "ange_bot\022\017\n\007seat_id\030\001 \001(\r\022\013\n\003bot\030\002 \001(\r\"/"
    "\n\035msg_fishing_notice_change_map\022\016\n\006map_i"
    "d\030\001 \001(\r\"G\n\024msg_fishing_use_prop\022\017\n\007seat_"
    "id\030\001 \001(\r\022\017\n\007prop_id\030\002 \001(\r\022\r\n\005state\030\003 \001(\r"
    "\"N\n\033msg_fishing_notice_use_prop\022\017\n\007seat_"
    "id\030\001 \001(\r\022\017\n\007prop_id\030\002 \001(\r\022\r\n\005state\030\003 \001(\r"
    "\"\032\n\030msg_fishing_map_info_rep\"1\n\030msg_fish"
    "ing_map_info_rsp\022\025\n\rinterval_time\030\001 \001(\r\""
    "@\n\034msg_fishing_bullet_trace_req\022\017\n\007seat_"
    "id\030\001 \001(\r\022\017\n\007fish_no\030\002 \001(\r\"C\n\037msg_fishing"
    "_notice_bullet_trace\022\017\n\007seat_id\030\001 \001(\r\022\017\n"
    "\007fish_no\030\002 \001(\r\"\232\001\n\032msg_fishing_new_bulle"
    "t_req\022\017\n\007seat_id\030\001 \001(\r\022\021\n\tbullet_id\030\002 \001("
    "\r\022\025\n\rbullet_direct\030\003 \001(\005\022\022\n\nbullet_bot\030\004"
    " \001(\r\022\017\n\007fish_no\030\005 \001(\r\022\r\n\005pos_x\030\006 \001(\005\022\r\n\005"
    "pos_y\030\007 \001(\005\"\235\001\n\035msg_fishing_notice_new_b"
    "ullet\022\017\n\007seat_id\030\001 \001(\r\022\021\n\tbullet_id\030\002 \001("
    "\r\022\025\n\rbullet_direct\030\003 \001(\005\022\022\n\nbullet_bot\030\004"
    " \001(\r\022\017\n\007fish_no\030\005 \001(\r\022\r\n\005pos_x\030\006 \001(\005\022\r\n\005"
    "pos_y\030\007 \001(\005", 1731);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fishing_logic_msg.proto", &protobuf_RegisterTypes);
  msg_fishing_game_info_rep::default_instance_ = new msg_fishing_game_info_rep();
  msg_fishing_game_info_rsp::default_instance_ = new msg_fishing_game_info_rsp();
  msg_fishing_hit_req::default_instance_ = new msg_fishing_hit_req();
  msg_fishing_hit_rsp::default_instance_ = new msg_fishing_hit_rsp();
  msg_fishing_hit_no_fish_rsp::default_instance_ = new msg_fishing_hit_no_fish_rsp();
  msg_fishing_shooting_req::default_instance_ = new msg_fishing_shooting_req();
  msg_fishing_notice_shooting::default_instance_ = new msg_fishing_notice_shooting();
  msg_fishing_change_bot::default_instance_ = new msg_fishing_change_bot();
  msg_fishing_notice_change_bot::default_instance_ = new msg_fishing_notice_change_bot();
  msg_fishing_notice_change_map::default_instance_ = new msg_fishing_notice_change_map();
  msg_fishing_use_prop::default_instance_ = new msg_fishing_use_prop();
  msg_fishing_notice_use_prop::default_instance_ = new msg_fishing_notice_use_prop();
  msg_fishing_map_info_rep::default_instance_ = new msg_fishing_map_info_rep();
  msg_fishing_map_info_rsp::default_instance_ = new msg_fishing_map_info_rsp();
  msg_fishing_bullet_trace_req::default_instance_ = new msg_fishing_bullet_trace_req();
  msg_fishing_notice_bullet_trace::default_instance_ = new msg_fishing_notice_bullet_trace();
  msg_fishing_new_bullet_req::default_instance_ = new msg_fishing_new_bullet_req();
  msg_fishing_notice_new_bullet::default_instance_ = new msg_fishing_notice_new_bullet();
  msg_fishing_game_info_rep::default_instance_->InitAsDefaultInstance();
  msg_fishing_game_info_rsp::default_instance_->InitAsDefaultInstance();
  msg_fishing_hit_req::default_instance_->InitAsDefaultInstance();
  msg_fishing_hit_rsp::default_instance_->InitAsDefaultInstance();
  msg_fishing_hit_no_fish_rsp::default_instance_->InitAsDefaultInstance();
  msg_fishing_shooting_req::default_instance_->InitAsDefaultInstance();
  msg_fishing_notice_shooting::default_instance_->InitAsDefaultInstance();
  msg_fishing_change_bot::default_instance_->InitAsDefaultInstance();
  msg_fishing_notice_change_bot::default_instance_->InitAsDefaultInstance();
  msg_fishing_notice_change_map::default_instance_->InitAsDefaultInstance();
  msg_fishing_use_prop::default_instance_->InitAsDefaultInstance();
  msg_fishing_notice_use_prop::default_instance_->InitAsDefaultInstance();
  msg_fishing_map_info_rep::default_instance_->InitAsDefaultInstance();
  msg_fishing_map_info_rsp::default_instance_->InitAsDefaultInstance();
  msg_fishing_bullet_trace_req::default_instance_->InitAsDefaultInstance();
  msg_fishing_notice_bullet_trace::default_instance_->InitAsDefaultInstance();
  msg_fishing_new_bullet_req::default_instance_->InitAsDefaultInstance();
  msg_fishing_notice_new_bullet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_fishing_5flogic_5fmsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_fishing_5flogic_5fmsg_2eproto {
  StaticDescriptorInitializer_fishing_5flogic_5fmsg_2eproto() {
    protobuf_AddDesc_fishing_5flogic_5fmsg_2eproto();
  }
} static_descriptor_initializer_fishing_5flogic_5fmsg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

msg_fishing_game_info_rep::msg_fishing_game_info_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_fishing_game_info_rep::InitAsDefaultInstance() {
}

msg_fishing_game_info_rep::msg_fishing_game_info_rep(const msg_fishing_game_info_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_fishing_game_info_rep::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_fishing_game_info_rep::~msg_fishing_game_info_rep() {
  SharedDtor();
}

void msg_fishing_game_info_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_fishing_game_info_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_fishing_game_info_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_fishing_game_info_rep_descriptor_;
}

const msg_fishing_game_info_rep& msg_fishing_game_info_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishing_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_fishing_game_info_rep* msg_fishing_game_info_rep::default_instance_ = NULL;

msg_fishing_game_info_rep* msg_fishing_game_info_rep::New() const {
  return new msg_fishing_game_info_rep;
}

void msg_fishing_game_info_rep::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_fishing_game_info_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void msg_fishing_game_info_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_fishing_game_info_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_fishing_game_info_rep::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_fishing_game_info_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_fishing_game_info_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_fishing_game_info_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_fishing_game_info_rep::MergeFrom(const msg_fishing_game_info_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_fishing_game_info_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_fishing_game_info_rep::CopyFrom(const msg_fishing_game_info_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_fishing_game_info_rep::IsInitialized() const {

  return true;
}

void msg_fishing_game_info_rep::Swap(msg_fishing_game_info_rep* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_fishing_game_info_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_fishing_game_info_rep_descriptor_;
  metadata.reflection = msg_fishing_game_info_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_fishing_game_info_rsp::kIntervalTimeFieldNumber;
const int msg_fishing_game_info_rsp::kFishNoFieldNumber;
const int msg_fishing_game_info_rsp::kMapIdFieldNumber;
const int msg_fishing_game_info_rsp::kBulletIdFieldNumber;
const int msg_fishing_game_info_rsp::kBotListFieldNumber;
const int msg_fishing_game_info_rsp::kArmRangeFieldNumber;
#endif  // !_MSC_VER

msg_fishing_game_info_rsp::msg_fishing_game_info_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_fishing_game_info_rsp::InitAsDefaultInstance() {
}

msg_fishing_game_info_rsp::msg_fishing_game_info_rsp(const msg_fishing_game_info_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_fishing_game_info_rsp::SharedCtor() {
  _cached_size_ = 0;
  interval_time_ = 0u;
  map_id_ = 0u;
  bullet_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_fishing_game_info_rsp::~msg_fishing_game_info_rsp() {
  SharedDtor();
}

void msg_fishing_game_info_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_fishing_game_info_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_fishing_game_info_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_fishing_game_info_rsp_descriptor_;
}

const msg_fishing_game_info_rsp& msg_fishing_game_info_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishing_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_fishing_game_info_rsp* msg_fishing_game_info_rsp::default_instance_ = NULL;

msg_fishing_game_info_rsp* msg_fishing_game_info_rsp::New() const {
  return new msg_fishing_game_info_rsp;
}

void msg_fishing_game_info_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    interval_time_ = 0u;
    map_id_ = 0u;
    bullet_id_ = 0u;
  }
  fish_no_.Clear();
  bot_list_.Clear();
  arm_range_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_fishing_game_info_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 interval_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &interval_time_)));
          set_has_interval_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fish_no;
        break;
      }

      // repeated uint32 fish_no = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fish_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_fish_no())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_fish_no())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fish_no;
        if (input->ExpectTag(24)) goto parse_map_id;
        break;
      }

      // optional uint32 map_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bullet_id;
        break;
      }

      // optional uint32 bullet_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bullet_id_)));
          set_has_bullet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bot_list;
        break;
      }

      // repeated uint32 bot_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bot_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_bot_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_bot_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bot_list;
        if (input->ExpectTag(48)) goto parse_arm_range;
        break;
      }

      // repeated uint32 arm_range = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arm_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_arm_range())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_arm_range())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_arm_range;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_fishing_game_info_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 interval_time = 1;
  if (has_interval_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->interval_time(), output);
  }

  // repeated uint32 fish_no = 2;
  for (int i = 0; i < this->fish_no_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->fish_no(i), output);
  }

  // optional uint32 map_id = 3;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->map_id(), output);
  }

  // optional uint32 bullet_id = 4;
  if (has_bullet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bullet_id(), output);
  }

  // repeated uint32 bot_list = 5;
  for (int i = 0; i < this->bot_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->bot_list(i), output);
  }

  // repeated uint32 arm_range = 6;
  for (int i = 0; i < this->arm_range_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->arm_range(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_fishing_game_info_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 interval_time = 1;
  if (has_interval_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->interval_time(), target);
  }

  // repeated uint32 fish_no = 2;
  for (int i = 0; i < this->fish_no_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->fish_no(i), target);
  }

  // optional uint32 map_id = 3;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->map_id(), target);
  }

  // optional uint32 bullet_id = 4;
  if (has_bullet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bullet_id(), target);
  }

  // repeated uint32 bot_list = 5;
  for (int i = 0; i < this->bot_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->bot_list(i), target);
  }

  // repeated uint32 arm_range = 6;
  for (int i = 0; i < this->arm_range_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->arm_range(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_fishing_game_info_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 interval_time = 1;
    if (has_interval_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->interval_time());
    }

    // optional uint32 map_id = 3;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }

    // optional uint32 bullet_id = 4;
    if (has_bullet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bullet_id());
    }

  }
  // repeated uint32 fish_no = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->fish_no_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->fish_no(i));
    }
    total_size += 1 * this->fish_no_size() + data_size;
  }

  // repeated uint32 bot_list = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->bot_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->bot_list(i));
    }
    total_size += 1 * this->bot_list_size() + data_size;
  }

  // repeated uint32 arm_range = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->arm_range_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->arm_range(i));
    }
    total_size += 1 * this->arm_range_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_fishing_game_info_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_fishing_game_info_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_fishing_game_info_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_fishing_game_info_rsp::MergeFrom(const msg_fishing_game_info_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  fish_no_.MergeFrom(from.fish_no_);
  bot_list_.MergeFrom(from.bot_list_);
  arm_range_.MergeFrom(from.arm_range_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_interval_time()) {
      set_interval_time(from.interval_time());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_bullet_id()) {
      set_bullet_id(from.bullet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_fishing_game_info_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_fishing_game_info_rsp::CopyFrom(const msg_fishing_game_info_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_fishing_game_info_rsp::IsInitialized() const {

  return true;
}

void msg_fishing_game_info_rsp::Swap(msg_fishing_game_info_rsp* other) {
  if (other != this) {
    std::swap(interval_time_, other->interval_time_);
    fish_no_.Swap(&other->fish_no_);
    std::swap(map_id_, other->map_id_);
    std::swap(bullet_id_, other->bullet_id_);
    bot_list_.Swap(&other->bot_list_);
    arm_range_.Swap(&other->arm_range_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_fishing_game_info_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_fishing_game_info_rsp_descriptor_;
  metadata.reflection = msg_fishing_game_info_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_fishing_hit_req::kSeatIdFieldNumber;
const int msg_fishing_hit_req::kBulletIdFieldNumber;
const int msg_fishing_hit_req::kBulletBotFieldNumber;
const int msg_fishing_hit_req::kFishNoFieldNumber;
const int msg_fishing_hit_req::kTimestampFieldNumber;
#endif  // !_MSC_VER

msg_fishing_hit_req::msg_fishing_hit_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_fishing_hit_req::InitAsDefaultInstance() {
}

msg_fishing_hit_req::msg_fishing_hit_req(const msg_fishing_hit_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_fishing_hit_req::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0u;
  bullet_id_ = 0u;
  bullet_bot_ = 0u;
  fish_no_ = 0u;
  timestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_fishing_hit_req::~msg_fishing_hit_req() {
  SharedDtor();
}

void msg_fishing_hit_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_fishing_hit_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_fishing_hit_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_fishing_hit_req_descriptor_;
}

const msg_fishing_hit_req& msg_fishing_hit_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishing_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_fishing_hit_req* msg_fishing_hit_req::default_instance_ = NULL;

msg_fishing_hit_req* msg_fishing_hit_req::New() const {
  return new msg_fishing_hit_req;
}

void msg_fishing_hit_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0u;
    bullet_id_ = 0u;
    bullet_bot_ = 0u;
    fish_no_ = 0u;
    timestamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_fishing_hit_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bullet_id;
        break;
      }

      // optional uint32 bullet_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bullet_id_)));
          set_has_bullet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bullet_bot;
        break;
      }

      // optional uint32 bullet_bot = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullet_bot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bullet_bot_)));
          set_has_bullet_bot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fish_no;
        break;
      }

      // optional uint32 fish_no = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fish_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fish_no_)));
          set_has_fish_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_fishing_hit_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seat_id(), output);
  }

  // optional uint32 bullet_id = 2;
  if (has_bullet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bullet_id(), output);
  }

  // optional uint32 bullet_bot = 3;
  if (has_bullet_bot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bullet_bot(), output);
  }

  // optional uint32 fish_no = 4;
  if (has_fish_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->fish_no(), output);
  }

  // optional uint64 timestamp = 5;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_fishing_hit_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seat_id(), target);
  }

  // optional uint32 bullet_id = 2;
  if (has_bullet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bullet_id(), target);
  }

  // optional uint32 bullet_bot = 3;
  if (has_bullet_bot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bullet_bot(), target);
  }

  // optional uint32 fish_no = 4;
  if (has_fish_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->fish_no(), target);
  }

  // optional uint64 timestamp = 5;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_fishing_hit_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seat_id());
    }

    // optional uint32 bullet_id = 2;
    if (has_bullet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bullet_id());
    }

    // optional uint32 bullet_bot = 3;
    if (has_bullet_bot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bullet_bot());
    }

    // optional uint32 fish_no = 4;
    if (has_fish_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fish_no());
    }

    // optional uint64 timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_fishing_hit_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_fishing_hit_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_fishing_hit_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_fishing_hit_req::MergeFrom(const msg_fishing_hit_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_bullet_id()) {
      set_bullet_id(from.bullet_id());
    }
    if (from.has_bullet_bot()) {
      set_bullet_bot(from.bullet_bot());
    }
    if (from.has_fish_no()) {
      set_fish_no(from.fish_no());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_fishing_hit_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_fishing_hit_req::CopyFrom(const msg_fishing_hit_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_fishing_hit_req::IsInitialized() const {

  return true;
}

void msg_fishing_hit_req::Swap(msg_fishing_hit_req* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(bullet_id_, other->bullet_id_);
    std::swap(bullet_bot_, other->bullet_bot_);
    std::swap(fish_no_, other->fish_no_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_fishing_hit_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_fishing_hit_req_descriptor_;
  metadata.reflection = msg_fishing_hit_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_fishing_hit_rsp::kSeatIdFieldNumber;
const int msg_fishing_hit_rsp::kBulletIdFieldNumber;
const int msg_fishing_hit_rsp::kBulletBotFieldNumber;
const int msg_fishing_hit_rsp::kFishIdFieldNumber;
const int msg_fishing_hit_rsp::kFishMultiFieldNumber;
const int msg_fishing_hit_rsp::kScoreFieldNumber;
#endif  // !_MSC_VER

msg_fishing_hit_rsp::msg_fishing_hit_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_fishing_hit_rsp::InitAsDefaultInstance() {
}

msg_fishing_hit_rsp::msg_fishing_hit_rsp(const msg_fishing_hit_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_fishing_hit_rsp::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0u;
  bullet_id_ = 0u;
  bullet_bot_ = 0u;
  fish_id_ = 0u;
  fish_multi_ = 0u;
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_fishing_hit_rsp::~msg_fishing_hit_rsp() {
  SharedDtor();
}

void msg_fishing_hit_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_fishing_hit_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_fishing_hit_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_fishing_hit_rsp_descriptor_;
}

const msg_fishing_hit_rsp& msg_fishing_hit_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishing_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_fishing_hit_rsp* msg_fishing_hit_rsp::default_instance_ = NULL;

msg_fishing_hit_rsp* msg_fishing_hit_rsp::New() const {
  return new msg_fishing_hit_rsp;
}

void msg_fishing_hit_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0u;
    bullet_id_ = 0u;
    bullet_bot_ = 0u;
    fish_id_ = 0u;
    fish_multi_ = 0u;
    score_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_fishing_hit_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bullet_id;
        break;
      }

      // optional uint32 bullet_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bullet_id_)));
          set_has_bullet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bullet_bot;
        break;
      }

      // optional uint32 bullet_bot = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullet_bot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bullet_bot_)));
          set_has_bullet_bot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fish_id;
        break;
      }

      // optional uint32 fish_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fish_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fish_id_)));
          set_has_fish_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fish_multi;
        break;
      }

      // optional uint32 fish_multi = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fish_multi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fish_multi_)));
          set_has_fish_multi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_score;
        break;
      }

      // optional uint32 score = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_fishing_hit_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seat_id(), output);
  }

  // optional uint32 bullet_id = 2;
  if (has_bullet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bullet_id(), output);
  }

  // optional uint32 bullet_bot = 3;
  if (has_bullet_bot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bullet_bot(), output);
  }

  // optional uint32 fish_id = 4;
  if (has_fish_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->fish_id(), output);
  }

  // optional uint32 fish_multi = 5;
  if (has_fish_multi()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->fish_multi(), output);
  }

  // optional uint32 score = 6;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_fishing_hit_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seat_id(), target);
  }

  // optional uint32 bullet_id = 2;
  if (has_bullet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bullet_id(), target);
  }

  // optional uint32 bullet_bot = 3;
  if (has_bullet_bot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bullet_bot(), target);
  }

  // optional uint32 fish_id = 4;
  if (has_fish_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->fish_id(), target);
  }

  // optional uint32 fish_multi = 5;
  if (has_fish_multi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->fish_multi(), target);
  }

  // optional uint32 score = 6;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_fishing_hit_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seat_id());
    }

    // optional uint32 bullet_id = 2;
    if (has_bullet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bullet_id());
    }

    // optional uint32 bullet_bot = 3;
    if (has_bullet_bot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bullet_bot());
    }

    // optional uint32 fish_id = 4;
    if (has_fish_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fish_id());
    }

    // optional uint32 fish_multi = 5;
    if (has_fish_multi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fish_multi());
    }

    // optional uint32 score = 6;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_fishing_hit_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_fishing_hit_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_fishing_hit_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_fishing_hit_rsp::MergeFrom(const msg_fishing_hit_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_bullet_id()) {
      set_bullet_id(from.bullet_id());
    }
    if (from.has_bullet_bot()) {
      set_bullet_bot(from.bullet_bot());
    }
    if (from.has_fish_id()) {
      set_fish_id(from.fish_id());
    }
    if (from.has_fish_multi()) {
      set_fish_multi(from.fish_multi());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_fishing_hit_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_fishing_hit_rsp::CopyFrom(const msg_fishing_hit_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_fishing_hit_rsp::IsInitialized() const {

  return true;
}

void msg_fishing_hit_rsp::Swap(msg_fishing_hit_rsp* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(bullet_id_, other->bullet_id_);
    std::swap(bullet_bot_, other->bullet_bot_);
    std::swap(fish_id_, other->fish_id_);
    std::swap(fish_multi_, other->fish_multi_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_fishing_hit_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_fishing_hit_rsp_descriptor_;
  metadata.reflection = msg_fishing_hit_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_fishing_hit_no_fish_rsp::kSeatIdFieldNumber;
const int msg_fishing_hit_no_fish_rsp::kBulletIdFieldNumber;
const int msg_fishing_hit_no_fish_rsp::kBulletBotFieldNumber;
const int msg_fishing_hit_no_fish_rsp::kFishIdFieldNumber;
const int msg_fishing_hit_no_fish_rsp::kTimestampFieldNumber;
#endif  // !_MSC_VER

msg_fishing_hit_no_fish_rsp::msg_fishing_hit_no_fish_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_fishing_hit_no_fish_rsp::InitAsDefaultInstance() {
}

msg_fishing_hit_no_fish_rsp::msg_fishing_hit_no_fish_rsp(const msg_fishing_hit_no_fish_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_fishing_hit_no_fish_rsp::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0u;
  bullet_id_ = 0u;
  bullet_bot_ = 0u;
  fish_id_ = 0u;
  timestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_fishing_hit_no_fish_rsp::~msg_fishing_hit_no_fish_rsp() {
  SharedDtor();
}

void msg_fishing_hit_no_fish_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_fishing_hit_no_fish_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_fishing_hit_no_fish_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_fishing_hit_no_fish_rsp_descriptor_;
}

const msg_fishing_hit_no_fish_rsp& msg_fishing_hit_no_fish_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishing_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_fishing_hit_no_fish_rsp* msg_fishing_hit_no_fish_rsp::default_instance_ = NULL;

msg_fishing_hit_no_fish_rsp* msg_fishing_hit_no_fish_rsp::New() const {
  return new msg_fishing_hit_no_fish_rsp;
}

void msg_fishing_hit_no_fish_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0u;
    bullet_id_ = 0u;
    bullet_bot_ = 0u;
    fish_id_ = 0u;
    timestamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_fishing_hit_no_fish_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bullet_id;
        break;
      }

      // optional uint32 bullet_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bullet_id_)));
          set_has_bullet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bullet_bot;
        break;
      }

      // optional uint32 bullet_bot = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullet_bot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bullet_bot_)));
          set_has_bullet_bot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fish_id;
        break;
      }

      // optional uint32 fish_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fish_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fish_id_)));
          set_has_fish_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_fishing_hit_no_fish_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seat_id(), output);
  }

  // optional uint32 bullet_id = 2;
  if (has_bullet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bullet_id(), output);
  }

  // optional uint32 bullet_bot = 3;
  if (has_bullet_bot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bullet_bot(), output);
  }

  // optional uint32 fish_id = 4;
  if (has_fish_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->fish_id(), output);
  }

  // optional uint64 timestamp = 5;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_fishing_hit_no_fish_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seat_id(), target);
  }

  // optional uint32 bullet_id = 2;
  if (has_bullet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bullet_id(), target);
  }

  // optional uint32 bullet_bot = 3;
  if (has_bullet_bot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bullet_bot(), target);
  }

  // optional uint32 fish_id = 4;
  if (has_fish_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->fish_id(), target);
  }

  // optional uint64 timestamp = 5;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_fishing_hit_no_fish_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seat_id());
    }

    // optional uint32 bullet_id = 2;
    if (has_bullet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bullet_id());
    }

    // optional uint32 bullet_bot = 3;
    if (has_bullet_bot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bullet_bot());
    }

    // optional uint32 fish_id = 4;
    if (has_fish_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fish_id());
    }

    // optional uint64 timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_fishing_hit_no_fish_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_fishing_hit_no_fish_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_fishing_hit_no_fish_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_fishing_hit_no_fish_rsp::MergeFrom(const msg_fishing_hit_no_fish_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_bullet_id()) {
      set_bullet_id(from.bullet_id());
    }
    if (from.has_bullet_bot()) {
      set_bullet_bot(from.bullet_bot());
    }
    if (from.has_fish_id()) {
      set_fish_id(from.fish_id());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_fishing_hit_no_fish_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_fishing_hit_no_fish_rsp::CopyFrom(const msg_fishing_hit_no_fish_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_fishing_hit_no_fish_rsp::IsInitialized() const {

  return true;
}

void msg_fishing_hit_no_fish_rsp::Swap(msg_fishing_hit_no_fish_rsp* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(bullet_id_, other->bullet_id_);
    std::swap(bullet_bot_, other->bullet_bot_);
    std::swap(fish_id_, other->fish_id_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_fishing_hit_no_fish_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_fishing_hit_no_fish_rsp_descriptor_;
  metadata.reflection = msg_fishing_hit_no_fish_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_fishing_shooting_req::kSeatIdFieldNumber;
const int msg_fishing_shooting_req::kBulletIdFieldNumber;
const int msg_fishing_shooting_req::kBulletDirectFieldNumber;
const int msg_fishing_shooting_req::kBulletBotFieldNumber;
const int msg_fishing_shooting_req::kFishNoFieldNumber;
#endif  // !_MSC_VER

msg_fishing_shooting_req::msg_fishing_shooting_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_fishing_shooting_req::InitAsDefaultInstance() {
}

msg_fishing_shooting_req::msg_fishing_shooting_req(const msg_fishing_shooting_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_fishing_shooting_req::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0u;
  bullet_id_ = 0u;
  bullet_direct_ = 0;
  bullet_bot_ = 0u;
  fish_no_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_fishing_shooting_req::~msg_fishing_shooting_req() {
  SharedDtor();
}

void msg_fishing_shooting_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_fishing_shooting_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_fishing_shooting_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_fishing_shooting_req_descriptor_;
}

const msg_fishing_shooting_req& msg_fishing_shooting_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishing_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_fishing_shooting_req* msg_fishing_shooting_req::default_instance_ = NULL;

msg_fishing_shooting_req* msg_fishing_shooting_req::New() const {
  return new msg_fishing_shooting_req;
}

void msg_fishing_shooting_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0u;
    bullet_id_ = 0u;
    bullet_direct_ = 0;
    bullet_bot_ = 0u;
    fish_no_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_fishing_shooting_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bullet_id;
        break;
      }

      // optional uint32 bullet_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bullet_id_)));
          set_has_bullet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bullet_direct;
        break;
      }

      // optional int32 bullet_direct = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullet_direct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bullet_direct_)));
          set_has_bullet_direct();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bullet_bot;
        break;
      }

      // optional uint32 bullet_bot = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullet_bot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bullet_bot_)));
          set_has_bullet_bot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fish_no;
        break;
      }

      // optional uint32 fish_no = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fish_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fish_no_)));
          set_has_fish_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_fishing_shooting_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seat_id(), output);
  }

  // optional uint32 bullet_id = 2;
  if (has_bullet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bullet_id(), output);
  }

  // optional int32 bullet_direct = 3;
  if (has_bullet_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bullet_direct(), output);
  }

  // optional uint32 bullet_bot = 4;
  if (has_bullet_bot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bullet_bot(), output);
  }

  // optional uint32 fish_no = 5;
  if (has_fish_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->fish_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_fishing_shooting_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seat_id(), target);
  }

  // optional uint32 bullet_id = 2;
  if (has_bullet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bullet_id(), target);
  }

  // optional int32 bullet_direct = 3;
  if (has_bullet_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bullet_direct(), target);
  }

  // optional uint32 bullet_bot = 4;
  if (has_bullet_bot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bullet_bot(), target);
  }

  // optional uint32 fish_no = 5;
  if (has_fish_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->fish_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_fishing_shooting_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seat_id());
    }

    // optional uint32 bullet_id = 2;
    if (has_bullet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bullet_id());
    }

    // optional int32 bullet_direct = 3;
    if (has_bullet_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bullet_direct());
    }

    // optional uint32 bullet_bot = 4;
    if (has_bullet_bot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bullet_bot());
    }

    // optional uint32 fish_no = 5;
    if (has_fish_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fish_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_fishing_shooting_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_fishing_shooting_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_fishing_shooting_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_fishing_shooting_req::MergeFrom(const msg_fishing_shooting_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_bullet_id()) {
      set_bullet_id(from.bullet_id());
    }
    if (from.has_bullet_direct()) {
      set_bullet_direct(from.bullet_direct());
    }
    if (from.has_bullet_bot()) {
      set_bullet_bot(from.bullet_bot());
    }
    if (from.has_fish_no()) {
      set_fish_no(from.fish_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_fishing_shooting_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_fishing_shooting_req::CopyFrom(const msg_fishing_shooting_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_fishing_shooting_req::IsInitialized() const {

  return true;
}

void msg_fishing_shooting_req::Swap(msg_fishing_shooting_req* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(bullet_id_, other->bullet_id_);
    std::swap(bullet_direct_, other->bullet_direct_);
    std::swap(bullet_bot_, other->bullet_bot_);
    std::swap(fish_no_, other->fish_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_fishing_shooting_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_fishing_shooting_req_descriptor_;
  metadata.reflection = msg_fishing_shooting_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_fishing_notice_shooting::kSeatIdFieldNumber;
const int msg_fishing_notice_shooting::kBulletIdFieldNumber;
const int msg_fishing_notice_shooting::kBulletDirectFieldNumber;
const int msg_fishing_notice_shooting::kBulletBotFieldNumber;
const int msg_fishing_notice_shooting::kScoreFieldNumber;
const int msg_fishing_notice_shooting::kFishNoFieldNumber;
#endif  // !_MSC_VER

msg_fishing_notice_shooting::msg_fishing_notice_shooting()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_fishing_notice_shooting::InitAsDefaultInstance() {
}

msg_fishing_notice_shooting::msg_fishing_notice_shooting(const msg_fishing_notice_shooting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_fishing_notice_shooting::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0u;
  bullet_id_ = 0u;
  bullet_direct_ = 0;
  bullet_bot_ = 0u;
  score_ = 0u;
  fish_no_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_fishing_notice_shooting::~msg_fishing_notice_shooting() {
  SharedDtor();
}

void msg_fishing_notice_shooting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_fishing_notice_shooting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_fishing_notice_shooting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_fishing_notice_shooting_descriptor_;
}

const msg_fishing_notice_shooting& msg_fishing_notice_shooting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishing_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_fishing_notice_shooting* msg_fishing_notice_shooting::default_instance_ = NULL;

msg_fishing_notice_shooting* msg_fishing_notice_shooting::New() const {
  return new msg_fishing_notice_shooting;
}

void msg_fishing_notice_shooting::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0u;
    bullet_id_ = 0u;
    bullet_direct_ = 0;
    bullet_bot_ = 0u;
    score_ = 0u;
    fish_no_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_fishing_notice_shooting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bullet_id;
        break;
      }

      // optional uint32 bullet_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bullet_id_)));
          set_has_bullet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bullet_direct;
        break;
      }

      // optional int32 bullet_direct = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullet_direct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bullet_direct_)));
          set_has_bullet_direct();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bullet_bot;
        break;
      }

      // optional uint32 bullet_bot = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullet_bot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bullet_bot_)));
          set_has_bullet_bot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_score;
        break;
      }

      // optional uint32 score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fish_no;
        break;
      }

      // optional uint32 fish_no = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fish_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fish_no_)));
          set_has_fish_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_fishing_notice_shooting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seat_id(), output);
  }

  // optional uint32 bullet_id = 2;
  if (has_bullet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bullet_id(), output);
  }

  // optional int32 bullet_direct = 3;
  if (has_bullet_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bullet_direct(), output);
  }

  // optional uint32 bullet_bot = 4;
  if (has_bullet_bot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bullet_bot(), output);
  }

  // optional uint32 score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->score(), output);
  }

  // optional uint32 fish_no = 6;
  if (has_fish_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->fish_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_fishing_notice_shooting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seat_id(), target);
  }

  // optional uint32 bullet_id = 2;
  if (has_bullet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bullet_id(), target);
  }

  // optional int32 bullet_direct = 3;
  if (has_bullet_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bullet_direct(), target);
  }

  // optional uint32 bullet_bot = 4;
  if (has_bullet_bot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bullet_bot(), target);
  }

  // optional uint32 score = 5;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->score(), target);
  }

  // optional uint32 fish_no = 6;
  if (has_fish_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->fish_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_fishing_notice_shooting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seat_id());
    }

    // optional uint32 bullet_id = 2;
    if (has_bullet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bullet_id());
    }

    // optional int32 bullet_direct = 3;
    if (has_bullet_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bullet_direct());
    }

    // optional uint32 bullet_bot = 4;
    if (has_bullet_bot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bullet_bot());
    }

    // optional uint32 score = 5;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 fish_no = 6;
    if (has_fish_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fish_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_fishing_notice_shooting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_fishing_notice_shooting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_fishing_notice_shooting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_fishing_notice_shooting::MergeFrom(const msg_fishing_notice_shooting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_bullet_id()) {
      set_bullet_id(from.bullet_id());
    }
    if (from.has_bullet_direct()) {
      set_bullet_direct(from.bullet_direct());
    }
    if (from.has_bullet_bot()) {
      set_bullet_bot(from.bullet_bot());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_fish_no()) {
      set_fish_no(from.fish_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_fishing_notice_shooting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_fishing_notice_shooting::CopyFrom(const msg_fishing_notice_shooting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_fishing_notice_shooting::IsInitialized() const {

  return true;
}

void msg_fishing_notice_shooting::Swap(msg_fishing_notice_shooting* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(bullet_id_, other->bullet_id_);
    std::swap(bullet_direct_, other->bullet_direct_);
    std::swap(bullet_bot_, other->bullet_bot_);
    std::swap(score_, other->score_);
    std::swap(fish_no_, other->fish_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_fishing_notice_shooting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_fishing_notice_shooting_descriptor_;
  metadata.reflection = msg_fishing_notice_shooting_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_fishing_change_bot::kSeatIdFieldNumber;
const int msg_fishing_change_bot::kBotFieldNumber;
#endif  // !_MSC_VER

msg_fishing_change_bot::msg_fishing_change_bot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_fishing_change_bot::InitAsDefaultInstance() {
}

msg_fishing_change_bot::msg_fishing_change_bot(const msg_fishing_change_bot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_fishing_change_bot::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0u;
  bot_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_fishing_change_bot::~msg_fishing_change_bot() {
  SharedDtor();
}

void msg_fishing_change_bot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_fishing_change_bot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_fishing_change_bot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_fishing_change_bot_descriptor_;
}

const msg_fishing_change_bot& msg_fishing_change_bot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishing_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_fishing_change_bot* msg_fishing_change_bot::default_instance_ = NULL;

msg_fishing_change_bot* msg_fishing_change_bot::New() const {
  return new msg_fishing_change_bot;
}

void msg_fishing_change_bot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0u;
    bot_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_fishing_change_bot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bot;
        break;
      }

      // optional uint32 bot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bot_)));
          set_has_bot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_fishing_change_bot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seat_id(), output);
  }

  // optional uint32 bot = 2;
  if (has_bot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_fishing_change_bot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seat_id(), target);
  }

  // optional uint32 bot = 2;
  if (has_bot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_fishing_change_bot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seat_id());
    }

    // optional uint32 bot = 2;
    if (has_bot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_fishing_change_bot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_fishing_change_bot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_fishing_change_bot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_fishing_change_bot::MergeFrom(const msg_fishing_change_bot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_bot()) {
      set_bot(from.bot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_fishing_change_bot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_fishing_change_bot::CopyFrom(const msg_fishing_change_bot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_fishing_change_bot::IsInitialized() const {

  return true;
}

void msg_fishing_change_bot::Swap(msg_fishing_change_bot* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(bot_, other->bot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_fishing_change_bot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_fishing_change_bot_descriptor_;
  metadata.reflection = msg_fishing_change_bot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_fishing_notice_change_bot::kSeatIdFieldNumber;
const int msg_fishing_notice_change_bot::kBotFieldNumber;
#endif  // !_MSC_VER

msg_fishing_notice_change_bot::msg_fishing_notice_change_bot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_fishing_notice_change_bot::InitAsDefaultInstance() {
}

msg_fishing_notice_change_bot::msg_fishing_notice_change_bot(const msg_fishing_notice_change_bot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_fishing_notice_change_bot::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0u;
  bot_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_fishing_notice_change_bot::~msg_fishing_notice_change_bot() {
  SharedDtor();
}

void msg_fishing_notice_change_bot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_fishing_notice_change_bot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_fishing_notice_change_bot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_fishing_notice_change_bot_descriptor_;
}

const msg_fishing_notice_change_bot& msg_fishing_notice_change_bot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishing_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_fishing_notice_change_bot* msg_fishing_notice_change_bot::default_instance_ = NULL;

msg_fishing_notice_change_bot* msg_fishing_notice_change_bot::New() const {
  return new msg_fishing_notice_change_bot;
}

void msg_fishing_notice_change_bot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0u;
    bot_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_fishing_notice_change_bot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bot;
        break;
      }

      // optional uint32 bot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bot_)));
          set_has_bot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_fishing_notice_change_bot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seat_id(), output);
  }

  // optional uint32 bot = 2;
  if (has_bot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_fishing_notice_change_bot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seat_id(), target);
  }

  // optional uint32 bot = 2;
  if (has_bot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_fishing_notice_change_bot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seat_id());
    }

    // optional uint32 bot = 2;
    if (has_bot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_fishing_notice_change_bot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_fishing_notice_change_bot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_fishing_notice_change_bot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_fishing_notice_change_bot::MergeFrom(const msg_fishing_notice_change_bot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_bot()) {
      set_bot(from.bot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_fishing_notice_change_bot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_fishing_notice_change_bot::CopyFrom(const msg_fishing_notice_change_bot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_fishing_notice_change_bot::IsInitialized() const {

  return true;
}

void msg_fishing_notice_change_bot::Swap(msg_fishing_notice_change_bot* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(bot_, other->bot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_fishing_notice_change_bot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_fishing_notice_change_bot_descriptor_;
  metadata.reflection = msg_fishing_notice_change_bot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_fishing_notice_change_map::kMapIdFieldNumber;
#endif  // !_MSC_VER

msg_fishing_notice_change_map::msg_fishing_notice_change_map()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_fishing_notice_change_map::InitAsDefaultInstance() {
}

msg_fishing_notice_change_map::msg_fishing_notice_change_map(const msg_fishing_notice_change_map& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_fishing_notice_change_map::SharedCtor() {
  _cached_size_ = 0;
  map_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_fishing_notice_change_map::~msg_fishing_notice_change_map() {
  SharedDtor();
}

void msg_fishing_notice_change_map::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_fishing_notice_change_map::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_fishing_notice_change_map::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_fishing_notice_change_map_descriptor_;
}

const msg_fishing_notice_change_map& msg_fishing_notice_change_map::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishing_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_fishing_notice_change_map* msg_fishing_notice_change_map::default_instance_ = NULL;

msg_fishing_notice_change_map* msg_fishing_notice_change_map::New() const {
  return new msg_fishing_notice_change_map;
}

void msg_fishing_notice_change_map::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_fishing_notice_change_map::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 map_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_fishing_notice_change_map::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 map_id = 1;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->map_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_fishing_notice_change_map::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 map_id = 1;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->map_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_fishing_notice_change_map::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 map_id = 1;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_fishing_notice_change_map::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_fishing_notice_change_map* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_fishing_notice_change_map*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_fishing_notice_change_map::MergeFrom(const msg_fishing_notice_change_map& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_fishing_notice_change_map::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_fishing_notice_change_map::CopyFrom(const msg_fishing_notice_change_map& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_fishing_notice_change_map::IsInitialized() const {

  return true;
}

void msg_fishing_notice_change_map::Swap(msg_fishing_notice_change_map* other) {
  if (other != this) {
    std::swap(map_id_, other->map_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_fishing_notice_change_map::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_fishing_notice_change_map_descriptor_;
  metadata.reflection = msg_fishing_notice_change_map_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_fishing_use_prop::kSeatIdFieldNumber;
const int msg_fishing_use_prop::kPropIdFieldNumber;
const int msg_fishing_use_prop::kStateFieldNumber;
#endif  // !_MSC_VER

msg_fishing_use_prop::msg_fishing_use_prop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_fishing_use_prop::InitAsDefaultInstance() {
}

msg_fishing_use_prop::msg_fishing_use_prop(const msg_fishing_use_prop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_fishing_use_prop::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0u;
  prop_id_ = 0u;
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_fishing_use_prop::~msg_fishing_use_prop() {
  SharedDtor();
}

void msg_fishing_use_prop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_fishing_use_prop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_fishing_use_prop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_fishing_use_prop_descriptor_;
}

const msg_fishing_use_prop& msg_fishing_use_prop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishing_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_fishing_use_prop* msg_fishing_use_prop::default_instance_ = NULL;

msg_fishing_use_prop* msg_fishing_use_prop::New() const {
  return new msg_fishing_use_prop;
}

void msg_fishing_use_prop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0u;
    prop_id_ = 0u;
    state_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_fishing_use_prop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_prop_id;
        break;
      }

      // optional uint32 prop_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prop_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prop_id_)));
          set_has_prop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional uint32 state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_fishing_use_prop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seat_id(), output);
  }

  // optional uint32 prop_id = 2;
  if (has_prop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->prop_id(), output);
  }

  // optional uint32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_fishing_use_prop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seat_id(), target);
  }

  // optional uint32 prop_id = 2;
  if (has_prop_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->prop_id(), target);
  }

  // optional uint32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_fishing_use_prop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seat_id());
    }

    // optional uint32 prop_id = 2;
    if (has_prop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prop_id());
    }

    // optional uint32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_fishing_use_prop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_fishing_use_prop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_fishing_use_prop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_fishing_use_prop::MergeFrom(const msg_fishing_use_prop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_prop_id()) {
      set_prop_id(from.prop_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_fishing_use_prop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_fishing_use_prop::CopyFrom(const msg_fishing_use_prop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_fishing_use_prop::IsInitialized() const {

  return true;
}

void msg_fishing_use_prop::Swap(msg_fishing_use_prop* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(prop_id_, other->prop_id_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_fishing_use_prop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_fishing_use_prop_descriptor_;
  metadata.reflection = msg_fishing_use_prop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_fishing_notice_use_prop::kSeatIdFieldNumber;
const int msg_fishing_notice_use_prop::kPropIdFieldNumber;
const int msg_fishing_notice_use_prop::kStateFieldNumber;
#endif  // !_MSC_VER

msg_fishing_notice_use_prop::msg_fishing_notice_use_prop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_fishing_notice_use_prop::InitAsDefaultInstance() {
}

msg_fishing_notice_use_prop::msg_fishing_notice_use_prop(const msg_fishing_notice_use_prop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_fishing_notice_use_prop::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0u;
  prop_id_ = 0u;
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_fishing_notice_use_prop::~msg_fishing_notice_use_prop() {
  SharedDtor();
}

void msg_fishing_notice_use_prop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_fishing_notice_use_prop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_fishing_notice_use_prop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_fishing_notice_use_prop_descriptor_;
}

const msg_fishing_notice_use_prop& msg_fishing_notice_use_prop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishing_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_fishing_notice_use_prop* msg_fishing_notice_use_prop::default_instance_ = NULL;

msg_fishing_notice_use_prop* msg_fishing_notice_use_prop::New() const {
  return new msg_fishing_notice_use_prop;
}

void msg_fishing_notice_use_prop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0u;
    prop_id_ = 0u;
    state_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_fishing_notice_use_prop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_prop_id;
        break;
      }

      // optional uint32 prop_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prop_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prop_id_)));
          set_has_prop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional uint32 state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_fishing_notice_use_prop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seat_id(), output);
  }

  // optional uint32 prop_id = 2;
  if (has_prop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->prop_id(), output);
  }

  // optional uint32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_fishing_notice_use_prop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seat_id(), target);
  }

  // optional uint32 prop_id = 2;
  if (has_prop_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->prop_id(), target);
  }

  // optional uint32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_fishing_notice_use_prop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seat_id());
    }

    // optional uint32 prop_id = 2;
    if (has_prop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prop_id());
    }

    // optional uint32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_fishing_notice_use_prop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_fishing_notice_use_prop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_fishing_notice_use_prop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_fishing_notice_use_prop::MergeFrom(const msg_fishing_notice_use_prop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_prop_id()) {
      set_prop_id(from.prop_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_fishing_notice_use_prop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_fishing_notice_use_prop::CopyFrom(const msg_fishing_notice_use_prop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_fishing_notice_use_prop::IsInitialized() const {

  return true;
}

void msg_fishing_notice_use_prop::Swap(msg_fishing_notice_use_prop* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(prop_id_, other->prop_id_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_fishing_notice_use_prop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_fishing_notice_use_prop_descriptor_;
  metadata.reflection = msg_fishing_notice_use_prop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

msg_fishing_map_info_rep::msg_fishing_map_info_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_fishing_map_info_rep::InitAsDefaultInstance() {
}

msg_fishing_map_info_rep::msg_fishing_map_info_rep(const msg_fishing_map_info_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_fishing_map_info_rep::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_fishing_map_info_rep::~msg_fishing_map_info_rep() {
  SharedDtor();
}

void msg_fishing_map_info_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_fishing_map_info_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_fishing_map_info_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_fishing_map_info_rep_descriptor_;
}

const msg_fishing_map_info_rep& msg_fishing_map_info_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishing_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_fishing_map_info_rep* msg_fishing_map_info_rep::default_instance_ = NULL;

msg_fishing_map_info_rep* msg_fishing_map_info_rep::New() const {
  return new msg_fishing_map_info_rep;
}

void msg_fishing_map_info_rep::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_fishing_map_info_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void msg_fishing_map_info_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_fishing_map_info_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_fishing_map_info_rep::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_fishing_map_info_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_fishing_map_info_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_fishing_map_info_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_fishing_map_info_rep::MergeFrom(const msg_fishing_map_info_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_fishing_map_info_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_fishing_map_info_rep::CopyFrom(const msg_fishing_map_info_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_fishing_map_info_rep::IsInitialized() const {

  return true;
}

void msg_fishing_map_info_rep::Swap(msg_fishing_map_info_rep* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_fishing_map_info_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_fishing_map_info_rep_descriptor_;
  metadata.reflection = msg_fishing_map_info_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_fishing_map_info_rsp::kIntervalTimeFieldNumber;
#endif  // !_MSC_VER

msg_fishing_map_info_rsp::msg_fishing_map_info_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_fishing_map_info_rsp::InitAsDefaultInstance() {
}

msg_fishing_map_info_rsp::msg_fishing_map_info_rsp(const msg_fishing_map_info_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_fishing_map_info_rsp::SharedCtor() {
  _cached_size_ = 0;
  interval_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_fishing_map_info_rsp::~msg_fishing_map_info_rsp() {
  SharedDtor();
}

void msg_fishing_map_info_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_fishing_map_info_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_fishing_map_info_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_fishing_map_info_rsp_descriptor_;
}

const msg_fishing_map_info_rsp& msg_fishing_map_info_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishing_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_fishing_map_info_rsp* msg_fishing_map_info_rsp::default_instance_ = NULL;

msg_fishing_map_info_rsp* msg_fishing_map_info_rsp::New() const {
  return new msg_fishing_map_info_rsp;
}

void msg_fishing_map_info_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    interval_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_fishing_map_info_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 interval_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &interval_time_)));
          set_has_interval_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_fishing_map_info_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 interval_time = 1;
  if (has_interval_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->interval_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_fishing_map_info_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 interval_time = 1;
  if (has_interval_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->interval_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_fishing_map_info_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 interval_time = 1;
    if (has_interval_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->interval_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_fishing_map_info_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_fishing_map_info_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_fishing_map_info_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_fishing_map_info_rsp::MergeFrom(const msg_fishing_map_info_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_interval_time()) {
      set_interval_time(from.interval_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_fishing_map_info_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_fishing_map_info_rsp::CopyFrom(const msg_fishing_map_info_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_fishing_map_info_rsp::IsInitialized() const {

  return true;
}

void msg_fishing_map_info_rsp::Swap(msg_fishing_map_info_rsp* other) {
  if (other != this) {
    std::swap(interval_time_, other->interval_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_fishing_map_info_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_fishing_map_info_rsp_descriptor_;
  metadata.reflection = msg_fishing_map_info_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_fishing_bullet_trace_req::kSeatIdFieldNumber;
const int msg_fishing_bullet_trace_req::kFishNoFieldNumber;
#endif  // !_MSC_VER

msg_fishing_bullet_trace_req::msg_fishing_bullet_trace_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_fishing_bullet_trace_req::InitAsDefaultInstance() {
}

msg_fishing_bullet_trace_req::msg_fishing_bullet_trace_req(const msg_fishing_bullet_trace_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_fishing_bullet_trace_req::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0u;
  fish_no_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_fishing_bullet_trace_req::~msg_fishing_bullet_trace_req() {
  SharedDtor();
}

void msg_fishing_bullet_trace_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_fishing_bullet_trace_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_fishing_bullet_trace_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_fishing_bullet_trace_req_descriptor_;
}

const msg_fishing_bullet_trace_req& msg_fishing_bullet_trace_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishing_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_fishing_bullet_trace_req* msg_fishing_bullet_trace_req::default_instance_ = NULL;

msg_fishing_bullet_trace_req* msg_fishing_bullet_trace_req::New() const {
  return new msg_fishing_bullet_trace_req;
}

void msg_fishing_bullet_trace_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0u;
    fish_no_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_fishing_bullet_trace_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fish_no;
        break;
      }

      // optional uint32 fish_no = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fish_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fish_no_)));
          set_has_fish_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_fishing_bullet_trace_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seat_id(), output);
  }

  // optional uint32 fish_no = 2;
  if (has_fish_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fish_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_fishing_bullet_trace_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seat_id(), target);
  }

  // optional uint32 fish_no = 2;
  if (has_fish_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fish_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_fishing_bullet_trace_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seat_id());
    }

    // optional uint32 fish_no = 2;
    if (has_fish_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fish_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_fishing_bullet_trace_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_fishing_bullet_trace_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_fishing_bullet_trace_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_fishing_bullet_trace_req::MergeFrom(const msg_fishing_bullet_trace_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_fish_no()) {
      set_fish_no(from.fish_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_fishing_bullet_trace_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_fishing_bullet_trace_req::CopyFrom(const msg_fishing_bullet_trace_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_fishing_bullet_trace_req::IsInitialized() const {

  return true;
}

void msg_fishing_bullet_trace_req::Swap(msg_fishing_bullet_trace_req* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(fish_no_, other->fish_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_fishing_bullet_trace_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_fishing_bullet_trace_req_descriptor_;
  metadata.reflection = msg_fishing_bullet_trace_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_fishing_notice_bullet_trace::kSeatIdFieldNumber;
const int msg_fishing_notice_bullet_trace::kFishNoFieldNumber;
#endif  // !_MSC_VER

msg_fishing_notice_bullet_trace::msg_fishing_notice_bullet_trace()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_fishing_notice_bullet_trace::InitAsDefaultInstance() {
}

msg_fishing_notice_bullet_trace::msg_fishing_notice_bullet_trace(const msg_fishing_notice_bullet_trace& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_fishing_notice_bullet_trace::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0u;
  fish_no_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_fishing_notice_bullet_trace::~msg_fishing_notice_bullet_trace() {
  SharedDtor();
}

void msg_fishing_notice_bullet_trace::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_fishing_notice_bullet_trace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_fishing_notice_bullet_trace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_fishing_notice_bullet_trace_descriptor_;
}

const msg_fishing_notice_bullet_trace& msg_fishing_notice_bullet_trace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishing_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_fishing_notice_bullet_trace* msg_fishing_notice_bullet_trace::default_instance_ = NULL;

msg_fishing_notice_bullet_trace* msg_fishing_notice_bullet_trace::New() const {
  return new msg_fishing_notice_bullet_trace;
}

void msg_fishing_notice_bullet_trace::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0u;
    fish_no_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_fishing_notice_bullet_trace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fish_no;
        break;
      }

      // optional uint32 fish_no = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fish_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fish_no_)));
          set_has_fish_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_fishing_notice_bullet_trace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seat_id(), output);
  }

  // optional uint32 fish_no = 2;
  if (has_fish_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fish_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_fishing_notice_bullet_trace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seat_id(), target);
  }

  // optional uint32 fish_no = 2;
  if (has_fish_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fish_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_fishing_notice_bullet_trace::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seat_id());
    }

    // optional uint32 fish_no = 2;
    if (has_fish_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fish_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_fishing_notice_bullet_trace::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_fishing_notice_bullet_trace* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_fishing_notice_bullet_trace*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_fishing_notice_bullet_trace::MergeFrom(const msg_fishing_notice_bullet_trace& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_fish_no()) {
      set_fish_no(from.fish_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_fishing_notice_bullet_trace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_fishing_notice_bullet_trace::CopyFrom(const msg_fishing_notice_bullet_trace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_fishing_notice_bullet_trace::IsInitialized() const {

  return true;
}

void msg_fishing_notice_bullet_trace::Swap(msg_fishing_notice_bullet_trace* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(fish_no_, other->fish_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_fishing_notice_bullet_trace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_fishing_notice_bullet_trace_descriptor_;
  metadata.reflection = msg_fishing_notice_bullet_trace_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_fishing_new_bullet_req::kSeatIdFieldNumber;
const int msg_fishing_new_bullet_req::kBulletIdFieldNumber;
const int msg_fishing_new_bullet_req::kBulletDirectFieldNumber;
const int msg_fishing_new_bullet_req::kBulletBotFieldNumber;
const int msg_fishing_new_bullet_req::kFishNoFieldNumber;
const int msg_fishing_new_bullet_req::kPosXFieldNumber;
const int msg_fishing_new_bullet_req::kPosYFieldNumber;
#endif  // !_MSC_VER

msg_fishing_new_bullet_req::msg_fishing_new_bullet_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_fishing_new_bullet_req::InitAsDefaultInstance() {
}

msg_fishing_new_bullet_req::msg_fishing_new_bullet_req(const msg_fishing_new_bullet_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_fishing_new_bullet_req::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0u;
  bullet_id_ = 0u;
  bullet_direct_ = 0;
  bullet_bot_ = 0u;
  fish_no_ = 0u;
  pos_x_ = 0;
  pos_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_fishing_new_bullet_req::~msg_fishing_new_bullet_req() {
  SharedDtor();
}

void msg_fishing_new_bullet_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_fishing_new_bullet_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_fishing_new_bullet_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_fishing_new_bullet_req_descriptor_;
}

const msg_fishing_new_bullet_req& msg_fishing_new_bullet_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishing_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_fishing_new_bullet_req* msg_fishing_new_bullet_req::default_instance_ = NULL;

msg_fishing_new_bullet_req* msg_fishing_new_bullet_req::New() const {
  return new msg_fishing_new_bullet_req;
}

void msg_fishing_new_bullet_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0u;
    bullet_id_ = 0u;
    bullet_direct_ = 0;
    bullet_bot_ = 0u;
    fish_no_ = 0u;
    pos_x_ = 0;
    pos_y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_fishing_new_bullet_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bullet_id;
        break;
      }

      // optional uint32 bullet_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bullet_id_)));
          set_has_bullet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bullet_direct;
        break;
      }

      // optional int32 bullet_direct = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullet_direct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bullet_direct_)));
          set_has_bullet_direct();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bullet_bot;
        break;
      }

      // optional uint32 bullet_bot = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullet_bot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bullet_bot_)));
          set_has_bullet_bot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fish_no;
        break;
      }

      // optional uint32 fish_no = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fish_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fish_no_)));
          set_has_fish_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_pos_x;
        break;
      }

      // optional int32 pos_x = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_x_)));
          set_has_pos_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_pos_y;
        break;
      }

      // optional int32 pos_y = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_y_)));
          set_has_pos_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_fishing_new_bullet_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seat_id(), output);
  }

  // optional uint32 bullet_id = 2;
  if (has_bullet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bullet_id(), output);
  }

  // optional int32 bullet_direct = 3;
  if (has_bullet_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bullet_direct(), output);
  }

  // optional uint32 bullet_bot = 4;
  if (has_bullet_bot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bullet_bot(), output);
  }

  // optional uint32 fish_no = 5;
  if (has_fish_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->fish_no(), output);
  }

  // optional int32 pos_x = 6;
  if (has_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->pos_x(), output);
  }

  // optional int32 pos_y = 7;
  if (has_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->pos_y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_fishing_new_bullet_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seat_id(), target);
  }

  // optional uint32 bullet_id = 2;
  if (has_bullet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bullet_id(), target);
  }

  // optional int32 bullet_direct = 3;
  if (has_bullet_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bullet_direct(), target);
  }

  // optional uint32 bullet_bot = 4;
  if (has_bullet_bot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bullet_bot(), target);
  }

  // optional uint32 fish_no = 5;
  if (has_fish_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->fish_no(), target);
  }

  // optional int32 pos_x = 6;
  if (has_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->pos_x(), target);
  }

  // optional int32 pos_y = 7;
  if (has_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->pos_y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_fishing_new_bullet_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seat_id());
    }

    // optional uint32 bullet_id = 2;
    if (has_bullet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bullet_id());
    }

    // optional int32 bullet_direct = 3;
    if (has_bullet_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bullet_direct());
    }

    // optional uint32 bullet_bot = 4;
    if (has_bullet_bot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bullet_bot());
    }

    // optional uint32 fish_no = 5;
    if (has_fish_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fish_no());
    }

    // optional int32 pos_x = 6;
    if (has_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_x());
    }

    // optional int32 pos_y = 7;
    if (has_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_fishing_new_bullet_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_fishing_new_bullet_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_fishing_new_bullet_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_fishing_new_bullet_req::MergeFrom(const msg_fishing_new_bullet_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_bullet_id()) {
      set_bullet_id(from.bullet_id());
    }
    if (from.has_bullet_direct()) {
      set_bullet_direct(from.bullet_direct());
    }
    if (from.has_bullet_bot()) {
      set_bullet_bot(from.bullet_bot());
    }
    if (from.has_fish_no()) {
      set_fish_no(from.fish_no());
    }
    if (from.has_pos_x()) {
      set_pos_x(from.pos_x());
    }
    if (from.has_pos_y()) {
      set_pos_y(from.pos_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_fishing_new_bullet_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_fishing_new_bullet_req::CopyFrom(const msg_fishing_new_bullet_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_fishing_new_bullet_req::IsInitialized() const {

  return true;
}

void msg_fishing_new_bullet_req::Swap(msg_fishing_new_bullet_req* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(bullet_id_, other->bullet_id_);
    std::swap(bullet_direct_, other->bullet_direct_);
    std::swap(bullet_bot_, other->bullet_bot_);
    std::swap(fish_no_, other->fish_no_);
    std::swap(pos_x_, other->pos_x_);
    std::swap(pos_y_, other->pos_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_fishing_new_bullet_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_fishing_new_bullet_req_descriptor_;
  metadata.reflection = msg_fishing_new_bullet_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_fishing_notice_new_bullet::kSeatIdFieldNumber;
const int msg_fishing_notice_new_bullet::kBulletIdFieldNumber;
const int msg_fishing_notice_new_bullet::kBulletDirectFieldNumber;
const int msg_fishing_notice_new_bullet::kBulletBotFieldNumber;
const int msg_fishing_notice_new_bullet::kFishNoFieldNumber;
const int msg_fishing_notice_new_bullet::kPosXFieldNumber;
const int msg_fishing_notice_new_bullet::kPosYFieldNumber;
#endif  // !_MSC_VER

msg_fishing_notice_new_bullet::msg_fishing_notice_new_bullet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_fishing_notice_new_bullet::InitAsDefaultInstance() {
}

msg_fishing_notice_new_bullet::msg_fishing_notice_new_bullet(const msg_fishing_notice_new_bullet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_fishing_notice_new_bullet::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0u;
  bullet_id_ = 0u;
  bullet_direct_ = 0;
  bullet_bot_ = 0u;
  fish_no_ = 0u;
  pos_x_ = 0;
  pos_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_fishing_notice_new_bullet::~msg_fishing_notice_new_bullet() {
  SharedDtor();
}

void msg_fishing_notice_new_bullet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_fishing_notice_new_bullet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_fishing_notice_new_bullet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_fishing_notice_new_bullet_descriptor_;
}

const msg_fishing_notice_new_bullet& msg_fishing_notice_new_bullet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fishing_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_fishing_notice_new_bullet* msg_fishing_notice_new_bullet::default_instance_ = NULL;

msg_fishing_notice_new_bullet* msg_fishing_notice_new_bullet::New() const {
  return new msg_fishing_notice_new_bullet;
}

void msg_fishing_notice_new_bullet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0u;
    bullet_id_ = 0u;
    bullet_direct_ = 0;
    bullet_bot_ = 0u;
    fish_no_ = 0u;
    pos_x_ = 0;
    pos_y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_fishing_notice_new_bullet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bullet_id;
        break;
      }

      // optional uint32 bullet_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bullet_id_)));
          set_has_bullet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bullet_direct;
        break;
      }

      // optional int32 bullet_direct = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullet_direct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bullet_direct_)));
          set_has_bullet_direct();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bullet_bot;
        break;
      }

      // optional uint32 bullet_bot = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bullet_bot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bullet_bot_)));
          set_has_bullet_bot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fish_no;
        break;
      }

      // optional uint32 fish_no = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fish_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fish_no_)));
          set_has_fish_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_pos_x;
        break;
      }

      // optional int32 pos_x = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_x_)));
          set_has_pos_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_pos_y;
        break;
      }

      // optional int32 pos_y = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_y_)));
          set_has_pos_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_fishing_notice_new_bullet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seat_id(), output);
  }

  // optional uint32 bullet_id = 2;
  if (has_bullet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bullet_id(), output);
  }

  // optional int32 bullet_direct = 3;
  if (has_bullet_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bullet_direct(), output);
  }

  // optional uint32 bullet_bot = 4;
  if (has_bullet_bot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bullet_bot(), output);
  }

  // optional uint32 fish_no = 5;
  if (has_fish_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->fish_no(), output);
  }

  // optional int32 pos_x = 6;
  if (has_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->pos_x(), output);
  }

  // optional int32 pos_y = 7;
  if (has_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->pos_y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_fishing_notice_new_bullet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seat_id(), target);
  }

  // optional uint32 bullet_id = 2;
  if (has_bullet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bullet_id(), target);
  }

  // optional int32 bullet_direct = 3;
  if (has_bullet_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bullet_direct(), target);
  }

  // optional uint32 bullet_bot = 4;
  if (has_bullet_bot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bullet_bot(), target);
  }

  // optional uint32 fish_no = 5;
  if (has_fish_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->fish_no(), target);
  }

  // optional int32 pos_x = 6;
  if (has_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->pos_x(), target);
  }

  // optional int32 pos_y = 7;
  if (has_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->pos_y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_fishing_notice_new_bullet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seat_id());
    }

    // optional uint32 bullet_id = 2;
    if (has_bullet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bullet_id());
    }

    // optional int32 bullet_direct = 3;
    if (has_bullet_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bullet_direct());
    }

    // optional uint32 bullet_bot = 4;
    if (has_bullet_bot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bullet_bot());
    }

    // optional uint32 fish_no = 5;
    if (has_fish_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fish_no());
    }

    // optional int32 pos_x = 6;
    if (has_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_x());
    }

    // optional int32 pos_y = 7;
    if (has_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_fishing_notice_new_bullet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_fishing_notice_new_bullet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_fishing_notice_new_bullet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_fishing_notice_new_bullet::MergeFrom(const msg_fishing_notice_new_bullet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_bullet_id()) {
      set_bullet_id(from.bullet_id());
    }
    if (from.has_bullet_direct()) {
      set_bullet_direct(from.bullet_direct());
    }
    if (from.has_bullet_bot()) {
      set_bullet_bot(from.bullet_bot());
    }
    if (from.has_fish_no()) {
      set_fish_no(from.fish_no());
    }
    if (from.has_pos_x()) {
      set_pos_x(from.pos_x());
    }
    if (from.has_pos_y()) {
      set_pos_y(from.pos_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_fishing_notice_new_bullet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_fishing_notice_new_bullet::CopyFrom(const msg_fishing_notice_new_bullet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_fishing_notice_new_bullet::IsInitialized() const {

  return true;
}

void msg_fishing_notice_new_bullet::Swap(msg_fishing_notice_new_bullet* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(bullet_id_, other->bullet_id_);
    std::swap(bullet_direct_, other->bullet_direct_);
    std::swap(bullet_bot_, other->bullet_bot_);
    std::swap(fish_no_, other->fish_no_);
    std::swap(pos_x_, other->pos_x_);
    std::swap(pos_y_, other->pos_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_fishing_notice_new_bullet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_fishing_notice_new_bullet_descriptor_;
  metadata.reflection = msg_fishing_notice_new_bullet_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace net

// @@protoc_insertion_point(global_scope)
