// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: everycolor_logic_msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "everycolor_logic_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace net {

namespace {

const ::google::protobuf::Descriptor* msg_enter_every_color_gamesvr_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_enter_every_color_gamesvr_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_enter_every_color_gamesvr_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_enter_every_color_gamesvr_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_leave_every_color_gamesvr_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_leave_every_color_gamesvr_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_leave_every_color_gamesvr_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_leave_every_color_gamesvr_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_everycolor_game_info_play_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_everycolor_game_info_play_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_everycolor_game_info_snatch_coin_enter_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_everycolor_game_info_snatch_coin_enter_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_everycolor_game_info_snatch_coin_enter_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_everycolor_game_info_snatch_coin_enter_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_everycolor_start_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_everycolor_start_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_everycolor_snatch_coin_start_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_everycolor_snatch_coin_start_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_everycolor_place_jetton_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_everycolor_place_jetton_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_everycolor_place_jetton_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_everycolor_place_jetton_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_everycolor_place_jetton_broadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_everycolor_place_jetton_broadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_everycolor_snatch_coin_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_everycolor_snatch_coin_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_everycolor_snatch_coin_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_everycolor_snatch_coin_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_everycolor_snatch_coin_broadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_everycolor_snatch_coin_broadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_everycolor_send_card_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_everycolor_send_card_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_everycolor_game_end_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_everycolor_game_end_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_everycolor_snatch_coin_game_status_rep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_everycolor_snatch_coin_game_status_rep_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_everycolor_snatch_coin_game_end_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_everycolor_snatch_coin_game_end_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_everycolor_snatch_coin_state_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_everycolor_snatch_coin_state_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_everycolor_5flogic_5fmsg_2eproto() {
  protobuf_AddDesc_everycolor_5flogic_5fmsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "everycolor_logic_msg.proto");
  GOOGLE_CHECK(file != NULL);
  msg_enter_every_color_gamesvr_req_descriptor_ = file->message_type(0);
  static const int msg_enter_every_color_gamesvr_req_offsets_[1] = {
  };
  msg_enter_every_color_gamesvr_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_enter_every_color_gamesvr_req_descriptor_,
      msg_enter_every_color_gamesvr_req::default_instance_,
      msg_enter_every_color_gamesvr_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_every_color_gamesvr_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_every_color_gamesvr_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_enter_every_color_gamesvr_req));
  msg_enter_every_color_gamesvr_rep_descriptor_ = file->message_type(1);
  static const int msg_enter_every_color_gamesvr_rep_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_every_color_gamesvr_rep, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_every_color_gamesvr_rep, svrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_every_color_gamesvr_rep, min_score_),
  };
  msg_enter_every_color_gamesvr_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_enter_every_color_gamesvr_rep_descriptor_,
      msg_enter_every_color_gamesvr_rep::default_instance_,
      msg_enter_every_color_gamesvr_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_every_color_gamesvr_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_enter_every_color_gamesvr_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_enter_every_color_gamesvr_rep));
  msg_leave_every_color_gamesvr_req_descriptor_ = file->message_type(2);
  static const int msg_leave_every_color_gamesvr_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_leave_every_color_gamesvr_req, svrid_),
  };
  msg_leave_every_color_gamesvr_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_leave_every_color_gamesvr_req_descriptor_,
      msg_leave_every_color_gamesvr_req::default_instance_,
      msg_leave_every_color_gamesvr_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_leave_every_color_gamesvr_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_leave_every_color_gamesvr_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_leave_every_color_gamesvr_req));
  msg_leave_every_color_gamesvr_rep_descriptor_ = file->message_type(3);
  static const int msg_leave_every_color_gamesvr_rep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_leave_every_color_gamesvr_rep, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_leave_every_color_gamesvr_rep, svrid_),
  };
  msg_leave_every_color_gamesvr_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_leave_every_color_gamesvr_rep_descriptor_,
      msg_leave_every_color_gamesvr_rep::default_instance_,
      msg_leave_every_color_gamesvr_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_leave_every_color_gamesvr_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_leave_every_color_gamesvr_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_leave_every_color_gamesvr_rep));
  msg_everycolor_game_info_play_rep_descriptor_ = file->message_type(4);
  static const int msg_everycolor_game_info_play_rep_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_game_info_play_rep, periods_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_game_info_play_rep, time_leave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_game_info_play_rep, table_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_game_info_play_rep, game_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_game_info_play_rep, self_jetton_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_game_info_play_rep, total_jetton_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_game_info_play_rep, win_score_flower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_game_info_play_rep, win_score_bigsmall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_game_info_play_rep, area_multiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_game_info_play_rep, basescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_game_info_play_rep, snatch_coin_stop_),
  };
  msg_everycolor_game_info_play_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_everycolor_game_info_play_rep_descriptor_,
      msg_everycolor_game_info_play_rep::default_instance_,
      msg_everycolor_game_info_play_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_game_info_play_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_game_info_play_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_everycolor_game_info_play_rep));
  msg_everycolor_game_info_snatch_coin_enter_req_descriptor_ = file->message_type(5);
  static const int msg_everycolor_game_info_snatch_coin_enter_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_game_info_snatch_coin_enter_req, snatch_type_),
  };
  msg_everycolor_game_info_snatch_coin_enter_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_everycolor_game_info_snatch_coin_enter_req_descriptor_,
      msg_everycolor_game_info_snatch_coin_enter_req::default_instance_,
      msg_everycolor_game_info_snatch_coin_enter_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_game_info_snatch_coin_enter_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_game_info_snatch_coin_enter_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_everycolor_game_info_snatch_coin_enter_req));
  msg_everycolor_game_info_snatch_coin_enter_rep_descriptor_ = file->message_type(6);
  static const int msg_everycolor_game_info_snatch_coin_enter_rep_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_game_info_snatch_coin_enter_rep, snatch_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_game_info_snatch_coin_enter_rep, periods_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_game_info_snatch_coin_enter_rep, game_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_game_info_snatch_coin_enter_rep, residue_card_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_game_info_snatch_coin_enter_rep, card_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_game_info_snatch_coin_enter_rep, time_leave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_game_info_snatch_coin_enter_rep, win_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_game_info_snatch_coin_enter_rep, win_score_),
  };
  msg_everycolor_game_info_snatch_coin_enter_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_everycolor_game_info_snatch_coin_enter_rep_descriptor_,
      msg_everycolor_game_info_snatch_coin_enter_rep::default_instance_,
      msg_everycolor_game_info_snatch_coin_enter_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_game_info_snatch_coin_enter_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_game_info_snatch_coin_enter_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_everycolor_game_info_snatch_coin_enter_rep));
  msg_everycolor_start_rep_descriptor_ = file->message_type(7);
  static const int msg_everycolor_start_rep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_start_rep, periods_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_start_rep, time_leave_),
  };
  msg_everycolor_start_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_everycolor_start_rep_descriptor_,
      msg_everycolor_start_rep::default_instance_,
      msg_everycolor_start_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_start_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_start_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_everycolor_start_rep));
  msg_everycolor_snatch_coin_start_rep_descriptor_ = file->message_type(8);
  static const int msg_everycolor_snatch_coin_start_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_snatch_coin_start_rep, periods_num_),
  };
  msg_everycolor_snatch_coin_start_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_everycolor_snatch_coin_start_rep_descriptor_,
      msg_everycolor_snatch_coin_start_rep::default_instance_,
      msg_everycolor_snatch_coin_start_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_snatch_coin_start_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_snatch_coin_start_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_everycolor_snatch_coin_start_rep));
  msg_everycolor_place_jetton_req_descriptor_ = file->message_type(9);
  static const int msg_everycolor_place_jetton_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_place_jetton_req, jetton_area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_place_jetton_req, jetton_score_),
  };
  msg_everycolor_place_jetton_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_everycolor_place_jetton_req_descriptor_,
      msg_everycolor_place_jetton_req::default_instance_,
      msg_everycolor_place_jetton_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_place_jetton_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_place_jetton_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_everycolor_place_jetton_req));
  msg_everycolor_place_jetton_rep_descriptor_ = file->message_type(10);
  static const int msg_everycolor_place_jetton_rep_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_place_jetton_rep, jetton_area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_place_jetton_rep, jetton_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_place_jetton_rep, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_place_jetton_rep, self_jetton_score_),
  };
  msg_everycolor_place_jetton_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_everycolor_place_jetton_rep_descriptor_,
      msg_everycolor_place_jetton_rep::default_instance_,
      msg_everycolor_place_jetton_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_place_jetton_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_place_jetton_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_everycolor_place_jetton_rep));
  msg_everycolor_place_jetton_broadcast_descriptor_ = file->message_type(11);
  static const int msg_everycolor_place_jetton_broadcast_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_place_jetton_broadcast, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_place_jetton_broadcast, jetton_area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_place_jetton_broadcast, jetton_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_place_jetton_broadcast, total_jetton_score_),
  };
  msg_everycolor_place_jetton_broadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_everycolor_place_jetton_broadcast_descriptor_,
      msg_everycolor_place_jetton_broadcast::default_instance_,
      msg_everycolor_place_jetton_broadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_place_jetton_broadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_place_jetton_broadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_everycolor_place_jetton_broadcast));
  msg_everycolor_snatch_coin_req_descriptor_ = file->message_type(12);
  static const int msg_everycolor_snatch_coin_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_snatch_coin_req, snatch_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_snatch_coin_req, snatch_count_),
  };
  msg_everycolor_snatch_coin_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_everycolor_snatch_coin_req_descriptor_,
      msg_everycolor_snatch_coin_req::default_instance_,
      msg_everycolor_snatch_coin_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_snatch_coin_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_snatch_coin_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_everycolor_snatch_coin_req));
  msg_everycolor_snatch_coin_rep_descriptor_ = file->message_type(13);
  static const int msg_everycolor_snatch_coin_rep_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_snatch_coin_rep, snatch_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_snatch_coin_rep, snatch_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_snatch_coin_rep, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_snatch_coin_rep, self_total_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_snatch_coin_rep, self_snatch_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_snatch_coin_rep, residue_card_count_),
  };
  msg_everycolor_snatch_coin_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_everycolor_snatch_coin_rep_descriptor_,
      msg_everycolor_snatch_coin_rep::default_instance_,
      msg_everycolor_snatch_coin_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_snatch_coin_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_snatch_coin_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_everycolor_snatch_coin_rep));
  msg_everycolor_snatch_coin_broadcast_descriptor_ = file->message_type(14);
  static const int msg_everycolor_snatch_coin_broadcast_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_snatch_coin_broadcast, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_snatch_coin_broadcast, snatch_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_snatch_coin_broadcast, snatch_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_snatch_coin_broadcast, total_snatch_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_snatch_coin_broadcast, total_snatch_card_),
  };
  msg_everycolor_snatch_coin_broadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_everycolor_snatch_coin_broadcast_descriptor_,
      msg_everycolor_snatch_coin_broadcast::default_instance_,
      msg_everycolor_snatch_coin_broadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_snatch_coin_broadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_snatch_coin_broadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_everycolor_snatch_coin_broadcast));
  msg_everycolor_send_card_rep_descriptor_ = file->message_type(15);
  static const int msg_everycolor_send_card_rep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_send_card_rep, cards_),
  };
  msg_everycolor_send_card_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_everycolor_send_card_rep_descriptor_,
      msg_everycolor_send_card_rep::default_instance_,
      msg_everycolor_send_card_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_send_card_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_send_card_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_everycolor_send_card_rep));
  msg_everycolor_game_end_descriptor_ = file->message_type(16);
  static const int msg_everycolor_game_end_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_game_end, table_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_game_end, win_score_flower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_game_end, win_score_bigsmall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_game_end, time_leave_),
  };
  msg_everycolor_game_end_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_everycolor_game_end_descriptor_,
      msg_everycolor_game_end::default_instance_,
      msg_everycolor_game_end_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_game_end, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_game_end, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_everycolor_game_end));
  msg_everycolor_snatch_coin_game_status_rep_descriptor_ = file->message_type(17);
  static const int msg_everycolor_snatch_coin_game_status_rep_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_snatch_coin_game_status_rep, snatch_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_snatch_coin_game_status_rep, game_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_snatch_coin_game_status_rep, time_leave_),
  };
  msg_everycolor_snatch_coin_game_status_rep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_everycolor_snatch_coin_game_status_rep_descriptor_,
      msg_everycolor_snatch_coin_game_status_rep::default_instance_,
      msg_everycolor_snatch_coin_game_status_rep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_snatch_coin_game_status_rep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_snatch_coin_game_status_rep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_everycolor_snatch_coin_game_status_rep));
  msg_everycolor_snatch_coin_game_end_descriptor_ = file->message_type(18);
  static const int msg_everycolor_snatch_coin_game_end_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_snatch_coin_game_end, snatch_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_snatch_coin_game_end, table_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_snatch_coin_game_end, win_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_snatch_coin_game_end, win_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_snatch_coin_game_end, periods_num_),
  };
  msg_everycolor_snatch_coin_game_end_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_everycolor_snatch_coin_game_end_descriptor_,
      msg_everycolor_snatch_coin_game_end::default_instance_,
      msg_everycolor_snatch_coin_game_end_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_snatch_coin_game_end, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_snatch_coin_game_end, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_everycolor_snatch_coin_game_end));
  msg_everycolor_snatch_coin_state_descriptor_ = file->message_type(19);
  static const int msg_everycolor_snatch_coin_state_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_snatch_coin_state, stop_state_),
  };
  msg_everycolor_snatch_coin_state_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_everycolor_snatch_coin_state_descriptor_,
      msg_everycolor_snatch_coin_state::default_instance_,
      msg_everycolor_snatch_coin_state_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_snatch_coin_state, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_everycolor_snatch_coin_state, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_everycolor_snatch_coin_state));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_everycolor_5flogic_5fmsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_enter_every_color_gamesvr_req_descriptor_, &msg_enter_every_color_gamesvr_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_enter_every_color_gamesvr_rep_descriptor_, &msg_enter_every_color_gamesvr_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_leave_every_color_gamesvr_req_descriptor_, &msg_leave_every_color_gamesvr_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_leave_every_color_gamesvr_rep_descriptor_, &msg_leave_every_color_gamesvr_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_everycolor_game_info_play_rep_descriptor_, &msg_everycolor_game_info_play_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_everycolor_game_info_snatch_coin_enter_req_descriptor_, &msg_everycolor_game_info_snatch_coin_enter_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_everycolor_game_info_snatch_coin_enter_rep_descriptor_, &msg_everycolor_game_info_snatch_coin_enter_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_everycolor_start_rep_descriptor_, &msg_everycolor_start_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_everycolor_snatch_coin_start_rep_descriptor_, &msg_everycolor_snatch_coin_start_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_everycolor_place_jetton_req_descriptor_, &msg_everycolor_place_jetton_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_everycolor_place_jetton_rep_descriptor_, &msg_everycolor_place_jetton_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_everycolor_place_jetton_broadcast_descriptor_, &msg_everycolor_place_jetton_broadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_everycolor_snatch_coin_req_descriptor_, &msg_everycolor_snatch_coin_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_everycolor_snatch_coin_rep_descriptor_, &msg_everycolor_snatch_coin_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_everycolor_snatch_coin_broadcast_descriptor_, &msg_everycolor_snatch_coin_broadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_everycolor_send_card_rep_descriptor_, &msg_everycolor_send_card_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_everycolor_game_end_descriptor_, &msg_everycolor_game_end::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_everycolor_snatch_coin_game_status_rep_descriptor_, &msg_everycolor_snatch_coin_game_status_rep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_everycolor_snatch_coin_game_end_descriptor_, &msg_everycolor_snatch_coin_game_end::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_everycolor_snatch_coin_state_descriptor_, &msg_everycolor_snatch_coin_state::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_everycolor_5flogic_5fmsg_2eproto() {
  delete msg_enter_every_color_gamesvr_req::default_instance_;
  delete msg_enter_every_color_gamesvr_req_reflection_;
  delete msg_enter_every_color_gamesvr_rep::default_instance_;
  delete msg_enter_every_color_gamesvr_rep_reflection_;
  delete msg_leave_every_color_gamesvr_req::default_instance_;
  delete msg_leave_every_color_gamesvr_req_reflection_;
  delete msg_leave_every_color_gamesvr_rep::default_instance_;
  delete msg_leave_every_color_gamesvr_rep_reflection_;
  delete msg_everycolor_game_info_play_rep::default_instance_;
  delete msg_everycolor_game_info_play_rep_reflection_;
  delete msg_everycolor_game_info_snatch_coin_enter_req::default_instance_;
  delete msg_everycolor_game_info_snatch_coin_enter_req_reflection_;
  delete msg_everycolor_game_info_snatch_coin_enter_rep::default_instance_;
  delete msg_everycolor_game_info_snatch_coin_enter_rep_reflection_;
  delete msg_everycolor_start_rep::default_instance_;
  delete msg_everycolor_start_rep_reflection_;
  delete msg_everycolor_snatch_coin_start_rep::default_instance_;
  delete msg_everycolor_snatch_coin_start_rep_reflection_;
  delete msg_everycolor_place_jetton_req::default_instance_;
  delete msg_everycolor_place_jetton_req_reflection_;
  delete msg_everycolor_place_jetton_rep::default_instance_;
  delete msg_everycolor_place_jetton_rep_reflection_;
  delete msg_everycolor_place_jetton_broadcast::default_instance_;
  delete msg_everycolor_place_jetton_broadcast_reflection_;
  delete msg_everycolor_snatch_coin_req::default_instance_;
  delete msg_everycolor_snatch_coin_req_reflection_;
  delete msg_everycolor_snatch_coin_rep::default_instance_;
  delete msg_everycolor_snatch_coin_rep_reflection_;
  delete msg_everycolor_snatch_coin_broadcast::default_instance_;
  delete msg_everycolor_snatch_coin_broadcast_reflection_;
  delete msg_everycolor_send_card_rep::default_instance_;
  delete msg_everycolor_send_card_rep_reflection_;
  delete msg_everycolor_game_end::default_instance_;
  delete msg_everycolor_game_end_reflection_;
  delete msg_everycolor_snatch_coin_game_status_rep::default_instance_;
  delete msg_everycolor_snatch_coin_game_status_rep_reflection_;
  delete msg_everycolor_snatch_coin_game_end::default_instance_;
  delete msg_everycolor_snatch_coin_game_end_reflection_;
  delete msg_everycolor_snatch_coin_state::default_instance_;
  delete msg_everycolor_snatch_coin_state_reflection_;
}

void protobuf_AddDesc_everycolor_5flogic_5fmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::net::protobuf_AddDesc_base_5fmsg_5fstruct_2eproto();
  ::net::protobuf_AddDesc_error_5fcode_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032everycolor_logic_msg.proto\022\003net\032\025base_"
    "msg_struct.proto\032\020error_code.proto\"#\n!ms"
    "g_enter_every_color_gamesvr_req\"U\n!msg_e"
    "nter_every_color_gamesvr_rep\022\016\n\006result\030\001"
    " \001(\r\022\r\n\005svrid\030\002 \001(\r\022\021\n\tmin_score\030\003 \001(\r\"2"
    "\n!msg_leave_every_color_gamesvr_req\022\r\n\005s"
    "vrid\030\001 \001(\r\"B\n!msg_leave_every_color_game"
    "svr_rep\022\016\n\006result\030\001 \001(\r\022\r\n\005svrid\030\002 \001(\r\"\247"
    "\002\n!msg_everycolor_game_info_play_rep\022\023\n\013"
    "periods_num\030\001 \001(\014\022\022\n\ntime_leave\030\002 \001(\r\022\023\n"
    "\013table_cards\030\003 \001(\r\022\023\n\013game_status\030\004 \001(\r\022"
    "\031\n\021self_jetton_score\030\005 \003(\003\022\032\n\022total_jett"
    "on_score\030\006 \003(\003\022\030\n\020win_score_flower\030\007 \001(\003"
    "\022\032\n\022win_score_bigsmall\030\010 \001(\003\022\025\n\rarea_mul"
    "tiple\030\t \003(\r\022\021\n\tbasescore\030\n \001(\003\022\030\n\020snatch"
    "_coin_stop\030\013 \001(\r\"E\n.msg_everycolor_game_"
    "info_snatch_coin_enter_req\022\023\n\013snatch_typ"
    "e\030\001 \001(\r\"\326\001\n.msg_everycolor_game_info_sna"
    "tch_coin_enter_rep\022\023\n\013snatch_type\030\001 \001(\r\022"
    "\023\n\013periods_num\030\002 \001(\014\022\023\n\013game_status\030\003 \001("
    "\r\022\032\n\022residue_card_count\030\004 \001(\r\022\021\n\tcard_da"
    "ta\030\005 \003(\r\022\022\n\ntime_leave\030\006 \001(\r\022\017\n\007win_uid\030"
    "\007 \001(\r\022\021\n\twin_score\030\010 \001(\003\"C\n\030msg_everycol"
    "or_start_rep\022\023\n\013periods_num\030\001 \001(\014\022\022\n\ntim"
    "e_leave\030\002 \001(\r\";\n$msg_everycolor_snatch_c"
    "oin_start_rep\022\023\n\013periods_num\030\001 \001(\014\"L\n\037ms"
    "g_everycolor_place_jetton_req\022\023\n\013jetton_"
    "area\030\001 \001(\r\022\024\n\014jetton_score\030\002 \001(\003\"w\n\037msg_"
    "everycolor_place_jetton_rep\022\023\n\013jetton_ar"
    "ea\030\001 \001(\r\022\024\n\014jetton_score\030\002 \001(\003\022\016\n\006result"
    "\030\003 \001(\r\022\031\n\021self_jetton_score\030\004 \003(\003\"{\n%msg"
    "_everycolor_place_jetton_broadcast\022\013\n\003ui"
    "d\030\001 \001(\r\022\023\n\013jetton_area\030\002 \001(\r\022\024\n\014jetton_s"
    "core\030\003 \001(\003\022\032\n\022total_jetton_score\030\004 \003(\003\"K"
    "\n\036msg_everycolor_snatch_coin_req\022\023\n\013snat"
    "ch_type\030\001 \001(\r\022\024\n\014snatch_count\030\002 \001(\r\"\253\001\n\036"
    "msg_everycolor_snatch_coin_rep\022\023\n\013snatch"
    "_type\030\001 \001(\r\022\024\n\014snatch_count\030\002 \001(\r\022\016\n\006res"
    "ult\030\003 \001(\r\022\030\n\020self_total_count\030\004 \001(\r\022\030\n\020s"
    "elf_snatch_card\030\005 \003(\r\022\032\n\022residue_card_co"
    "unt\030\006 \001(\r\"\225\001\n$msg_everycolor_snatch_coin"
    "_broadcast\022\013\n\003uid\030\001 \001(\r\022\023\n\013snatch_type\030\002"
    " \001(\r\022\024\n\014snatch_count\030\003 \001(\r\022\032\n\022total_snat"
    "ch_count\030\004 \001(\r\022\031\n\021total_snatch_card\030\005 \003("
    "\r\"-\n\034msg_everycolor_send_card_rep\022\r\n\005car"
    "ds\030\001 \003(\r\"x\n\027msg_everycolor_game_end\022\023\n\013t"
    "able_cards\030\001 \001(\r\022\030\n\020win_score_flower\030\002 \001"
    "(\003\022\032\n\022win_score_bigsmall\030\003 \001(\003\022\022\n\ntime_l"
    "eave\030\004 \001(\r\"j\n*msg_everycolor_snatch_coin"
    "_game_status_rep\022\023\n\013snatch_type\030\001 \001(\r\022\023\n"
    "\013game_status\030\002 \001(\r\022\022\n\ntime_leave\030\003 \001(\r\"\210"
    "\001\n#msg_everycolor_snatch_coin_game_end\022\023"
    "\n\013snatch_type\030\001 \001(\r\022\023\n\013table_cards\030\002 \001(\r"
    "\022\017\n\007win_uid\030\003 \001(\r\022\021\n\twin_score\030\004 \001(\003\022\023\n\013"
    "periods_num\030\005 \001(\014\"6\n msg_everycolor_snat"
    "ch_coin_state\022\022\n\nstop_state\030\001 \001(\r", 2233);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "everycolor_logic_msg.proto", &protobuf_RegisterTypes);
  msg_enter_every_color_gamesvr_req::default_instance_ = new msg_enter_every_color_gamesvr_req();
  msg_enter_every_color_gamesvr_rep::default_instance_ = new msg_enter_every_color_gamesvr_rep();
  msg_leave_every_color_gamesvr_req::default_instance_ = new msg_leave_every_color_gamesvr_req();
  msg_leave_every_color_gamesvr_rep::default_instance_ = new msg_leave_every_color_gamesvr_rep();
  msg_everycolor_game_info_play_rep::default_instance_ = new msg_everycolor_game_info_play_rep();
  msg_everycolor_game_info_snatch_coin_enter_req::default_instance_ = new msg_everycolor_game_info_snatch_coin_enter_req();
  msg_everycolor_game_info_snatch_coin_enter_rep::default_instance_ = new msg_everycolor_game_info_snatch_coin_enter_rep();
  msg_everycolor_start_rep::default_instance_ = new msg_everycolor_start_rep();
  msg_everycolor_snatch_coin_start_rep::default_instance_ = new msg_everycolor_snatch_coin_start_rep();
  msg_everycolor_place_jetton_req::default_instance_ = new msg_everycolor_place_jetton_req();
  msg_everycolor_place_jetton_rep::default_instance_ = new msg_everycolor_place_jetton_rep();
  msg_everycolor_place_jetton_broadcast::default_instance_ = new msg_everycolor_place_jetton_broadcast();
  msg_everycolor_snatch_coin_req::default_instance_ = new msg_everycolor_snatch_coin_req();
  msg_everycolor_snatch_coin_rep::default_instance_ = new msg_everycolor_snatch_coin_rep();
  msg_everycolor_snatch_coin_broadcast::default_instance_ = new msg_everycolor_snatch_coin_broadcast();
  msg_everycolor_send_card_rep::default_instance_ = new msg_everycolor_send_card_rep();
  msg_everycolor_game_end::default_instance_ = new msg_everycolor_game_end();
  msg_everycolor_snatch_coin_game_status_rep::default_instance_ = new msg_everycolor_snatch_coin_game_status_rep();
  msg_everycolor_snatch_coin_game_end::default_instance_ = new msg_everycolor_snatch_coin_game_end();
  msg_everycolor_snatch_coin_state::default_instance_ = new msg_everycolor_snatch_coin_state();
  msg_enter_every_color_gamesvr_req::default_instance_->InitAsDefaultInstance();
  msg_enter_every_color_gamesvr_rep::default_instance_->InitAsDefaultInstance();
  msg_leave_every_color_gamesvr_req::default_instance_->InitAsDefaultInstance();
  msg_leave_every_color_gamesvr_rep::default_instance_->InitAsDefaultInstance();
  msg_everycolor_game_info_play_rep::default_instance_->InitAsDefaultInstance();
  msg_everycolor_game_info_snatch_coin_enter_req::default_instance_->InitAsDefaultInstance();
  msg_everycolor_game_info_snatch_coin_enter_rep::default_instance_->InitAsDefaultInstance();
  msg_everycolor_start_rep::default_instance_->InitAsDefaultInstance();
  msg_everycolor_snatch_coin_start_rep::default_instance_->InitAsDefaultInstance();
  msg_everycolor_place_jetton_req::default_instance_->InitAsDefaultInstance();
  msg_everycolor_place_jetton_rep::default_instance_->InitAsDefaultInstance();
  msg_everycolor_place_jetton_broadcast::default_instance_->InitAsDefaultInstance();
  msg_everycolor_snatch_coin_req::default_instance_->InitAsDefaultInstance();
  msg_everycolor_snatch_coin_rep::default_instance_->InitAsDefaultInstance();
  msg_everycolor_snatch_coin_broadcast::default_instance_->InitAsDefaultInstance();
  msg_everycolor_send_card_rep::default_instance_->InitAsDefaultInstance();
  msg_everycolor_game_end::default_instance_->InitAsDefaultInstance();
  msg_everycolor_snatch_coin_game_status_rep::default_instance_->InitAsDefaultInstance();
  msg_everycolor_snatch_coin_game_end::default_instance_->InitAsDefaultInstance();
  msg_everycolor_snatch_coin_state::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_everycolor_5flogic_5fmsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_everycolor_5flogic_5fmsg_2eproto {
  StaticDescriptorInitializer_everycolor_5flogic_5fmsg_2eproto() {
    protobuf_AddDesc_everycolor_5flogic_5fmsg_2eproto();
  }
} static_descriptor_initializer_everycolor_5flogic_5fmsg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

msg_enter_every_color_gamesvr_req::msg_enter_every_color_gamesvr_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_enter_every_color_gamesvr_req::InitAsDefaultInstance() {
}

msg_enter_every_color_gamesvr_req::msg_enter_every_color_gamesvr_req(const msg_enter_every_color_gamesvr_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_enter_every_color_gamesvr_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_enter_every_color_gamesvr_req::~msg_enter_every_color_gamesvr_req() {
  SharedDtor();
}

void msg_enter_every_color_gamesvr_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_enter_every_color_gamesvr_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_enter_every_color_gamesvr_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_enter_every_color_gamesvr_req_descriptor_;
}

const msg_enter_every_color_gamesvr_req& msg_enter_every_color_gamesvr_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_everycolor_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_enter_every_color_gamesvr_req* msg_enter_every_color_gamesvr_req::default_instance_ = NULL;

msg_enter_every_color_gamesvr_req* msg_enter_every_color_gamesvr_req::New() const {
  return new msg_enter_every_color_gamesvr_req;
}

void msg_enter_every_color_gamesvr_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_enter_every_color_gamesvr_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void msg_enter_every_color_gamesvr_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_enter_every_color_gamesvr_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_enter_every_color_gamesvr_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_enter_every_color_gamesvr_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_enter_every_color_gamesvr_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_enter_every_color_gamesvr_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_enter_every_color_gamesvr_req::MergeFrom(const msg_enter_every_color_gamesvr_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_enter_every_color_gamesvr_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_enter_every_color_gamesvr_req::CopyFrom(const msg_enter_every_color_gamesvr_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_enter_every_color_gamesvr_req::IsInitialized() const {

  return true;
}

void msg_enter_every_color_gamesvr_req::Swap(msg_enter_every_color_gamesvr_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_enter_every_color_gamesvr_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_enter_every_color_gamesvr_req_descriptor_;
  metadata.reflection = msg_enter_every_color_gamesvr_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_enter_every_color_gamesvr_rep::kResultFieldNumber;
const int msg_enter_every_color_gamesvr_rep::kSvridFieldNumber;
const int msg_enter_every_color_gamesvr_rep::kMinScoreFieldNumber;
#endif  // !_MSC_VER

msg_enter_every_color_gamesvr_rep::msg_enter_every_color_gamesvr_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_enter_every_color_gamesvr_rep::InitAsDefaultInstance() {
}

msg_enter_every_color_gamesvr_rep::msg_enter_every_color_gamesvr_rep(const msg_enter_every_color_gamesvr_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_enter_every_color_gamesvr_rep::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  svrid_ = 0u;
  min_score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_enter_every_color_gamesvr_rep::~msg_enter_every_color_gamesvr_rep() {
  SharedDtor();
}

void msg_enter_every_color_gamesvr_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_enter_every_color_gamesvr_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_enter_every_color_gamesvr_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_enter_every_color_gamesvr_rep_descriptor_;
}

const msg_enter_every_color_gamesvr_rep& msg_enter_every_color_gamesvr_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_everycolor_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_enter_every_color_gamesvr_rep* msg_enter_every_color_gamesvr_rep::default_instance_ = NULL;

msg_enter_every_color_gamesvr_rep* msg_enter_every_color_gamesvr_rep::New() const {
  return new msg_enter_every_color_gamesvr_rep;
}

void msg_enter_every_color_gamesvr_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    svrid_ = 0u;
    min_score_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_enter_every_color_gamesvr_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_svrid;
        break;
      }

      // optional uint32 svrid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_svrid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svrid_)));
          set_has_svrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_min_score;
        break;
      }

      // optional uint32 min_score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_score_)));
          set_has_min_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_enter_every_color_gamesvr_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional uint32 svrid = 2;
  if (has_svrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->svrid(), output);
  }

  // optional uint32 min_score = 3;
  if (has_min_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->min_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_enter_every_color_gamesvr_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional uint32 svrid = 2;
  if (has_svrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->svrid(), target);
  }

  // optional uint32 min_score = 3;
  if (has_min_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->min_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_enter_every_color_gamesvr_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 svrid = 2;
    if (has_svrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svrid());
    }

    // optional uint32 min_score = 3;
    if (has_min_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_enter_every_color_gamesvr_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_enter_every_color_gamesvr_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_enter_every_color_gamesvr_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_enter_every_color_gamesvr_rep::MergeFrom(const msg_enter_every_color_gamesvr_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_svrid()) {
      set_svrid(from.svrid());
    }
    if (from.has_min_score()) {
      set_min_score(from.min_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_enter_every_color_gamesvr_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_enter_every_color_gamesvr_rep::CopyFrom(const msg_enter_every_color_gamesvr_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_enter_every_color_gamesvr_rep::IsInitialized() const {

  return true;
}

void msg_enter_every_color_gamesvr_rep::Swap(msg_enter_every_color_gamesvr_rep* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(svrid_, other->svrid_);
    std::swap(min_score_, other->min_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_enter_every_color_gamesvr_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_enter_every_color_gamesvr_rep_descriptor_;
  metadata.reflection = msg_enter_every_color_gamesvr_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_leave_every_color_gamesvr_req::kSvridFieldNumber;
#endif  // !_MSC_VER

msg_leave_every_color_gamesvr_req::msg_leave_every_color_gamesvr_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_leave_every_color_gamesvr_req::InitAsDefaultInstance() {
}

msg_leave_every_color_gamesvr_req::msg_leave_every_color_gamesvr_req(const msg_leave_every_color_gamesvr_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_leave_every_color_gamesvr_req::SharedCtor() {
  _cached_size_ = 0;
  svrid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_leave_every_color_gamesvr_req::~msg_leave_every_color_gamesvr_req() {
  SharedDtor();
}

void msg_leave_every_color_gamesvr_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_leave_every_color_gamesvr_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_leave_every_color_gamesvr_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_leave_every_color_gamesvr_req_descriptor_;
}

const msg_leave_every_color_gamesvr_req& msg_leave_every_color_gamesvr_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_everycolor_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_leave_every_color_gamesvr_req* msg_leave_every_color_gamesvr_req::default_instance_ = NULL;

msg_leave_every_color_gamesvr_req* msg_leave_every_color_gamesvr_req::New() const {
  return new msg_leave_every_color_gamesvr_req;
}

void msg_leave_every_color_gamesvr_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    svrid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_leave_every_color_gamesvr_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 svrid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svrid_)));
          set_has_svrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_leave_every_color_gamesvr_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 svrid = 1;
  if (has_svrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->svrid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_leave_every_color_gamesvr_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 svrid = 1;
  if (has_svrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->svrid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_leave_every_color_gamesvr_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 svrid = 1;
    if (has_svrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svrid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_leave_every_color_gamesvr_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_leave_every_color_gamesvr_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_leave_every_color_gamesvr_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_leave_every_color_gamesvr_req::MergeFrom(const msg_leave_every_color_gamesvr_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svrid()) {
      set_svrid(from.svrid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_leave_every_color_gamesvr_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_leave_every_color_gamesvr_req::CopyFrom(const msg_leave_every_color_gamesvr_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_leave_every_color_gamesvr_req::IsInitialized() const {

  return true;
}

void msg_leave_every_color_gamesvr_req::Swap(msg_leave_every_color_gamesvr_req* other) {
  if (other != this) {
    std::swap(svrid_, other->svrid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_leave_every_color_gamesvr_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_leave_every_color_gamesvr_req_descriptor_;
  metadata.reflection = msg_leave_every_color_gamesvr_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_leave_every_color_gamesvr_rep::kResultFieldNumber;
const int msg_leave_every_color_gamesvr_rep::kSvridFieldNumber;
#endif  // !_MSC_VER

msg_leave_every_color_gamesvr_rep::msg_leave_every_color_gamesvr_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_leave_every_color_gamesvr_rep::InitAsDefaultInstance() {
}

msg_leave_every_color_gamesvr_rep::msg_leave_every_color_gamesvr_rep(const msg_leave_every_color_gamesvr_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_leave_every_color_gamesvr_rep::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  svrid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_leave_every_color_gamesvr_rep::~msg_leave_every_color_gamesvr_rep() {
  SharedDtor();
}

void msg_leave_every_color_gamesvr_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_leave_every_color_gamesvr_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_leave_every_color_gamesvr_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_leave_every_color_gamesvr_rep_descriptor_;
}

const msg_leave_every_color_gamesvr_rep& msg_leave_every_color_gamesvr_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_everycolor_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_leave_every_color_gamesvr_rep* msg_leave_every_color_gamesvr_rep::default_instance_ = NULL;

msg_leave_every_color_gamesvr_rep* msg_leave_every_color_gamesvr_rep::New() const {
  return new msg_leave_every_color_gamesvr_rep;
}

void msg_leave_every_color_gamesvr_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    svrid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_leave_every_color_gamesvr_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_svrid;
        break;
      }

      // optional uint32 svrid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_svrid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svrid_)));
          set_has_svrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_leave_every_color_gamesvr_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional uint32 svrid = 2;
  if (has_svrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->svrid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_leave_every_color_gamesvr_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional uint32 svrid = 2;
  if (has_svrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->svrid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_leave_every_color_gamesvr_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 svrid = 2;
    if (has_svrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svrid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_leave_every_color_gamesvr_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_leave_every_color_gamesvr_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_leave_every_color_gamesvr_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_leave_every_color_gamesvr_rep::MergeFrom(const msg_leave_every_color_gamesvr_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_svrid()) {
      set_svrid(from.svrid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_leave_every_color_gamesvr_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_leave_every_color_gamesvr_rep::CopyFrom(const msg_leave_every_color_gamesvr_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_leave_every_color_gamesvr_rep::IsInitialized() const {

  return true;
}

void msg_leave_every_color_gamesvr_rep::Swap(msg_leave_every_color_gamesvr_rep* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(svrid_, other->svrid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_leave_every_color_gamesvr_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_leave_every_color_gamesvr_rep_descriptor_;
  metadata.reflection = msg_leave_every_color_gamesvr_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_everycolor_game_info_play_rep::kPeriodsNumFieldNumber;
const int msg_everycolor_game_info_play_rep::kTimeLeaveFieldNumber;
const int msg_everycolor_game_info_play_rep::kTableCardsFieldNumber;
const int msg_everycolor_game_info_play_rep::kGameStatusFieldNumber;
const int msg_everycolor_game_info_play_rep::kSelfJettonScoreFieldNumber;
const int msg_everycolor_game_info_play_rep::kTotalJettonScoreFieldNumber;
const int msg_everycolor_game_info_play_rep::kWinScoreFlowerFieldNumber;
const int msg_everycolor_game_info_play_rep::kWinScoreBigsmallFieldNumber;
const int msg_everycolor_game_info_play_rep::kAreaMultipleFieldNumber;
const int msg_everycolor_game_info_play_rep::kBasescoreFieldNumber;
const int msg_everycolor_game_info_play_rep::kSnatchCoinStopFieldNumber;
#endif  // !_MSC_VER

msg_everycolor_game_info_play_rep::msg_everycolor_game_info_play_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_everycolor_game_info_play_rep::InitAsDefaultInstance() {
}

msg_everycolor_game_info_play_rep::msg_everycolor_game_info_play_rep(const msg_everycolor_game_info_play_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_everycolor_game_info_play_rep::SharedCtor() {
  _cached_size_ = 0;
  periods_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_leave_ = 0u;
  table_cards_ = 0u;
  game_status_ = 0u;
  win_score_flower_ = GOOGLE_LONGLONG(0);
  win_score_bigsmall_ = GOOGLE_LONGLONG(0);
  basescore_ = GOOGLE_LONGLONG(0);
  snatch_coin_stop_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_everycolor_game_info_play_rep::~msg_everycolor_game_info_play_rep() {
  SharedDtor();
}

void msg_everycolor_game_info_play_rep::SharedDtor() {
  if (periods_num_ != &::google::protobuf::internal::kEmptyString) {
    delete periods_num_;
  }
  if (this != default_instance_) {
  }
}

void msg_everycolor_game_info_play_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_everycolor_game_info_play_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_everycolor_game_info_play_rep_descriptor_;
}

const msg_everycolor_game_info_play_rep& msg_everycolor_game_info_play_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_everycolor_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_everycolor_game_info_play_rep* msg_everycolor_game_info_play_rep::default_instance_ = NULL;

msg_everycolor_game_info_play_rep* msg_everycolor_game_info_play_rep::New() const {
  return new msg_everycolor_game_info_play_rep;
}

void msg_everycolor_game_info_play_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_periods_num()) {
      if (periods_num_ != &::google::protobuf::internal::kEmptyString) {
        periods_num_->clear();
      }
    }
    time_leave_ = 0u;
    table_cards_ = 0u;
    game_status_ = 0u;
    win_score_flower_ = GOOGLE_LONGLONG(0);
    win_score_bigsmall_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    basescore_ = GOOGLE_LONGLONG(0);
    snatch_coin_stop_ = 0u;
  }
  self_jetton_score_.Clear();
  total_jetton_score_.Clear();
  area_multiple_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_everycolor_game_info_play_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes periods_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_periods_num()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time_leave;
        break;
      }

      // optional uint32 time_leave = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_leave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_leave_)));
          set_has_time_leave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_table_cards;
        break;
      }

      // optional uint32 table_cards = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_cards_)));
          set_has_table_cards();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game_status;
        break;
      }

      // optional uint32 game_status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_status_)));
          set_has_game_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_self_jetton_score;
        break;
      }

      // repeated int64 self_jetton_score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_jetton_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 40, input, this->mutable_self_jetton_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_self_jetton_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_self_jetton_score;
        if (input->ExpectTag(48)) goto parse_total_jetton_score;
        break;
      }

      // repeated int64 total_jetton_score = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_jetton_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 48, input, this->mutable_total_jetton_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_total_jetton_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_total_jetton_score;
        if (input->ExpectTag(56)) goto parse_win_score_flower;
        break;
      }

      // optional int64 win_score_flower = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_score_flower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &win_score_flower_)));
          set_has_win_score_flower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_win_score_bigsmall;
        break;
      }

      // optional int64 win_score_bigsmall = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_score_bigsmall:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &win_score_bigsmall_)));
          set_has_win_score_bigsmall();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_area_multiple;
        break;
      }

      // repeated uint32 area_multiple = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area_multiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72, input, this->mutable_area_multiple())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_area_multiple())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_area_multiple;
        if (input->ExpectTag(80)) goto parse_basescore;
        break;
      }

      // optional int64 basescore = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_basescore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &basescore_)));
          set_has_basescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_snatch_coin_stop;
        break;
      }

      // optional uint32 snatch_coin_stop = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_snatch_coin_stop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &snatch_coin_stop_)));
          set_has_snatch_coin_stop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_everycolor_game_info_play_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes periods_num = 1;
  if (has_periods_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->periods_num(), output);
  }

  // optional uint32 time_leave = 2;
  if (has_time_leave()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_leave(), output);
  }

  // optional uint32 table_cards = 3;
  if (has_table_cards()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->table_cards(), output);
  }

  // optional uint32 game_status = 4;
  if (has_game_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_status(), output);
  }

  // repeated int64 self_jetton_score = 5;
  for (int i = 0; i < this->self_jetton_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      5, this->self_jetton_score(i), output);
  }

  // repeated int64 total_jetton_score = 6;
  for (int i = 0; i < this->total_jetton_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      6, this->total_jetton_score(i), output);
  }

  // optional int64 win_score_flower = 7;
  if (has_win_score_flower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->win_score_flower(), output);
  }

  // optional int64 win_score_bigsmall = 8;
  if (has_win_score_bigsmall()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->win_score_bigsmall(), output);
  }

  // repeated uint32 area_multiple = 9;
  for (int i = 0; i < this->area_multiple_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->area_multiple(i), output);
  }

  // optional int64 basescore = 10;
  if (has_basescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->basescore(), output);
  }

  // optional uint32 snatch_coin_stop = 11;
  if (has_snatch_coin_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->snatch_coin_stop(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_everycolor_game_info_play_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes periods_num = 1;
  if (has_periods_num()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->periods_num(), target);
  }

  // optional uint32 time_leave = 2;
  if (has_time_leave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_leave(), target);
  }

  // optional uint32 table_cards = 3;
  if (has_table_cards()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->table_cards(), target);
  }

  // optional uint32 game_status = 4;
  if (has_game_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_status(), target);
  }

  // repeated int64 self_jetton_score = 5;
  for (int i = 0; i < this->self_jetton_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(5, this->self_jetton_score(i), target);
  }

  // repeated int64 total_jetton_score = 6;
  for (int i = 0; i < this->total_jetton_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(6, this->total_jetton_score(i), target);
  }

  // optional int64 win_score_flower = 7;
  if (has_win_score_flower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->win_score_flower(), target);
  }

  // optional int64 win_score_bigsmall = 8;
  if (has_win_score_bigsmall()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->win_score_bigsmall(), target);
  }

  // repeated uint32 area_multiple = 9;
  for (int i = 0; i < this->area_multiple_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(9, this->area_multiple(i), target);
  }

  // optional int64 basescore = 10;
  if (has_basescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->basescore(), target);
  }

  // optional uint32 snatch_coin_stop = 11;
  if (has_snatch_coin_stop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->snatch_coin_stop(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_everycolor_game_info_play_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes periods_num = 1;
    if (has_periods_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->periods_num());
    }

    // optional uint32 time_leave = 2;
    if (has_time_leave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_leave());
    }

    // optional uint32 table_cards = 3;
    if (has_table_cards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_cards());
    }

    // optional uint32 game_status = 4;
    if (has_game_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_status());
    }

    // optional int64 win_score_flower = 7;
    if (has_win_score_flower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->win_score_flower());
    }

    // optional int64 win_score_bigsmall = 8;
    if (has_win_score_bigsmall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->win_score_bigsmall());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int64 basescore = 10;
    if (has_basescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->basescore());
    }

    // optional uint32 snatch_coin_stop = 11;
    if (has_snatch_coin_stop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->snatch_coin_stop());
    }

  }
  // repeated int64 self_jetton_score = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->self_jetton_score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->self_jetton_score(i));
    }
    total_size += 1 * this->self_jetton_score_size() + data_size;
  }

  // repeated int64 total_jetton_score = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->total_jetton_score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->total_jetton_score(i));
    }
    total_size += 1 * this->total_jetton_score_size() + data_size;
  }

  // repeated uint32 area_multiple = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->area_multiple_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->area_multiple(i));
    }
    total_size += 1 * this->area_multiple_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_everycolor_game_info_play_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_everycolor_game_info_play_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_everycolor_game_info_play_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_everycolor_game_info_play_rep::MergeFrom(const msg_everycolor_game_info_play_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  self_jetton_score_.MergeFrom(from.self_jetton_score_);
  total_jetton_score_.MergeFrom(from.total_jetton_score_);
  area_multiple_.MergeFrom(from.area_multiple_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_periods_num()) {
      set_periods_num(from.periods_num());
    }
    if (from.has_time_leave()) {
      set_time_leave(from.time_leave());
    }
    if (from.has_table_cards()) {
      set_table_cards(from.table_cards());
    }
    if (from.has_game_status()) {
      set_game_status(from.game_status());
    }
    if (from.has_win_score_flower()) {
      set_win_score_flower(from.win_score_flower());
    }
    if (from.has_win_score_bigsmall()) {
      set_win_score_bigsmall(from.win_score_bigsmall());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_basescore()) {
      set_basescore(from.basescore());
    }
    if (from.has_snatch_coin_stop()) {
      set_snatch_coin_stop(from.snatch_coin_stop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_everycolor_game_info_play_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_everycolor_game_info_play_rep::CopyFrom(const msg_everycolor_game_info_play_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_everycolor_game_info_play_rep::IsInitialized() const {

  return true;
}

void msg_everycolor_game_info_play_rep::Swap(msg_everycolor_game_info_play_rep* other) {
  if (other != this) {
    std::swap(periods_num_, other->periods_num_);
    std::swap(time_leave_, other->time_leave_);
    std::swap(table_cards_, other->table_cards_);
    std::swap(game_status_, other->game_status_);
    self_jetton_score_.Swap(&other->self_jetton_score_);
    total_jetton_score_.Swap(&other->total_jetton_score_);
    std::swap(win_score_flower_, other->win_score_flower_);
    std::swap(win_score_bigsmall_, other->win_score_bigsmall_);
    area_multiple_.Swap(&other->area_multiple_);
    std::swap(basescore_, other->basescore_);
    std::swap(snatch_coin_stop_, other->snatch_coin_stop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_everycolor_game_info_play_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_everycolor_game_info_play_rep_descriptor_;
  metadata.reflection = msg_everycolor_game_info_play_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_everycolor_game_info_snatch_coin_enter_req::kSnatchTypeFieldNumber;
#endif  // !_MSC_VER

msg_everycolor_game_info_snatch_coin_enter_req::msg_everycolor_game_info_snatch_coin_enter_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_everycolor_game_info_snatch_coin_enter_req::InitAsDefaultInstance() {
}

msg_everycolor_game_info_snatch_coin_enter_req::msg_everycolor_game_info_snatch_coin_enter_req(const msg_everycolor_game_info_snatch_coin_enter_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_everycolor_game_info_snatch_coin_enter_req::SharedCtor() {
  _cached_size_ = 0;
  snatch_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_everycolor_game_info_snatch_coin_enter_req::~msg_everycolor_game_info_snatch_coin_enter_req() {
  SharedDtor();
}

void msg_everycolor_game_info_snatch_coin_enter_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_everycolor_game_info_snatch_coin_enter_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_everycolor_game_info_snatch_coin_enter_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_everycolor_game_info_snatch_coin_enter_req_descriptor_;
}

const msg_everycolor_game_info_snatch_coin_enter_req& msg_everycolor_game_info_snatch_coin_enter_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_everycolor_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_everycolor_game_info_snatch_coin_enter_req* msg_everycolor_game_info_snatch_coin_enter_req::default_instance_ = NULL;

msg_everycolor_game_info_snatch_coin_enter_req* msg_everycolor_game_info_snatch_coin_enter_req::New() const {
  return new msg_everycolor_game_info_snatch_coin_enter_req;
}

void msg_everycolor_game_info_snatch_coin_enter_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    snatch_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_everycolor_game_info_snatch_coin_enter_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 snatch_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &snatch_type_)));
          set_has_snatch_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_everycolor_game_info_snatch_coin_enter_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 snatch_type = 1;
  if (has_snatch_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->snatch_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_everycolor_game_info_snatch_coin_enter_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 snatch_type = 1;
  if (has_snatch_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->snatch_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_everycolor_game_info_snatch_coin_enter_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 snatch_type = 1;
    if (has_snatch_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->snatch_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_everycolor_game_info_snatch_coin_enter_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_everycolor_game_info_snatch_coin_enter_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_everycolor_game_info_snatch_coin_enter_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_everycolor_game_info_snatch_coin_enter_req::MergeFrom(const msg_everycolor_game_info_snatch_coin_enter_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_snatch_type()) {
      set_snatch_type(from.snatch_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_everycolor_game_info_snatch_coin_enter_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_everycolor_game_info_snatch_coin_enter_req::CopyFrom(const msg_everycolor_game_info_snatch_coin_enter_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_everycolor_game_info_snatch_coin_enter_req::IsInitialized() const {

  return true;
}

void msg_everycolor_game_info_snatch_coin_enter_req::Swap(msg_everycolor_game_info_snatch_coin_enter_req* other) {
  if (other != this) {
    std::swap(snatch_type_, other->snatch_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_everycolor_game_info_snatch_coin_enter_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_everycolor_game_info_snatch_coin_enter_req_descriptor_;
  metadata.reflection = msg_everycolor_game_info_snatch_coin_enter_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_everycolor_game_info_snatch_coin_enter_rep::kSnatchTypeFieldNumber;
const int msg_everycolor_game_info_snatch_coin_enter_rep::kPeriodsNumFieldNumber;
const int msg_everycolor_game_info_snatch_coin_enter_rep::kGameStatusFieldNumber;
const int msg_everycolor_game_info_snatch_coin_enter_rep::kResidueCardCountFieldNumber;
const int msg_everycolor_game_info_snatch_coin_enter_rep::kCardDataFieldNumber;
const int msg_everycolor_game_info_snatch_coin_enter_rep::kTimeLeaveFieldNumber;
const int msg_everycolor_game_info_snatch_coin_enter_rep::kWinUidFieldNumber;
const int msg_everycolor_game_info_snatch_coin_enter_rep::kWinScoreFieldNumber;
#endif  // !_MSC_VER

msg_everycolor_game_info_snatch_coin_enter_rep::msg_everycolor_game_info_snatch_coin_enter_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_everycolor_game_info_snatch_coin_enter_rep::InitAsDefaultInstance() {
}

msg_everycolor_game_info_snatch_coin_enter_rep::msg_everycolor_game_info_snatch_coin_enter_rep(const msg_everycolor_game_info_snatch_coin_enter_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_everycolor_game_info_snatch_coin_enter_rep::SharedCtor() {
  _cached_size_ = 0;
  snatch_type_ = 0u;
  periods_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  game_status_ = 0u;
  residue_card_count_ = 0u;
  time_leave_ = 0u;
  win_uid_ = 0u;
  win_score_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_everycolor_game_info_snatch_coin_enter_rep::~msg_everycolor_game_info_snatch_coin_enter_rep() {
  SharedDtor();
}

void msg_everycolor_game_info_snatch_coin_enter_rep::SharedDtor() {
  if (periods_num_ != &::google::protobuf::internal::kEmptyString) {
    delete periods_num_;
  }
  if (this != default_instance_) {
  }
}

void msg_everycolor_game_info_snatch_coin_enter_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_everycolor_game_info_snatch_coin_enter_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_everycolor_game_info_snatch_coin_enter_rep_descriptor_;
}

const msg_everycolor_game_info_snatch_coin_enter_rep& msg_everycolor_game_info_snatch_coin_enter_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_everycolor_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_everycolor_game_info_snatch_coin_enter_rep* msg_everycolor_game_info_snatch_coin_enter_rep::default_instance_ = NULL;

msg_everycolor_game_info_snatch_coin_enter_rep* msg_everycolor_game_info_snatch_coin_enter_rep::New() const {
  return new msg_everycolor_game_info_snatch_coin_enter_rep;
}

void msg_everycolor_game_info_snatch_coin_enter_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    snatch_type_ = 0u;
    if (has_periods_num()) {
      if (periods_num_ != &::google::protobuf::internal::kEmptyString) {
        periods_num_->clear();
      }
    }
    game_status_ = 0u;
    residue_card_count_ = 0u;
    time_leave_ = 0u;
    win_uid_ = 0u;
    win_score_ = GOOGLE_LONGLONG(0);
  }
  card_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_everycolor_game_info_snatch_coin_enter_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 snatch_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &snatch_type_)));
          set_has_snatch_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_periods_num;
        break;
      }

      // optional bytes periods_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_periods_num:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_periods_num()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_game_status;
        break;
      }

      // optional uint32 game_status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_status_)));
          set_has_game_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_residue_card_count;
        break;
      }

      // optional uint32 residue_card_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_residue_card_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &residue_card_count_)));
          set_has_residue_card_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_card_data;
        break;
      }

      // repeated uint32 card_data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_card_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_card_data;
        if (input->ExpectTag(48)) goto parse_time_leave;
        break;
      }

      // optional uint32 time_leave = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_leave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_leave_)));
          set_has_time_leave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_win_uid;
        break;
      }

      // optional uint32 win_uid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_uid_)));
          set_has_win_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_win_score;
        break;
      }

      // optional int64 win_score = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &win_score_)));
          set_has_win_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_everycolor_game_info_snatch_coin_enter_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 snatch_type = 1;
  if (has_snatch_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->snatch_type(), output);
  }

  // optional bytes periods_num = 2;
  if (has_periods_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->periods_num(), output);
  }

  // optional uint32 game_status = 3;
  if (has_game_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_status(), output);
  }

  // optional uint32 residue_card_count = 4;
  if (has_residue_card_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->residue_card_count(), output);
  }

  // repeated uint32 card_data = 5;
  for (int i = 0; i < this->card_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->card_data(i), output);
  }

  // optional uint32 time_leave = 6;
  if (has_time_leave()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time_leave(), output);
  }

  // optional uint32 win_uid = 7;
  if (has_win_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->win_uid(), output);
  }

  // optional int64 win_score = 8;
  if (has_win_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->win_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_everycolor_game_info_snatch_coin_enter_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 snatch_type = 1;
  if (has_snatch_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->snatch_type(), target);
  }

  // optional bytes periods_num = 2;
  if (has_periods_num()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->periods_num(), target);
  }

  // optional uint32 game_status = 3;
  if (has_game_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_status(), target);
  }

  // optional uint32 residue_card_count = 4;
  if (has_residue_card_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->residue_card_count(), target);
  }

  // repeated uint32 card_data = 5;
  for (int i = 0; i < this->card_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->card_data(i), target);
  }

  // optional uint32 time_leave = 6;
  if (has_time_leave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time_leave(), target);
  }

  // optional uint32 win_uid = 7;
  if (has_win_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->win_uid(), target);
  }

  // optional int64 win_score = 8;
  if (has_win_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->win_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_everycolor_game_info_snatch_coin_enter_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 snatch_type = 1;
    if (has_snatch_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->snatch_type());
    }

    // optional bytes periods_num = 2;
    if (has_periods_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->periods_num());
    }

    // optional uint32 game_status = 3;
    if (has_game_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_status());
    }

    // optional uint32 residue_card_count = 4;
    if (has_residue_card_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->residue_card_count());
    }

    // optional uint32 time_leave = 6;
    if (has_time_leave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_leave());
    }

    // optional uint32 win_uid = 7;
    if (has_win_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win_uid());
    }

    // optional int64 win_score = 8;
    if (has_win_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->win_score());
    }

  }
  // repeated uint32 card_data = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->card_data(i));
    }
    total_size += 1 * this->card_data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_everycolor_game_info_snatch_coin_enter_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_everycolor_game_info_snatch_coin_enter_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_everycolor_game_info_snatch_coin_enter_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_everycolor_game_info_snatch_coin_enter_rep::MergeFrom(const msg_everycolor_game_info_snatch_coin_enter_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_data_.MergeFrom(from.card_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_snatch_type()) {
      set_snatch_type(from.snatch_type());
    }
    if (from.has_periods_num()) {
      set_periods_num(from.periods_num());
    }
    if (from.has_game_status()) {
      set_game_status(from.game_status());
    }
    if (from.has_residue_card_count()) {
      set_residue_card_count(from.residue_card_count());
    }
    if (from.has_time_leave()) {
      set_time_leave(from.time_leave());
    }
    if (from.has_win_uid()) {
      set_win_uid(from.win_uid());
    }
    if (from.has_win_score()) {
      set_win_score(from.win_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_everycolor_game_info_snatch_coin_enter_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_everycolor_game_info_snatch_coin_enter_rep::CopyFrom(const msg_everycolor_game_info_snatch_coin_enter_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_everycolor_game_info_snatch_coin_enter_rep::IsInitialized() const {

  return true;
}

void msg_everycolor_game_info_snatch_coin_enter_rep::Swap(msg_everycolor_game_info_snatch_coin_enter_rep* other) {
  if (other != this) {
    std::swap(snatch_type_, other->snatch_type_);
    std::swap(periods_num_, other->periods_num_);
    std::swap(game_status_, other->game_status_);
    std::swap(residue_card_count_, other->residue_card_count_);
    card_data_.Swap(&other->card_data_);
    std::swap(time_leave_, other->time_leave_);
    std::swap(win_uid_, other->win_uid_);
    std::swap(win_score_, other->win_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_everycolor_game_info_snatch_coin_enter_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_everycolor_game_info_snatch_coin_enter_rep_descriptor_;
  metadata.reflection = msg_everycolor_game_info_snatch_coin_enter_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_everycolor_start_rep::kPeriodsNumFieldNumber;
const int msg_everycolor_start_rep::kTimeLeaveFieldNumber;
#endif  // !_MSC_VER

msg_everycolor_start_rep::msg_everycolor_start_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_everycolor_start_rep::InitAsDefaultInstance() {
}

msg_everycolor_start_rep::msg_everycolor_start_rep(const msg_everycolor_start_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_everycolor_start_rep::SharedCtor() {
  _cached_size_ = 0;
  periods_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_leave_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_everycolor_start_rep::~msg_everycolor_start_rep() {
  SharedDtor();
}

void msg_everycolor_start_rep::SharedDtor() {
  if (periods_num_ != &::google::protobuf::internal::kEmptyString) {
    delete periods_num_;
  }
  if (this != default_instance_) {
  }
}

void msg_everycolor_start_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_everycolor_start_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_everycolor_start_rep_descriptor_;
}

const msg_everycolor_start_rep& msg_everycolor_start_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_everycolor_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_everycolor_start_rep* msg_everycolor_start_rep::default_instance_ = NULL;

msg_everycolor_start_rep* msg_everycolor_start_rep::New() const {
  return new msg_everycolor_start_rep;
}

void msg_everycolor_start_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_periods_num()) {
      if (periods_num_ != &::google::protobuf::internal::kEmptyString) {
        periods_num_->clear();
      }
    }
    time_leave_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_everycolor_start_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes periods_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_periods_num()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time_leave;
        break;
      }

      // optional uint32 time_leave = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_leave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_leave_)));
          set_has_time_leave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_everycolor_start_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes periods_num = 1;
  if (has_periods_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->periods_num(), output);
  }

  // optional uint32 time_leave = 2;
  if (has_time_leave()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_leave(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_everycolor_start_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes periods_num = 1;
  if (has_periods_num()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->periods_num(), target);
  }

  // optional uint32 time_leave = 2;
  if (has_time_leave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_leave(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_everycolor_start_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes periods_num = 1;
    if (has_periods_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->periods_num());
    }

    // optional uint32 time_leave = 2;
    if (has_time_leave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_leave());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_everycolor_start_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_everycolor_start_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_everycolor_start_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_everycolor_start_rep::MergeFrom(const msg_everycolor_start_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_periods_num()) {
      set_periods_num(from.periods_num());
    }
    if (from.has_time_leave()) {
      set_time_leave(from.time_leave());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_everycolor_start_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_everycolor_start_rep::CopyFrom(const msg_everycolor_start_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_everycolor_start_rep::IsInitialized() const {

  return true;
}

void msg_everycolor_start_rep::Swap(msg_everycolor_start_rep* other) {
  if (other != this) {
    std::swap(periods_num_, other->periods_num_);
    std::swap(time_leave_, other->time_leave_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_everycolor_start_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_everycolor_start_rep_descriptor_;
  metadata.reflection = msg_everycolor_start_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_everycolor_snatch_coin_start_rep::kPeriodsNumFieldNumber;
#endif  // !_MSC_VER

msg_everycolor_snatch_coin_start_rep::msg_everycolor_snatch_coin_start_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_everycolor_snatch_coin_start_rep::InitAsDefaultInstance() {
}

msg_everycolor_snatch_coin_start_rep::msg_everycolor_snatch_coin_start_rep(const msg_everycolor_snatch_coin_start_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_everycolor_snatch_coin_start_rep::SharedCtor() {
  _cached_size_ = 0;
  periods_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_everycolor_snatch_coin_start_rep::~msg_everycolor_snatch_coin_start_rep() {
  SharedDtor();
}

void msg_everycolor_snatch_coin_start_rep::SharedDtor() {
  if (periods_num_ != &::google::protobuf::internal::kEmptyString) {
    delete periods_num_;
  }
  if (this != default_instance_) {
  }
}

void msg_everycolor_snatch_coin_start_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_everycolor_snatch_coin_start_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_everycolor_snatch_coin_start_rep_descriptor_;
}

const msg_everycolor_snatch_coin_start_rep& msg_everycolor_snatch_coin_start_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_everycolor_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_everycolor_snatch_coin_start_rep* msg_everycolor_snatch_coin_start_rep::default_instance_ = NULL;

msg_everycolor_snatch_coin_start_rep* msg_everycolor_snatch_coin_start_rep::New() const {
  return new msg_everycolor_snatch_coin_start_rep;
}

void msg_everycolor_snatch_coin_start_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_periods_num()) {
      if (periods_num_ != &::google::protobuf::internal::kEmptyString) {
        periods_num_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_everycolor_snatch_coin_start_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes periods_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_periods_num()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_everycolor_snatch_coin_start_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes periods_num = 1;
  if (has_periods_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->periods_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_everycolor_snatch_coin_start_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes periods_num = 1;
  if (has_periods_num()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->periods_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_everycolor_snatch_coin_start_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes periods_num = 1;
    if (has_periods_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->periods_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_everycolor_snatch_coin_start_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_everycolor_snatch_coin_start_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_everycolor_snatch_coin_start_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_everycolor_snatch_coin_start_rep::MergeFrom(const msg_everycolor_snatch_coin_start_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_periods_num()) {
      set_periods_num(from.periods_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_everycolor_snatch_coin_start_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_everycolor_snatch_coin_start_rep::CopyFrom(const msg_everycolor_snatch_coin_start_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_everycolor_snatch_coin_start_rep::IsInitialized() const {

  return true;
}

void msg_everycolor_snatch_coin_start_rep::Swap(msg_everycolor_snatch_coin_start_rep* other) {
  if (other != this) {
    std::swap(periods_num_, other->periods_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_everycolor_snatch_coin_start_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_everycolor_snatch_coin_start_rep_descriptor_;
  metadata.reflection = msg_everycolor_snatch_coin_start_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_everycolor_place_jetton_req::kJettonAreaFieldNumber;
const int msg_everycolor_place_jetton_req::kJettonScoreFieldNumber;
#endif  // !_MSC_VER

msg_everycolor_place_jetton_req::msg_everycolor_place_jetton_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_everycolor_place_jetton_req::InitAsDefaultInstance() {
}

msg_everycolor_place_jetton_req::msg_everycolor_place_jetton_req(const msg_everycolor_place_jetton_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_everycolor_place_jetton_req::SharedCtor() {
  _cached_size_ = 0;
  jetton_area_ = 0u;
  jetton_score_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_everycolor_place_jetton_req::~msg_everycolor_place_jetton_req() {
  SharedDtor();
}

void msg_everycolor_place_jetton_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_everycolor_place_jetton_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_everycolor_place_jetton_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_everycolor_place_jetton_req_descriptor_;
}

const msg_everycolor_place_jetton_req& msg_everycolor_place_jetton_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_everycolor_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_everycolor_place_jetton_req* msg_everycolor_place_jetton_req::default_instance_ = NULL;

msg_everycolor_place_jetton_req* msg_everycolor_place_jetton_req::New() const {
  return new msg_everycolor_place_jetton_req;
}

void msg_everycolor_place_jetton_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    jetton_area_ = 0u;
    jetton_score_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_everycolor_place_jetton_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 jetton_area = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jetton_area_)));
          set_has_jetton_area();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_jetton_score;
        break;
      }

      // optional int64 jetton_score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &jetton_score_)));
          set_has_jetton_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_everycolor_place_jetton_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 jetton_area = 1;
  if (has_jetton_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->jetton_area(), output);
  }

  // optional int64 jetton_score = 2;
  if (has_jetton_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->jetton_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_everycolor_place_jetton_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 jetton_area = 1;
  if (has_jetton_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->jetton_area(), target);
  }

  // optional int64 jetton_score = 2;
  if (has_jetton_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->jetton_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_everycolor_place_jetton_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 jetton_area = 1;
    if (has_jetton_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jetton_area());
    }

    // optional int64 jetton_score = 2;
    if (has_jetton_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->jetton_score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_everycolor_place_jetton_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_everycolor_place_jetton_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_everycolor_place_jetton_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_everycolor_place_jetton_req::MergeFrom(const msg_everycolor_place_jetton_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jetton_area()) {
      set_jetton_area(from.jetton_area());
    }
    if (from.has_jetton_score()) {
      set_jetton_score(from.jetton_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_everycolor_place_jetton_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_everycolor_place_jetton_req::CopyFrom(const msg_everycolor_place_jetton_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_everycolor_place_jetton_req::IsInitialized() const {

  return true;
}

void msg_everycolor_place_jetton_req::Swap(msg_everycolor_place_jetton_req* other) {
  if (other != this) {
    std::swap(jetton_area_, other->jetton_area_);
    std::swap(jetton_score_, other->jetton_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_everycolor_place_jetton_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_everycolor_place_jetton_req_descriptor_;
  metadata.reflection = msg_everycolor_place_jetton_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_everycolor_place_jetton_rep::kJettonAreaFieldNumber;
const int msg_everycolor_place_jetton_rep::kJettonScoreFieldNumber;
const int msg_everycolor_place_jetton_rep::kResultFieldNumber;
const int msg_everycolor_place_jetton_rep::kSelfJettonScoreFieldNumber;
#endif  // !_MSC_VER

msg_everycolor_place_jetton_rep::msg_everycolor_place_jetton_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_everycolor_place_jetton_rep::InitAsDefaultInstance() {
}

msg_everycolor_place_jetton_rep::msg_everycolor_place_jetton_rep(const msg_everycolor_place_jetton_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_everycolor_place_jetton_rep::SharedCtor() {
  _cached_size_ = 0;
  jetton_area_ = 0u;
  jetton_score_ = GOOGLE_LONGLONG(0);
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_everycolor_place_jetton_rep::~msg_everycolor_place_jetton_rep() {
  SharedDtor();
}

void msg_everycolor_place_jetton_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_everycolor_place_jetton_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_everycolor_place_jetton_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_everycolor_place_jetton_rep_descriptor_;
}

const msg_everycolor_place_jetton_rep& msg_everycolor_place_jetton_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_everycolor_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_everycolor_place_jetton_rep* msg_everycolor_place_jetton_rep::default_instance_ = NULL;

msg_everycolor_place_jetton_rep* msg_everycolor_place_jetton_rep::New() const {
  return new msg_everycolor_place_jetton_rep;
}

void msg_everycolor_place_jetton_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    jetton_area_ = 0u;
    jetton_score_ = GOOGLE_LONGLONG(0);
    result_ = 0u;
  }
  self_jetton_score_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_everycolor_place_jetton_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 jetton_area = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jetton_area_)));
          set_has_jetton_area();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_jetton_score;
        break;
      }

      // optional int64 jetton_score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &jetton_score_)));
          set_has_jetton_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional uint32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_self_jetton_score;
        break;
      }

      // repeated int64 self_jetton_score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_jetton_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 32, input, this->mutable_self_jetton_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_self_jetton_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_self_jetton_score;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_everycolor_place_jetton_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 jetton_area = 1;
  if (has_jetton_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->jetton_area(), output);
  }

  // optional int64 jetton_score = 2;
  if (has_jetton_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->jetton_score(), output);
  }

  // optional uint32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->result(), output);
  }

  // repeated int64 self_jetton_score = 4;
  for (int i = 0; i < this->self_jetton_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      4, this->self_jetton_score(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_everycolor_place_jetton_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 jetton_area = 1;
  if (has_jetton_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->jetton_area(), target);
  }

  // optional int64 jetton_score = 2;
  if (has_jetton_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->jetton_score(), target);
  }

  // optional uint32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->result(), target);
  }

  // repeated int64 self_jetton_score = 4;
  for (int i = 0; i < this->self_jetton_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(4, this->self_jetton_score(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_everycolor_place_jetton_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 jetton_area = 1;
    if (has_jetton_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jetton_area());
    }

    // optional int64 jetton_score = 2;
    if (has_jetton_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->jetton_score());
    }

    // optional uint32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  // repeated int64 self_jetton_score = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->self_jetton_score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->self_jetton_score(i));
    }
    total_size += 1 * this->self_jetton_score_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_everycolor_place_jetton_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_everycolor_place_jetton_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_everycolor_place_jetton_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_everycolor_place_jetton_rep::MergeFrom(const msg_everycolor_place_jetton_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  self_jetton_score_.MergeFrom(from.self_jetton_score_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jetton_area()) {
      set_jetton_area(from.jetton_area());
    }
    if (from.has_jetton_score()) {
      set_jetton_score(from.jetton_score());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_everycolor_place_jetton_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_everycolor_place_jetton_rep::CopyFrom(const msg_everycolor_place_jetton_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_everycolor_place_jetton_rep::IsInitialized() const {

  return true;
}

void msg_everycolor_place_jetton_rep::Swap(msg_everycolor_place_jetton_rep* other) {
  if (other != this) {
    std::swap(jetton_area_, other->jetton_area_);
    std::swap(jetton_score_, other->jetton_score_);
    std::swap(result_, other->result_);
    self_jetton_score_.Swap(&other->self_jetton_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_everycolor_place_jetton_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_everycolor_place_jetton_rep_descriptor_;
  metadata.reflection = msg_everycolor_place_jetton_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_everycolor_place_jetton_broadcast::kUidFieldNumber;
const int msg_everycolor_place_jetton_broadcast::kJettonAreaFieldNumber;
const int msg_everycolor_place_jetton_broadcast::kJettonScoreFieldNumber;
const int msg_everycolor_place_jetton_broadcast::kTotalJettonScoreFieldNumber;
#endif  // !_MSC_VER

msg_everycolor_place_jetton_broadcast::msg_everycolor_place_jetton_broadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_everycolor_place_jetton_broadcast::InitAsDefaultInstance() {
}

msg_everycolor_place_jetton_broadcast::msg_everycolor_place_jetton_broadcast(const msg_everycolor_place_jetton_broadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_everycolor_place_jetton_broadcast::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  jetton_area_ = 0u;
  jetton_score_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_everycolor_place_jetton_broadcast::~msg_everycolor_place_jetton_broadcast() {
  SharedDtor();
}

void msg_everycolor_place_jetton_broadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_everycolor_place_jetton_broadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_everycolor_place_jetton_broadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_everycolor_place_jetton_broadcast_descriptor_;
}

const msg_everycolor_place_jetton_broadcast& msg_everycolor_place_jetton_broadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_everycolor_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_everycolor_place_jetton_broadcast* msg_everycolor_place_jetton_broadcast::default_instance_ = NULL;

msg_everycolor_place_jetton_broadcast* msg_everycolor_place_jetton_broadcast::New() const {
  return new msg_everycolor_place_jetton_broadcast;
}

void msg_everycolor_place_jetton_broadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    jetton_area_ = 0u;
    jetton_score_ = GOOGLE_LONGLONG(0);
  }
  total_jetton_score_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_everycolor_place_jetton_broadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_jetton_area;
        break;
      }

      // optional uint32 jetton_area = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jetton_area_)));
          set_has_jetton_area();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_jetton_score;
        break;
      }

      // optional int64 jetton_score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &jetton_score_)));
          set_has_jetton_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_jetton_score;
        break;
      }

      // repeated int64 total_jetton_score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_jetton_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 32, input, this->mutable_total_jetton_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_total_jetton_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_jetton_score;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_everycolor_place_jetton_broadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 jetton_area = 2;
  if (has_jetton_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->jetton_area(), output);
  }

  // optional int64 jetton_score = 3;
  if (has_jetton_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->jetton_score(), output);
  }

  // repeated int64 total_jetton_score = 4;
  for (int i = 0; i < this->total_jetton_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      4, this->total_jetton_score(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_everycolor_place_jetton_broadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional uint32 jetton_area = 2;
  if (has_jetton_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->jetton_area(), target);
  }

  // optional int64 jetton_score = 3;
  if (has_jetton_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->jetton_score(), target);
  }

  // repeated int64 total_jetton_score = 4;
  for (int i = 0; i < this->total_jetton_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(4, this->total_jetton_score(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_everycolor_place_jetton_broadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 jetton_area = 2;
    if (has_jetton_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jetton_area());
    }

    // optional int64 jetton_score = 3;
    if (has_jetton_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->jetton_score());
    }

  }
  // repeated int64 total_jetton_score = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->total_jetton_score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->total_jetton_score(i));
    }
    total_size += 1 * this->total_jetton_score_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_everycolor_place_jetton_broadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_everycolor_place_jetton_broadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_everycolor_place_jetton_broadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_everycolor_place_jetton_broadcast::MergeFrom(const msg_everycolor_place_jetton_broadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  total_jetton_score_.MergeFrom(from.total_jetton_score_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_jetton_area()) {
      set_jetton_area(from.jetton_area());
    }
    if (from.has_jetton_score()) {
      set_jetton_score(from.jetton_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_everycolor_place_jetton_broadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_everycolor_place_jetton_broadcast::CopyFrom(const msg_everycolor_place_jetton_broadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_everycolor_place_jetton_broadcast::IsInitialized() const {

  return true;
}

void msg_everycolor_place_jetton_broadcast::Swap(msg_everycolor_place_jetton_broadcast* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(jetton_area_, other->jetton_area_);
    std::swap(jetton_score_, other->jetton_score_);
    total_jetton_score_.Swap(&other->total_jetton_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_everycolor_place_jetton_broadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_everycolor_place_jetton_broadcast_descriptor_;
  metadata.reflection = msg_everycolor_place_jetton_broadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_everycolor_snatch_coin_req::kSnatchTypeFieldNumber;
const int msg_everycolor_snatch_coin_req::kSnatchCountFieldNumber;
#endif  // !_MSC_VER

msg_everycolor_snatch_coin_req::msg_everycolor_snatch_coin_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_everycolor_snatch_coin_req::InitAsDefaultInstance() {
}

msg_everycolor_snatch_coin_req::msg_everycolor_snatch_coin_req(const msg_everycolor_snatch_coin_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_everycolor_snatch_coin_req::SharedCtor() {
  _cached_size_ = 0;
  snatch_type_ = 0u;
  snatch_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_everycolor_snatch_coin_req::~msg_everycolor_snatch_coin_req() {
  SharedDtor();
}

void msg_everycolor_snatch_coin_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_everycolor_snatch_coin_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_everycolor_snatch_coin_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_everycolor_snatch_coin_req_descriptor_;
}

const msg_everycolor_snatch_coin_req& msg_everycolor_snatch_coin_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_everycolor_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_everycolor_snatch_coin_req* msg_everycolor_snatch_coin_req::default_instance_ = NULL;

msg_everycolor_snatch_coin_req* msg_everycolor_snatch_coin_req::New() const {
  return new msg_everycolor_snatch_coin_req;
}

void msg_everycolor_snatch_coin_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    snatch_type_ = 0u;
    snatch_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_everycolor_snatch_coin_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 snatch_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &snatch_type_)));
          set_has_snatch_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_snatch_count;
        break;
      }

      // optional uint32 snatch_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_snatch_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &snatch_count_)));
          set_has_snatch_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_everycolor_snatch_coin_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 snatch_type = 1;
  if (has_snatch_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->snatch_type(), output);
  }

  // optional uint32 snatch_count = 2;
  if (has_snatch_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->snatch_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_everycolor_snatch_coin_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 snatch_type = 1;
  if (has_snatch_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->snatch_type(), target);
  }

  // optional uint32 snatch_count = 2;
  if (has_snatch_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->snatch_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_everycolor_snatch_coin_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 snatch_type = 1;
    if (has_snatch_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->snatch_type());
    }

    // optional uint32 snatch_count = 2;
    if (has_snatch_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->snatch_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_everycolor_snatch_coin_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_everycolor_snatch_coin_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_everycolor_snatch_coin_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_everycolor_snatch_coin_req::MergeFrom(const msg_everycolor_snatch_coin_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_snatch_type()) {
      set_snatch_type(from.snatch_type());
    }
    if (from.has_snatch_count()) {
      set_snatch_count(from.snatch_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_everycolor_snatch_coin_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_everycolor_snatch_coin_req::CopyFrom(const msg_everycolor_snatch_coin_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_everycolor_snatch_coin_req::IsInitialized() const {

  return true;
}

void msg_everycolor_snatch_coin_req::Swap(msg_everycolor_snatch_coin_req* other) {
  if (other != this) {
    std::swap(snatch_type_, other->snatch_type_);
    std::swap(snatch_count_, other->snatch_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_everycolor_snatch_coin_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_everycolor_snatch_coin_req_descriptor_;
  metadata.reflection = msg_everycolor_snatch_coin_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_everycolor_snatch_coin_rep::kSnatchTypeFieldNumber;
const int msg_everycolor_snatch_coin_rep::kSnatchCountFieldNumber;
const int msg_everycolor_snatch_coin_rep::kResultFieldNumber;
const int msg_everycolor_snatch_coin_rep::kSelfTotalCountFieldNumber;
const int msg_everycolor_snatch_coin_rep::kSelfSnatchCardFieldNumber;
const int msg_everycolor_snatch_coin_rep::kResidueCardCountFieldNumber;
#endif  // !_MSC_VER

msg_everycolor_snatch_coin_rep::msg_everycolor_snatch_coin_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_everycolor_snatch_coin_rep::InitAsDefaultInstance() {
}

msg_everycolor_snatch_coin_rep::msg_everycolor_snatch_coin_rep(const msg_everycolor_snatch_coin_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_everycolor_snatch_coin_rep::SharedCtor() {
  _cached_size_ = 0;
  snatch_type_ = 0u;
  snatch_count_ = 0u;
  result_ = 0u;
  self_total_count_ = 0u;
  residue_card_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_everycolor_snatch_coin_rep::~msg_everycolor_snatch_coin_rep() {
  SharedDtor();
}

void msg_everycolor_snatch_coin_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_everycolor_snatch_coin_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_everycolor_snatch_coin_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_everycolor_snatch_coin_rep_descriptor_;
}

const msg_everycolor_snatch_coin_rep& msg_everycolor_snatch_coin_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_everycolor_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_everycolor_snatch_coin_rep* msg_everycolor_snatch_coin_rep::default_instance_ = NULL;

msg_everycolor_snatch_coin_rep* msg_everycolor_snatch_coin_rep::New() const {
  return new msg_everycolor_snatch_coin_rep;
}

void msg_everycolor_snatch_coin_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    snatch_type_ = 0u;
    snatch_count_ = 0u;
    result_ = 0u;
    self_total_count_ = 0u;
    residue_card_count_ = 0u;
  }
  self_snatch_card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_everycolor_snatch_coin_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 snatch_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &snatch_type_)));
          set_has_snatch_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_snatch_count;
        break;
      }

      // optional uint32 snatch_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_snatch_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &snatch_count_)));
          set_has_snatch_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional uint32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_self_total_count;
        break;
      }

      // optional uint32 self_total_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_total_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &self_total_count_)));
          set_has_self_total_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_self_snatch_card;
        break;
      }

      // repeated uint32 self_snatch_card = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_snatch_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_self_snatch_card())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_self_snatch_card())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_self_snatch_card;
        if (input->ExpectTag(48)) goto parse_residue_card_count;
        break;
      }

      // optional uint32 residue_card_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_residue_card_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &residue_card_count_)));
          set_has_residue_card_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_everycolor_snatch_coin_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 snatch_type = 1;
  if (has_snatch_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->snatch_type(), output);
  }

  // optional uint32 snatch_count = 2;
  if (has_snatch_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->snatch_count(), output);
  }

  // optional uint32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->result(), output);
  }

  // optional uint32 self_total_count = 4;
  if (has_self_total_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->self_total_count(), output);
  }

  // repeated uint32 self_snatch_card = 5;
  for (int i = 0; i < this->self_snatch_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->self_snatch_card(i), output);
  }

  // optional uint32 residue_card_count = 6;
  if (has_residue_card_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->residue_card_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_everycolor_snatch_coin_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 snatch_type = 1;
  if (has_snatch_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->snatch_type(), target);
  }

  // optional uint32 snatch_count = 2;
  if (has_snatch_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->snatch_count(), target);
  }

  // optional uint32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->result(), target);
  }

  // optional uint32 self_total_count = 4;
  if (has_self_total_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->self_total_count(), target);
  }

  // repeated uint32 self_snatch_card = 5;
  for (int i = 0; i < this->self_snatch_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->self_snatch_card(i), target);
  }

  // optional uint32 residue_card_count = 6;
  if (has_residue_card_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->residue_card_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_everycolor_snatch_coin_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 snatch_type = 1;
    if (has_snatch_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->snatch_type());
    }

    // optional uint32 snatch_count = 2;
    if (has_snatch_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->snatch_count());
    }

    // optional uint32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 self_total_count = 4;
    if (has_self_total_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->self_total_count());
    }

    // optional uint32 residue_card_count = 6;
    if (has_residue_card_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->residue_card_count());
    }

  }
  // repeated uint32 self_snatch_card = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->self_snatch_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->self_snatch_card(i));
    }
    total_size += 1 * this->self_snatch_card_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_everycolor_snatch_coin_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_everycolor_snatch_coin_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_everycolor_snatch_coin_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_everycolor_snatch_coin_rep::MergeFrom(const msg_everycolor_snatch_coin_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  self_snatch_card_.MergeFrom(from.self_snatch_card_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_snatch_type()) {
      set_snatch_type(from.snatch_type());
    }
    if (from.has_snatch_count()) {
      set_snatch_count(from.snatch_count());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_self_total_count()) {
      set_self_total_count(from.self_total_count());
    }
    if (from.has_residue_card_count()) {
      set_residue_card_count(from.residue_card_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_everycolor_snatch_coin_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_everycolor_snatch_coin_rep::CopyFrom(const msg_everycolor_snatch_coin_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_everycolor_snatch_coin_rep::IsInitialized() const {

  return true;
}

void msg_everycolor_snatch_coin_rep::Swap(msg_everycolor_snatch_coin_rep* other) {
  if (other != this) {
    std::swap(snatch_type_, other->snatch_type_);
    std::swap(snatch_count_, other->snatch_count_);
    std::swap(result_, other->result_);
    std::swap(self_total_count_, other->self_total_count_);
    self_snatch_card_.Swap(&other->self_snatch_card_);
    std::swap(residue_card_count_, other->residue_card_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_everycolor_snatch_coin_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_everycolor_snatch_coin_rep_descriptor_;
  metadata.reflection = msg_everycolor_snatch_coin_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_everycolor_snatch_coin_broadcast::kUidFieldNumber;
const int msg_everycolor_snatch_coin_broadcast::kSnatchTypeFieldNumber;
const int msg_everycolor_snatch_coin_broadcast::kSnatchCountFieldNumber;
const int msg_everycolor_snatch_coin_broadcast::kTotalSnatchCountFieldNumber;
const int msg_everycolor_snatch_coin_broadcast::kTotalSnatchCardFieldNumber;
#endif  // !_MSC_VER

msg_everycolor_snatch_coin_broadcast::msg_everycolor_snatch_coin_broadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_everycolor_snatch_coin_broadcast::InitAsDefaultInstance() {
}

msg_everycolor_snatch_coin_broadcast::msg_everycolor_snatch_coin_broadcast(const msg_everycolor_snatch_coin_broadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_everycolor_snatch_coin_broadcast::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  snatch_type_ = 0u;
  snatch_count_ = 0u;
  total_snatch_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_everycolor_snatch_coin_broadcast::~msg_everycolor_snatch_coin_broadcast() {
  SharedDtor();
}

void msg_everycolor_snatch_coin_broadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_everycolor_snatch_coin_broadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_everycolor_snatch_coin_broadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_everycolor_snatch_coin_broadcast_descriptor_;
}

const msg_everycolor_snatch_coin_broadcast& msg_everycolor_snatch_coin_broadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_everycolor_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_everycolor_snatch_coin_broadcast* msg_everycolor_snatch_coin_broadcast::default_instance_ = NULL;

msg_everycolor_snatch_coin_broadcast* msg_everycolor_snatch_coin_broadcast::New() const {
  return new msg_everycolor_snatch_coin_broadcast;
}

void msg_everycolor_snatch_coin_broadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    snatch_type_ = 0u;
    snatch_count_ = 0u;
    total_snatch_count_ = 0u;
  }
  total_snatch_card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_everycolor_snatch_coin_broadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_snatch_type;
        break;
      }

      // optional uint32 snatch_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_snatch_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &snatch_type_)));
          set_has_snatch_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_snatch_count;
        break;
      }

      // optional uint32 snatch_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_snatch_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &snatch_count_)));
          set_has_snatch_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_snatch_count;
        break;
      }

      // optional uint32 total_snatch_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_snatch_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_snatch_count_)));
          set_has_total_snatch_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_total_snatch_card;
        break;
      }

      // repeated uint32 total_snatch_card = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_snatch_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_total_snatch_card())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_total_snatch_card())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_total_snatch_card;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_everycolor_snatch_coin_broadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 snatch_type = 2;
  if (has_snatch_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->snatch_type(), output);
  }

  // optional uint32 snatch_count = 3;
  if (has_snatch_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->snatch_count(), output);
  }

  // optional uint32 total_snatch_count = 4;
  if (has_total_snatch_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->total_snatch_count(), output);
  }

  // repeated uint32 total_snatch_card = 5;
  for (int i = 0; i < this->total_snatch_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->total_snatch_card(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_everycolor_snatch_coin_broadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional uint32 snatch_type = 2;
  if (has_snatch_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->snatch_type(), target);
  }

  // optional uint32 snatch_count = 3;
  if (has_snatch_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->snatch_count(), target);
  }

  // optional uint32 total_snatch_count = 4;
  if (has_total_snatch_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->total_snatch_count(), target);
  }

  // repeated uint32 total_snatch_card = 5;
  for (int i = 0; i < this->total_snatch_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->total_snatch_card(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_everycolor_snatch_coin_broadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 snatch_type = 2;
    if (has_snatch_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->snatch_type());
    }

    // optional uint32 snatch_count = 3;
    if (has_snatch_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->snatch_count());
    }

    // optional uint32 total_snatch_count = 4;
    if (has_total_snatch_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_snatch_count());
    }

  }
  // repeated uint32 total_snatch_card = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->total_snatch_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->total_snatch_card(i));
    }
    total_size += 1 * this->total_snatch_card_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_everycolor_snatch_coin_broadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_everycolor_snatch_coin_broadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_everycolor_snatch_coin_broadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_everycolor_snatch_coin_broadcast::MergeFrom(const msg_everycolor_snatch_coin_broadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  total_snatch_card_.MergeFrom(from.total_snatch_card_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_snatch_type()) {
      set_snatch_type(from.snatch_type());
    }
    if (from.has_snatch_count()) {
      set_snatch_count(from.snatch_count());
    }
    if (from.has_total_snatch_count()) {
      set_total_snatch_count(from.total_snatch_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_everycolor_snatch_coin_broadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_everycolor_snatch_coin_broadcast::CopyFrom(const msg_everycolor_snatch_coin_broadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_everycolor_snatch_coin_broadcast::IsInitialized() const {

  return true;
}

void msg_everycolor_snatch_coin_broadcast::Swap(msg_everycolor_snatch_coin_broadcast* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(snatch_type_, other->snatch_type_);
    std::swap(snatch_count_, other->snatch_count_);
    std::swap(total_snatch_count_, other->total_snatch_count_);
    total_snatch_card_.Swap(&other->total_snatch_card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_everycolor_snatch_coin_broadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_everycolor_snatch_coin_broadcast_descriptor_;
  metadata.reflection = msg_everycolor_snatch_coin_broadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_everycolor_send_card_rep::kCardsFieldNumber;
#endif  // !_MSC_VER

msg_everycolor_send_card_rep::msg_everycolor_send_card_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_everycolor_send_card_rep::InitAsDefaultInstance() {
}

msg_everycolor_send_card_rep::msg_everycolor_send_card_rep(const msg_everycolor_send_card_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_everycolor_send_card_rep::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_everycolor_send_card_rep::~msg_everycolor_send_card_rep() {
  SharedDtor();
}

void msg_everycolor_send_card_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_everycolor_send_card_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_everycolor_send_card_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_everycolor_send_card_rep_descriptor_;
}

const msg_everycolor_send_card_rep& msg_everycolor_send_card_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_everycolor_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_everycolor_send_card_rep* msg_everycolor_send_card_rep::default_instance_ = NULL;

msg_everycolor_send_card_rep* msg_everycolor_send_card_rep::New() const {
  return new msg_everycolor_send_card_rep;
}

void msg_everycolor_send_card_rep::Clear() {
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_everycolor_send_card_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 cards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_cards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_everycolor_send_card_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 cards = 1;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->cards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_everycolor_send_card_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 cards = 1;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->cards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_everycolor_send_card_rep::ByteSize() const {
  int total_size = 0;

  // repeated uint32 cards = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_everycolor_send_card_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_everycolor_send_card_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_everycolor_send_card_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_everycolor_send_card_rep::MergeFrom(const msg_everycolor_send_card_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_everycolor_send_card_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_everycolor_send_card_rep::CopyFrom(const msg_everycolor_send_card_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_everycolor_send_card_rep::IsInitialized() const {

  return true;
}

void msg_everycolor_send_card_rep::Swap(msg_everycolor_send_card_rep* other) {
  if (other != this) {
    cards_.Swap(&other->cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_everycolor_send_card_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_everycolor_send_card_rep_descriptor_;
  metadata.reflection = msg_everycolor_send_card_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_everycolor_game_end::kTableCardsFieldNumber;
const int msg_everycolor_game_end::kWinScoreFlowerFieldNumber;
const int msg_everycolor_game_end::kWinScoreBigsmallFieldNumber;
const int msg_everycolor_game_end::kTimeLeaveFieldNumber;
#endif  // !_MSC_VER

msg_everycolor_game_end::msg_everycolor_game_end()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_everycolor_game_end::InitAsDefaultInstance() {
}

msg_everycolor_game_end::msg_everycolor_game_end(const msg_everycolor_game_end& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_everycolor_game_end::SharedCtor() {
  _cached_size_ = 0;
  table_cards_ = 0u;
  win_score_flower_ = GOOGLE_LONGLONG(0);
  win_score_bigsmall_ = GOOGLE_LONGLONG(0);
  time_leave_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_everycolor_game_end::~msg_everycolor_game_end() {
  SharedDtor();
}

void msg_everycolor_game_end::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_everycolor_game_end::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_everycolor_game_end::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_everycolor_game_end_descriptor_;
}

const msg_everycolor_game_end& msg_everycolor_game_end::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_everycolor_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_everycolor_game_end* msg_everycolor_game_end::default_instance_ = NULL;

msg_everycolor_game_end* msg_everycolor_game_end::New() const {
  return new msg_everycolor_game_end;
}

void msg_everycolor_game_end::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    table_cards_ = 0u;
    win_score_flower_ = GOOGLE_LONGLONG(0);
    win_score_bigsmall_ = GOOGLE_LONGLONG(0);
    time_leave_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_everycolor_game_end::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 table_cards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_cards_)));
          set_has_table_cards();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_win_score_flower;
        break;
      }

      // optional int64 win_score_flower = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_score_flower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &win_score_flower_)));
          set_has_win_score_flower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_win_score_bigsmall;
        break;
      }

      // optional int64 win_score_bigsmall = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_score_bigsmall:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &win_score_bigsmall_)));
          set_has_win_score_bigsmall();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time_leave;
        break;
      }

      // optional uint32 time_leave = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_leave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_leave_)));
          set_has_time_leave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_everycolor_game_end::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 table_cards = 1;
  if (has_table_cards()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->table_cards(), output);
  }

  // optional int64 win_score_flower = 2;
  if (has_win_score_flower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->win_score_flower(), output);
  }

  // optional int64 win_score_bigsmall = 3;
  if (has_win_score_bigsmall()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->win_score_bigsmall(), output);
  }

  // optional uint32 time_leave = 4;
  if (has_time_leave()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time_leave(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_everycolor_game_end::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 table_cards = 1;
  if (has_table_cards()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->table_cards(), target);
  }

  // optional int64 win_score_flower = 2;
  if (has_win_score_flower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->win_score_flower(), target);
  }

  // optional int64 win_score_bigsmall = 3;
  if (has_win_score_bigsmall()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->win_score_bigsmall(), target);
  }

  // optional uint32 time_leave = 4;
  if (has_time_leave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time_leave(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_everycolor_game_end::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 table_cards = 1;
    if (has_table_cards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_cards());
    }

    // optional int64 win_score_flower = 2;
    if (has_win_score_flower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->win_score_flower());
    }

    // optional int64 win_score_bigsmall = 3;
    if (has_win_score_bigsmall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->win_score_bigsmall());
    }

    // optional uint32 time_leave = 4;
    if (has_time_leave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_leave());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_everycolor_game_end::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_everycolor_game_end* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_everycolor_game_end*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_everycolor_game_end::MergeFrom(const msg_everycolor_game_end& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_cards()) {
      set_table_cards(from.table_cards());
    }
    if (from.has_win_score_flower()) {
      set_win_score_flower(from.win_score_flower());
    }
    if (from.has_win_score_bigsmall()) {
      set_win_score_bigsmall(from.win_score_bigsmall());
    }
    if (from.has_time_leave()) {
      set_time_leave(from.time_leave());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_everycolor_game_end::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_everycolor_game_end::CopyFrom(const msg_everycolor_game_end& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_everycolor_game_end::IsInitialized() const {

  return true;
}

void msg_everycolor_game_end::Swap(msg_everycolor_game_end* other) {
  if (other != this) {
    std::swap(table_cards_, other->table_cards_);
    std::swap(win_score_flower_, other->win_score_flower_);
    std::swap(win_score_bigsmall_, other->win_score_bigsmall_);
    std::swap(time_leave_, other->time_leave_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_everycolor_game_end::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_everycolor_game_end_descriptor_;
  metadata.reflection = msg_everycolor_game_end_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_everycolor_snatch_coin_game_status_rep::kSnatchTypeFieldNumber;
const int msg_everycolor_snatch_coin_game_status_rep::kGameStatusFieldNumber;
const int msg_everycolor_snatch_coin_game_status_rep::kTimeLeaveFieldNumber;
#endif  // !_MSC_VER

msg_everycolor_snatch_coin_game_status_rep::msg_everycolor_snatch_coin_game_status_rep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_everycolor_snatch_coin_game_status_rep::InitAsDefaultInstance() {
}

msg_everycolor_snatch_coin_game_status_rep::msg_everycolor_snatch_coin_game_status_rep(const msg_everycolor_snatch_coin_game_status_rep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_everycolor_snatch_coin_game_status_rep::SharedCtor() {
  _cached_size_ = 0;
  snatch_type_ = 0u;
  game_status_ = 0u;
  time_leave_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_everycolor_snatch_coin_game_status_rep::~msg_everycolor_snatch_coin_game_status_rep() {
  SharedDtor();
}

void msg_everycolor_snatch_coin_game_status_rep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_everycolor_snatch_coin_game_status_rep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_everycolor_snatch_coin_game_status_rep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_everycolor_snatch_coin_game_status_rep_descriptor_;
}

const msg_everycolor_snatch_coin_game_status_rep& msg_everycolor_snatch_coin_game_status_rep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_everycolor_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_everycolor_snatch_coin_game_status_rep* msg_everycolor_snatch_coin_game_status_rep::default_instance_ = NULL;

msg_everycolor_snatch_coin_game_status_rep* msg_everycolor_snatch_coin_game_status_rep::New() const {
  return new msg_everycolor_snatch_coin_game_status_rep;
}

void msg_everycolor_snatch_coin_game_status_rep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    snatch_type_ = 0u;
    game_status_ = 0u;
    time_leave_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_everycolor_snatch_coin_game_status_rep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 snatch_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &snatch_type_)));
          set_has_snatch_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_status;
        break;
      }

      // optional uint32 game_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_status_)));
          set_has_game_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time_leave;
        break;
      }

      // optional uint32 time_leave = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_leave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_leave_)));
          set_has_time_leave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_everycolor_snatch_coin_game_status_rep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 snatch_type = 1;
  if (has_snatch_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->snatch_type(), output);
  }

  // optional uint32 game_status = 2;
  if (has_game_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_status(), output);
  }

  // optional uint32 time_leave = 3;
  if (has_time_leave()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_leave(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_everycolor_snatch_coin_game_status_rep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 snatch_type = 1;
  if (has_snatch_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->snatch_type(), target);
  }

  // optional uint32 game_status = 2;
  if (has_game_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_status(), target);
  }

  // optional uint32 time_leave = 3;
  if (has_time_leave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_leave(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_everycolor_snatch_coin_game_status_rep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 snatch_type = 1;
    if (has_snatch_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->snatch_type());
    }

    // optional uint32 game_status = 2;
    if (has_game_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_status());
    }

    // optional uint32 time_leave = 3;
    if (has_time_leave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_leave());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_everycolor_snatch_coin_game_status_rep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_everycolor_snatch_coin_game_status_rep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_everycolor_snatch_coin_game_status_rep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_everycolor_snatch_coin_game_status_rep::MergeFrom(const msg_everycolor_snatch_coin_game_status_rep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_snatch_type()) {
      set_snatch_type(from.snatch_type());
    }
    if (from.has_game_status()) {
      set_game_status(from.game_status());
    }
    if (from.has_time_leave()) {
      set_time_leave(from.time_leave());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_everycolor_snatch_coin_game_status_rep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_everycolor_snatch_coin_game_status_rep::CopyFrom(const msg_everycolor_snatch_coin_game_status_rep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_everycolor_snatch_coin_game_status_rep::IsInitialized() const {

  return true;
}

void msg_everycolor_snatch_coin_game_status_rep::Swap(msg_everycolor_snatch_coin_game_status_rep* other) {
  if (other != this) {
    std::swap(snatch_type_, other->snatch_type_);
    std::swap(game_status_, other->game_status_);
    std::swap(time_leave_, other->time_leave_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_everycolor_snatch_coin_game_status_rep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_everycolor_snatch_coin_game_status_rep_descriptor_;
  metadata.reflection = msg_everycolor_snatch_coin_game_status_rep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_everycolor_snatch_coin_game_end::kSnatchTypeFieldNumber;
const int msg_everycolor_snatch_coin_game_end::kTableCardsFieldNumber;
const int msg_everycolor_snatch_coin_game_end::kWinUidFieldNumber;
const int msg_everycolor_snatch_coin_game_end::kWinScoreFieldNumber;
const int msg_everycolor_snatch_coin_game_end::kPeriodsNumFieldNumber;
#endif  // !_MSC_VER

msg_everycolor_snatch_coin_game_end::msg_everycolor_snatch_coin_game_end()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_everycolor_snatch_coin_game_end::InitAsDefaultInstance() {
}

msg_everycolor_snatch_coin_game_end::msg_everycolor_snatch_coin_game_end(const msg_everycolor_snatch_coin_game_end& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_everycolor_snatch_coin_game_end::SharedCtor() {
  _cached_size_ = 0;
  snatch_type_ = 0u;
  table_cards_ = 0u;
  win_uid_ = 0u;
  win_score_ = GOOGLE_LONGLONG(0);
  periods_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_everycolor_snatch_coin_game_end::~msg_everycolor_snatch_coin_game_end() {
  SharedDtor();
}

void msg_everycolor_snatch_coin_game_end::SharedDtor() {
  if (periods_num_ != &::google::protobuf::internal::kEmptyString) {
    delete periods_num_;
  }
  if (this != default_instance_) {
  }
}

void msg_everycolor_snatch_coin_game_end::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_everycolor_snatch_coin_game_end::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_everycolor_snatch_coin_game_end_descriptor_;
}

const msg_everycolor_snatch_coin_game_end& msg_everycolor_snatch_coin_game_end::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_everycolor_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_everycolor_snatch_coin_game_end* msg_everycolor_snatch_coin_game_end::default_instance_ = NULL;

msg_everycolor_snatch_coin_game_end* msg_everycolor_snatch_coin_game_end::New() const {
  return new msg_everycolor_snatch_coin_game_end;
}

void msg_everycolor_snatch_coin_game_end::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    snatch_type_ = 0u;
    table_cards_ = 0u;
    win_uid_ = 0u;
    win_score_ = GOOGLE_LONGLONG(0);
    if (has_periods_num()) {
      if (periods_num_ != &::google::protobuf::internal::kEmptyString) {
        periods_num_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_everycolor_snatch_coin_game_end::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 snatch_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &snatch_type_)));
          set_has_snatch_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_table_cards;
        break;
      }

      // optional uint32 table_cards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_cards_)));
          set_has_table_cards();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_win_uid;
        break;
      }

      // optional uint32 win_uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_uid_)));
          set_has_win_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_win_score;
        break;
      }

      // optional int64 win_score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &win_score_)));
          set_has_win_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_periods_num;
        break;
      }

      // optional bytes periods_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_periods_num:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_periods_num()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_everycolor_snatch_coin_game_end::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 snatch_type = 1;
  if (has_snatch_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->snatch_type(), output);
  }

  // optional uint32 table_cards = 2;
  if (has_table_cards()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->table_cards(), output);
  }

  // optional uint32 win_uid = 3;
  if (has_win_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->win_uid(), output);
  }

  // optional int64 win_score = 4;
  if (has_win_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->win_score(), output);
  }

  // optional bytes periods_num = 5;
  if (has_periods_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->periods_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_everycolor_snatch_coin_game_end::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 snatch_type = 1;
  if (has_snatch_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->snatch_type(), target);
  }

  // optional uint32 table_cards = 2;
  if (has_table_cards()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->table_cards(), target);
  }

  // optional uint32 win_uid = 3;
  if (has_win_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->win_uid(), target);
  }

  // optional int64 win_score = 4;
  if (has_win_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->win_score(), target);
  }

  // optional bytes periods_num = 5;
  if (has_periods_num()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->periods_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_everycolor_snatch_coin_game_end::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 snatch_type = 1;
    if (has_snatch_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->snatch_type());
    }

    // optional uint32 table_cards = 2;
    if (has_table_cards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_cards());
    }

    // optional uint32 win_uid = 3;
    if (has_win_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win_uid());
    }

    // optional int64 win_score = 4;
    if (has_win_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->win_score());
    }

    // optional bytes periods_num = 5;
    if (has_periods_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->periods_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_everycolor_snatch_coin_game_end::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_everycolor_snatch_coin_game_end* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_everycolor_snatch_coin_game_end*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_everycolor_snatch_coin_game_end::MergeFrom(const msg_everycolor_snatch_coin_game_end& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_snatch_type()) {
      set_snatch_type(from.snatch_type());
    }
    if (from.has_table_cards()) {
      set_table_cards(from.table_cards());
    }
    if (from.has_win_uid()) {
      set_win_uid(from.win_uid());
    }
    if (from.has_win_score()) {
      set_win_score(from.win_score());
    }
    if (from.has_periods_num()) {
      set_periods_num(from.periods_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_everycolor_snatch_coin_game_end::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_everycolor_snatch_coin_game_end::CopyFrom(const msg_everycolor_snatch_coin_game_end& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_everycolor_snatch_coin_game_end::IsInitialized() const {

  return true;
}

void msg_everycolor_snatch_coin_game_end::Swap(msg_everycolor_snatch_coin_game_end* other) {
  if (other != this) {
    std::swap(snatch_type_, other->snatch_type_);
    std::swap(table_cards_, other->table_cards_);
    std::swap(win_uid_, other->win_uid_);
    std::swap(win_score_, other->win_score_);
    std::swap(periods_num_, other->periods_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_everycolor_snatch_coin_game_end::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_everycolor_snatch_coin_game_end_descriptor_;
  metadata.reflection = msg_everycolor_snatch_coin_game_end_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_everycolor_snatch_coin_state::kStopStateFieldNumber;
#endif  // !_MSC_VER

msg_everycolor_snatch_coin_state::msg_everycolor_snatch_coin_state()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_everycolor_snatch_coin_state::InitAsDefaultInstance() {
}

msg_everycolor_snatch_coin_state::msg_everycolor_snatch_coin_state(const msg_everycolor_snatch_coin_state& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_everycolor_snatch_coin_state::SharedCtor() {
  _cached_size_ = 0;
  stop_state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_everycolor_snatch_coin_state::~msg_everycolor_snatch_coin_state() {
  SharedDtor();
}

void msg_everycolor_snatch_coin_state::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_everycolor_snatch_coin_state::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_everycolor_snatch_coin_state::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_everycolor_snatch_coin_state_descriptor_;
}

const msg_everycolor_snatch_coin_state& msg_everycolor_snatch_coin_state::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_everycolor_5flogic_5fmsg_2eproto();
  return *default_instance_;
}

msg_everycolor_snatch_coin_state* msg_everycolor_snatch_coin_state::default_instance_ = NULL;

msg_everycolor_snatch_coin_state* msg_everycolor_snatch_coin_state::New() const {
  return new msg_everycolor_snatch_coin_state;
}

void msg_everycolor_snatch_coin_state::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stop_state_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_everycolor_snatch_coin_state::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stop_state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stop_state_)));
          set_has_stop_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_everycolor_snatch_coin_state::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 stop_state = 1;
  if (has_stop_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stop_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_everycolor_snatch_coin_state::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 stop_state = 1;
  if (has_stop_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stop_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_everycolor_snatch_coin_state::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 stop_state = 1;
    if (has_stop_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stop_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_everycolor_snatch_coin_state::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_everycolor_snatch_coin_state* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_everycolor_snatch_coin_state*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_everycolor_snatch_coin_state::MergeFrom(const msg_everycolor_snatch_coin_state& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stop_state()) {
      set_stop_state(from.stop_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_everycolor_snatch_coin_state::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_everycolor_snatch_coin_state::CopyFrom(const msg_everycolor_snatch_coin_state& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_everycolor_snatch_coin_state::IsInitialized() const {

  return true;
}

void msg_everycolor_snatch_coin_state::Swap(msg_everycolor_snatch_coin_state* other) {
  if (other != this) {
    std::swap(stop_state_, other->stop_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_everycolor_snatch_coin_state::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_everycolor_snatch_coin_state_descriptor_;
  metadata.reflection = msg_everycolor_snatch_coin_state_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace net

// @@protoc_insertion_point(global_scope)
