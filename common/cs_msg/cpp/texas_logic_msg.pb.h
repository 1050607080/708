// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: texas_logic_msg.proto

#ifndef PROTOBUF_texas_5flogic_5fmsg_2eproto__INCLUDED
#define PROTOBUF_texas_5flogic_5fmsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "base_msg_struct.pb.h"
#include "error_code.pb.h"
// @@protoc_insertion_point(includes)

namespace net {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_texas_5flogic_5fmsg_2eproto();
void protobuf_AssignDesc_texas_5flogic_5fmsg_2eproto();
void protobuf_ShutdownFile_texas_5flogic_5fmsg_2eproto();

class msg_texas_game_info_free_rep;
class msg_texas_game_info_play_rep;
class msg_texas_start_rep;
class msg_texas_addscore_req;
class msg_texas_addscore_rep;
class msg_texas_giveup_req;
class msg_texas_giveup_rep;
class msg_texas_sendcard_rep;
class texas_win_chair;
class msg_texas_game_end_rep;
class msg_texas_buyin_req;
class msg_texas_buyin_rep;
class msg_texas_buyin_next_req;
class msg_texas_buyin_next_rep;
class msg_texas_buyin_next_suc_rep;
class msg_texas_show_card_req;
class msg_texas_show_card_rep;
class msg_texas_standup_table_rep;
class msg_texas_buyin_wait_standup_rep;

// ===================================================================

class msg_texas_game_info_free_rep : public ::google::protobuf::Message {
 public:
  msg_texas_game_info_free_rep();
  virtual ~msg_texas_game_info_free_rep();

  msg_texas_game_info_free_rep(const msg_texas_game_info_free_rep& from);

  inline msg_texas_game_info_free_rep& operator=(const msg_texas_game_info_free_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_texas_game_info_free_rep& default_instance();

  void Swap(msg_texas_game_info_free_rep* other);

  // implements Message ----------------------------------------------

  msg_texas_game_info_free_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_texas_game_info_free_rep& from);
  void MergeFrom(const msg_texas_game_info_free_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 cell_minscore = 1;
  inline bool has_cell_minscore() const;
  inline void clear_cell_minscore();
  static const int kCellMinscoreFieldNumber = 1;
  inline ::google::protobuf::int64 cell_minscore() const;
  inline void set_cell_minscore(::google::protobuf::int64 value);

  // optional int64 cell_maxscore = 2;
  inline bool has_cell_maxscore() const;
  inline void clear_cell_maxscore();
  static const int kCellMaxscoreFieldNumber = 2;
  inline ::google::protobuf::int64 cell_maxscore() const;
  inline void set_cell_maxscore(::google::protobuf::int64 value);

  // optional int32 buyin_state = 3;
  inline bool has_buyin_state() const;
  inline void clear_buyin_state();
  static const int kBuyinStateFieldNumber = 3;
  inline ::google::protobuf::int32 buyin_state() const;
  inline void set_buyin_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:net.msg_texas_game_info_free_rep)
 private:
  inline void set_has_cell_minscore();
  inline void clear_has_cell_minscore();
  inline void set_has_cell_maxscore();
  inline void clear_has_cell_maxscore();
  inline void set_has_buyin_state();
  inline void clear_has_buyin_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 cell_minscore_;
  ::google::protobuf::int64 cell_maxscore_;
  ::google::protobuf::int32 buyin_state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_texas_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_texas_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_texas_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_texas_game_info_free_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_texas_game_info_play_rep : public ::google::protobuf::Message {
 public:
  msg_texas_game_info_play_rep();
  virtual ~msg_texas_game_info_play_rep();

  msg_texas_game_info_play_rep(const msg_texas_game_info_play_rep& from);

  inline msg_texas_game_info_play_rep& operator=(const msg_texas_game_info_play_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_texas_game_info_play_rep& default_instance();

  void Swap(msg_texas_game_info_play_rep* other);

  // implements Message ----------------------------------------------

  msg_texas_game_info_play_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_texas_game_info_play_rep& from);
  void MergeFrom(const msg_texas_game_info_play_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 cell_score = 1;
  inline bool has_cell_score() const;
  inline void clear_cell_score();
  static const int kCellScoreFieldNumber = 1;
  inline ::google::protobuf::int64 cell_score() const;
  inline void set_cell_score(::google::protobuf::int64 value);

  // optional int64 turn_max_score = 2;
  inline bool has_turn_max_score() const;
  inline void clear_turn_max_score();
  static const int kTurnMaxScoreFieldNumber = 2;
  inline ::google::protobuf::int64 turn_max_score() const;
  inline void set_turn_max_score(::google::protobuf::int64 value);

  // optional int64 turn_less_score = 3;
  inline bool has_turn_less_score() const;
  inline void clear_turn_less_score();
  static const int kTurnLessScoreFieldNumber = 3;
  inline ::google::protobuf::int64 turn_less_score() const;
  inline void set_turn_less_score(::google::protobuf::int64 value);

  // optional int64 cell_max_score = 4;
  inline bool has_cell_max_score() const;
  inline void clear_cell_max_score();
  static const int kCellMaxScoreFieldNumber = 4;
  inline ::google::protobuf::int64 cell_max_score() const;
  inline void set_cell_max_score(::google::protobuf::int64 value);

  // optional int64 add_less_score = 5;
  inline bool has_add_less_score() const;
  inline void clear_add_less_score();
  static const int kAddLessScoreFieldNumber = 5;
  inline ::google::protobuf::int64 add_less_score() const;
  inline void set_add_less_score(::google::protobuf::int64 value);

  // repeated int64 table_scores = 6;
  inline int table_scores_size() const;
  inline void clear_table_scores();
  static const int kTableScoresFieldNumber = 6;
  inline ::google::protobuf::int64 table_scores(int index) const;
  inline void set_table_scores(int index, ::google::protobuf::int64 value);
  inline void add_table_scores(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      table_scores() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_table_scores();

  // repeated int64 total_scores = 7;
  inline int total_scores_size() const;
  inline void clear_total_scores();
  static const int kTotalScoresFieldNumber = 7;
  inline ::google::protobuf::int64 total_scores(int index) const;
  inline void set_total_scores(int index, ::google::protobuf::int64 value);
  inline void add_total_scores(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      total_scores() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_total_scores();

  // optional int64 center_score = 8;
  inline bool has_center_score() const;
  inline void clear_center_score();
  static const int kCenterScoreFieldNumber = 8;
  inline ::google::protobuf::int64 center_score() const;
  inline void set_center_score(::google::protobuf::int64 value);

  // optional uint32 d_user = 9;
  inline bool has_d_user() const;
  inline void clear_d_user();
  static const int kDUserFieldNumber = 9;
  inline ::google::protobuf::uint32 d_user() const;
  inline void set_d_user(::google::protobuf::uint32 value);

  // optional uint32 current_user = 10;
  inline bool has_current_user() const;
  inline void clear_current_user();
  static const int kCurrentUserFieldNumber = 10;
  inline ::google::protobuf::uint32 current_user() const;
  inline void set_current_user(::google::protobuf::uint32 value);

  // repeated uint32 play_status = 11;
  inline int play_status_size() const;
  inline void clear_play_status();
  static const int kPlayStatusFieldNumber = 11;
  inline ::google::protobuf::uint32 play_status(int index) const;
  inline void set_play_status(int index, ::google::protobuf::uint32 value);
  inline void add_play_status(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      play_status() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_play_status();

  // optional uint32 balance_count = 12;
  inline bool has_balance_count() const;
  inline void clear_balance_count();
  static const int kBalanceCountFieldNumber = 12;
  inline ::google::protobuf::uint32 balance_count() const;
  inline void set_balance_count(::google::protobuf::uint32 value);

  // repeated uint32 center_cards = 13;
  inline int center_cards_size() const;
  inline void clear_center_cards();
  static const int kCenterCardsFieldNumber = 13;
  inline ::google::protobuf::uint32 center_cards(int index) const;
  inline void set_center_cards(int index, ::google::protobuf::uint32 value);
  inline void add_center_cards(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      center_cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_center_cards();

  // repeated uint32 hand_cards = 14;
  inline int hand_cards_size() const;
  inline void clear_hand_cards();
  static const int kHandCardsFieldNumber = 14;
  inline ::google::protobuf::uint32 hand_cards(int index) const;
  inline void set_hand_cards(int index, ::google::protobuf::uint32 value);
  inline void add_hand_cards(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      hand_cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_hand_cards();

  // optional uint32 oper_time = 15;
  inline bool has_oper_time() const;
  inline void clear_oper_time();
  static const int kOperTimeFieldNumber = 15;
  inline ::google::protobuf::uint32 oper_time() const;
  inline void set_oper_time(::google::protobuf::uint32 value);

  // optional uint32 min_chipin_user = 16;
  inline bool has_min_chipin_user() const;
  inline void clear_min_chipin_user();
  static const int kMinChipinUserFieldNumber = 16;
  inline ::google::protobuf::uint32 min_chipin_user() const;
  inline void set_min_chipin_user(::google::protobuf::uint32 value);

  // optional uint32 max_chipin_user = 17;
  inline bool has_max_chipin_user() const;
  inline void clear_max_chipin_user();
  static const int kMaxChipinUserFieldNumber = 17;
  inline ::google::protobuf::uint32 max_chipin_user() const;
  inline void set_max_chipin_user(::google::protobuf::uint32 value);

  // repeated uint32 card_chairid = 18;
  inline int card_chairid_size() const;
  inline void clear_card_chairid();
  static const int kCardChairidFieldNumber = 18;
  inline ::google::protobuf::uint32 card_chairid(int index) const;
  inline void set_card_chairid(int index, ::google::protobuf::uint32 value);
  inline void add_card_chairid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      card_chairid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_card_chairid();

  // optional int32 buyin_state = 19;
  inline bool has_buyin_state() const;
  inline void clear_buyin_state();
  static const int kBuyinStateFieldNumber = 19;
  inline ::google::protobuf::int32 buyin_state() const;
  inline void set_buyin_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:net.msg_texas_game_info_play_rep)
 private:
  inline void set_has_cell_score();
  inline void clear_has_cell_score();
  inline void set_has_turn_max_score();
  inline void clear_has_turn_max_score();
  inline void set_has_turn_less_score();
  inline void clear_has_turn_less_score();
  inline void set_has_cell_max_score();
  inline void clear_has_cell_max_score();
  inline void set_has_add_less_score();
  inline void clear_has_add_less_score();
  inline void set_has_center_score();
  inline void clear_has_center_score();
  inline void set_has_d_user();
  inline void clear_has_d_user();
  inline void set_has_current_user();
  inline void clear_has_current_user();
  inline void set_has_balance_count();
  inline void clear_has_balance_count();
  inline void set_has_oper_time();
  inline void clear_has_oper_time();
  inline void set_has_min_chipin_user();
  inline void clear_has_min_chipin_user();
  inline void set_has_max_chipin_user();
  inline void clear_has_max_chipin_user();
  inline void set_has_buyin_state();
  inline void clear_has_buyin_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 cell_score_;
  ::google::protobuf::int64 turn_max_score_;
  ::google::protobuf::int64 turn_less_score_;
  ::google::protobuf::int64 cell_max_score_;
  ::google::protobuf::int64 add_less_score_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > table_scores_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > total_scores_;
  ::google::protobuf::int64 center_score_;
  ::google::protobuf::uint32 d_user_;
  ::google::protobuf::uint32 current_user_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > play_status_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > center_cards_;
  ::google::protobuf::uint32 balance_count_;
  ::google::protobuf::uint32 oper_time_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > hand_cards_;
  ::google::protobuf::uint32 min_chipin_user_;
  ::google::protobuf::uint32 max_chipin_user_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > card_chairid_;
  ::google::protobuf::int32 buyin_state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];

  friend void  protobuf_AddDesc_texas_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_texas_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_texas_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_texas_game_info_play_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_texas_start_rep : public ::google::protobuf::Message {
 public:
  msg_texas_start_rep();
  virtual ~msg_texas_start_rep();

  msg_texas_start_rep(const msg_texas_start_rep& from);

  inline msg_texas_start_rep& operator=(const msg_texas_start_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_texas_start_rep& default_instance();

  void Swap(msg_texas_start_rep* other);

  // implements Message ----------------------------------------------

  msg_texas_start_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_texas_start_rep& from);
  void MergeFrom(const msg_texas_start_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 current_user = 1;
  inline bool has_current_user() const;
  inline void clear_current_user();
  static const int kCurrentUserFieldNumber = 1;
  inline ::google::protobuf::uint32 current_user() const;
  inline void set_current_user(::google::protobuf::uint32 value);

  // optional uint32 d_user = 2;
  inline bool has_d_user() const;
  inline void clear_d_user();
  static const int kDUserFieldNumber = 2;
  inline ::google::protobuf::uint32 d_user() const;
  inline void set_d_user(::google::protobuf::uint32 value);

  // optional uint32 max_chipin_user = 3;
  inline bool has_max_chipin_user() const;
  inline void clear_max_chipin_user();
  static const int kMaxChipinUserFieldNumber = 3;
  inline ::google::protobuf::uint32 max_chipin_user() const;
  inline void set_max_chipin_user(::google::protobuf::uint32 value);

  // optional int64 cell_score = 4;
  inline bool has_cell_score() const;
  inline void clear_cell_score();
  static const int kCellScoreFieldNumber = 4;
  inline ::google::protobuf::int64 cell_score() const;
  inline void set_cell_score(::google::protobuf::int64 value);

  // optional int64 turn_max_score = 5;
  inline bool has_turn_max_score() const;
  inline void clear_turn_max_score();
  static const int kTurnMaxScoreFieldNumber = 5;
  inline ::google::protobuf::int64 turn_max_score() const;
  inline void set_turn_max_score(::google::protobuf::int64 value);

  // optional int64 turn_less_score = 6;
  inline bool has_turn_less_score() const;
  inline void clear_turn_less_score();
  static const int kTurnLessScoreFieldNumber = 6;
  inline ::google::protobuf::int64 turn_less_score() const;
  inline void set_turn_less_score(::google::protobuf::int64 value);

  // optional int64 add_less_score = 7;
  inline bool has_add_less_score() const;
  inline void clear_add_less_score();
  static const int kAddLessScoreFieldNumber = 7;
  inline ::google::protobuf::int64 add_less_score() const;
  inline void set_add_less_score(::google::protobuf::int64 value);

  // optional .net.msg_cards card_datas = 8;
  inline bool has_card_datas() const;
  inline void clear_card_datas();
  static const int kCardDatasFieldNumber = 8;
  inline const ::net::msg_cards& card_datas() const;
  inline ::net::msg_cards* mutable_card_datas();
  inline ::net::msg_cards* release_card_datas();
  inline void set_allocated_card_datas(::net::msg_cards* card_datas);

  // optional uint32 min_chipin_user = 9;
  inline bool has_min_chipin_user() const;
  inline void clear_min_chipin_user();
  static const int kMinChipinUserFieldNumber = 9;
  inline ::google::protobuf::uint32 min_chipin_user() const;
  inline void set_min_chipin_user(::google::protobuf::uint32 value);

  // repeated uint32 card_chairid = 10;
  inline int card_chairid_size() const;
  inline void clear_card_chairid();
  static const int kCardChairidFieldNumber = 10;
  inline ::google::protobuf::uint32 card_chairid(int index) const;
  inline void set_card_chairid(int index, ::google::protobuf::uint32 value);
  inline void add_card_chairid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      card_chairid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_card_chairid();

  // @@protoc_insertion_point(class_scope:net.msg_texas_start_rep)
 private:
  inline void set_has_current_user();
  inline void clear_has_current_user();
  inline void set_has_d_user();
  inline void clear_has_d_user();
  inline void set_has_max_chipin_user();
  inline void clear_has_max_chipin_user();
  inline void set_has_cell_score();
  inline void clear_has_cell_score();
  inline void set_has_turn_max_score();
  inline void clear_has_turn_max_score();
  inline void set_has_turn_less_score();
  inline void clear_has_turn_less_score();
  inline void set_has_add_less_score();
  inline void clear_has_add_less_score();
  inline void set_has_card_datas();
  inline void clear_has_card_datas();
  inline void set_has_min_chipin_user();
  inline void clear_has_min_chipin_user();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 current_user_;
  ::google::protobuf::uint32 d_user_;
  ::google::protobuf::int64 cell_score_;
  ::google::protobuf::int64 turn_max_score_;
  ::google::protobuf::int64 turn_less_score_;
  ::google::protobuf::uint32 max_chipin_user_;
  ::google::protobuf::uint32 min_chipin_user_;
  ::google::protobuf::int64 add_less_score_;
  ::net::msg_cards* card_datas_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > card_chairid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_texas_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_texas_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_texas_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_texas_start_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_texas_addscore_req : public ::google::protobuf::Message {
 public:
  msg_texas_addscore_req();
  virtual ~msg_texas_addscore_req();

  msg_texas_addscore_req(const msg_texas_addscore_req& from);

  inline msg_texas_addscore_req& operator=(const msg_texas_addscore_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_texas_addscore_req& default_instance();

  void Swap(msg_texas_addscore_req* other);

  // implements Message ----------------------------------------------

  msg_texas_addscore_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_texas_addscore_req& from);
  void MergeFrom(const msg_texas_addscore_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 add_score = 1;
  inline bool has_add_score() const;
  inline void clear_add_score();
  static const int kAddScoreFieldNumber = 1;
  inline ::google::protobuf::int64 add_score() const;
  inline void set_add_score(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:net.msg_texas_addscore_req)
 private:
  inline void set_has_add_score();
  inline void clear_has_add_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 add_score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_texas_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_texas_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_texas_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_texas_addscore_req* default_instance_;
};
// -------------------------------------------------------------------

class msg_texas_addscore_rep : public ::google::protobuf::Message {
 public:
  msg_texas_addscore_rep();
  virtual ~msg_texas_addscore_rep();

  msg_texas_addscore_rep(const msg_texas_addscore_rep& from);

  inline msg_texas_addscore_rep& operator=(const msg_texas_addscore_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_texas_addscore_rep& default_instance();

  void Swap(msg_texas_addscore_rep* other);

  // implements Message ----------------------------------------------

  msg_texas_addscore_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_texas_addscore_rep& from);
  void MergeFrom(const msg_texas_addscore_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 current_user = 1;
  inline bool has_current_user() const;
  inline void clear_current_user();
  static const int kCurrentUserFieldNumber = 1;
  inline ::google::protobuf::uint32 current_user() const;
  inline void set_current_user(::google::protobuf::uint32 value);

  // optional uint32 addscore_user = 2;
  inline bool has_addscore_user() const;
  inline void clear_addscore_user();
  static const int kAddscoreUserFieldNumber = 2;
  inline ::google::protobuf::uint32 addscore_user() const;
  inline void set_addscore_user(::google::protobuf::uint32 value);

  // optional int64 addscore_count = 3;
  inline bool has_addscore_count() const;
  inline void clear_addscore_count();
  static const int kAddscoreCountFieldNumber = 3;
  inline ::google::protobuf::int64 addscore_count() const;
  inline void set_addscore_count(::google::protobuf::int64 value);

  // optional int64 turn_less_score = 4;
  inline bool has_turn_less_score() const;
  inline void clear_turn_less_score();
  static const int kTurnLessScoreFieldNumber = 4;
  inline ::google::protobuf::int64 turn_less_score() const;
  inline void set_turn_less_score(::google::protobuf::int64 value);

  // optional int64 turn_max_score = 5;
  inline bool has_turn_max_score() const;
  inline void clear_turn_max_score();
  static const int kTurnMaxScoreFieldNumber = 5;
  inline ::google::protobuf::int64 turn_max_score() const;
  inline void set_turn_max_score(::google::protobuf::int64 value);

  // optional int64 add_less_score = 6;
  inline bool has_add_less_score() const;
  inline void clear_add_less_score();
  static const int kAddLessScoreFieldNumber = 6;
  inline ::google::protobuf::int64 add_less_score() const;
  inline void set_add_less_score(::google::protobuf::int64 value);

  // repeated uint32 showhands = 7;
  inline int showhands_size() const;
  inline void clear_showhands();
  static const int kShowhandsFieldNumber = 7;
  inline ::google::protobuf::uint32 showhands(int index) const;
  inline void set_showhands(int index, ::google::protobuf::uint32 value);
  inline void add_showhands(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      showhands() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_showhands();

  // @@protoc_insertion_point(class_scope:net.msg_texas_addscore_rep)
 private:
  inline void set_has_current_user();
  inline void clear_has_current_user();
  inline void set_has_addscore_user();
  inline void clear_has_addscore_user();
  inline void set_has_addscore_count();
  inline void clear_has_addscore_count();
  inline void set_has_turn_less_score();
  inline void clear_has_turn_less_score();
  inline void set_has_turn_max_score();
  inline void clear_has_turn_max_score();
  inline void set_has_add_less_score();
  inline void clear_has_add_less_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 current_user_;
  ::google::protobuf::uint32 addscore_user_;
  ::google::protobuf::int64 addscore_count_;
  ::google::protobuf::int64 turn_less_score_;
  ::google::protobuf::int64 turn_max_score_;
  ::google::protobuf::int64 add_less_score_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > showhands_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_texas_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_texas_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_texas_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_texas_addscore_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_texas_giveup_req : public ::google::protobuf::Message {
 public:
  msg_texas_giveup_req();
  virtual ~msg_texas_giveup_req();

  msg_texas_giveup_req(const msg_texas_giveup_req& from);

  inline msg_texas_giveup_req& operator=(const msg_texas_giveup_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_texas_giveup_req& default_instance();

  void Swap(msg_texas_giveup_req* other);

  // implements Message ----------------------------------------------

  msg_texas_giveup_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_texas_giveup_req& from);
  void MergeFrom(const msg_texas_giveup_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 giveup_reason = 1;
  inline bool has_giveup_reason() const;
  inline void clear_giveup_reason();
  static const int kGiveupReasonFieldNumber = 1;
  inline ::google::protobuf::uint32 giveup_reason() const;
  inline void set_giveup_reason(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_texas_giveup_req)
 private:
  inline void set_has_giveup_reason();
  inline void clear_has_giveup_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 giveup_reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_texas_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_texas_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_texas_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_texas_giveup_req* default_instance_;
};
// -------------------------------------------------------------------

class msg_texas_giveup_rep : public ::google::protobuf::Message {
 public:
  msg_texas_giveup_rep();
  virtual ~msg_texas_giveup_rep();

  msg_texas_giveup_rep(const msg_texas_giveup_rep& from);

  inline msg_texas_giveup_rep& operator=(const msg_texas_giveup_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_texas_giveup_rep& default_instance();

  void Swap(msg_texas_giveup_rep* other);

  // implements Message ----------------------------------------------

  msg_texas_giveup_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_texas_giveup_rep& from);
  void MergeFrom(const msg_texas_giveup_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 giveup_user = 1;
  inline bool has_giveup_user() const;
  inline void clear_giveup_user();
  static const int kGiveupUserFieldNumber = 1;
  inline ::google::protobuf::uint32 giveup_user() const;
  inline void set_giveup_user(::google::protobuf::uint32 value);

  // optional int64 lost_score = 2;
  inline bool has_lost_score() const;
  inline void clear_lost_score();
  static const int kLostScoreFieldNumber = 2;
  inline ::google::protobuf::int64 lost_score() const;
  inline void set_lost_score(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:net.msg_texas_giveup_rep)
 private:
  inline void set_has_giveup_user();
  inline void clear_has_giveup_user();
  inline void set_has_lost_score();
  inline void clear_has_lost_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 lost_score_;
  ::google::protobuf::uint32 giveup_user_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_texas_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_texas_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_texas_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_texas_giveup_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_texas_sendcard_rep : public ::google::protobuf::Message {
 public:
  msg_texas_sendcard_rep();
  virtual ~msg_texas_sendcard_rep();

  msg_texas_sendcard_rep(const msg_texas_sendcard_rep& from);

  inline msg_texas_sendcard_rep& operator=(const msg_texas_sendcard_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_texas_sendcard_rep& default_instance();

  void Swap(msg_texas_sendcard_rep* other);

  // implements Message ----------------------------------------------

  msg_texas_sendcard_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_texas_sendcard_rep& from);
  void MergeFrom(const msg_texas_sendcard_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 public_card = 1;
  inline bool has_public_card() const;
  inline void clear_public_card();
  static const int kPublicCardFieldNumber = 1;
  inline ::google::protobuf::uint32 public_card() const;
  inline void set_public_card(::google::protobuf::uint32 value);

  // optional uint32 current_user = 2;
  inline bool has_current_user() const;
  inline void clear_current_user();
  static const int kCurrentUserFieldNumber = 2;
  inline ::google::protobuf::uint32 current_user() const;
  inline void set_current_user(::google::protobuf::uint32 value);

  // optional uint32 send_card_count = 3;
  inline bool has_send_card_count() const;
  inline void clear_send_card_count();
  static const int kSendCardCountFieldNumber = 3;
  inline ::google::protobuf::uint32 send_card_count() const;
  inline void set_send_card_count(::google::protobuf::uint32 value);

  // repeated uint32 center_cards = 4;
  inline int center_cards_size() const;
  inline void clear_center_cards();
  static const int kCenterCardsFieldNumber = 4;
  inline ::google::protobuf::uint32 center_cards(int index) const;
  inline void set_center_cards(int index, ::google::protobuf::uint32 value);
  inline void add_center_cards(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      center_cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_center_cards();

  // @@protoc_insertion_point(class_scope:net.msg_texas_sendcard_rep)
 private:
  inline void set_has_public_card();
  inline void clear_has_public_card();
  inline void set_has_current_user();
  inline void clear_has_current_user();
  inline void set_has_send_card_count();
  inline void clear_has_send_card_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 public_card_;
  ::google::protobuf::uint32 current_user_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > center_cards_;
  ::google::protobuf::uint32 send_card_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_texas_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_texas_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_texas_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_texas_sendcard_rep* default_instance_;
};
// -------------------------------------------------------------------

class texas_win_chair : public ::google::protobuf::Message {
 public:
  texas_win_chair();
  virtual ~texas_win_chair();

  texas_win_chair(const texas_win_chair& from);

  inline texas_win_chair& operator=(const texas_win_chair& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const texas_win_chair& default_instance();

  void Swap(texas_win_chair* other);

  // implements Message ----------------------------------------------

  texas_win_chair* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const texas_win_chair& from);
  void MergeFrom(const texas_win_chair& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 win_chair = 1;
  inline int win_chair_size() const;
  inline void clear_win_chair();
  static const int kWinChairFieldNumber = 1;
  inline ::google::protobuf::uint32 win_chair(int index) const;
  inline void set_win_chair(int index, ::google::protobuf::uint32 value);
  inline void add_win_chair(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      win_chair() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_win_chair();

  // @@protoc_insertion_point(class_scope:net.texas_win_chair)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > win_chair_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_texas_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_texas_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_texas_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static texas_win_chair* default_instance_;
};
// -------------------------------------------------------------------

class msg_texas_game_end_rep : public ::google::protobuf::Message {
 public:
  msg_texas_game_end_rep();
  virtual ~msg_texas_game_end_rep();

  msg_texas_game_end_rep(const msg_texas_game_end_rep& from);

  inline msg_texas_game_end_rep& operator=(const msg_texas_game_end_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_texas_game_end_rep& default_instance();

  void Swap(msg_texas_game_end_rep* other);

  // implements Message ----------------------------------------------

  msg_texas_game_end_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_texas_game_end_rep& from);
  void MergeFrom(const msg_texas_game_end_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 total_end = 1;
  inline bool has_total_end() const;
  inline void clear_total_end();
  static const int kTotalEndFieldNumber = 1;
  inline ::google::protobuf::uint32 total_end() const;
  inline void set_total_end(::google::protobuf::uint32 value);

  // repeated int64 game_scores = 2;
  inline int game_scores_size() const;
  inline void clear_game_scores();
  static const int kGameScoresFieldNumber = 2;
  inline ::google::protobuf::int64 game_scores(int index) const;
  inline void set_game_scores(int index, ::google::protobuf::int64 value);
  inline void add_game_scores(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      game_scores() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_game_scores();

  // repeated .net.msg_cards card_datas = 3;
  inline int card_datas_size() const;
  inline void clear_card_datas();
  static const int kCardDatasFieldNumber = 3;
  inline const ::net::msg_cards& card_datas(int index) const;
  inline ::net::msg_cards* mutable_card_datas(int index);
  inline ::net::msg_cards* add_card_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::net::msg_cards >&
      card_datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::net::msg_cards >*
      mutable_card_datas();

  // repeated .net.msg_cards last_center_cardData = 4;
  inline int last_center_carddata_size() const;
  inline void clear_last_center_carddata();
  static const int kLastCenterCardDataFieldNumber = 4;
  inline const ::net::msg_cards& last_center_carddata(int index) const;
  inline ::net::msg_cards* mutable_last_center_carddata(int index);
  inline ::net::msg_cards* add_last_center_carddata();
  inline const ::google::protobuf::RepeatedPtrField< ::net::msg_cards >&
      last_center_carddata() const;
  inline ::google::protobuf::RepeatedPtrField< ::net::msg_cards >*
      mutable_last_center_carddata();

  // repeated .net.texas_win_chair win_chairs = 5;
  inline int win_chairs_size() const;
  inline void clear_win_chairs();
  static const int kWinChairsFieldNumber = 5;
  inline const ::net::texas_win_chair& win_chairs(int index) const;
  inline ::net::texas_win_chair* mutable_win_chairs(int index);
  inline ::net::texas_win_chair* add_win_chairs();
  inline const ::google::protobuf::RepeatedPtrField< ::net::texas_win_chair >&
      win_chairs() const;
  inline ::google::protobuf::RepeatedPtrField< ::net::texas_win_chair >*
      mutable_win_chairs();

  // @@protoc_insertion_point(class_scope:net.msg_texas_game_end_rep)
 private:
  inline void set_has_total_end();
  inline void clear_has_total_end();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > game_scores_;
  ::google::protobuf::RepeatedPtrField< ::net::msg_cards > card_datas_;
  ::google::protobuf::RepeatedPtrField< ::net::msg_cards > last_center_carddata_;
  ::google::protobuf::RepeatedPtrField< ::net::texas_win_chair > win_chairs_;
  ::google::protobuf::uint32 total_end_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_texas_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_texas_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_texas_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_texas_game_end_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_texas_buyin_req : public ::google::protobuf::Message {
 public:
  msg_texas_buyin_req();
  virtual ~msg_texas_buyin_req();

  msg_texas_buyin_req(const msg_texas_buyin_req& from);

  inline msg_texas_buyin_req& operator=(const msg_texas_buyin_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_texas_buyin_req& default_instance();

  void Swap(msg_texas_buyin_req* other);

  // implements Message ----------------------------------------------

  msg_texas_buyin_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_texas_buyin_req& from);
  void MergeFrom(const msg_texas_buyin_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 score = 1;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 1;
  inline ::google::protobuf::int64 score() const;
  inline void set_score(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:net.msg_texas_buyin_req)
 private:
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_texas_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_texas_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_texas_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_texas_buyin_req* default_instance_;
};
// -------------------------------------------------------------------

class msg_texas_buyin_rep : public ::google::protobuf::Message {
 public:
  msg_texas_buyin_rep();
  virtual ~msg_texas_buyin_rep();

  msg_texas_buyin_rep(const msg_texas_buyin_rep& from);

  inline msg_texas_buyin_rep& operator=(const msg_texas_buyin_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_texas_buyin_rep& default_instance();

  void Swap(msg_texas_buyin_rep* other);

  // implements Message ----------------------------------------------

  msg_texas_buyin_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_texas_buyin_rep& from);
  void MergeFrom(const msg_texas_buyin_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 score = 1;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 1;
  inline ::google::protobuf::int64 score() const;
  inline void set_score(::google::protobuf::int64 value);

  // optional uint32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_texas_buyin_rep)
 private:
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 score_;
  ::google::protobuf::uint32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_texas_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_texas_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_texas_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_texas_buyin_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_texas_buyin_next_req : public ::google::protobuf::Message {
 public:
  msg_texas_buyin_next_req();
  virtual ~msg_texas_buyin_next_req();

  msg_texas_buyin_next_req(const msg_texas_buyin_next_req& from);

  inline msg_texas_buyin_next_req& operator=(const msg_texas_buyin_next_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_texas_buyin_next_req& default_instance();

  void Swap(msg_texas_buyin_next_req* other);

  // implements Message ----------------------------------------------

  msg_texas_buyin_next_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_texas_buyin_next_req& from);
  void MergeFrom(const msg_texas_buyin_next_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 score = 1;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 1;
  inline ::google::protobuf::int64 score() const;
  inline void set_score(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:net.msg_texas_buyin_next_req)
 private:
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_texas_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_texas_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_texas_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_texas_buyin_next_req* default_instance_;
};
// -------------------------------------------------------------------

class msg_texas_buyin_next_rep : public ::google::protobuf::Message {
 public:
  msg_texas_buyin_next_rep();
  virtual ~msg_texas_buyin_next_rep();

  msg_texas_buyin_next_rep(const msg_texas_buyin_next_rep& from);

  inline msg_texas_buyin_next_rep& operator=(const msg_texas_buyin_next_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_texas_buyin_next_rep& default_instance();

  void Swap(msg_texas_buyin_next_rep* other);

  // implements Message ----------------------------------------------

  msg_texas_buyin_next_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_texas_buyin_next_rep& from);
  void MergeFrom(const msg_texas_buyin_next_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 score = 1;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 1;
  inline ::google::protobuf::int64 score() const;
  inline void set_score(::google::protobuf::int64 value);

  // optional uint32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_texas_buyin_next_rep)
 private:
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 score_;
  ::google::protobuf::uint32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_texas_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_texas_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_texas_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_texas_buyin_next_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_texas_buyin_next_suc_rep : public ::google::protobuf::Message {
 public:
  msg_texas_buyin_next_suc_rep();
  virtual ~msg_texas_buyin_next_suc_rep();

  msg_texas_buyin_next_suc_rep(const msg_texas_buyin_next_suc_rep& from);

  inline msg_texas_buyin_next_suc_rep& operator=(const msg_texas_buyin_next_suc_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_texas_buyin_next_suc_rep& default_instance();

  void Swap(msg_texas_buyin_next_suc_rep* other);

  // implements Message ----------------------------------------------

  msg_texas_buyin_next_suc_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_texas_buyin_next_suc_rep& from);
  void MergeFrom(const msg_texas_buyin_next_suc_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 score = 1;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 1;
  inline ::google::protobuf::int64 score() const;
  inline void set_score(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:net.msg_texas_buyin_next_suc_rep)
 private:
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_texas_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_texas_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_texas_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_texas_buyin_next_suc_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_texas_show_card_req : public ::google::protobuf::Message {
 public:
  msg_texas_show_card_req();
  virtual ~msg_texas_show_card_req();

  msg_texas_show_card_req(const msg_texas_show_card_req& from);

  inline msg_texas_show_card_req& operator=(const msg_texas_show_card_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_texas_show_card_req& default_instance();

  void Swap(msg_texas_show_card_req* other);

  // implements Message ----------------------------------------------

  msg_texas_show_card_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_texas_show_card_req& from);
  void MergeFrom(const msg_texas_show_card_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 cards = 1;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 1;
  inline ::google::protobuf::uint32 cards(int index) const;
  inline void set_cards(int index, ::google::protobuf::uint32 value);
  inline void add_cards(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cards();

  // @@protoc_insertion_point(class_scope:net.msg_texas_show_card_req)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cards_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_texas_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_texas_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_texas_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_texas_show_card_req* default_instance_;
};
// -------------------------------------------------------------------

class msg_texas_show_card_rep : public ::google::protobuf::Message {
 public:
  msg_texas_show_card_rep();
  virtual ~msg_texas_show_card_rep();

  msg_texas_show_card_rep(const msg_texas_show_card_rep& from);

  inline msg_texas_show_card_rep& operator=(const msg_texas_show_card_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_texas_show_card_rep& default_instance();

  void Swap(msg_texas_show_card_rep* other);

  // implements Message ----------------------------------------------

  msg_texas_show_card_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_texas_show_card_rep& from);
  void MergeFrom(const msg_texas_show_card_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 show_chairid = 1;
  inline bool has_show_chairid() const;
  inline void clear_show_chairid();
  static const int kShowChairidFieldNumber = 1;
  inline ::google::protobuf::uint32 show_chairid() const;
  inline void set_show_chairid(::google::protobuf::uint32 value);

  // repeated uint32 cards = 2;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 2;
  inline ::google::protobuf::uint32 cards(int index) const;
  inline void set_cards(int index, ::google::protobuf::uint32 value);
  inline void add_cards(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cards();

  // @@protoc_insertion_point(class_scope:net.msg_texas_show_card_rep)
 private:
  inline void set_has_show_chairid();
  inline void clear_has_show_chairid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cards_;
  ::google::protobuf::uint32 show_chairid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_texas_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_texas_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_texas_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_texas_show_card_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_texas_standup_table_rep : public ::google::protobuf::Message {
 public:
  msg_texas_standup_table_rep();
  virtual ~msg_texas_standup_table_rep();

  msg_texas_standup_table_rep(const msg_texas_standup_table_rep& from);

  inline msg_texas_standup_table_rep& operator=(const msg_texas_standup_table_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_texas_standup_table_rep& default_instance();

  void Swap(msg_texas_standup_table_rep* other);

  // implements Message ----------------------------------------------

  msg_texas_standup_table_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_texas_standup_table_rep& from);
  void MergeFrom(const msg_texas_standup_table_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reason = 1;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 1;
  inline ::google::protobuf::uint32 reason() const;
  inline void set_reason(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:net.msg_texas_standup_table_rep)
 private:
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_texas_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_texas_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_texas_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_texas_standup_table_rep* default_instance_;
};
// -------------------------------------------------------------------

class msg_texas_buyin_wait_standup_rep : public ::google::protobuf::Message {
 public:
  msg_texas_buyin_wait_standup_rep();
  virtual ~msg_texas_buyin_wait_standup_rep();

  msg_texas_buyin_wait_standup_rep(const msg_texas_buyin_wait_standup_rep& from);

  inline msg_texas_buyin_wait_standup_rep& operator=(const msg_texas_buyin_wait_standup_rep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_texas_buyin_wait_standup_rep& default_instance();

  void Swap(msg_texas_buyin_wait_standup_rep* other);

  // implements Message ----------------------------------------------

  msg_texas_buyin_wait_standup_rep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_texas_buyin_wait_standup_rep& from);
  void MergeFrom(const msg_texas_buyin_wait_standup_rep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 reason = 1;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 1;
  inline ::google::protobuf::int32 reason() const;
  inline void set_reason(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:net.msg_texas_buyin_wait_standup_rep)
 private:
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_texas_5flogic_5fmsg_2eproto();
  friend void protobuf_AssignDesc_texas_5flogic_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_texas_5flogic_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static msg_texas_buyin_wait_standup_rep* default_instance_;
};
// ===================================================================


// ===================================================================

// msg_texas_game_info_free_rep

// optional int64 cell_minscore = 1;
inline bool msg_texas_game_info_free_rep::has_cell_minscore() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_texas_game_info_free_rep::set_has_cell_minscore() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_texas_game_info_free_rep::clear_has_cell_minscore() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_texas_game_info_free_rep::clear_cell_minscore() {
  cell_minscore_ = GOOGLE_LONGLONG(0);
  clear_has_cell_minscore();
}
inline ::google::protobuf::int64 msg_texas_game_info_free_rep::cell_minscore() const {
  return cell_minscore_;
}
inline void msg_texas_game_info_free_rep::set_cell_minscore(::google::protobuf::int64 value) {
  set_has_cell_minscore();
  cell_minscore_ = value;
}

// optional int64 cell_maxscore = 2;
inline bool msg_texas_game_info_free_rep::has_cell_maxscore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_texas_game_info_free_rep::set_has_cell_maxscore() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_texas_game_info_free_rep::clear_has_cell_maxscore() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_texas_game_info_free_rep::clear_cell_maxscore() {
  cell_maxscore_ = GOOGLE_LONGLONG(0);
  clear_has_cell_maxscore();
}
inline ::google::protobuf::int64 msg_texas_game_info_free_rep::cell_maxscore() const {
  return cell_maxscore_;
}
inline void msg_texas_game_info_free_rep::set_cell_maxscore(::google::protobuf::int64 value) {
  set_has_cell_maxscore();
  cell_maxscore_ = value;
}

// optional int32 buyin_state = 3;
inline bool msg_texas_game_info_free_rep::has_buyin_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_texas_game_info_free_rep::set_has_buyin_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_texas_game_info_free_rep::clear_has_buyin_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_texas_game_info_free_rep::clear_buyin_state() {
  buyin_state_ = 0;
  clear_has_buyin_state();
}
inline ::google::protobuf::int32 msg_texas_game_info_free_rep::buyin_state() const {
  return buyin_state_;
}
inline void msg_texas_game_info_free_rep::set_buyin_state(::google::protobuf::int32 value) {
  set_has_buyin_state();
  buyin_state_ = value;
}

// -------------------------------------------------------------------

// msg_texas_game_info_play_rep

// optional int64 cell_score = 1;
inline bool msg_texas_game_info_play_rep::has_cell_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_texas_game_info_play_rep::set_has_cell_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_texas_game_info_play_rep::clear_has_cell_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_texas_game_info_play_rep::clear_cell_score() {
  cell_score_ = GOOGLE_LONGLONG(0);
  clear_has_cell_score();
}
inline ::google::protobuf::int64 msg_texas_game_info_play_rep::cell_score() const {
  return cell_score_;
}
inline void msg_texas_game_info_play_rep::set_cell_score(::google::protobuf::int64 value) {
  set_has_cell_score();
  cell_score_ = value;
}

// optional int64 turn_max_score = 2;
inline bool msg_texas_game_info_play_rep::has_turn_max_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_texas_game_info_play_rep::set_has_turn_max_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_texas_game_info_play_rep::clear_has_turn_max_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_texas_game_info_play_rep::clear_turn_max_score() {
  turn_max_score_ = GOOGLE_LONGLONG(0);
  clear_has_turn_max_score();
}
inline ::google::protobuf::int64 msg_texas_game_info_play_rep::turn_max_score() const {
  return turn_max_score_;
}
inline void msg_texas_game_info_play_rep::set_turn_max_score(::google::protobuf::int64 value) {
  set_has_turn_max_score();
  turn_max_score_ = value;
}

// optional int64 turn_less_score = 3;
inline bool msg_texas_game_info_play_rep::has_turn_less_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_texas_game_info_play_rep::set_has_turn_less_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_texas_game_info_play_rep::clear_has_turn_less_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_texas_game_info_play_rep::clear_turn_less_score() {
  turn_less_score_ = GOOGLE_LONGLONG(0);
  clear_has_turn_less_score();
}
inline ::google::protobuf::int64 msg_texas_game_info_play_rep::turn_less_score() const {
  return turn_less_score_;
}
inline void msg_texas_game_info_play_rep::set_turn_less_score(::google::protobuf::int64 value) {
  set_has_turn_less_score();
  turn_less_score_ = value;
}

// optional int64 cell_max_score = 4;
inline bool msg_texas_game_info_play_rep::has_cell_max_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_texas_game_info_play_rep::set_has_cell_max_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_texas_game_info_play_rep::clear_has_cell_max_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_texas_game_info_play_rep::clear_cell_max_score() {
  cell_max_score_ = GOOGLE_LONGLONG(0);
  clear_has_cell_max_score();
}
inline ::google::protobuf::int64 msg_texas_game_info_play_rep::cell_max_score() const {
  return cell_max_score_;
}
inline void msg_texas_game_info_play_rep::set_cell_max_score(::google::protobuf::int64 value) {
  set_has_cell_max_score();
  cell_max_score_ = value;
}

// optional int64 add_less_score = 5;
inline bool msg_texas_game_info_play_rep::has_add_less_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_texas_game_info_play_rep::set_has_add_less_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_texas_game_info_play_rep::clear_has_add_less_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_texas_game_info_play_rep::clear_add_less_score() {
  add_less_score_ = GOOGLE_LONGLONG(0);
  clear_has_add_less_score();
}
inline ::google::protobuf::int64 msg_texas_game_info_play_rep::add_less_score() const {
  return add_less_score_;
}
inline void msg_texas_game_info_play_rep::set_add_less_score(::google::protobuf::int64 value) {
  set_has_add_less_score();
  add_less_score_ = value;
}

// repeated int64 table_scores = 6;
inline int msg_texas_game_info_play_rep::table_scores_size() const {
  return table_scores_.size();
}
inline void msg_texas_game_info_play_rep::clear_table_scores() {
  table_scores_.Clear();
}
inline ::google::protobuf::int64 msg_texas_game_info_play_rep::table_scores(int index) const {
  return table_scores_.Get(index);
}
inline void msg_texas_game_info_play_rep::set_table_scores(int index, ::google::protobuf::int64 value) {
  table_scores_.Set(index, value);
}
inline void msg_texas_game_info_play_rep::add_table_scores(::google::protobuf::int64 value) {
  table_scores_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
msg_texas_game_info_play_rep::table_scores() const {
  return table_scores_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
msg_texas_game_info_play_rep::mutable_table_scores() {
  return &table_scores_;
}

// repeated int64 total_scores = 7;
inline int msg_texas_game_info_play_rep::total_scores_size() const {
  return total_scores_.size();
}
inline void msg_texas_game_info_play_rep::clear_total_scores() {
  total_scores_.Clear();
}
inline ::google::protobuf::int64 msg_texas_game_info_play_rep::total_scores(int index) const {
  return total_scores_.Get(index);
}
inline void msg_texas_game_info_play_rep::set_total_scores(int index, ::google::protobuf::int64 value) {
  total_scores_.Set(index, value);
}
inline void msg_texas_game_info_play_rep::add_total_scores(::google::protobuf::int64 value) {
  total_scores_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
msg_texas_game_info_play_rep::total_scores() const {
  return total_scores_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
msg_texas_game_info_play_rep::mutable_total_scores() {
  return &total_scores_;
}

// optional int64 center_score = 8;
inline bool msg_texas_game_info_play_rep::has_center_score() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void msg_texas_game_info_play_rep::set_has_center_score() {
  _has_bits_[0] |= 0x00000080u;
}
inline void msg_texas_game_info_play_rep::clear_has_center_score() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void msg_texas_game_info_play_rep::clear_center_score() {
  center_score_ = GOOGLE_LONGLONG(0);
  clear_has_center_score();
}
inline ::google::protobuf::int64 msg_texas_game_info_play_rep::center_score() const {
  return center_score_;
}
inline void msg_texas_game_info_play_rep::set_center_score(::google::protobuf::int64 value) {
  set_has_center_score();
  center_score_ = value;
}

// optional uint32 d_user = 9;
inline bool msg_texas_game_info_play_rep::has_d_user() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void msg_texas_game_info_play_rep::set_has_d_user() {
  _has_bits_[0] |= 0x00000100u;
}
inline void msg_texas_game_info_play_rep::clear_has_d_user() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void msg_texas_game_info_play_rep::clear_d_user() {
  d_user_ = 0u;
  clear_has_d_user();
}
inline ::google::protobuf::uint32 msg_texas_game_info_play_rep::d_user() const {
  return d_user_;
}
inline void msg_texas_game_info_play_rep::set_d_user(::google::protobuf::uint32 value) {
  set_has_d_user();
  d_user_ = value;
}

// optional uint32 current_user = 10;
inline bool msg_texas_game_info_play_rep::has_current_user() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void msg_texas_game_info_play_rep::set_has_current_user() {
  _has_bits_[0] |= 0x00000200u;
}
inline void msg_texas_game_info_play_rep::clear_has_current_user() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void msg_texas_game_info_play_rep::clear_current_user() {
  current_user_ = 0u;
  clear_has_current_user();
}
inline ::google::protobuf::uint32 msg_texas_game_info_play_rep::current_user() const {
  return current_user_;
}
inline void msg_texas_game_info_play_rep::set_current_user(::google::protobuf::uint32 value) {
  set_has_current_user();
  current_user_ = value;
}

// repeated uint32 play_status = 11;
inline int msg_texas_game_info_play_rep::play_status_size() const {
  return play_status_.size();
}
inline void msg_texas_game_info_play_rep::clear_play_status() {
  play_status_.Clear();
}
inline ::google::protobuf::uint32 msg_texas_game_info_play_rep::play_status(int index) const {
  return play_status_.Get(index);
}
inline void msg_texas_game_info_play_rep::set_play_status(int index, ::google::protobuf::uint32 value) {
  play_status_.Set(index, value);
}
inline void msg_texas_game_info_play_rep::add_play_status(::google::protobuf::uint32 value) {
  play_status_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
msg_texas_game_info_play_rep::play_status() const {
  return play_status_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
msg_texas_game_info_play_rep::mutable_play_status() {
  return &play_status_;
}

// optional uint32 balance_count = 12;
inline bool msg_texas_game_info_play_rep::has_balance_count() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void msg_texas_game_info_play_rep::set_has_balance_count() {
  _has_bits_[0] |= 0x00000800u;
}
inline void msg_texas_game_info_play_rep::clear_has_balance_count() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void msg_texas_game_info_play_rep::clear_balance_count() {
  balance_count_ = 0u;
  clear_has_balance_count();
}
inline ::google::protobuf::uint32 msg_texas_game_info_play_rep::balance_count() const {
  return balance_count_;
}
inline void msg_texas_game_info_play_rep::set_balance_count(::google::protobuf::uint32 value) {
  set_has_balance_count();
  balance_count_ = value;
}

// repeated uint32 center_cards = 13;
inline int msg_texas_game_info_play_rep::center_cards_size() const {
  return center_cards_.size();
}
inline void msg_texas_game_info_play_rep::clear_center_cards() {
  center_cards_.Clear();
}
inline ::google::protobuf::uint32 msg_texas_game_info_play_rep::center_cards(int index) const {
  return center_cards_.Get(index);
}
inline void msg_texas_game_info_play_rep::set_center_cards(int index, ::google::protobuf::uint32 value) {
  center_cards_.Set(index, value);
}
inline void msg_texas_game_info_play_rep::add_center_cards(::google::protobuf::uint32 value) {
  center_cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
msg_texas_game_info_play_rep::center_cards() const {
  return center_cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
msg_texas_game_info_play_rep::mutable_center_cards() {
  return &center_cards_;
}

// repeated uint32 hand_cards = 14;
inline int msg_texas_game_info_play_rep::hand_cards_size() const {
  return hand_cards_.size();
}
inline void msg_texas_game_info_play_rep::clear_hand_cards() {
  hand_cards_.Clear();
}
inline ::google::protobuf::uint32 msg_texas_game_info_play_rep::hand_cards(int index) const {
  return hand_cards_.Get(index);
}
inline void msg_texas_game_info_play_rep::set_hand_cards(int index, ::google::protobuf::uint32 value) {
  hand_cards_.Set(index, value);
}
inline void msg_texas_game_info_play_rep::add_hand_cards(::google::protobuf::uint32 value) {
  hand_cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
msg_texas_game_info_play_rep::hand_cards() const {
  return hand_cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
msg_texas_game_info_play_rep::mutable_hand_cards() {
  return &hand_cards_;
}

// optional uint32 oper_time = 15;
inline bool msg_texas_game_info_play_rep::has_oper_time() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void msg_texas_game_info_play_rep::set_has_oper_time() {
  _has_bits_[0] |= 0x00004000u;
}
inline void msg_texas_game_info_play_rep::clear_has_oper_time() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void msg_texas_game_info_play_rep::clear_oper_time() {
  oper_time_ = 0u;
  clear_has_oper_time();
}
inline ::google::protobuf::uint32 msg_texas_game_info_play_rep::oper_time() const {
  return oper_time_;
}
inline void msg_texas_game_info_play_rep::set_oper_time(::google::protobuf::uint32 value) {
  set_has_oper_time();
  oper_time_ = value;
}

// optional uint32 min_chipin_user = 16;
inline bool msg_texas_game_info_play_rep::has_min_chipin_user() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void msg_texas_game_info_play_rep::set_has_min_chipin_user() {
  _has_bits_[0] |= 0x00008000u;
}
inline void msg_texas_game_info_play_rep::clear_has_min_chipin_user() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void msg_texas_game_info_play_rep::clear_min_chipin_user() {
  min_chipin_user_ = 0u;
  clear_has_min_chipin_user();
}
inline ::google::protobuf::uint32 msg_texas_game_info_play_rep::min_chipin_user() const {
  return min_chipin_user_;
}
inline void msg_texas_game_info_play_rep::set_min_chipin_user(::google::protobuf::uint32 value) {
  set_has_min_chipin_user();
  min_chipin_user_ = value;
}

// optional uint32 max_chipin_user = 17;
inline bool msg_texas_game_info_play_rep::has_max_chipin_user() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void msg_texas_game_info_play_rep::set_has_max_chipin_user() {
  _has_bits_[0] |= 0x00010000u;
}
inline void msg_texas_game_info_play_rep::clear_has_max_chipin_user() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void msg_texas_game_info_play_rep::clear_max_chipin_user() {
  max_chipin_user_ = 0u;
  clear_has_max_chipin_user();
}
inline ::google::protobuf::uint32 msg_texas_game_info_play_rep::max_chipin_user() const {
  return max_chipin_user_;
}
inline void msg_texas_game_info_play_rep::set_max_chipin_user(::google::protobuf::uint32 value) {
  set_has_max_chipin_user();
  max_chipin_user_ = value;
}

// repeated uint32 card_chairid = 18;
inline int msg_texas_game_info_play_rep::card_chairid_size() const {
  return card_chairid_.size();
}
inline void msg_texas_game_info_play_rep::clear_card_chairid() {
  card_chairid_.Clear();
}
inline ::google::protobuf::uint32 msg_texas_game_info_play_rep::card_chairid(int index) const {
  return card_chairid_.Get(index);
}
inline void msg_texas_game_info_play_rep::set_card_chairid(int index, ::google::protobuf::uint32 value) {
  card_chairid_.Set(index, value);
}
inline void msg_texas_game_info_play_rep::add_card_chairid(::google::protobuf::uint32 value) {
  card_chairid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
msg_texas_game_info_play_rep::card_chairid() const {
  return card_chairid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
msg_texas_game_info_play_rep::mutable_card_chairid() {
  return &card_chairid_;
}

// optional int32 buyin_state = 19;
inline bool msg_texas_game_info_play_rep::has_buyin_state() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void msg_texas_game_info_play_rep::set_has_buyin_state() {
  _has_bits_[0] |= 0x00040000u;
}
inline void msg_texas_game_info_play_rep::clear_has_buyin_state() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void msg_texas_game_info_play_rep::clear_buyin_state() {
  buyin_state_ = 0;
  clear_has_buyin_state();
}
inline ::google::protobuf::int32 msg_texas_game_info_play_rep::buyin_state() const {
  return buyin_state_;
}
inline void msg_texas_game_info_play_rep::set_buyin_state(::google::protobuf::int32 value) {
  set_has_buyin_state();
  buyin_state_ = value;
}

// -------------------------------------------------------------------

// msg_texas_start_rep

// optional uint32 current_user = 1;
inline bool msg_texas_start_rep::has_current_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_texas_start_rep::set_has_current_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_texas_start_rep::clear_has_current_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_texas_start_rep::clear_current_user() {
  current_user_ = 0u;
  clear_has_current_user();
}
inline ::google::protobuf::uint32 msg_texas_start_rep::current_user() const {
  return current_user_;
}
inline void msg_texas_start_rep::set_current_user(::google::protobuf::uint32 value) {
  set_has_current_user();
  current_user_ = value;
}

// optional uint32 d_user = 2;
inline bool msg_texas_start_rep::has_d_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_texas_start_rep::set_has_d_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_texas_start_rep::clear_has_d_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_texas_start_rep::clear_d_user() {
  d_user_ = 0u;
  clear_has_d_user();
}
inline ::google::protobuf::uint32 msg_texas_start_rep::d_user() const {
  return d_user_;
}
inline void msg_texas_start_rep::set_d_user(::google::protobuf::uint32 value) {
  set_has_d_user();
  d_user_ = value;
}

// optional uint32 max_chipin_user = 3;
inline bool msg_texas_start_rep::has_max_chipin_user() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_texas_start_rep::set_has_max_chipin_user() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_texas_start_rep::clear_has_max_chipin_user() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_texas_start_rep::clear_max_chipin_user() {
  max_chipin_user_ = 0u;
  clear_has_max_chipin_user();
}
inline ::google::protobuf::uint32 msg_texas_start_rep::max_chipin_user() const {
  return max_chipin_user_;
}
inline void msg_texas_start_rep::set_max_chipin_user(::google::protobuf::uint32 value) {
  set_has_max_chipin_user();
  max_chipin_user_ = value;
}

// optional int64 cell_score = 4;
inline bool msg_texas_start_rep::has_cell_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_texas_start_rep::set_has_cell_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_texas_start_rep::clear_has_cell_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_texas_start_rep::clear_cell_score() {
  cell_score_ = GOOGLE_LONGLONG(0);
  clear_has_cell_score();
}
inline ::google::protobuf::int64 msg_texas_start_rep::cell_score() const {
  return cell_score_;
}
inline void msg_texas_start_rep::set_cell_score(::google::protobuf::int64 value) {
  set_has_cell_score();
  cell_score_ = value;
}

// optional int64 turn_max_score = 5;
inline bool msg_texas_start_rep::has_turn_max_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_texas_start_rep::set_has_turn_max_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_texas_start_rep::clear_has_turn_max_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_texas_start_rep::clear_turn_max_score() {
  turn_max_score_ = GOOGLE_LONGLONG(0);
  clear_has_turn_max_score();
}
inline ::google::protobuf::int64 msg_texas_start_rep::turn_max_score() const {
  return turn_max_score_;
}
inline void msg_texas_start_rep::set_turn_max_score(::google::protobuf::int64 value) {
  set_has_turn_max_score();
  turn_max_score_ = value;
}

// optional int64 turn_less_score = 6;
inline bool msg_texas_start_rep::has_turn_less_score() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_texas_start_rep::set_has_turn_less_score() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_texas_start_rep::clear_has_turn_less_score() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_texas_start_rep::clear_turn_less_score() {
  turn_less_score_ = GOOGLE_LONGLONG(0);
  clear_has_turn_less_score();
}
inline ::google::protobuf::int64 msg_texas_start_rep::turn_less_score() const {
  return turn_less_score_;
}
inline void msg_texas_start_rep::set_turn_less_score(::google::protobuf::int64 value) {
  set_has_turn_less_score();
  turn_less_score_ = value;
}

// optional int64 add_less_score = 7;
inline bool msg_texas_start_rep::has_add_less_score() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_texas_start_rep::set_has_add_less_score() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_texas_start_rep::clear_has_add_less_score() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_texas_start_rep::clear_add_less_score() {
  add_less_score_ = GOOGLE_LONGLONG(0);
  clear_has_add_less_score();
}
inline ::google::protobuf::int64 msg_texas_start_rep::add_less_score() const {
  return add_less_score_;
}
inline void msg_texas_start_rep::set_add_less_score(::google::protobuf::int64 value) {
  set_has_add_less_score();
  add_less_score_ = value;
}

// optional .net.msg_cards card_datas = 8;
inline bool msg_texas_start_rep::has_card_datas() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void msg_texas_start_rep::set_has_card_datas() {
  _has_bits_[0] |= 0x00000080u;
}
inline void msg_texas_start_rep::clear_has_card_datas() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void msg_texas_start_rep::clear_card_datas() {
  if (card_datas_ != NULL) card_datas_->::net::msg_cards::Clear();
  clear_has_card_datas();
}
inline const ::net::msg_cards& msg_texas_start_rep::card_datas() const {
  return card_datas_ != NULL ? *card_datas_ : *default_instance_->card_datas_;
}
inline ::net::msg_cards* msg_texas_start_rep::mutable_card_datas() {
  set_has_card_datas();
  if (card_datas_ == NULL) card_datas_ = new ::net::msg_cards;
  return card_datas_;
}
inline ::net::msg_cards* msg_texas_start_rep::release_card_datas() {
  clear_has_card_datas();
  ::net::msg_cards* temp = card_datas_;
  card_datas_ = NULL;
  return temp;
}
inline void msg_texas_start_rep::set_allocated_card_datas(::net::msg_cards* card_datas) {
  delete card_datas_;
  card_datas_ = card_datas;
  if (card_datas) {
    set_has_card_datas();
  } else {
    clear_has_card_datas();
  }
}

// optional uint32 min_chipin_user = 9;
inline bool msg_texas_start_rep::has_min_chipin_user() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void msg_texas_start_rep::set_has_min_chipin_user() {
  _has_bits_[0] |= 0x00000100u;
}
inline void msg_texas_start_rep::clear_has_min_chipin_user() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void msg_texas_start_rep::clear_min_chipin_user() {
  min_chipin_user_ = 0u;
  clear_has_min_chipin_user();
}
inline ::google::protobuf::uint32 msg_texas_start_rep::min_chipin_user() const {
  return min_chipin_user_;
}
inline void msg_texas_start_rep::set_min_chipin_user(::google::protobuf::uint32 value) {
  set_has_min_chipin_user();
  min_chipin_user_ = value;
}

// repeated uint32 card_chairid = 10;
inline int msg_texas_start_rep::card_chairid_size() const {
  return card_chairid_.size();
}
inline void msg_texas_start_rep::clear_card_chairid() {
  card_chairid_.Clear();
}
inline ::google::protobuf::uint32 msg_texas_start_rep::card_chairid(int index) const {
  return card_chairid_.Get(index);
}
inline void msg_texas_start_rep::set_card_chairid(int index, ::google::protobuf::uint32 value) {
  card_chairid_.Set(index, value);
}
inline void msg_texas_start_rep::add_card_chairid(::google::protobuf::uint32 value) {
  card_chairid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
msg_texas_start_rep::card_chairid() const {
  return card_chairid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
msg_texas_start_rep::mutable_card_chairid() {
  return &card_chairid_;
}

// -------------------------------------------------------------------

// msg_texas_addscore_req

// optional int64 add_score = 1;
inline bool msg_texas_addscore_req::has_add_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_texas_addscore_req::set_has_add_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_texas_addscore_req::clear_has_add_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_texas_addscore_req::clear_add_score() {
  add_score_ = GOOGLE_LONGLONG(0);
  clear_has_add_score();
}
inline ::google::protobuf::int64 msg_texas_addscore_req::add_score() const {
  return add_score_;
}
inline void msg_texas_addscore_req::set_add_score(::google::protobuf::int64 value) {
  set_has_add_score();
  add_score_ = value;
}

// -------------------------------------------------------------------

// msg_texas_addscore_rep

// optional uint32 current_user = 1;
inline bool msg_texas_addscore_rep::has_current_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_texas_addscore_rep::set_has_current_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_texas_addscore_rep::clear_has_current_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_texas_addscore_rep::clear_current_user() {
  current_user_ = 0u;
  clear_has_current_user();
}
inline ::google::protobuf::uint32 msg_texas_addscore_rep::current_user() const {
  return current_user_;
}
inline void msg_texas_addscore_rep::set_current_user(::google::protobuf::uint32 value) {
  set_has_current_user();
  current_user_ = value;
}

// optional uint32 addscore_user = 2;
inline bool msg_texas_addscore_rep::has_addscore_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_texas_addscore_rep::set_has_addscore_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_texas_addscore_rep::clear_has_addscore_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_texas_addscore_rep::clear_addscore_user() {
  addscore_user_ = 0u;
  clear_has_addscore_user();
}
inline ::google::protobuf::uint32 msg_texas_addscore_rep::addscore_user() const {
  return addscore_user_;
}
inline void msg_texas_addscore_rep::set_addscore_user(::google::protobuf::uint32 value) {
  set_has_addscore_user();
  addscore_user_ = value;
}

// optional int64 addscore_count = 3;
inline bool msg_texas_addscore_rep::has_addscore_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_texas_addscore_rep::set_has_addscore_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_texas_addscore_rep::clear_has_addscore_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_texas_addscore_rep::clear_addscore_count() {
  addscore_count_ = GOOGLE_LONGLONG(0);
  clear_has_addscore_count();
}
inline ::google::protobuf::int64 msg_texas_addscore_rep::addscore_count() const {
  return addscore_count_;
}
inline void msg_texas_addscore_rep::set_addscore_count(::google::protobuf::int64 value) {
  set_has_addscore_count();
  addscore_count_ = value;
}

// optional int64 turn_less_score = 4;
inline bool msg_texas_addscore_rep::has_turn_less_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_texas_addscore_rep::set_has_turn_less_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_texas_addscore_rep::clear_has_turn_less_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_texas_addscore_rep::clear_turn_less_score() {
  turn_less_score_ = GOOGLE_LONGLONG(0);
  clear_has_turn_less_score();
}
inline ::google::protobuf::int64 msg_texas_addscore_rep::turn_less_score() const {
  return turn_less_score_;
}
inline void msg_texas_addscore_rep::set_turn_less_score(::google::protobuf::int64 value) {
  set_has_turn_less_score();
  turn_less_score_ = value;
}

// optional int64 turn_max_score = 5;
inline bool msg_texas_addscore_rep::has_turn_max_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_texas_addscore_rep::set_has_turn_max_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_texas_addscore_rep::clear_has_turn_max_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_texas_addscore_rep::clear_turn_max_score() {
  turn_max_score_ = GOOGLE_LONGLONG(0);
  clear_has_turn_max_score();
}
inline ::google::protobuf::int64 msg_texas_addscore_rep::turn_max_score() const {
  return turn_max_score_;
}
inline void msg_texas_addscore_rep::set_turn_max_score(::google::protobuf::int64 value) {
  set_has_turn_max_score();
  turn_max_score_ = value;
}

// optional int64 add_less_score = 6;
inline bool msg_texas_addscore_rep::has_add_less_score() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_texas_addscore_rep::set_has_add_less_score() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_texas_addscore_rep::clear_has_add_less_score() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_texas_addscore_rep::clear_add_less_score() {
  add_less_score_ = GOOGLE_LONGLONG(0);
  clear_has_add_less_score();
}
inline ::google::protobuf::int64 msg_texas_addscore_rep::add_less_score() const {
  return add_less_score_;
}
inline void msg_texas_addscore_rep::set_add_less_score(::google::protobuf::int64 value) {
  set_has_add_less_score();
  add_less_score_ = value;
}

// repeated uint32 showhands = 7;
inline int msg_texas_addscore_rep::showhands_size() const {
  return showhands_.size();
}
inline void msg_texas_addscore_rep::clear_showhands() {
  showhands_.Clear();
}
inline ::google::protobuf::uint32 msg_texas_addscore_rep::showhands(int index) const {
  return showhands_.Get(index);
}
inline void msg_texas_addscore_rep::set_showhands(int index, ::google::protobuf::uint32 value) {
  showhands_.Set(index, value);
}
inline void msg_texas_addscore_rep::add_showhands(::google::protobuf::uint32 value) {
  showhands_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
msg_texas_addscore_rep::showhands() const {
  return showhands_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
msg_texas_addscore_rep::mutable_showhands() {
  return &showhands_;
}

// -------------------------------------------------------------------

// msg_texas_giveup_req

// optional uint32 giveup_reason = 1;
inline bool msg_texas_giveup_req::has_giveup_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_texas_giveup_req::set_has_giveup_reason() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_texas_giveup_req::clear_has_giveup_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_texas_giveup_req::clear_giveup_reason() {
  giveup_reason_ = 0u;
  clear_has_giveup_reason();
}
inline ::google::protobuf::uint32 msg_texas_giveup_req::giveup_reason() const {
  return giveup_reason_;
}
inline void msg_texas_giveup_req::set_giveup_reason(::google::protobuf::uint32 value) {
  set_has_giveup_reason();
  giveup_reason_ = value;
}

// -------------------------------------------------------------------

// msg_texas_giveup_rep

// optional uint32 giveup_user = 1;
inline bool msg_texas_giveup_rep::has_giveup_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_texas_giveup_rep::set_has_giveup_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_texas_giveup_rep::clear_has_giveup_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_texas_giveup_rep::clear_giveup_user() {
  giveup_user_ = 0u;
  clear_has_giveup_user();
}
inline ::google::protobuf::uint32 msg_texas_giveup_rep::giveup_user() const {
  return giveup_user_;
}
inline void msg_texas_giveup_rep::set_giveup_user(::google::protobuf::uint32 value) {
  set_has_giveup_user();
  giveup_user_ = value;
}

// optional int64 lost_score = 2;
inline bool msg_texas_giveup_rep::has_lost_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_texas_giveup_rep::set_has_lost_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_texas_giveup_rep::clear_has_lost_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_texas_giveup_rep::clear_lost_score() {
  lost_score_ = GOOGLE_LONGLONG(0);
  clear_has_lost_score();
}
inline ::google::protobuf::int64 msg_texas_giveup_rep::lost_score() const {
  return lost_score_;
}
inline void msg_texas_giveup_rep::set_lost_score(::google::protobuf::int64 value) {
  set_has_lost_score();
  lost_score_ = value;
}

// -------------------------------------------------------------------

// msg_texas_sendcard_rep

// optional uint32 public_card = 1;
inline bool msg_texas_sendcard_rep::has_public_card() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_texas_sendcard_rep::set_has_public_card() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_texas_sendcard_rep::clear_has_public_card() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_texas_sendcard_rep::clear_public_card() {
  public_card_ = 0u;
  clear_has_public_card();
}
inline ::google::protobuf::uint32 msg_texas_sendcard_rep::public_card() const {
  return public_card_;
}
inline void msg_texas_sendcard_rep::set_public_card(::google::protobuf::uint32 value) {
  set_has_public_card();
  public_card_ = value;
}

// optional uint32 current_user = 2;
inline bool msg_texas_sendcard_rep::has_current_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_texas_sendcard_rep::set_has_current_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_texas_sendcard_rep::clear_has_current_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_texas_sendcard_rep::clear_current_user() {
  current_user_ = 0u;
  clear_has_current_user();
}
inline ::google::protobuf::uint32 msg_texas_sendcard_rep::current_user() const {
  return current_user_;
}
inline void msg_texas_sendcard_rep::set_current_user(::google::protobuf::uint32 value) {
  set_has_current_user();
  current_user_ = value;
}

// optional uint32 send_card_count = 3;
inline bool msg_texas_sendcard_rep::has_send_card_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_texas_sendcard_rep::set_has_send_card_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_texas_sendcard_rep::clear_has_send_card_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_texas_sendcard_rep::clear_send_card_count() {
  send_card_count_ = 0u;
  clear_has_send_card_count();
}
inline ::google::protobuf::uint32 msg_texas_sendcard_rep::send_card_count() const {
  return send_card_count_;
}
inline void msg_texas_sendcard_rep::set_send_card_count(::google::protobuf::uint32 value) {
  set_has_send_card_count();
  send_card_count_ = value;
}

// repeated uint32 center_cards = 4;
inline int msg_texas_sendcard_rep::center_cards_size() const {
  return center_cards_.size();
}
inline void msg_texas_sendcard_rep::clear_center_cards() {
  center_cards_.Clear();
}
inline ::google::protobuf::uint32 msg_texas_sendcard_rep::center_cards(int index) const {
  return center_cards_.Get(index);
}
inline void msg_texas_sendcard_rep::set_center_cards(int index, ::google::protobuf::uint32 value) {
  center_cards_.Set(index, value);
}
inline void msg_texas_sendcard_rep::add_center_cards(::google::protobuf::uint32 value) {
  center_cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
msg_texas_sendcard_rep::center_cards() const {
  return center_cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
msg_texas_sendcard_rep::mutable_center_cards() {
  return &center_cards_;
}

// -------------------------------------------------------------------

// texas_win_chair

// repeated uint32 win_chair = 1;
inline int texas_win_chair::win_chair_size() const {
  return win_chair_.size();
}
inline void texas_win_chair::clear_win_chair() {
  win_chair_.Clear();
}
inline ::google::protobuf::uint32 texas_win_chair::win_chair(int index) const {
  return win_chair_.Get(index);
}
inline void texas_win_chair::set_win_chair(int index, ::google::protobuf::uint32 value) {
  win_chair_.Set(index, value);
}
inline void texas_win_chair::add_win_chair(::google::protobuf::uint32 value) {
  win_chair_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
texas_win_chair::win_chair() const {
  return win_chair_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
texas_win_chair::mutable_win_chair() {
  return &win_chair_;
}

// -------------------------------------------------------------------

// msg_texas_game_end_rep

// optional uint32 total_end = 1;
inline bool msg_texas_game_end_rep::has_total_end() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_texas_game_end_rep::set_has_total_end() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_texas_game_end_rep::clear_has_total_end() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_texas_game_end_rep::clear_total_end() {
  total_end_ = 0u;
  clear_has_total_end();
}
inline ::google::protobuf::uint32 msg_texas_game_end_rep::total_end() const {
  return total_end_;
}
inline void msg_texas_game_end_rep::set_total_end(::google::protobuf::uint32 value) {
  set_has_total_end();
  total_end_ = value;
}

// repeated int64 game_scores = 2;
inline int msg_texas_game_end_rep::game_scores_size() const {
  return game_scores_.size();
}
inline void msg_texas_game_end_rep::clear_game_scores() {
  game_scores_.Clear();
}
inline ::google::protobuf::int64 msg_texas_game_end_rep::game_scores(int index) const {
  return game_scores_.Get(index);
}
inline void msg_texas_game_end_rep::set_game_scores(int index, ::google::protobuf::int64 value) {
  game_scores_.Set(index, value);
}
inline void msg_texas_game_end_rep::add_game_scores(::google::protobuf::int64 value) {
  game_scores_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
msg_texas_game_end_rep::game_scores() const {
  return game_scores_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
msg_texas_game_end_rep::mutable_game_scores() {
  return &game_scores_;
}

// repeated .net.msg_cards card_datas = 3;
inline int msg_texas_game_end_rep::card_datas_size() const {
  return card_datas_.size();
}
inline void msg_texas_game_end_rep::clear_card_datas() {
  card_datas_.Clear();
}
inline const ::net::msg_cards& msg_texas_game_end_rep::card_datas(int index) const {
  return card_datas_.Get(index);
}
inline ::net::msg_cards* msg_texas_game_end_rep::mutable_card_datas(int index) {
  return card_datas_.Mutable(index);
}
inline ::net::msg_cards* msg_texas_game_end_rep::add_card_datas() {
  return card_datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::net::msg_cards >&
msg_texas_game_end_rep::card_datas() const {
  return card_datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::net::msg_cards >*
msg_texas_game_end_rep::mutable_card_datas() {
  return &card_datas_;
}

// repeated .net.msg_cards last_center_cardData = 4;
inline int msg_texas_game_end_rep::last_center_carddata_size() const {
  return last_center_carddata_.size();
}
inline void msg_texas_game_end_rep::clear_last_center_carddata() {
  last_center_carddata_.Clear();
}
inline const ::net::msg_cards& msg_texas_game_end_rep::last_center_carddata(int index) const {
  return last_center_carddata_.Get(index);
}
inline ::net::msg_cards* msg_texas_game_end_rep::mutable_last_center_carddata(int index) {
  return last_center_carddata_.Mutable(index);
}
inline ::net::msg_cards* msg_texas_game_end_rep::add_last_center_carddata() {
  return last_center_carddata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::net::msg_cards >&
msg_texas_game_end_rep::last_center_carddata() const {
  return last_center_carddata_;
}
inline ::google::protobuf::RepeatedPtrField< ::net::msg_cards >*
msg_texas_game_end_rep::mutable_last_center_carddata() {
  return &last_center_carddata_;
}

// repeated .net.texas_win_chair win_chairs = 5;
inline int msg_texas_game_end_rep::win_chairs_size() const {
  return win_chairs_.size();
}
inline void msg_texas_game_end_rep::clear_win_chairs() {
  win_chairs_.Clear();
}
inline const ::net::texas_win_chair& msg_texas_game_end_rep::win_chairs(int index) const {
  return win_chairs_.Get(index);
}
inline ::net::texas_win_chair* msg_texas_game_end_rep::mutable_win_chairs(int index) {
  return win_chairs_.Mutable(index);
}
inline ::net::texas_win_chair* msg_texas_game_end_rep::add_win_chairs() {
  return win_chairs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::net::texas_win_chair >&
msg_texas_game_end_rep::win_chairs() const {
  return win_chairs_;
}
inline ::google::protobuf::RepeatedPtrField< ::net::texas_win_chair >*
msg_texas_game_end_rep::mutable_win_chairs() {
  return &win_chairs_;
}

// -------------------------------------------------------------------

// msg_texas_buyin_req

// optional int64 score = 1;
inline bool msg_texas_buyin_req::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_texas_buyin_req::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_texas_buyin_req::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_texas_buyin_req::clear_score() {
  score_ = GOOGLE_LONGLONG(0);
  clear_has_score();
}
inline ::google::protobuf::int64 msg_texas_buyin_req::score() const {
  return score_;
}
inline void msg_texas_buyin_req::set_score(::google::protobuf::int64 value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// msg_texas_buyin_rep

// optional int64 score = 1;
inline bool msg_texas_buyin_rep::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_texas_buyin_rep::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_texas_buyin_rep::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_texas_buyin_rep::clear_score() {
  score_ = GOOGLE_LONGLONG(0);
  clear_has_score();
}
inline ::google::protobuf::int64 msg_texas_buyin_rep::score() const {
  return score_;
}
inline void msg_texas_buyin_rep::set_score(::google::protobuf::int64 value) {
  set_has_score();
  score_ = value;
}

// optional uint32 result = 2;
inline bool msg_texas_buyin_rep::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_texas_buyin_rep::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_texas_buyin_rep::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_texas_buyin_rep::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 msg_texas_buyin_rep::result() const {
  return result_;
}
inline void msg_texas_buyin_rep::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// msg_texas_buyin_next_req

// optional int64 score = 1;
inline bool msg_texas_buyin_next_req::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_texas_buyin_next_req::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_texas_buyin_next_req::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_texas_buyin_next_req::clear_score() {
  score_ = GOOGLE_LONGLONG(0);
  clear_has_score();
}
inline ::google::protobuf::int64 msg_texas_buyin_next_req::score() const {
  return score_;
}
inline void msg_texas_buyin_next_req::set_score(::google::protobuf::int64 value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// msg_texas_buyin_next_rep

// optional int64 score = 1;
inline bool msg_texas_buyin_next_rep::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_texas_buyin_next_rep::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_texas_buyin_next_rep::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_texas_buyin_next_rep::clear_score() {
  score_ = GOOGLE_LONGLONG(0);
  clear_has_score();
}
inline ::google::protobuf::int64 msg_texas_buyin_next_rep::score() const {
  return score_;
}
inline void msg_texas_buyin_next_rep::set_score(::google::protobuf::int64 value) {
  set_has_score();
  score_ = value;
}

// optional uint32 result = 2;
inline bool msg_texas_buyin_next_rep::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_texas_buyin_next_rep::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_texas_buyin_next_rep::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_texas_buyin_next_rep::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 msg_texas_buyin_next_rep::result() const {
  return result_;
}
inline void msg_texas_buyin_next_rep::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// msg_texas_buyin_next_suc_rep

// optional int64 score = 1;
inline bool msg_texas_buyin_next_suc_rep::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_texas_buyin_next_suc_rep::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_texas_buyin_next_suc_rep::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_texas_buyin_next_suc_rep::clear_score() {
  score_ = GOOGLE_LONGLONG(0);
  clear_has_score();
}
inline ::google::protobuf::int64 msg_texas_buyin_next_suc_rep::score() const {
  return score_;
}
inline void msg_texas_buyin_next_suc_rep::set_score(::google::protobuf::int64 value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// msg_texas_show_card_req

// repeated uint32 cards = 1;
inline int msg_texas_show_card_req::cards_size() const {
  return cards_.size();
}
inline void msg_texas_show_card_req::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::uint32 msg_texas_show_card_req::cards(int index) const {
  return cards_.Get(index);
}
inline void msg_texas_show_card_req::set_cards(int index, ::google::protobuf::uint32 value) {
  cards_.Set(index, value);
}
inline void msg_texas_show_card_req::add_cards(::google::protobuf::uint32 value) {
  cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
msg_texas_show_card_req::cards() const {
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
msg_texas_show_card_req::mutable_cards() {
  return &cards_;
}

// -------------------------------------------------------------------

// msg_texas_show_card_rep

// optional uint32 show_chairid = 1;
inline bool msg_texas_show_card_rep::has_show_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_texas_show_card_rep::set_has_show_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_texas_show_card_rep::clear_has_show_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_texas_show_card_rep::clear_show_chairid() {
  show_chairid_ = 0u;
  clear_has_show_chairid();
}
inline ::google::protobuf::uint32 msg_texas_show_card_rep::show_chairid() const {
  return show_chairid_;
}
inline void msg_texas_show_card_rep::set_show_chairid(::google::protobuf::uint32 value) {
  set_has_show_chairid();
  show_chairid_ = value;
}

// repeated uint32 cards = 2;
inline int msg_texas_show_card_rep::cards_size() const {
  return cards_.size();
}
inline void msg_texas_show_card_rep::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::uint32 msg_texas_show_card_rep::cards(int index) const {
  return cards_.Get(index);
}
inline void msg_texas_show_card_rep::set_cards(int index, ::google::protobuf::uint32 value) {
  cards_.Set(index, value);
}
inline void msg_texas_show_card_rep::add_cards(::google::protobuf::uint32 value) {
  cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
msg_texas_show_card_rep::cards() const {
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
msg_texas_show_card_rep::mutable_cards() {
  return &cards_;
}

// -------------------------------------------------------------------

// msg_texas_standup_table_rep

// optional uint32 reason = 1;
inline bool msg_texas_standup_table_rep::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_texas_standup_table_rep::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_texas_standup_table_rep::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_texas_standup_table_rep::clear_reason() {
  reason_ = 0u;
  clear_has_reason();
}
inline ::google::protobuf::uint32 msg_texas_standup_table_rep::reason() const {
  return reason_;
}
inline void msg_texas_standup_table_rep::set_reason(::google::protobuf::uint32 value) {
  set_has_reason();
  reason_ = value;
}

// -------------------------------------------------------------------

// msg_texas_buyin_wait_standup_rep

// optional int32 reason = 1;
inline bool msg_texas_buyin_wait_standup_rep::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_texas_buyin_wait_standup_rep::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_texas_buyin_wait_standup_rep::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_texas_buyin_wait_standup_rep::clear_reason() {
  reason_ = 0;
  clear_has_reason();
}
inline ::google::protobuf::int32 msg_texas_buyin_wait_standup_rep::reason() const {
  return reason_;
}
inline void msg_texas_buyin_wait_standup_rep::set_reason(::google::protobuf::int32 value) {
  set_has_reason();
  reason_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace net

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_texas_5flogic_5fmsg_2eproto__INCLUDED
